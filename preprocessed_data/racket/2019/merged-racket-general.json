{
  "processing_date": "2025-09-20T14:24:52.931046",
  "source_file": "C:\\Users\\sharo\\Desktop\\mini-project\\Software-related-Slack-Chats-with-Disentangled-Conversations\\data\\racket\\2019\\merged-racket-general.xml",
  "total_conversations": 711,
  "conversations": [
    {
      "conversation_id": "1",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Voted to reopen.\nPriscila: Two more votes are needed.\nMai: Priscila I can help. What do I need to do?\nPriscila: Go to: <[URL]\nPriscila: Then click reopen.\nMai: Ah, I don’t see that link/button because my reputation points are too low.\nPriscila: No worries.\nBoris: I deleted the rktvk package for you. Sorry for the delay! Christmas!\nPriscila: Can anyone explain why this program results in different numbers each time it is run?\nPriscila: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 2168.65,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Boris",
          "Mai",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2018-12-31T05:06:57.053700",
          "text": "Voted to reopen."
        },
        {
          "user": "Priscila",
          "timestamp": "2018-12-31T05:07:13.054000",
          "text": "Two more votes are needed."
        },
        {
          "user": "Mai",
          "timestamp": "2018-12-31T05:16:43.054200",
          "text": "<@Priscila> I can help. What do I need to do?"
        },
        {
          "user": "Priscila",
          "timestamp": "2018-12-31T05:17:11.054600",
          "text": "Go to: <https://stackoverflow.com/questions/53937982/source-code-documentation-in-racket-scheme>"
        },
        {
          "user": "Priscila",
          "timestamp": "2018-12-31T05:17:19.055000",
          "text": "Then click reopen."
        },
        {
          "user": "Mai",
          "timestamp": "2018-12-31T05:18:32.055900",
          "text": "Ah, I don’t see that link/button because my reputation points are too low."
        },
        {
          "user": "Priscila",
          "timestamp": "2018-12-31T05:18:44.056100",
          "text": "No worries."
        },
        {
          "user": "Boris",
          "timestamp": "2018-12-31T16:19:07.056200",
          "text": "I deleted the rktvk package for you. Sorry for the delay! Christmas!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T17:15:26.057400",
          "text": "Can anyone explain why this program results in different numbers each time it is run?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T17:15:36.057700",
          "text": "```#lang racket\n(require pict)\n(send (let/ec return (pict-&gt;bitmap (dc (λ (dc dx dy) (return (send dc get-pen))) 1 1)))\n        get-width)```"
        }
      ]
    },
    {
      "conversation_id": "2",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Luis: Thank you very much",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Luis"
        ]
      },
      "timeline": [
        {
          "user": "Luis",
          "timestamp": "2019-01-01T11:17:37.056600",
          "text": "Thank you very much"
        }
      ]
    },
    {
      "conversation_id": "3",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeffie: The [CODE] pict is called twice, the fist time with an un-initialized draw context whose pen returns a different width each time. The second time, [CODE] is called with a device context that has a default pen with a width of 1. Try running this program several times:\nJeffie: [CODE_BLOCK]\nPriscila: Jeffie Thanks!\nPriscila: Hmm. Wonder why it is called twice.\nPriscila: That doesn't seem right.\nJeffie: The first time it is called when the [CODE] pict object is constructed. This code calls it once, and produces random values [CODE_BLOCK]\nJeffie: Evaluating x multiple times will than call the lambda with a device context that always has a pen of width 1",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 11.05,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeffie",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T18:10:17.059700",
          "text": "The `dc` pict is called twice, the fist time with an un-initialized draw context whose pen returns a different width each time.  The second time, `dc` is called with a device context that has a default pen with a width of 1.  Try running this program several times:"
        },
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T18:10:27.059900",
          "text": "```\n#lang racket\n(require pict)\n(pict-&gt;bitmap (dc (λ (dc dx dy) (printf \"*** ~a~%\" (send (send dc get-pen) get-width))) 1 1))\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T18:12:06.060500",
          "text": "<@Jeffie> Thanks!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T18:14:05.061700",
          "text": "Hmm. Wonder why it is called twice."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T18:14:52.062000",
          "text": "That doesn't seem right."
        },
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T18:20:29.062700",
          "text": "The first time it is called when the `dc` pict object is constructed.  This code calls it once, and produces random values\n```\n#lang racket\n(require pict)\n(define x (dc (λ (dc dx dy) (printf \"*** ~a~%\" (send (send dc get-pen) get-width))) 1 1))\n```"
        },
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T18:21:20.063500",
          "text": "Evaluating x multiple times will than call the lambda with a device context that always has a pen of width 1"
        }
      ]
    },
    {
      "conversation_id": "4",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: IIRC the contract on [CODE] invokes the function with some random values as a sort of fuzz check?\nPriscila: So that means that all picts takes twice as much to to evaluate (than is strictly needed)?\nPriscila: The contract is: [CODE_BLOCK]\nPriscila: Looks ok, I think.\nPriscila: But I think you are on to something (wrt contracts).\nPriscila: This results in 1 every time:\nPriscila: [CODE_BLOCK]\nPriscila: (changed dc to unsafe-dc)\nJeffie: [CODE] calls draw to check that it restores the state?\nPriscila: Oh.: [CODE_BLOCK]\nJeffie: [CODE_BLOCK]\nJeffie: The above fails the contract even though the pict is not rendered\nPriscila: The problem here is that the call [CODE] could take a long time.\nPriscila: How often is [CODE] called? Every time the pict is rendered?\nTambra: Priscila IIRC it’s called only when the contract is attached\nTambra: but i may be misremembering\nJeffie: based on the code examples above, it is called only when the pict is created, not when it is rendered\nTambra: ^ yeah that sounds right\nPriscila: So what happens if I have a pict that when drawn relies on creating subpicts?\nPriscila: Let's say p is (above p1 p2).\nPriscila: Where p1 and p2 are pictures to be created.\nPriscila: Will the draw operation of, say, p1 be called twice or four times?\nTambra: if p1 and p2 are created by your [CODE] drawer, it will be called twice.\nTambra: the draw operation is splatted directly into the picts internal drawing structure, and isn’t wrapped by a contract that calls [CODE]\nTambra: <[URL]\nTambra: if you find it’s *reeeallllyy* slow, or the extra side effects are getting in the way, you could use [CODE]\nPriscila: That or single out the case width=0 and height=0.\nPriscila: I have quite a few different uses of [CODE] in metapict - which depends heavily on picts within picts.\nPriscila: Thanks for the help.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 29,
        "duration_minutes": 32.88,
        "contains_question": true,
        "action_keywords": [
          "create",
          "let's",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Jeffie",
          "Priscila",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-01T18:55:35.064200",
          "text": "IIRC the contract on `dc` invokes the function with some random values as a sort of fuzz check?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:01:03.065100",
          "text": "So that means that all picts takes twice as much to to evaluate (than is strictly needed)?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:03:04.065400",
          "text": "The contract is:\n```[dc (-&gt;i ([draw (-&gt; (is-a?/c dc&lt;%&gt;) real? real? any)]\n            [w real?]\n            [h real?])\n           ([d (or/c #f real?)]\n            [a (or/c #f real?)])\n           #:pre/name (draw)\n           \"draw proc does not restore the dc state after being called\"\n           (does-draw-restore-the-state-after-being-called? draw)\n           [p pict?])]```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:05:04.065600",
          "text": "Looks ok, I think."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:06:25.066100",
          "text": "But I think you are on to something (wrt contracts)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:06:32.066400",
          "text": "This results in 1 every time:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:06:37.066600",
          "text": "```(send (let/ec return (pict-&gt;bitmap (unsafe-dc (λ (dc dx dy) (return (send dc get-pen))) 1 1)))\n        get-width)```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:06:46.067000",
          "text": "(changed dc to unsafe-dc)"
        },
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T19:07:11.067500",
          "text": "`does-draw-restore-the-state-after-being-called?` calls draw to check that it restores the state?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:08:18.068100",
          "text": "Oh.:\n```(define (does-draw-restore-the-state-after-being-called? draw)\n  (define bdc (new bitmap-dc% [bitmap (make-bitmap 1 1)]))\n     (prandomize-state bdc)\n     (define old-state (get-dc-state bdc))\n     (draw bdc 0 0)\n     (equal? (get-dc-state bdc) old-state))```"
        },
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T19:09:06.068500",
          "text": "```\n#lang racket\n(require pict racket/draw)\n(define p (send the-pen-list find-or-create-pen \"black\" 1 'solid))\n(define x (dc (λ (dc dx dy) (send dc set-pen p)) 1 1))\n```"
        },
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T19:09:24.069000",
          "text": "The above fails the contract even though the pict is not rendered"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:11:10.070000",
          "text": "The problem here is that the call `(draw bdc 0 0)` could take a long time."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:11:34.070500",
          "text": "How often is `does-draw-restore-the-state-after-being-called?` called?  Every time the pict is rendered?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-01T19:12:33.071000",
          "text": "<@Priscila> IIRC it’s called only when the contract is attached"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-01T19:12:40.071300",
          "text": "but i may be misremembering"
        },
        {
          "user": "Jeffie",
          "timestamp": "2019-01-01T19:13:52.071900",
          "text": "based on the code examples above, it is called only when the pict is created, not when it is rendered"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-01T19:15:02.072300",
          "text": "^ yeah that sounds right"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:15:33.072900",
          "text": "So what happens if I have a pict that when drawn relies on creating subpicts?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:16:01.073400",
          "text": "Let's say p is (above p1 p2)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:16:13.073700",
          "text": "Where p1 and p2 are pictures to be created."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:16:36.074500",
          "text": "Will the draw operation of, say, p1 be called twice or four times?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-01T19:18:52.075000",
          "text": "if p1 and p2 are created by your `dc` drawer, it will be called twice."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-01T19:19:26.075800",
          "text": "the draw operation is splatted directly into the picts internal drawing structure, and isn’t wrapped by a contract that calls `does-draw-restore-the-state-after-being-called?`"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-01T19:19:56.076000",
          "text": "<https://github.com/racket/pict/blob/0b0e7a9a6562a07ad9cbe14c8059d1ea34c66803/pict-lib/pict/private/pict.rkt#L1449>"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-01T19:22:00.076800",
          "text": "if you find it’s *reeeallllyy* slow, or the extra side effects are getting in the way, you could use `unsafe-dc`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:23:56.077500",
          "text": "That or single out the case width=0 and height=0."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:24:55.078300",
          "text": "I have quite a few different uses of `dc` in metapict - which depends heavily on picts within picts."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-01T19:28:28.080000",
          "text": "Thanks for the help."
        }
      ]
    },
    {
      "conversation_id": "5",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Stephnie: Boris could you also check the r-linq package? I have the same issue.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Stephnie"
        ]
      },
      "timeline": [
        {
          "user": "Stephnie",
          "timestamp": "2019-01-02T14:57:38.080600",
          "text": "<@Boris> could you also check the r-linq package? I have the same issue."
        }
      ]
    },
    {
      "conversation_id": "6",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Clarinda I'd posted this a couple weeks ago and it scrolled by: <[URL] I was wondering if you had any quick reaction? Even just, \"Yep, that sounds as-expected\", or, \"You're probably doing something wrong\". (The TL;DR is [CODE] _seems_ to lose datagrams around the time of a major GC.)\nClarinda: I haven’t actually tried any experiments, but it would make sense for the OS to drop a Racket socket’s packets around full-GC time if they’re being sent quickly from a different process. (Since Racket won’t check for messages during a GC, the socket’s buffer could fill up, and a full GC can take a while.)\nJulia: Clarinda That makes sense. The major GCs were something like 60-80 ms. Thanks! Confirming what's reasonable to expect, is a huge help.\nJulia: I tried incremental collection and that made the lossage more even, less bursty.\nJulia: I _might_ try doing the \"lower level\" rx in a dedicated place, using an allocating-avoiding style. OTOH not sure how much less loss and therefore fewer retransmits that would really get; maybe not worthwhile.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 15.23,
        "contains_question": true,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-01-02T16:06:51.084900",
          "text": "<@Clarinda> I'd posted this a couple weeks ago and it scrolled by: <https://racket.slack.com/archives/C06V96CKX/p1545239011337500>\nI was wondering if you had any quick reaction? Even just, \"Yep, that sounds as-expected\", or, \"You're probably doing something wrong\".\n(The TL;DR is `udp-receive!` _seems_ to lose datagrams around the time of a major GC.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-02T16:11:15.087400",
          "text": "I haven’t actually tried any experiments, but it would make sense for the OS to drop a Racket socket’s packets around full-GC time if they’re being sent quickly from a different process. (Since Racket won’t check for messages during a GC, the socket’s buffer could fill up, and a full GC can take a while.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-02T16:17:46.090400",
          "text": "<@Clarinda> That makes sense. The major GCs were something like 60-80 ms.\nThanks! Confirming what's reasonable to expect, is a huge help."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-02T16:18:55.090900",
          "text": "I tried incremental collection and that made the lossage more even, less bursty."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-02T16:22:05.093600",
          "text": "I _might_ try doing the \"lower level\" rx in a dedicated place, using an allocating-avoiding style.\nOTOH not sure how much less loss and therefore fewer retransmits that would really get; maybe not worthwhile."
        }
      ]
    },
    {
      "conversation_id": "7",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Boris: Stephnie Just got r-linq\nStephnie: Awesome! Thank you!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 262.57,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Boris",
          "Stephnie"
        ]
      },
      "timeline": [
        {
          "user": "Boris",
          "timestamp": "2019-01-02T19:09:29.093700",
          "text": "<@Stephnie> Just got r-linq"
        },
        {
          "user": "Stephnie",
          "timestamp": "2019-01-02T23:32:03.096700",
          "text": "Awesome! Thank you!"
        }
      ]
    },
    {
      "conversation_id": "8",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Today I refactored code containing a [CODE] expression. Though it worked before, I now get a \"reentrant promise\" error when I run it. What does this mean? How does one fix it?\nKristeen: Lillian it means that while trying to evaluate the promise, it attempted to force the promise again\nKristeen: [CODE_BLOCK]\nLillian: Aha — that was the clue I needed. Thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 27.47,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-01-02T20:30:54.095300",
          "text": "Today I refactored code containing a `delay` expression. Though it worked before, I now get a \"reentrant promise\" error when I run it. What does this mean? How does one fix it?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-02T20:40:28.095900",
          "text": "<@Lillian> it means that while trying to evaluate the promise, it attempted to force the promise again"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-02T20:41:10.096200",
          "text": "```\n[samth@hermes:~ plt] r\nWelcome to Racket v7.1.0.10.\n&gt; (define p (delay (force p)))\n&gt; (force p)\n; force: reentrant promise `p' [,bt for context]\n```"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-01-02T20:58:22.096600",
          "text": "Aha — that was the clue I needed. Thanks"
        }
      ]
    },
    {
      "conversation_id": "9",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Clarinda After thinking more, I believe the best (least worst?) thing to do is allow setting a larger SO_RCVBUF. If a user cares, they can try to set it large enough to outlast a major GC. I'm trying to add this myself -- to at least verify it's effective, before considering submitting a PR. Unfortunately I seem to be stuck with a build error, as described in the commit message for what I have so far: <[URL]\nClarinda: That’s a confusing build error message, and it ends up confusing because the error message at line 350 of “env.c” is written to stdout instead of stderr. (I’ll fix that.) The solution is to bump the primitive count in “schminc.h” and the version number in “schvers.h”.\nJulia: Ah! Will try that. Thanks!\nKristeen: Julia note also some useful hints in racket/src/racket/README.txt\nJulia: Thanks Kristeen and Clarinda. Built fine. Initial smoke test: Using a modest (?) 1 MB SO_RCVBUF is enough to survive a 50 - 100 msec major GC in my test application. I don't want to \"mission accomplished\" jinx this, so I'm going to spend some more time with it. But I think I will have a PR at some point in the near future.\nJulia: I notice my build failed for CS because my new [CODE] wasn't available to [CODE]. I think that's because it's missing from [CODE] and [CODE] I'm trying to run [CODE] to regenerate, manually. 1. Is that correct I should run manually (make doesn't do this)? 2. When I try to run manually, it errors at line 248 of [CODE]: [CODE_BLOCK] Quick glance, I think that's because the grammar doesn't know how to handle empty params (that's the only such decl). But I'm not confident how to fix the grammar. Also I probably shouldn't fix that in a PR adding UDP receive buffer. :slightly_smiling_face: Is that something you could fix Clarinda (at your convenience) and I could rebase on your newer [CODE]?\nJulia: Or I could look at it more and try to fix the grammar, in another PR.\nJulia: Oh derp. My C is super rusty. The parser is OK as-is if I change the line of [CODE] to [CODE_BLOCK]\nJulia: (BTW I only mentioned two files above, but I do realize I need to use [CODE] to regenerate all three of [CODE].)\nClarinda: Julia Thanks! I think it’s ok to include that repair to “rktio.h” with your commit.\nJulia: OK cool will do.\nTambra: Clearly, you should learn Objective-C++, as thats all you ever need! :stuck_out_tongue:\nJulia: :see_no_evil:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 1520.27,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "fix",
          "need to",
          "should",
          "submit",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Julia",
          "Kristeen",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-01-03T12:16:04.100500",
          "text": "<@Clarinda> After thinking more, I believe the best (least worst?) thing to do is allow setting a larger SO_RCVBUF.\nIf a user cares, they can try to set it large enough to outlast a major GC.\n\nI'm trying to add this myself -- to at least verify it's effective, before considering submitting a PR.\nUnfortunately I seem to be stuck with a build error, as described in the commit message for what I have so far:\n<https://github.com/greghendershott/racket/commit/11490f456447fe7cb697b6fe9caf061035554b72>"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-03T12:19:03.102300",
          "text": "That’s a confusing build error message, and it ends up confusing because the error message at line 350 of “env.c” is written to stdout instead of stderr. (I’ll fix that.)\nThe solution is to bump the primitive count in “schminc.h” and the version number in “schvers.h”."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-03T12:19:31.102700",
          "text": "Ah! Will try that. Thanks!"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-03T12:28:55.103200",
          "text": "<@Julia> note also some useful hints in racket/src/racket/README.txt"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-03T14:55:08.106400",
          "text": "Thanks <@Kristeen> and <@Clarinda>. Built fine. Initial smoke test: Using a modest (?) 1 MB SO_RCVBUF is enough to survive a 50 - 100 msec major GC in my test application.\nI don't want to \"mission accomplished\" jinx this, so I'm going to spend some more time with it. But I think I will have a PR at some point in the near future."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-03T20:48:23.113200",
          "text": "I notice my build failed for CS because my new `rktio_udp_set_receiver_buffer` wasn't available to `udp-receive.rkt`.\nI think that's because it's missing from `rktio.def` and `rktio.inc`\nI'm trying to run `rktio/parse.rkt` to regenerate, manually.\n1. Is that correct I should run manually (make doesn't do this)?\n2. When I try to run manually, it errors at line 248 of `rktio.h`:\n```\nRKTIO_EXTERN void rktio_create_console();\n```\nQuick glance, I think that's because the grammar doesn't know how to handle empty params (that's the only such decl).\nBut I'm not confident how to fix the grammar.\nAlso I probably shouldn't fix that in a PR adding UDP receive buffer. :slightly_smiling_face:\nIs that something you could fix <@Clarinda> (at your convenience) and I could rebase on your newer `master`?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-03T20:49:28.113700",
          "text": "Or I could look at it more and try to fix the grammar, in another PR."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-03T20:59:29.114900",
          "text": "Oh derp. My C is super rusty.\nThe parser is OK as-is if I change the line of `rktio.h` to\n```\nRKTIO_EXTERN void rktio_create_console(void);\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-03T21:10:37.115800",
          "text": "(BTW I only mentioned two files above, but I do realize I need to use `rktio/parse.rkt` to regenerate all three of `rktio.{def inc rktl}`.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-03T21:20:38.116200",
          "text": "<@Julia> Thanks! I think it’s ok to include that repair to “rktio.h” with your commit."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-03T21:21:26.116400",
          "text": "OK cool will do."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-04T12:43:24.116700",
          "text": "Clearly, you should learn Objective-C++, as thats all you ever need! :stuck_out_tongue:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-04T13:36:20.117200",
          "text": ":see_no_evil:"
        }
      ]
    },
    {
      "conversation_id": "10",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: FWIW finally got around to documenting curves in MetaPict. <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-01-03T16:18:29.107800",
          "text": "FWIW finally got around to documenting curves in MetaPict. <http://docs.racket-lang.org/metapict/index.html#%28part._ref-curve%29>"
        }
      ]
    },
    {
      "conversation_id": "11",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Alden Is there a reason DrRacket’s column width guide counts pixels rather than actually counting the number of characters in a line? I have a font that renders some characters (notably unicode but also some non-unicode) _slightly_ wider, so DrRacket complains about a line with 102 characters, but if I change the font it stops doing so.\nGonzalo: I find that behavior confusing: I wouldn’t expect changing the font to affect which lines DrRacket thinks are “too long”, given that enforcing a column width seems more about creating a standard shared amongst a _team_ of people, and other people will likely not be using my exact font…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 2.03,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-04T13:58:23.119100",
          "text": "<@Alden> Is there a reason DrRacket’s column width guide counts pixels rather than actually counting the number of characters in a line? I have a font that renders some characters (notably unicode but also some non-unicode) _slightly_ wider, so DrRacket complains about a line with 102 characters, but if I change the font it stops doing so."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-04T14:00:25.120800",
          "text": "I find that behavior confusing: I wouldn’t expect changing the font to affect which lines DrRacket thinks are “too long”, given that enforcing a column width seems more about creating a standard shared amongst a _team_ of people, and other people will likely not be using my exact font…"
        }
      ]
    },
    {
      "conversation_id": "12",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Amira I'm trying to use gtp-benchmarks and getting stuck. I want to generate the full tree of configurations and not run anything. How do I do that?\nAmira: Kristeen there's a script for that. In the [CODE] directory you can run e.g. [CODE]. This makes a new folder named [CODE] in the current directory. <[URL]\nKristeen: Great. You might want to mention that in the readme which refers to a different non-existent script.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 650.53,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-01-04T20:16:45.123200",
          "text": "<@Amira> I'm trying to use gtp-benchmarks and getting stuck. I want to generate the full tree of configurations and not run anything. How do I do that?"
        },
        {
          "user": "Amira",
          "timestamp": "2019-01-05T06:29:02.124800",
          "text": "<@Kristeen> there's a script for that. In the `gtp-benchmarks` directory you can run e.g. `racket utilities/make-configurations.rkt benchmarks/synth`. This makes a new folder named `synth-configurations` in the current directory. <http://docs.racket-lang.org/gtp-benchmarks/index.html#%28mod-path._gtp-benchmarks%2Futilities%2Fmake-configurations%29>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-05T07:07:17.125000",
          "text": "Great. You might want to mention that in the readme which refers to a different non-existent script. "
        }
      ]
    },
    {
      "conversation_id": "13",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Happy New Year! :slightly_smiling_face: - I know it's the 7th but I just returned from holidays.\nShavon: Does anybody have any experience in converting scribble to odt?\nShavon: I am trying pandoc to do scribble -&gt; html -&gt; odt but the output is ridiculously bad.\nShavon: scribble -&gt; latex -&gt; odt doesn't seem to work as pandoc complains about malformed latex although latex is happy with it.\nTambra: Shavon ISTR someone on twitter saying scribble -&gt; (latex or pdf?) -&gt; doc (using pandoc) worked okay, so maybe taking a -&gt; odt on the end there will work for you?\nShavon: Tambra will try but I am not keeping my hopes high. Pandoc to odt was pretty poor. Lost scheme block highlighting and indentation, footnotes and margin notes.\nShavon: Better until now was tex4ht oolatex from scribble latex to odt. In any case, will try word as soon as I am back on the PC. Thanks.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 180.62,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Shavon",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-07T08:18:25.126400",
          "text": "Happy New Year! :slightly_smiling_face: - I know it's the 7th but I just returned from holidays."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-07T08:18:44.127000",
          "text": "Does anybody have any experience in converting scribble to odt?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-07T08:19:08.127500",
          "text": "I am trying pandoc to do scribble -&gt; html -&gt; odt but the output is ridiculously bad."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-07T08:19:33.128100",
          "text": "scribble -&gt; latex -&gt; odt doesn't seem to work as pandoc complains about malformed latex although latex is happy with it."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-01-07T11:05:04.129600",
          "text": "<@Shavon> ISTR someone on twitter saying scribble -&gt; (latex or pdf?) -&gt; doc (using pandoc) worked okay, so maybe taking a -&gt; odt on the end there will work for you?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-07T11:18:10.131800",
          "text": "<@Tambra> will try but I am not keeping my hopes high. Pandoc to odt was pretty poor. Lost scheme block highlighting and indentation, footnotes and margin notes. "
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-07T11:19:02.133500",
          "text": "Better until now was tex4ht oolatex from scribble latex to odt. In any case, will try word as soon as I am back on the PC. Thanks. "
        }
      ]
    },
    {
      "conversation_id": "14",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Hallie: while we are at scribble does anyone know if when using [CODE] you can get the content of the expanded [CODE] (e.g. for printing or saving to file)?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Hallie"
        ]
      },
      "timeline": [
        {
          "user": "Hallie",
          "timestamp": "2019-01-07T11:56:30.135800",
          "text": "while we are at scribble does anyone know if when using `#lang scribble/lp2` you can get the content of the expanded `chunk` (e.g. for printing or saving to file)?"
        }
      ]
    },
    {
      "conversation_id": "15",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Clarinda I'm now testing things on Windows. Even with stock 7.1, I'm seeing a boatload of logger warnings doing things with UDP: [CODE_BLOCK] This comes from [CODE] in [CODE] getting a [CODE] value from [CODE] in [CODE]. The very start of which is: [CODE_BLOCK] And yet, things seem to work anyway, albeit maybe somewhat more slowly due to the deluge of [CODE]s.\nClarinda: I’ll look into this more in the next couple of days, but probably the solution is to not log a warning on [CODE].\nJulia: Although I don't really comprehend the code, that's what I was wondering.\nJulia: (I've been running lots of things with specific defined loggers of my own, cranked up. But hadn't run with the default logger level set &gt;= 'warning, in quite awhile. I added a log-warning to my own code, not sure if I was going to go on and define a logger for it, and that's when I noticed.)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 53.83,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-01-07T13:37:26.139600",
          "text": "<@Clarinda> I'm now testing things on Windows. Even with stock 7.1, I'm seeing a boatload of logger warnings doing things with UDP:\n```\nerror for long-term poll set: unsupported; rktio_err=1\n```\nThis comes from `scheme_rktio_fd_to_semaphore` in `thread.c` getting a `NULL` value from `rktio_ltps_add` in `rktio_ltps.c`.\nThe very start of which is:\n```\nrktio_ltps_handle_t *rktio_ltps_add(rktio_t *rktio, rktio_ltps_t *lt, rktio_fd_t *rfd, int mode)\n{\n#ifdef RKTIO_SYSTEM_WINDOWS\n  set_racket_error(RKTIO_ERROR_UNSUPPORTED);\n  return NULL;\n```\n\nAnd yet, things seem to work anyway, albeit maybe somewhat more slowly due to the deluge of `log-warning`s."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-07T14:24:06.139800",
          "text": "I’ll look into this more in the next couple of days, but probably the solution is to not log a warning on `RKTIO_ERROR_UNSUPPORTED`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-07T14:30:01.140000",
          "text": "Although I don't really comprehend the code, that's what I was wondering."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-07T14:31:16.140200",
          "text": "(I've been running lots of things with specific defined loggers of my own, cranked up. But hadn't run with the default logger level set &gt;= 'warning, in quite awhile. I added a log-warning to my own code, not sure if I was going to go on and define a logger for it, and that's when I noticed.)"
        }
      ]
    },
    {
      "conversation_id": "16",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Shortest way to go from '(a b c d) to '((a b) (b c) (c d)) ?\nMai: What about [CODE_BLOCK] ? Note that it will error when the input is an empty list.\nPriscila: Much better than what I had.\nPriscila: If we had an in-pair: [CODE]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 13.68,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-01-07T17:59:24.141100",
          "text": "Shortest way to go from   '(a b c d) to  '((a b) (b c) (c d)) ?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-01-07T18:09:09.141400",
          "text": "What about\n```\n(define (f xs) (for/list ([x xs] [y (rest xs)]) (list x y)))\n```\n? Note that it will error when the input is an empty list."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-07T18:12:05.141800",
          "text": "Much better than what I had."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-07T18:13:05.142500",
          "text": "If we had an in-pair:   `(for/list ([p (in-pairs xs)]) (take p 2))`"
        }
      ]
    },
    {
      "conversation_id": "17",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Is there a [CODE] pattern that means “zero or one”?\nLillian: Unlike [CODE] which means “zero or more” or [CODE] which means “k or more”\nMai: You can do [CODE], I think.\nMai: You can also use the [CODE] clause if the above pattern looks too ugly",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 16.65,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lillian",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-01-07T18:43:14.143000",
          "text": "Is there a `match` pattern that means “zero or one”?"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-01-07T18:44:49.143700",
          "text": "Unlike `...` which means “zero or more” or `..k` which means “k or more”"
        },
        {
          "user": "Mai",
          "timestamp": "2019-01-07T18:47:12.145200",
          "text": "You can do `(and xs (or (list) (list _)))`, I think."
        },
        {
          "user": "Mai",
          "timestamp": "2019-01-07T18:59:53.145800",
          "text": "You can also use the `#:when` clause if the above pattern looks too ugly"
        }
      ]
    },
    {
      "conversation_id": "18",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Clarinda is this a known issue with macOS permissions? <[URL]\nClarinda: I have seen this, and I don’t know what causes it – the use of some API, I guess. Since it goes away after the very first time, I’ve only seen it once. Maybe it’s once per app, though, so I should try more.\nKristeen: this suggests that it's the accessibility API: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 5.23,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-01-09T12:08:42.146700",
          "text": "<@Clarinda> is this a known issue with macOS permissions? <https://www.reddit.com/r/Racket/comments/ae8jlx/why_does_drracket_ask_for_permission_to_control/>"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-09T12:10:09.147900",
          "text": "I have seen this, and I don’t know what causes it – the use of some API, I guess. Since it goes away after the very first time, I’ve only seen it once. Maybe it’s once per app, though, so I should try more."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-09T12:13:56.148200",
          "text": "this suggests that it's the accessibility API: <https://superuser.com/questions/1149848/mac-what-permissions-are-granted-for-allow-the-apps-below-to-control-your-comp>"
        }
      ]
    },
    {
      "conversation_id": "19",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Does anyone know if the videos for the last racketcon will make it online?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-09T12:59:32.148800",
          "text": "Does anyone know if the videos for the last racketcon will make it online?"
        }
      ]
    },
    {
      "conversation_id": "20",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: I had seen something like that before, but [CODE] doesn’t directly use anything labeled as the “Accessibility API”. It turns out that the trigger is a call to [CODE], which is there to compensate for a problem detecting a menu-bar click on 10.13. But it seems that 10.14 has returned to the old behavior in a corner of the event system, where [CODE] isn’t needed as a workaround (and the code falls back to the old behavior, just in case it helps, if [CODE] fails – which it does and does on 10.14). So, I can make the use of [CODE] 10.13-specific.\nClarinda: Except that [CODE] asks only for mouse events, not keyboard events.\nClarinda: The pkg-build machine can’t support references that aren’t catalog-resolved names, since the build virtual machine isn’t connected to the network\nShavon: Julia are you aware of the issue that Alex just pointed out in frog? <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 1161.27,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-01-09T14:09:07.148900",
          "text": "I had seen something like that before, but `racket/gui` doesn’t directly use anything labeled as the “Accessibility API”.\n\nIt turns out that the trigger is a call to `CGEventTapCreate`, which is there to compensate for a problem detecting a menu-bar click on 10.13. But it seems that 10.14 has returned to the old behavior in a corner of the event system, where `CGEventTapCreate` isn’t needed as a workaround (and the code falls back to the old behavior, just in case it helps, if `CGEventTapCreate` fails – which it does and does on 10.14). So, I can make the use of `CGEventTapCreate` 10.13-specific."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-09T15:42:16.149500",
          "text": "Except that `racket/gui` asks only for mouse events, not keyboard events."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-09T17:05:52.150100",
          "text": "The pkg-build machine can’t support references that aren’t catalog-resolved names, since the build virtual machine isn’t connected to the network"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-10T09:30:23.151300",
          "text": "<@Julia> are you aware of the issue that Alex just pointed out in frog? <https://groups.google.com/d/msg/racket-users/OAXqQd7XYbc/1PIrHmSrDAAJ>"
        }
      ]
    },
    {
      "conversation_id": "21",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Ah, I see that this is actually mentioned (under \"Discussion\") here: <[URL]\nPriscila: Strange build error on the build server: <[URL]\nPriscila: Ah! I thought it was a fluke - a random connection to Github that failed. I see now that <[URL] refers to a specific version of lux.\nPriscila: The question arose because a user on Reddit asked whether game-engine was abandoned (he noticed that the build failed).",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 148.87,
        "contains_question": false,
        "action_keywords": [
          "build",
          "create",
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-01-09T14:43:40.149300",
          "text": "Ah, I see that this is actually mentioned (under \"Discussion\") here: <https://developer.apple.com/documentation/coregraphics/1454426-cgeventtapcreate>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-09T16:45:32.150000",
          "text": "Strange build error on the build server:  <https://pkg-build.racket-lang.org/server/built/fail/game-engine.txt>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-09T17:11:43.150300",
          "text": "Ah! I thought it was a fluke - a random connection to Github that failed.\n\nI see now that <https://github.com/thoughtstem/game-engine/blob/master/info.rkt>\nrefers to a specific version of lux."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-09T17:12:32.150600",
          "text": "The question arose because a user on Reddit asked whether game-engine was abandoned (he noticed that the build failed)."
        }
      ]
    },
    {
      "conversation_id": "22",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: \"Just\" meaning \"May 2018\" ? :slightly_smiling_face:\nJulia: No, I hadn't noticed that until seeing the more-recent thread, yesterday.\nJulia: My New Year's resolution is to try to spend more time testing my stuff on Windows.\nJulia: The first couple days of which, has not been fun. Feels like death by a thousand cuts (e.g. getting GUI Emacs to work smoothly with any of Cygwin, Windows Subsystem for Linux, etc. Or, you can use terminal Emacs in WSL ... but can't update Emacs pkgs unless you install XServer. Because reasons.\nJulia: So my current mood is kind of FML. But I guess a New Year's resolution isn't any good if it's easy. Has to be hard, like exercising or diet, right? :slightly_smiling_face:\nMauro: Julia death by a thousand cuts is an apt way to describe getting Unix-land to work on Windows. Out of curiosity, have you tried MSYS2 yet? I've found it offers the easiest way getting unix tools to work well on Windows, including talking to other Windows tools without running into too many problems with binary or other data layout incompatibility issues\nJulia: Mauro No I haven't tried msys2 yet. Thanks for the tip. I will definitely try that. (For now I've reached temporary equilibrium at least having installed Windows version of [CODE], the Emacs mode [CODE], and hooked [CODE] into [CODE]. So, at least I can search in projects smoothly. And [CODE] is much faster than [CODE]; I prefer it on macOS anyway. Having said all that, I still want all the unixy command-line tools, preferably from one source -- hopefully msys2 will be that.)\nAmira: try the [CODE] option ... [CODE]\nAmira: hm, [CODE] links to your local docs. I'm not sure how to make links into <[URL] ... maybe there's a combination of [CODE] and [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 4913.42,
        "contains_question": true,
        "action_keywords": [
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Julia",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-01-10T11:37:21.151600",
          "text": "\"Just\" meaning \"May 2018\" ? :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-10T11:37:47.152100",
          "text": "No, I hadn't noticed that until seeing the more-recent thread, yesterday."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-10T11:39:00.152600",
          "text": "My New Year's resolution is to try to spend more time testing my stuff on Windows."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-10T11:40:41.154500",
          "text": "The first couple days of which, has not been fun. Feels like death by a thousand cuts (e.g. getting GUI Emacs to work smoothly with any of Cygwin, Windows Subsystem for Linux, etc.  Or, you can use terminal Emacs in WSL ... but can't update Emacs pkgs unless you install XServer. Because reasons."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-10T11:41:11.155200",
          "text": "So my current mood is kind of FML.\nBut I guess a New Year's resolution isn't any good if it's easy. Has to be hard, like exercising or diet, right? :slightly_smiling_face:"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-01-10T12:28:55.159300",
          "text": "<@Julia> death by a thousand cuts is an apt way to describe getting Unix-land to work on Windows.\n\nOut of curiosity, have you tried MSYS2 yet? I've found it offers the easiest way getting unix tools to work well on Windows, including talking to other Windows tools without running into too many problems with binary or other data layout incompatibility issues"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-11T23:08:48.164400",
          "text": "<@Mauro> No I haven't tried msys2 yet. Thanks for the tip. I will definitely try that.\n(For now I've reached temporary equilibrium at least having installed Windows version of `ripgrep`, the Emacs mode `deadgrep`, and hooked `ripgrep` into `projectile-search-project`. So, at least I can search in projects smoothly. And `ripgrep` is much faster than `grep`; I prefer it on macOS anyway. Having said all that, I still want all the unixy command-line tools, preferably from one source -- hopefully msys2 will be that.)"
        },
        {
          "user": "Amira",
          "timestamp": "2019-01-13T21:23:42.168200",
          "text": "try the `+m` option ... `raco scribble +m file.scrbl`"
        },
        {
          "user": "Amira",
          "timestamp": "2019-01-13T21:30:46.170200",
          "text": "hm, `+m` links to your local docs. I'm not sure how to make links into <http://docs.racket-lang.org|docs.racket-lang.org> ... maybe there's a combination of `+m` and `--redirect`"
        }
      ]
    },
    {
      "conversation_id": "23",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: oh wow... sorry. :slightly_smiling_face: I guess I started reading too many old unread messages and went quite far back without realising.\nShavon: My guess is that exercising is easier and healthier than trying to get anything to work on windows... :smile: So, I won't certainly be the one recommending it - any sane doctor won't either assuming any new year resolution is supposed to improve your quality of life\nMauro: You can even install a successfully working GUI emacs via MSYS2's package system, no fiddling with missing dependencies\nShavon: I am using [CODE] in a scribble document for an [EMAIL] section of a [CODE] doc. However I am getting: [CODE_BLOCK]\nShavon: What do I need to require here? I tried all sorts of combinations but it doesn't seem to help.\nShavon: I thought [CODE] was something that could be useful but I got even more problems when I tried to use it.\nPriscila: Shavon Does Greg's suggestion work for you? <[URL]\nShavon: Priscila thanks for the reference, will take a look but at a glance, it looks like the same issue.\nJulia: Priscila Shavon Incidentally, although I'm happy to accept an honorary promotion to being Matthias (I think?), it was actually his suggestion not mine.\nShavon: Priscila how hard would it be to implement the xkcd algorithm on metapict? Ref: <[URL]\nShavon: I can't find in the docs of metapict any information about internal representation so I am unsure if I can access each of the lines I need. Any suggestions on how and where to start?\nPriscila: Shavon That's certainly doable. As luck has the documentation has recently been updated, so the internal representation of curves are now documented here: <[URL]\nPriscila: (the docs on Github hasn't been updated yet).\nPriscila: It's pretty simple a [CODE] is simply a list of Bezier curves with a flag that signals whether the curve is cyclic.\nPriscila: A Bezier curve is represented as: (struct bez (p0 p1 p2 p3)) where p0, p1, p2, p3 are the control points.\nPriscila: Well, p0 and p3 are the start and end point - and p1 and p2 are the control points.\nPriscila: Final piece of the puzzle is the recently added arc-time . Here (arc-time c a) finds the time t where the length of the subcurve from c(0) to c(t) has length a.\nPriscila: That can be used to find points along the curve evenly spaced - and then construct a new curve through the same points slightly distorted.\nShavon: Interesting. Thanks for this. I will give a try to build a metapict extension that creates xkcd-style metapicts.\nPriscila: An example of finding points evenly distributed a long a curve:\nPriscila: <[URL]\nPriscila: Also take a peak on the tikz solution:\nPriscila: <[URL]\nPriscila: It would be a pretty fun thing to have in MetaPict.\nShavon: Thanks for that ref, I shall take a look.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 25,
        "duration_minutes": 5911.67,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "implement",
          "need to",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Mauro",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-10T12:06:07.155800",
          "text": "oh wow... sorry. :slightly_smiling_face: I guess I started reading too many old unread messages and went quite far back without realising."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-10T12:07:45.157400",
          "text": "My guess is that exercising is easier and healthier than trying to get anything to work on windows... :smile: So, I won't certainly be the one recommending it - any sane doctor won't either assuming any new year resolution is supposed to improve your quality of life"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-01-10T12:29:25.159900",
          "text": "You can even install a successfully working GUI emacs via MSYS2's package system, no fiddling with missing dependencies"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-13T14:53:42.166000",
          "text": "I am using `#:lang \"racket/base\"` in a scribble document for an `@examples...` section of a `scribble/base` doc. However I am getting:\n```\nWarning: some cross references may be broken due to undefined tags:\n (part (\"(lib scribblings/guide/guide.scrbl)\" \"hash-lang\"))\n```"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-13T14:53:59.166600",
          "text": "What do I need to require here? I tried all sorts of combinations but it doesn't seem to help."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-13T14:54:29.167200",
          "text": "I thought `for-label` was something that could be useful but I got even more problems when I tried to use it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-13T16:59:10.167600",
          "text": "<@Shavon> Does Greg's suggestion work for you?  <https://lists.racket-lang.org/users/archive/2012-August/053522.html>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-14T05:29:43.172600",
          "text": "<@Priscila> thanks for the reference, will take a look but at a glance, it looks like the same issue."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-14T12:10:39.173900",
          "text": "<@Priscila> <@Shavon> Incidentally, although I'm happy to accept an honorary promotion to being Matthias (I think?), it was actually his suggestion not mine."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-14T14:21:05.175000",
          "text": "<@Priscila> how hard would it be to implement the xkcd algorithm on metapict? Ref: <http://jakevdp.github.io/blog/2012/10/07/xkcd-style-plots-in-matplotlib/>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-14T14:21:55.176100",
          "text": "I can't find in the docs of metapict any information about internal representation so I am unsure if I can access each of the lines I need. Any suggestions on how and where to start?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:27:23.177400",
          "text": "<@Shavon> That's certainly doable. As luck has the documentation has recently been updated, so the internal representation of curves are now documented here:  <http://docs.racket-lang.org/metapict/index.html?q=metapict#%28part._ref-curve%29>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:27:36.177800",
          "text": "(the docs on Github hasn't been updated yet)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:28:14.178500",
          "text": "It's pretty simple a    `curve:` is simply a list of Bezier curves with a flag that signals whether the curve is cyclic."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:29:20.179200",
          "text": "A Bezier curve is represented as: (struct bez (p0 p1 p2 p3)) where p0, p1, p2, p3 are the control points."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:29:45.179700",
          "text": "Well, p0 and p3 are the start and end point  - and p1 and p2 are the control points."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:32:44.181300",
          "text": "Final piece of the puzzle is the recently added arc-time . Here (arc-time c a)  finds the time t where the length of the subcurve from c(0) to c(t) has length a."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:33:45.182500",
          "text": "That can be used to find points along the curve evenly spaced - and then construct a new curve through the same points slightly distorted."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-14T14:34:32.183200",
          "text": "Interesting. Thanks for this. I will give a try to build a metapict extension that creates xkcd-style metapicts."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:36:01.184000",
          "text": "An example of finding points evenly distributed a long a curve:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:36:03.184200",
          "text": "<https://github.com/soegaard/metapict/blob/master/metapict/markings.rkt#L89>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:36:32.184700",
          "text": "Also take a peak on the tikz solution:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:36:33.184900",
          "text": "<https://tex.stackexchange.com/questions/74878/create-xkcd-style-diagram-in-tex>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-14T14:37:07.185500",
          "text": "It would be a pretty fun thing to have in MetaPict."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-14T14:37:47.185900",
          "text": "Thanks for that ref, I shall take a look."
        }
      ]
    },
    {
      "conversation_id": "24",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Azucena: I'm in the middle of helping a student install a package, so only have a moment to note a bug and might not get around to filing it properly: the chinese translation of [CODE] uses a full-width colon character instead of a regular colon, causing [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Azucena"
        ]
      },
      "timeline": [
        {
          "user": "Azucena",
          "timestamp": "2019-01-13T22:26:37.172000",
          "text": "I'm in the middle of helping a student install a package, so only have a moment to note a bug and might not get around to filing it properly: the chinese translation of `(string-constant install-pkg-dependencies-fail)` uses a full-width colon character instead of a regular colon, causing\n```&gt;    cadr: contract violation\n&gt;      expected: (cons/c any/c pair?)\n&gt;      given: #f\n&gt;      context...:\n&gt;       /Applications/Racket\n&gt;    v7.1/share/pkgs/gui-pkg-manager-lib/pkg/gui/private/by-source.rkt:534:4\n&gt;    : adjust-deps method in by-source-panel%```"
        }
      ]
    },
    {
      "conversation_id": "25",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: Question about [CODE] and redirects. Currently with this test code: [CODE_BLOCK] The [CODE] is set to [CODE] but all I get back is: [CODE_BLOCK] I thought it would follow the [CODE]\nTomas: or does it only follow [CODE]?\nTomas: yeah it def works with a [CODE] using ` \"<[URL]\nTomas: could it be because its going from [CODE][URL]\nKami: Sometimes there are shots of student's faces looking desperately lost. I think the modern equivalent of this specific course about the evaluator could be William Byrd's talk about the scheme evaluator: <[URL] It's what got me into scheme for good.\nKami: <[URL] the way he pronounces \"cadadr\" got me :joy:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 883.95,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-01-15T17:32:03.187900",
          "text": "Question about `get-pure-port/headers` and redirects. Currently with this test code:\n\n```\n#lang racket\n\n(require net/url-structs\n         net/url)\n\n(define-values (body header)\n  (get-pure-port/headers\n   (string-&gt;url \"<https://t.co/3Xp6QzPqI3>\")\n   #:status? #t #:redirections 20))\n\n(displayln header)\n(displayln (port-&gt;string body))\n```\n\nThe `#:redirections` is set to `20` but all I get back is:\n\n```\nHTTP/1.1 301 Moved Permanently\ncache-control: private,max-age=300\ncontent-length: 0\ndate: Tue, 15 Jan 2019 22:29:12 GMT\nexpires: Tue, 15 Jan 2019 22:34:12 GMT\nlocation: <http://blog.robic.me>\nserver: tsa_b\nset-cookie: muc=fef1dfb0-3fb3-4c05-9558-5bf4891b6fec; Max-Age=63072000; Expires=Thu, 14 Jan 2021 22:29:12 GMT; Domain=<http://t.co|t.co>\nstrict-transport-security: max-age=0\nvary: Origin\nx-connection-hash: dce864e4ab2808ba233ef1a00ed80628\nx-response-time: 16\n```\n\nI thought it would follow the `301`"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-15T17:32:21.188100",
          "text": "or does it only follow `302`?"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-15T17:48:01.188500",
          "text": "yeah it def works with a `302` using ` \"<https://httpbin.org/absolute-redirect/10>\"`"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-15T17:53:51.188800",
          "text": "could it be because its going from `https` to `http`?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-16T06:44:10.194300",
          "text": "Sometimes there are shots of student's faces looking desperately lost. I think the modern equivalent of this specific course about the evaluator could be William Byrd's talk about the scheme evaluator: <https://youtu.be/OyfBQmvr2Hc?t=2152>\nIt's what got me into scheme for good."
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-16T08:16:00.195700",
          "text": "<https://youtu.be/0m6hoOelZH8?t=1269> the way he pronounces \"cadadr\" got me :joy:"
        }
      ]
    },
    {
      "conversation_id": "26",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Never thought to change my attire, when working on evaluators: <[URL]\nShavon: Priscila this is an absolute amazing series of lectures. They should remaster them, if possible. Never quite understood why they stopped teaching scheme, such a shame.\nPriscila: Must admit that I haven't watched the series. I love SICP though.\nPriscila: I think the students and/or teachers changed :wink:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 6.47,
        "contains_question": true,
        "action_keywords": [
          "must",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-01-16T05:53:17.189500",
          "text": "Never thought to change my attire, when working on evaluators: <https://www.youtube.com/watch?v=0m6hoOelZH8&amp;t=246s>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-16T05:57:43.190600",
          "text": "<@Priscila> this is an absolute amazing series of lectures. They should remaster them, if possible. Never quite understood why they stopped teaching scheme, such a shame."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-16T05:59:06.191200",
          "text": "Must admit that I haven't watched the series. I love SICP though."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-16T05:59:45.191700",
          "text": "I think the students and/or teachers changed :wink:"
        }
      ]
    },
    {
      "conversation_id": "27",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: &gt; The dynamic extent of an expression is the sequence of evaluation steps during which the expression contains the redex. (from <[URL] Should this actually be: &gt; The dynamic extent of an expression is the sequence of evaluation steps during which the expression contains _some_ redex. ?\nKristeen: No, \"the redex\" means \"the redex in the evaluation step\"\nGonzalo: …and “the redex” is unambiguous for a given expression because of Racket’s well-defined evaluation order (e.g. in [CODE], the redex is [CODE] and _not_ [CODE] because evaluation order is left-to-right).\nMai: It’s unambiguous, but varies as we step through the trace, right? E.g., [CODE] =&gt; [CODE] I guess my confusion is that, saying _the_ redex seems to suggest that we fix a particular redex, but that’s not true, correct?\nSusana: _the_ redex in the current evaluation step\nMai: Please bear with me--I’m truly confused. So this is actually about one single step, and not a sequence of steps?\nSusana: the definition was about the dynamic extent of an expression\nSusana: in any evaluation step, the expression may or may not contain _the_ redex (for the current evaluation step)\nSusana: the dynamic extent of the expression is the sequence of steps in which the expression contains _the_ redex\nMai: Ah, I think I understand it now. Thanks!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 36.85,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "please",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Kristeen",
          "Mai",
          "Susana"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-01-17T20:03:43.204300",
          "text": "&gt; The dynamic extent of an expression is the sequence of evaluation steps during which the expression contains the redex.\n\n(from <https://docs.racket-lang.org/reference/eval-model.html#%28part._cont-model%29>)\n\nShould this actually be:\n\n&gt; The dynamic extent of an expression is the sequence of evaluation steps during which the expression contains _some_ redex.\n\n?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-17T20:16:48.206100",
          "text": "No, \"the redex\" means \"the redex in the evaluation step\""
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-17T20:23:45.207700",
          "text": "…and “the redex” is unambiguous for a given expression because of Racket’s well-defined evaluation order (e.g. in `(- (+ x 1) (* y 2))`, the redex is `(+ x 1)` and _not_ `(* y 2)` because evaluation order is left-to-right)."
        },
        {
          "user": "Mai",
          "timestamp": "2019-01-17T20:29:26.211100",
          "text": "It’s unambiguous, but varies as we step through the trace, right? E.g., `(* [(+ 1 1)] (+ 2 2))` =&gt; `(* 2 [(+ 2 2)])`\n\nI guess my confusion is that, saying _the_ redex seems to suggest that we fix a particular redex, but that’s not true, correct?"
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-17T20:30:18.211600",
          "text": "_the_ redex in the current evaluation step"
        },
        {
          "user": "Mai",
          "timestamp": "2019-01-17T20:32:36.212500",
          "text": "Please bear with me--I’m truly confused. So this is actually about one single step, and not a sequence of steps?"
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-17T20:38:11.213100",
          "text": "the definition was about the dynamic extent of an expression"
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-17T20:38:34.213600",
          "text": "in any evaluation step, the expression may or may not contain _the_ redex (for the current evaluation step)"
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-17T20:39:18.214300",
          "text": "the dynamic extent of the expression is the sequence of steps in which the expression contains _the_ redex"
        },
        {
          "user": "Mai",
          "timestamp": "2019-01-17T20:40:34.214900",
          "text": "Ah, I think I understand it now. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "28",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: (But what samth said is true even without that property.)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-17T20:24:09.208100",
          "text": "(But what samth said is true even without that property.)"
        }
      ]
    },
    {
      "conversation_id": "29",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sean: My impression was a few (5 to 10?) years ago, MIT changed the intro class to Python and moved Scheme to be after Python. When I talked with Hal &amp; Gerry at the time, they were OK with the change.\nSean: This 1986 taped class was a special one, I think for HP.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.8,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Sean"
        ]
      },
      "timeline": [
        {
          "user": "Sean",
          "timestamp": "2019-01-18T14:03:26.223800",
          "text": "My impression was a few  (5 to 10?) years ago, MIT changed the intro class to Python and moved Scheme to be after Python. When I talked with Hal &amp; Gerry at the time, they were OK with the change."
        },
        {
          "user": "Sean",
          "timestamp": "2019-01-18T14:04:14.224000",
          "text": "This 1986 taped class was a special one, I think for HP."
        }
      ]
    },
    {
      "conversation_id": "30",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: If you enable [CODE] level for the [CODE] logger, it will sometimes print helpful things like: [CODE]. Is there some way to print these when using [CODE]? Even better, is there some sort of treat-warnings-as-errors option?\nGonzalo: Does setting [CODE] work?\nMadelaine: I'm trying to help a colleague install a package with the DrRacket \"File|Package Manager…\" window on Windows 10. (Specifically, he is following these steps: <[URL] He reports that, even from a fresh Racket 7.1 installation, installation fails with the error message: [CODE_BLOCK] Is this a known issue? The message doesn't sound like it's related to this particular package.\nClarinda: It looks like that file has become corrupted. Probably the package manager could be better at repairing it. The file is in the user directory, not the installation, so that’s why a fresh installation doens’t help. I’d delete the “7.1” directory and try again.\nBeverley: is there a parameter that will cause [CODE] to look for the file [CODE] in a certain directory (other than the directory the [CODE] appears in)?\nBeverley: basically I need [CODE] to operate relative to a particular directory, but not one that is in a collection\nBeverley: this is in the context of a [CODE], so parameterizing a parameter is viable\nJulia: Beverley Probably [CODE]. For belt+suspenders, maybe also [CODE].\nClarinda: If you’re [CODE] a file that has those paths, then I don’t think a parameter will work, because the process of loading the file will shadow the parameter settings. But you can [CODE] the file content, then the [CODE] parameter parameter will affect [CODE] of the syntax object. See also [CODE] and [CODE].",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 9,
        "duration_minutes": 6321.2,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Beverley",
          "Clarinda",
          "Gonzalo",
          "Julia",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-01-18T23:27:34.226800",
          "text": "If you enable `'warning` level for the `'optimizer` logger, it will sometimes print helpful things like:\n`optimizer: warning in: /path/to/file.rkt:338:3: in module: optimizer detects procedure incorrectly applied to 2 arguments: some-function`.\nIs there some way to print these when using `raco setup`?\nEven better, is there some sort of treat-warnings-as-errors option?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-18T23:32:02.227300",
          "text": "Does setting `PLTSTDERR='error warning@optimizer'` work?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-01-20T18:40:11.233100",
          "text": "I'm trying to help a colleague install a package with the DrRacket \"File|Package Manager…\" window on Windows 10. (Specifically, he is following these steps: <https://docs.racket-lang.org/ricoeur-tei-utils/Installing___Updating_This_Library.html>) He reports that, even from a fresh Racket 7.1 installation, installation fails with the error message: ```links: error reading from link file: #&lt;path:C:\\Users\\Nordis\\AppData\\Roaming\\Racket\\7.1\\links.rktd&gt;: C:\\Users\\Nordis\\AppData\\Roaming\\Racket\\7.1\\links.rktd::1: read: expected a `)` to close `(` ``` Is this a known issue? The message doesn't sound like it's related to this particular package."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-20T18:47:07.234400",
          "text": "It looks like that file has become corrupted. Probably the package manager could be better at repairing it. The file is in the user directory, not the installation, so that’s why a fresh installation doens’t help. I’d delete the “7.1” directory and try again."
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-22T21:40:41.235900",
          "text": "is there a parameter that will cause `(require (file \"asdf.rkt\"))` to look for the file `\"asdf.rkt\"` in a certain directory (other than the directory the `require` appears in)?"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-22T21:50:43.236800",
          "text": "basically I need `(require (file \"a/b.rkt\"))` to operate relative to a particular directory, but not one that is in a collection"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-22T21:51:11.237300",
          "text": "this is in the context of a `dynamic-require`, so parameterizing a parameter is viable"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-23T07:14:54.238900",
          "text": "<@Beverley> Probably `(current-load-relative-directory dir)`. For belt+suspenders, maybe also `(current-directory dir)`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T08:48:46.241800",
          "text": "If you’re `dynamic-requiring` a file that has those paths, then I don’t think a parameter will work, because the process of loading the file will shadow the parameter settings. But you can `read-syntax` the file content, then the `current-load-relative-directory` parameter parameter will affect `eval` of the syntax object. See also `with-module-reading-parameterization` and `check-module-form`."
        }
      ]
    },
    {
      "conversation_id": "31",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deeanna: Is this a bug in the build service? <[URL]\nDeeanna: Nothing in <[URL] is doing anything w/ SSL as far as I'm aware.\nClarinda: Requiring something like [CODE]call-with-trusted-sandbox-configuration` for documentation-example sandboxes.\nDeeanna: Got it. Thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 413.35,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Deeanna"
        ]
      },
      "timeline": [
        {
          "user": "Deeanna",
          "timestamp": "2019-01-20T10:05:39.227600",
          "text": "Is this a bug in the build service? <https://pkg-build.racket-lang.org/server/built/fail/forms-doc.txt>"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-01-20T10:06:54.228300",
          "text": "Nothing in <https://github.com/Bogdanp/racket-forms/blob/master/forms-doc/forms.scrbl> is doing anything w/ SSL as far as I'm aware."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-20T10:27:03.228700",
          "text": "Requiring something like `web-server/http` almost certainly depends on the SSL library. Generally, it’s difficult to set up a sandbox for code that is actually untrusted but can still do complicated things. We mostly use `call-with-trusted-sandbox-configuration` for documentation-example sandboxes."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-01-20T16:59:00.228900",
          "text": "Got it. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "32",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: Thanks, that did it!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-01-20T21:48:27.234500",
          "text": "Thanks, that did it!"
        }
      ]
    },
    {
      "conversation_id": "33",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Hmm, although that would probably work for [CODE], not sure for [CODE].\nJulia: Oh right, I've used [CODE] e.g. in racket-mode with things like [CODE].\nJulia: What about parameterizing [CODE] to be a function that parameterizes [CODE] around a call to the previous [CODE]? Is that a clever way to let other things still use [CODE], or, a horrible hack?\nClarinda: I wouldn’t recommend that. :slightly_smiling_face:\nClarinda: Use [CODE] plus [CODE] with both [CODE] (to control path resolution) and [CODE] (to control the declared module name) set. Then you can [CODE] with [CODE] around the name that you used in [CODE].\nClarinda: [CODE] takes an extra argument before the port. (It’s trying to read from stdin.)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 443.43,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-01-23T07:16:29.240000",
          "text": "Hmm, although that would probably work for `\"b.rkt\"`, not sure for `\"a/b.rkt\"`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-23T10:04:16.242400",
          "text": "Oh right, I've used `c-l-r-d` e.g. in racket-mode with things like `module-&gt;namespace`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-23T10:06:36.244500",
          "text": "What about parameterizing `current-eval` to be a function that parameterizes `current-load-relative-directory` around a call to the previous `current-eval`?\nIs that a clever way to let other things still use `dynamic-require`, or, a horrible hack?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T10:10:24.245400",
          "text": "I wouldn’t recommend that. :slightly_smiling_face:"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T11:35:09.249100",
          "text": "Use `read-syntax` plus `eval` with both `current-load-relative-directory` (to control path resolution) and `current-module-declare-name` (to control the declared module name) set. Then you can `dynamic-require` with `submod` around the name that you used in `current-module-declare-name`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T14:39:55.251200",
          "text": "`read-syntax` takes an extra argument before the port. (It’s trying to read from stdin.)"
        }
      ]
    },
    {
      "conversation_id": "34",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Beverley: yeah, I’ll be [CODE] files that have those paths (which in turn [CODE] in other files that have those paths … and so on.\nBeverley: is using [CODE] on the contents of the root file similar to [CODE]? I’ll still need to do something to extract the require-spec I need ([CODE]).\nBeverley: ok, I’ll give that a try\nBeverley: hmm that goes into some sort of infinite loop in the read-syntax or the eval\nBeverley: unless I’m using [CODE] incorrectly: [CODE_BLOCK] (where [CODE] is a relative path passed in)\nBeverley: yeah, [CODE] never returns…….\nBeverley: :flushed: heh…\nBeverley: next issue, that read-syntax errors out with [CODE]\nBeverley: although my [CODE] rebinds [CODE], so I’m not sure what’s going on\nBeverley: That got the correct bindings, but brought me full circle…\nBeverley: I use that mechanism to eval “a.rkt”, which requires “dir/b.rkt”, which requires “dir/c.rkt”. It fails during the [CODE] of “dir/c.rkt” because it’s using the path “dir/dir/c.rkt”\nBeverley: so the parameters get lost one require in\nBeverley: my syntax in “dir/b.rkt” boils down to [CODE]\nBeverley: Another way to do this would be to change the syntax I’m using to generate the [CODE] to generate a full path to “c.rkt”. The challenge then would how to pass the root directory into that syntax or to have that syntax expand to a reference to the root path (breaking hygiene in the process)\nBeverley: unfortunately the only way I know how to do that is to write the path to a file and read the file in the syntax to grab the path — there’re no parameters kept across the compilation boundaries (AFAICT)\nBeverley: is it possible to have a language specific collection?\nBeverley: doing a [CODE] would be nice if couldn’t accidentally grab a “dir/c” in just any collection. to be clearer, my files are [CODE] so the actual file in this case is [CODE].\nBeverley: but, yes, the [CODE] mechanism is close to what I’m trying to do… I just want a separate “namespace” for my fracas collection(s)\nBeverley: and maintaining [CODE] would be nice, but not strictly necessary\nBeverley: relative to the fracas collection\nBeverley: e.g. its full path will be: [CODE]\nBeverley: so the “collection”, as it were, for fracas files is [CODE]\nClarinda: Would it make from [CODE] to provide a different [CODE] that expands something like [CODE] to [CODE]?\nClarinda: (where the first [CODE] is the [CODE] one and the second [CODE] is the [CODE] one)\nBeverley: yes, I am using a “fracas” version of [CODE] that I’ve named [CODE]\nBeverley: that expands to [CODE]\nBeverley: changing that seems the like right approach….\nShavon: Priscila trying in metapict to draw a rectangle with some text centered inside the rectangle. I see [CODE] used in the docs but with no actual documentation. Is there a function that just writes something centered on a coordinate?\nPriscila: The names were taken from Metapost - but I am not too fond of them.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 29,
        "duration_minutes": 1366.5,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "need to",
          "requires",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Beverley",
          "Clarinda",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T11:01:12.246200",
          "text": "yeah, I’ll be `dynamic-requiring` files that have those paths (which in turn `require` in other files that have those paths … and so on."
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T11:03:25.247500",
          "text": "is using `read-syntax` on the contents of the root file similar to `dynamic-require`?  I’ll still need to do something to extract the require-spec I need (`(submod (file \"root.rkt\") &lt;identifier&gt;)`)."
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T13:31:25.249300",
          "text": "ok, I’ll give that a try"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T14:00:09.249700",
          "text": "hmm that goes into some sort of infinite loop in the read-syntax or the eval"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T14:01:07.250400",
          "text": "unless I’m using `currentmodule-declare-name` incorrectly:\n```\n  (define p (path-&gt;complete-path ip))\n  (define module-itself (make-resolved-module-path p))\n  (parameterize ([current-load-relative-directory (current-directory)]\n                 [current-module-declare-name module-itself])\n\n    (eval (read-syntax p))\n    )\n```\n(where `ip` is a relative path passed in)"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T14:03:03.250800",
          "text": "yeah, `(read-syntax p)` never returns……."
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T14:42:58.251600",
          "text": ":flushed:  heh…"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T15:06:09.252200",
          "text": "next issue, that read-syntax errors out with `module-name::1: read: #lang not enabled in the current context`"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T15:22:28.253900",
          "text": "although my `#lang` rebinds `module`, so I’m not sure what’s going on"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T19:57:37.256000",
          "text": "That got the correct bindings, but brought me full circle…"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T19:58:40.257100",
          "text": "I use that mechanism to eval “a.rkt”, which requires “dir/b.rkt”, which requires “dir/c.rkt”.  It fails during the `require` of “dir/c.rkt” because it’s using the path “dir/dir/c.rkt”"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T19:58:57.257400",
          "text": "so the parameters get lost one require in"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T20:01:09.258000",
          "text": "my syntax in “dir/b.rkt” boils down to `(require (file \"dir/c.rkt\"))`"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T20:15:37.259500",
          "text": "Another way to do this would be to change the syntax I’m using to generate the `(require (file \"dir/c.rkt\"))` to generate a full path to “c.rkt”. The challenge then would how to pass the root directory into that syntax or to have that syntax expand to a reference to the root path (breaking hygiene in the process)"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T20:34:12.260700",
          "text": "unfortunately the only way I know how to do that is to write the path to a file and read the file in the syntax to grab the path — there’re no parameters kept across the compilation boundaries (AFAICT)"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T20:45:23.266100",
          "text": "is it possible to have a language specific collection?"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T20:46:24.267200",
          "text": "doing a `(require (lib \"dir/c\"))` would be nice if couldn’t accidentally grab a “dir/c” in just any collection.  to be clearer, my files are `#lang fracas` so the actual file in this case is `dir/c.frc`."
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T20:47:16.268000",
          "text": "but, yes, the `(lib ...)` mechanism is close to what I’m trying to do… I just want a separate “namespace” for my fracas collection(s)"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T20:47:35.268400",
          "text": "and maintaining `raco make` would be nice, but not strictly necessary"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T21:24:54.270600",
          "text": "relative to the fracas collection"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T21:25:37.271400",
          "text": "e.g. its full path will be: `/Users/me/src/all-my-fracas-files/dir/c.rkt`"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T21:26:20.272100",
          "text": "so the “collection”, as it were, for fracas files is `/Users/me/src/all-my-fracas-files`"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T21:27:26.273300",
          "text": "Would it make from `#lang fracas` to provide a different `require` that expands something like `(require \"dir/c\")` to `(require (lib \"fracas/dir/c.frc\"))`?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T21:27:52.274000",
          "text": "(where the first `require` is the `fracas` one and the second `require` is the `racket` one)"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T21:27:59.274200",
          "text": "yes, I am using a “fracas” version of `require` that I’ve named `import`"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T21:28:15.274600",
          "text": "that expands to `(require (file \"dir/c.frc\"))`"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T21:28:27.275000",
          "text": "changing that seems the like right approach…."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-24T08:59:55.276600",
          "text": "<@Priscila> trying in metapict to draw a rectangle with some text centered inside the rectangle. I see `dot-label` used in the docs but with no actual documentation. Is there a function that just writes something centered on a coordinate?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T09:47:42.279400",
          "text": "The names were taken from Metapost - but I am not too fond of them."
        }
      ]
    },
    {
      "conversation_id": "35",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: The [CODE] module has [CODE], which calls a thunk in a context where [CODE] is enabled\nBeverley: hmm… that get’s [CODE], but [CODE] and [CODE] aren’t bound now\nClarinda: Use [CODE] to make [CODE] have the right binding.\nClarinda: The bindings of your language apply inside a module that uses the language, but you need [CODE] as really a module to get started.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 30.62,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Beverley",
          "Clarinda",
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-01-23T15:12:36.252900",
          "text": "The `syntax/modread` module has `with-module-reading-parameterization`, which calls a thunk in a context where `#lang` is enabled"
        },
        {
          "user": "Beverley",
          "timestamp": "2019-01-23T15:22:04.253400",
          "text": "hmm… that get’s `#lang`, but `module` and `#%app` aren’t bound now"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T15:42:18.254400",
          "text": "Use `check-module-form` to make `module` have the right binding."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T15:43:13.255100",
          "text": "The bindings of your language apply inside a module that uses the language, but you need `module` as really a module to get started."
        }
      ]
    },
    {
      "conversation_id": "36",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: I’m not really clear on what you’re trying to do, but it’s starting to sound like you want to install a collection, and then you can refer to the collection without using an absolute path. Another possibility is that you want to more completely take control over module-path resolution by using [CODE] paths that don’t refer to an installed collection and setting [CODE] to find the would-be collection yourself. That’s not usually a good option, because relying on a custom module name resolver doesn’t play well with tools like [CODE]. But it can work out if you’re at a point where those tools don’t apply. For example, [CODE] generates an executable that sets [CODE], and it’s ok because tools like [CODE] don’t apply to an already-constructed executable.\nClarinda: When [CODE] appears in a [CODE] module, where do you want “c.frc” be found. Always relative to the enclosing module, or relative to the “fracas” collection, or something else?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 37.32,
        "contains_question": true,
        "action_keywords": [
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T20:43:54.265800",
          "text": "I’m not really clear on what you’re trying to do, but it’s starting to sound like you want to install a collection, and then you can refer to the collection without using an absolute path.\nAnother possibility is that you want to more completely take control over module-path resolution by using `(lib ...)` paths that don’t refer to an installed collection and setting `current-module-name-resolver` to find the would-be collection yourself. That’s not usually a good option, because relying on a custom module name resolver doesn’t play well with tools like `raco make`. But it can work out if you’re at a point where those tools don’t apply. For example, `raco exe` generates an executable that sets `current-module-name-resolver`, and it’s ok because tools like `raco make` don’t apply to an already-constructed executable."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-23T21:21:13.270400",
          "text": "When `(require (file \"dir/c\"))` appears in a `#lang fracas` module, where do you want “c.frc” be found. Always relative to the enclosing module, or relative to the “fracas” collection, or something else?"
        }
      ]
    },
    {
      "conversation_id": "37",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Just noticed the use of [CODE], there must be a collection of such functions, right?\nShavon: and noticed [CODE]... awesome! Priscila what's the best way to integrate a metapict into a scribble document? I tried [CODE] with a [CODE] but complains [CODE] is undefined.\nPriscila: Shavon The list of label functions is here: <[URL]\nPriscila: Wrt to using metapict from Scribble:\nPriscila: Scribble ought to insert picts directly in the text.\nPriscila: So I expect [CODE] to be enough to insert a drawing of a circle.\nPriscila: However, if you want to use [CODE] then you need to require metapict in the environment that examples uses.\nMichelina: Priscila is this some kind of Racket pict/Metapost thing?\nPriscila: Milissa Yes. <[URL]\nShavon: Priscila works wonders! Thanks!\nShavon: Michelina this metapict thing is pretty cool... beautifully done, straight into pdf.\nMichelina: another Priscila joint (<[URL] , first paragraph)\nKami: The documentation is gorgeous. :+1:\nPriscila: Thanks!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 14,
        "duration_minutes": 99.4,
        "contains_question": true,
        "action_keywords": [
          "must",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Michelina",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-24T09:15:12.277000",
          "text": "Just noticed the use of `label-bot`, there must be a collection of such functions, right?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-24T09:41:16.278300",
          "text": "and noticed `label-cnt`... awesome! <@Priscila> what's the best way to integrate a metapict into a scribble document? I tried `@examples` with a `#:result-only` but complains `with-window` is undefined."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T09:47:20.278800",
          "text": "<@Shavon>  The list of label functions is here:  <https://github.com/soegaard/metapict/blob/master/metapict/label.rkt>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T09:48:03.279700",
          "text": "Wrt to using metapict from Scribble:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T09:48:30.280200",
          "text": "Scribble ought to insert picts directly in the text."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T09:49:00.280900",
          "text": "So I expect   `@(draw fullcircle)` to be enough to insert a drawing of a circle."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T09:51:59.281900",
          "text": "However, if you want to use `@examples` then you need to require metapict in the environment that examples uses."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-01-24T10:38:23.282400",
          "text": "<@Priscila> is this some kind of Racket pict/Metapost thing?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T10:38:56.282700",
          "text": "<@Milissa> Yes. <http://soegaard.github.io/docs/metapict/metapict.html>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-24T10:43:46.283600",
          "text": "<@Priscila> works wonders! Thanks!"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-24T10:45:05.284900",
          "text": "<@Michelina> this metapict thing is pretty cool... beautifully done, straight into pdf."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-01-24T10:53:12.285800",
          "text": "another <@Priscila> joint (<https://en.wikipedia.org/wiki/Spike_Lee_filmography> , first paragraph)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-24T10:53:41.286000",
          "text": "The documentation is gorgeous. :+1:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T10:54:36.286200",
          "text": "Thanks!"
        }
      ]
    },
    {
      "conversation_id": "38",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: nice! I've been looking for such a thing. I'll definitely take a look (I write my books with Pollen, targeting ConTeXt, which is deep in the Metapost world.)\nRaul: Should someone give Scribble and Pollen their own pages on Wikipedia? Or at least separate topics on the Racket page?\nPriscila: Raul The reasoning behind Wikipedia is somewhat opaque. <[URL]\nRaul: Priscila Yes, I know. Asking for opinions or votes. More specifically, I propose adding an entry for Pollen to the Wikipedia disambiguation page. \"Scribble\" doesn't yet have a disambiguation page. Thus, four questions: should Pollen and Scribble be mentioned in Wikipedia at all? Should there be disambiguation entries for Pollen and Scribble (in the Racket context); and should these point to separate articles; or should they point to topics on the Racket page? (And are there any volunteers?)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 56.85,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Michelina",
          "Priscila",
          "Raul"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-01-24T10:44:21.284200",
          "text": "nice! I've been looking for such a thing. I'll definitely take a look (I write my books with Pollen, targeting ConTeXt, which is deep in the Metapost world.)"
        },
        {
          "user": "Raul",
          "timestamp": "2019-01-24T11:00:37.286800",
          "text": "Should someone give Scribble and Pollen their own pages on Wikipedia? Or at least separate topics on the Racket page?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-24T11:18:36.287900",
          "text": "<@Raul> The reasoning behind Wikipedia is somewhat opaque. <https://en.wikipedia.org/wiki/Wikipedia:Notability>"
        },
        {
          "user": "Raul",
          "timestamp": "2019-01-24T11:41:12.291300",
          "text": "<@Priscila> Yes, I know. Asking for opinions or votes. More specifically, I propose adding an entry for Pollen to the Wikipedia disambiguation page. \"Scribble\" doesn't yet have a disambiguation page. Thus, four questions: should Pollen and Scribble be mentioned in Wikipedia at all? Should there be disambiguation entries for Pollen and Scribble (in the Racket context); and should these point to separate articles; or should they point to topics on the Racket page? (And are there any volunteers?)"
        }
      ]
    },
    {
      "conversation_id": "39",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Fredia: I want to install a Scribble mode for GNU Emacs. There seem to be two: <[URL] <[URL] Is one preferred over the other? The former appears to be available via MELPA. A quick look at the code suggests that the latter is maybe more featureful (?).\nPriscila: Fredia Haven't tried them. However the file size of Neil's mode is greater than the file size of emacs-pe.\nPriscila: Maybe King knows more?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 3.17,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Fredia",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Fredia",
          "timestamp": "2019-01-25T11:21:49.294300",
          "text": "I want to install a Scribble mode for GNU Emacs. There seem to be two:\n<https://github.com/emacs-pe/scribble-mode>\n<https://www.neilvandyke.org/scribble-emacs/>\nIs one preferred over the other?\nThe former appears to be available via MELPA.\nA quick look at the code suggests that the latter is maybe more featureful (?)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T11:24:46.295800",
          "text": "<@Fredia> Haven't tried them. However the file size of Neil's mode is greater than the file size of emacs-pe."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T11:24:59.296200",
          "text": "Maybe <@King> knows more?"
        }
      ]
    },
    {
      "conversation_id": "40",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Is it just me or is [CODE] not really useful for building paths for the system you’re not on.\nMarcelina: For example, on unix, the following fails: [CODE_BLOCK]\nMarcelina: With the error: [CODE_BLOCK]\nMarcelina: Priscila Thanks anyway.\nMarcelina: But I _can_ make a path with [CODE]\nMarcelina: But I think I remember Clarinda saying a while back that [CODE] and [CODE] are not as good of a way to create paths as [CODE]. I could be mis-remembering though.\nPriscila: You are. The quote is: &gt;Roughly, strings don't work, because they have to be converted to bytes &gt;using the locale's default encoding. Although strings are allowed for &gt;the current platform's convention on the assumption that the current &gt;locale's encoding is the right one, we've avoided building in any &gt;assumption about the encoding for the other convention.\nPriscila: So use byte strings with build-path/convention-type.\nMarcelina: Priscila but byte string fail to match build-path/convention-type’s contract.\nPriscila: huh?\nMarcelina: About the best I’ve got so far is: [CODE_BLOCK] which is very ugly\nMarcelina: Priscila the contract for, say, ‘base’, in build-path is: [CODE]\nPriscila: Oh. Yeah. The example is: [CODE_BLOCK]\nPriscila: Time to make my-build-path !\nMarcelina: Makes sense.\nMarcelina: I wonder if it would make sense to modify make-path/convention-type to be a little less insane.\nPriscila: File paths are insane.\nMichelina: paths drive me crazy\nMarcelina: Priscila and Michelina yes…yes they are…sigh.\nMarcelina: Although honestly, this seems like a level up in terms of insanity to me. Like, maybe I’m missing something as to why the following wouldn’t work:\nMarcelina: [CODE]\nMarcelina: Which seems like it should generate [CODE]\nMichelina: sounds...reasonable\nPriscila: <[URL]\nMichelina: utf-16!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 25,
        "duration_minutes": 23.15,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Marcelina",
          "Michelina",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:09:14.296800",
          "text": "Is it just me or is `build-path/convention-type` not really useful for building paths for the system you’re not on."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:09:30.297300",
          "text": "For example, on unix, the following fails:\n\n```\n(build-path/convention-type 'windows \"foo\")\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:09:54.297800",
          "text": "With the error:\n```\n. . build-path/convention-type: specified convention incompatible with string path element\n  path element: \"foo\"\n  convention: 'windows\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:10:51.299100",
          "text": "<@Priscila> Thanks anyway."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:11:05.299500",
          "text": "But I _can_ make a path with `(bytes-&gt;path #\"foo\" 'windows)`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:11:42.300600",
          "text": "But I think I remember <@Clarinda> saying a while back that `string-&gt;path` and `bytes-&gt;path` are not as good of a way to create paths as `build-path`. I could be mis-remembering though."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T12:13:06.301200",
          "text": "You are. The quote is:\n&gt;Roughly, strings don't work, because they have to be converted to bytes\n&gt;using the locale's default encoding. Although strings are allowed for\n&gt;the current platform's convention on the assumption that the current\n&gt;locale's encoding is the right one, we've avoided building in any\n&gt;assumption about the encoding for the other convention."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T12:13:45.301600",
          "text": "So use byte strings with build-path/convention-type."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:14:15.302100",
          "text": "<@Priscila> but byte string fail to match build-path/convention-type’s contract."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T12:14:25.302500",
          "text": "huh?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:14:35.302700",
          "text": "About the best I’ve got so far is:\n```\n(build-path/convention-type\n 'windows\n (bytes-&gt;path #\"C:\" 'windows)\n (bytes-&gt;path-element #\"foo\" 'windows)\n (bytes-&gt;path-element #\"bar\" 'windows))\n```\nwhich is very ugly"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:15:15.303700",
          "text": "<@Priscila> the contract for, say, ‘base’, in build-path is:\n\n`(or/c path-string? path-for-some-system? 'up 'same)`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T12:15:16.303800",
          "text": "Oh. Yeah. The example is:\n```\n(define (bs-&gt;p bs) (bytes-&gt;path bs 'unix))\n(build-path/convention-type 'unix (bs-&gt;p #\"/\") (bs-&gt;p #\"foo\") (bs-&gt;p #\"bar\"))\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T12:15:42.304200",
          "text": "Time to make my-build-path !"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:16:44.304900",
          "text": "Makes sense."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:17:03.305400",
          "text": "I wonder if it would make sense to modify make-path/convention-type to be a little less insane."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T12:17:27.305600",
          "text": "File paths are insane."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-01-25T12:17:46.306000",
          "text": "paths drive me crazy"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:19:42.306700",
          "text": "<@Priscila> and <@Michelina> yes…yes they are…sigh."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:20:11.307400",
          "text": "Although honestly, this seems like a level up in terms of insanity to me. Like, maybe I’m missing something as to why the following wouldn’t work:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:20:55.308400",
          "text": "`(build-path/convention-type 'windows #\"C:\" #\"foo\" #\"bar\")`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-01-25T12:21:26.309000",
          "text": "Which seems like it should generate `#&lt;windows-path:\"C:\\foo\\bar\"&gt;`"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-01-25T12:25:28.309600",
          "text": "sounds...reasonable"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-25T12:27:00.310100",
          "text": "<http://docs.racket-lang.org/reference/windowspaths.html?q=build-path#%28part._windowspathrep%29>"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-01-25T12:32:23.310300",
          "text": "utf-16!"
        }
      ]
    },
    {
      "conversation_id": "41",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: (...is windows-path really a thing?)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-01-25T12:25:51.309900",
          "text": "(...is windows-path really a thing?)"
        }
      ]
    },
    {
      "conversation_id": "42",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: yeah that's the same encoding that you might have known as WTF8\nJulia: Kristeen I'm not at all familiar with [CODE]. From reading the docs, I'm not sure what racket-mode ought to do. What would be an example of something racket-mode didn't do, that you expected?\nKristeen: Julia for example, it needs to look there to find the collections needed by the file I'm running\nJulia: OK. I'll see if maybe command-line Racket does this via, what's it called, [CODE], and also see what DrR does in this regard.\nKristeen: Julia DrRacket works correctly here\nKristeen: but it's not doing something in [CODE], it's much lower level\nJulia: Kristeen It looks to me like the default value of [CODE] -- which racket-mode does _not_ set otherwise -- is supposed to be result of [CODE], and that is what is supposed to include (a subdir of) addon-dir: <[URL]\nKristeen: you just want to carry over the environment variable, I think\nKristeen: the alternative would be to read the environment variable and then pass it via [CODE] on the command line\nKristeen: or (maybe) read the environment variable and the set [CODE] and various other things yourself but that sounds unlikely to be the right approach\nJulia: I think [CODE] is supposed to default to [CODE].\nJulia: And racket-mode doesn't do anything to fubar that, AFAICT.\nJulia: Running racket-mode with (say) 6.10: [CODE_BLOCK]\nJulia: Does that seem correct to you?\nJulia: With a build of HEAD it's [CODE_BLOCK]\nJulia: Kristeen What does it look like for you? And, is [CODE] as you expect, does it match the env var?\nKristeen: Julia, sorry, this was a problem with weird package/environment config stuff I did\nKristeen: I fixed that and racket-mode started doing the right thing\nKristeen: although it still does something strange\nKristeen: that might be about sandboxing?\nKristeen: but that problem is less obvious what's going on so I'll report more later\nJulia: Kristeen No worries, glad to hear the immediate problem is resolved. Curious to hear more later about Stranger Things.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 22,
        "duration_minutes": 182.95,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T13:05:37.310900",
          "text": "yeah that's the same encoding that you might have known as WTF8"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:15:16.314400",
          "text": "<@Kristeen> I'm not at all familiar with `PLTADDONDIR`. From reading the docs, I'm not sure what racket-mode ought to do. What would be an example of something racket-mode didn't do, that you expected?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T15:28:25.315100",
          "text": "<@Julia> for example, it needs to look there to find the collections needed by the file I'm running"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:30:22.316500",
          "text": "OK. I'll see if maybe command-line Racket does this via, what's it called, `racket/init`, and also see what DrR does in this regard."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T15:38:10.318300",
          "text": "<@Julia> DrRacket works correctly here"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T15:38:33.319000",
          "text": "but it's not doing something in `racket/init`, it's much lower level"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:38:34.319100",
          "text": "<@Kristeen> It looks to me like the default value of `current-library-collection-paths` -- which racket-mode does _not_ set otherwise -- is supposed to be result of `find-library-collection-paths`, and that is what is supposed to include (a subdir of) addon-dir: <https://docs.racket-lang.org/reference/collects.html#(def._((quote._~23~25kernel)._find-library-collection-paths))>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T15:38:55.319500",
          "text": "you just want to carry over the environment variable, I think"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T15:40:17.320000",
          "text": "the alternative would be to read the environment variable and then pass it via `-A` on the command line"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T15:41:03.320800",
          "text": "or (maybe) read the environment variable and the set `current-library-collection-paths` and various other things yourself but that sounds unlikely to be the right approach"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:42:16.321500",
          "text": "I think `current-library-collection-paths` is supposed to default to `find-library-collection-paths`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:42:34.322000",
          "text": "And racket-mode doesn't do anything to fubar that, AFAICT."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:42:55.322500",
          "text": "Running racket-mode with (say) 6.10:\n```\nWelcome to Racket v6.10.\nfoo.rkt&gt; (find-library-collection-paths)  ;(current-library-collection-paths) gives identical result\n'(#&lt;path:/Users/greg/Library/Racket/6.10/collects&gt;\n  #&lt;path:/Applications/Racket_v6.10/collects&gt;)\nfoo.rkt&gt; (find-system-path 'addon-dir)\n#&lt;path:/Users/greg/Library/Racket/&gt;\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:43:05.322800",
          "text": "Does that seem correct to you?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:44:36.323200",
          "text": "With a build of HEAD it's\n```\nWelcome to Racket v7.2.0.2.\nfoo.rkt&gt; (find-library-collection-paths)    ;(current-library-collection-paths) gives identical result\n'(#&lt;path:/Users/greg/Library/Racket/development/collects&gt;\n  #&lt;path:/Users/greg/src/racket-lang/racket/collects&gt;)\nfoo.rkt&gt; (find-system-path 'addon-dir)\n#&lt;path:/Users/greg/Library/Racket/&gt;\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T15:46:18.323900",
          "text": "<@Kristeen> What does it look like for you?\nAnd, is `(find-system-path 'addon-dir)` as you expect, does it match the env var?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T16:05:48.324600",
          "text": "<@Julia>, sorry, this was a problem with weird package/environment config stuff I did"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T16:06:05.325000",
          "text": "I fixed that and racket-mode started doing the right thing"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T16:06:28.325300",
          "text": "although it still does something strange"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T16:06:39.325500",
          "text": "that might be about sandboxing?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T16:07:19.325900",
          "text": "but that problem is less obvious what's going on so I'll report more later"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-25T16:08:34.326800",
          "text": "<@Kristeen> No worries, glad to hear the immediate problem is resolved.\nCurious to hear more later about Stranger Things."
        }
      ]
    },
    {
      "conversation_id": "43",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Susana: unicode means 16-bit wide chars, right? that’s what we thought in the 90s\nKristeen: Julia it appears that if I start emacs with [CODE] set, racket-mode doesn't respect that",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 1.42,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Susana"
        ]
      },
      "timeline": [
        {
          "user": "Susana",
          "timestamp": "2019-01-25T13:51:58.311400",
          "text": "unicode means 16-bit wide chars, right? that’s what we thought in the 90s"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-25T13:53:23.312000",
          "text": "<@Julia> it appears that if I start emacs with `PLTADDONDIR` set, racket-mode doesn't respect that"
        }
      ]
    },
    {
      "conversation_id": "44",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Fredia Priscila with regards to scribble mode, I use the one in MELPA, which is the [CODE] one. That's based off Neils emacs mode. If you check github: <[URL] you will see he has a [CODE] branch which I expect it's from where he extended refactored his mode. I haven't really gotten to install both and compare or read the source code. To be honest, I assumed the one from MELPA to be the [CODE] one.\nShavon: [CODE] - that's an assumption I haven't confirmed.\nFredia: Shavon Thank you for the advice!\nShavon: Fredia no probs. I hope you're here to finally rewrite creduce in racket. :wink:\nShavon: Is there any GraphQL Racket client I have missed? It seems there isn't... but I wanted to confirm before trying to do something about it.\nPriscila: Shavon <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 1841.53,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Fredia",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-28T08:43:01.329600",
          "text": "<@Fredia> <@Priscila> with regards to scribble mode, I use the one in MELPA, which is the `emacs-pe` one. That's based off Neils emacs mode. If you check github: <https://github.com/emacs-pe/scribble-mode> you will see he has a `neil` branch which I expect it's from where he extended refactored his mode. I haven't really gotten to install both and compare or read the source code. To be honest, I assumed the one from MELPA to be the `official` one."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-28T08:51:06.330200",
          "text": "`That's based off Neils emacs mode.` - that's an assumption I haven't confirmed."
        },
        {
          "user": "Fredia",
          "timestamp": "2019-01-28T09:17:26.330600",
          "text": "<@Shavon> Thank you for the advice!"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-28T09:18:24.331100",
          "text": "<@Fredia> no probs. I hope you're here to finally rewrite creduce in racket. :wink:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-29T14:26:07.335300",
          "text": "Is there any GraphQL Racket client I have missed? It seems there isn't... but I wanted to confirm before trying to do something about it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-29T15:24:33.336700",
          "text": "<@Shavon> <https://github.com/certainty/graphql-racket>"
        }
      ]
    },
    {
      "conversation_id": "45",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Verena: hello. does anyone have racket running on latest macOS successfully? DrRacket crashes doesn't launch for me.\nLavette: I have Racket 7.1 running on macOS 10.14.1, works fine. I installed it with [CODE]\nVerena: [CODE_BLOCK] [CODE_BLOCK] Mac OS X does not make it easy to view and copy an applciation path. The \"Get Info\" feature is underwhelming.\nVerena: The fucker runs when I cd into the directory and run it from terminal. the fuck?\nVerena: But running it from Finder or the launch pad still doesn't work after getting it to run from Terminal.\nJulia: Every generation must invent its own XML :slightly_smiling_face:\nPriscila: Oh! That's a server. Nevermind...\nSang: I just finished reading the latest gradual typing paper / survey from Eryn / Bruce et al in DLS18… I’m trying to find one that was brought up during racket summer school 2 summers ago. I think it was still fairly new at that point. It had some really good / bizarre scenarios in it. I thought I bookmarked the survey but I can’t find it now. Anyone have a reference or remember it’s name or anything?\nSang: (I _think_ Bruce was involved with both)\nAmira: Can We Crowdsource Language Design? <[URL]\nVerena: using --verbose twice did not change the output\nVerena: Any way co have pre-release co-habitate with stable?\nSang: yes yes yes. thank you!\nSang: they also had a survey up at the time (not on mechanical turk iirc)\nVerena: GraphQL Graph Query Language. Compare to SQL\nVerena: Amira Not sure I want to hear all that racket... :sweat_smile:\nVerena: Amira Not sure I want to hear all that racket... :sweat_smile:\nVerena: The pre-release download is not downloading.\nVerena: Dragging binary from folder and back into it did fix the problem. Another dumb expression that you'd have to have created OS X to know.\nVerena: It also shows a popup saying DrRacket would like to control your computer via accessibility settings. What is that for\nVerena: Thank you Clarinda\nClarinda: The accessibility warning is because Racket’s GUI library tries to install a hook (to watch for clicks on the menu bar) that it turns out not to need. We’ve fixed that for the upcoming release.",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 22,
        "duration_minutes": 1223.2,
        "contains_question": true,
        "action_keywords": [
          "create",
          "finish",
          "fix",
          "must"
        ],
        "decision_keywords": [
          "rejected"
        ],
        "participants": [
          "Amira",
          "Clarinda",
          "Julia",
          "Lavette",
          "Priscila",
          "Sang",
          "Verena"
        ]
      },
      "timeline": [
        {
          "user": "Verena",
          "timestamp": "2019-01-29T02:04:56.333200",
          "text": "hello. does anyone have racket running on latest macOS successfully? DrRacket crashes doesn't launch for me."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-01-29T03:09:54.333400",
          "text": "I have Racket 7.1 running on macOS 10.14.1, works fine. I installed it with `brew cask install racket`"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T15:10:10.335500",
          "text": "```spctl --status --verbose\nassessments enabled\ndeveloper id enabled```\n```spctl --assess --verbose This/is/mac/quit/using/file/paths/and/terminals/and/enter/the/21st/century\n/path/DrRacket: rejected\nsource=no usable signature\n```\nMac OS X does not make it easy to view and copy an applciation path. The \"Get Info\" feature is underwhelming."
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T15:18:23.335800",
          "text": "The fucker runs when I cd into the directory and run it from terminal. the fuck?"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T15:20:19.336000",
          "text": "But running it from Finder or the launch pad still doesn't work after getting it to run from Terminal."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-29T15:23:52.336500",
          "text": "Every generation must invent its own XML :slightly_smiling_face:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-29T15:24:56.337100",
          "text": "Oh! That's a server. Nevermind..."
        },
        {
          "user": "Sang",
          "timestamp": "2019-01-29T17:27:45.340400",
          "text": "I just finished reading the latest gradual typing paper / survey from <@Eryn> / <@Bruce> et al in DLS18… I’m trying to find one that was brought up during racket summer school 2 summers ago. I think it was still fairly new at that point. It had some really good / bizarre scenarios in it. I thought I bookmarked the survey but I can’t find it now. Anyone have a reference or remember it’s name or anything?"
        },
        {
          "user": "Sang",
          "timestamp": "2019-01-29T17:28:26.341000",
          "text": "(I _think_ <@Bruce> was involved with both)"
        },
        {
          "user": "Amira",
          "timestamp": "2019-01-29T17:32:39.341500",
          "text": "Can We Crowdsource Language Design? <https://cs.brown.edu/~sk/Publications/Papers/Published/tpk-crowdsource-lang-design/>"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T17:34:41.341600",
          "text": "using --verbose twice did not change the output"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T17:36:11.341800",
          "text": "Any way co have pre-release co-habitate with stable?"
        },
        {
          "user": "Sang",
          "timestamp": "2019-01-29T17:48:52.342100",
          "text": "yes yes yes. thank you!"
        },
        {
          "user": "Sang",
          "timestamp": "2019-01-29T17:51:48.342500",
          "text": "they also had a survey up at the time (not on mechanical turk iirc)"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T18:07:04.342900",
          "text": "GraphQL Graph Query Language. Compare to SQL"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T18:08:16.343400",
          "text": "<@Amira> Not sure I want to hear all that racket... :sweat_smile:"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T18:08:38.343500",
          "text": "<@Amira> Not sure I want to hear all that racket... :sweat_smile:"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T18:09:59.343700",
          "text": "The pre-release download is not downloading."
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T22:21:29.345200",
          "text": "Dragging binary from folder and back into it did fix the problem. Another dumb expression that you'd have to have created OS X to know."
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T22:22:19.345400",
          "text": "It also shows a popup saying DrRacket would like to control your computer via accessibility settings. What is that for"
        },
        {
          "user": "Verena",
          "timestamp": "2019-01-29T22:25:48.345600",
          "text": "Thank you <@Clarinda>"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-29T22:28:08.345800",
          "text": "The accessibility warning is because Racket’s GUI library tries to install a hook (to watch for clicks on the menu bar) that it turns out not to need. We’ve fixed that for the upcoming release."
        }
      ]
    },
    {
      "conversation_id": "46",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Verena My guess is an issue with code signing. If that’s it, then command-dragging DrRacket out of its folder and back will likely fix the problem... BUT FIRST, what output do you see for the following commands (as suggested by Jeanine in a different thread today on code-signing problems)? [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-01-29T09:59:20.334000",
          "text": "<@Verena> My guess is an issue with code signing. If that’s it, then command-dragging DrRacket out of its folder and back will likely fix the problem... BUT FIRST, what output do you see for the following commands (as suggested by <@Jeanine> in a different thread today on code-signing problems)?\n```\nspctl --status --verbose\nspctl --assess --verbose PATH/TO/DrRacket.app\n```"
        }
      ]
    },
    {
      "conversation_id": "47",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Thanks! But [CODE] doesn’t seem very verbose. How about [CODE], since repeating the option is supposed to make it more verbose.\nClarinda: Another thing to check: whether the almost-7.2 build at <[URL] behaves any better, since it has an updated code-signing certificate.\nGonzalo: I think GraphQL is more than “just another XML”, fwiw… it’s not really a transport format but a query language.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 7.53,
        "contains_question": false,
        "action_keywords": [
          "build",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-01-29T15:51:17.337200",
          "text": "Thanks! But `--verbose` doesn’t seem very verbose. How about `--verbose --verbose`, since repeating the option is supposed to make it more verbose."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-29T15:52:25.337400",
          "text": "Another thing to check: whether the almost-7.2 build at <https://pre-release.racket-lang.org> behaves any better, since it has an updated code-signing certificate."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-29T15:58:49.338200",
          "text": "I think GraphQL is more than “just another XML”, fwiw… it’s not really a transport format but a query language."
        }
      ]
    },
    {
      "conversation_id": "48",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: It downloads for me, so I’m not sure what the difference might be. There’s no problem having two different Racket installations in different folders.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-01-29T18:22:36.344200",
          "text": "It downloads for me, so I’m not sure what the difference might be. There’s no problem having two different Racket installations in different folders."
        }
      ]
    },
    {
      "conversation_id": "49",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Julia Right, Gonzalo is correct, GraphQL is a query language. This is the kind of thing I am generally not interested in but it seems the Github API v4, relies on it, and I would love to have a good API to v4 in racket. So, I am stuck at looking into the GraphQL v4 spec.\nJulia: AFAICT GraphQL is actually mostly used to replace resource-oriented (REST-ish) web APIs. Those classic APIs are harder to change casually. Which is great for 3rd party users of the API. But annoying for an in-house team using the API, to make a web or native app.\nJulia: So maybe GraphQL is a query language. But I am less interested in whether it is mammal or reptile, than the fact it is pooping on my lawn and should get off it. :grin:\nGonzalo: I feel like I’ve asked this question before, but: what is the right way to check if a module exists, given a module path? I thought maybe [CODE] was what I was looking for, but that still throws an exception if the module does not exist (and passing [CODE] for the second argument will return [CODE] even if the module exists but has not been loaded). Am I supposed to just catch the exception?\nGonzalo: Is there some fundamental reason for that? Which is to say, is there some reason that checking for such a thing is considered a bad idea? Or should I just embrace calling [CODE] and catching the exception?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 693.27,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Julia",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T02:56:52.347600",
          "text": "<@Julia> Right, <@Gonzalo> is correct, GraphQL is a query language. This is the kind of thing I am generally not interested in but it seems the Github API v4, relies on it, and I would love to have a good API to v4 in racket. So, I am stuck at looking into the GraphQL v4 spec."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T10:33:05.352200",
          "text": "AFAICT GraphQL is actually mostly used to replace resource-oriented (REST-ish) web APIs.\nThose classic APIs are harder to change casually.\nWhich is great for 3rd party users of the API.\nBut annoying for an in-house team using the API, to make a web or native app."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T10:34:32.353400",
          "text": "So maybe GraphQL is a query language. But I am less interested in whether it is mammal or reptile, than the fact it is pooping on my lawn and should get off it. :grin:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-30T14:24:03.355800",
          "text": "I feel like I’ve asked this question before, but: what is the right way to check if a module exists, given a module path? I thought maybe `(module-declared? mod-path #t)` was what I was looking for, but that still throws an exception if the module does not exist (and passing `#f` for the second argument will return `#f` even if the module exists but has not been loaded). Am I supposed to just catch the exception?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-30T14:30:08.357300",
          "text": "Is there some fundamental reason for that? Which is to say, is there some reason that checking for such a thing is considered a bad idea? Or should I just embrace calling `(current-module-name-resolver)` and catching the exception?"
        }
      ]
    },
    {
      "conversation_id": "50",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: There’s not really a way to ask “would this module exist if I tried to load it?” and I don’t know if a better approach than catching the exception.\nGonzalo: For a little bit of context, I’m writing a function that checks if a submodule exists and loads it if it does, but I want to raise an error (in terms of my function, not the module name resolver) if the _base module_ does not exist.\nClarinda: There are some minor problems with the idea of checking. For example, does a module exists or not if it would be loaded from a particular file, but you don’t have read permissions on the file? Do you care what happens if a file that would implement the module disappears between the time that you check? A module name resolver might take other steps that complicate the question. As a practical matter, the real issue is that the ability to check for a module isn’t part of the API for a module name resolver.\nGonzalo: Yes, that makes sense… the race condition certainly came to mind, though the issue of permissions didn’t. Submodules are clearly different, though, in that [CODE] doesn’t complain if the submodule doesn’t exist, which I guess is what allows things like [CODE] and [CODE] submodules to work? My pattern is similar—if a submodule exists, I want to use it, but if it doesn’t, it isn’t an error—but since the user provides the parent module path and I look up the submodule (and the parent module really does need to exist for this operation to even make any sense), I figured it would be a simple nicety to provide the extra check that the parent module exists in case something else went wrong. I don’t think that check can really hurt here, but maybe it’d be best to attempt to load the parent module but _not_ bother with catching the exception, and I should just let the module name resolver do the error reporting.\nClarinda: Sounds right. As for submodules, there’s a delicate balance that we were able to retrofit into the handlers that makes checking for a submodule possible — but only just.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 74.58,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-01-30T14:29:01.357100",
          "text": "There’s not really a way to ask “would this module exist if I tried to load it?” and I don’t know if a better approach than catching the exception."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-30T14:31:09.357500",
          "text": "For a little bit of context, I’m writing a function that checks if a submodule exists and loads it if it does, but I want to raise an error (in terms of my function, not the module name resolver) if the _base module_ does not exist."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-30T15:26:56.357700",
          "text": "There are some minor problems with the idea of checking. For example, does a module exists or not if it would be loaded from a particular file, but you don’t have read permissions on the file? Do you care what happens if a file that would implement the module disappears between the time that you check? A module name resolver might take other steps that complicate the question. As a practical matter, the real issue is that the ability to check for a module isn’t part of the API for a module name resolver."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-01-30T15:37:58.357900",
          "text": "Yes, that makes sense… the race condition certainly came to mind, though the issue of permissions didn’t. Submodules are clearly different, though, in that `module-declared?` doesn’t complain if the submodule doesn’t exist, which I guess is what allows things like `configure-runtime` and `reader` submodules to work? My pattern is similar—if a submodule exists, I want to use it, but if it doesn’t, it isn’t an error—but since the user provides the parent module path and I look up the submodule (and the parent module really does need to exist for this operation to even make any sense), I figured it would be a simple nicety to provide the extra check that the parent module exists in case something else went wrong. I don’t think that check can really hurt here, but maybe it’d be best to attempt to load the parent module but _not_ bother with catching the exception, and I should just let the module name resolver do the error reporting."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-01-30T15:43:36.358100",
          "text": "Sounds right. As for submodules, there’s a delicate balance that we were able to retrofit into the handlers that makes checking for a submodule possible — but only just."
        }
      ]
    },
    {
      "conversation_id": "51",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Huh, that sounds really similar to how URL fragments work",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-01-30T16:25:14.358300",
          "text": "Huh, that sounds really similar to how URL fragments work"
        }
      ]
    },
    {
      "conversation_id": "52",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lauryn: Hi guys! I have a question here: Is there a way to make DrRacket code work with git? I mean, I can push everything to the repo, but the way it appears in github is absolutely bizarre. It is not possible to read the code itself. I've google it but didn't find anything helpful. I would appreciate any possible help! Thank you in advance!\nPriscila: Lauryn Does your program contain an image?\nLauryn: Yes! I'm following HTDP2 and would love to keep everything on github.\nPriscila: Programs without images directly inserted in the program looks normal.\nPriscila: The solution to your problem must be to save the image next to your rkt-file.\nPriscila: Then use [CODE] to load the image.\nPriscila: I think you want to use, say, [CODE] to load your image.\nLauryn: I'm here following you. Thanks! Did I understand correctly, that without an image I can push any [CODE] file to github as I can do it for example with [CODE] file?\nPriscila: yes\nPriscila: Note that even when the source contains an image you can still push it to Github - but you can't read the source on Github.\nLauryn: Hmmm... ?! Even without an image, the code appears on github very strangely, means I can't read it at all\nLauryn: Thanks again for your help!\nPriscila: Lauryn It might be that the source file used to contain an image.\nPriscila: I am not sure of the details, but it could be DrRacket switches mode when the first image is inserted.\nPriscila: Try with a brand new file.\nLauryn: Ok! Thanks a lot! Let me try it one more time and I will get back to you if you don't mind! Thanks again! Appreciate it!\nLauryn: Well, somehow it is not working...\nLauryn: None\nLauryn: that is my original file\nLauryn: and that is how it appears on github:\nLauryn: None\nPriscila: The comment box has the same effect. If the source file contains nothing but text, it ought to work.\nLauryn: As you see I don't have any pictures in my file\nPriscila: Yes. Now the issue is the comment box.\nPriscila: If you use standard comments it works.\nLauryn: you mean this way? :\nLauryn: None\nPriscila: yes\nLauryn: Ok! Thanks again! Let me try it one more time :slightly_smiling_face:\nPriscila: Also you can test it by opening the rkt file in an text editor on your own computer (it's not neccessary to upload to Github)\nShavon: Julia in frog is there a way to access a list of all the available pages to build the index or these need to be hardcoded?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 31,
        "duration_minutes": 46.18,
        "contains_question": true,
        "action_keywords": [
          "build",
          "must",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Lauryn",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T16:35:47.363400",
          "text": "Hi guys!\nI have a question here:\nIs there a way to make DrRacket code work with git? I mean, I can push everything to the repo, but the way it appears in github is absolutely bizarre. It is not possible to read the code itself. I've google it but didn't find anything helpful.\nI would appreciate any possible help!\nThank you in advance!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:36:37.363900",
          "text": "<@Lauryn> Does your program contain an image?"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T16:37:48.364800",
          "text": "Yes! I'm following HTDP2 and would love to keep everything on github."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:39:11.365700",
          "text": "Programs without images directly inserted in the program looks normal."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:39:32.366200",
          "text": "The solution to your problem must be to save the image next to your rkt-file."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:39:46.366600",
          "text": "Then use `load- ... something ...` to load the image."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:40:51.367700",
          "text": "I think you want to use, say,  `(bitmap/file \"an image.png\")` to load your image."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T16:44:11.370300",
          "text": "I'm here following you. Thanks!\nDid I understand correctly, that without an image I can push any `somename.rkt` file to github as I can do it for example with `.js` file?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:44:21.370500",
          "text": "yes"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:45:05.371900",
          "text": "Note that even when the source contains an image you can still push it to Github - but you can't read the source on Github."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T16:46:10.372800",
          "text": "Hmmm... ?! Even without an image, the code appears on github very strangely, means I can't read it at all"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T16:46:28.373100",
          "text": "Thanks again for your help!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:46:49.373600",
          "text": "<@Lauryn> It might be that the source file used to contain an image."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:47:21.374400",
          "text": "I am not sure of the details, but it could be DrRacket switches mode when the first image is inserted."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T16:47:29.374700",
          "text": "Try with a brand new file."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T16:48:40.375800",
          "text": "Ok! Thanks a lot! Let me try it one more time and I will get back to you if you don't mind!\nThanks again! Appreciate it!"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:00:43.376400",
          "text": "Well, somehow it is not working..."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:01:12.376900",
          "text": "None"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:01:23.377400",
          "text": "that is my original file"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:01:36.378000",
          "text": "and that is how it appears on github:"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:01:54.378400",
          "text": "None"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:01:57.378800",
          "text": "The comment box has the same effect. If the source file contains nothing but text, it ought to work."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:02:58.379200",
          "text": "As you see I don't have any pictures in my file"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:03:13.379500",
          "text": "Yes. Now the issue is the comment box."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:03:32.379900",
          "text": "If you use standard comments it works."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:06:44.380600",
          "text": "you mean this way? :"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:07:02.380700",
          "text": "None"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:07:11.381100",
          "text": "yes"
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-01-30T17:09:32.381900",
          "text": "Ok! Thanks again! Let me try it one more time :slightly_smiling_face:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:13:00.383000",
          "text": "Also you can test it by opening the rkt file in an text editor on your own computer (it's not neccessary to upload to Github)"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:21:58.383600",
          "text": "<@Julia> in frog is there a way to access a list of all the available pages to build the index or these need to be hardcoded?"
        }
      ]
    },
    {
      "conversation_id": "53",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: also, is there any magic incantation to get an [CODE] generated? I get it to generate my pages, but not an [CODE].\nPriscila: Do you have an index-template.html ?\nPriscila: And are you using [CODE] ?\nShavon: yes, I copied post-template.html to index-template.html just for testing.\nShavon: [CODE] not working...\nPriscila: hmm\nShavon: was actually hoping verbose mode would work but with [CODE] I get: [CODE_BLOCK]\nShavon: :slightly_smiling_face:\nPriscila: !\nShavon: ... not that verbose.\nShavon: my pages are generates but index is not. I have no posts...\nShavon: could it be the lack of posts...let me check.\nShavon: shame... not that.\nJulia: Well the verbosity is mostly per blog post because that is mostly what a static blog generator generates :stuck_out_tongue:\nShavon: ah... explains lack of verbosity.\nJulia: I have to go AFK in a minute but I will try to look at this with zero blog posts and see if I can repro what you're seeing.\nShavon: i added a blog post... draft. still no index.\nJulia: Was this a fresh [CODE], or something you had from before?\nShavon: ah, yes...\nShavon: yes...\nShavon: that was from a fresh [CODE].\nShavon: index is not generated if there are no posts.\nShavon: or if the post is draft.\nShavon: as soon as i added a non-draft post, it worked.\nShavon: i guess you policy was... this is for blogs, no posts =&gt; no blog =&gt; deserved no index. :slightly_smiling_face:\nJulia: Oh. Right. The draft thing means, don't generate at all. Sorry that was confusing.\nShavon: so, to explain. i started a new frog blog. removed example post, copied post-template to index-template and removed footer. added page. no index generated. added post using [CODE], no index generated. Removed draft tag from dummy post. It worked!\nJulia: Frog started as a blog generator that was supposed to be \"just works\", Model T, any color so long as the color is black. It's gotten more configurable over time, but the happy path is definitely a blog. Not a general static site generator.\nJulia: Yikes, my phone just did a really loud emergency alert about snow squalls coming there. Startled me.\nShavon: sure... will move my no posts config to a all posts, no pages config. :slightly_smiling_face:\nShavon: huh, careful with the snow. us storms are all over the news here in germany.\nShavon: thanks Julia, time to snooze around here. will take a look at this tomorrow and change the configuration of my frog to have posts instead of pages.\nJulia: It's been crazy cold out in the U.S. mid-West like Chicago and Minneapolis, -30 F wind chill, etc. Some of that headed to Boston now but not quite as bad.\nJulia: Shavon Sounds good. Good night.\nPriscila: Yikes -34ºC !\nShavon: phew, that's *really* cold. And yet, I keep complaining about +1 C outside.\nShavon: How can I avoid section numbering in scribble files? This is related to using scribble files in frog. Section numbers in a post just look wrong. Julia?\nJeanine: Shavon use [CODE]\nShavon: Jeanine thanks",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 39,
        "duration_minutes": 728.77,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [
          "sounds good"
        ],
        "participants": [
          "Jeanine",
          "Julia",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:43:57.384200",
          "text": "also, is there any magic incantation to get an `index.html` generated? I get it to generate my pages, but not an `index.html`."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:45:51.384600",
          "text": "Do you have an index-template.html ?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:46:32.385000",
          "text": "And are you using `raco frog -b` ?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:50:40.385400",
          "text": "yes, I copied post-template.html to index-template.html just for testing."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:50:47.385700",
          "text": "`raco frog -b` not working..."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:51:05.385900",
          "text": "hmm"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:51:49.386400",
          "text": "was actually hoping verbose mode would work but with `raco frog -bV` I get:\n```\nraco frog -bV\nFrog 0.29\nVery verbose mode\n```"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:51:52.386600",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T17:52:00.387000",
          "text": "!"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:52:01.387100",
          "text": "... not that verbose."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:52:36.387400",
          "text": "my pages are generates but index is not. I have no posts..."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:52:48.387700",
          "text": "could it be the lack of posts...let me check."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:53:35.387900",
          "text": "shame... not that."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T17:55:11.388700",
          "text": "Well the verbosity is mostly per blog post because that is mostly what a static blog generator generates :stuck_out_tongue:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:55:34.389200",
          "text": "ah... explains lack of verbosity."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T17:55:49.389600",
          "text": "I have to go AFK in a minute but I will try to look at this with zero blog posts and see if I can repro what you're seeing."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:56:10.390000",
          "text": "i added a blog post... draft. still no index."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T17:57:14.390600",
          "text": "Was this a fresh `raco frog --init`, or something you had from before?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:57:49.390800",
          "text": "ah, yes..."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:57:51.391100",
          "text": "yes..."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:57:59.391500",
          "text": "that was from a fresh `raco frog --init`."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:58:07.391900",
          "text": "index is not generated if there are no posts."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:58:13.392200",
          "text": "or if the post is draft."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:58:24.392700",
          "text": "as soon as i added a non-draft post, it worked."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:58:52.393600",
          "text": "i guess you policy was... this is for blogs, no posts =&gt; no blog =&gt; deserved no index. :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T17:58:56.393700",
          "text": "Oh. Right. The draft thing means, don't generate at all. Sorry that was confusing."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T17:59:59.395600",
          "text": "so, to explain. i started a new frog blog. removed example post, copied post-template to index-template and removed footer. added page. no index generated. added post using `-N`, no index generated. Removed draft tag from dummy post. It worked!"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T18:00:05.395800",
          "text": "Frog started as a blog generator that was supposed to be \"just works\", Model T, any color so long as the color is black.\nIt's gotten more configurable over time, but the happy path is definitely a blog. Not a general static site generator."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T18:00:32.396500",
          "text": "Yikes, my phone just did a really loud emergency alert about snow squalls coming there. Startled me."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T18:00:39.396700",
          "text": "sure... will move my no posts config to a all posts, no pages config. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T18:01:07.397200",
          "text": "huh, careful with the snow. us storms are all over the news here in germany."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-30T18:01:40.398100",
          "text": "thanks <@Julia>, time to snooze around here. will take a look at this tomorrow and change the configuration of my frog to have posts instead of pages."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T18:02:10.398700",
          "text": "It's been crazy cold out in the U.S. mid-West like Chicago and Minneapolis, -30 F wind chill, etc.\nSome of that headed to Boston now but not quite as bad."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-30T18:02:32.399000",
          "text": "<@Shavon> Sounds good. Good night."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-30T18:07:34.399300",
          "text": "Yikes -34ºC !"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T05:30:33.402500",
          "text": "phew, that's *really* cold. And yet, I keep complaining about +1 C outside."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T05:31:15.403400",
          "text": "How can I avoid section numbering in scribble files? This is related to using scribble files in frog. Section numbers in a post just look wrong. <@Julia>?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-01-31T05:49:35.403900",
          "text": "<@Shavon> use `@section[#:style 'unnumbered]{Section title}`"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T05:52:43.404100",
          "text": "<@Jeanine> thanks"
        }
      ]
    },
    {
      "conversation_id": "54",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: yeah it was -6 F here today without wind chill",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-01-30T20:53:37.400900",
          "text": "yeah it was -6 F here today without wind chill"
        }
      ]
    },
    {
      "conversation_id": "55",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: let's all stay inside and write code.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "let's"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-01-30T23:07:30.401700",
          "text": "let's all stay inside and write code."
        }
      ]
    },
    {
      "conversation_id": "56",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Brook: Hey! I'm working on a syntax-highlighting plugin for VSCode, but it's still early work in progress. I managed to fix number scoping with the help of Jens from our google group, so I figured I might ask some questions here as well.\nBrook: (repo: <[URL]\nKami: Brook Awesome! I put together a similar syntax file for SublimeText &amp; Amp, but it's really not accurate so I didn't post it publicly yet. I'll check if I can get some inspiration from your work :slightly_smiling_face:\nBrook: Currently, the first symbol in a list is highlighted as a function call; it's a little brittle, though (things like [CODE] don't work), and sometimes outright incorrect: [CODE] highlights the [CODE] and [CODE] as functions. So, the question is: should I drop this \"feature\" altogether? DrRacket simply highlights known functions (exported from [CODE]) and the rest is plain \"symbols\".\nKami: I kinda like the \"first symbol is different' rule, but I guess it's a personal preference\nBrook: Kami I'm not sure how syntax highlighting works for Sublime, but I guess it's got something to do with textMate as well. My grammar file is a [CODE], so maybe I'd be able to export it to the SublimeText format. That means we could join forces on the project and make it the standart across more editors than just VSCode :slightly_smiling_face:\nKami: I'd be glad to join force on this, definitely! Writing good syntax files is hard and time consuming\nKami: The sublime syntax was textMate before, but changed to a new custom \"sublimeSyntax\" system. Amp decided to use the same system as sublime\nKami: most of the time, they're just regexps with greedy/not greedy rules\nBrook: Just checked out their webpage. It says &gt; Sublime Syntax files are YAML files with a small header, followed by a list of contexts. [...]\nBrook: Seems good. Maybe no conversion will be needed, or maybe just some manual key-changing.\nKami: a bit\nKami: it looks like this :\nKami: <[URL]\nKami: (I did this one for Forth, but also did one for Racket I didn't published)\nBrook: Well, now that I'm looking into it, the semantics are little different. It seems to be more powerful than the textmate style, and has some additional constructs, too.\nKami: yep\nKami: most keys are custom, you can choose the names\nKami: then put them together\nKami: the only real keywords are \"match\", \"push\", \"pull\", \"scope\", \"pop\"\nKami: it works like a stack machine with regexps\nBrook: Yep, that's the notion I got from their webpage as well. I think the \"ideas\" will translate very well, though.\nBrook: And it seems you'll be able to handle quotes and unquotes correctly. Pushing and popping a stack, so you'll be able to correctly asses whether the things are quoted, or unquoted, even in some deeply nested scenarios.\nBrook: Pretty cool.\nKami: yep :slightly_smiling_face:\nElin: Some kind of stack (explicit or implicitly handled by the language) will be necessary to count the parantheses for anything like a [CODE] comment\nBrook: Oh hey. You're the guy from SO!\nBrook: Yep. One can emulate this in textmate grammars by matching [CODE] and [CODE] and between it some things like parentheses, strings etc.\nBrook: The problems is, I'd have to basically have two grammars: one for those normal constructs which would scope them under numbers, strings etc, and other, which could recognize them just as well, but scope them under comments. 1kloc → 2kloc in a blink. Not worth it just for the comments, I think.\nElin: Grammars (things like context-free-grammars or CFGs) implicitly handle a stack for you, which is really convenient\nBrook: I'll have to read more on those grammars you keep mentioning. They work somehow like a Haskell Parser would, right?\nBrook: (sorry, don't know better example)\nElin: Are you referring to Parsec?\nBrook: Yep. Or Trifecta. They all work similarly, I think.\nBrook: At least... The way one works with them is really similar to the grammar spec in Racket's docs (e.g. in the Reader–Numbers section). Not sure if this kind of \"grammar\" is the same as the CFG you talk about.\nElin: The grammars in the racket docs are a variant of CFG, and I think technically they have the same “power” as in they can compute the same class of things\nElin: And that “power” is greater than a regular expression, but less than a full (turing-complete) programming language\nBrook: Seems really interesting. Shame it can't be used to make the syntax highlighting better...\nElin: There are different levels of syntax highlighting.\nElin: The first level just tell whether some group of characters is a string or a symbol or a paren or something\nElin: That level can’t / shouldn’t count parens, so it wouldn’t be able to deal with s-expression comments\nElin: That first level could be expressed with regular expressions\nElin: The second level could deal with well-formed expressions according to a grammar, a CFG (or anything that can handle a stack)\nElin: that level would be able to handle s-expression comments, and if you want it could also handle coloring matching parens-pairs the same color while making them all different, like a rainbow or something\nElin: And that level would be able to distinguish the first element of a function call, even if there was an s-expression comment in the way, or if that first element was a complex expression like [CODE], within [CODE]\nElin: Then a third level could deal with scoping\nElin: The third level could tell that the [CODE] from [CODE] is bound by the [CODE] in [CODE] above it\nElin: Or that [CODE] comes from Racket and not a local-variable\nElin: To distinguish that from [CODE]\nBrook: That would be cool to have in so many languages. You can't guess that from syntax alone, though, can you? In some lightweight way, I mean, without trying to \"run\" portions of the code.\nBrook: Especially when somebody can ruin your day with macros or similar things.\nElin: If the code is powerful enough (if it has macros which can manipulate scope), then yes you would have run some code. But not all of it! And in racket at least, the parts you would have to run-in-the-editor for scoping are specially marked for compile-time\nElin: DrRacket does this with background-expansion, and its “check-syntax” arrows only work after that background-expansion has completed\nElin: And you’re right that a macro might ruin that, either by taking too long, or trying to do something that wouldn’t be safe for the editor to run\nBrook: It's kinda sluggish, though. Not sure if it's caused by the background expansion of the forms, but still.\nElin: And that’s why that “third level” has to be separate from the other two\nBrook: I wonder if the \"stack machine\" from Sublime could be implemented in VSCode as well. I heard Atom is pushing \"tree-sitter\" (not sure what it is, exactly, but supposedly better than plain regexps)... Maybe VSCode also has plans for some better way to make semantic highlighting possible? At least the first two levels",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 57,
        "duration_minutes": 49.52,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "decide",
          "fix",
          "implement",
          "should",
          "will"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Brook",
          "Elin",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Brook",
          "timestamp": "2019-01-31T07:59:10.406600",
          "text": "Hey! I'm working on a syntax-highlighting plugin for VSCode, but it's still early work in progress. I managed to fix number scoping with the help of Jens from our google group, so I figured I might ask some questions here as well."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T07:59:15.406800",
          "text": "(repo: <https://github.com/Eugleo/magic-racket>)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:04:03.408800",
          "text": "<@Brook> Awesome! I put together a similar syntax file for SublimeText &amp; Amp, but it's really not accurate so I didn't post it publicly yet. I'll check if I can get some inspiration from your work :slightly_smiling_face:"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:05:33.410200",
          "text": "Currently, the first symbol in a list is highlighted as a function call; it's a little brittle, though (things like `( #;(sexp comments ftw) map add1 '(1 2 3 4) )` don't work), and sometimes outright incorrect: `(let ([x 1] [y 2]))` highlights the `x` and `y` as functions. So, the question is: should I drop this \"feature\" altogether? DrRacket simply highlights known functions (exported from `racket`) and the rest is plain \"symbols\"."
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:06:53.412200",
          "text": "I kinda like the \"first symbol is different' rule, but I guess it's a personal preference"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:07:03.412500",
          "text": "<@Kami> I'm not sure how syntax highlighting works for Sublime, but I guess it's got something to do with textMate as well. My grammar file is a `.yaml`, so maybe I'd be able to export it to the SublimeText format. That means we could join forces on the project and make it the standart across more editors than just VSCode :slightly_smiling_face:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:07:32.413000",
          "text": "I'd be glad to join force on this, definitely! Writing good syntax files is hard and time consuming"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:08:21.414200",
          "text": "The sublime syntax was textMate before, but changed to a new custom \"sublimeSyntax\" system. Amp decided to use the same system as sublime"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:09:25.415200",
          "text": "most of the time, they're just regexps with greedy/not greedy rules"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:09:27.415300",
          "text": "Just checked out their webpage. It says\n&gt; Sublime Syntax files are YAML files with a small header, followed by a list of contexts. [...]"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:10:02.415900",
          "text": "Seems good. Maybe no conversion will be needed, or maybe just some manual key-changing."
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:10:08.416200",
          "text": "a bit"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:10:12.416400",
          "text": "it looks like this :"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:10:34.416600",
          "text": "<https://github.com/euhmeuh/sublime-syntaxes/blob/master/Forth.sublime-syntax>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:11:00.417100",
          "text": "(I did this one for Forth, but also did one for Racket I didn't published)"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:12:16.417900",
          "text": "Well, now that I'm looking into it, the semantics are little different. It seems to be more powerful than the textmate style, and has some additional constructs, too."
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:12:24.418100",
          "text": "yep"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:12:55.418500",
          "text": "most keys are custom, you can choose the names"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:13:01.418700",
          "text": "then put them together"
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:13:46.419300",
          "text": "the only real keywords are \"match\", \"push\", \"pull\", \"scope\", \"pop\""
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:14:03.419700",
          "text": "it works like a stack machine with regexps"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:15:37.421100",
          "text": "Yep, that's the notion I got from their webpage as well. I think the \"ideas\" will translate very well, though."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:16:33.422300",
          "text": "And it seems you'll be able to handle quotes and unquotes correctly. Pushing and popping a stack, so you'll be able to correctly asses whether the things are quoted, or unquoted, even in some deeply nested scenarios."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:16:44.422600",
          "text": "Pretty cool."
        },
        {
          "user": "Kami",
          "timestamp": "2019-01-31T08:16:47.422800",
          "text": "yep :slightly_smiling_face:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:17:48.423800",
          "text": "Some kind of stack (explicit or implicitly handled by the language) will be necessary to count the parantheses for anything like a `#;(s-exp)` comment"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:18:58.424600",
          "text": "Oh hey. You're the guy from SO!"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:20:02.426200",
          "text": "Yep. One can emulate this in textmate grammars by matching `begin: #;(` and `end: )`  and between it some things like parentheses, strings etc."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:21:10.428300",
          "text": "The problems is, I'd have to basically have two grammars: one for those normal constructs which would scope them under numbers, strings etc, and other, which could recognize them just as well, but scope them under comments. 1kloc → 2kloc in a blink. Not worth it just for the comments, I think."
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:21:50.429300",
          "text": "Grammars (things like context-free-grammars or CFGs) implicitly handle a stack for you, which is really convenient"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:22:51.430300",
          "text": "I'll have to read more on those grammars you keep mentioning. They work somehow like a Haskell Parser would, right?"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:23:04.430700",
          "text": "(sorry, don't know better example)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:23:17.431000",
          "text": "Are you referring to Parsec?"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:23:33.431400",
          "text": "Yep. Or Trifecta. They all work similarly, I think."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:25:06.432700",
          "text": "At least... The way one works with them is really similar to the grammar spec in Racket's docs (e.g. in the Reader–Numbers section). Not sure if this kind of \"grammar\" is the same as the CFG you talk about."
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:26:30.433400",
          "text": "The grammars in the racket docs are a variant of CFG, and I think technically they have the same “power” as in they can compute the same class of things"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:27:52.434200",
          "text": "And that “power” is greater than a regular expression, but less than a full (turing-complete) programming language"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:28:15.434800",
          "text": "Seems really interesting. Shame it can't be used to make the syntax highlighting better..."
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:28:32.435100",
          "text": "There are different levels of syntax highlighting."
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:28:57.435700",
          "text": "The first level just tell whether some group of characters is a string or a symbol or a paren or something"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:29:26.436500",
          "text": "That level can’t / shouldn’t count parens, so it wouldn’t be able to deal with s-expression comments"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:29:52.437200",
          "text": "That first level could be expressed with regular expressions"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:31:40.438700",
          "text": "The second level could deal with well-formed expressions according to a grammar, a CFG (or anything that can handle a stack)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:32:59.440000",
          "text": "that level would be able to handle s-expression comments, and if you want it could also handle coloring matching parens-pairs the same color while making them all different, like a rainbow or something"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:35:38.442200",
          "text": "And that level would be able to distinguish the first element of a function call, even if there was an s-expression comment in the way, or if that first element was a complex expression like `(compose (λ (x) (map add1 x)) range)`, within `((compose (λ (x) (map add1 x)) range) 5)`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:35:53.442500",
          "text": "Then a third level could deal with scoping"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:36:42.443500",
          "text": "The third level could tell that the `x` from `(map add1 x)` is bound by the `x` in `(λ (x)` above it"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:37:40.443900",
          "text": "Or that `map` comes from Racket and not a local-variable"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:38:37.444800",
          "text": "To distinguish that from `(let ([map list]) (map add1 x))`"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:40:24.446100",
          "text": "That would be cool to have in so many languages. You can't guess that from syntax alone, though, can you? In some lightweight way, I mean, without trying to \"run\" portions of the code."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:41:04.447200",
          "text": "Especially when somebody can ruin your day with macros or similar things."
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:42:47.449300",
          "text": "If the code is powerful enough (if it has macros which can manipulate scope), then yes you would have run some code. But not all of it! And in racket at least, the parts you would have to run-in-the-editor for scoping are specially marked for compile-time"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:43:44.450200",
          "text": "DrRacket does this with background-expansion, and its “check-syntax” arrows only work after that background-expansion has completed"
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:44:50.451700",
          "text": "And you’re right that a macro might ruin that, either by taking too long, or trying to do something that wouldn’t be safe for the editor to run"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:45:04.452200",
          "text": "It's kinda sluggish, though. Not sure if it's caused by the background expansion of the forms, but still."
        },
        {
          "user": "Elin",
          "timestamp": "2019-01-31T08:45:15.452500",
          "text": "And that’s why that “third level” has to be separate from the other two"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T08:48:41.454600",
          "text": "I wonder if the \"stack machine\" from Sublime could be implemented in VSCode as well. I heard Atom is pushing \"tree-sitter\" (not sure what it is, exactly, but supposedly better than plain regexps)... Maybe VSCode also has plans for some better way to make semantic highlighting possible? At least the first two levels"
        }
      ]
    },
    {
      "conversation_id": "57",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Brook: Anyway, what do you think about the colorization of the first symbol? I can drop it and only highlight the functions I know are exported from [CODE]. But I'd have to highlight those wherever they appear, that means that [CODE] and [CODE] won't be differentiated, so some inconsistency will still be there.\nTomas: Tree Sitter is very cool <[URL]\nTomas: <[URL]\nTomas: <[URL]\nBrook: Just watched a video about it. Seems exactly what we were talking about. A real parser to be used for syntax highlighting\nBrook: Tomas Any idea about the lame VSCode highlighting? :smile:\nBrook: I mean. About the first symbols etc.\nTomas: VSCode does some pretty powerful highlighting of langs like TypeScript\nTomas: I haven’t lisped in VSCode tho, so not sure what that experience is like\nHallie: silly question - wasn't lang server protocol supposed to offer syntax highlighting as well?\nTomas: I thought thats what VSCode was doing with JS/TypeScript\nBrook: Not sure how it works with TS, but I think they have some backend which they are querrying. Doesn't seem to be universally usable (unlike tree sitter)\nTomas: Pretty sure they’re passing code to the TypeScript compiler\nBrook: Hallie It was/is. But afaik it's not complete, and it's slow and... Yeah. WIP.\nTomas: yes they are <[URL]\nBrook: Well, yeah. That's along the lines of what I was thinking about. Not sure how I would do that with Racket; LSP would my safest bet I think.\nTomas: Racket Mode in Emacs does some fun along these lines\nBrook: Once it works, that is.\nBrook: Well, I didn't do any emacsing on the lisp, to paraphrase you :smile:\nTomas: Right but it might illustrate an approach you could take\nBrook: Sure. maybe it'd be best to help those guys with LSP, so it could then be reused in other editors as well.\nHallie: the world where you specify language specific characteristics like syntax highlighting per language as opposed to current per editor would be a huge improvement, but well, seems like a long way ahead...\nBrook: Yeah. Tree sitter could help that, as well as LSPs. I think we're slowly getting there.\nBrook: Does anybody here work on the LSP? I don't have much experience with Racket, but I'm sure I could get into it.\nSusana: Brook I’m interested in improving racket support in Atom, so I’ll definitely take a look at your VSCode plugin as well\nHallie: I know there are 2 implementations so reaching their authors might be a good idea:\nBrook: Well, unless you plan to implement it tree-sitter, we could join our forces on this one. The yaml can be easily converted to cson (at least I believe so)\nHallie: <[URL]\nHallie: <[URL]\nBrook: I opened an issue on one of them. Didn't think of there being two of them, though :smile:\nBrook: Why does everything have to be so fragmented?\nHallie: that's a very good question...\nHallie: I guess it's a scheme heritage - everyone has their own\nSusana: it’s an open source thing\nSusana: if you look at the packages for VSCode or atom you’ll see lots of packages with similar funcionality\nSusana: especially if it’s a simple package like a theme (I counted at least 3 zenburn theme packages for atom)\nTomas: have you looked at NPM lately?\nBrook: That's unfortunate.\nTomas: :joy:\nBrook: It's true that I built my syntax highliter from scratch as well... But initially I submitted a PR to one of the most popular packages for Racket, but without luck. So I resorted to making my own.\nSusana: yes, that happens. you try to contact the maintainer and get no response\nBrook: Well, it was more complicated than that. I contacted him, he responded, told me to make a PR, then accepted it and merged it; however, he didn't update the package on the marketplace. I opened an issue about it and well... That has been well over 6 months ago.\nSusana: it’s worse then",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 43,
        "duration_minutes": 81.85,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "implement",
          "submit",
          "update",
          "will"
        ],
        "decision_keywords": [
          "accepted"
        ],
        "participants": [
          "Brook",
          "Hallie",
          "Susana",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:19:32.457000",
          "text": "Anyway, what do you think about the colorization of the first symbol? I can drop it and only highlight the functions I know are exported from `racket`. But I'd have to highlight those wherever they appear, that means that `(let ([map list]) (map add1 x))` and `(compose (λ (x) (map add1 x)) range)` won't be differentiated, so some inconsistency will still be there."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:22:04.457300",
          "text": "Tree Sitter is very cool <https://github.com/tree-sitter/tree-sitter>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:22:23.457600",
          "text": "<https://tree-sitter.github.io/tree-sitter/>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:23:02.457800",
          "text": "<https://www.youtube.com/watch?v=Jes3bD6P0To>"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:23:36.458500",
          "text": "Just watched a video about it. Seems exactly what we were talking about. A real parser to be used for syntax highlighting"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:25:10.459000",
          "text": "<@Tomas> Any idea about the lame VSCode highlighting? :smile:"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:25:24.459300",
          "text": "I mean. About the first symbols etc."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:26:14.459900",
          "text": "VSCode does some pretty powerful highlighting of langs like TypeScript"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:27:11.460400",
          "text": "I haven’t lisped in VSCode tho, so not sure what that experience is like"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T09:28:15.461100",
          "text": "silly question - wasn't lang server protocol supposed to offer syntax highlighting as well?"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:29:10.461700",
          "text": "I thought thats what VSCode was doing with JS/TypeScript"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:30:00.462600",
          "text": "Not sure how it works with TS, but I think they have some backend which they are querrying. Doesn't seem to be universally usable (unlike tree sitter)"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:30:17.463200",
          "text": "Pretty sure they’re passing code to the TypeScript compiler"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:30:28.463500",
          "text": "<@Hallie> It was/is. But afaik it's not complete, and it's slow and... Yeah. WIP."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:31:12.464800",
          "text": "yes they are <https://code.visualstudio.com/Docs/languages/typescript#_installing-the-typescript-compiler>"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:31:13.465000",
          "text": "Well, yeah. That's along the lines of what I was thinking about. Not sure how I would do that with Racket; LSP would my safest bet I think."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:31:31.465500",
          "text": "Racket Mode in Emacs does some fun along these lines"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:31:35.465600",
          "text": "Once it works, that is."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:32:09.466300",
          "text": "Well, I didn't do any emacsing on the lisp, to paraphrase you :smile:"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:32:27.467200",
          "text": "Right but it might illustrate an approach you could take"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:33:16.468900",
          "text": "Sure. maybe it'd be best to help those guys with LSP, so it could then be reused in other editors as well."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T09:33:29.469200",
          "text": "the world where you specify language specific characteristics like syntax highlighting per language as opposed to current per editor would be a huge improvement, but well, seems like a long way ahead..."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:36:17.469800",
          "text": "Yeah. Tree sitter could help that, as well as LSPs. I think we're slowly getting there."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:50:41.470300",
          "text": "Does anybody here work on the LSP? I don't have much experience with Racket, but I'm sure I could get into it."
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-31T09:53:36.471400",
          "text": "<@Brook> I’m interested in improving racket support in Atom, so I’ll definitely take a look at your VSCode plugin as well"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T09:55:15.473200",
          "text": "I know there are 2 implementations so reaching their authors might be a good idea:"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:55:16.473400",
          "text": "Well, unless you plan to implement it tree-sitter, we could join our forces on this one. The yaml can be easily converted to cson (at least I believe so)"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T09:55:32.473600",
          "text": "<https://pkgs.racket-lang.org/package/racket-langserver>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T09:55:41.473900",
          "text": "<https://pkgs.racket-lang.org/package/racket-language-server>"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:56:02.474400",
          "text": "I opened an issue on one of them. Didn't think of there being two of them, though :smile:"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:56:14.474700",
          "text": "Why does everything have to be so fragmented?"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T09:56:41.475000",
          "text": "that's a very good question..."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T09:57:08.475400",
          "text": "I guess it's a scheme heritage - everyone has their own"
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-31T09:57:19.475700",
          "text": "it’s an open source thing"
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-31T09:57:46.476300",
          "text": "if you look at the packages for VSCode or atom you’ll see lots of packages with similar funcionality"
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-31T09:58:18.476900",
          "text": "especially if it’s a simple package like a theme (I counted at least 3 zenburn theme packages for atom)"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:59:14.477000",
          "text": "have you looked at NPM lately?"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T09:59:22.477300",
          "text": "That's unfortunate."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-01-31T09:59:22.477500",
          "text": ":joy:"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T10:00:32.479100",
          "text": "It's true that I built my syntax highliter from scratch as well... But initially I submitted a PR to one of the most popular packages for Racket, but without luck. So I resorted to making my own."
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-31T10:01:42.479600",
          "text": "yes, that happens. you try to contact the maintainer and get no response"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T10:34:37.482700",
          "text": "Well, it was more complicated than that. I contacted him, he responded, told me to make a PR, then accepted it and merged  it; however, he didn't update the package on the marketplace. I opened an issue about it and well... That has been well over 6 months ago."
        },
        {
          "user": "Susana",
          "timestamp": "2019-01-31T10:41:23.483000",
          "text": "it’s worse then"
        }
      ]
    },
    {
      "conversation_id": "58",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: I would like in scribble to be able to show a portion of a file in a column, possibly a function, and interactions using the function on the right side. Is there anything out there resembling helpers for this or something?\nShavon: ... ok, i might be able to achieve the two column with a single-row, 2 column table.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 14.65,
        "contains_question": true,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T11:00:40.484300",
          "text": "I would like in scribble to be able to show a portion of a file in a column, possibly a function, and interactions using the function on the right side. Is there anything out there resembling helpers for this or something?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T11:15:19.485100",
          "text": "... ok, i might be able to achieve the two column with a single-row, 2 column table."
        }
      ]
    },
    {
      "conversation_id": "59",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lashawnda: hello, is writing Racket with (neo)vim/DrRacket viable option?\nLashawnda: the other option which I consider is Julia lang\nShavon: neovim and drracket are two options to develop in racket.\nShavon: drracket has all the bells and whistles for racket dev. if you want to use neovim, take a look at <[URL]\nLashawnda: Shavon thanks. i'm asking since i'm not into Emacs..few tiems experienced slight wrist pain which never happened with vim\nShavon: understood. when i got wrist pain with emacs, I bought a new keyboard. but vim is also an option, although I have never used.\nJulia: Lashawnda Some people like spacemacs, which configures Emacs to use many popular packages, one of which is evil-mode (vim modal editing bindings for emacs)\nShavon: ever since I started using \"Microsoft Sculpt Ergonomic\" keyboard+mouse set, pain disappeared. Emacs lives on in my machine. :slightly_smiling_face:\nJulia: Other people like to remap the control and alt keys (some vim users like to do that for escape, too :))\nJulia: I tend to use the standard bindings, but as a (bad) piano player I tend to use my thumb for ctrl and alt sometimes\nJulia: Or you could do the simple thing and just use a vim :smile:\nLashawnda: heh, i've tried spacemacs, but it brings another layer on top of emacs and at that time it didn't play well with e.g. gnus...now, i'm more int ovim-world - that's why i'm asking...yeah, i keep caps &amp; ctrl switched even with vim setup :slightly_smiling_face:\nLashawnda: Julia well, i'm just curious if there are racket/vim users :wink:\nJulia: I think there are. But the people I know directly tend to use evil-mode with emacs (not necessarily the whole spacemacs thing, just evil-mode) as opposed to vim. That's just the people I happen to know. ¯\\_(ツ)_/¯\nLashawnda: ok, got it\nLoise: I'm a new Racketeer but have used VIM for a couple of decades. So far it's been fine using VIM. I'm not an IDE guy, so as convenient as Dr. Racket is, I still end up in VIM.\nLashawnda: Loise thanks a lot. do you use vim or neovim?\nLashawnda: which plugins?\nLashawnda: so far, i've seen that Julia is nice with VIm, but i like Racket's GUI support for writing desktop apps\nLoise: Plain old VIM with no plugins, so far. I usually SSH into a VPS, so an IDE is out of the question anyway. I just have a couple of panes open in [CODE], one with VIM and in the other, the Racket REPL.\nLashawnda: ok\nLoise: Any language is nice with VIM. I wouldn't go and use Julia just because of that. It ain't no Lisp! :stuck_out_tongue:\nLashawnda: :joy:\nLoise: Shavon is right: This is a good resource to get you going with Racket in VIM: <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 24,
        "duration_minutes": 26.6,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Lashawnda",
          "Loise",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:37:41.485800",
          "text": "hello, is writing Racket with (neo)vim/DrRacket viable option?"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:39:35.486200",
          "text": "the other option which I consider is Julia lang"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T11:41:38.486600",
          "text": "neovim and drracket are two options to develop in racket."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T11:42:11.487200",
          "text": "drracket has all the bells and whistles for racket dev. if you want to use neovim, take a look at <https://docs.racket-lang.org/guide/Vim.html>"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:43:30.488000",
          "text": "<@Shavon> thanks. i'm asking since i'm not into Emacs..few tiems experienced slight wrist pain which never happened with vim"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T11:45:13.488700",
          "text": "understood. when i got wrist pain with emacs, I bought a new keyboard. but vim is also an option, although I have never used."
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-31T11:46:21.490000",
          "text": "<@Lashawnda> Some people like spacemacs, which configures Emacs to use many popular packages, one of which is evil-mode (vim  modal editing bindings for emacs)"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-01-31T11:46:25.490200",
          "text": "ever since I started using \"Microsoft Sculpt Ergonomic\" keyboard+mouse set, pain disappeared. Emacs lives on in my machine. :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-31T11:47:13.491100",
          "text": "Other people like to remap the control and alt keys (some vim users like to do that for escape, too :))"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-31T11:47:43.492000",
          "text": "I tend to use the standard bindings, but as a (bad) piano player I tend to use my thumb for ctrl and alt sometimes"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-31T11:48:31.493100",
          "text": "Or you could do the simple thing and just use a vim :smile:"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:48:39.493300",
          "text": "heh, i've tried spacemacs, but it brings another layer on top of emacs and at that time it didn't play well with e.g. gnus...now, i'm more int ovim-world - that's why i'm asking...yeah, i keep caps &amp; ctrl switched even with vim setup :slightly_smiling_face:"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:49:27.494000",
          "text": "<@Julia> well, i'm just curious if there are racket/vim users :wink:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-01-31T11:50:38.495100",
          "text": "I think there are. But the people I know directly tend to use evil-mode with emacs (not necessarily the whole spacemacs thing, just evil-mode) as opposed to vim. That's just the people I happen to know. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:51:10.495900",
          "text": "ok, got it"
        },
        {
          "user": "Loise",
          "timestamp": "2019-01-31T11:51:50.496200",
          "text": "I'm a new Racketeer but have used VIM for a couple of decades. So far it's been fine using VIM. I'm not an IDE guy, so as convenient as Dr. Racket is, I still end up in VIM."
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:54:13.496900",
          "text": "<@Loise> thanks a lot. do you use vim or neovim?"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:54:27.497200",
          "text": "which plugins?"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:56:10.499400",
          "text": "so far, i've seen that Julia is nice with VIm, but i like Racket's GUI support for writing desktop apps"
        },
        {
          "user": "Loise",
          "timestamp": "2019-01-31T11:56:20.499600",
          "text": "Plain old VIM with no plugins, so far. I usually SSH into a VPS, so an IDE is out of the question anyway. I just have a couple of panes open in `tmux`, one with VIM and in the other, the Racket REPL."
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:57:10.500400",
          "text": "ok"
        },
        {
          "user": "Loise",
          "timestamp": "2019-01-31T11:58:29.500600",
          "text": "Any language is nice with VIM. I wouldn't go and use Julia just because of that. It ain't no Lisp! :stuck_out_tongue:"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-01-31T11:59:24.500900",
          "text": ":joy:"
        },
        {
          "user": "Loise",
          "timestamp": "2019-01-31T12:04:17.501600",
          "text": "<@Shavon> is right: This is a good resource to get you going with Racket in VIM:\n<https://docs.racket-lang.org/guide/Vim.html>"
        }
      ]
    },
    {
      "conversation_id": "60",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Brook Great find (the pull request to fix brackets on Github (for Scheme)).\nPriscila: I am attempting to find someone that can help in #textmate (on Freenode).\nPriscila: Loise Wrt IDEs: The most effort has gone into DrRacket and racket-mode in Emacs. It's worth trying them out to see what they have to offer. If/when you return to Vim - you will know when to try something out in, say, DrRacket.\nPriscila: Brook I have now also sent a mail to the Textmate mailing list.\nBrook: Great. Maybe they will respond to that. I see to value in not adding the support for brackets.\nBrook: (sent you a mail btw.)\nPriscila: Still thinking!\nPriscila: I think your option 2 is best. Highlight known identifiers bound to functions. It's rare to rebind functions exported from the main language - and if it is done, it's likely to be bound to another function.\nBrook: Oh, no pressure. Just so you know! I've got a bit lost in our conversations myself, you know :smiley:\nPriscila: But if you want to improve - you can copy the approach that racket-mode in Emacs uses.\nPriscila: Hmm - well maybe not. Racket-mode also handles running / evaluating - so it has access the names being defined in the current module.\nPriscila: But may be the lsp-server can be used instead?\nBrook: Yep, we talked about this here. I contacted the maintainers of both of the LSP implementations. For the time being, textmate grammar is the best solution I'm afraid\nHallie: Regarding IDEs do any of you have experience with <[URL]\nPriscila: Impressive.\nBrook: Looks nice. The dev of this particular lsp said he doesn't work on the project (the LSP, that is) anymore.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 16,
        "duration_minutes": 131.77,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Brook",
          "Hallie",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T15:46:30.502800",
          "text": "<@Brook> Great find (the pull request to fix brackets on Github (for Scheme))."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T15:46:51.503400",
          "text": "I am attempting to find someone that can help in #textmate  (on Freenode)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T15:49:58.505300",
          "text": "<@Loise>  Wrt IDEs: The most effort has gone into DrRacket and racket-mode in Emacs. It's worth trying them out to see what they have to offer. If/when you return to Vim - you will know when to try something out in, say, DrRacket."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T16:02:27.505800",
          "text": "<@Brook> I have now also sent a mail to the Textmate mailing list."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T16:03:23.506700",
          "text": "Great. Maybe they will respond to that. I see to value in not adding the support for brackets."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T16:04:13.507500",
          "text": "(sent you a mail btw.)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T16:04:23.507700",
          "text": "Still thinking!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T16:06:49.509300",
          "text": "I think your option 2 is best. Highlight known identifiers bound to functions. It's rare to rebind functions exported from the main language - and if it is done, it's likely to be bound to another function."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T16:07:30.510700",
          "text": "Oh, no pressure. Just so you know! I've got a bit lost in our conversations myself, you know :smiley: "
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T16:08:25.511800",
          "text": "But if you want to improve - you can copy the approach that racket-mode in Emacs uses."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T16:10:12.513700",
          "text": "Hmm - well maybe not. Racket-mode also handles running / evaluating - so it has access the names being defined in the current module."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T16:11:11.514100",
          "text": "But may be the lsp-server can be used instead?"
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T17:21:16.515400",
          "text": "Yep, we talked about this here. I contacted the maintainers of both of the LSP implementations. For the time being, textmate grammar is the best solution I'm afraid"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T17:34:50.516300",
          "text": "Regarding IDEs do any of you have experience with <https://www.theia-ide.org/>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-01-31T17:36:17.517700",
          "text": "Impressive."
        },
        {
          "user": "Brook",
          "timestamp": "2019-01-31T17:58:16.519500",
          "text": "Looks nice. The dev of this particular lsp said he doesn't work on the project (the LSP, that is) anymore."
        }
      ]
    },
    {
      "conversation_id": "61",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Hallie: I like their approach and just found out they are building support for VS Code extensions which will make it a great choice especially if you want to build your own custom IDE\nHallie: Ohh!!! There is <[URL]\nHallie: I wonder is it possible with LSP to expose the information used by custom Racket DSLs (and not only [CODE])\nHallie: what I mean by that is if my DSL has DrRacket integration (e.g. coloring) could this information be automatically exposed via LSP?\nKristeen: Hallie yes that should be possible",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 202.4,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T17:36:18.517800",
          "text": "I like their approach and just found out they are building support for VS Code extensions which will make it a great choice especially if you want to build your own custom IDE"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T17:42:15.518200",
          "text": "Ohh!!! There is <https://github.com/theia-ide/theia-racket-extension>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T18:57:56.521100",
          "text": "I wonder is it possible with LSP to expose the information used by custom Racket DSLs (and not only `#lang racket`)"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-01-31T19:01:24.522300",
          "text": "what I mean by that is if my DSL has DrRacket integration (e.g. coloring) could this information be automatically exposed via LSP?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-01-31T20:58:42.522700",
          "text": "<@Hallie> yes that should be possible"
        }
      ]
    },
    {
      "conversation_id": "62",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loise: If/when I _return_ to VIM?! :slightly_smiling_face: I've never left, despite numerous attempts to get used to very many IDEs. I have never found anything that works for me like VIM does.\nLashawnda: I'm considering Racket and Julia for desktop app and today someone in Julia channel told me he was also considering Racket but abandoned idea after hearing from some Racket dev (who is also familiar with Julia) that it is never going to be fast as Julia. does such statement hold?\nKristeen: Lashawnda no, I don't think that statement holds\nKristeen: also I wonder who said that\nLashawnda: Kristeen no matter whether we speak about Racket or Racket CS...don't know about Racket-source\nKristeen: Julia and Racket are both complicated systems where performance is concerned, so some things will be faster for each\nKristeen: certainly there are some programs where Julia is currently faster than Racket\nLashawnda: here is the exact quote: \"I just talked at some point with some of the core devs, and they told me that racket may never be julia fast (some of them actually know julia quite well)\"\nLashawnda: I like that Racket has GUI support out of the box, while in Julia I'd probably have to use Gtk.jl since I do not like Electron and similar web/JS stuff...\nSang: &gt; If runtime?-id is provided, then it is bound in the context of expr to #f for the compile-time instance of expr and #t for the run-time instance of expr. What does this even mean?\nSang: (it’s from [CODE])\nKristeen: If you write [CODE] then at compile time [CODE] is evaluated with [CODE] bound to [CODE], and at runtime [CODE] is evaluated with [CODE] bound to [CODE]\nSang: I don’t see it being used in racket-source with that variant… when/why would you want that?\nSang: I’m poking at this because I broke up a compound define-runtime-path into 2 of them, with the latter using the former… and that blew up. I was trying to figure out the runtime vs compile time stuff and that language is… confusing\nHallie: Lashawnda looking at these benchmarks I don't see much differences between Julia and Racket - both have their strengths when it comes to performance, but I don't think performance wise there is much to win/lose: <[URL]\nLashawnda: Hallie indeed. i forgot to check that language-shootout, although usually the code is not really idiomatic :slightly_smiling_face:\nKristeen: Lashawnda depending on what that person means by \"core devs\" I don't think any of us know Julia \"quite well\", but I also don't think any of us would say that\nKristeen: Sang that form is used in several places in the core -- the openssl collection and the db collection\nLashawnda: Kristeen i just forwarded the info i got without any further details and want(ed) to clear the possible doubt that Racket is generally inferior to Julia when it comes to performance...btw, the person who conveyed that info also said \"Racket is pretty amazing, but I stopped looking into it after I figured, that it can't really be made fast language...\"\nKristeen: Racket is unlikely to be as fast as C++, for example. However, I think \"can't be made fast\" is false\nLashawnda: i don't expect C(++) performance...",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 21,
        "duration_minutes": 403.07,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [
          "works for me"
        ],
        "participants": [
          "Hallie",
          "Kristeen",
          "Lashawnda",
          "Loise",
          "Sang"
        ]
      },
      "timeline": [
        {
          "user": "Loise",
          "timestamp": "2019-02-01T09:51:03.523200",
          "text": "If/when I _return_ to VIM?! :slightly_smiling_face: I've never left, despite numerous attempts to get used to very many IDEs. I have never found anything that works for me like VIM does."
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-01T15:38:17.529100",
          "text": "I'm considering Racket and Julia for desktop app and today someone in Julia channel told me he was also considering Racket but abandoned idea after hearing from some Racket dev (who is also familiar with Julia) that it is never going to be fast as Julia. does such statement hold?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T15:42:42.529400",
          "text": "<@Lashawnda> no, I don't think that statement holds"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T15:43:29.530200",
          "text": "also I wonder who said that"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-01T15:43:51.530600",
          "text": "<@Kristeen> no matter whether we speak about Racket or Racket CS...don't know about Racket-source"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T15:44:32.531200",
          "text": "Julia and Racket are both complicated systems where performance is concerned, so some things will be faster for each"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T15:44:52.531600",
          "text": "certainly there are some programs where Julia is currently faster than Racket"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-01T15:45:30.531900",
          "text": "here is the exact quote: \"I just talked at some point with some of the core devs, and they told me that racket may never be julia fast (some of them actually know julia quite well)\""
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-01T15:47:41.533100",
          "text": "I like that Racket has GUI support out of the box, while in Julia I'd probably have to use Gtk.jl since I do not like Electron and similar web/JS stuff..."
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-01T15:49:56.533500",
          "text": "&gt; If runtime?-id is provided, then it is bound in the context of expr to #f for the compile-time instance of expr and #t for the run-time instance of expr.\n\nWhat does this even mean?"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-01T15:50:33.533800",
          "text": "(it’s from `define-runtime-path`)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T15:51:41.535100",
          "text": "If you write `(define-runtime-path x e id)` then at compile time `e` is evaluated with `id` bound to `#f`, and at runtime `e` is evaluated with `id` bound to `#t`"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-01T15:57:05.535700",
          "text": "I don’t see it being used in racket-source with that variant… when/why would you want that?"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-01T15:59:24.538500",
          "text": "I’m poking at this because I broke up a compound define-runtime-path into 2 of them, with the latter using the former… and that blew up. I was trying to figure out the runtime vs compile time stuff and that language is… confusing"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-01T15:59:57.539000",
          "text": "<@Lashawnda> looking at these benchmarks I don't see much differences between Julia and Racket - both have their strengths when it comes to performance, but I don't think performance wise there is much to win/lose: <https://benchmarksgame-team.pages.debian.net/benchmarksgame/which-programs-are-fast.html>"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-01T16:20:29.540000",
          "text": "<@Hallie> indeed. i forgot to check that language-shootout, although usually the code is not really idiomatic :slightly_smiling_face:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T16:23:11.540800",
          "text": "<@Lashawnda> depending on what that person means by \"core devs\" I don't think any of us know Julia \"quite well\", but I also don't think any of us would say that"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T16:25:12.541400",
          "text": "<@Sang> that form is used in several places in the core -- the openssl collection and the db collection"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-01T16:28:49.543900",
          "text": "<@Kristeen> i just forwarded the info i got without any further details and want(ed) to clear the possible doubt that Racket is generally inferior to Julia when it comes to performance...btw, the person who conveyed that info also said \"Racket is pretty amazing, but I stopped looking into it after I figured, that it can't really be made fast language...\""
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T16:29:54.544700",
          "text": "Racket is unlikely to be as fast as C++, for example. However, I think \"can't be made fast\" is false"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-01T16:34:07.545200",
          "text": "i don't expect C(++) performance..."
        }
      ]
    },
    {
      "conversation_id": "63",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Julia <[URL]\nJulia: Kristeen Although I did happen to see that yesterday thanks for pointing it out. Both that and the Racket 7.2 announce seemed to be on HN front page for awhile yesterday. :racket-flat:\nLaverna: that HN post led me to all your other racket posts, Julia, which have been very helpful. thanks!\nJulia: Happy to hear that -- thanks for letting me know!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 128.55,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kristeen",
          "Laverna"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T11:01:16.523500",
          "text": "<@Julia> <https://news.ycombinator.com/item?id=19046259>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-01T11:10:49.525400",
          "text": "<@Kristeen> Although I did happen to see that yesterday thanks for pointing it out.\nBoth that and the Racket 7.2 announce seemed to be on HN front page for awhile yesterday. :racket-flat:"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-02-01T12:56:54.526100",
          "text": "that HN post led me to all your other racket posts, <@Julia>, which have been very helpful. thanks!"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-01T13:09:49.526500",
          "text": "Happy to hear that -- thanks for letting me know!"
        }
      ]
    },
    {
      "conversation_id": "64",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Susana: Racket is quite faster than most dynamically-typed languages\nVerena: Clarinda The pre-release page that I see from that URL is Racket Pre-Release 7.1.0.900 .\nVerena: 7.1.0.900 [3m] successfully launches. Requests permission to run.\nVerena: I don't know if it runs only because the other one's code signature was accepted. Not sure how code signing works.\nClarinda: It’s a different certificate, so that’s promising. Maybe the new certificate on v7.2 will work for others who had trouble before. 7.1.0.900 was the pre-release number for 7.2, and 7.2 is now out.\nVerena: noob question: is racket compiled?\nHallie: I have just watched a very nice talk on Guile-Racket on FOSDEM, there are 2 more talk happening right now regarding Racket, here is a link to livestream: <[URL]\nHallie: The one that ended was: \"A Guiler's Year of Racket\" by Christopher Webber\nHallie: The one starting right now is: \"Fractalide and Cantor A Racket application built with Flow-Based Programming\" by Claes Wallin\nHallie: Finally last one will be: \"Make your own language with Racket A kickstart workshop for the creative minds\" by Jérôme Martin",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 1052.57,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [
          "accepted"
        ],
        "participants": [
          "Clarinda",
          "Hallie",
          "Susana",
          "Verena"
        ]
      },
      "timeline": [
        {
          "user": "Susana",
          "timestamp": "2019-02-01T17:21:25.545500",
          "text": "Racket is quite faster than most dynamically-typed languages"
        },
        {
          "user": "Verena",
          "timestamp": "2019-02-01T19:47:37.546200",
          "text": "<@Clarinda> The pre-release page that I see from that URL is Racket Pre-Release 7.1.0.900 ."
        },
        {
          "user": "Verena",
          "timestamp": "2019-02-01T19:58:14.546400",
          "text": "7.1.0.900 [3m] successfully launches. Requests permission to run."
        },
        {
          "user": "Verena",
          "timestamp": "2019-02-01T19:58:48.546600",
          "text": "I don't know if it runs only because the other one's code signature was accepted. Not sure how code signing works."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-01T20:10:26.546900",
          "text": "It’s a different certificate, so that’s promising. Maybe the new certificate on v7.2 will work for others who had trouble before.\n7.1.0.900 was the pre-release number for 7.2, and 7.2 is now out."
        },
        {
          "user": "Verena",
          "timestamp": "2019-02-01T20:24:56.547100",
          "text": "noob question: is racket compiled?"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T10:50:57.550600",
          "text": "I have just watched a very nice talk on Guile-Racket on FOSDEM, there are 2 more talk happening right now regarding Racket, here is a link to livestream: <https://live.fosdem.org/watch/k4201>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T10:52:50.551100",
          "text": "The one that ended was: \"A Guiler's Year of Racket\" by Christopher Webber"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T10:53:17.551600",
          "text": "The one starting right now is: \"Fractalide and Cantor\nA Racket application built with Flow-Based Programming\" by Claes Wallin"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T10:53:59.552200",
          "text": "Finally last one will be: \"Make your own language with Racket\nA kickstart workshop for the creative minds\" by Jérôme Martin"
        }
      ]
    },
    {
      "conversation_id": "65",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: the main racket implementation has an ahead-of-time compiler to bytecode, and then a JIT compiler when functions are first executed\nKristeen: you can also run Racket built on top of Chez Scheme, which is ahead-of-time compiled",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.4,
        "contains_question": false,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T20:26:06.547800",
          "text": "the main racket implementation has an ahead-of-time compiler to bytecode, and then a JIT compiler when functions are first executed"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-01T20:26:30.548300",
          "text": "you can also run Racket built on top of Chez Scheme, which is ahead-of-time compiled"
        }
      ]
    },
    {
      "conversation_id": "66",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lashawnda: Susana that i know, but for my use case just interested in Racket vs Julia",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lashawnda"
        ]
      },
      "timeline": [
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-02T03:42:38.549500",
          "text": "<@Susana> that i know, but for my use case just interested in Racket vs Julia"
        }
      ]
    },
    {
      "conversation_id": "67",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: quick question about Frog (<[URL] is it possible to execute Racket in Markdown files like you can in Scribble, say, if I want to generate images with 2htdp?\nJulia: Tomas No. Well. I mean, there's probably _some_ way.\nJulia: Your [CODE]'s [CODE] function can do things to xexprs. I suppose you could put HTML in the markdown file, have [CODE] notice it, do things, replace it, etc.\nJulia: i.e. that is how the pygments highlighting works\nJulia: [CODE], your [CODE] notices that. etc.\nJulia: I'll let you eval [CODE] :smile:\nHallie: Julia I wanted to ask about something similar - what I would like to have is markdown as a preprocessor that could be working with different [CODE]s so that I could have a hybrid system - something like [CODE_BLOCK]\nHallie: so that I could specify in my own library the defaults for markdown depending on main [CODE] to be used including custom ones\nHallie: could current implementation of markdown be used in such manner\nHallie: the use case is for people that are familiar with markdown but would like to have more flexibility and a easy learning curve\nJulia: Do you mean something like write [CODE] ? You could define that [CODE] function yourself I think, calling the [CODE] lib's [CODE] function, and somehow wrangling the xexprs into something Scribble wants.\nJulia: Also there is <[URL]\nJulia: Which I added at someone's request years ago but now can't remember exactly who or why.\nJulia: So you could probably figure that out as quickly as me, these days. ¯\\_(ツ)_/¯\nHallie: thanks I see it more as a document that starts as markdown until something more complicated is needed - then [CODE] is used\nHallie: it looks like the \"pre-Scribble\" is almost there where I need it!\nMai: Hallie Pollen markdown mode is exactly what you describe I think\nMai: <[URL]\nHallie: Mai thanks, but I am thinking about the reverse to what pollen is doing, ie instead of pollen preprocessing to get md file use markdown to generate (in this case) pollen tags\nLashawnda: Julia one question about Frog...e.g. Nikola (python ssg) can invoke external compilers to process posts written in e.g. AsciiDoc markup (using Ruby implementation called Asciidoctor), Hugo can invoke (python) rst2html (to e.g. process posts written in reStructuredText markup, so I'm curious if it would be easy to add capability to Frog to use some 'non-native' markup for which there is no Racket-powered parser available (yet)?\nJulia: I don't know.\nJulia: But probably doing that wouldn't be as easy as not doing it. ¯\\_(ツ)_/¯\nHallie: Julia would you accept PR with an added reader so it would work as mentioned or would you rather have it as separate package?\nJulia: Hallie I think it's hard for me to say without seeing the PR? If it seems too complicated for me to understand quickly, and feel good about maintaining long-term, I might ask separate package? But then you'd have to redo it as a separate package. :disappointed:\nJulia: I'm kind of in maintenance mode for Frog, at least for the foreseeable future. I have too much else on my plate, and I haven't worked deeply on the code for a couple years now. I still use it, dogfood it. It's not going to be abandonware. But maybe not big expandware.\nJulia: A simple reader change could be cool... unless it isn't cool. Sorry I feel like a prima dona but just trying to be honest.\nHallie: OK I will see first how it works with systems like Pollen and Scribble and then we will see if it is even worth\nJulia: Sorry to be a downer it sounds like a cool idea and if it were a few years ago I'd enthusiastically jump in and actively help.\nHallie: no problem :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 29,
        "duration_minutes": 118.27,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Julia",
          "Lashawnda",
          "Mai",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-02T12:07:28.553400",
          "text": "quick question about Frog (<https://docs.racket-lang.org/frog/index.html>) is it possible to execute Racket in Markdown files like you can in Scribble, say, if I want to generate images with 2htdp?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T12:52:27.554300",
          "text": "<@Tomas> No. Well. I mean, there's probably _some_ way."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T12:54:38.555500",
          "text": "Your `frog.rkt`'s `enhance-body` function can do things to xexprs.\nI suppose you could put HTML in the markdown file, have `enhance-body` notice it, do things, replace it, etc."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T12:54:52.556000",
          "text": "i.e. that is how the pygments highlighting works"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T12:55:49.557500",
          "text": "`&lt;d_run_racket_code&gt; ___ &lt;/d_run_racket_code&gt;`, your `enhance-body` notices that. etc."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T12:56:46.558500",
          "text": "I'll let you eval `(equal? 'possible 'desirable)` :smile:"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T12:57:18.559000",
          "text": "<@Julia> I wanted to ask about something similar - what I would like to have is markdown as a preprocessor that could be working with different `#lang`s so that I could have a hybrid system - something like\n```\n#lang markdown scribble/manual\n@(require markdown/manual)\n```"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T12:58:15.560100",
          "text": "so that I could specify in my own library the defaults for markdown depending on main `#lang` to be used including custom ones"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T12:58:39.560600",
          "text": "could current implementation of markdown be used in such manner"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T12:59:46.561500",
          "text": "the use case is for people that are familiar with markdown but would like to have more flexibility and a easy learning curve"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T13:03:10.563400",
          "text": "Do you mean something like write `@markdown{This is _italic_ etc.}` ?\nYou could define that `markdown` function yourself I think, calling the `markdown` lib's `parse-markdown` function, and somehow wrangling the xexprs into something Scribble wants."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T13:03:17.563600",
          "text": "Also there is <https://docs.racket-lang.org/markdown/index.html#(part._.Use_as_a_library__to_generate__pre-.Scribble_)>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T13:03:39.564100",
          "text": "Which I added at someone's request years ago but now can't remember exactly who or why."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T13:03:50.564400",
          "text": "So you could probably figure that out as quickly as me, these days. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T13:07:17.566000",
          "text": "thanks I see it more as a document that starts as markdown until something more complicated is needed - then `@something{more complicated}` is used"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T13:09:11.566900",
          "text": "it looks like the \"pre-Scribble\" is almost there where I need it!"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-02T13:09:47.567400",
          "text": "<@Hallie> Pollen markdown mode is exactly what you describe I think"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-02T13:09:57.567600",
          "text": "<https://docs.racket-lang.org/pollen/second-tutorial.html#%28part._.Using_.Markdown_with_the_preprocessor%29>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T13:13:06.569600",
          "text": "<@Mai> thanks, but I am thinking about the reverse to what pollen is doing, ie instead of pollen preprocessing to get md file use markdown to generate (in this case) pollen tags"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-02T13:27:17.573700",
          "text": "<@Julia> one question about Frog...e.g. Nikola (python ssg) can invoke external compilers to process posts written in e.g. AsciiDoc markup (using Ruby implementation called Asciidoctor), Hugo can invoke (python) rst2html (to e.g. process posts written in reStructuredText markup, so I'm curious if it would be easy to add capability to Frog to use some 'non-native' markup for which there is no Racket-powered parser available (yet)?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T13:31:42.574600",
          "text": "I don't know."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T13:32:23.575100",
          "text": "But probably doing that wouldn't be as easy as not doing it. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T13:58:50.577500",
          "text": "<@Julia> would you accept PR with an added reader so it would work as mentioned or would you rather have it as separate package?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T14:02:50.579400",
          "text": "<@Hallie> I think it's hard for me to say without seeing the PR?\nIf it seems too complicated for me to understand quickly, and feel good about maintaining long-term, I might ask separate package?\nBut then you'd have to redo it as a separate package. :disappointed:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T14:03:57.581000",
          "text": "I'm kind of in maintenance mode for Frog, at least for the foreseeable future. I have too much else on my plate, and I haven't worked deeply on the code for a couple years now.\nI still use it, dogfood it. It's not going to be abandonware. But maybe not big expandware."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T14:04:28.581700",
          "text": "A simple reader change could be cool... unless it isn't cool. Sorry I feel like a prima dona but just trying to be honest."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T14:04:48.582000",
          "text": "OK I will see first how it works with systems like Pollen and Scribble and then we will see if it is even worth"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-02T14:05:29.582600",
          "text": "Sorry to be a downer it sounds like a cool idea and if it were a few years ago I'd enthusiastically jump in and actively help."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T14:05:44.582800",
          "text": "no problem :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "68",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lashawnda: heh, if the latter is easy, than the former could be doable without (too) much pain :smile:\nHallie: I see there is similar PR by Leif hence the question",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 14.67,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Lashawnda"
        ]
      },
      "timeline": [
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-02T13:47:01.576100",
          "text": "heh, if the latter is easy, than the former could be doable without (too) much pain :smile:"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-02T14:01:41.578800",
          "text": "I see there is similar PR by Leif hence the question"
        }
      ]
    },
    {
      "conversation_id": "69",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Aubrey: Racket 7.2 PPAs are cooking... will be ready later today hopefully\nAubrey: Anyone had a [CODE] error during build on 7.2?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 74.27,
        "contains_question": true,
        "action_keywords": [
          "build",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Aubrey"
        ]
      },
      "timeline": [
        {
          "user": "Aubrey",
          "timestamp": "2019-02-02T17:24:57.583700",
          "text": "Racket 7.2 PPAs are cooking... will be ready later today hopefully"
        },
        {
          "user": "Aubrey",
          "timestamp": "2019-02-02T18:39:13.584100",
          "text": "Anyone had a `Inlining expected for #&lt;procedure:extflvector-length&gt;.` error during build on 7.2?"
        }
      ]
    },
    {
      "conversation_id": "70",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: With [CODE], if I define this at the module level: [CODE_BLOCK] …will the instantiations of those modules be collectable by the GC?\nClarinda: On a platform where extflonums are not supported? It looks like an old Racket bug that is probably triggered by a new-to-v7.2 use of [CODE] in rackunit.\nAubrey: It's on an i386 build and not sure if extflonums are supported or not, but it only errored on one of several builds so I suspect they are available. Here's the detailed build log: <[URL] Edit: and it indeed does look like it's building rackunit docs when it aborts.\nClarinda: Commit 80f84f2132 should fix the problem. I’ll alert the release managers to see if we should do more than have a patch available.\nClarinda: Yes, after the document is rendered. But probably not before the document finishes, which is why there’s [CODE].\nClarinda: Yes, using [CODE] is a good approach.\nNereida: Yes, automated tests for random websites with functionaity, for example.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 1139.12,
        "contains_question": true,
        "action_keywords": [
          "build",
          "finish",
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Aubrey",
          "Clarinda",
          "Karen",
          "Nereida"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-02T19:05:24.585600",
          "text": "With `scribble/example`, if I define this at the module level:\n```\n(define module-sharing-evaluator-factory\n   (make-base-eval-factory (list 'racket/base 'my/module 'my/other/module))\n```\n…will the instantiations of those modules be collectable by the GC?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-02T19:15:14.585800",
          "text": "On a platform where extflonums are not supported? It looks like an old Racket bug that is probably triggered by a new-to-v7.2 use of `extflonum-length` in rackunit."
        },
        {
          "user": "Aubrey",
          "timestamp": "2019-02-02T19:21:08.586000",
          "text": "It's on an i386 build and not sure if extflonums are supported or not, but it only errored on one of several builds so I suspect they are available. Here's the detailed build log: <https://launchpadlibrarian.net/409497645/buildlog_ubuntu-trusty-i386.racket_7.2+ppa1-1~trusty1_BUILDING.txt.gz> Edit: and it indeed does look like it's building rackunit docs when it aborts."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-02T21:48:57.586600",
          "text": "Commit 80f84f2132 should fix the problem. I’ll alert the release managers to see if we should do more than have a patch available."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-02T22:07:56.586800",
          "text": "Yes, after the document is rendered. But probably not before the document finishes, which is why there’s `close-eval`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-02T23:01:41.587400",
          "text": "Yes, using `#:once` is a good approach."
        },
        {
          "user": "Nereida",
          "timestamp": "2019-02-03T14:04:31.589600",
          "text": "Yes, automated tests for random websites with functionaity, for example."
        }
      ]
    },
    {
      "conversation_id": "71",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: So there shouldn’t be memory management issues if I do this? [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-02T22:54:37.587000",
          "text": "So there shouldn’t be memory management issues if I do this?\n```\n#lang scribble/manual\n\n@(define module-sharing-evaluator-factory\n   (make-base-eval-factory (list 'racket/base 'my/module 'my/other/module))\n\n... some docs ...\n\n@(examples\n  #:eval (module-sharing-evaluator-factory) #:once\n  (do-stuff))\n```"
        }
      ]
    },
    {
      "conversation_id": "72",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Loise For writing racket code... Of course keep using VIM for everything else :slightly_smiling_face:\nPriscila: Besides having test suites for programs written in Racket?\nPriscila: <[URL]\nPriscila: <[URL]\nPriscila: (the last one might be too old)\nNereida: Priscila that's cool, I will check it, thanks! :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 522.3,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Nereida",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-03T06:32:53.587700",
          "text": "<@Loise>  For writing racket code... Of course keep using VIM for everything else :slightly_smiling_face:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-03T10:32:19.589500",
          "text": "Besides having test suites for programs written in Racket?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-03T14:07:02.589900",
          "text": "<https://github.com/jboyens/racket-selenium>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-03T14:07:35.590300",
          "text": "<https://github.com/shofetim/Racket-WebDriver>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-03T14:07:48.590700",
          "text": "(the last one might be too old)"
        },
        {
          "user": "Nereida",
          "timestamp": "2019-02-03T15:15:11.591800",
          "text": "<@Priscila> that's cool, I will check it, thanks! :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "73",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Nereida: Hi folks! Does anyone do software test automation in Racket instead of Python? Seems to be a perspective use for the language?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nereida"
        ]
      },
      "timeline": [
        {
          "user": "Nereida",
          "timestamp": "2019-02-03T10:21:10.589100",
          "text": "Hi folks! Does anyone do software test automation in Racket instead of Python? Seems to be a perspective use for the language?"
        }
      ]
    },
    {
      "conversation_id": "74",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Hallie are you gregid on Github?\nHallie: Shavon yes\nShavon: Hallie Ah, thanks for the submissions for racket news.\nHallie: have you thought about adding [CODE] label and/or milestones being newsletter number?\nShavon: nope, but I will after you suggested it. :slightly_smiling_face:\nHallie: :slightly_smiling_face:\nShavon: ...and done! :slightly_smiling_face:\nHallie: nice! will be easy to track!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 297.82,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-04T02:27:35.592700",
          "text": "<@Hallie> are you gregid on Github?"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-04T06:26:57.593900",
          "text": "<@Shavon> yes"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-04T07:10:15.594700",
          "text": "<@Hallie> Ah, thanks for the submissions for racket news."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-04T07:12:29.595800",
          "text": "have you thought about adding `submission` label and/or milestones being newsletter number?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-04T07:18:46.596100",
          "text": "nope, but I will after you suggested it. :slightly_smiling_face:"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-04T07:19:07.596300",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-04T07:20:47.596600",
          "text": "...and done! :slightly_smiling_face:"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-04T07:25:24.596900",
          "text": "nice! will be easy to track!"
        }
      ]
    },
    {
      "conversation_id": "75",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Aubrey: Thanks, I was able to include the patch in the PPA build and the rebuild looks successful.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Aubrey"
        ]
      },
      "timeline": [
        {
          "user": "Aubrey",
          "timestamp": "2019-02-04T14:37:59.597700",
          "text": "Thanks, I was able to include the patch in the PPA build and the rebuild looks successful."
        }
      ]
    },
    {
      "conversation_id": "76",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Major: Just getting started with racket! qq: on a mac, I am seeing [CODE] pull files from [CODE] though I have [CODE] installed. Can someone point me to any documentation that would explain [CODE]'s different repos for platforms and builds?\nPriscila: did you by chance invoke an old [CODE] ?\nPriscila: what does\nPriscila: which raco\nPriscila: say\nMajor: I'm installing with [CODE] and getting [CODE] for [CODE]\nPriscila: What does\nPriscila: raco version\nPriscila: show?\nMajor: [CODE] is not recognized as a command\nPriscila: Major Sorry. Misread the output in my terminal (my path contains the version number)\nGonzalo: what does [CODE] show?\nMajor: [CODE]\nPriscila: I have no idea. But ... why aren't you using the official installers?\nPriscila: <[URL]\nGonzalo: Major If you run [CODE], do you get [CODE] as well? And if so, if you run [CODE], what does it say in the first few lines of output? (It should have the version information there.)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 16,
        "duration_minutes": 16.8,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Major",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Major",
          "timestamp": "2019-02-04T16:11:10.599300",
          "text": "Just getting started with racket! qq: on a mac, I am seeing `raco pkg install` pull files from `7.1` though I have `7.2` installed. Can someone point me to any documentation that would explain `raco`'s different repos for platforms and builds?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:14:50.599800",
          "text": "did you by chance invoke an old `raco` ?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:14:52.600000",
          "text": "what does"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:14:54.600300",
          "text": "which raco"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:14:57.600500",
          "text": "say"
        },
        {
          "user": "Major",
          "timestamp": "2019-02-04T16:19:15.600900",
          "text": "I'm installing with `brew install minimal-racket` and getting `/usr/local/bin/raco` for `which raco`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:20:01.601200",
          "text": "What does"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:20:04.601400",
          "text": "raco version"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:20:05.601700",
          "text": "show?"
        },
        {
          "user": "Major",
          "timestamp": "2019-02-04T16:21:50.602000",
          "text": "`raco version` is not recognized as a command"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:24:25.602800",
          "text": "<@Major> Sorry. Misread the output in my terminal (my path contains the version number)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-04T16:24:50.603300",
          "text": "what does `racket --version` show?"
        },
        {
          "user": "Major",
          "timestamp": "2019-02-04T16:26:08.603500",
          "text": "`7.2`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:26:48.604000",
          "text": "I have no idea. But ... why aren't you using the official installers?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-04T16:26:49.604200",
          "text": "<http://download.racket-lang.org/>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-04T16:27:58.605200",
          "text": "<@Major> If you run `which racket`, do you get `/usr/local/bin/racket` as well? And if so, if you run `raco setup`, what does it say in the first few lines of output? (It should have the version information there.)"
        }
      ]
    },
    {
      "conversation_id": "77",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Laverna: tahir, i just went through this last week, same thing. i went through my system and deleted anything related to racket, and then it started working. it was very frustrating.\nLaverna: i.e., i had to do more than uninstall things through [CODE]; maybe there was a config file left over?\nLaverna: (i’m assuming you previously had an earlier version of racket installed)\nLaverna: (there are some advantages to using a system like brew, which is basically just installing [CODE]. e.g. there are the usual benefits of using a package manager, which include a consistent way to uninstall and update packages.)\nTomas: i have this in my bash files to keep tabs on which Racket i’m running [CODE_BLOCK] I install Racket with [CODE]\nTomas: on a Mac\nSang: Laverna You probably want to look at or nuke [CODE]\nSang: Tomas I don’t have a [CODE] under [CODE]\nSang: I usually install via the official dmg’s + rsync. Then either use drracket or [CODE] to move to the new version.\nSang: Major if you’ve got a mess of racket versions ([CODE]), then you can probably fix it up to the latest with [CODE]. If that doesn’t fix it up, then you probably have a mix of brew and non-brew installs (or your pathing is strange?)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 22.25,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Laverna",
          "Sang",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Laverna",
          "timestamp": "2019-02-04T17:14:27.607000",
          "text": "tahir, i just went through this last week, same thing. i went through my system and deleted anything related to racket, and then it started working. it was very frustrating."
        },
        {
          "user": "Laverna",
          "timestamp": "2019-02-04T17:15:51.607800",
          "text": "i.e., i had to do more than uninstall things through `brew`; maybe there was a config file left over?"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-02-04T17:16:59.608300",
          "text": "(i’m assuming you previously had an earlier version of racket installed)"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-02-04T17:20:04.609400",
          "text": "(there are some advantages to using a system like brew, which is basically just installing `racket-minimal-7.2-src-builtpkgs.tgz`. e.g. there are the usual benefits of using a package manager, which include a consistent way to uninstall and update packages.)"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-04T17:30:03.610100",
          "text": "i have this in my bash files to keep tabs on which Racket i’m running\n\n```\n### Add current Racket's bin to path\nif [ -L \"/usr/local/bin/racket\" ]; then\n   racket_v=$(racket --version | sed 's/[^0-9.]*//g')\n   PATH=\"$PATH:$HOME/Library/Racket/${racket_v%.*}/bin\"\nfi\n```\n\nI install Racket with `brew cask install racket`"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-04T17:30:25.610400",
          "text": "on a Mac"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-04T17:31:44.610800",
          "text": "<@Laverna> You probably want to look at or nuke `~/Library/Racket`"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-04T17:33:18.611400",
          "text": "<@Tomas> I don’t have a `bin` under `~/Library/Racket/*`"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-04T17:34:39.612200",
          "text": "I usually install via the official dmg’s + rsync. Then either use drracket or `raco pkg migrate` to move to the new version."
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-04T17:36:42.613500",
          "text": "<@Major> if you’ve got a mess of racket versions (`brew list --versions --multiple`), then you can probably fix it up to the latest with `brew unlink minimal-racket; brew link minimal-racket`. If that doesn’t fix it up, then you probably have a mix of brew and non-brew installs (or your pathing is strange?)"
        }
      ]
    },
    {
      "conversation_id": "78",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Great - thanks!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-02-04T20:30:35.613700",
          "text": "Great - thanks!"
        }
      ]
    },
    {
      "conversation_id": "79",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Major: [CODE]: [CODE]. when I run [CODE] I get the following. I had installed [CODE] a day or so before 7.2 was released. I had installed some pkgs (like [CODE] which shows up below), but have since removed the racket installation with [CODE]. Still I'm getting this when I run [CODE]: [CODE_BLOCK]\nGonzalo: Major It certainly seems like something about the homebrew installation isn’t configured properly, but I’m not totally sure what. Glancing at the minimal-racket formula, it seems to muck about with the location that Racket installs executables so that they end up in [CODE], which shouldn’t break anything on its own AFAICT, but it would explain why the executables don’t get cleaned up when you [CODE] the package.\nGonzalo: I don’t think the minimal-racket formula is “official” in any capacity, though.\nMajor: Ok, realized [CODE] was not being deleted. now [CODE] runs and succeeds!\nMajor: And [CODE] seems to only pull from [CODE]\nElin: There are two strategies I know of (that are type-safe by default)\nElin: 1. Use an [CODE] type declaration in the [CODE] form\nElin: 2. Use a [CODE] declaration in the [CODE] form\nElin: (1) can look like this: [CODE_BLOCK]\nElin: (2) only works when the library exposes the struct to you, which [CODE] doesn’t",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 695.23,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Gonzalo",
          "Major"
        ]
      },
      "timeline": [
        {
          "user": "Major",
          "timestamp": "2019-02-04T21:59:44.614200",
          "text": "`which racket`: `/usr/local/bin/racket`. when I run `raco setup` I get the following. I had installed `minimal-racket` a day or so before 7.2 was released. I had installed some pkgs (like `base16-drracket` which shows up below), but have since removed the racket installation with `brew uninstall --force minimal-racket`. Still I'm getting this when I run `raco setup`: ```\nraco setup: version: 7.2\nraco setup: platform: x86_64-macosx [3m]\nraco setup: target machine: racket\nraco setup: installation name: 7.2\nraco setup: variants: 3m\nraco setup: main collects: /usr/local/Cellar/minimal-racket/7.2/share/racket/collects\nraco setup: collects paths: \nraco setup:   /Users/tahir.butt/Library/Racket/7.2/collects\nraco setup:   /usr/local/Cellar/minimal-racket/7.2/share/racket/collects\nraco setup: main pkgs: /usr/local/Cellar/minimal-racket/7.1/share/racket/pkg\nraco setup: pkgs paths:         \n....                                                                                                                     \nraco setup:     source path: /usr/local/Cellar/minimal-racket/7.1/lib/racket/starter-sh\nraco setup:     destination path: /usr/local/bin/raco\nraco setup:     system error: No such file or directory; errno=2\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-04T22:24:23.616500",
          "text": "<@Major> It certainly seems like something about the homebrew installation isn’t configured properly, but I’m not totally sure what. Glancing at the minimal-racket formula, it seems to muck about with the location that Racket installs executables so that they end up in `/usr/local`, which shouldn’t break anything on its own AFAICT, but it would explain why the executables don’t get cleaned up when you `brew uninstall` the package."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-04T22:24:39.616900",
          "text": "I don’t think the minimal-racket formula is “official” in any capacity, though."
        },
        {
          "user": "Major",
          "timestamp": "2019-02-04T22:53:41.617500",
          "text": "Ok, realized `/usr/local/etc/racket` was not being deleted. now `raco setup` runs and succeeds!"
        },
        {
          "user": "Major",
          "timestamp": "2019-02-04T22:54:33.617900",
          "text": "And `raco pkg install ...` seems to only pull from `7.2`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-05T09:29:23.627300",
          "text": "There are two strategies I know of (that are type-safe by default)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-05T09:29:46.627800",
          "text": "1. Use an `#:opaque` type declaration in the `require/typed` form"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-05T09:30:05.628200",
          "text": "2. Use a `#:struct` declaration in the `require/typed` form"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-05T09:30:53.628900",
          "text": "(1) can look like this:\n```\n#lang typed/racket\n(require/typed gregor\n               [#:opaque Date date?]\n               [~t (Date String -&gt; String)]\n               [today (-&gt; Date)])\n(displayln (~t (today) \"yyyy-MM-dd\"))\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-05T09:34:58.629600",
          "text": "(2) only works when the library exposes the struct to you, which `gregor` doesn’t"
        }
      ]
    },
    {
      "conversation_id": "80",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lashawnda: morning\nLashawnda: i'm considering to go through HTDP2e book and wonder whether it is worth to buy a copy? some people on the net complain that the typesetting (despite of TeX usage) and the physical format are not top-notch. any comment?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 1.43,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lashawnda"
        ]
      },
      "timeline": [
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-05T02:12:20.618200",
          "text": "morning"
        },
        {
          "user": "Lashawnda",
          "timestamp": "2019-02-05T02:13:46.620000",
          "text": "i'm considering to go through HTDP2e book and wonder whether it is worth to buy  a copy? some people on the net complain that the typesetting (despite of TeX usage) and the physical format are not top-notch. any comment?"
        }
      ]
    },
    {
      "conversation_id": "81",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mitsuko: I'm trying to use the Gregor library in a Typed Racket project, but I can't figure out the correct syntax for typing it. A minimalistic untyped file for printing the current date could look like this: [CODE_BLOCK] This displays \"2019-02-05\" as expected. A crude attempt to convert this to typed Racket is this: [CODE_BLOCK] But this gives the following error message: [CODE_BLOCK] I can't find any explanation of what this means. I've also tried a few other variations on this, but to no avail. What I think I need is to define the [CODE] struct within the Gregor library (as per <[URL] but the docs don't explain how to do that. Does anyone know what I need to do here?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "action",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Mitsuko"
        ]
      },
      "timeline": [
        {
          "user": "Mitsuko",
          "timestamp": "2019-02-05T05:37:34.626300",
          "text": "I'm trying to use the Gregor library in a Typed Racket project, but I can't figure out the correct syntax for typing it.  A minimalistic untyped file for printing the current date could look like this:\n\n```\n#lang racket\n(require gregor)\n(displayln (~t (today) \"yyyy-MM-dd\"))\n```\n\nThis displays \"2019-02-05\" as expected.  A crude attempt to convert this to typed Racket is this:\n\n```\n#lang typed/racket\n(require/typed gregor\n               [~t (Any String -&gt; String)]\n               [today (-&gt; Any)]\n               )\n(displayln (~t (today) \"yyyy-MM-dd\"))\n```\n\nBut this gives the following error message:\n\n```\n~t: contract violation\n  any-wrap/c: Unable to protect opaque value passed as `Any`\n  value: #&lt;date 2019-02-05&gt;\n  in: the 1st argument of\n      (-&gt; Any any/c String)\n  contract from: (interface for ~t)\n```\n\nI can't find any explanation of what this means.  I've also tried a few other variations on this, but to no avail.\n\nWhat I think I need is to define the `date` struct within the Gregor library (as per <https://docs.racket-lang.org/ts-guide/typed-untyped-interaction.html>), but the docs don't explain how to do that.  Does anyone know what I need to do here?"
        }
      ]
    },
    {
      "conversation_id": "82",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mitsuko: Sweet. Got it working. Thanks a lot!\nShanell: Mitsuko On a related note: I often regret making the time zone argument to [CODE] (and other functions) optional. I think programmers routinely forget that \"today\" is an indexical term.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 264.65,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mitsuko",
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Mitsuko",
          "timestamp": "2019-02-05T10:53:17.630100",
          "text": "Sweet.  Got it working.  Thanks a lot!"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-05T15:17:56.632200",
          "text": "<@Mitsuko> On a related note: I often regret making the time zone argument to `today` (and other functions) optional. I think programmers routinely forget that \"today\" is an indexical term."
        }
      ]
    },
    {
      "conversation_id": "83",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Google is currently making an effort internally to fix all date and time bugs in all Java code and so far the biggest cause of them is implicitly relying on the system default clock and time zone\nKaren: It sneaks global mutable state into places, and if that's not bad enough the state has confusing and unintuitive semantics\nShanell: It certainly does\nKaren: Interestingly the other main problem is APIs and libraries that don't support nanosecond precision\nShanell: That _is_ interesting. I haven't written Java in a long time, but, while I wasn't especially surprised to see that [CODE] only has millisecond precision, I _was_ surprised that Joda was the same. The newer [CODE] stuff has nanosecond precision, I believe (as Gregor does).",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 8.93,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-05T15:24:49.632400",
          "text": "Google is currently making an effort internally to fix all date and time bugs in all Java code and so far the biggest cause of them is implicitly relying on the system default clock and time zone"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-05T15:26:00.632900",
          "text": "It sneaks global mutable state into places, and if that's not bad enough the state has confusing and unintuitive semantics"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-05T15:27:11.633200",
          "text": "It certainly does"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-05T15:31:01.633400",
          "text": "Interestingly the other main problem is APIs and libraries that don't support nanosecond precision"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-05T15:33:45.633600",
          "text": "That _is_ interesting. I haven't written Java in a long time, but, while I wasn't especially surprised to see that `java.util.Date` only has millisecond precision, I _was_ surprised that Joda was the same. The newer `java.time` stuff has nanosecond precision, I believe (as Gregor does)."
        }
      ]
    },
    {
      "conversation_id": "84",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: Running the following program raises a use-before-initialization error for [CODE] when evaluating the [CODE]. I suspect this is a bug (maybe related to <[URL] but does anyone know if it is supposed to work, or if there's some other way to achieve this? [CODE_BLOCK]\nKaren: Yup. Migrating code to [CODE] is a big part of the bug fix effort.\nMadelaine: I've opened <[URL] to track this.\nMitsuko: I only need it to parse invoice dates pulled from a CSV file and get the difference between them. I doubt it'll be an issue. Your library works just fine for me. :+1:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 34.37,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Madelaine",
          "Mitsuko"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-02-05T16:10:02.636000",
          "text": "Running the following program raises a use-before-initialization error for `make-foo/c` when evaluating the `(invoke-unit foo@)`. I suspect this is a bug (maybe related to <https://github.com/racket/racket/issues/1652>), but does anyone know if it is supposed to work, or if there's some other way to achieve this?\n```\n#lang racket\n\n(define-signature foo^\n  [foo?\n   (define-values-for-export [make-foo/c] (-&gt; foo?))\n   make-foo/c\n   (contracted [make-foo make-foo/c])])\n\n(define-unit foo@\n  (import)\n  (export foo^)\n  (define (foo? x)\n    (eq? x 'foo))\n  (define (make-foo)\n    'foo))\n\n(invoke-unit foo@)\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-05T16:18:03.636200",
          "text": "Yup. Migrating code to `jave.time` is a big part of the bug fix effort."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-02-05T16:32:46.636400",
          "text": "I've opened <https://github.com/racket/racket/issues/2459> to track this."
        },
        {
          "user": "Mitsuko",
          "timestamp": "2019-02-05T16:44:24.636800",
          "text": "I only need it to parse invoice dates pulled from a CSV file and get the difference between them. I doubt it'll be an issue.  Your library works just fine for me. :+1:"
        }
      ]
    },
    {
      "conversation_id": "85",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Alden is there a tour de force on contracts, maybe explaining where they started up and where we are today and what is still to do research-wise, maybe with some connections to Racket? Maybe an internal/technical report or something of the sort that you can share.\nShavon: Thanks.\nKristeen: Shavon I would say that Alden's ICFP 2014 keynote would be the best thing\nShavon: Kristeen icfp14 doesn't seem to be online. do you have a link to the keynote?\nAlden: <[URL]\nShavon: got it\nShavon: <[URL]\nShavon: lol\nShavon: thanks!\nAlden: I’m not sure it is what you’re looking for, tho …..\nShavon: Thanks anyhow. Will take a look. :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 11,
        "duration_minutes": 255.13,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T07:54:04.638600",
          "text": "<@Alden> is there a tour de force on contracts, maybe explaining where they started up and where we are today and what is still to do research-wise, maybe with some connections to Racket? Maybe an internal/technical report or something of the sort that you can share."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T08:27:50.639000",
          "text": "Thanks."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-06T12:05:11.640800",
          "text": "<@Shavon> I would say that <@Alden>'s ICFP 2014 keynote would be the best thing"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T12:08:14.641300",
          "text": "<@Kristeen> icfp14 doesn't seem to be online. do you have a link to the keynote?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-02-06T12:08:41.641600",
          "text": "<https://youtu.be/gXTbMPVFP1M>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T12:08:41.641700",
          "text": "got it"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T12:08:42.642000",
          "text": "<https://www.youtube.com/watch?v=gXTbMPVFP1M>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T12:08:45.642300",
          "text": "lol"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T12:08:46.642600",
          "text": "thanks!"
        },
        {
          "user": "Alden",
          "timestamp": "2019-02-06T12:08:57.643000",
          "text": "I’m not sure it is what you’re looking for, tho ….."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T12:09:12.643300",
          "text": "Thanks anyhow. Will take a look. :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "86",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Alden: Nothing comes to mind sorry",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Alden"
        ]
      },
      "timeline": [
        {
          "user": "Alden",
          "timestamp": "2019-02-06T08:19:52.638800",
          "text": "Nothing comes to mind sorry"
        }
      ]
    },
    {
      "conversation_id": "87",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Perhaps I miss something really simple. How can I transform an expanded code? Right now I have something like: [CODE_BLOCK] This works, but if I change [CODE] to [CODE], I start to get [CODE]\nElin: Which [CODE] is expanding? Racket’s [CODE] or one that you’re defining?\nElin: If it’s one that you’re defining, does the [CODE] code work if you use it only with Racket’s [CODE]?\nMai: Racket's app\nElin: [CODE_BLOCK] ?\nMai: Ohh interesting.\nElin: Where the [CODE] inserted before [CODE] is Racket’s [CODE] and not a custom one\nMai: Yeah, probably not racket's app\nMai: Right, so if I change: [CODE_BLOCK] to [CODE_BLOCK] (that is, change [CODE] to [CODE]), then disassembling the expanded syntax works.\nMai: But since I need to use [CODE], how could I make this work?\nMai: Also, I thought that [CODE] is supposed to turn [CODE]’s [CODE] to Racket’s [CODE]. Isn’t that the case?\nElin: Mai Rosette’s [CODE] uses [CODE] on its output, and that makes this harder. Maybe [CODE] somewhere will help?\nMai: Yup, I think I have a solution now\nPriscila: Agree.\nSusana: nanopass itself is great though\nPriscila: A Scheme compiler written with Nanopass - including some comments:\nPriscila: <[URL]\nPriscila: Anyone knows about readscheme / Jim Bender?\nSusana: the domain expired?\nPriscila: I would be happy to chip in - to get the web site back up.\nSusana: I think someone in the freenode #scheme IRC channel tried to contact him\nPriscila: Even hosting the references on Github would be great.\nPriscila: <[URL] is also gone",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 23,
        "duration_minutes": 86.33,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Mai",
          "Priscila",
          "Susana"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-02-06T13:40:38.646000",
          "text": "Perhaps I miss something really simple. How can I transform an expanded code?\n\nRight now I have something like:\n\n```\n(define-for-syntax (my-expand stx)\n  (define expanded (local-expand stx 'expression '()))\n  (syntax-parse expanded\n    #:datum-literals (#%app)\n    [(#%app x y)\n     expanded]))\n```\n\nThis works, but if I change `expanded` to `#'x`, I start to get `cannot use identifier tainted by macro transformation`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-06T13:52:33.647300",
          "text": "Which `#%app` is expanding? Racket’s `#%app` or one that you’re defining?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-06T13:53:22.648000",
          "text": "If it’s one that you’re defining, does the `my-expand` code work if you use it only with Racket’s `#%app`?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-06T14:04:41.648600",
          "text": "Racket's app"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-06T14:07:22.649400",
          "text": "```\n(define-syntax ex\n  (lambda (stx)\n    (syntax-parse stx\n      [(_ e) (my-expand #'e)])))\n(ex (add1 5))\n```\n?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-06T14:07:30.649700",
          "text": "Ohh interesting. "
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-06T14:07:54.650800",
          "text": "Where the `#%app` inserted before `add1` is Racket’s `#%app` and not a custom one"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-06T14:07:56.650900",
          "text": "Yeah, probably not racket's app"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-06T14:12:15.652100",
          "text": "Right, so if I change:\n\n```\n(provide (rename-out [module-begin #%module-begin])\n         build\n         (except-out (all-from-out rosette) #%module-begin))\n```\n\nto\n\n```\n(provide (rename-out [module-begin #%module-begin])\n         build\n         (except-out (all-from-out racket) #%module-begin))\n```\n\n(that is, change `rosette` to `racket`), then disassembling the expanded syntax works."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-06T14:13:01.652800",
          "text": "But since I need to use `rosette`, how could I make this work?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-06T14:14:04.653500",
          "text": "Also, I thought that `local-expand` is supposed to turn `rosette`’s `#%app` to Racket’s `#%app`. Isn’t that the case?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-06T14:43:29.656300",
          "text": "<@Mai> Rosette’s `#%app` uses `syntax-protect` on its output, and that makes this harder. Maybe `syntax-disarm` somewhere will help?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-06T14:44:02.656800",
          "text": "Yup, I think I have a solution now"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T14:44:19.656900",
          "text": "Agree."
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-06T14:45:16.657100",
          "text": "nanopass itself is great though"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T14:59:42.657700",
          "text": "A Scheme compiler written with Nanopass - including some comments:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T14:59:44.657900",
          "text": "<https://github.com/tiancaiamao/yscheme/blob/master/compiler.ss>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T15:00:27.658300",
          "text": "Anyone knows about readscheme / Jim Bender?"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-06T15:01:42.658500",
          "text": "the domain expired?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T15:02:10.658900",
          "text": "I would be happy to chip in - to get the web site back up."
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-06T15:03:08.659300",
          "text": "I think someone in the freenode #scheme IRC channel tried to contact him"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T15:05:26.660100",
          "text": "Even hosting the references on Github would be great."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T15:06:58.660400",
          "text": "<http://benderweb.net|benderweb.net> is also gone"
        }
      ]
    },
    {
      "conversation_id": "88",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Shavon Have you checked out this? <[URL]\nSusana: Priscila I’ve read it because I tried to understand the insides of Chez too, but it does not document many important parts of it. Some stuff you can find in some of Dybvig’s papers, though scattered and incomplete information",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 16.13,
        "contains_question": true,
        "action_keywords": [
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Susana"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-06T14:25:34.653900",
          "text": "<@Shavon>   Have you checked out this?  <https://andykeep.com/pubs/dissertation.pdf>"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-06T14:41:42.655100",
          "text": "<@Priscila> I’ve read it because I tried to understand the insides of Chez too, but it does not document many important parts of it. Some stuff you can find in some of Dybvig’s papers, though scattered and incomplete information"
        }
      ]
    },
    {
      "conversation_id": "89",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Thanks. Hadn't seen that before.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-06T15:32:21.660500",
          "text": "Thanks. Hadn't seen that before."
        }
      ]
    },
    {
      "conversation_id": "90",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Elin thanks, it works now. I was aware of [CODE] but it doesn’t seem to fix the issue. It turns out that is indeed the issue, but I need to disarm at every level. E.g. in [CODE], I can disarm [CODE] straightforwardly, but for [CODE], I need to disarm [CODE] first and then disarm the actual [CODE].",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "fix",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-02-06T19:45:14.663800",
          "text": "<@Elin> thanks, it works now. I was aware of `syntax-disarm` but it doesn’t seem to fix the issue. It turns out that is indeed the issue, but I need to disarm at every level. E.g. in `[(_ foo (bar))  ...]`, I can disarm `foo` straightforwardly, but for `bar`, I need to disarm `(bar)` first and then disarm the actual `bar`."
        }
      ]
    },
    {
      "conversation_id": "91",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: All, does anybody know what's the granularity of the racket cache? By looking into [CODE] it seems it's either [CODE] or [CODE]. So if I grab HEAD today and a different HEAD tomorrow, the same cache will be used. Is this the case?\nClarinda: The package-download cache is shared across all Racket versions and variants. It’s keyed on the package checksum, so two variants of Racket would use the same cache entry only when they want exactly the same package content.\nShavon: but with regards to [CODE]. I install clone two HEADs, one today and one tomorrow. It's fine if they both use the same download cache. But then the package is built. Will the built files today be overwritten by those tomorrow? Also, how does CS fit into this? I assume the built files with cs must be put someplace else?\nClarinda: A Racket build from a Git repo checkout uses installation scope by default, so the installation is not written to “~/.racket”. The two builds will have separate installations of the package. A [CODE] build configures [CODE] to put “.zo” files in a subdirectory of “compiled”, such as “compiled/ta6le”, so that’s why [CODE] and [CODE] can coexist within a build. If you install anything specifically in user scope, then both checkout builds would use it, and that’s generally not good. Avoid that problem by not installing into user scope or by changing one of the installations (using [CODE]) to have a name other than “development”.\nShavon: Thanks for the clarification.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 127.78,
        "contains_question": true,
        "action_keywords": [
          "build",
          "must",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T09:41:37.665100",
          "text": "All, does anybody know what's the granularity of the racket cache? By looking into `.racket` it seems it's either `&lt;version&gt;` or `snapshot`. So if I grab HEAD today and a different HEAD tomorrow, the same cache will be used. Is this the case?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-07T10:24:22.666300",
          "text": "The package-download cache is shared across all Racket versions and variants. It’s keyed on the package checksum, so two variants of Racket would use the same cache entry only when they want exactly the same package content."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T10:49:41.668300",
          "text": "but with regards to `deinprogramm`. I install clone two HEADs, one today and one tomorrow. It's fine if they both use the same download cache. But then the package is built. Will the built files today be overwritten by those tomorrow? Also, how does CS fit into this? I assume the built files with cs must be put someplace else?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-07T11:17:36.671400",
          "text": "A Racket build from a Git repo checkout uses installation scope by default, so the installation is not written to “~/.racket”. The two builds will have separate installations of the package. A `make cs` build configures `racketcs` to put “.zo” files in a subdirectory of “compiled”, such as “compiled/ta6le”, so that’s why `racket` and `racketcs` can coexist within a build.\nIf you install anything specifically in user scope, then both checkout builds would use it, and that’s generally not good. Avoid that problem by not installing into user scope or by changing one of the installations (using `raco pkg config ...`) to have a name other than “development”."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T11:49:24.671700",
          "text": "Thanks for the clarification."
        }
      ]
    },
    {
      "conversation_id": "92",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kay: Hello! I am new to Racket, and naturally have some questions ... My first ones, since I like static type systems, are: What is the goal of Typed Racket? Is its main goal to be a workbench for type systems research? What does Typed Racket offer that the type systems of OCaml or Haskell do not?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kay"
        ]
      },
      "timeline": [
        {
          "user": "Kay",
          "timestamp": "2019-02-07T12:52:34.672300",
          "text": "Hello! I am new to Racket, and naturally have some questions ... My first ones, since I like static type systems, are:\n\nWhat is the goal of Typed Racket? Is its main goal to be a workbench for type systems research?\nWhat does Typed Racket offer that the type systems of OCaml or Haskell do not?"
        }
      ]
    },
    {
      "conversation_id": "93",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tempie: I have a list of identifiers that I'd like to use as input to [CODE]. Is it possible to from [CODE] to [CODE]?\nMarya: [CODE]\nTempie: tyvm!\nMarya: there's also match-define: [CODE]\nMarya: needs [CODE] though, but [CODE] is pretty powerful\nTempie: Neat. The trick for me is my list is coming out of [CODE] so I need to make sure it expands before [CODE] or [CODE]. I don't need [CODE] itself redefined. :slightly_smiling_face:\nTempie: Sorry for my clunky terminology. Basically I'm trying to do something like [CODE_BLOCK] but it's trying to literally redefine [CODE]\nElin: Correct me if I’m wrong: If [CODE] is [CODE_BLOCK]\nShanell: My first response is: you do not want to do that.\nElin: The do you want something that will define [CODE] as 1, [CODE] as 2, and [CODE] as 3?\nTempie: Yes, exactly.\nElin: Are the keys of the hash table only known/stored at runtime?\nTempie: Yeah. Unfortunately the way the actual data is created it is outside the definitions context.\nElin: If you had a magic thing that did what you want called [CODE]\nElin: That looked like: [CODE_BLOCK] which took [CODE] as a runtime value, say [CODE], and generated those definitions\nTempie: Yup that's the dream.\nElin: What should the compiler do if it sees: [CODE_BLOCK] ?\nTempie: Based on my limited understanding I would expect it create those definitions local to the scope of [CODE] and thus to return [CODE] if you called it with the example hash.\nShanell: What benefit are you hoping to derive from this? Since the hash keys aren't known until runtime, how would you refer to any of the defined variables?\nShanell: How would you know that they aren't messing with the definitions of things like [CODE]?\nMadelaine: I'm trying to create a new package in the catalog, and I'm getting an error message saying \"Save failed.\" I'm not seeing any other details about what's wrong. Is something amiss with the server? (Boris?)\nTempie: My use case is that I have a situation where I'm creating a tree of nested items that I would like to be able to refer to by name later because we may need to export multiple references to the same instance of data. This would be wrapped behind macros and not something generally available to our scripters.\nElin: To make what Shanell is saying more concrete, what should the compiler do if it sees: [CODE_BLOCK] ? And then you call [CODE] with a hash table that (accidentally of course) contains the key [CODE]: [CODE_BLOCK] ?\nTempie: In that case it would redefine [CODE] to [CODE]. Is the argument that because such a thing is possible then this function shouldn't exist? Because I can right now do [CODE_BLOCK]\nElin: What about [CODE]?\nTempie: I'm not working on a publicly available API or anything here. This is an internal library to be used by our own employees who are all reasonably professional. :slightly_smiling_face:\nElin: Okay\nElin: How about you modify it slightly: [CODE_BLOCK] That way [CODE], [CODE], and [CODE] are known at compile time?\nElin: Definitions and binding need to be determined at compile time, that’s why\nTempie: So the net effect of that would be every instance of this data would require the scripter to also maintain a list of all known instances in a separate location. I'd say we'd go maybe 48 hours before that process broke down. While everyone is reasonably professional most of them are non-technical by nature.\nShanell: I guess I still don't understand this part: if the keys aren't known until runtime, how can any of the people using this refer to them? How/why would they expect [CODE] to be bound?\nShanell: If they _are_ known ahead of time, then you don't need to do this. If they aren't, I don't see how it's _useful_ to do this.\nShanell: Or are you assuming that the programmers will be able to refer to unbound variables and get back some kind of [CODE] value à la javascript?\nTempie: The runtime in this case is an exporter which generates a data file to be used by the game. So if our exporter can refer to data at a later point in time we can do more useful things with that data. Say we are able to export the tree of data as authored by the scripters but then automatically generate a list of all known tree nodes which also gets written out.\nShanell: Sorry, I don't follow. I guess I still don't have a good idea of how this code would be used.\nShanell: But... assuming that whoever is going to be referring to these variables is also responsible for making sure that the hash has the relevant keys (which I think is what you're saying), maybe this could be done as a kind of staged approach? Where you'd macro-generate the code per dataset. Does that make any sense?\nShanell: An alternative would be to embed an interpreter in your code.\nElin: If someone writes [CODE_BLOCK] And then [CODE] is called on a hash that doesn’t have that key, like [CODE], what do you want to happen? 1. Error at compile time, somehow 2. Error at run time 3. Some king of “undefined” value, but no error\nTempie: I think so, I believe we do similar macro generated code/datasets pretty frequently if I take your meaning correctly.\nElin: And who should be “blamed” for this error?\nTempie: Runtime error Elin\nElin: The person who wrote [CODE] in a way that referred to a key that didn’t exist?\nElin: Or the person who called [CODE] without giving it the keys that it expected?\nTempie: I would expect the \"blame\" to be on the author of [CODE] in this case\nElin: So when [CODE] is written, is there some list of known valid keys somewhere?\nElin: And [CODE], [CODE], and [CODE] are in that list, but [CODE] is not?\nTempie: Unfortunately that's what the hash table is supposed to be, the list of known things.\nElin: But the list of known valid keys is known when [CODE] is written, which is before [CODE] is called, right?\nShanell: So, I've never done this before, but maybe you could do something like: - create a new namespace - iterate through the hash pairs, calling [CODE] on each - use the populated namespace to [CODE] the user code\nShanell: (This is a simplified version of what you'd need to do to set up a useful environment for eval-ing code.)\nElin: There are probably much better ways than [CODE], even for potentially dynamic behavior like this\nShanell: And quite possibly not the best way to go about this.\nElin: I’m trying to figure out how dynamic it needs to be\nElin: Should information be known when [CODE] is defined, or only when [CODE] is called?\nTempie: [CODE] is not written when there is a list of known keys.\nElin: Then how is it right to blame the author of [CODE] for writing [CODE] when the list of keys is not known when they wrote it?\nTempie: Let me see if I can conjure up what this might look like to a scripter\nTempie: [CODE_BLOCK]\nTempie: [CODE] in this example is a macro that internally updates the hash table behind the scenes.\nElin: Currently the [CODE] macro updates the hash at run time?\nElin: Could you have it update a set of known keys at compile time as well?\nTempie: How might I do that?\nElin: What if the information about [CODE] and [CODE] being valid keys was stored at compile time in the [CODE] identifier? Then when you invoke [CODE] you pass in [CODE] like this: [CODE_BLOCK] And then [CODE] and [CODE] are defined\nTempie: The part I'm stuck on is associating [CODE] and [CODE] with [CODE] at compile time. I think it would require [CODE] having significant visibility into the the format of the data nodes.\nTempie: But I admit that is particular to our own macro structure.\nTempie: Assuming the [CODE] macro had that information, what would the process of compile time association look like?\nElin: One possible way would look something like this:\nElin: [CODE_BLOCK]\nElin: [CODE] creates an association at compile time\nElin: and [CODE] looks up the compile-time value associated with the identifier\nElin: It’s also possible to have [CODE] tied to both a compile-time set of keys and a run-time hashtable, by creating a compile-time struct that refers to a runtime identifier\nElin: Or if there might be multiple run-time hash-tables for the same set of keys, it might be better to keep those separate.\nTempie: Interesting! I've not seen [CODE] before.\nTempie: Unfortunately I have to step away for a bit, if I don't get a chance to follow up later I just want to say thank you for working this out with me.\nShavon: hummm, yes that works. but I wanted a cleaner solution where only the files required for the website are put in [CODE].",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 75,
        "duration_minutes": 100.42,
        "contains_question": true,
        "action_keywords": [
          "create",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Madelaine",
          "Marya",
          "Shanell",
          "Shavon",
          "Tempie"
        ]
      },
      "timeline": [
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T13:54:25.676800",
          "text": "I have a list of identifiers that I'd like to use as input to `define-values`. Is it possible to from `'(a b c)` to `(values a b c)`?"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-07T13:55:12.676900",
          "text": "`(apply values '(a b c))`"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T13:55:57.677100",
          "text": "tyvm!"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-07T13:58:36.677300",
          "text": "there's also match-define:\n`(match-define (list a-var b-var c-var) '(a b c))`"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-07T13:59:01.677500",
          "text": "needs `(require racket/match)` though, but `match-define` is pretty powerful"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:02:41.677700",
          "text": "Neat. The trick for me is my list is coming out of `hash-values` so I need to make sure it expands before `match-define` or `define-values`. I don't need `hash-values` itself redefined. :slightly_smiling_face:"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:07:57.678100",
          "text": "Sorry for my clunky terminology. Basically I'm trying to do something like ```(define val-list (hash-keys h))\n(define-values (values val-list) (hash-values h))``` but it's trying to literally redefine `val-list`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:10:18.678600",
          "text": "Correct me if I’m wrong: If `h` is\n```\n(hash 'a 1 'b 2 'c 3)\n```"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:11:05.679000",
          "text": "My first response is: you do not want to do that."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:11:11.679200",
          "text": "The do you want something that will define `a` as 1, `b` as 2, and `c` as 3?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:11:16.679400",
          "text": "Yes, exactly."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:11:46.679600",
          "text": "Are the keys of the hash table only known/stored at runtime?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:12:23.679800",
          "text": "Yeah. Unfortunately the way the actual data is created it is outside the definitions context."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:13:09.680000",
          "text": "If you had a magic thing that did what you want called `definitions-from-hash`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:14:33.680200",
          "text": "That looked like:\n```\n(definitions-from-hash h)\n```\nwhich took `h` as a runtime value, say `(hash 'a 1 'b 2 'c 3)`, and generated those definitions"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:15:16.680400",
          "text": "Yup that's the dream."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:15:22.680600",
          "text": "What should the compiler do if it sees:\n```\n(define (f h)\n  (definitions-from-hash h)\n  a)\n```\n?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:17:06.680800",
          "text": "Based on my limited understanding I would expect it create those definitions local to the scope of `f` and thus to return `1` if you called it with the example hash."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:19:11.681000",
          "text": "What benefit are you hoping to derive from this? Since the hash keys aren't known until runtime, how would you refer to any of the defined variables?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:19:41.681200",
          "text": "How would you know that they aren't messing with the definitions of things like `+`?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-02-07T14:24:22.682900",
          "text": "I'm trying to create a new package in the catalog, and I'm getting an error message saying \"Save failed.\" I'm not seeing any other details about what's wrong. Is something amiss with the server? (<@Boris>?)"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:24:23.683000",
          "text": "My use case is that I have a situation where I'm creating a tree of nested items that I would like to be able to refer to by name later because we may need to export multiple references to the same instance of data. This would be wrapped behind macros and not something generally available to our scripters."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:26:47.683200",
          "text": "To make what <@Shanell> is saying more concrete, what should the compiler do if it sees:\n```\n(define (f h)\n  (definitions-from-hash h)\n  (+ a 10))\n```\n?\n\nAnd then you call `f` with a hash table that (accidentally of course) contains the key `'+`:\n```\n(f (hash 'a \"a~vtion\" '+ printf))\n```\n?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:30:47.683700",
          "text": "In that case it would redefine `+` to `printf`. Is the argument that because such a thing is possible then this function shouldn't exist? Because I can right now do\n\n```(define + printf)\n(+ \"foo ~a\" 1)```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:31:02.683900",
          "text": "What about `(f (hash 'definitions-from-hash +))`?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:32:19.684100",
          "text": "I'm not working on a publicly available API or anything here. This is an internal library to be used by our own employees who are all reasonably professional. :slightly_smiling_face:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:32:27.684300",
          "text": "Okay"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:33:20.684600",
          "text": "How about you modify it slightly:\n```\n(definitions-from-hash h [a b c])\n```\nThat way `a`, `b`, and `c` are known at compile time?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:36:21.684800",
          "text": "Definitions and binding need to be determined at compile time, that’s why"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:37:05.685000",
          "text": "So the net effect of that would be every instance of this data would require the scripter to also maintain a list of all known instances in a separate location. I'd say we'd go maybe 48 hours before that process broke down. While everyone is reasonably professional most of them are non-technical by nature."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:38:04.685200",
          "text": "I guess I still don't understand this part: if the keys aren't known until runtime, how can any of the people using this refer to them? How/why would they expect `a` to be bound?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:38:35.685400",
          "text": "If they _are_ known ahead of time, then you don't need to do this. If they aren't, I don't see how it's _useful_ to do this."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:39:51.685600",
          "text": "Or are you assuming that the programmers will be able to refer to unbound variables and get back some kind of `undefined` value à la javascript?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:40:52.685800",
          "text": "The runtime in this case is an exporter which generates a data file to be used by the game. So if our exporter can refer to data at a later point in time we can do more useful things with that data. Say we are able to export the tree of data as authored by the scripters but then automatically generate a list of all known tree nodes which also gets written out."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:43:55.686000",
          "text": "Sorry, I don't follow. I guess I still don't have a good idea of how this code would be used."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:46:45.686300",
          "text": "But... assuming that whoever is going to be referring to these variables is also responsible for making sure that the hash has the relevant keys (which I think is what you're saying), maybe this could be done as a kind of staged approach? Where you'd macro-generate the code per dataset. Does that make any sense?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:49:15.686500",
          "text": "An alternative would be to embed an interpreter in your code."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:50:03.686700",
          "text": "If someone writes\n```\n(define (f h)\n  (definitions-from-hash h)\n  eeeeeee)\n```\nAnd then `f` is called on a hash that doesn’t have that key, like `(hash 'a 1 'b 2 'c 3)`, what do you want to happen?\n  1. Error at compile time, somehow\n  2. Error at run time\n  3. Some king of “undefined” value, but no error"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:50:35.686900",
          "text": "I think so, I believe we do similar macro generated code/datasets pretty frequently if I take your meaning correctly."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:50:39.687100",
          "text": "And who should be “blamed” for this error?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:50:50.687300",
          "text": "Runtime error <@Elin>"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:51:07.687500",
          "text": "The person who wrote `f` in a way that referred to a key that didn’t exist?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:51:18.687700",
          "text": "Or the person who called `f` without giving it the keys that it expected?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:52:23.687900",
          "text": "I would expect the \"blame\" to be on the author of `f` in this case"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:53:44.688100",
          "text": "So when `f` is written, is there some list of known valid keys somewhere?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:54:15.688300",
          "text": "And `a`, `b`, and `c` are in that list, but `eeeeeee` is not?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:55:53.688500",
          "text": "Unfortunately that's what the hash table is supposed to be, the list of known things."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:56:25.688700",
          "text": "But the list of known valid keys is known when `f` is written, which is before `f` is called, right?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:57:31.689000",
          "text": "So, I've never done this before, but maybe you could do something like:\n- create a new namespace\n- iterate through the hash pairs, calling `namespace-set-variable-value!` on each\n- use the populated namespace to `eval` the user code"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:57:59.689200",
          "text": "(This is a simplified version of what you'd need to do to set up a useful environment for eval-ing code.)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:58:15.689400",
          "text": "There are probably much better ways than `eval`, even for potentially dynamic behavior like this"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:58:16.689600",
          "text": "And quite possibly not the best way to go about this."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:58:36.689800",
          "text": "I’m trying to figure out how dynamic it needs to be"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:59:17.690000",
          "text": "Should information be known when `f` is defined, or only when `f` is called?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T14:59:52.690200",
          "text": "`f` is not written when there is a list of known keys."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:00:50.690400",
          "text": "Then how is it right to blame the author of `f` for writing `eeeeeee` when the list of keys is not known when they wrote it?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:01:21.690600",
          "text": "Let me see if I can conjure up what this might look like to a scripter"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:01:26.690800",
          "text": "```(new-game-data example\n (new-node foo 1 2 3)\n (new-node bar 4 5 6)\n )\n;; foo is undefined\n(magic)\n;; foo is now bound to a new data node\n(do-something-with foo bar)```"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:01:59.691000",
          "text": "`new-node` in this example is a macro that internally updates the hash table behind the scenes."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:02:24.691200",
          "text": "Currently the `new-node` macro updates the hash at run time?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:02:42.691400",
          "text": "Could you have it update a set of known keys at compile time as well?"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:03:15.691600",
          "text": "How might I do that?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:05:18.691800",
          "text": "What if the information about `foo` and `bar` being valid keys was stored at compile time in the `example` identifier?\nThen when you invoke `magic` you pass in `example` like this:\n```\n(magic example)\n```\nAnd then `foo` and `bar` are defined"
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:09:42.692000",
          "text": "The part I'm stuck on is associating `foo` and `bar` with `example` at compile time. I think it would require `new-game-data` having significant visibility into the the format of the data nodes."
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:10:06.692200",
          "text": "But I admit that is particular to our own macro structure."
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:11:05.692400",
          "text": "Assuming the `new-game-data` macro had that information, what would the process of compile time association look like?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:15:32.692600",
          "text": "One possible way would look something like this:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:15:44.692800",
          "text": "```\n#lang racket\n\n(require syntax/parse/define)\n\n(define-syntax new-node #f)\n\n(define-syntax-parser new-game-data\n  #:literals [new-node]\n  [(new-game-data name:id (new-node key:id) ...)\n   #'(define-syntax name '(key ...))])\n\n(define-syntax-parser magic\n  [(magic name:id)\n   (define keys (syntax-local-value #'name))\n   (define keys-stx (datum-&gt;syntax #'name keys))\n   #`(define-values #,keys-stx (apply values (range #,(length keys))))])\n\n(new-game-data example\n (new-node foo)\n (new-node bar))\n\n(magic example)\nfoo\n;=&gt; 0\nbar\n;=&gt; 1\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:16:37.693000",
          "text": "`define-syntax` creates an association at compile time"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:16:56.693200",
          "text": "and `syntax-local-value` looks up the compile-time value associated with the identifier"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:19:11.693400",
          "text": "It’s also possible to have `example` tied to both a compile-time set of keys and a run-time hashtable, by creating a compile-time struct that refers to a runtime identifier"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-07T15:23:04.693900",
          "text": "Or if there might be multiple run-time hash-tables for the same set of keys, it might be better to keep those separate."
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:24:09.695200",
          "text": "Interesting! I've not seen `define-syntax-parser` before."
        },
        {
          "user": "Tempie",
          "timestamp": "2019-02-07T15:24:52.695800",
          "text": "Unfortunately I have to step away for a bit, if I don't get a chance to follow up later I just want to say thank you for working this out with me."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:34:50.702100",
          "text": "hummm, yes that works. but I wanted a cleaner solution where only the files required for the website are put in `site/`."
        }
      ]
    },
    {
      "conversation_id": "94",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: “expands before” ??\nShanell: It's not clear what you expect it to do\nShanell: Oh, wait: you want to define a variable per k/v pair in the hash?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 5.1,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-02-07T14:05:49.677900",
          "text": "“expands before” ??"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:09:53.678400",
          "text": "It's not clear what you expect it to do"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:10:55.678800",
          "text": "Oh, wait: you want to define a variable per k/v pair in the hash?"
        }
      ]
    },
    {
      "conversation_id": "95",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shanell: Also: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Shanell",
          "timestamp": "2019-02-07T14:29:16.683500",
          "text": "Also:\n```\n(define (f h)\n   (definitions-from-hash h)\n   a)\n\n(f (hash))\n```"
        }
      ]
    },
    {
      "conversation_id": "96",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Julia at the moment in frog, to create the website, I do a [CODE] which puts everything in a [CODE] subfolder but then I need to manually copy in the css, img and js folders so I can sync it to the destination. Is there a way to specify [CODE] to have automatically copied to the site folder?\nJulia: Shavon Can you just locate the css / img / js in the [CODE] subfolder in the first place? ([CODE] doesn't [CODE] it cleans only files it produced)\nShavon: but those are not in the site subfolder.\nJulia: I mean, for my own frog blog, I have the source and output all mixed in one tree which effectively gets [CODE]ed to GitHub Pages. <[URL] Including the [CODE] tree. It happens that GitHub Pages doesn't serve stuff under [CODE], so e.g. <[URL] doesn't show you the source.\nJulia: But even if it showed the source markdown I'm like ¯\\_(ツ)_/¯\nJulia: So at other people's request frog has options to build to some other dir. But I never use it. I am supremely bored by non-trivial deployments of anything. :slightly_smiling_face:\nShavon: Would you accept a PR to add assets to the target folder?\nJulia: I guess so but I'm still confused, can't you simply have the assets under [CODE] where you want them to be, and you run frog and it \"fills in\" the output HTML etc alongside it?\nShavon: but site doesn't actually exist. I could of course create it before hand, but I generally just point to a temp dir for frog to generate the site.\nShavon: I at the moment have a makefile that does that: create temp dir, copy css, js, img and then run [CODE] but it would be cooler if I could ditch the makefile and instead have in [CODE] something like: [CODE] or something of the sort.\nJulia: OK well if it's a simple change I'm open to a PR.\nShavon: ok, will give it a go. thanks.\nJulia: I guess my reluctance is a feeling that, in hindsight, Frog should probably be exploded into pieces that can be driven by a makefile or other script, and then people can do all sorts of flows.\nJulia: A lot of frog is what I call \"path math\", plus an application of Greenspun's rule to makefiles. :slightly_smiling_face:\nShavon: really? i would think going on a path to ditch makefiles would be better. :slightly_smiling_face: anyhow, your call.\nJulia: But that's just my reluctance, hindsight. The horse is well out of the barn, so some more PRs are inevitable. :slightly_smiling_face:\nShavon: lets turn this frog into bullfrog...\nShavon: (i am now left wondering if the bullfrog is indeed as large as it sounds...)\nShavon: :confused:\nJulia: One way to put it: I wish Frog, instead of an application and a \"framework\", were more just a set of libraries.\nJulia: Whether you drive it with a makefile, or your own little Racket program, or shell script, whatever.\nMadelaine: Tangentially, have either of you used the Racket [CODE] module? (<[URL] I haven't really tried it yet, but I do run into some situations where I want to bridge the gap between [CODE]'s notion dependency tracking with external things that lend themselves more to makefiles, like rebuilding various static files.\nJulia: The main value Frog has, as an app, is any \"just-works\" element. But once people want it to work unique ways, it kind of falls down fast, and starts to go down the configurability slippery slope.\nJulia: Madelaine I haven't looked it for awhile. I thought of it recently wrt Racket projects working on Windows, too. But I haven't done much with the thought, yet.\nShavon: Julia for what it's worth, I really like how frog works. :slightly_smiling_face:\nShavon: Madelaine that's a pretty old module. I haven't looked at it in a decade but I have used it back in the plt scheme time.\nShavon: but since i haven't looked at it since, it might have been refactored since.\nShavon: geee... what have i written there. time to bed.\nKaren: I wish the racket [CODE] thing included a language so I could easily port regular makefiles to racket ones just by adding [CODE] to the top of each makefile",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 29,
        "duration_minutes": 42.68,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Karen",
          "Madelaine",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:24:58.696100",
          "text": "<@Julia> at the moment in frog, to create the website, I do a `raco frog -b` which puts everything in a `site` subfolder but then I need to manually copy in the css, img and js folders so I can sync it to the destination. Is there a way to specify `assets` to have automatically copied to the site folder?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:28:24.697400",
          "text": "<@Shavon> Can you just locate the css / img / js in the `site` subfolder in the first place?\n(`raco frog --clean` doesn't `rm *` it cleans only files it produced)"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:33:13.699500",
          "text": "but those are not in the site subfolder."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:33:35.700000",
          "text": "I mean, for my own frog blog, I have the source and output all mixed in one tree which effectively gets `bitblt`ed to GitHub Pages.\n<https://github.com/greghendershott/greghendershott.github.com>\nIncluding the `_src` tree.\nIt happens that GitHub Pages doesn't serve stuff under `_src`, so e.g. <https://www.greghendershott.com/_src/About.md> doesn't show you the source."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:33:52.700500",
          "text": "But even if it showed the source markdown I'm like ¯\\_(ツ)_/¯"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:34:47.702000",
          "text": "So at other people's request frog has options to build to some other dir.\nBut I never use it.\nI am supremely bored by non-trivial deployments of anything. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:35:19.702800",
          "text": "Would you accept a PR to add assets to the target folder?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:37:17.703800",
          "text": "I guess so but I'm still confused, can't you simply have the assets under `site/` where you want them to be, and you run frog and it \"fills in\" the output HTML etc alongside it?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:38:08.704600",
          "text": "but site doesn't actually exist. I could of course create it before hand, but I generally just point to a temp dir for frog to generate the site."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:39:14.706000",
          "text": "I at the moment have a makefile that does that: create temp dir, copy css, js, img and then run `raco frog -b` but it would be cooler if I could ditch the makefile and instead have in `frog.rkt` something like: `(assets (list \"css/\" \"img/\" \"js/\"))` or something of the sort."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:40:25.706500",
          "text": "OK well if it's a simple change I'm open to a PR."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:40:43.707100",
          "text": "ok, will give it a go. thanks."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:41:11.707700",
          "text": "I guess my reluctance is a feeling that, in hindsight, Frog should probably be exploded into pieces that can be driven by a makefile or other script, and then people can do all sorts of flows."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:41:45.708300",
          "text": "A lot of frog is what I call \"path math\", plus an application of Greenspun's rule to makefiles. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:42:56.709200",
          "text": "really? i would think going on a path to ditch makefiles would be better. :slightly_smiling_face: anyhow, your call."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:43:16.709600",
          "text": "But that's just my reluctance, hindsight. The horse is well out of the barn, so some more PRs are inevitable. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:45:47.711000",
          "text": "lets turn this frog into bullfrog..."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:46:19.712000",
          "text": "(i am now left wondering if the bullfrog is indeed as large as it sounds...)"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T15:46:33.712200",
          "text": ":confused:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:47:52.713300",
          "text": "One way to put it: I wish Frog, instead of an application and a \"framework\", were more just a set of libraries."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:48:12.714000",
          "text": "Whether you drive it with a makefile, or your own little Racket program, or shell script, whatever."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-02-07T15:49:04.715400",
          "text": "Tangentially, have either of you used the Racket `make` module? (<https://docs.racket-lang.org/make/>) I haven't really tried it yet, but I do run into some situations where I want to bridge the gap between `raco setup`'s notion dependency tracking with external things that lend themselves more to makefiles, like rebuilding various static files."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:49:04.715500",
          "text": "The main value Frog has, as an app, is any \"just-works\" element.\nBut once people want it to work unique ways, it kind of falls down fast, and starts to go down the configurability slippery slope."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-07T15:50:15.716500",
          "text": "<@Madelaine> I haven't looked it for awhile. I thought of it recently wrt Racket projects working on Windows, too. But I haven't done much with the thought, yet."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T16:04:18.717000",
          "text": "<@Julia> for what it's worth, I really like how frog works. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T16:05:22.718100",
          "text": "<@Madelaine> that's a pretty old module. I haven't looked at it in a decade but I have used it back in the plt scheme time."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T16:06:17.719000",
          "text": "but since i haven't looked at it since, it might have been refactored since."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-07T16:07:02.720900",
          "text": "geee... what have i written there. time to bed."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-07T16:07:39.721900",
          "text": "I wish the racket `make` thing included a language so I could easily port regular makefiles to racket ones just by adding `#lang make` to the top of each makefile"
        }
      ]
    },
    {
      "conversation_id": "97",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: Never mind: I was pasting the package's name, and it turns out I'd pasted some invisible leading whitespace. Though maybe the site should use [CODE] and/or give a more descriptive error message?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-02-07T16:44:40.722100",
          "text": "Never mind: I was pasting the package's name, and it turns out I'd pasted some invisible leading whitespace. Though maybe the site should use `string-trim` and/or give a more descriptive error message?"
        }
      ]
    },
    {
      "conversation_id": "98",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: Looking at [CODE] and we have [CODE] but nothing for [CODE] - would it be possible to craft something similar to [CODE] ?\nTomas: Looking at <[URL]\nPriscila: Had to look up PATCH. <[URL]\nTomas: We use it in our APIs at work pretty regularly\nPriscila: From 2010 so my guess is that net/url is older.\nPriscila: That is, it has not been left out on purpose.\nTomas: seems like in _theory_ i could pass the method to <[URL]\nPriscila: On the other hand nobody wanted it enough to make a pull request.\nTomas: oh yeah i didn’t think it was on purpose\nTomas: Okay, will work up a PR\nPriscila: It would be natural to include it.\nJulia: Tomas Priscila I think when Boris added the [CODE]net/url` was just for backward compatibility.\nJulia: <[URL]\nJulia: Having said that, for quick one-off things I still reach for xxx-pure-port on autopilot. It wouldn't be horrible to round it out with a PATCH method, if you wanted to do that work.\nPriscila: Good point.\nJulia: `net/[URL] supports things like issuing multiple requests over one connection, with HTTP/1.1.\nJulia: I would say Racket needs an HTTP/2 story, but, (a) I'm not sure it really does and (b) HTTP/3 is already on the horizon. ¯\\_(ツ)_/¯",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 17,
        "duration_minutes": 98.67,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Priscila",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T15:58:42.724300",
          "text": "Looking at `net/url` and we have `get|head|delete|options|post|put-impure-port` but nothing for `PATCH` - would it be possible to craft something similar to  `patch-pure-port` ?"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T16:02:08.724500",
          "text": "Looking at <https://github.com/racket/racket/blob/master/racket/collects/net/url.rkt#L402>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-08T16:03:37.724900",
          "text": "Had to look up PATCH. <https://en.wikipedia.org/wiki/Patch_verb>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T16:03:48.725300",
          "text": "We use it in our APIs at work pretty regularly"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-08T16:04:07.725800",
          "text": "From 2010 so my guess is that net/url is older."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-08T16:04:25.726400",
          "text": "That is, it has not been left out on purpose."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T16:04:29.726700",
          "text": "seems like in _theory_ i could pass the method to <https://github.com/racket/racket/blob/master/racket/collects/net/url.rkt#L429>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-08T16:04:50.727500",
          "text": "On the other hand nobody wanted it enough to make a pull request."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T16:04:55.727800",
          "text": "oh yeah i didn’t think it was on purpose"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T16:05:00.728100",
          "text": "Okay, will work up a PR"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-08T16:05:01.728200",
          "text": "It would be natural to include it."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-08T17:34:05.730000",
          "text": "<@Tomas> <@Priscila> I think when <@Boris> added the `net/http-client` module -- which supports supplying any method as bytes -- he hoped that would be the preferred library going forward and `net/url` was just for backward compatibility."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-08T17:34:07.730200",
          "text": "<https://docs.racket-lang.org/net/http-client.html>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-08T17:35:06.731300",
          "text": "Having said that, for quick one-off things I still reach for xxx-pure-port on autopilot. It wouldn't be horrible to round it out with a PATCH method, if you wanted to do that work."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-08T17:35:18.731500",
          "text": "Good point."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-08T17:36:33.732300",
          "text": "`net/http-client` supports things like issuing multiple requests over one connection, with HTTP/1.1."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-08T17:37:22.732900",
          "text": "I would say Racket needs an HTTP/2 story, but, (a) I'm not sure it really does and (b) HTTP/3 is already on the horizon. ¯\\_(ツ)_/¯"
        }
      ]
    },
    {
      "conversation_id": "99",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: Ah I guess I'm never sure which is the preferred lib to use\nTomas: Do the methods in `[URL] handle redirects?\nTomas: One of the reasons I fall back on [CODE] is due to [CODE] redirects which I can't seem to figure out how to handle with `[URL]\nTomas: or do I need to do that manually?\nJulia: Oh that's a good question. I don't know.\nTomas: looks like I need to handle it based on status/headers\nTomas: which is pretty straightforward\nTomas: super janky demo [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 39.97,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T18:11:51.733300",
          "text": "Ah I guess I'm never sure which is the preferred lib to use"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T18:12:58.733600",
          "text": "Do the methods in `http-client` handle redirects?"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T18:33:53.734300",
          "text": "One of the reasons I fall back on `net/url` is due to `302` redirects which I can't seem to figure out how to handle with `http-client`"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T18:36:07.734500",
          "text": "or do I need to do that manually?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-08T18:41:54.735000",
          "text": "Oh that's a good question. I don't know."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T18:45:20.735300",
          "text": "looks like I need to handle it based on status/headers"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T18:45:30.735600",
          "text": "which is pretty straightforward"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-08T18:51:49.735900",
          "text": "super janky demo\n\n```\n#lang racket/base\n\n(require json\n         net/head\n         net/http-client\n         racket/port\n         racket/string)\n\n(define (parse-headers headers)\n  (for/hash ([header (map (λ (h)\n                            (string-split (bytes-&gt;string/utf-8 h) \": \"))\n                          headers)])\n    (values (car header) (cadr header))))\n\n(define (get uri)\n  (define-values (status headers body)\n    (http-sendrecv \"<http://httpbin.org|httpbin.org>\" uri #:method #\"GET\"))\n\n  (define header-map (parse-headers headers))\n\n  (println status)\n  (displayln header-map)\n  (println (port-&gt;string body))\n\n  (when (equal? status #\"HTTP/1.1 302 FOUND\")\n    (get (hash-ref header-map \"Location\"))))\n\n(get \"/absolute-redirect/4\")\n```"
        }
      ]
    },
    {
      "conversation_id": "100",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: So apologies if this is a silly question, but I’m trying to give some students of mine a “typical” #lang written in Racket. I’d like a language that is somewhat nontrivial but not as big as typed racket. Any tips on good #langs to give them? I found an EOPL language by David Van Horn that looks good, maybe that: <[URL] (The downside here is--I think--that it’s using some nonstandard parser? I am not sure I get what’s going on there)\nDeneen: this will also be a learning experience for me. I’ve only written very small #langs that build on top of #lang s-exp..\nDeneen: whoa! This is perfect.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 323.8,
        "contains_question": true,
        "action_keywords": [
          "build",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-02-08T20:57:15.737400",
          "text": "So apologies if this is a silly question, but I’m trying to give some students of mine a “typical” #lang written in Racket. I’d like a language that is somewhat nontrivial but not as big as typed racket. Any tips on good #langs to give them? I found an EOPL language by David Van Horn that looks good, maybe that: <https://github.com/racket/eopl> (The downside here is--I think--that it’s using some nonstandard parser? I am not sure I get what’s going on there)"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-08T20:57:48.738100",
          "text": "this will also be a learning experience for me. I’ve only written very small #langs that build on top of #lang s-exp.."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-09T02:21:03.738400",
          "text": "whoa! This is perfect."
        }
      ]
    },
    {
      "conversation_id": "101",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: There’s also <[URL] I glanced at it and it seems to use the standard parser.\nMai: Is there a boolean kwarg library? Pretty much overriding [CODE] to expand [CODE] to [CODE].\nKaren: HTTP/2 is such a _massive_ perf improvement over 1.1 that I think it's definitely needed. Especially since HTTP/3 won't be more ubiquitous than 2 for at least a decade.\nKaren: Using 2 makes \"request batching\" patterns in web APIs basically obsolete",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 91.68,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-02-09T02:13:46.738200",
          "text": "There’s also <https://docs.racket-lang.org/plai-typed/index.html>. I glanced at it and it seems to use the standard parser."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-09T03:20:48.740000",
          "text": "Is there a boolean kwarg library? Pretty much overriding `#%app` to expand `(f a #:b c #:d #:e)` to `(f a #:b c #:d #t #:e #t)`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-09T03:44:34.740200",
          "text": "HTTP/2 is such a _massive_ perf improvement over 1.1 that I think it's definitely needed. Especially since HTTP/3 won't be more ubiquitous than 2 for at least a decade."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-09T03:45:27.740400",
          "text": "Using 2 makes \"request batching\" patterns in web APIs basically obsolete"
        }
      ]
    },
    {
      "conversation_id": "102",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marya: another (simpler?) option is to define a new [CODE] (say) form that does the translation for all new functions defined this way\nMarya: basically you first define the wrapper as a procedure using [CODE] and then you define the form to wrap all this in a define form\nAzucena: Marya But that still wouldn't allow clients of the function to call it the way Mai shows, or am I missing something? Are you instead thinking about easing the definition of functions with keyword arguments that default to [CODE]?\nMarya: you can use [CODE] to do pretty much what you want with arguments\nMarya: so the defined f would be a form rather than a function/procedure, that's the drawback (you can't use apply as easily)\nMai: Right. In fact I did exactly what Marya suggests before. The problem is that [CODE] is now a macro, so it couldn’t be used as a higher order function (like [CODE] or [CODE]), though I think there’s actually a way to make it work?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 603.43,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Azucena",
          "Mai",
          "Marya"
        ]
      },
      "timeline": [
        {
          "user": "Marya",
          "timestamp": "2019-02-09T06:37:32.741100",
          "text": "another (simpler?) option is to define a new `define/kw-compact` (say) form that does the translation for all new functions defined this way"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-09T06:39:54.741300",
          "text": "basically you first define the wrapper as a procedure using `apply` and then you define the form to wrap all this in a define form"
        },
        {
          "user": "Azucena",
          "timestamp": "2019-02-09T14:27:40.742000",
          "text": "<@Marya> But that still wouldn't allow clients of the function to call it the way <@Mai> shows, or am I missing something? Are you instead thinking about easing the definition of functions with keyword arguments that default to `#false`?"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-09T14:42:45.742200",
          "text": "you can use `syntax-parser` to do pretty much what you want with arguments"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-09T14:43:13.742400",
          "text": "so the defined f would be a form rather than a function/procedure, that's the drawback (you can't use apply as easily)"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-09T16:40:58.742700",
          "text": "Right. In fact I did exactly what <@Marya> suggests before. The problem is that `f` is now a macro, so it couldn’t be used as a higher order function (like `(apply f ...)` or `(map f ...)`), though I think there’s actually a way to make it work?"
        }
      ]
    },
    {
      "conversation_id": "103",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: See also this Clarinda article, which shows nicely the increasing steps in [CODE] sophistication <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-02-09T14:04:20.741600",
          "text": "See also this <@Clarinda> article, which shows nicely the increasing steps in `#lang` sophistication  <https://queue.acm.org/detail.cfm?id=2068896>"
        }
      ]
    },
    {
      "conversation_id": "104",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: But it also depends on whether we want this to work with functions that we don’t define ourselves (which would require a change to [CODE])",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-02-09T16:42:46.742900",
          "text": "But it also depends on whether we want this to work with functions that we don’t define ourselves (which would require a change to `#%app`)"
        }
      ]
    },
    {
      "conversation_id": "105",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lavette: For getting started, I would also recommend some of the languages from Lillian's <[URL]\nDeneen: So they’ve read that. They’re looking for something a little bigger than that\nDeneen: There don’t seem to be as many examples between “small” langs and “huge” langs, but the plai typed one looks ideal for this, combined with the article",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 6.75,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Lavette"
        ]
      },
      "timeline": [
        {
          "user": "Lavette",
          "timestamp": "2019-02-09T17:24:53.743200",
          "text": "For getting started, I would also recommend some of the languages from <@Lillian>'s <https://beautifulracket.com>"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-09T17:31:14.743400",
          "text": "So they’ve read that. They’re looking for something a little bigger than that"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-09T17:31:38.743600",
          "text": "There don’t seem to be as many examples between “small” langs and “huge” langs, but the plai typed one looks ideal for this, combined with the article"
        }
      ]
    },
    {
      "conversation_id": "106",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terry: How about [CODE]? <[URL]\nTerry: Oops my apologies I missed the replies\nPriscila: <[URL]\nPriscila: ?!?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 816.65,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Terry"
        ]
      },
      "timeline": [
        {
          "user": "Terry",
          "timestamp": "2019-02-10T16:20:33.744600",
          "text": "How about `#lang lindenmayer`?\n\n<http://docs.racket-lang.org/lindenmayer/A_Quick_Introduction_to_L-Systems.html>"
        },
        {
          "user": "Terry",
          "timestamp": "2019-02-10T16:24:49.745300",
          "text": "Oops my apologies I missed the replies "
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T05:57:09.000200",
          "text": "<https://news.ycombinator.com/item?id=19130449>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T05:57:13.000400",
          "text": "?!?"
        }
      ]
    },
    {
      "conversation_id": "107",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Zada: hello all, I would like to use the [CODE] and [CODE] literals in my language, therefore I do not want the reader to read them as pairs and fail when they are \"mismatched\". Is there a switch somewhere to help with this? do I need to make a change to the readtable ? thanks.\nKristeen: Zada do you want them to be delimiters? or to work like normal letters? or something else?\nElin: <[URL]\nZada: I am using them as [CODE] in some expressions\nZada: Elin thanks, I see you are making changes to the readtable. I will try to emulate this behavior\nElin: Or I could expose the [CODE] function from it, could you use that?\nZada: well, it is only a couple of lines of code in my #lang, I would rather not have a dependency for it (if that is what you were suggesting?) I will link to your repo in the comments of course.\nZada: cool, I got it working. you can use [CODE] and [CODE] in the lang, and in the expander layer I quote them out using [CODE] and it is working as expected. thanks for the quick response !\nElin: I’m curious, what #lang are you working on?\nSusana: prolog uses [CODE]\nSusana: but not [CODE], I think\nZada: Elin my last one was this, a racket powered 6502 assembler. <[URL] the one I am working on now is a source-to-source Verilog compiler for programming FPGAs. it's basically Verilog with a bunch of nicer constructs, compiler help with things like exhaustive checking on enums, data truncation warnings, and of course, racket macros.\nZada: hopefully do something with clock signals as well",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 32.38,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Kristeen",
          "Susana",
          "Zada"
        ]
      },
      "timeline": [
        {
          "user": "Zada",
          "timestamp": "2019-02-11T11:37:27.003400",
          "text": "hello all,  I would like to use the `|` and `||` literals in my language, therefore I do not want the reader to read them as pairs and fail when they are \"mismatched\".   Is there a switch somewhere to help with this?  do I need to make a change to the readtable ?  thanks."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-11T11:38:51.003900",
          "text": "<@Zada> do you want them to be delimiters? or to work like normal letters? or something else?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-11T11:39:07.004200",
          "text": "<https://docs.racket-lang.org/no-vert-bar-lang/index.html?q=no-vert-bar#%28part.__lang_no-vert-bar%29>"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T11:39:28.004500",
          "text": "I am using them as `datum-literals`  in some expressions"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T11:41:41.005200",
          "text": "<@Elin> thanks, I see you are making changes to the readtable.  I will try to emulate this behavior"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-11T11:43:37.005800",
          "text": "Or I could expose the `make-no-vert-bar-readtable` function from it, could you use that?"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T11:46:43.007600",
          "text": "well, it is only a couple of lines of code in my #lang, I would rather not have a dependency for it (if that is what you were suggesting?)  I will link to your repo in the comments of course."
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T12:01:22.008700",
          "text": "cool, I got it working.   you can use `||` and `|` in the lang, and in the expander layer I quote them out using `\\|\\|` and it is working as expected. thanks for the quick response !"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-11T12:03:20.009100",
          "text": "I’m curious, what #lang are you working on?"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-11T12:05:51.009500",
          "text": "prolog uses `|`"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-11T12:06:11.009800",
          "text": "but not `||`, I think"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T12:09:41.011900",
          "text": "<@Elin> my last one was this, a racket powered 6502 assembler.  <https://github.com/pezipink/asi64>    the one I am working on now is a source-to-source Verilog compiler for programming FPGAs.  it's basically Verilog with a bunch of nicer constructs, compiler help with things like exhaustive checking on enums, data truncation warnings,  and of course, racket macros."
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T12:09:50.012400",
          "text": "hopefully do something with clock signals as well"
        }
      ]
    },
    {
      "conversation_id": "108",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Zada Cool! <[URL]\nZada: Priscila thanks! check out the game I am writing here <[URL] you can do all kinds of cool stuff now you have all of racket in the assembler. it has a SID file loader, sprite loaders using the output format of some sprite tool, a metadata tile system generator, a state machine generator, even an expression compiler that lets you write nested if / then / else and compiles switch statements into lookup tables for you. sky's the limit! it is much more fun to write 6502 with all that power behind you :wink:\nPriscila: This looks great.\nPriscila: Pretty easy to make, sine tables:\nPriscila: :cosine (data (for/list ([x (in-range 0 365 5)]) (bitwise-and (exact-round (* (cos (deg-&gt;rad x)) 63)) #xFF)))\nZada: it is basically the most powerful assembler ever, not really through my own doing so much :slightly_smiling_face:\nPriscila: I am struggling to remember which assembler I used back in the day.\nZada: be sure to let me know if you build anything with it! I would love to see it\nZada: it can count cycles for you as well, if you are into demo programming\nPriscila: Nifty.\nZada: I am hoping to extend it to the 65816 and SNES programming later this year. always wanted to program the SNES\nPriscila: Never tried programming a SNES.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 12,
        "duration_minutes": 20.2,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Zada"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T13:11:30.012800",
          "text": "<@Zada> Cool!  <https://docs.racket-lang.org/asi64/index.html>"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T13:21:45.017400",
          "text": "<@Priscila> thanks! check out the game I am writing here <https://github.com/ChipmunkHand/TriangleCat/tree/master/src> you can do all kinds of cool stuff now you have all of racket in the assembler.  it has a SID file loader,  sprite loaders using the output format of some sprite tool, a metadata tile system generator,  a state machine generator,   even an expression compiler that lets you write nested  if / then / else and compiles switch statements into lookup tables for you.  sky's the limit! it is much more fun to write 6502 with all that power behind you :wink:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T13:25:33.017600",
          "text": "This looks great."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T13:25:59.018200",
          "text": "Pretty easy to make, sine tables:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T13:26:00.018400",
          "text": ":cosine\n(data\n(for/list ([x (in-range 0 365 5)])\n  (bitwise-and (exact-round (* (cos (deg-&gt;rad x)) 63)) #xFF)))"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T13:26:02.018600",
          "text": "it is basically the most powerful assembler ever, not really through my own doing so much :slightly_smiling_face:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T13:26:57.019100",
          "text": "I am struggling to remember which assembler I used back in the day."
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T13:28:31.019400",
          "text": "be sure to let me know if you build anything with it! I would love to see it"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T13:29:06.019700",
          "text": "it can count cycles for you as well, if you are into demo programming"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T13:29:13.019900",
          "text": "Nifty."
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T13:30:25.020700",
          "text": "I am hoping to extend it to the 65816 and SNES programming later this year.  always wanted to program the SNES"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-11T13:31:42.021000",
          "text": "Never tried programming a SNES."
        }
      ]
    },
    {
      "conversation_id": "109",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: This reminds me of this thing called “bedrock”, which was a Coq project where they were using “macros” to generate verified C code.\nDeneen: Of course the macros were really Coq syntax that then compiled down using some complicated thing to theorems about a powerful separation logic, but the idea of like “macro assembly is C” was interesting to me.\nKristeen: Deneen I think they're still doing that\nDeneen: Yes, I think they are still doing this too, but I haven’t followed it at all. But it’s definitely a different thing than actual macros iirc\nZada: Deneen I find the notion of building languages as macros over an assembler quite fascinating. I have used this style in many of my projects now, it is great to have complete freedom to build up as many or little higher level abstractions as you like, seamlessly\nZada: I have also seen the Coq thing, theorem provers are not really my cup of tea, though.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 20.02,
        "contains_question": false,
        "action_keywords": [
          "action",
          "build",
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Kristeen",
          "Zada"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-02-11T15:38:52.022600",
          "text": "This reminds me of this thing called “bedrock”, which was a Coq project where they were using “macros” to generate verified C code."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-11T15:39:30.023400",
          "text": "Of course the macros were really Coq syntax that then compiled down using some complicated thing to theorems about a powerful separation logic, but the idea of like “macro assembly is C” was interesting to me."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-11T15:45:33.023800",
          "text": "<@Deneen> I think they're still doing that"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-11T15:45:53.024300",
          "text": "Yes, I think they are still doing this too, but I haven’t followed it at all. But it’s definitely a different thing than actual macros iirc"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T15:58:06.026000",
          "text": "<@Deneen> I find the notion of building languages as macros over an assembler quite fascinating.    I have used this style in many of my projects now, it is great to have complete freedom to build up as many or little higher level abstractions as you like, seamlessly"
        },
        {
          "user": "Zada",
          "timestamp": "2019-02-11T15:58:53.026400",
          "text": "I have also seen the Coq thing,  theorem provers are not really my cup of tea, though."
        }
      ]
    },
    {
      "conversation_id": "110",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Is there some fundamental reason I can't add #:methods for generics in prefab structs? I gave it a little thought and since those methods are a per-type thing, not a per-instance thing, they shouldn't interfere with the read/write-ability of prefab structs.\nKristeen: Caprice prefab structs are defined by their printed representation, and so anything that doesn't fit in that isn't allowed\nCaprice: Oh\nKristeen: for example, [CODE] works\nKristeen: and the resulting prefab struct can't know about the methods you added to a [CODE] declaration\nCaprice: Ohhh\nCaprice: It isn't even checked\nKristeen: especially since the struct declaration can come _after_ you do that [CODE]\nCaprice: I thought if I defined struct x and gave it one field then that would fail but it doesn't\nCaprice: Thanks\nKristeen: [CODE_BLOCK]\nCaprice: hmm but see, similar to how that struct declaration creates accessors for the struct, can it not also create methods for it?\nCaprice: (All of a sudden my light-bulb moment's gone and I'm thinking \"but wait...\")\nKristeen: the way methods work is that they access some data on the struct type of the value provided as the argument\nKristeen: and then get the method implementation out of that data\nKristeen: that can't work here, because the struct type is created on line 1, but the methods wouldn't be declared until later\nKristeen: you could have a different implementation of methods for prefab structs but that would be very different and more like how fallbacks for methods work\nCaprice: Hmmm I kiiind of see, I suppose. I dunno. So it's just really difficult to do, I guess.\nCaprice: Actually yes, teh fallback thing was how I imagined it would work\nCaprice: thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 20,
        "duration_minutes": 9.47,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:19:48.028100",
          "text": "Is there some fundamental reason I can't add #:methods for generics in prefab structs? I gave it a little thought and since those methods are a per-type thing, not a per-instance thing, they shouldn't interfere with the read/write-ability of prefab structs."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:21:21.029600",
          "text": "<@Caprice> prefab structs are defined by their printed representation, and so anything that doesn't fit in that isn't allowed"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:21:33.029900",
          "text": "Oh"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:21:56.030800",
          "text": "for example, `(read (open-input-string \"#s(x 1 2)\"))` works"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:22:19.031300",
          "text": "and the resulting prefab struct can't know about the methods you added to a `struct` declaration"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:22:37.031800",
          "text": "Ohhh"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:22:41.032100",
          "text": "It isn't even checked"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:22:47.032500",
          "text": "especially since the struct declaration can come _after_ you do that `read`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:22:56.032800",
          "text": "I thought if I defined struct x and gave it one field then that would fail but it doesn't"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:23:02.033300",
          "text": "Thanks"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:23:34.033500",
          "text": "```\n&gt; (define v (read (open-input-string \"#s(x 1 2)\")))\n&gt; (struct x (y z) #:prefab)\n&gt; (x-y v)\n1\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:24:20.034000",
          "text": "hmm but see, similar to how that struct declaration creates accessors for the struct, can it not also create methods for it?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:24:51.034500",
          "text": "(All of a sudden my light-bulb moment's gone and I'm thinking \"but wait...\")"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:26:26.035100",
          "text": "the way methods work is that they access some data on the struct type of the value provided as the argument"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:26:52.035600",
          "text": "and then get the method implementation out of that data"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:27:13.036100",
          "text": "that can't work here, because the struct type is created on line 1, but the methods wouldn't be declared until later"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T09:27:49.037000",
          "text": "you could have a different implementation of methods for prefab structs but that would be very different and more like how fallbacks for methods work"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:28:21.037800",
          "text": "Hmmm I kiiind of see, I suppose. I dunno. So it's just really difficult to do, I guess."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:29:04.038200",
          "text": "Actually yes, teh fallback thing was how I imagined it would work"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T09:29:16.038700",
          "text": "thanks"
        }
      ]
    },
    {
      "conversation_id": "111",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: Does DrRacket provides any kind of quick traversing tool for scribble documents? Feel my eyes getting tired when I try to find a certain section : (\nLoise: Can anyone point me to individual videos of the [CODE] sessions? I can only seem to find \"RacketCon 2018 Morning\" and \"RacketCon 2018 Afternoon\". The video and audio quality of both leaves, well, everything to be desired. No offense intended.\nPriscila: Loma Well, you can search for the name of a section\nPriscila: Loise I don't think they are out yet. Marcelina ?\nLoma: Priscila Sure I can. But this requires you to type the name of sections all the time! Now I just try to put my sections into different files, just like the what’s being introduced in the tutorial --- that may sounds like a acceptable compromise.\nPriscila: I don't think there is a bookmarking mechanism.\nLoma: Maybe there will be plugin serve this in the future…\nMarya: Loma: There's some basic bookmarking in quickscript-extra, it works for slideshow and custom titles, but not yet for scribble. That should be very easy to adapt though, it's just a regexp to change.\nMarya: here: <[URL]\nMarya: The plugin is useful but a bit lame\nMarya: (if you don't have quickscript-extra but you have the lastest version of DrRacket which includes quickscript (not extra), you can just create a new script and copy/paste the file pointed at on github, then modify it)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 11,
        "duration_minutes": 63.57,
        "contains_question": true,
        "action_keywords": [
          "create",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Loise",
          "Loma",
          "Marya",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-02-12T12:17:04.040200",
          "text": "Does DrRacket provides any kind of quick traversing tool for scribble documents? Feel my eyes getting tired when I try to find a certain section : ("
        },
        {
          "user": "Loise",
          "timestamp": "2019-02-12T12:40:03.047500",
          "text": "Can anyone point me to individual videos of the `(eighth RacketCon)` sessions? I can only seem to find \"RacketCon 2018 Morning\" and \"RacketCon 2018 Afternoon\". The video and audio quality of both leaves, well, everything to be desired. No offense intended."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-12T12:56:39.048600",
          "text": "<@Loma>  Well, you can search for the name of a section"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-12T12:57:06.049100",
          "text": "<@Loise> I don't think they are out yet.  <@Marcelina> ?"
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-12T13:00:15.051400",
          "text": "<@Priscila> Sure I can. But this requires you to type the name of sections all the time!\nNow I just try to put my sections into different files, just like the what’s being introduced in the tutorial --- that may sounds like a acceptable compromise."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-12T13:01:33.051800",
          "text": "I don't think there is a bookmarking mechanism."
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-12T13:02:40.052200",
          "text": "Maybe there will be plugin serve this in the future…"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-12T13:16:57.053500",
          "text": "<@Loma>: There's some basic bookmarking in quickscript-extra, it works for slideshow and custom titles, but not yet for scribble. That should be very easy to adapt though, it's just a regexp to change."
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-12T13:17:28.053700",
          "text": "here: <https://github.com/Metaxal/quickscript-extra/blob/master/scripts/bookmarks.rkt#L84>"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-12T13:17:53.054100",
          "text": "The plugin is useful but a bit lame"
        },
        {
          "user": "Marya",
          "timestamp": "2019-02-12T13:20:38.055200",
          "text": "(if you don't have quickscript-extra but you have the lastest version of DrRacket which includes quickscript (not extra), you can just create a new script and copy/paste the file pointed at on github, then modify it)"
        }
      ]
    },
    {
      "conversation_id": "112",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Is there a way to get Typed Racket to do the type inference needed in continuation-passing style? When I try to compile code that calls the function below, the type-checker rejects the continuation for not returning type “a”.\nPenni: I tried wrapping the calling code with [CODE], but that didn’t work.\nKristeen: can you show the calling code?\nPenni: Sure, here it is.\nPenni: Here’s the relevant part of the error message.\nKristeen: ah, ok. you can't abstract over multiple values with a single type variable that way\nPenni: Oh, is the problem that the caller wants to return [CODE]?\nKristeen: yes\nPenni: Is there a correct way to type [CODE]?\nShavon: Julia are you around? I am having a small problem with frog.\nPenni: Actually, this whole bit of code seems convoluted to me. I had another version written with [CODE] but it was also hard to follow. The complexity comes from its updating a collection and returning a new item at the same time—hence multiple values. I do this a lot in my code, though this is the only place with CPS. Is there any common idiom for doing this kind of thing?\nKristeen: You could return two values with [CODE]\nKristeen: does the code always return two values? if so, you can just have two type variables.\nKristeen: you can also make the code you originally wrote work with a bit more type complexity\nPenni: I was hoping to avoid cons for speed and simplicity: no memory allocation or destructuring. Perhaps not too important.\nPenni: How could I properly type the existing code? I’ll probably learn something valuable from that.\nPenni: About two type variables: I’m thinking that the function that’s passed the continuation shouldn’t care what the continuation returns. “Whatever k returns, I return.” So, it shouldn’t care whether the continuation returns one or multiple values. But, in this situation, I do know. [CODE] is not provided externally.\nKristeen: [CODE] makes the original program type check\nPenni: Thanks! I just did the same thing on the other function that gets called that way, and now the whole file type-checks. That definitely shows how to do it in general: I hadn’t used the [CODE] before.\nPenni: Hmm, under typed/rackunit, [CODE] doesn’t report the line number of the failing test (unlike untyped rackunit). Is there an easy way to get it to show the line number?\nPenni: In typed/racket, is it possible to create a singleton type for a struct?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 21,
        "duration_minutes": 464.2,
        "contains_question": true,
        "action_keywords": [
          "create",
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Penni",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-02-12T14:41:53.056800",
          "text": "Is there a way to get Typed Racket to do the type inference needed in continuation-passing style? When I try to compile code that calls the function below, the type-checker rejects the continuation for not returning type “a”."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T14:43:48.057500",
          "text": "I tried wrapping the calling code with `inst`, but that didn’t work."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T14:44:42.057800",
          "text": "can you show the calling code?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T14:47:44.058000",
          "text": "Sure, here it is."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T14:48:50.058300",
          "text": "Here’s the relevant part of the error message."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T14:57:48.058900",
          "text": "ah, ok. you can't abstract over multiple values with a single type variable that way"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T14:58:48.059500",
          "text": "Oh, is the problem that the caller wants to return `(Values ...)`?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T15:02:23.059700",
          "text": "yes"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T15:03:56.060300",
          "text": "Is there a correct way to type `bump-base`?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-12T15:06:04.062500",
          "text": "<@Julia> are you around? I am having a small problem with frog."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T15:06:45.063200",
          "text": "Actually, this whole bit of code seems convoluted to me. I had another version written with `call-with-values` but it was also hard to follow. The complexity comes from its updating a collection and returning a new item at the same time—hence multiple values. I do this a lot in my code, though this is the only place with CPS. Is there any common idiom for doing this kind of thing?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T15:08:17.063500",
          "text": "You could return two values with `cons`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T15:08:58.064000",
          "text": "does the code always return two values? if so, you can just have two type variables."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T15:09:15.064400",
          "text": "you can also make the code you originally wrote work with a bit more type complexity"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T15:12:52.065400",
          "text": "I was hoping to avoid cons for speed and simplicity: no memory allocation or destructuring. Perhaps not too important."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T15:13:17.065900",
          "text": "How could I properly type the existing code? I’ll probably learn something valuable from that."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T15:14:47.067400",
          "text": "About two type variables: I’m thinking that the function that’s passed the continuation shouldn’t care what the continuation returns. “Whatever k returns, I return.” So, it shouldn’t care whether the continuation returns one or multiple values. But, in this situation, I do know. `bump-base` is not provided externally."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-12T15:34:23.067800",
          "text": "`(: bump-base (All (a ...) ((Hashof Base Suffix) Base ((Hashof Base Suffix) Id -&gt; (Values a ...)) -&gt; (Values a ...))))` makes the original program type check"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T15:46:29.068900",
          "text": "Thanks! I just did the same thing on the other function that gets called that way, and now the whole file type-checks. That definitely shows how to do it in general: I hadn’t used the `...` before."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T15:54:56.070000",
          "text": "Hmm, under typed/rackunit, `check-equal?` doesn’t report the line number of the failing test (unlike untyped rackunit). Is there an easy way to get it to show the line number?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-12T22:26:05.076400",
          "text": "In typed/racket, is it possible to create a singleton type for a struct?"
        }
      ]
    },
    {
      "conversation_id": "113",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terry: I can’t find individual videos. It’s a shame. YouTube RacketCon views outnumber RacketCon attendees 10 to 1. On the bright side it should be pretty easy to scrub through each session video to find the ones you want. Sadly, I can’t see a programme.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Terry"
        ]
      },
      "timeline": [
        {
          "user": "Terry",
          "timestamp": "2019-02-12T18:50:21.075600",
          "text": "I can’t find individual videos. It’s a shame.  YouTube RacketCon views outnumber RacketCon attendees 10 to 1. \nOn the bright side it should be pretty easy to scrub through each session video  to find the ones you want. Sadly, I can’t see a programme. "
        }
      ]
    },
    {
      "conversation_id": "114",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: What sort of singleton do you mean? Because a prefab struct is kind of like a singleton.\nCaprice: If you mean \"a struct that may only ever have one instance\" then I dunno\nCaprice: I guess one way to do it would be to make sure the module defining the struct doesn't export (\"provide\") the default constructor. Does typed/racket complicate that?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 148.73,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T23:28:50.077000",
          "text": "What sort of singleton do you mean? Because a prefab struct is kind of like a singleton."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-12T23:29:51.077500",
          "text": "If you mean \"a struct that may only ever have one instance\" then I dunno"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-13T01:57:34.079600",
          "text": "I guess one way to do it would be to make sure the module defining the struct doesn't export (\"provide\") the default constructor. Does typed/racket complicate that?"
        }
      ]
    },
    {
      "conversation_id": "115",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: (define (make-a-singleton) (struct singleton ()) (singleton)) (make-a-singleton)\nPriscila: This works fine - since structure definitions are \"generative\", which means that each new struct declaration declares a new structure type.\nPriscila: Oh - misread the question. \"Singleton type\" not the same as a \"singleton\".",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 1.33,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-13T09:34:11.080000",
          "text": "(define (make-a-singleton)\n  (struct singleton ())\n  (singleton))\n\n(make-a-singleton)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-13T09:34:45.080800",
          "text": "This works fine - since structure definitions are \"generative\", which means that each new struct declaration declares a new structure type."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-13T09:35:31.081300",
          "text": "Oh - misread the question. \"Singleton type\" not the same as a \"singleton\"."
        }
      ]
    },
    {
      "conversation_id": "116",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Don: macro expanding a struct--any thoughts on how to go about this? I went through the macro stepper and I can see it expands to say struct:foo, but I can’t seem to write a macro that does something with that\nKristeen: Don can you say more about what you're trying to do?\nDon: yep, building a lang and using structs to construct an abstract syntax tree so I can manipulate it and do things like type-checking and so forth, then I want to expand this when I’m done so it can be used as a #lang\nDon: previously I had just written a function that takes the ast and converts it into a giant s-exp that is passed to the expander after the reader takes a hold of it, but I was wondering if I can avoid that step and just expand it from the structs themselves, but maybe I’m not thinking about this right\nKristeen: I'm still unsure what you're trying to do with structs\nKristeen: what do you mean by \"macro expanding a struct\"?\nDon: Ah sure, say I have a few structs, one called binop and one called num, that hold the expected things, so when I’ve parsed an expression I end up with (binop ’+ (num 1) (num 2)) as my abstract syntax tree\nDon: I want to macro expand those structs into (+ 1 2) so they can be evaluated\nDon: normally I’d just have a function that matched on the struct types and turned it into an s-exp, like (’binop ’+ (’num 1) (’num 2)) and that’s easy to macro expand to what I want\nKristeen: ah, it sounds like you're wondering if there's something you can do so you just put the the structs directly in a syntax object and have the macro expander automatically convert them to other syntax\nKristeen: is that right?\nDon: yep!\nKristeen: ok, so in general you can't do that\nKristeen: there isn't a hook for \"macro expansion\"\nKristeen: so you need to write some sort of conversion from structs to syntax objects\nDon: hmmmm, I must be misunderstanding something. If I have (struct foo ()) and then do (datum-&gt;syntax #f `(,(foo))) I get a syntax object that has (#(struct:foo)) in it\nDon: ah well, I just thought that in the context of a #lang I had some control over how things were being expanded\nKristeen: you can certainly do that, but expanding that just produces the same thing\nKristeen: and evaluating it will produce that value\nKristeen: which sounds like it isn't what you want\nDon: Nope, sure isn’t. I was hoping to write a macro for struct:foo in this case, but it’s clear I have to just turn it into an s-exp so the macro expander will pick it up as expected (which I was doing anyways, I was just trying to make the whole process less error prone). Thanks for your help!\nMadelaine: Don You might be interested in looking at the implementation of the [CODE] library: <[URL] It extensively uses prefab structs for an AST representation at both compile-time and run-time, and the library basically interprets the AST at run-time to emit generated SQL strings. I don't think that's exactly what you had in mind, but the technique might be relevant, depending on exactly what you're ultimately doing.\nDon: Thanks Madelaine, I’ll take a look! To be honest, my first pass at a #lang just used a reader which emitted a call to an evaluate function on my AST and that totally worked (i.e., the AST was evaluated at run-time to execute the program). To learn macros I decided to convert that evaluate function into racket code with the expansion phase after the reader parses it (if what I’m saying makes sense). In any case, I’ll take a look, sounds interesting!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 23,
        "duration_minutes": 697.92,
        "contains_question": true,
        "action_keywords": [
          "build",
          "decide",
          "implement",
          "must",
          "need to",
          "will"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Don",
          "Kristeen",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Don",
          "timestamp": "2019-02-13T10:42:03.082600",
          "text": "macro expanding a struct--any thoughts on how to go about this? I went through the macro stepper and I can see it expands to say struct:foo, but I can’t seem to write a macro that does something with that"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:50:18.083100",
          "text": "<@Don> can you say more about what you're trying to do?"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T10:51:45.084400",
          "text": "yep, building a lang and using structs to construct an abstract syntax tree so I can manipulate it and do things like type-checking and so forth, then I want to expand this when I’m done so it can be used as a #lang"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T10:53:53.086300",
          "text": "previously I had just written a function that takes the ast and converts it into a giant s-exp that is passed to the expander after the reader takes a hold of it, but I was wondering if I can avoid that step and just expand it from the structs themselves, but maybe I’m not thinking about this right"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:54:53.086600",
          "text": "I'm still unsure what you're trying to do with structs"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:55:10.087000",
          "text": "what do you mean by \"macro expanding a struct\"?"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T10:56:10.088100",
          "text": "Ah sure, say I have a few structs, one called binop and one called num, that hold the expected things, so when I’ve parsed an expression I end up with (binop ’+ (num 1) (num 2)) as my abstract syntax tree"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T10:56:45.088700",
          "text": "I want to macro expand those structs into (+ 1 2) so they can be evaluated"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T10:57:47.089900",
          "text": "normally I’d just have a function that matched on the struct types and turned it into an s-exp, like (’binop ’+ (’num 1) (’num 2)) and that’s easy to macro expand to what I want"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:58:15.090500",
          "text": "ah, it sounds like you're wondering if there's something you can do so you just put the the structs directly in a syntax object and have the macro expander automatically convert them to other syntax"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:58:21.090700",
          "text": "is that right?"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T10:58:31.090900",
          "text": "yep!"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:58:40.091200",
          "text": "ok, so in general you can't do that"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:58:49.091500",
          "text": "there isn't a hook for \"macro expansion\""
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T10:59:30.091900",
          "text": "so you need to write some sort of conversion from structs to syntax objects"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T11:09:00.096000",
          "text": "hmmmm, I must be misunderstanding something. If I have (struct foo ()) and then do (datum-&gt;syntax #f `(,(foo))) I get a syntax object that has (#(struct:foo)) in it"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T11:11:44.098400",
          "text": "ah well, I just thought that in the context of a #lang I had some control over how things were being expanded"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T11:12:07.098800",
          "text": "you can certainly do that, but expanding that just produces the same thing"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T11:12:20.099200",
          "text": "and evaluating it will produce that value"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-13T11:12:34.099500",
          "text": "which sounds like it isn't what you want"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T11:14:18.100900",
          "text": "Nope, sure isn’t. I was hoping to write a macro for struct:foo in this case, but it’s clear I have to just turn it into an s-exp so the macro expander will pick it up as expected (which I was doing anyways, I was just trying to make the whole process less error prone). Thanks for your help!"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-02-13T21:46:44.109200",
          "text": "<@Don> You might be interested in looking at the implementation of the `sql` library: <https://github.com/rmculpepper/sql/> It extensively uses prefab structs for an AST representation at both compile-time and run-time, and the library basically interprets the AST at run-time to emit generated SQL strings. I don't think that's exactly what you had in mind, but the technique might be relevant, depending on exactly what you're ultimately doing."
        },
        {
          "user": "Don",
          "timestamp": "2019-02-13T22:19:58.112700",
          "text": "Thanks <@Madelaine>, I’ll take a look! To be honest, my first pass at a #lang just used a reader which emitted a call to an evaluate function on my AST and that totally worked (i.e., the AST was evaluated at run-time to execute the program). To learn macros I decided to convert that evaluate function into racket code with the expansion phase after the reader parses it (if what I’m saying makes sense). In any case, I’ll take a look, sounds interesting!"
        }
      ]
    },
    {
      "conversation_id": "117",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Caprice Priscila I'm not sure this is a good or useful idea, but the idea is to have a struct that contains a \"spec\" for the nodes and allowable edges in a graph, and a type [CODE] where [CODE] is such a struct. Then the functions that operate on the graph could also have [CODE] as a type parameter, maybe something like this: [CODE]\nCaprice: The web-server library that comes with racket doesn't seem to use the racket standard library's logging facilities. Is there any specific reason? As in, if I make my own log-and-dispatch-next dispatcher instead, any particular issues I should look out for?\nCaprice: I want to use racket's logging so that I can make the server's dispatch log be logging to a topic for which I may add multiple subscribers.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 704.1,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-02-13T14:44:43.104800",
          "text": "<@Caprice> <@Priscila> I'm not sure this is a good or useful idea, but the idea is to have a struct that contains a \"spec\" for the nodes and allowable edges in a graph, and a type `(Graph spec)` where `spec` is such a struct. Then the functions that operate on the graph could also have `spec` as a type parameter, maybe something like this:\n`(: add-edge (All (spec) (Graph spec) Port Port -&gt; (Graph spec))`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-14T02:27:50.116700",
          "text": "The web-server library that comes with racket doesn't seem to use the racket standard library's logging facilities. Is there any specific reason? As in, if I make my own log-and-dispatch-next dispatcher instead, any particular issues I should look out for?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-14T02:28:49.117700",
          "text": "I want to use racket's logging so that I can make the server's dispatch log be logging to a topic for which I may add multiple subscribers."
        }
      ]
    },
    {
      "conversation_id": "118",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loise: Thanks, Stephen. The problem is that the morning/afternoon streams seem to have been shot with one camera which didn't pick up the screen contents very well. Afaict, R7 had at least two cameras and the slides were clearly visible.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Loise"
        ]
      },
      "timeline": [
        {
          "user": "Loise",
          "timestamp": "2019-02-13T16:18:40.105900",
          "text": "Thanks, Stephen. The problem is that the morning/afternoon streams seem to have been shot with one camera which didn't pick up the screen contents very well. Afaict, R7 had at least two cameras and the slides were clearly visible."
        }
      ]
    },
    {
      "conversation_id": "119",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Priscila Moving to the correct channel, then… :wink: How in Turnstile can you associate a type with an identifier? All the examples I’ve seen so far are like the lambda calculus, where there’s no top-level binding (no [CODE]): they determine the type of a whole expression, not an identifier that has been bound to an expression or tagged with a type that it’s supposed to have. Turnstile seems to do everything via [CODE], which AFAICT can only associate values with a syntax object, i.e. it won’t resolve identifiers bound with [CODE]. (I’m probably misunderstanding something important here.)\nKristeen: Penni this example will probably be helpful: <[URL]\nPenni: Kristeen Thanks! I'll check this out tonight, before I proceed any further with my (growing) DSL.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 134.77,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-02-14T08:02:07.122800",
          "text": "<@Priscila> Moving to the correct channel, then… :wink: How in Turnstile can you associate a type with an identifier? All the examples I’ve seen so far are like the lambda calculus, where there’s no top-level binding (no `define`): they determine the type of a whole expression, not an identifier that has been bound to an expression or tagged with a type that it’s supposed to have. Turnstile seems to do everything via `syntax-properties`, which AFAICT can only associate values with a syntax object, i.e. it won’t resolve identifiers bound with `define`. (I’m probably misunderstanding something important here.)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-14T09:51:36.123900",
          "text": "<@Penni> this example will probably be helpful: <https://github.com/stchang/macrotypes/blob/master/turnstile-example/turnstile/examples/simple/ext-stlc.rkt>"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-14T10:16:53.124700",
          "text": "<@Kristeen> Thanks! I'll check this out tonight, before I proceed any further with my (growing) DSL."
        }
      ]
    },
    {
      "conversation_id": "120",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: King Shavon Great initiative! Racket News: <[URL]\nShavon: Priscila Thanks. I have been thinking about it for awhile but been waiting for someone else to do it. :slightly_smiling_face: Last May I decided to take the plunge and register the domain. Then I took awhile to get it off the ground but here it is. :slightly_smiling_face: Hopefully will get some submissions from other people, I guess it'll be hard for me to survey everything that's happening in Racket world on a regular basis. Feel free to just create an issue with a link to a video/paper/blog you'd like featured on Racket News, or even an interesting project or library.\nShavon: Hi Abby, welcome to Racket! You'll love it here!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 258.27,
        "contains_question": false,
        "action_keywords": [
          "create",
          "decide",
          "will"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-14T13:01:16.125500",
          "text": "<@King> <@Shavon>  Great initiative!   Racket News: <https://racket-news.com/>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-14T14:33:33.128300",
          "text": "<@Priscila> Thanks. I have been thinking about it for awhile but been waiting for someone else to do it. :slightly_smiling_face: Last May I decided to take the plunge and register the domain. Then I took awhile to get it off the ground but here it is. :slightly_smiling_face: Hopefully will get some submissions from other people, I guess it'll be hard for me to survey everything that's happening in Racket world on a regular basis. Feel free to just create an issue with a link to a video/paper/blog you'd like featured on Racket News, or even an interesting project or library."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-14T17:19:32.130400",
          "text": "Hi Abby, welcome to Racket! You'll love it here!"
        }
      ]
    },
    {
      "conversation_id": "121",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Maire: Cute trick on the Racket logo for V Day\nTerrence: ty :slightly_smiling_face:\nTerrence: I know java the best out of the languages I have come across\nLavette: Terrence LISP has a level of elegance which appeals to many of us. Have fun!\nLavette: XKCD has put it well: <[URL]\nLavette: However, in practice (in my experience) many companies have trouble using it, particularly given the large prevalence of knowledge of other languages. See also <[URL] :slightly_smiling_face:\nLoise: The _Lisp Cycles_ one is probably my favourite XKCD.\nTerrence: ty zzamboni...my background is a masters in health and life science analytics, and I saw some really sweet tools for statistical work with Racket. that's what drew me in\nLavette: Racket has a fantastic ecosystem. I only recently started learning it, but I'm enjoying it very much. I learned a bit of Clojure before. I was using Riemann (<[URL] at work, which is what got me started in it. Also LISP, very elegant, also large ecosystem (thanks to the seamless Java integration), but a different \"feel\" altogether (maybe because of the Java integration)\nLoise: I kind of like where Lisp/Scheme/Racket is right now. Of course, I'd be thrilled if Racket suddenly took off. But as it stands, it's sort of like a secret weapon, if you'll pardon my reference. I'm planning to disrupt the blockchain smart contract language space where DSLs make so much sense.\nTerrence: my ultimate goal is to write another computer language and compiler/interpreter. I want to understand how languages work.\nLoise: Then you've come to the right place. I'm new here as well but so far have had a great experience with the community. Clarinda was kind enough to agree to speak with the developers at my company about Racket and DSLs a few weeks back. That's the kind of community Racket has.\nTerrence: Thank you all so much for the warm welcome.\nTerrence: If you don't mind me asking, what is a DSL?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 14,
        "duration_minutes": 1033.13,
        "contains_question": true,
        "action_keywords": [
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Lavette",
          "Loise",
          "Maire",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Maire",
          "timestamp": "2019-02-14T15:39:18.129300",
          "text": "Cute trick on the Racket logo for V Day"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-14T17:23:29.130600",
          "text": "ty :slightly_smiling_face:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T08:14:53.139000",
          "text": "I know java the best out of the languages I have come across"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-15T08:24:20.139500",
          "text": "<@Terrence> LISP has a level of elegance which appeals to many of us. Have fun!"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-15T08:24:33.139700",
          "text": "XKCD has put it well: <https://xkcd.com/297/>"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-15T08:25:59.141400",
          "text": "However, in practice (in my experience) many companies have trouble using it, particularly given the large prevalence of knowledge of other languages. See also <https://xkcd.com/224/> :slightly_smiling_face:"
        },
        {
          "user": "Loise",
          "timestamp": "2019-02-15T08:26:38.142300",
          "text": "The _Lisp Cycles_ one is probably my favourite XKCD."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T08:27:42.143200",
          "text": "ty zzamboni...my background is a masters in health and life science analytics, and I saw some really sweet tools for statistical work with Racket. that's what drew me in"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-15T08:30:16.146700",
          "text": "Racket has a fantastic ecosystem. I only recently started learning it, but I'm enjoying it very much. I learned a bit of Clojure before. I was using Riemann (<http://riemann.io>) at work, which is what got me started in it. Also LISP, very elegant, also large ecosystem (thanks to the seamless Java integration), but a different \"feel\" altogether (maybe because of the Java integration)"
        },
        {
          "user": "Loise",
          "timestamp": "2019-02-15T08:31:16.147400",
          "text": "I kind of like where Lisp/Scheme/Racket is right now. Of course, I'd be thrilled if Racket suddenly took off. But as it stands, it's sort of like a secret weapon, if you'll pardon my reference. I'm planning to disrupt the blockchain smart contract language space where DSLs make so much sense."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T08:33:24.148900",
          "text": "my ultimate goal is to write another computer language and compiler/interpreter. I want to understand how languages work."
        },
        {
          "user": "Loise",
          "timestamp": "2019-02-15T08:35:14.150600",
          "text": "Then you've come to the right place. I'm new here as well but so far have had a great experience with the community. <@Clarinda> was kind enough to agree to speak with the developers at my company about Racket and DSLs a few weeks back. That's the kind of community Racket has."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T08:35:45.151000",
          "text": "Thank you all so much for the warm welcome."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T08:52:26.151100",
          "text": "If you don't mind me asking, what is a DSL?"
        }
      ]
    },
    {
      "conversation_id": "122",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: Hi everyone. I am new to scheme/lisp/racket and loving it.\nTerrence: I'm sure that I will hit a wall with lisp, but so far it is the most intuitive language I have come across. I'm not a smart person, I just study things intensely, but this just makes sense to me. I am reading Structure and Interpretation of Computer Programs right now and everything is making sense. Am I having a stroke?\nHerman: Hi Abby, I don't think there is anything wrong. Lisp/Scheme are wonderful languages and I am sure you will enjoy every minute.\nTerrence: Ty mwarren :slightly_smiling_face: It's just frustrating after trying to learn all of the objects-oriented languages and then trying to care about them. maybe I'm home finally\nHerman: I certainly found it refreshing after doing Java most of my career.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 873.25,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-14T17:08:26.130000",
          "text": "Hi everyone. I am new to scheme/lisp/racket and loving it."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T07:33:22.135800",
          "text": "I'm sure that I will hit a wall with lisp, but so far it is the most intuitive language I have come across. I'm not a smart person, I just study things intensely, but this just makes sense to me. I am reading Structure and Interpretation of Computer Programs right now and everything is making sense. Am I having a stroke?"
        },
        {
          "user": "Herman",
          "timestamp": "2019-02-15T07:36:52.137200",
          "text": "Hi Abby, I don't think there is anything wrong. Lisp/Scheme are wonderful languages and I am sure you will enjoy every minute."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T07:38:34.138100",
          "text": "Ty mwarren :slightly_smiling_face: It's just frustrating after trying to learn all of the objects-oriented languages and then trying to care about them. maybe I'm home finally"
        },
        {
          "user": "Herman",
          "timestamp": "2019-02-15T07:41:41.138600",
          "text": "I certainly found it refreshing after doing Java most of my career."
        }
      ]
    },
    {
      "conversation_id": "123",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Domain Specific Language.\nTerrence: tyvm\nLavette: Racket has explicit facilities for building DSLs, so it's great for your idea of writing a new language. I am precisely at the moment halfway through Clarinda's paper \"Creating Languages in Racket\" (<[URL] which is an easy read but gives a very good progression of how you can build more and more sophisticated/specialized languages, with concrete examples. Also very good is Lillian's \"Beautiful Racket\" (<[URL]\nTerrence: Thanks for this. I will start reading this today. I want to finish the first chapter in SICL",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 21.95,
        "contains_question": true,
        "action_keywords": [
          "build",
          "finish",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Lavette",
          "Shavon",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-15T08:55:12.151400",
          "text": "Domain Specific Language."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T08:55:49.151600",
          "text": "tyvm"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-15T09:06:44.153800",
          "text": "Racket has explicit facilities for building DSLs, so it's great for your idea of writing a new language. I am precisely at the moment halfway through <@Clarinda>'s paper \"Creating Languages in Racket\" (<https://queue.acm.org/detail.cfm?id=2068896>), which is an easy read but gives a very good progression of how you can build more and more sophisticated/specialized languages, with concrete examples. Also very good is <@Lillian>'s \"Beautiful Racket\" (<https://beautifulracket.com>)."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T09:17:09.154600",
          "text": "Thanks for this. I will start reading this today. I want to finish the first chapter in SICL"
        }
      ]
    },
    {
      "conversation_id": "124",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: I'm curious to know what people think about this: [CODE] is a good name for _functions_ that take a procedure. [CODE] is a good name for _syntax_ that sugar away the lambda of a [CODE]. This is a good naming convention. (Don't follow the bad example of the [CODE] functions. :smile:). To avoid a huge bike-shedding thread, I'll add a couple reaction buttons you can just click (unless you have any commentary).\nTerrence: I wish I knew enough to provide a reaction :joy:\nHerman: Terrence I agree, I cannot possibly comment.\nTerrence: Herman :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 177.65,
        "contains_question": false,
        "action_keywords": [
          "action",
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Julia",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-02-15T12:27:31.159300",
          "text": "I'm curious to know what people think about this:\n`call-with-x` is a good name for _functions_ that take a procedure.\n`with-x` is a good name for _syntax_ that sugar away the lambda of a `call-with-x`.\nThis is a good naming convention. (Don't follow the bad example of the `with-{input output}-from-file` functions. :smile:).\nTo avoid a huge bike-shedding thread, I'll add a couple reaction buttons you can just click (unless you have any commentary)."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T12:58:22.160300",
          "text": "I wish I knew enough to provide a reaction :joy:"
        },
        {
          "user": "Herman",
          "timestamp": "2019-02-15T15:09:50.161300",
          "text": "<@Terrence> I agree, I cannot possibly comment."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-15T15:25:10.161600",
          "text": "<@Herman> :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "125",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I think I even put this on the wiki page for Racket 2 as an inconsistency in the stdlib we should fix up\nKaren: hmmm. a [CODE] that took a dict of predicates and handler functions could be useful. not sure if there’s a good way to remove the lambdas from [CODE] though.\nKaren: how does using [CODE] work with [CODE]? I tried using it, but just got document building errors: [CODE_BLOCK] The error I get from raco setup is: [CODE_BLOCK]\nKaren: maybe the escape form is only meant to work with scribble parts / elements and there isn’t any way to use an escape with the code fragments being sent to the evaluator\nLillian: IIUC [CODE] is another that breaks this pattern (though of course it’s held over from Scheme). I remember the shape of [CODE] by imagining that it’s [CODE]. Likewise I remember [CODE] by imagining it’s [CODE], while pretending I’ve never heard of the other thing called [CODE] :upside_down_face:\nKaren: huh, [CODE] is a weird name now that you mention it\nDon: Noticed that too, I just thought maybe it was taking a while to rebuild (there are a lot of packages), wondering if it’s a :bug: now",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 1076.45,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Don",
          "Karen",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-15T15:42:09.162000",
          "text": "I think I even put this on the wiki page for Racket 2 as an inconsistency in the stdlib we should fix up"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-15T19:22:27.163800",
          "text": "hmmm. a `call-with-handlers` that took a dict of predicates and handler functions could be useful. not sure if there’s a good way to remove the lambdas from `with-handlers` though."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-15T21:38:11.167900",
          "text": "how does using `#:escape` work with `examples`? I tried using it, but just got document building errors:\n```\n@(examples\n   #:eval (make-evaluator) #:once\n   #:escape UNSYNTAX\n   (define rec\n     (UNSYNTAX example-record))\n   (record-ref rec '#:name)\n   (record-ref rec '#:fur-color))\n```\nThe error I get from raco setup is:\n```\nraco setup: error: during building docs for &lt;pkgs&gt;/rebellion/main.scrbl\nraco setup:   examples: exception raised in example\nraco setup:     error: \"UNSYNTAX: undefined;\\n cannot reference an identifier before its definition\\n  in module: top-level\"\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-15T21:59:08.170300",
          "text": "maybe the escape form is only meant to work with scribble parts / elements and there isn’t any way to use an escape with the code fragments being sent to the evaluator"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-02-15T22:12:13.170400",
          "text": "IIUC `with-syntax` is another that breaks this pattern (though of course it’s held over from Scheme). I remember the shape of `with-handlers` by imagining that it’s `let-handlers`. Likewise I remember `with-syntax` by imagining it’s `let-syntax`, while pretending I’ve never heard of the other thing called `let-syntax` :upside_down_face:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-15T22:53:02.170700",
          "text": "huh, `with-syntax` is a weird name now that you mention it"
        },
        {
          "user": "Don",
          "timestamp": "2019-02-16T09:38:36.178500",
          "text": "Noticed that too, I just thought maybe it was taking a while to rebuild (there are a lot of packages), wondering if it’s a :bug: now"
        }
      ]
    },
    {
      "conversation_id": "126",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mitsuko: Terrence That's not generally how opinions work :open_mouth:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mitsuko"
        ]
      },
      "timeline": [
        {
          "user": "Mitsuko",
          "timestamp": "2019-02-15T16:46:04.163200",
          "text": "<@Terrence> That's not generally how opinions work :open_mouth: "
        }
      ]
    },
    {
      "conversation_id": "127",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: [CODE] :face_with_monocle:\nJulia: Lillian Point. I imagine that example is: Say you wrote a simple [CODE] syntax variant of [CODE]. I think you'd decide something like [CODE] is what you'd actually find more useful?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 126.62,
        "contains_question": true,
        "action_keywords": [
          "decide"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-02-15T18:46:03.163600",
          "text": "`with-handlers` :face_with_monocle:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-15T20:52:40.164000",
          "text": "<@Lillian> Point.\nI imagine that example is: Say you wrote a simple `with-exception-handler` syntax variant of `call-with-exception-handler`. I think you'd decide something like `with-handlers` is what you'd actually find more useful?"
        }
      ]
    },
    {
      "conversation_id": "128",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: I’ve only been able to use escapes for [CODE] within the [CODE] of an [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-02-15T21:45:44.168500",
          "text": "I’ve only been able to use escapes for `examples` within the `show-datum` of an `eval:alts`"
        }
      ]
    },
    {
      "conversation_id": "129",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deeanna: Looks like the package index has stopped showing build information these past couple of days (I first noticed the problem yesterday). Is this a known issue?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Deeanna"
        ]
      },
      "timeline": [
        {
          "user": "Deeanna",
          "timestamp": "2019-02-16T04:03:36.177300",
          "text": "Looks like the package index has stopped showing build information these past couple of days (I first noticed the problem yesterday). Is this a known issue?"
        }
      ]
    },
    {
      "conversation_id": "130",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: ping Boris re pkg build",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-02-16T10:33:16.179000",
          "text": "ping <@Boris>  re pkg build"
        }
      ]
    },
    {
      "conversation_id": "131",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-16T11:02:14.179200",
          "text": "<https://alex-hhh.github.io/2019/02/data-visualization-dashboard.html>"
        }
      ]
    },
    {
      "conversation_id": "132",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marylin: Hello!\nMarylin: How do I make [CODE] run tests in a package [CODE] folder and only there?\nMarylin: Thanks!\nPenni: Marylin I’m not sure of the best way, but one way is [CODE].\nMarylin: is there something like [CODE] where [CODE] essentially runs a few bash scripts like [CODE]\nPenni: Marylin I haven’t heard of such a thing, but I’m only a beginner myself. What doesn’t [CODE] do that you need?\nMarylin: imagine you send the message [CODE] to the package and then it does its things... you don't have to remember one way for each package.\nMarylin: so, whatever the package, you just say: [CODE]\nPenni: There may be a more Rackety way to do it, but what I do is make a Makefile. In each directory, you have a Makefile with a target called [CODE], like this. Then you can do [CODE] in each directory.\nMarylin: ok! thank you very much :slightly_smiling_face:\nPenni: :smile: Actually, maybe this is the Rackety way to do it: it’s using a very simple DSL that perfectly fits what you’re trying to do.\nPenni: BTW, have you used Makefiles before? Specifically, do you know that the line with [CODE] must start with a tab?\nMarylin: Penni yes! I would rather avoid any external tool as much as possible... Julia [CODE] seems to work good enough :slightly_smiling_face:\nTerrence: the second method fails\nPriscila: It's possible to solve the problem using your method.\nPriscila: An alternative is to sum all squares and subtract the square of the smallest number.\nPriscila: If you have a helper called [CODE] that computes the smallest number of three inputs,\nPriscila: then you can write:\nPriscila: (- (+ (square x) (square y) (square z)) (square (min x y z)))\nTerrence: ah that sounds like a good plan\nTerrence: let me try that\nPriscila: Btw - in the line [CODE] I think you forgot an [CODE]: [CODE]\nTerrence: I'm not sure I am logical enough to be a programmer, to be honest. I've been trying unsuccessfully for years with only frustration. I like LISP because it's fun and very different that what I've seen, but I might just go back to writing lol.\nPriscila: For the record - that problem is notorious.\nPriscila: Countless people gets stuck on that one.\nTerrence: Priscila this problem is really an issue? Well I don't feel so bad now.\nPriscila: Terrence Oh yes. It's much harder than it looks. And since it is in SICP it has been discussed here multiple times.\nTerrence: I'll look into the helper method for sure\nKaren: Note that [CODE] works no matter what your current directory is, and it's what the package catalog build server does for all packages\nPriscila: Loma I haven't used [CODE] so I can't say how error reporting can be improved there. An alternative is to use the lexer generator [CODE]<[URL]\nPriscila: It has the same quirks as other yacc/bison style parsers.\nPriscila: Yet another alternative is: [CODE] <[URL]\nPriscila: Click the little blue arrow at the left.\nPriscila: This folds out the syntax object.\nMarylin: I expected to be able to build an object like that so that they are equal like [CODE] but it's not so simple apparently\nPriscila: You can now click at individual identifiers to see the associated source location etc.\nMarylin: None\nMarylin: ok thx!\nPriscila: Also: it's difficult to use [CODE] to compare syntax objects.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 39,
        "duration_minutes": 1262.75,
        "contains_question": true,
        "action_keywords": [
          "build",
          "discuss",
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Marylin",
          "Penni",
          "Priscila",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T09:15:58.184200",
          "text": "Hello!"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T09:16:24.184800",
          "text": "How do I make `raco test` run tests in a package `test/` folder and only there?"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T09:16:27.185000",
          "text": "Thanks!"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-17T09:49:23.185600",
          "text": "<@Marylin> I’m not sure of the best way, but one way is `raco test test/*.rkt`."
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T09:51:20.186800",
          "text": "is there something like `npm test` where `npm test` essentially runs a few bash scripts like `tape **/*.js | tap-spec`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-17T09:52:49.187700",
          "text": "<@Marylin> I haven’t heard of such a thing, but I’m only a beginner myself. What doesn’t `raco test test/*.rkt` do that you need?"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T09:54:09.189100",
          "text": "imagine you send the message `test` to the package and then it does its things... you don't have to remember one way for each package."
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T09:54:56.189800",
          "text": "so, whatever the package, you just say: `$ cd pkg; raco test`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-17T09:57:38.191100",
          "text": "There may be a more Rackety way to do it, but what I do is make a Makefile. In each directory, you have a Makefile with a target called `test`, like this.  Then you can do `$ cd pkg; make test` in each directory."
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T09:58:35.191600",
          "text": "ok! thank you very much :slightly_smiling_face:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-17T09:59:23.192500",
          "text": ":smile: Actually, maybe this is the Rackety way to do it: it’s using a very simple DSL that perfectly fits what you’re trying to do."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-17T10:00:19.193100",
          "text": "BTW, have you used Makefiles before? Specifically, do you know that the line with `raco test *.rkt` must start with a tab?"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-17T11:21:56.197000",
          "text": "<@Penni> yes! I would rather avoid any external tool as much as possible... <@Julia> `$ raco test package/` seems to work good enough :slightly_smiling_face:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-17T12:50:15.198300",
          "text": "the second method fails"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:50:50.198900",
          "text": "It's possible to solve the problem using your method."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:51:48.200100",
          "text": "An alternative is to sum all squares and subtract the square of the smallest number."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:52:20.200700",
          "text": "If you have a helper called `min` that computes the smallest number of three inputs,"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:52:24.201000",
          "text": "then you can write:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:52:58.201800",
          "text": "(- (+ (square x) (square y) (square z)) (square (min x y z)))"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-17T12:53:14.202000",
          "text": "ah that sounds like a good plan"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-17T12:53:16.202200",
          "text": "let me try that"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:54:29.202900",
          "text": "Btw - in the line `((&lt; x y) (&gt; x z) (&gt; y z) (+ ( *x x) (* y y)))` I think you forgot an `and`:  `((and (&lt; x y) (&gt; x z) (&gt; y z))   (+ ( *x x) (* y y)))`"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-17T12:57:34.204300",
          "text": "I'm not sure I am logical enough to be a programmer, to be honest. I've been trying unsuccessfully for years with only frustration. I like LISP because it's fun and very different that what I've seen, but I might just go back to writing lol."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:58:01.204700",
          "text": "For the record - that problem is notorious."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:58:17.205100",
          "text": "Countless people gets stuck on that one."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-17T16:31:37.213000",
          "text": "<@Priscila> this problem is really an issue? Well I don't feel so bad now."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T16:33:42.214800",
          "text": "<@Terrence> Oh yes. It's much harder than it looks. And since it is in SICP it has been discussed here multiple times."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-17T16:34:12.215100",
          "text": "I'll look into the helper method for sure"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-17T16:56:39.215200",
          "text": "Note that `raco test -p package` works no matter what your current directory is, and it's what the package catalog build server does for all packages"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-18T04:08:04.229100",
          "text": "<@Loma> I haven't used `brag` so I can't say how error reporting can be improved there. An alternative is to use the lexer generator `<https://docs.racket-lang.org/parser-tools/Lexers.html?q=lexer>` . Here you can choose whether to parse the tokens using your own recursive descent functions, or to use the parser generator (LALR(1))  `<https://docs.racket-lang.org/parser-tools/LALR_1__Parsers.html?q=lexer>`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-18T04:08:59.229500",
          "text": "It has the same quirks as other yacc/bison style parsers."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-18T04:09:30.229900",
          "text": "Yet another alternative is:  `parsack`   <https://docs.racket-lang.org/parsack/index.html?q=parsec>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-18T06:16:25.233100",
          "text": "Click the little blue arrow at the left."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-18T06:16:33.233600",
          "text": "This folds out the syntax object."
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-18T06:16:36.233900",
          "text": "I expected to be able to build an object like that so that they are equal like `(syntax ...)` but it's not so simple apparently"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-18T06:16:58.234400",
          "text": "You can now click at individual identifiers to see the associated source location etc."
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-18T06:17:45.234500",
          "text": "None"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-18T06:17:48.234900",
          "text": "ok thx!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-18T06:18:43.235600",
          "text": "Also: it's difficult to use `equal?` to compare syntax objects."
        }
      ]
    },
    {
      "conversation_id": "133",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: If a package is installed you can [CODE].\nTerrence: Working on a problem from a textbook I found online. \"define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers\" I have this so far, but not all situations are correct. (define (sum-of-squares x y z) (cond ((&gt; x y z) (+ (* x x) (* y y))) ((&lt; x y) (&gt; x z) (&gt; y z) (+ (* x x) (* y y))) ((&lt; x y z) (+ (* y y) (* z z))) (else (+ (* x x) (* z z))))) (sum-of-squares 4 5 6) (sum-of-squares 4 6 5) (sum-of-squares 29 14 27) (sum-of-squares 3 4 1) (sum-of-squares 27 14 29)\nPriscila: But it is hard to see if all cases have been accounted for.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 130.58,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Priscila",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-02-17T10:40:31.194300",
          "text": "If a package is installed you can `raco test -p &lt;package-name&gt;`."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-17T12:49:51.198100",
          "text": "Working on a problem from a textbook I found online. \"define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers\"\n\nI have this so far, but not all situations are correct.\n\n\n(define (sum-of-squares x y z)\n  (cond ((&gt; x y z) (+ (* x x) (* y y)))\n        ((&lt; x y) (&gt; x z) (&gt; y z) (+ (* x x) (* y y)))\n        ((&lt; x y z) (+ (* y y) (* z z)))\n        (else (+ (* x x) (* z z)))))\n(sum-of-squares 4 5 6)\n(sum-of-squares 4 6 5)\n(sum-of-squares 29 14 27)\n(sum-of-squares 3 4 1)\n(sum-of-squares 27 14 29)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-17T12:51:06.199300",
          "text": "But it is hard to see if all cases have been accounted for."
        }
      ]
    },
    {
      "conversation_id": "134",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Terrence I hope you’ll be patient with yourself. Most of programming is getting accustomed to certain ways of mentally framing things so that good ideas usually come to mind quickly. In that respect, it’s just like playing a musical instrument, cooking, writing, and every other skill. I was a commercial programmer for about 15 years, very good at coming up with object-oriented and imperative ways of making programs. I’m now learning Racket and finding it pretty slow going even though understanding the semantics of the language is pretty easy. I’m just not accustomed to how things are done in Racket. I often have to go through several clumsy versions of even fairly elementary things before I find a way to make the program that’s simple and not error-prone.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-02-17T13:34:09.211800",
          "text": "<@Terrence> I hope you’ll be patient with yourself. Most of programming is getting accustomed to certain ways of mentally framing things so that good ideas usually come to mind quickly. In that respect, it’s just like playing a musical instrument, cooking, writing, and every other skill. I was a commercial programmer for about 15 years, very good at coming up with object-oriented and imperative ways of making programs. I’m now learning Racket and finding it pretty slow going even though understanding the semantics of the language is pretty easy. I’m just not accustomed to how things are done in Racket. I often have to go through several clumsy versions of even fairly elementary things before I find a way to make the program that’s simple and not error-prone."
        }
      ]
    },
    {
      "conversation_id": "135",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: How does [CODE] break Julia’s convention?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-02-17T14:09:22.212100",
          "text": "How does `with-handlers` break  <@Julia>’s convention?"
        }
      ]
    },
    {
      "conversation_id": "136",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: Anyone know if there is a way to use my own error report procedures if I parse use *brag* (My parser knowledge is only limited within the book _beautiful racket_, brag suit my needs but I believe I can provide better error report)? Or maybe you guys can recommend me a parser framework which provides facilities for better parse error report? I’m trying to parse a very simple language that can be written in CFG. Appreciate any help! (P.S. My statement is not very clear about ‘better parse error report’, an example would be: - not so good one: Encountered parsing error near … - better one: only … can be written after …)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-02-17T20:39:24.226200",
          "text": "Anyone know if there is a way to use my own error report procedures if I parse use *brag* (My parser knowledge is only limited within the book _beautiful racket_, brag suit my needs but I believe I can provide better error report)?\nOr maybe you guys can recommend me a parser framework which provides facilities for better parse error report? I’m trying to parse a very simple language that can be written in CFG.  Appreciate any help!\n\n(P.S. My statement is not very clear about ‘better parse error report’, an example would be:\n- not so good one: Encountered parsing error near …\n- better one: only … can be written after …)"
        }
      ]
    },
    {
      "conversation_id": "137",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marylin: Dear all, i'm trying to test a thing that get a syntax-object as an input and outputs a datum as an output. Is there a way to write down the syntax object in a file ? Here is what drracket shows me :",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Marylin"
        ]
      },
      "timeline": [
        {
          "user": "Marylin",
          "timestamp": "2019-02-18T06:15:35.232100",
          "text": "Dear all, i'm trying to test a thing that get a syntax-object as an input and outputs a datum as an output. Is there a way to write down the syntax object in a file ? Here is what drracket shows me :"
        }
      ]
    },
    {
      "conversation_id": "138",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Is there any convenient way to cast a struct into it's child (providing the extra values the child struct type needs)\nCaprice: I checked to see if this works, but it doesn't: [CODE_BLOCK]\nCaprice: Is this an ok idea? [CODE_BLOCK]\nCaprice: Although the structs have to be transparent, but that's ok\nTerrence: Okay I think I got it, but I followed the spirit of the chapter and the way these books usually go: \"first we write clunky bad code, then we find better ways.\" [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 44.08,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-18T06:44:42.236400",
          "text": "Is there any convenient way to cast a struct into it's child (providing the extra values the child struct type needs)"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-18T06:45:32.237100",
          "text": "I checked to see if this works, but it doesn't:\n```\n(struct foo (x y))\n(struct kid foo (z))\n(define f (foo 1 2))\n(struct-copy kid f (z 3))\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-18T06:48:06.237500",
          "text": "Is this an ok idea?\n```\n(require racket/struct)\n(apply kid (reverse (cons 3 (reverse (struct-&gt;list f)))))\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-18T06:52:17.238100",
          "text": "Although the structs have to be transparent, but that's ok"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T07:28:47.239100",
          "text": "Okay I think I got it, but I followed the spirit of the chapter and the way these books usually go: \"first we write clunky bad code, then we find better ways.\"\n\n```#lang racket\n\n(define (square x)\n  (* x x))\n\n(define (sum-of-squares x y z)\n  (cond ((&gt; x y z) (+ (square x) (square y)))\n        ((&lt; x y z) (+ (square y) (square z)))\n        ((&gt; y x z) (+ (square y) (square x)))\n        ((&lt; x z y) (+ (square z) (square y)))\n        ((&gt; x z y) (+ (square x) (square z)))\n        ((&gt; z x y) (+ (square z) (square x)))))\n\n(sum-of-squares 4 5 6)\n(sum-of-squares 4 6 5)\n(sum-of-squares 6 5 4)\n(sum-of-squares 5 6 4)\n(sum-of-squares 5 4 6)\n(sum-of-squares 6 4 5)\n\n&gt; 61\n&gt; 61\n&gt; 61\n&gt; 61\n&gt; 61\n&gt; 61```"
        }
      ]
    },
    {
      "conversation_id": "139",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leonila: Little question: is this or IRC a better place to go?\nTerrence: are you telling me to go to IRC instead?\nShavon: Leonila both are good i guess. :slightly_smiling_face:\nShavon: Your preference might depend on how old you are. :wink:\nShavon: ... or how old you feel!\nTerrence: IRC makes me feel oooollld\nMai: Terrence just a little tip. You can wrap your code with [CODE]`\nMai: It will make your code looks like this [CODE_BLOCK]\nTerrence: oh\nMai: It’s backtick\nTerrence: ty lol\nMai: The key between [CODE] and [CODE]\nMai: Yup :slightly_smiling_face:\nTerrence: Coffee hasn't kicked in\nMai: Terrence also, try [CODE]. What’s the expected output?\nTerrence: okay se\nTerrence: [CODE_BLOCK]\nTerrence: oops\nTerrence: ty Mai\nMai: np!\nTerrence: i tested (sum-of-squares 2 2 2) also and it dropped one like it was supposed to. :heart:\nTerrence: is there an \"applicative order vs. normal order' for dummies anywhere? going to make that something I learn today\nKristeen: Terrence \"applicative order\" (more often known as \"call by value\") means that we evaluate all the arguments to a function before we do the function call\nTerrence: so in normal order, it is possible to divide by zero accidentally?\nKristeen: in both you can do that\nKristeen: but it might happen at different places\nKristeen: and with normal order, you might _not_ see the error sometimes when you would see it with applicative order\nKristeen: for example [CODE] produces an error in applicative order, but 5 in normal order\nTerrence: oh I see!\nKristeen: you can see this by trying them both in regular [CODE] and in [CODE]\nTerrence: normal order looks for the first true evaluation of arguments?\nKristeen: it waits until it really needs the result of the argument to evaluate it\nTerrence: ok\nTerrence: it will be something that takes me a while to fully grasp, but it feels like it's worth it to learn\nSusana: Normal order sends [CODE] as the parameter, without evaluating it first\nTerrence: ohh\nTerrence: that seems like it could be good and bad at the same time\nKristeen: yes, indeed\nTerrence: that you both so much. If I ask too many questions, please let me know. I hit that \"I never wanted to be a website developer/application developer\" wall a while ago and have been investigating computer science as a sort of autodidactic pursuit.\nTerrence: Want to make sure I understand compound expressions here: my understanding is in comments. [CODE_BLOCK]\nElin: “assign”?\nTerrence: bad wording\nSusana: yes, [CODE] evaluates to [CODE] if b is greater than 0 and [CODE] otherwise\nTerrence: ty that's what I meant\nElin: Maybe you meant [CODE] where that something is either an identity function or a negation function?\nSusana: you can use the substitution method, so [CODE] evaluates to [CODE] if b &gt; 0 and [CODE] if not\nTerrence: no, this is a problem from SICP and the formula was provided to me. I just had to explain it\nTerrence: i guess it was an introduction to compound expressions?\nSusana: note that b is only involved in the last operation, you don’t change it after the [CODE]\nTerrence: correct, I did get that :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 50,
        "duration_minutes": 116.4,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "please",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Kristeen",
          "Leonila",
          "Mai",
          "Shavon",
          "Susana",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Leonila",
          "timestamp": "2019-02-18T07:35:36.239500",
          "text": "Little question: is this or IRC a better place to go?"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T07:36:40.239800",
          "text": "are you telling me to go to IRC instead?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-18T07:48:46.240200",
          "text": "<@Leonila> both are good i guess. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-18T07:49:12.240700",
          "text": "Your preference might depend on how old you are. :wink:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-18T07:49:23.240900",
          "text": "... or how old you feel!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T07:49:41.241200",
          "text": "IRC makes me feel oooollld"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T07:53:24.241800",
          "text": "<@Terrence> just a little tip. You can wrap your code with ```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T07:53:48.242300",
          "text": "It will make your code looks like this\n\n```\n(define (hello) \n  world)\n```"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T07:53:50.242500",
          "text": "oh"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T07:54:41.242900",
          "text": "It’s backtick"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T07:55:03.243700",
          "text": "ty lol"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T07:55:05.243800",
          "text": "The key between `esc` and `tab`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T07:55:09.244000",
          "text": "Yup :slightly_smiling_face:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T07:55:27.244400",
          "text": "Coffee hasn't kicked in"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T08:02:43.245100",
          "text": "<@Terrence> also, try `(sum-of-squares 2 1 2)`. What’s the expected output?"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:03:06.245300",
          "text": "okay se"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:04:23.245500",
          "text": "```(define (sum-of-squares x y z)\n  (cond ((&gt;= x y z) (+ (square x) (square y))) \n        ((&lt;= x y z) (+ (square y) (square z))) \n        ((&gt;= y x z) (+ (square y) (square x))) \n        ((&lt;= x z y) (+ (square z) (square y))) \n        ((&gt;= x z y) (+ (square x) (square z))) \n        ((&gt;= z x y) (+ (square z) (square x))))) ```"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:04:26.245700",
          "text": "oops"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:04:42.246200",
          "text": "ty <@Mai>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T08:05:11.246800",
          "text": "np!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:05:41.247300",
          "text": "i tested (sum-of-squares 2 2 2) also and it dropped one like it was supposed to. :heart:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:28:49.248000",
          "text": "is there an \"applicative order vs. normal order' for dummies anywhere? going to make that something I learn today"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:49:05.248700",
          "text": "<@Terrence> \"applicative order\" (more often known as \"call by value\") means that we evaluate all the arguments to a function before we do the function call"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:52:58.249900",
          "text": "so in normal order, it is possible to divide by zero accidentally?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:53:49.250100",
          "text": "in both you can do that"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:53:59.250400",
          "text": "but it might happen at different places"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:54:18.250900",
          "text": "and with normal order, you might _not_ see the error sometimes when you would see it with applicative order"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:54:49.251600",
          "text": "for example `((lambda (x) 5) (/ x 0))` produces an error in applicative order, but 5 in normal order"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:55:01.252000",
          "text": "oh I see!"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:55:32.252500",
          "text": "you can see this by trying them both in regular `#lang racket` and in `#lang lazy`"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:55:40.252700",
          "text": "normal order looks for the first true evaluation of arguments?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:56:00.253100",
          "text": "it waits until it really needs the result of the argument to evaluate it"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:56:06.253500",
          "text": "ok"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:56:43.254600",
          "text": "it will be something that takes me a while to fully grasp, but it feels like it's worth it to learn"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T08:56:56.255000",
          "text": "Normal order sends `(/ x 0)` as the parameter, without evaluating it first"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:57:52.255400",
          "text": "ohh"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T08:58:06.255700",
          "text": "that seems like it could be good and bad at the same time"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:58:35.255900",
          "text": "yes, indeed"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T09:02:28.257100",
          "text": "that you both so much. If I ask too many questions, please let me know. I hit that \"I never wanted to be a website developer/application developer\" wall a while ago and have been investigating computer science as a sort of autodidactic pursuit."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T09:25:55.257700",
          "text": "Want to make sure I understand compound expressions here: my understanding is in comments.\n\n```(define (a-plus-abs-b a b)\n  ((if (&gt; b 0) + -) a b)) ; if b &gt; 0, then we assign + to b, else we assign - to b, and then add to a```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-18T09:27:10.258000",
          "text": "“assign”?"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T09:29:31.258800",
          "text": "bad wording"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T09:30:05.260100",
          "text": "yes, `(if (&gt; b 0) + -)` evaluates to `+` if b is greater than 0 and `-` otherwise"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T09:30:16.260700",
          "text": "ty that's what I meant"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-18T09:30:17.260900",
          "text": "Maybe you meant `(+ a (&lt;something&gt; b))` where that something is either an identity function or a negation function?"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T09:31:00.262300",
          "text": "you can use the substitution method, so `((if (&gt; b 0) + -) a b)` evaluates to `(+ a b)` if b &gt; 0 and `(- a b)` if not"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T09:31:02.262500",
          "text": "no, this is a problem from SICP and the formula was provided to me. I just had to explain it"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T09:31:40.263100",
          "text": "i guess it was an introduction to compound expressions?"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T09:31:45.263200",
          "text": "note that b is only involved in the last operation, you don’t change it after the `if`"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-18T09:32:00.263500",
          "text": "correct, I did get that :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "140",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: \"normal order\" (more often known as \"call by name\") means that we do the function call first, and only evaluate the arguments if we need them",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-02-18T08:49:37.249500",
          "text": "\"normal order\" (more often known as \"call by name\") means that we do the function call first, and only evaluate the arguments if we need them"
        }
      ]
    },
    {
      "conversation_id": "141",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: <[URL] Caprice I'd probably just pattern match? Something like [CODE]?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-02-18T10:05:48.265800",
          "text": "<https://racket.slack.com/archives/C06V96CKX/p1550490282236400>\n<@Caprice> I'd probably just pattern match? Something like `(match f [(foo x y) (kid x y z)])`?"
        }
      ]
    },
    {
      "conversation_id": "142",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herman: Susana Apparently RWops structs have a close method which can be called with [CODE] but I don't have a clue how you could call that from racket, any ideas? Sorry to keep bothering you.\nSusana: Herman no problem but you don’t need to call close\nSusana: I defined [CODE] just like the [CODE] macro\nSusana: if the second argument to [CODE] is non-zero, the stream will be closed after being read\nSusana: otherwise it would be weird because [CODE] does not return the RWops",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 54.77,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Susana"
        ]
      },
      "timeline": [
        {
          "user": "Herman",
          "timestamp": "2019-02-18T10:36:30.268200",
          "text": "<@Susana> Apparently RWops structs have a close method which can be called with `io-&gt;close(io);` but I don't have a clue how you could call that from racket, any ideas? Sorry to keep bothering you."
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T11:28:39.268900",
          "text": "<@Herman> no problem but you don’t need to call close"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T11:29:15.269600",
          "text": "I defined `sdl-load-bmp` just like the `SDL_LoadBMP` macro"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T11:29:48.270200",
          "text": "if the second argument to `SDL_LoadBMP_RW` is non-zero, the stream will be closed after being read"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-18T11:31:16.270800",
          "text": "otherwise it would be weird because `SDL_LoadBMP` does not return the RWops"
        }
      ]
    },
    {
      "conversation_id": "143",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Julia yes that works, too, thanks",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-18T12:01:40.271200",
          "text": "<@Julia> yes that works, too, thanks"
        }
      ]
    },
    {
      "conversation_id": "144",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Ollie: I see a lot in docs on web programming, but not how to deploy. If, for example, I follow the directions to make an Instant Servlet at <[URL] then it will run in a browser on my own machine, but what do I do if I have a public html directory on a server and I want to put it there, so that anyone can run it by pointing their browser at a URL on the server?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ollie"
        ]
      },
      "timeline": [
        {
          "user": "Ollie",
          "timestamp": "2019-02-18T15:33:35.274000",
          "text": "I see a lot in docs on web programming, but not how to deploy. If, for example, I follow the directions to make an Instant Servlet at <https://docs.racket-lang.org/web-server/run.html#%28part._insta%29> then it will run in a browser on my own machine, but what do I do if I have a public html directory on a server and I want to put it there, so that anyone can run it by pointing their browser at a URL on the server?"
        }
      ]
    },
    {
      "conversation_id": "145",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Prince: I have a simple jargon question. Let's say that I created the following definitions [CODE] and [CODE] and I want to refer to [CODE] and [CODE] collectively. What would I call them? In R, I would call them objects but that doesn't strike me as the correct jargon for Racket.\nShanell: \"objects\" is fine, unless the context of the discussion implies you're talking about OO stuff\nMai: values?\nShanell: ~[CODE] is a value, but [CODE] is not~\nJulia: As an old programmer used to things like C, I'd probably call [CODE] and [CODE] \"variables\". Even though, in Racket, we don't usually mutate or assign new values (using [CODE]). (In other words, they don't really \"vary\" :smile:)\nShanell: <[URL]\nJulia: More strictly, I might say that [CODE] and [CODE] are _bindings_ whose values are that list and that vector, respectively ¯\\_(ツ)_/¯\nShanell: though, looking closer... I wasn't reading that quite right\nJulia: I think there's some text in the docs about the evaluation model, that talks about \"locations\" that normally have binding names like [CODE] and [CODE], and in each location there are values.\nJulia: <[URL]\nShanell: Prince to some degree it might matter whether you're referring to [CODE] and [CODE] themselves or to what they name. My earlier comment that \"'objects' is fine\" is (I think) true if you mean the latter.\nShanell: use-mention distinction stuff\nPenni: Julia In pure mathematics, they’re also called variables even though they don’t “vary”.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 13,
        "duration_minutes": 42.15,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "create",
          "discuss",
          "let's",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Mai",
          "Penni",
          "Prince",
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Prince",
          "timestamp": "2019-02-18T16:13:31.276100",
          "text": "I have a simple jargon question. Let's say that I created the following definitions `(define x '(1 2 3))` and `(define y #(4 5 6))` and I want to refer to `x` and `y` collectively. What would I call them? In R, I would call them objects but that doesn't strike me as the correct jargon for Racket."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T16:17:52.276900",
          "text": "\"objects\" is fine, unless the context of the discussion implies you're talking about OO stuff"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-18T16:19:03.278400",
          "text": "values?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T16:19:20.279000",
          "text": "~`'(1 2 3)` is a value, but `x` is not~"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-18T16:19:20.279100",
          "text": "As an old programmer used to things like C, I'd probably call `x` and `y` \"variables\". Even though, in Racket, we don't usually mutate or assign new values (using `set!`). (In other words, they don't really \"vary\" :smile:)"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T16:19:56.279900",
          "text": "<https://docs.racket-lang.org/reference/eval-model.html?q=value#%28part._.Objects_and_.Imperative_.Update%29>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-18T16:20:07.280000",
          "text": "More strictly, I might say that `x` and `y` are _bindings_ whose values are that list and that vector, respectively ¯\\_(ツ)_/¯"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T16:21:08.280400",
          "text": "though, looking closer... I wasn't reading that quite right"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-18T16:22:19.281300",
          "text": "I think there's some text in the docs about the evaluation model, that talks about \"locations\" that normally have binding names like `x` and `y`, and in each location there are values."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-18T16:24:54.281700",
          "text": "<https://docs.racket-lang.org/reference/eval-model.htm#%28part._vars-and-locs%29>"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T16:32:45.282900",
          "text": "<@Prince> to some degree it might matter whether you're referring to `x` and `y` themselves or to what they name. My earlier comment that \"'objects' is fine\" is (I think) true if you mean the latter."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T16:34:13.283900",
          "text": "use-mention distinction stuff"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-18T16:55:40.284400",
          "text": "<@Julia> In pure mathematics, they’re also called variables even though they don’t “vary”."
        }
      ]
    },
    {
      "conversation_id": "146",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: I would probably run the program on the server on a specific port (say [CODE]) and then have nginx proxy requests to it\nTomas: you might be interested in this <[URL]\nTomas: You would also want to do something to make sure your program keeps running on crashes, with upstart, supervisord or similar\nJulia: Well I call them constables.\nOllie: Thanks Tomas! The serveerracket thing is actually the opposite of what I want, which is not to make a more complicated website but rather to put the simplest possible website, actually any Racket code at all, *on the web*. Your \"nginx proxy requests\" comment may be what I want, but I have no idea what that means :disappointed:. Also, no idea what \"supervisord\" means. Would love some guide that assumes only knowledge of Racket and shows how to put *some* Racket thing (maybe something simple like in the Instant Servelet example) on the web, for example on an academic server in which I can already put [CODE] files, etc. It would be ideal if I could just put stuff there and it would run when accessed, but if I'd instead have to run a command and/or set something up to run the command after a reboot then that would also be fine *if* there were instructions for doing that that require no knowledge beyond knowing Racket. Does such a thing exist, or could it?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 294.95,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Ollie",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-18T17:04:22.284500",
          "text": "I would probably run the program on the server on a specific port (say `8080`) and then have nginx proxy requests to it"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-18T17:05:04.284700",
          "text": "you might be interested in this <https://serverracket.com/>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-18T17:05:52.285000",
          "text": "You would also want to do something to make sure your program keeps running on crashes, with upstart, supervisord or similar"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-18T17:10:43.285800",
          "text": "Well I call them constables."
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-18T21:59:19.293900",
          "text": "Thanks <@Tomas>! The serveerracket thing is actually the opposite of what I want, which is not to make a more complicated website but rather to put the simplest possible website, actually any Racket code at all, *on the web*. Your \"nginx proxy requests\" comment may be what I want, but I have no idea what that means :disappointed:. Also, no idea what \"supervisord\" means. Would love some guide that assumes only knowledge of Racket and shows how to put *some* Racket thing (maybe something simple like in the Instant Servelet example) on the web, for example on an academic server in which I can already put `html` files, etc. It would be ideal if I could just put stuff there and it would run when accessed, but if I'd instead have to run a command and/or set something up to run the command after a reboot then that would also be fine *if* there were instructions for doing that that require no knowledge beyond knowing Racket. Does such a thing exist, or could it?"
        }
      ]
    },
    {
      "conversation_id": "147",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tuan: Is there an idiomatic way to use a pipeline line operator [CODE] like in Elixir? Very new to Racket and I saw this: <[URL]\nTuan: but it seems to be a completely different language?\nShanell: Tuan there are several packages that supply threading macros. You might be interested in this conversation from a few years back: <[URL]\nTuan: oh, awesome, that seems to be exactly what I was looking for. Thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 537.72,
        "contains_question": true,
        "action_keywords": [
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Shanell",
          "Tuan"
        ]
      },
      "timeline": [
        {
          "user": "Tuan",
          "timestamp": "2019-02-18T21:16:32.293400",
          "text": "Is there an idiomatic way to use a pipeline line operator `|&gt;` like in Elixir? Very new to Racket and I saw this: <https://docs.racket-lang.org/heresy/pipes.html>"
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-18T21:17:19.293800",
          "text": "but it seems to be a completely different language?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T22:28:26.295400",
          "text": "<@Tuan> there are several packages that supply threading macros. You might be interested in this conversation from a few years back: <https://groups.google.com/forum/#!msg/racket-users/uZnfMrbAE98/J-jbjxwyAgAJ>"
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-19T06:14:15.296900",
          "text": "oh, awesome, that seems to be exactly what I was looking for. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "148",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shanell: or just go here: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Shanell",
          "timestamp": "2019-02-18T22:29:59.295800",
          "text": "or just go here: <https://docs.racket-lang.org/threading/index.html>"
        }
      ]
    },
    {
      "conversation_id": "149",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: So, the word \"server\" is used in a lot of different ways, and there are various types of servers out there. It sounds like you're talking about a very traditional shared hosting environment. Somewhere there is a computer (called a \"server\") running a program like Apache (also called a \"server\"). Apache looks in some directory on that computer for your files and sends them out when someone requests the corresponding URL. (Apache can do more than this: I'm simplifying.) All of those things are \"static\" files, meaning that they are generated ahead of time and they don't change in response to interactions with visitors. You can certainly use Racket to make static files (e.g. with Frog: <[URL] but that isn't what the Racket Web Server is for. The [CODE] library essentially gives you the Apache functionality (roughly) as a library that you can use from programs. It can serve static files, but it is mostly oriented to dynamic, interactive content: for example, processing input from a form and displaying some computed output. In this sense it is similar to server frameworks like node.js. Most traditional shared hosting environments like you seem to be describing aren't really set up to run servers like Racket (or node.js, etc.). It is possible, but you would need a willing system administrator with root access. You could set up your Racket application to listen on some local port, and then use Apache as a reverse proxy to your Racket server. The way of running a Racket server on the public internet that requires the least sysadmin knowledge is to do it on a machine (perhaps a virtual machine, like an AWS instance) that isn't already serving other web content with some other web server like Apache. In that case, you just start your Racket process as you do on your local machine, but tell it to run on port 80 (or 443) instead of 8000 or whatever. All of this requires at least some knowledge beyond Racket (and not specific to Racket), but I'm happy to help if I can.\nOllie: Thank you Madelaine for your patient and thorough explanation. I believe that the server I use is running Apache. With Clojurescript, I can compile something and move the resulting folder to the server, and then anyone can point a browser to the [CODE] file in the folder on the server and it runs. Long ago I did something similar using a combination of C++ and Common Lisp. Do I understand correctly that nothing like this is possible using Racket? If so, then I guess I would indeed need to run a command on the server to start up the Racket part of the server, and set something up so that that it runs automatically when the server is rebooted, or get my sysadmin to do those things. If this is right, then is there a concise description of the needed command/setup that can be conveyed to someone who doesn't already have much knowledge beyond Racket? I ask both for my own projects and for my teaching of new programmers, for whom I gather Racket is intended to serve as a good environment. If the student has made a thing that they want to share, by making it run on the web, and they have a [CODE] directory on a university server, what is the magic to make the thing run online, where their friends and family can check it out?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 425.18,
        "contains_question": true,
        "action_keywords": [
          "action",
          "need to",
          "requires",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Madelaine",
          "Ollie"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-02-18T23:51:30.295900",
          "text": "So, the word \"server\" is used in a lot of different ways, and there are various types of servers out there.\nIt sounds like you're talking about a very traditional shared hosting environment. Somewhere there is a computer (called a \"server\") running a program like Apache (also called a \"server\"). Apache looks in some directory on that computer for your files and sends them out when someone requests the corresponding URL.  (Apache can do more than this: I'm simplifying.) All of those things are \"static\" files, meaning that they are generated ahead of time and they don't change in response to interactions with visitors.\nYou can certainly use Racket to make static files (e.g. with Frog: <https://docs.racket-lang.org/frog/>), but that isn't what the Racket Web Server is for. The `web-server` library essentially gives you the Apache functionality (roughly) as a library that you can use from programs. It can serve static files, but it is mostly oriented to dynamic, interactive content: for example, processing input from a form and displaying some computed output. In this sense it is similar to server frameworks like node.js.\nMost traditional shared hosting environments like you seem to be describing aren't really set up to run servers like Racket (or node.js, etc.). It is possible, but you would need a willing system administrator with root access. You could set up your Racket application to listen on some local port, and then use Apache as a reverse proxy to your Racket server.\nThe way of running a Racket server on the public internet that requires the least sysadmin knowledge is to do it on a machine (perhaps a virtual machine, like an AWS instance) that isn't already serving other web content with some other web server like Apache. In that case, you just start your Racket process as you do on your local machine, but tell it to run on port 80 (or 443) instead of 8000 or whatever.\nAll of this requires at least some knowledge beyond Racket (and not specific to Racket), but I'm happy to help if I can."
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T06:56:41.297100",
          "text": "Thank you <@Madelaine> for your patient and thorough explanation. I believe that the server I use is running Apache. With Clojurescript, I can compile something and move the resulting folder to the server, and then anyone can point a browser to the `index.html` file in the folder on the server and it runs. Long ago I did something similar using a combination of C++ and Common Lisp. Do I understand correctly that nothing like this is possible using Racket? If so, then I guess I would indeed need to run a command on the server to start up the Racket part of the server, and set something up so that that it runs automatically when the server is rebooted, or get my sysadmin to do those things. If this is right, then is there a concise description of the needed command/setup that can be conveyed to someone who doesn't already have much knowledge beyond Racket? I ask both for my own projects and for my teaching of new programmers, for whom I gather Racket is intended to serve as a good environment. If the student has made a thing that they want to share, by making it run on the web, and they have a `public_html` directory on a university server, what is the magic to make the thing run online, where their friends and family can check it out?"
        }
      ]
    },
    {
      "conversation_id": "150",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herman: Susana Ah cool. that call to close on the struct looked dodgy anyway.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Herman"
        ]
      },
      "timeline": [
        {
          "user": "Herman",
          "timestamp": "2019-02-19T02:22:51.296700",
          "text": "<@Susana> Ah cool. that call to close on the struct looked dodgy anyway."
        }
      ]
    },
    {
      "conversation_id": "151",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: Compiling ClojureScript makes a JS file that you can include into an html file via [CODE] tags, in your case [CODE]. When you were running C++/Common Lisp was this via cgi bin perchance?\nTomas: Racket does have bindings for CGI (<[URL] which is a real old school way of generating dynamic web content\nTomas: (Also, if you want to share smaller one-off scripts online, there is <[URL]\nOllie: Yeah, my C++/Common Lisp approach did involve cgi. I don't remember the details though. Do you think this is a reasonable approach for the need I've outlined above?\nOllie: The pasterack thing does look like it could be helpful for some of my purposes, albeit awkward and limited, I'm guessing.\nTomas: I think if you want to get something simple up, and your current server environment supports CGI then it might be a good bet to experiment with. Would ask your admin if CGI is available.\nOllie: Thanks. Do you know of simple instructions/examples that show how to take a simple thing that runs locally and use the CGI approach to put it in a public_html directory, assuming that CGI is available?\nTomas: Unfortunately I don’t. I’ve never really used CGI. My understanding from way back when I used to work with shared hosts was that there was usually a [CODE] directory to put scripts in.\nOllie: Got it. I guess the more reasonable way forward would be to run the Racket server command on the server, and set things up so that happens automatically when the server is rebooted. That being the case, is there documentation for doing this that a new Racket programmer could follow? Based on what I see of the Racket community's interest in new programmers (who will be motivated by being able to share their creations), I would think that this would be appreciated by people other than me (and me! :slightly_smiling_face:)\nOllie: Thanks for the additional detail! This reinforces my impression that CGI isn't really the way to go, and running a Racket [CODE] program on a local port is better... So it'd be great to have instructions for that that could be followed by someone who doesn't know much more than how to write a simple Racket program.\nMadelaine: Ollie This is the [CODE] unit file I use to automatically run the Racket web server for <[URL] [CODE_BLOCK]\nOllie: Interesting! Not least because of the Ricoeur I read back in my philosophy major days :slightly_smiling_face:. I think I would have to take a big step back, though, to figure out what to do with a [CODE] file and how/where to use the raco material to which you linked.\nOllie: Thanks. For the moment that's going in my collection of tabs with stuff I don't yet understand, but I will try to look back at all of this and see if I can figure out how to use it.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 13,
        "duration_minutes": 86.95,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Madelaine",
          "Ollie",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-19T08:16:28.297300",
          "text": "Compiling ClojureScript makes a JS file that you can include into an html file via `script` tags, in your case `index.html`. When you were running C++/Common Lisp was this via cgi bin perchance?"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-19T08:17:35.297500",
          "text": "Racket does have bindings for CGI (<https://docs.racket-lang.org/net/cgi.html>) which is a real old school way of generating dynamic web content"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-19T08:20:09.297700",
          "text": "(Also, if you want to share smaller one-off scripts online, there is <http://pasterack.org/>)"
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T08:21:46.297900",
          "text": "Yeah, my C++/Common Lisp approach did involve cgi. I don't remember the details though. Do you think this is a reasonable approach for the need I've outlined above?"
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T08:23:23.298100",
          "text": "The pasterack thing does look like it could be helpful for some of my purposes, albeit awkward and limited, I'm guessing."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-19T08:23:42.298300",
          "text": "I think if you want to get something simple up, and your current server environment supports CGI then it might be a good bet to experiment with.  Would ask your admin if CGI is available."
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T08:26:48.298500",
          "text": "Thanks. Do you know of simple instructions/examples that show how to take a simple thing that runs locally and use the CGI approach to put it in a public_html directory, assuming that CGI is available?"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-19T08:28:59.298700",
          "text": "Unfortunately I don’t. I’ve never really used CGI. My understanding from way back when I used to work with shared hosts was that there was usually a `/cgi_bin` directory to put scripts in."
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T09:04:48.298900",
          "text": "Got it. I guess the more reasonable way forward would be to run the Racket server command on the server, and set things up so that happens automatically when the server is rebooted. That being the case, is there documentation for doing this that a new Racket programmer could follow? Based on what I see of the Racket community's interest in new programmers (who will be motivated by being able to share their creations), I would think that this would be appreciated by people other than me (and me! :slightly_smiling_face:)"
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T09:07:20.299400",
          "text": "Thanks for the additional detail! This reinforces my impression that CGI isn't really the way to go, and running a Racket `web-server` program on a local port is better... So it'd be great to have instructions for that that could be followed by someone who doesn't know much more than how to write a simple Racket program."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-02-19T09:09:45.299600",
          "text": "<@Ollie> This is the `systemd` unit file I use to automatically run the Racket web server for <https://digitalricoeur.org>\n```\n[Unit]\nDescription=Digital Ricoeur portal web server\n\n[Service]\nUser=ricoeurd\nGroup=ricoeurd\nAmbientCapabilities=CAP_NET_BIND_SERVICE\nWorkingDirectory=/home/ubuntu/ricoeur-portal/\nExecStart=/usr/local/bin/ricoeur-portal --production\n\n[Install]\nWantedBy=multi-user.target\n```"
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T09:14:30.300000",
          "text": "Interesting! Not least because of the Ricoeur I read back in my philosophy major days :slightly_smiling_face:. I think I would have to take a big step back, though, to figure out what to do with a `systemd` file and how/where to use the raco material to which you linked."
        },
        {
          "user": "Ollie",
          "timestamp": "2019-02-19T09:43:25.300400",
          "text": "Thanks. For the moment that's going in my collection of tabs with stuff I don't yet understand, but I will try to look back at all of this and see if I can figure out how to use it."
        }
      ]
    },
    {
      "conversation_id": "152",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: I actually used Racket for CGI programming before I learned the [CODE] library. The good part about CGI programming in Racket is that you're doing it in Racket. The bad part about it is that you're doing CGI programming and you have to live with all of its limitations, without the innovations of the [CODE] library for managing interactive programs in particular. More practically, using CGI still means you need to have Racket installed on your server, including all of the packages you're using. (You could also compile your program into a stand-alone executable and install that on your server, but that doesn't get you much farther.) If your server administrator is willing to do that, then putting [CODE] on the first line of your script (before the [CODE] line) and making it executable with [CODE] will make it work the way CGI expects, though where you have to put it depends on how Apache is configured on your specific server. But, if your server administrator is willing to do that, they're most of the way toward letting you run a Racket [CODE] program on a local port, which is much better in most circumstances.\nMadelaine: The [CODE] program is created by [CODE]: <[URL]\nMadelaine: There is also some basic guidance on running behind Apache in the [CODE] documentation: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 22.43,
        "contains_question": false,
        "action_keywords": [
          "create",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-02-19T09:05:15.299200",
          "text": "I actually used Racket for CGI programming before I learned the `web-server` library. The good part about CGI programming in Racket is that you're doing it in Racket. The bad part about it is that you're doing CGI programming and you have to live with all of its limitations, without the innovations of the `web-server` library for managing interactive programs in particular.\nMore practically, using CGI still means you need to have Racket installed on your server, including all of the packages you're using. (You could also compile your program into a stand-alone executable and install that on your server, but that doesn't get you much farther.) If your server administrator is willing to do that, then putting `#!/usr/bin/env racket` on the first line of your script (before the `#lang` line) and making it executable with `chmod +x` will make it work the way CGI expects, though where you have to put it depends on how Apache is configured on your specific server. But, if your server administrator is willing to do that, they're most of the way toward letting you run a Racket `web-server` program on a local port, which is much better in most circumstances."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-02-19T09:10:59.299800",
          "text": "The `ricoeur-portal` program is created by `raco setup`: <https://docs.racket-lang.org/raco/setup-info.html#(idx._(gentag._13._(lib._scribblings%2Fraco%2Fraco..scrbl)))>"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-02-19T09:27:41.300200",
          "text": "There is also some basic guidance on running behind Apache in the `web-server` documentation: <https://docs.racket-lang.org/web-server-internal/Troubleshooting_and_Tips.html>"
        }
      ]
    },
    {
      "conversation_id": "153",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: I watched William Byrd's lecture on interpreters in LISP. Very informative. I lost complete comprehension about 60% of the way through, but was impressed I made it that far. I had no idea LISP was so powerful.\nLillian: There’s no upper bound on the complexity of that error message.\nLavette: Is this it? <[URL]\nTerrence: yep!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 37.7,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Lavette",
          "Lillian",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-19T13:38:59.302000",
          "text": "I watched William Byrd's lecture on interpreters in LISP. Very informative. I lost complete comprehension about 60% of the way through, but was impressed I made it that far. I had no idea LISP was so powerful."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-02-19T14:06:04.302100",
          "text": "There’s no upper bound on the complexity of that error message."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-19T14:14:20.302300",
          "text": "Is this it? <https://www.youtube.com/watch?v=OyfBQmvr2Hc>"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-19T14:16:41.302600",
          "text": "yep!"
        }
      ]
    },
    {
      "conversation_id": "154",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lavette: Thanks for the recommendation, I'll watch it when I have some time.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lavette"
        ]
      },
      "timeline": [
        {
          "user": "Lavette",
          "timestamp": "2019-02-19T15:51:44.302800",
          "text": "Thanks for the recommendation, I'll watch it when I have some time."
        }
      ]
    },
    {
      "conversation_id": "155",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marylin: Hi! How to get the name of a procedure? For example: #&lt;procedure:number?&gt; -&gt; \"number?\" thx!\nMarylin: Tuan You may look at the [CODE] package. [CODE_BLOCK] The [CODE] is the threading macro that kind of works like the [CODE] elixir operator.\nKristeen: Marylin you want [CODE]\nMarylin: thank you !\nTuan: ah yeah, that was the one recommended above, it looked perfect, but I appreciate you double checking",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 115.63,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Marylin",
          "Tuan"
        ]
      },
      "timeline": [
        {
          "user": "Marylin",
          "timestamp": "2019-02-19T16:52:30.304600",
          "text": "Hi! How to get the name of a procedure? For example: #&lt;procedure:number?&gt; -&gt; \"number?\" thx!"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-19T16:54:28.305500",
          "text": "<@Tuan> You may look at the `threading` package.\n```\n(require threading)\n...\n(define (lisp input)\n  (~&gt; input\n      success\n      ((lift check_input) _)\n      ((lift check_operation_code) _)\n      ((lift check_arguments_length) _)\n      ((lift check_arguments_types) _)\n      ((lift apply_operation) _)))\n```\nThe `~&gt;` is the threading macro that kind of works like the `|&gt;` elixir operator."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-19T16:57:30.305900",
          "text": "<@Marylin> you want `object-name`"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-19T16:58:11.306100",
          "text": "thank you !"
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-19T18:48:08.306300",
          "text": "ah yeah, that was the one recommended above, it looked perfect, but I appreciate you double checking"
        }
      ]
    },
    {
      "conversation_id": "156",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: It's really fun and very mind-blowing.\nTerrence: I am liking LISP/Racket so much I am making a blog about my learning journey lol.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 109.68,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T00:16:15.306800",
          "text": "It's really fun and very mind-blowing."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T02:05:56.307700",
          "text": "I am liking LISP/Racket so much I am making a blog about my learning journey lol."
        }
      ]
    },
    {
      "conversation_id": "157",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Ozie: A very dumb question from a very newbie here [CODE_BLOCK] Where do the [CODE]s came from?\nMai: [CODE] has a side effect, which is to write the data to the current output port (e.g., stdout), but the output of [CODE] itself is [CODE]\nMai: Perhaps what you want is [CODE]\nOzie: oh!\nMai: Unlike [CODE], which will collect outputs from the function together to create a list, [CODE] discards them. Hence, [CODE] is useful when the function is primarily invoked for side-effect\nOzie: got it\nOzie: :pray:\nOzie: works like a charm!\nHerman: I believe [CODE] returns void\nHerman: Ozie So the return value of the map is a list of the void return values from doing each writeln.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 27.42,
        "contains_question": true,
        "action_keywords": [
          "create",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Mai",
          "Ozie"
        ]
      },
      "timeline": [
        {
          "user": "Ozie",
          "timestamp": "2019-02-20T02:19:30.309000",
          "text": "A very dumb question from a very newbie here\n```\n(~&gt; '(1 2 3) (map writeln _)) \n;;; 1\n;;; 2\n;;; 3\n;;; '(#&lt;void&gt; #&lt;void&gt; #&lt;void&gt;)\n```\nWhere do the `#&lt;void&gt;`s came from?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-20T02:25:38.309500",
          "text": "`writeln` has a side effect, which is to write the data to the current output port (e.g., stdout), but the output of `writeln` itself is `(void)`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-20T02:27:48.309800",
          "text": "Perhaps what you want is `(~&gt; '(1 2 3) (for-each writeln _))`"
        },
        {
          "user": "Ozie",
          "timestamp": "2019-02-20T02:29:32.310000",
          "text": "oh!"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-20T02:29:33.310200",
          "text": "Unlike `map`, which will collect outputs from the function together to create a list, `for-each` discards them. Hence, `for-each` is useful when the function is primarily invoked for side-effect"
        },
        {
          "user": "Ozie",
          "timestamp": "2019-02-20T02:29:37.310400",
          "text": "got it"
        },
        {
          "user": "Ozie",
          "timestamp": "2019-02-20T02:29:47.310600",
          "text": ":pray:"
        },
        {
          "user": "Ozie",
          "timestamp": "2019-02-20T02:30:11.310900",
          "text": "works like a charm!"
        },
        {
          "user": "Herman",
          "timestamp": "2019-02-20T02:45:37.311400",
          "text": "I believe `writeln` returns void"
        },
        {
          "user": "Herman",
          "timestamp": "2019-02-20T02:46:55.312400",
          "text": "<@Ozie> So the return value of the map is a list of the void return values from doing each writeln."
        }
      ]
    },
    {
      "conversation_id": "158",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Terrence that's great, url?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-20T04:19:49.312700",
          "text": "<@Terrence> that's great, url?"
        }
      ]
    },
    {
      "conversation_id": "159",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lavette: URL?\nPriscila: [CODE_BLOCK]\nPriscila: So [CODE] is not the macro call?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 173.08,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Lavette",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Lavette",
          "timestamp": "2019-02-20T04:44:20.312900",
          "text": "URL?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-20T06:30:27.318100",
          "text": "```\n#lang racket\n(require (for-syntax syntax/parse))\n\n(struct thing (x) #:transparent #:mutable)\n\n(define-syntax (create-thing stx)\n  (syntax-parse stx\n    [(_create-thing id)\n     (syntax/loc stx\n       (begin\n         (define id (thing #f))\n         (set-thing-x! id id)))]))\n\n(create-thing foo)\nfoo\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-20T07:37:25.319600",
          "text": "So `(make-thing foo self)` is not the macro call?"
        }
      ]
    },
    {
      "conversation_id": "160",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jana: :wave::skin-tone-3: racketeers",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jana"
        ]
      },
      "timeline": [
        {
          "user": "Jana",
          "timestamp": "2019-02-20T05:26:36.314300",
          "text": ":wave::skin-tone-3: racketeers"
        }
      ]
    },
    {
      "conversation_id": "161",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: How do I make a macro that transforms: [CODE_BLOCK] to: [CODE_BLOCK] Assuming [CODE] is [CODE]\nCaprice: is it OK to just do syntax-&gt;list, replace, and transform back? I'm trying to use syntax-parameterize and failing.\nPriscila: Caprice ^\nCaprice: No, it's only supposed to replace uses of \"self\" with itself\nCaprice: it is\nCaprice: but for example if \"thing\" had 2 fields\nCaprice: i'd do [CODE]\nCaprice: the first field in the struct would be 1, but the second, that says [CODE], I want to set! that to itself\nPriscila: I think you want [CODE]: <[URL]\nCaprice: I suppose I should make a function and not a macro though so I'll just make do\nCaprice: that's interesting, thanks\nMai: Caprice [CODE_BLOCK]\nCaprice: Mai That's neat, that does the trick. Thanks!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 13,
        "duration_minutes": 150.85,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Mai",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T05:45:41.316600",
          "text": "How do I make a macro that transforms:\n```\n(make-thing foo self)\n```\nto:\n```\n(define foo (thing #f))\n(set-thing-x! foo foo)\n```\nAssuming `thing` is `(struct thing (x) #:transparent #:mutable)`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T05:47:31.317700",
          "text": "is it OK to just do syntax-&gt;list, replace, and transform back? I'm trying to use syntax-parameterize and failing."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-20T06:30:42.318400",
          "text": "<@Caprice> ^"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T07:35:56.319100",
          "text": "No, it's only supposed to replace uses of \"self\" with itself"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T07:38:09.319800",
          "text": "it is"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T07:38:21.320100",
          "text": "but for example if \"thing\" had 2 fields"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T07:38:30.320400",
          "text": "i'd do `(make-thing 1 self)`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T07:38:53.321100",
          "text": "the first field in the struct would be 1, but the second, that says `self`, I want to set! that to itself"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-20T07:39:51.321900",
          "text": "I think you want `shared`:  <https://docs.racket-lang.org/reference/shared.html?q=shared>"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T07:39:57.322000",
          "text": "I suppose I should make a function and not a macro though so I'll just make do"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T07:40:35.322200",
          "text": "that's interesting, thanks"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-20T08:02:04.323300",
          "text": "<@Caprice>\n\n```\n#lang racket\n\n(require (for-syntax racket/function\n                     syntax/parse))\n\n(struct thing (x y) #:transparent #:mutable)\n(define self (gensym 'self))\n\n(define-syntax (replace stx)\n  (syntax-parse stx\n    [(_ field id)\n     (cond\n       [(and (identifier? #'field) (free-identifier=? #'self #'field)) #'id]\n       [else #'field])]))\n\n(define-syntax (make-thing stx)\n  (syntax-parse stx \n    [(_ id:id field ...)\n     #'(define id (shared ([id (thing (replace field id) ...)]) id))]))\n\n(make-thing foo 10 self)\n(make-thing bar self 20)\n(make-thing baz self self)\n(make-thing blah 10 20)\n\nfoo\nbar\nbaz\nblah\n\n;; #0=(thing 10 #0#)\n;; #0=(thing #0# 20)\n;; #0=(thing #0# #0#)\n;; (thing 10 20)\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T08:16:32.324200",
          "text": "<@Mai> That's neat, that does the trick. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "162",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: well well well!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-20T08:00:51.322700",
          "text": "well well well!"
        }
      ]
    },
    {
      "conversation_id": "163",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Actually, this allows [CODE] to be used outside of the macro\nMai: This is a version that prohibits it\nMai: [CODE_BLOCK]\nMai: Code adapted from <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 1.28,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-02-20T08:26:07.324800",
          "text": "Actually, this allows `self` to be used outside of the macro"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-20T08:26:20.325000",
          "text": "This is a version that prohibits it"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-20T08:26:23.325200",
          "text": "```\n#lang racket\n\n(require racket/stxparam)\n\n(struct thing (x y) #:transparent #:mutable)\n\n(define-syntax-parameter self\n  (λ (stx) (raise-syntax-error (syntax-e stx) \"can only be used inside make-thing\")))\n\n(define-syntax-rule (make-thing id field ...)\n  (define id\n    (shared ([x (thing (syntax-parameterize ([self (make-rename-transformer #'x)])\n                         field) ...)]) x)))\n\n(make-thing foo 10 self)\n(make-thing bar self 20)\n(make-thing baz self self)\n(make-thing blah 10 20)\n\nfoo\nbar\nbaz\nblah\n```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-20T08:27:24.325500",
          "text": "Code adapted from <https://www.greghendershott.com/fear-of-macros/all.html#%28part._.Syntax_parameters%29>"
        }
      ]
    },
    {
      "conversation_id": "164",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: Shavon <[URL]\nTerrence: it's very remedial, but I learn slow\nKami: Terrence Well, I'm glad you found Lisp on your path. Not every programmer stops by and try to learn such languages because they look so \"weird\" and \"different\" and \"old\". SICP was a fundamental read for me too. With Racket I'm home, so, welcome there!\nTerrence: Ty so much :slightly_smiling_face:\nTerrence: I guess the good thing about being unemployed (at least from programming) is that I don't have to divide my loyalties between what I want to learn and what I have to learn. I seriously doubt I will ever work in LISP professionally, but in this stage of my life, as I formulate research in healthcare, adding to the body of knowledge is an important, fulfilling venture in itself. I hope that I can contribute something to at some point.\nLavette: Terrence Very nice blog so far! I look forward to more of it.\nTerrence: I posted a new one today. If you get bored and want to check my work, please don't hesitate to correct me.\nTerrence: and ty :slightly_smiling_face:\nLavette: I have been programming since I was 10, and although I don't do it for my job anymore (I've turned into an architect and manager, sigh), I still enjoy and do it for fun at home. One thing you might try for programming exercises: <[URL] - it's no longer \"live\" but the exercises (also from previous years) are available. I participated for the first time this year (didn't finish), and I made it a point of using Racket for the exercises, it's a great way to practice.\nTuan: i've been working through the <[URL] racket track, I've found it's a good way to jump into the ecosystem myself.\nTuan: Also makes it nice there is now a mentor system, there are a few people that have been really nice to point some stuff out\nTerrence: I will definitely try both sites.\nTuan: (also very new to Racket, as in just started a week ago)\nTerrence: I am new to Racket, LISP, and computer science in general. Little to no math background, but it is my hope to answer every question in the SICP to improve myself.\nTuan: Hmm, I'm only a few exercises in, we'll see once I get further along. It does gate you a good amount now if you ask for feedback\nSusana: Tuan if you have any trouble you can ask about it here\nTuan: Much appreciated. :slightly_smiling_face: will probably be taking that offer up once I get to some of harder data manipulation ones.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 17,
        "duration_minutes": 139.13,
        "contains_question": false,
        "action_keywords": [
          "finish",
          "please",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Lavette",
          "Susana",
          "Terrence",
          "Tuan"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T08:53:04.326000",
          "text": "<@Shavon> <https://programmingisreallyfun.wordpress.com/>"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T08:53:16.326400",
          "text": "it's very remedial, but I learn slow"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-20T09:00:53.329600",
          "text": "<@Terrence> Well, I'm glad you found Lisp on your path. Not every programmer stops by and try to learn such languages because they look so \"weird\" and \"different\" and \"old\". SICP was a fundamental read for me too. With Racket I'm home, so, welcome there!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T09:02:07.329800",
          "text": "Ty so much :slightly_smiling_face:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T09:05:13.331800",
          "text": "I guess the good thing about being unemployed (at least from programming) is that I don't have to divide my loyalties between what I want to learn and what I have to learn. I seriously doubt I will ever work in LISP professionally, but in this stage of my life, as I formulate research in healthcare, adding to the body of knowledge is an important, fulfilling venture in itself. I hope that I can contribute something to at some point."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-20T10:42:08.001600",
          "text": "<@Terrence> Very nice blog so far! I look forward to more of it."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T10:42:47.002400",
          "text": "I posted a new one today. If you get bored and want to check my work, please don't hesitate to correct me."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T10:42:56.002800",
          "text": "and ty :slightly_smiling_face:"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-20T10:45:01.004600",
          "text": "I have been programming since I was 10, and although I don't do it for my job anymore (I've turned into an architect and manager, sigh), I still enjoy and do it for fun at home. One thing you might try for programming exercises: <https://adventofcode.com> - it's no longer \"live\" but the exercises (also from previous years) are available. I participated for the first time this year (didn't finish), and I made it a point of using Racket for the exercises, it's a great way to practice."
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-20T10:48:14.005800",
          "text": "i've been working through the <http://exercism.io|exercism.io> racket track, I've found it's a good way to jump into the ecosystem myself."
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-20T10:48:40.006500",
          "text": "Also makes it nice there is now a mentor system, there are a few people that have been really nice to point some stuff out"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T10:48:43.006600",
          "text": "I will definitely try both sites."
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-20T10:48:55.006900",
          "text": "(also very new to Racket, as in just started a week ago)"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T10:55:46.007600",
          "text": "I am new to Racket, LISP, and computer science in general. Little to no math background, but it is my hope to answer every question in the SICP to improve myself."
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-20T11:09:51.009400",
          "text": "Hmm, I'm only a few exercises in, we'll see once I get further along.  It does gate you a good amount now if you ask for feedback"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-20T11:10:06.009700",
          "text": "<@Tuan> if you have any trouble you can ask about it here"
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-20T11:12:12.010700",
          "text": "Much appreciated. :slightly_smiling_face: will probably be taking that offer up once I get to some of harder data manipulation ones."
        }
      ]
    },
    {
      "conversation_id": "165",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Susana: last time I’ve seen it the exercism track for Racket needed some work. I submitted a couple of PRs improving some of the exercises but they did take a long time to be merged\nTomas: Fellow Apple IIe learner here. Really glad to see posts from other folks who took roundabout or non-traditional paths into computing. Keep writing!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 1.8,
        "contains_question": false,
        "action_keywords": [
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Susana",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Susana",
          "timestamp": "2019-02-20T11:08:51.008600",
          "text": "last time I’ve seen it the exercism track for Racket needed some work. I submitted a couple of PRs improving some of the exercises but they did take a long time to be merged"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-02-20T11:10:39.009800",
          "text": "Fellow Apple IIe learner here. Really glad to see posts from other folks who took roundabout or non-traditional paths into computing. Keep writing!"
        }
      ]
    },
    {
      "conversation_id": "166",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: I posted blog 3 just a few minutes. As always, enjoy and rip it apart. I'm here to learn :slightly_smiling_face:\nTerrence: <[URL]\nHallie: Terrence nice blog posts! Just in case - there is sicp package available that gives more support/compatibility with SICP: <[URL]\nTerrence: Oh my goodness, this is fantastic. Thank you Hallie. I am still only halfway through Chapter 1, but this is so good to know and I will add this to my blogs.\nHallie: That's the power of Racket :slightly_smiling_face:\nPenni: Terrence Would you like to see my solution to the sum-of-squares problem? It might be interesting because it's very different, and it applies a couple of those often-reusable idioms that make programming require less thought.\nTerrence: Sure!\nTerrence: I will also be happy to include that alternate solution in my blog. I'm all about more efficient solutions.\nTerrence: I think I need to add both of your solutions to the blog so I can learn from then. TY!\nPenni: If you're only just getting accustomed to passing arguments, this solution is probably way too much. When I first saw this sort of thing, I thought it was too tricky. I think it's pretty typical of pure-functional programming (I could be wrong: I can't speak with authority about that), and it's gets easier to read with time. But right now, it might be best to save someplace and look at again later.\nTerrence: It is way out of my league, but at the moment. If it's too hard for me now, then that is good.\nTuan: heh, that was the problem I worked on last with exercism\nTuan: though, the scope was different\nPenni: Terrence OK, it's probably like looking a few chapters ahead in a book teaching a foreign language. I thought of it because of your observation that the problem was so hard, it seemed discouraging. After a while, problems like that will \"light up\" familiar, friendly ways of looking at them, which make them easy.\nPenni: (They also create new blind spots: I totally did not see Priscila's solution. That one exploits algebra—the problem domain rather than programming tricks!)\nTerrence: I like hard problems because it means I am learning something.\nPenni: Tuan Thanks for telling me about <[URL] I just signed up for it; now waiting for the email...",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 17,
        "duration_minutes": 135.57,
        "contains_question": true,
        "action_keywords": [
          "create",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Penni",
          "Terrence",
          "Tuan"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T12:07:35.011400",
          "text": "I posted blog 3 just a few minutes. As always, enjoy and rip it apart. I'm here to learn :slightly_smiling_face:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T12:07:59.011600",
          "text": "<https://programmingisreallyfun.wordpress.com/2019/02/20/part-3-lisp-syntax-procedures-and-arguments/>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-20T13:05:47.014200",
          "text": "<@Terrence> nice blog posts! Just in case - there is sicp package available that gives more support/compatibility with SICP: <https://docs.racket-lang.org/sicp-manual/>"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T13:29:38.015000",
          "text": "Oh my goodness, this is fantastic. Thank you <@Hallie>. I am still only halfway through Chapter 1, but this is so good to know and I will add this to my blogs."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-20T13:30:51.015300",
          "text": "That's the power of Racket :slightly_smiling_face:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-20T13:34:08.017100",
          "text": "<@Terrence> Would you like to see my solution to the sum-of-squares problem? It might be interesting because it's very different, and it applies a couple of those often-reusable idioms that make programming require less thought."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T13:51:01.017300",
          "text": "Sure!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T13:51:29.017900",
          "text": "I will also be happy to include that alternate solution in my blog. I'm all about more efficient solutions."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T14:08:12.018900",
          "text": "I think I need to add both of your solutions to the blog so I can learn from then. TY!"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-20T14:10:07.021100",
          "text": "If you're only just getting accustomed to passing arguments, this solution is probably way too much. When I first saw this sort of thing, I thought it was too tricky. I think it's pretty typical of pure-functional programming (I could be wrong: I can't speak with authority about that), and it's gets easier to read with time. But right now, it might be best to save someplace and look at again later."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T14:12:52.022200",
          "text": "It is way out of my league, but at the moment. If it's too hard for me now, then that is good."
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-20T14:13:05.022500",
          "text": "heh, that was the problem I worked on last with exercism"
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-20T14:15:48.022800",
          "text": "though, the scope was different"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-20T14:21:46.025000",
          "text": "<@Terrence> OK, it's probably like looking a few chapters ahead in a book teaching a foreign language. I thought of it because of your observation that the problem was so hard, it seemed discouraging. After a while, problems like that will \"light up\" familiar, friendly ways of looking at them, which make them easy."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-20T14:22:39.026000",
          "text": "(They also create new blind spots: I totally did not see <@Priscila>'s solution. That one exploits algebra—the problem domain rather than programming tricks!)"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T14:23:03.026800",
          "text": "I like hard problems because it means I am learning something."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-20T14:23:09.026900",
          "text": "<@Tuan> Thanks for telling me about <http://exercism.io|exercism.io>! I just signed up for it; now waiting for the email..."
        }
      ]
    },
    {
      "conversation_id": "167",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jamila: Is there a scribble package akin to mathpartir, for typesetting inference rules and (fairly simple) derivation trees? For context, I'm typesetting lecture notes that will run with MathJax, so I can use any basic LaTeX stuff but not any packages...",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jamila"
        ]
      },
      "timeline": [
        {
          "user": "Jamila",
          "timestamp": "2019-02-20T12:56:04.012800",
          "text": "Is there a scribble package akin to mathpartir, for typesetting inference rules and (fairly simple) derivation trees?  For context, I'm typesetting lecture notes that will run with MathJax, so I can use any basic LaTeX stuff but not any packages..."
        }
      ]
    },
    {
      "conversation_id": "168",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: This might look like a mess, and indeed Priscila's solution is much more elegant and efficient. But it popped into my head instantly, just applying habitual ways of mentally framing it that have been helpful many times before. I would not have naturally hit on this approach if it weren't for other people having shown me these tricks long ago.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-02-20T14:06:26.018200",
          "text": "This might look like a mess, and indeed <@Priscila>'s solution is much more elegant and efficient. But it popped into my head instantly, just applying habitual ways of mentally framing it that have been helpful many times before. I would not have naturally hit on this approach if it weren't for other people having shown me these tricks long ago."
        }
      ]
    },
    {
      "conversation_id": "169",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: I always love to see how other people solve things, i almost always learn something",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-20T14:08:39.019700",
          "text": "I always love to see how other people solve things, i almost always learn something"
        }
      ]
    },
    {
      "conversation_id": "170",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: just downloaded Exercism lesson one.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-20T15:08:44.027600",
          "text": "just downloaded Exercism lesson one."
        }
      ]
    },
    {
      "conversation_id": "171",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jana: look who’s there\nJana: I took the time to register here, at last\nJana: is it possible to access a struct field value from its name?\nKristeen: Jana no, not really",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 75.65,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jana",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Jana",
          "timestamp": "2019-02-20T15:36:11.027700",
          "text": "look who’s there"
        },
        {
          "user": "Jana",
          "timestamp": "2019-02-20T15:36:21.027900",
          "text": "I took the time to register here, at last"
        },
        {
          "user": "Jana",
          "timestamp": "2019-02-20T16:32:37.029500",
          "text": "is it possible to access a struct field value from its name?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-20T16:51:50.029800",
          "text": "<@Jana> no, not really"
        }
      ]
    },
    {
      "conversation_id": "172",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: :clap:\nRaul: Penni That strikes me as a very SQL-ish way of solving the problem. I hope you don't find that insulting.\nPenni: Raul Not at all. I'd love to see another solution.\nPenni: Raul Say, would it be fair to say that a lot of pure-functional programming is SQL-ish? Especially the \"map–filter\" style?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 272.93,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Penni",
          "Raul",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-02-20T15:54:05.028200",
          "text": ":clap:"
        },
        {
          "user": "Raul",
          "timestamp": "2019-02-20T16:30:41.029000",
          "text": "<@Penni> That strikes me as a very SQL-ish way of solving the problem. I hope you don't find that insulting."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-20T19:49:14.030700",
          "text": "<@Raul> Not at all. I'd love to see another solution."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-20T20:27:01.032000",
          "text": "<@Raul> Say, would it be fair to say that a lot of pure-functional programming is SQL-ish? Especially the \"map–filter\" style?"
        }
      ]
    },
    {
      "conversation_id": "173",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Janett: After some poking around (for a course on logic and computation), I just went with \\frac, slightly tweaked. That's what mathpartir uses at its heart, anyway.\nJamila: true enough, but I was hoping someone had [CODE]'ed some nicer wrappers around that, so that it felt nicer to write in Racket :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 10.93,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jamila",
          "Janett"
        ]
      },
      "timeline": [
        {
          "user": "Janett",
          "timestamp": "2019-02-20T17:30:29.029900",
          "text": "After some poking around (for a course on logic and computation), I just went with \\frac, slightly tweaked. That's what mathpartir uses at its heart, anyway."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-02-20T17:41:25.030100",
          "text": "true enough, but I was hoping someone had `define-syntax`'ed some nicer wrappers around that, so that it felt nicer to write in Racket :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "174",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Cool, thanks! When I tried this using syntax parameters, [CODE] is what I was missing. I guess I still have a long way to go to get a feel of how bindings really work.\nCaprice: If I have types like these: [CODE_BLOCK] What would be a type definition that accepts [CODE] only if Bar-f is of type SubFoo2?\nCaprice: I'm basically trying to translate some code from contracts to types\nCaprice: I mean I understand I could say [CODE] and then be able to say [CODE] or something similar, but I want [CODE] to only be subtypes of [CODE] and not just any type\nKristeen: Caprice what you suggest there is exactly what I would do",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 530.28,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-20T22:51:32.032300",
          "text": "Cool, thanks! When I tried this using syntax parameters, `shared` is what I was missing. I guess I still have a long way to go to get a feel of how bindings really work."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-21T05:01:35.035800",
          "text": "If I have types like these:\n```\n(struct Foo ([x : Number]))\n(struct Bar ([f : Foo]))\n(struct SubFoo1 Foo ())\n(struct SubFoo2 Foo ())\n(struct SubFoo3 Foo ())\n```\nWhat would be a type definition that accepts `Bar` only if Bar-f is of type SubFoo2?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-21T05:01:44.036200",
          "text": "I'm basically trying to translate some code from contracts to types"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-21T05:05:10.037700",
          "text": "I mean I understand I could say `(struct Bar (X) ([f : X]))` and then be able to say `: (Bar SubFoo2)` or something similar, but I want `Bar-f` to only be subtypes of `Foo` and not just any type"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T07:41:49.038300",
          "text": "<@Caprice> what you suggest there is exactly what I would do"
        }
      ]
    },
    {
      "conversation_id": "175",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Shavon related to your gccjit code, you might be interested in <[URL] which could presumably have a libgccjit backend\nShavon: Kristeen thanks I took a peek at it last year and thought it was mostly a set of llvm bindings but I see it's more than that. I like the idea of the sham language. And implementing a backend for that language using gccjit sounds definitely feasible? is rjnw one of your phd students?\nKristeen: Yes, he is\nKristeen: I also think you should see if the llvm jit that already works there can do what you need\nRaul: Penni I'm not an expert in this area, but I see similarities between SQL and map-reduce. SQL seems to have some odd restrictions on applying functions to sets of data. I couldn't make a clean SQL implementation of the \"square top 2\" example unless I cheated by constraining the arguments to be non-negative. What struck me particularly was the use of take and sort (which also reminded me of APL).\nShavon: thanks Kristeen i will take a more in-depth look at his code then. :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 72.33,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Raul",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T10:54:55.039300",
          "text": "<@Shavon> related to your gccjit code, you might be interested in <https://github.com/rjnw/sham> which could presumably have a libgccjit backend"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-21T11:02:13.041300",
          "text": "<@Kristeen> thanks I took a peek at it last year and thought it was mostly a set of llvm bindings but I see it's more than that. I like the idea of the sham language. And implementing a backend for that language using gccjit sounds definitely feasible? is rjnw one of your phd students?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T11:13:23.041500",
          "text": "Yes, he is"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T11:14:00.042400",
          "text": "I also think you should see if the llvm jit that already works there can do what you need"
        },
        {
          "user": "Raul",
          "timestamp": "2019-02-21T11:26:28.044200",
          "text": "<@Penni> I'm not an expert in this area, but I see similarities between SQL and map-reduce. SQL seems to have some odd restrictions on applying functions to sets of data. I couldn't make a clean SQL implementation of the \"square top 2\" example unless I cheated by constraining the arguments to be non-negative. What struck me particularly was the use of take and sort (which also reminded me of APL)."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-02-21T12:07:15.044700",
          "text": "thanks <@Kristeen> i will take a more in-depth look at his code then. :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "176",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: Do you prefer using shorthand style, like [CODE_BLOCK] over the explicit λ style, like [CODE_BLOCK] in Racket? I came from Scheme, been using the `explicit lambda’ style for a rather long time, but found the style guide <[URL] seems to encourage the use of the former style.\nGonzalo: Ubiquitous, unambiguous shorthand is usually better. Even Scheme wouldn’t have the former style at all if it intended you to write the latter.\nGonzalo: Being taught to religiously write the latter is helpful to teach first-class functions, but it has few benefits for the working programmer.\nKaren: Loma the first style, by far. Introduces less indentation and makes the declaration of a function and its arguments line up visually with uses of the function, like [CODE] and [CODE].\nGonzalo: The define/use symmetry is a good point! It’s always aesthetically pleasing when that sort of thing happens.\nGonzalo: I am fond of similar symmetries in pattern-matching implementations.\nPenni: Raul (or anyone else reading), what I'm most wondering if the SQL-ish style is typical, \"first-resort\" pure-functional programming—and especially, if I've cultivated a good or bad habit by looking at things that way. I still wonder if it's all that readable, and it bothers me that it tends to produce a lot of unnecessary dynamic memory allocation, especially lists that are quickly consumed.\nLoma: Karen Gonzalo Got it. Cheers!\nKaren: Penni I think that SQL-ish style is fairly typical, and I think it’s a good approach. The two main drawbacks I see to it are: - The memory allocation problem, which you already mentioned. This can be fixed with better approaches to streaming data transformations that don’t require you to make a bunch of temporary collections (clojure’s transducers, java 8's stream API, python’s generators / generator comprehension, haskell’s laziness, etc.) - It’s often written “inside-out and backwards”, e.g. [CODE] instead of [CODE]. That’s a purely notational problem though and can be fixed with things like threading macros: [CODE].\nKaren: ah yeah I should clarify that I prefer to use something that isn’t technically what folks usually call the threading macro\nKaren: I like to define [CODE] as a regular function that takes a single argument and a list of functions, and then I combine that with the [CODE] package which lets you write anonymous functions using underscores\nKaren: e.g. [CODE] is the same as [CODE]\nPenni: Karen Say, when I've looked through Racket code (admittedly not a huge amount), I haven't seen real-life use of a [CODE] macro. Is there any particular reason why it isn't common practice in the Racket world, beyond not already being standard? Are there other common ways to avoid the inside-out problem?\nKaren: Penni I think it’s not common practice only because it’s not in the standard libraries shipped with racket out of the box, so you have to find a package implementing it. And there’s multiple packages implementing it so you have to choose one. People underestimate how much effort that is.\nPenni: Yep, it's very easy to underestimate the paradox of choice.\nKaren: especially when different people have different choices but need to share a codebase\nKaren: like, I’m the only one I know who prefers the plain-function-plus-fancy-app approach\nPenni: Karen Say, you're Jack Firth, aren't you? I just watched your talk about [CODE] on YouTube a couple days ago, and I'm sold. Is there any way to use [CODE] with Typed Racket?\nKaren: Penni yup that’s me!\nKaren: I think using [CODE] with TR _might_ be doable with [CODE], or it might require something more complicated. The tricky part is that expectations are parametric - there should be some way to say that [CODE] has the type [CODE].\nKaren: If you come up with something that works using [CODE], feel free to send a PR to the expect repo that adds an [CODE] module that just imports stuff using [CODE] and then exports it\nPenni: I just recently moved about 1,000 lines of code to Typed Racket and found that it went pretty swimmingly and the result is better, clearer code that I can now modify with confidence. But I was disappointed to find that unit-testing doesn't yet seem to work well with it. For example, [CODE] in [CODE] doesn't report the line number of the failure. The error messages from [CODE] are fantastic—but, it looks like I'll have to add some [CODE] code. OK, I'll be more than happy to make that my first contribution to Racket, and no doubt I'll learn some good stuff from it, too.\nKaren: some of the rackunit-TR issues are known and have been partially worked on: <[URL]\nKaren: the rackunit codebase is a little hairy, but if you feel up to working on the unit-testing story in TR that might be a more effective place to contribute than [CODE] - a _lot_ more people use plain [CODE] than [CODE]\nPenni: Ah, thanks, now skimming through the issues…\nPenni: Thanks for the suggestion. Does the line number get lost in [CODE] because of the optimizations that TR does?\nKaren: nah, it’s not even because of some TR-specific thing - it’s just that the typed versions of the [CODE]/ [CODE] / etc. macros don’t properly preserve source locations\nKaren: I think Kristeen wrote a PR to fix this\nKristeen: yes, but it broke some stuff so wasn't merged\nPenni: OIC\nKaren: <[URL]\nKaren: Kristeen wait it did? :o\nKristeen: getting that to work generally would be nice\nKristeen: I think that's why\nPenni: OK, that looks like it will take some work. I'm balancing \"getting something to work right now\" vs. reading up on and learning more Racket. When I next get to the 2nd of those two phases, I'll have a go at making a [CODE] wrapper around [CODE]; that might be easier.\nKristeen: Lillian my guess is that it's the [URL] redirect + 6.0 not supporting something in modern [URL]",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 36,
        "duration_minutes": 177.53,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen",
          "Kristeen",
          "Loma",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-02-21T12:41:42.049700",
          "text": "Do you prefer using shorthand style, like\n\n```\n(define (eat something)\n  (printf \"~a is delicious!\\n\" something))\n```\n\nover the explicit λ style, like\n\n```\n(define eat\n  (lambda (something)\n    (printf \"~a is delicious!\\n\" something)))\n```\n\nin Racket?\nI came from Scheme, been using the `explicit lambda’ style for a rather long time, but found the style guide\n<https://docs.racket-lang.org/style/Choosing_the_Right_Construct.html?q=style>\nseems to encourage the use of the former style."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-21T12:46:04.052500",
          "text": "Ubiquitous, unambiguous shorthand is usually better. Even Scheme wouldn’t have the former style at all if it intended you to write the latter."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-21T12:46:32.053600",
          "text": "Being taught to religiously write the latter is helpful to teach first-class functions, but it has few benefits for the working programmer."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T12:46:53.054200",
          "text": "<@Loma> the first style, by far. Introduces less indentation and makes the declaration of a function and its arguments line up visually with uses of the function, like `f(x)` and `f(3)`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-21T12:48:55.056700",
          "text": "The define/use symmetry is a good point! It’s always aesthetically pleasing when that sort of thing happens."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-21T12:49:31.057800",
          "text": "I am fond of similar symmetries in pattern-matching implementations."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T12:49:46.058200",
          "text": "<@Raul> (or anyone else reading), what I'm most wondering if the SQL-ish style is typical, \"first-resort\" pure-functional programming—and especially, if I've cultivated a good or bad habit by looking at things that way. I still wonder if it's all that readable, and it bothers me that it tends to produce a lot of unnecessary dynamic memory allocation, especially lists that are quickly consumed."
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-21T12:51:23.058800",
          "text": "<@Karen> <@Gonzalo> Got it. Cheers!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T12:59:56.063800",
          "text": "<@Penni> I think that SQL-ish style is fairly typical, and I think it’s a good approach. The two main drawbacks I see to it are:\n\n- The memory allocation problem, which you already mentioned. This can be fixed with better approaches to streaming data transformations that don’t require you to make a bunch of temporary collections (clojure’s transducers, java 8's stream API, python’s generators / generator comprehension, haskell’s laziness, etc.)\n- It’s often written “inside-out and backwards”, e.g. `(apply + (map square (take (sort xs &gt;) 2)))` instead of `xs.sort(&gt;).take(2).map(square).apply(+)`. That’s a purely notational problem though and can be fixed with things like threading macros: `(~&gt; xs (sort _ &gt;) (take _ 2) (map square _) (apply + _))`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:04:59.066900",
          "text": "ah yeah I should clarify that I prefer to use something that isn’t technically what folks usually call the threading macro"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:05:43.068400",
          "text": "I like to define `(~&gt; x f ...)` as a regular function that takes a single argument and a list of functions, and then I combine that with the `fancy-app` package which lets you write anonymous functions using underscores"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:05:53.068900",
          "text": "e.g. `add1` is the same as `(+ _ 1)`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:06:40.070000",
          "text": "<@Karen> Say, when I've looked through Racket code (admittedly not a huge amount), I haven't seen real-life use of a `~&gt;` macro. Is there any particular reason why it isn't common practice in the Racket world, beyond not already being standard? Are there other common ways to avoid the inside-out problem?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:08:20.071800",
          "text": "<@Penni> I think it’s not common practice only because it’s not in the standard libraries shipped with racket out of the box, so you have to find a package implementing it. And there’s multiple packages implementing it so you have to choose one. People underestimate how much effort that is."
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:09:18.072400",
          "text": "Yep, it's very easy to underestimate the paradox of choice."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:09:33.073000",
          "text": "especially when different people have different choices but need to share a codebase"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:10:07.073900",
          "text": "like, I’m the only one I know who prefers the plain-function-plus-fancy-app approach"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:10:38.074300",
          "text": "<@Karen> Say, you're Jack Firth, aren't you? I just watched your talk about `expect` on YouTube a couple days ago, and I'm sold. Is there any way to use `expect` with Typed Racket?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:11:17.074600",
          "text": "<@Penni> yup that’s me!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:13:27.076300",
          "text": "I think using `expect` with TR _might_ be doable with `require/typed`, or it might require something more complicated. The tricky part is that expectations are parametric - there should be some way to say that `expect/proc` has the type `(-&gt; (Expectation A) (-&gt; A B) (Expectation B))`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:14:55.078500",
          "text": "If you come up with something that works using `require/typed`, feel free to send a PR to the expect repo that adds an `expect/typed` module that just imports stuff using `require/typed` and then exports it"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:18:17.081200",
          "text": "I just recently moved about 1,000 lines of code to Typed Racket and found that it went pretty swimmingly and the result is better, clearer code that I can now modify with confidence. But I was disappointed to find that unit-testing doesn't yet seem to work well with it. For example, `check-equal?` in `typed/rackunit` doesn't report the line number of the failure. The error messages from `expect` are fantastic—but, it looks like I'll have to add some `require/typed` code. OK, I'll be more than happy to make that my first contribution to Racket, and no doubt I'll learn some good stuff from it, too."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:20:09.082300",
          "text": "some of the rackunit-TR issues are known and have been partially worked on: <https://github.com/racket/rackunit/issues>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:21:05.083500",
          "text": "the rackunit codebase is a little hairy, but if you feel up to working on the unit-testing story in TR that might be a more effective place to contribute than `expect` - a _lot_ more people use plain `rackunit` than `expect`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:21:15.083900",
          "text": "Ah, thanks, now skimming through the issues…"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:22:29.084500",
          "text": "Thanks for the suggestion. Does the line number get lost in `rackunit` because of the optimizations that TR does?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:23:36.085300",
          "text": "nah, it’s not even because of some TR-specific thing - it’s just that the typed versions of the `check-equal?`/ `check-pred` / etc. macros don’t properly preserve source locations"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:23:53.085700",
          "text": "I think <@Kristeen> wrote a PR to fix this"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T13:24:04.086000",
          "text": "yes, but it broke some stuff so wasn't merged"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:24:07.086200",
          "text": "OIC"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:24:17.086400",
          "text": "<https://github.com/racket/rackunit/pull/80>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T13:24:37.086800",
          "text": "<@Kristeen> wait it did? :o"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T13:24:38.087000",
          "text": "getting that to work generally would be nice"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T13:24:42.087200",
          "text": "I think that's why"
        },
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:28:09.089100",
          "text": "OK, that looks like it will take some work. I'm balancing \"getting something to work right now\" vs. reading up on and learning more Racket. When I next get to the 2nd of those two phases, I'll have a go at making a `require/typed` wrapper around `expect`; that might be easier."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T15:39:14.091700",
          "text": "<@Lillian> my guess is that it's the https redirect + 6.0 not supporting something in modern https"
        }
      ]
    },
    {
      "conversation_id": "177",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Karen Thanks—it helps a lot to get confirmation or correction from people with more experience. Indeed I liked the threading macros when I was programming in Clojure, for just that reason: they made a lot of code quite readable that otherwise would have been a mess. Hmm, that's an interesting variation on the threading macro…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-02-21T13:04:12.065900",
          "text": "<@Karen> Thanks—it helps a lot to get confirmation or correction from people with more experience. Indeed I liked the threading macros when I was programming in Clojure, for just that reason: they made a lot of code quite readable that otherwise would have been a mess. Hmm, that's an interesting variation on the threading macro…"
        }
      ]
    },
    {
      "conversation_id": "178",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: All my [CODE] Travis CI builds have started failing with an SSL handshake error. Anyone experience the same, or know of a workaround? Everything was working fine up till this week so I’m not sure what’s changed. [CODE_BLOCK]\nKaren: how many years old is 6.0 now?\nLoma: Another question on style: as [CODE] provides [CODE] [CODE] [CODE], etc., to manipulate list, when do you use [CODE] [CODE] [CODE] [CODE]? Use them in a `mixed style’?\nKristeen: I use [CODE], [CODE], [CODE] and try to avoid anything beyond that\nKaren: Loma I'd recommend never using [CODE] / [CODE] / etc, if possible\nKaren: they're virtually unreadable\nElin: [CODE], [CODE], etc. are confusing for beginners, and me\nElin: [CODE], [CODE], [CODE], etc. are a lot more readable\nPriscila: If you have a data structure built using pairs that doesn't represent a list, then car and cdr makes sense.\nKaren: true\nPriscila: Otherwise first, second, rest signals you are working on a list.\nKaren: I think it's a bad idea in general to make data structures out of raw pairs\nLavette: I also prefer [CODE], [CODE] etc. I always have to think twice to remember what [CODE] and [CODE] represent (despite learning them decades ago)\nLoise: They're not unfamiliar to someone who's used Lisp for a while. One advantage is that they can be combined, as in [CODE]. Not very intuitive, no. Are there equivalent combining functions with [CODE], [CODE], et al.?\nLoma: This thing really confuses me as, when you start as [CODE] instead of [CODE], you do not own [CODE] [CODE] [CODE] things.\nKaren: Even once you've memorized them, they're still no more descriptive names than random keyboard mashing\nElin: I wish there was a language in between [CODE] and [CODE], that was just basically [CODE] + [CODE] and [CODE].\nLaverna: they become their own concepts, if you use them enough. but mostly i feel like they’re left over from a time before fast &amp; easy structs\nLaverna: i’m still a racket beginner, so… why don’t you want to just use [CODE]?\nKaren: it's _huge_\nGabriella: as a relative newcomer, I do tend to use both and for the reasons above, when I am manipulating pairs I use car/cdr and when I am manipulating lists I use first/second etc. I find it does make the code more readable because it is more intentional.\nKaren: which means slow load times and (more dangerously) higher chance of external libraries providing stuff that conflicts with the exports of [CODE]\nKaren: less of an issue for [CODE] than for [CODE] because required identifiers can shadow identifiers imported from a [CODE]\nKaren: tangentially, what do you think of extending [CODE] to make it easier to make whole languages that just modify the exports of other languages? I've wanted that on several occasions\nJana: curious as why this is an ssl error when the url is http just above\nLoma: Here is a thing: if [CODE] [CODE] is really harder to understand, especially for newbies, then maybe [CODE] [CODE] are good alternatives. But what about [CODE]? I haven’t seen any alternate names of [CODE].\nElin: I guess it would have to be constrained to “reprovide-as-s-exp-language”\nKaren: Loma Honestly I’d prefer this: - [CODE] Constructor for pairs, e.g. [CODE] - [CODE] Predicate for pairs - [CODE], [CODE] Accessors for pairs\nKaren: Yes that\nElin: A relative path to the current module won’t work, because once someone uses it, that path will be relative to their usage file, not to the definition file…",
      "analysis_metadata": {
        "user_count": 11,
        "message_count": 30,
        "duration_minutes": 83.95,
        "contains_question": true,
        "action_keywords": [
          "build",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Gabriella",
          "Jana",
          "Karen",
          "Kristeen",
          "Laverna",
          "Lavette",
          "Lillian",
          "Loise",
          "Loma",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-02-21T14:43:57.090700",
          "text": "All my `6.0` Travis CI builds have started failing with an SSL handshake error. Anyone experience the same, or know of a workaround? Everything was working fine up till this week so I’m not sure what’s changed.\n```Resolving \"sugar\" via <http://download.racket-lang.org/releases/6.0.1/catalog/>\nssl-connect: connect failed (error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure)```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:41:29.093400",
          "text": "how many years old is 6.0 now?"
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-21T15:43:13.094800",
          "text": "Another question on style: as `racket/list` provides `first` `second` `third`, etc., to manipulate list, when do you use `car` `cdr` `cadr` `caddr`? Use them in a `mixed style’?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-21T15:44:13.096300",
          "text": "I use `car`, `cdr`, `cadr` and try to avoid anything beyond that"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:44:22.096800",
          "text": "<@Loma> I'd recommend never using `car` / `cdr` / etc, if possible"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:44:38.097500",
          "text": "they're virtually unreadable"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T15:44:46.097900",
          "text": "`car`, `cdr`, etc. are confusing for beginners, and me"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T15:45:10.099700",
          "text": "`first`, `rest`, `second`, etc. are a lot more readable"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-21T15:45:15.100000",
          "text": "If you have a data structure built using pairs that doesn't represent a list, then car and cdr makes sense."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:45:33.101400",
          "text": "true"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-21T15:45:35.101700",
          "text": "Otherwise first, second, rest signals you are working on a list."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:45:53.103200",
          "text": "I think it's a bad idea in general to make data structures out of raw pairs"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-21T15:46:39.105400",
          "text": "I also prefer `first`, `rest` etc. I always have to think twice to remember what `car` and `cdr` represent (despite learning them decades ago)"
        },
        {
          "user": "Loise",
          "timestamp": "2019-02-21T15:46:50.105600",
          "text": "They're not unfamiliar to someone who's used Lisp for a while. One advantage is that they can be combined, as in `caddr`. Not very intuitive, no. Are there equivalent combining functions with `first`, `last`, et al.?"
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-21T15:46:55.105700",
          "text": "This thing really confuses me as, when you start as `racket/base` instead of `racket`, you do not own `first` `second` `third` things."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:47:22.106900",
          "text": "Even once you've memorized them, they're still no more descriptive names than random keyboard mashing"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T15:50:25.108600",
          "text": "I wish there was a language in between `racket/base` and `racket`, that was just basically `racket/base` + `racket/list` and `racket/match`."
        },
        {
          "user": "Laverna",
          "timestamp": "2019-02-21T15:50:43.109100",
          "text": "they become their own concepts, if you use them enough. but mostly i feel like they’re left over from a time before fast &amp; easy structs"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-02-21T15:51:19.110100",
          "text": "i’m still a racket beginner, so… why don’t you want to just use `racket`?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:51:48.110900",
          "text": "it's _huge_"
        },
        {
          "user": "Gabriella",
          "timestamp": "2019-02-21T15:52:13.112000",
          "text": "as a relative newcomer, I do tend to use both and for the reasons above, when I am manipulating pairs I use car/cdr and when I am manipulating lists I use first/second etc. I find it does make the code more readable because it is more intentional."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:52:41.112800",
          "text": "which means slow load times and (more dangerously) higher chance of external libraries providing stuff that conflicts with the exports of `racket`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:54:45.115900",
          "text": "less of an issue for `#lang racket` than for `(require racket)` because required identifiers can shadow identifiers imported from a `#lang`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T15:56:52.117700",
          "text": "tangentially, what do you think of extending `#lang reprovide` to make it easier to make whole languages that just modify the exports of other languages? I've wanted that on several occasions"
        },
        {
          "user": "Jana",
          "timestamp": "2019-02-21T15:58:19.118500",
          "text": "curious as why this is an ssl error when the url is http just above"
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-21T16:00:43.121500",
          "text": "Here is a thing: if `car` `cadr` is really harder to understand, especially for newbies, then maybe `first` `second` are good alternatives. But what about `cons`? I haven’t seen any alternate names of `cons`."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:01:52.123000",
          "text": "I guess it would have to be constrained to “reprovide-as-s-exp-language”"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:03:16.124500",
          "text": "<@Loma> Honestly I’d prefer this:\n\n- `pair` Constructor for pairs, e.g. `(pair 1 2)`\n- `pair?` Predicate for pairs\n- `pair-first`, `pair-second` Accessors for pairs"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:03:27.124600",
          "text": "Yes that"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:07:54.125900",
          "text": "A relative path to the current module won’t work, because once someone uses it, that path will be relative to their usage file, not to the definition file…"
        }
      ]
    },
    {
      "conversation_id": "179",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: You mean a kind of “reprovide-as-language” thing?\nElin: If I wanted to define, say, [CODE] as [CODE] where [CODE] provides everything from [CODE], [CODE], and [CODE]?\nElin: Okay. I could call it [CODE], and have it generate the reprovides + a [CODE] submodule equal to… what? [CODE_BLOCK]\nElin: What do I put in the [CODE] hole?\nElin: Normally you would put a path to a module in a collection, but what if the current file isn’t installed within a collection?\nLoma: Reminds me of typed/racket :racket-flat:\nLoma: Really learned from your ways. Thank you guys.\nElin: Would [CODE] help?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 16.0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-02-21T15:59:44.120200",
          "text": "You mean a kind of “reprovide-as-language” thing?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:00:38.121200",
          "text": "If I wanted to define, say, `#lang agile` as `s-exp M` where `M` provides everything from `racket/base`, `racket/list`, and `racket/match`?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:05:24.125000",
          "text": "Okay. I could call it `#lang reprovide/as-s-exp-language`, and have it generate the reprovides + a `reader` submodule equal to… what?\n```\n(module reader syntax/module-reader ???)\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:05:34.125200",
          "text": "What do I put in the `???` hole?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:06:40.125500",
          "text": "Normally you would put a path to a module in a collection, but what if the current file isn’t installed within a collection?"
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-21T16:06:47.125700",
          "text": "Reminds me of typed/racket :racket-flat:"
        },
        {
          "user": "Loma",
          "timestamp": "2019-02-21T16:09:10.127400",
          "text": "Really learned from your ways. Thank you guys."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:15:44.127600",
          "text": "Would `define-runtime-path` help?"
        }
      ]
    },
    {
      "conversation_id": "180",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shanell: I'd even just take [CODE].\nElin: This doesn’t seem to work: [CODE_BLOCK]\nKaren: Oh right, this isn't possible because readers emit module syntax objects that directly say what their language is :(\nElin: The [CODE] language deals with this problem by forcing the user to specify the path to the current file as an absolute collection path…\nKaren: The reader of the wrapper language could be a wrapper function around the reader of the wrapped language. The wrapper reader could then postprocess the syntax object emitted by the wrapped reader and change the module's declared language\nKaren: Would that work?\nElin: If we were speaking I would tell you to say it again, slower this time.\nElin: The wrapper function does what? Takes a module syntax-object and returns a module syntax-object?\nKaren: I'm not sure what I'm saying either\nElin: Takes a “read” function and returns a “read” function?\nElin: Wait, are you proposing a way that this could work with non-s-expression languages?\nKaren: All langs have a reader function right? The thing that the reader submodule is supposed to provide? It accepts a port and some other arguments and returns a syntax object for a module, like (module #f implementation-language). Is that all mostly correct?\nElin: Yes. However, we can’t create a new implemnation-language on the fly\nKaren: brb, getting laptop so I can write examples\nElin: Wait I just had an idea. It doesn’t work in the Racket module system but what if you could write something like: [CODE_BLOCK]\nElin: The language of the module [CODE] is [CODE], and [CODE] is defined on-the-fly\nElin: If we had that, I think we could do the reader wrapper that wraps a wrapped reader, or whatever you said\nKaren: ah yes I caught up to your thought process and now see what you mean about how to specify the path to the current file\nKaren: I think embedding modules in there would not be good because it ties together the expansion process of the two modules - we definitely want a weaker link between the two than that\nKaren: I’m imagining something like this: [CODE_BLOCK] …would be equivalent to this: [CODE_BLOCK]\nKaren: but I don’t know how to figure out that [CODE] bit\nKaren: and yes, I think this should work for non-s-expression languages\nKaren: I would know exactly how this should work if module paths were just URIs. That would make everything here much simpler.\nElin: What if the [CODE] language produces multiple different module-languages in different situations?\nKaren: you mean like metalanguages? like [CODE]?\nClarinda: We recently changed http to redirect to [URL] so that’s why the SSL error. Also, it looks like Racket before v6.1.1 used SLL 2/3 by default (which is now disabled and changed to TLS), which is probably why v6.0 fails.\nElin: As in sometimes [CODE] produces [CODE], and other times [CODE] produces [CODE]\nElin: That includes [CODE], and I think it also includes [CODE] (a language that Eli Barzilay made for a class), and I could imagine a language similar in spirit to [CODE] that did this too\nClarinda: And v6.0 didn’t have [CODE], yet… so I don’t have a workaround at the moment.\nElin: It should be roughly equivalent to: [CODE_BLOCK] Except that [CODE] probably shouldn’t be visible outside.\nKaren: couple of thoughts: - maybe it would work if the user supplied a function to transform the source language module path instead of just overwriting it - or maybe it’s enough to just support replacing a fixed finite set of languages - when this pattern occurs _outside_ metalanguages like [CODE], how is the choice of language usually made in practice? one of a few fixed possible languages? something more elaborate? I could see [CODE] doing this to figure out a file path programmatically or something - does this use case even make sense for a [CODE]-like thing? When would you be reproviding a metalanguage? I just think of reproviding as a way to bundle together a few simple modules to make another simple module - I’d never try to use reprovide to define a modified version of a metalanguage\nPriscila: <[URL]\nElin: I guess the difference between your thinking and my thinking is this: - You’re thinking of the module-language and the reader as more separate. You can extend the module-language without messing with the reader too much. - I’m thinking of the module-language dependent on the reader. The reader determines which module-language to use at read-time.\nLillian: I’ve just posted the first version of “Why LOP? Why Racket?” to the Beautiful Racket site. Comments &amp; corrections welcome (not here, however, out of consideration to those who don’t care — just click the left margin of any paragraph on the page to send me a comment). Thanks! <[URL]\nKaren: Right\nLillian: Ah yes, I wondered if the HTTPS switch was related. Will this afflict 6.0 users generally? (Not a huge group, I know) <[URL]\nElin: In order to wrap a [CODE] language to include an extra binding, you either need to: - determine the reader yourself separate from the [CODE] that you’re wrapping, and then wrap the module-language - or, wrap _only_ the reader, and not the module-language\nElin: Having [CODE] would allow you to wrap the module-language as part of wrapping the reader\nKaren: It would, but other ideas would also work and I think it’s really not a good idea to treat modules as _anonymous_ entities. It’s important that modules have names, and that those names are unambiguous and serializable. This property lets you separately read, expand, and compile modules.\nKaren: Modules are definitely not lambdas\nElin: Lambdas allow expressions to “depend” on values that don’t come syntactically with them\nKaren: Yes. So do links to named resources.\nElin: But the module-language-can-be-a-module-expression thing does not allow that\nElin: As in there’s something that would make lambdas hard, which does not apply to module-language-can-be-a-module-expression. module-lanugage-can-be-a-module-expression is not hard in the way lambdas would be\nKaren: Keep in mind cacheability is a really important property to preserve here. In your example, the module expression containing the reprovides to perform must be copied and pasted into every single client module. That makes caching that work much harder (not impossible, but complex caching is often implemented wrong and its nearly impossible to test).\nElin: The module A depends on B, yes, but B is right there. The compiler can just compile B first.\nKaren: Yes. But you don’t have _just_ module A. You have hundreds of modules using this reproviding language. And each client module will get a copy of B pasted into it.\nElin: Yes, but that’s necessary if the module-languages produced by the reader are all different\nKaren: which I don’t think happens all that often, and definitely wouldn’t in the use cases of [CODE] and your request for a language that’s just [CODE] + [CODE] +[CODE].\nKaren: I think languages like that would be 90% of the use cases\nElin: If I can’t do it for arbitrary readers producing arbitrary modules, then I’ll do it only for s-exp readers. Which is still 90% of the use cases\nKaren: I’d do it for [CODE] pretty often\nKaren: That’s a non-s-exp reader that doesn’t produce arbitrary modules (I think)\nClarinda: This change certainly affects v6.0 users who try to install packages from the default configured catalog, which is an even smaller group than v6.0 users generally. I’m not sure it’s reason enough to turn the global HTTP-&gt;HTTPS forwarding back off, but it’s a point in that direction.\nMai: To demonstrate: [CODE_BLOCK] [CODE_BLOCK] This returns [CODE]. But if now I have: [CODE_BLOCK] [CODE_BLOCK] [CODE_BLOCK] now it returns [CODE].\nClarinda: We’ve turned off HTTP-&gt;HTTPS for now. Part of the idea is to check whether that fixes the package server, as you have suggested.\nMai: I also test the scenario where I have two submodules in a file, and that one works as expected. The only case that it doesn’t work is when they are in different files\nClarinda: From the module system’s perspective, those are not the same binding. The one in “b.rkt”’s expansion is “in the current module”. The one in “a.rkt”’s expansion is “from a module b.rkt relative to the current module”. There’s nothing that ties one module’s “current module” to the other module’s “b.rkt relative to the current module”. When you have submodules, there is something that ties them together, since they’re at once relative to the enclosing module.\nClarinda: For the multi-module case, you could use [CODE] and related tools to inspect binding information and impose rules about the relationship of “current modules”s, but I don’t know whether that’s the right direction for your purposes.\nMai: I see. Let me try [CODE] then. Thank you very much for your help :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 60,
        "duration_minutes": 79.0,
        "contains_question": true,
        "action_keywords": [
          "create",
          "fix",
          "implement",
          "must",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Karen",
          "Lillian",
          "Mai",
          "Priscila",
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Shanell",
          "timestamp": "2019-02-21T16:32:55.127900",
          "text": "I'd even just take `racket/match`."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:35:35.128100",
          "text": "This doesn’t seem to work:\n```\n(define-runtime-module-path self (submod \".\"))\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:37:27.128500",
          "text": "Oh right, this isn't possible because readers emit module syntax objects that directly say what their language is :("
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:38:20.128700",
          "text": "The `syntax/macro-lang` language deals with this problem by forcing the user to specify the path to the current file as an absolute collection path…"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:38:42.128900",
          "text": "The reader of the wrapper language could be a wrapper function around the reader of the wrapped language. The wrapper reader could then postprocess the syntax object emitted by the wrapped reader and change the module's declared language"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:38:51.129100",
          "text": "Would that work?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:39:45.129300",
          "text": "If we were speaking I would tell you to say it again, slower this time."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:40:47.129500",
          "text": "The wrapper function does what? Takes a module syntax-object and returns a module syntax-object?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:40:53.129700",
          "text": "I'm not sure what I'm saying either"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:41:12.129900",
          "text": "Takes a “read” function and returns a “read” function?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:42:27.130100",
          "text": "Wait, are you proposing a way that this could work with non-s-expression languages?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:44:22.130300",
          "text": "All langs have a reader function right? The thing that the reader submodule is supposed to provide? It accepts a port and some other arguments and returns a syntax object for a module, like (module #f implementation-language). Is that all mostly correct?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:46:17.130500",
          "text": "Yes. However, we can’t create a new implemnation-language on the fly"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:48:28.130700",
          "text": "brb, getting laptop so I can write examples"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:49:47.130900",
          "text": "Wait I just had an idea. It doesn’t work in the Racket module system but what if you could write something like:\n```\n(module A (module B racket\n            (provide (all-from-out racket)))\n  (+ 1 2))\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:50:51.131600",
          "text": "The language of the module `A` is `B`, and `B` is defined on-the-fly"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:52:02.131800",
          "text": "If we had that, I think we could do the reader wrapper that wraps a wrapped reader, or whatever you said"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:52:47.132400",
          "text": "ah yes I caught up to your thought process and now see what you mean about how to specify the path to the current file"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:53:47.133100",
          "text": "I think embedding modules in there would not be good because it ties together the expansion process of the two modules - we definitely want a weaker link between the two than that"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:58:22.134400",
          "text": "I’m imagining something like this:\n```\n#lang reprovide\nexample/foo\nexample/bar\n#:reader-from example/foo\n```\n…would be equivalent to this:\n```\n#lang racket/base\n(reprovide example/foo example/bar)\n(module reader racket/base\n  (require (prefix-in base: (submod example/foo reader)))\n  (provide read-syntax)\n  (define (read-syntax ...)\n    (define mod-stx (base:read-syntax ...))\n    (replace-language-module-path-in-module-syntax mod-stx absolute/path/to/file/containing/reprovide/code)))\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:58:35.134600",
          "text": "but I don’t know how to figure out that `absolute/path/to/file/containing/reprovide/code` bit"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:59:00.134800",
          "text": "and yes, I think this should work for non-s-expression languages"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T16:59:32.135000",
          "text": "I would know exactly how this should work if module paths were just URIs. That would make everything here much simpler."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:00:23.135200",
          "text": "What if the `example/foo` language produces multiple different module-languages in different situations?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:01:05.135400",
          "text": "you mean like metalanguages? like `at-exp`?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T17:01:28.135600",
          "text": "We recently changed http to redirect to https, so that’s why the SSL error.\nAlso, it looks like Racket before v6.1.1 used SLL 2/3 by default (which is now disabled and changed to TLS), which is probably why v6.0 fails."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:01:31.135800",
          "text": "As in sometimes `#lang example/foo` produces `(module name example/foo/1 ...)`, and other times `#lang example/foo` produces `(module name example/foo/2 ...)`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:02:43.136000",
          "text": "That includes `at-exp`, and I think it also includes `pl` (a language that Eli Barzilay made for a class), and I could imagine a language similar in spirit to `pollen` that did this too"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T17:03:42.136200",
          "text": "And v6.0 didn’t have `PLT_PKG_SSL_NO_VERIFY`, yet… so I don’t have a workaround at the moment."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:06:00.137300",
          "text": "It should be roughly equivalent to:\n```\n(module B racket\n  (provide (all-from-out racket)))\n\n(module A B\n  (+ 1 2))\n```\nExcept that `B` probably shouldn’t be visible outside."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:06:04.137400",
          "text": "couple of thoughts:\n\n- maybe it would work if the user supplied a function to transform the source language module path instead of just overwriting it\n- or maybe it’s enough to just support replacing a fixed finite set of languages\n- when this pattern occurs _outside_ metalanguages like `at-exp`, how is the choice of language usually made in practice? one of a few fixed possible languages? something more elaborate? I could see `pollen` doing this to figure out a file path programmatically or something\n- does this use case even make sense for a `reprovide`-like thing? When would you be reproviding a metalanguage? I just think of reproviding as a way to bundle together a few simple modules to make another simple module - I’d never try to use reprovide to define a modified version of a metalanguage"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-21T17:07:43.138300",
          "text": "<https://github.com/oplS17projects/voxos>"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:09:16.139700",
          "text": "I guess the difference between your thinking and my thinking is this:\n - You’re thinking of the module-language and the reader as more separate. You can extend the module-language without messing with the reader too much.\n - I’m thinking of the module-language dependent on the reader. The reader determines which module-language to use at read-time."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-02-21T17:09:38.140000",
          "text": "I’ve just posted the first version of “Why LOP? Why Racket?” to the Beautiful Racket site. Comments &amp; corrections welcome (not here, however, out of consideration to those who don’t care — just click the left margin of any paragraph on the page to send me a comment). Thanks! <https://beautifulracket.com/appendix/why-lop-why-racket.html>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:10:35.140100",
          "text": "Right"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-02-21T17:14:09.140300",
          "text": "Ah yes, I wondered if the HTTPS switch was related. Will this afflict 6.0 users generally? (Not a huge group, I know) <https://github.com/racket/racket-lang-org/issues/88#issuecomment-465697565>"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:14:54.140600",
          "text": "In order to wrap a `#lang` language to include an extra binding, you either need to:\n - determine the reader yourself separate from the `#lang` that you’re wrapping, and then wrap the module-language\n - or, wrap _only_ the reader, and not the module-language"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:16:31.140800",
          "text": "Having `(module _ (module _ racket stuff ...) stuff ...)` would allow you to wrap the module-language as part of wrapping the reader"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:19:09.141100",
          "text": "It would, but other ideas would also work and I think it’s really not a good idea to treat modules as _anonymous_ entities. It’s important that modules have names, and that those names are unambiguous and serializable. This property lets you separately read, expand, and compile modules."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:19:26.141300",
          "text": "Modules are definitely not lambdas"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:19:55.141500",
          "text": "Lambdas allow expressions to “depend” on values that don’t come syntactically with them"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:20:19.141700",
          "text": "Yes. So do links to named resources."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:20:28.141900",
          "text": "But the module-language-can-be-a-module-expression thing does not allow that"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:21:12.142100",
          "text": "As in there’s something that would make lambdas hard, which does not apply to module-language-can-be-a-module-expression. module-lanugage-can-be-a-module-expression is not hard in the way lambdas would be"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:23:28.142500",
          "text": "Keep in mind cacheability is a really important property to preserve here. In your example, the module expression containing the reprovides to perform must be copied and pasted into every single client module. That makes caching that work much harder (not impossible, but complex caching is often implemented wrong and its nearly impossible to test)."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:23:47.142700",
          "text": "The module A depends on B, yes, but B is right there. The compiler can just compile B first."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:24:30.142900",
          "text": "Yes. But you don’t have _just_ module A. You have hundreds of modules using this reproviding language. And each client module will get a copy of B pasted into it."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:25:15.143100",
          "text": "Yes, but that’s necessary if the module-languages produced by the reader are all different"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:26:35.143300",
          "text": "which I don’t think happens all that often, and definitely wouldn’t in the use cases of `#lang agile` and your request for a language that’s just `racket/base` + `racket/list` +`racket/match`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:26:51.143600",
          "text": "I think languages like that would be 90% of the use cases"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T17:28:04.143800",
          "text": "If I can’t do it for arbitrary readers producing arbitrary modules, then I’ll do it only for s-exp readers. Which is still 90% of the use cases"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:28:17.144000",
          "text": "I’d do it for `scribble/manual` pretty often"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T17:28:33.144200",
          "text": "That’s a non-s-exp reader that doesn’t produce arbitrary modules (I think)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T17:31:44.144500",
          "text": "This change certainly affects v6.0 users who try to install packages from the default configured catalog, which is an even smaller group than v6.0 users generally. I’m not sure it’s reason enough to turn the global HTTP-&gt;HTTPS forwarding back off, but it’s a point in that direction."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-21T17:43:01.149100",
          "text": "To demonstrate:\n\n```\n;; a.rkt\n\n#lang racket\n\n(define a 1)\n\na\n```\n\n```\n;; compile.rkt\n\n#lang racket\n\n(define my-a #f)\n(define my-b #f)\n\n(define (annotate stx)\n  (let ([stx (expand-syntax stx)])\n    (println (syntax-&gt;datum stx))\n    (syntax-case stx ()\n      [(module _ _ (mb _ (define-vals (b) _) (app _ (lam () a) _)))\n       (set! my-a #'a)\n       (set! my-b #'b)]\n      [_ (void)])\n    stx))\n\n(define orig (current-compile))\n(current-compile\n (lambda (e immediate-eval?)\n   (orig (annotate\n          (if (syntax? e)\n              e\n              (namespace-syntax-introduce\n               (datum-&gt;syntax #f e))))\n         immediate-eval?)))\n\n(dynamic-require \"a.rkt\" #f)\n\n(println my-a)\n(println my-b)\n\n(free-identifier=? my-a my-b)\n```\n\nThis returns `#t`.\n\nBut if now I have:\n\n```\n;; a.rkt\n#lang racket\n\n(require \"b.rkt\")\n\na\n```\n\n```\n;; b.rkt\n#lang racket\n\n(provide a)\n(define a 42)\n```\n\n```\n;; compile.rkt\n\n...\n      [(module _ _ (mb _ _ (define-vals (a) _)))\n       (set! my-b #'a)]\n      [(module _ _ (mb _ _ (app _ (lam () a) _)))\n       (set! my-a #'a)]\n...\n```\n\nnow it returns `#f`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T17:44:57.149200",
          "text": "We’ve turned off HTTP-&gt;HTTPS for now. Part of the idea is to check whether that fixes the package server, as you have suggested."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-21T17:47:08.150700",
          "text": "I also test the scenario where I have two submodules in a file, and that one works as expected. The only case that it doesn’t work is when they are in different files"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T17:48:58.152700",
          "text": "From the module system’s perspective, those are not the same binding. The one in “b.rkt”’s expansion is “in the current module”. The one in “a.rkt”’s expansion is “from a module b.rkt relative to the current module”. There’s nothing that ties one module’s “current module” to the other module’s “b.rkt relative to the current module”. When you have submodules, there is something that ties them together, since they’re at once relative to the enclosing module."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T17:51:06.154100",
          "text": "For the multi-module case, you could use `identifier-binding` and related tools to inspect binding information and impose rules about the relationship of “current modules”s, but I don’t know whether that’s the right direction for your purposes."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-21T17:51:55.155000",
          "text": "I see. Let me try `identifier-binding` then. Thank you very much for your help :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "181",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Hey, does anyone have any thoughts about defining module-languages “on-the-fly” like this: [CODE_BLOCK] Where the module [CODE] has language [CODE], and the module [CODE] has language [CODE]?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-02-21T16:55:03.134300",
          "text": "Hey, does anyone have any thoughts about defining module-languages “on-the-fly” like this:\n```\n(module A (module B racket\n            (provide (all-from-out racket)))\n  (+ 1 2))\n```\nWhere the module `A` has language `B`, and the module `B` has language `racket`?"
        }
      ]
    },
    {
      "conversation_id": "182",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Clarinda I’m trying to use [CODE] to test if an id refers to another id from another file. It works perfectly _before_ [CODE], but after I [CODE] somehow the function returns [CODE]. Do you know a solution to this?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-02-21T17:37:53.146800",
          "text": "<@Clarinda> I’m trying to use `free-identifier=?` to test if an id refers to another id from another file. It works perfectly _before_ `expand-syntax`, but after I `expand-syntax` somehow the function returns `#f`. Do you know a solution to this?"
        }
      ]
    },
    {
      "conversation_id": "183",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: This was a fantastic read, thank you",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-21T18:08:29.155200",
          "text": "This was a fantastic read, thank you"
        }
      ]
    },
    {
      "conversation_id": "184",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Is there a way to generate a module-path, like [CODE], that points to the current module?\nElin: I tried [CODE]\nElin: but that gave me an error about a cycle in the loading path\nClarinda: [CODE]?\nKaren: is this for the reader submodule reprovide problem?\nKaren: Clarinda can a module path index go in the module-path part of a top-level [CODE] expression? like [CODE]\nClarinda: No, it can’t\nKaren: Clarinda what can? context: alex and I were discussing how to make something like [CODE] that generates a read-syntax procedure that returns a module syntax object pointing to the reprovide module\nElin: Can the result of [CODE_BLOCK] go there?\nElin: In other words, does the following make sense, or sound completely wrong? [CODE_BLOCK]\nJulia: Mai I don't know if it would be helpful -- or even if it's a good example to follow -- but I've done some things with [CODE] to support [CODE] in racket-mode. There are some edge cases like identifiers that are both [CODE] and [CODE]. AFAICT in such cases [CODE] can tell you the id came from a module, but not necessarily the original id. For that you have to walk the syntax. This may not matter for what you're doing but just a heads-up. <[URL]\nMai: Thank you!!!\nClarinda: I’m not sure I follow, but maybe you want to use [CODE] with a 5-argument procedure, where the second argument to the procedure is how the reader module was referenced. Then, you can build on that reference to access a module relative to the reader module.\nElin: Oh, so I could take [CODE] and extract just [CODE]\nElin: Though I supposed one disadvantage of that is that someone could reprovide the [CODE] and [CODE] functions from a different module, and then that “how the reader module was referenced” argument might be different\nElin: I’ve finished making the [CODE]-only version on a branch here: <[URL]",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 16,
        "duration_minutes": 66.58,
        "contains_question": true,
        "action_keywords": [
          "build",
          "complete",
          "discuss",
          "finish"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Julia",
          "Karen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-02-21T18:47:11.155900",
          "text": "Is there a way to generate a module-path, like `define-runtime-path`, that points to the current module?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T18:47:29.156400",
          "text": "I tried `(define-runtime-module-path self (submod \".\"))`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T18:47:41.156800",
          "text": "but that gave me an error about a cycle in the loading path"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T18:48:27.157700",
          "text": "`(variable-reference-&gt;module-path-index (#%variable-reference))`?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T18:48:40.158000",
          "text": "is this for the reader submodule reprovide problem?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T18:49:13.158700",
          "text": "<@Clarinda> can a module path index go in the module-path part of a top-level `module` expression? like `(module foo &lt;mpi&gt; body ...)`"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T18:49:37.159000",
          "text": "No, it can’t"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-21T18:51:06.160500",
          "text": "<@Clarinda> what can? context: alex and I were discussing how to make something like `#lang reprovide` that generates a read-syntax procedure that returns a module syntax object pointing to the reprovide module"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T18:51:20.160800",
          "text": "Can the result of\n```\n(require syntax/modresolve)\n(resolve-module-path-index\n  (variable-reference-&gt;module-path-index\n    (#%variable-reference)))\n```\ngo there?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T18:59:54.163500",
          "text": "In other words, does the following make sense, or sound completely wrong?\n```\n#lang racket/base\n\n(provide (all-from-out racket/base))\n\n(require syntax/modresolve)\n\n;(define-runtime-module-path self-module-path (submod \".\"))\n(define self-module-path\n  (resolve-module-path-index\n   (variable-reference-&gt;module-path-index\n    (#%variable-reference))))\n\n(module* self-module-path #f\n  (provide self-module-path))\n\n(module* reader syntax/module-reader\n  #:language self-module-path\n  (require (submod \"..\" self-module-path)))\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-21T19:01:56.165000",
          "text": "<@Mai> I don't know if it would be helpful -- or even if it's a good example to follow -- but I've done some things with `identifier-binding` to support `visit-definition` in racket-mode. There are some edge cases like identifiers that are both `contract-out` and `rename-out`. AFAICT in such cases `identifier-binding` can tell you the id came from a module, but not necessarily the original id. For that you have to walk the syntax. This may not matter for what you're doing but just a heads-up. <https://github.com/greghendershott/racket-mode/blob/master/racket/find.rkt>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-21T19:03:15.165300",
          "text": "Thank you!!!"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T19:12:48.165500",
          "text": "I’m not sure I follow, but maybe you want to use `#:language` with a 5-argument procedure, where the second argument to the procedure is how the reader module was referenced. Then, you can build on that reference to access a module relative to the reader module."
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T19:19:18.165700",
          "text": "Oh, so I could take `(submod stuff stuff reader)` and extract just `(submod stuff stuff)`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T19:21:50.165900",
          "text": "Though I supposed one disadvantage of that is that someone could reprovide the `read` and `read-syntax` functions from a different module, and then that “how the reader module was referenced” argument might be different"
        },
        {
          "user": "Elin",
          "timestamp": "2019-02-21T19:53:46.166100",
          "text": "I’ve finished making the `s-exp`-only version on a branch here:\n<https://github.com/AlexKnauth/reprovide-lang/tree/as-s-exp-language>"
        }
      ]
    },
    {
      "conversation_id": "185",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loise: That was probably the best explanation of why LOP is significant. Well done, sir!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Loise"
        ]
      },
      "timeline": [
        {
          "user": "Loise",
          "timestamp": "2019-02-21T20:59:23.166300",
          "text": "That was probably the best explanation of why LOP is significant. Well done, sir!"
        }
      ]
    },
    {
      "conversation_id": "186",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Lillian Do you need v6.0 support, or would supporting/testing only v6.2 and later be ok?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-02-21T21:32:25.166600",
          "text": "<@Lillian> Do you need v6.0 support, or would supporting/testing only v6.2 and later be ok?"
        }
      ]
    },
    {
      "conversation_id": "187",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: Thank you for this link. Reading it now.\nTerrence: This is a fantastic article, and it asked and answered questions I didn't know how to ask.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 50.88,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T02:17:03.167100",
          "text": "Thank you for this link. Reading it now."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T03:07:56.168400",
          "text": "This is a fantastic article, and it asked and answered questions I didn't know how to ask."
        }
      ]
    },
    {
      "conversation_id": "188",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: I've been asked the question \"What are the practical uses for DSLs?\" a lot when doing Racket presentations. Thank you so much for that, Matthew!\nKami: By the way, the videos of my presentations at FOSDEM 2019 on How to make languages in Racket are available here: <[URL] <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 17.13,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-02-22T04:21:26.169000",
          "text": "I've been asked the question \"What are the practical uses for DSLs?\" a lot when doing Racket presentations. Thank you so much for that, Matthew!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-22T04:38:34.169500",
          "text": "By the way, the videos of my presentations at FOSDEM 2019 on How to make languages in Racket are available here: <https://fosdem.org/2019/schedule/event/jsonwhendsl/> <https://fosdem.org/2019/schedule/event/makeownlangracket/>"
        }
      ]
    },
    {
      "conversation_id": "189",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: thanks Kristeen i will take a more in-depth look at his code then.\nKristeen: I think you will need to use a more specific predicate. Can you use response?\nKristeen: Lillian two thoughts on the presentation: 1. I think the lindemayer example language would fit nicely in this document, especially since it generates cute pictures and comes with a tutorial paper 2. I think an example earlier on would helpful, perhaps even in the first few paragarphs.\nKristeen: Terrence Dan is indeed still here, and if you're into Racket there's lots of us here and you should definitely come say hi\nTerrence: Perhaps I will :slightly_smiling_face:\nTerrence: I've thought about applying to the PhD program at the public health school, but I am not motivated lol\nKristeen: Luddy hall is very fancy, and you're welcome to drop by my office anytime\nTerrence: ty samth :slightly_smiling_face:\nLavette: So, it's Hoosier time here? I went to Purdue University :slightly_smiling_face:\nTerrence: I went there for a year\nTerrence: At age 38, I felt like I was 20 years late for the prom, but Dr. Cover was my favorite instructor. Philosophy :slightly_smiling_face:\nMauro: never too late for some good college classes!\nTerrence: lol\nMauro: I'm 36 and I've debated whether I should consider masters or PhD in PL or computational science topics, it would be wonderful but it's debatable whether it's a wise course of action these days...\nTerrence: I kept it going, but at other schools.\nTerrence: Mauro I was 44 when I started my masters and 45 when I finished. Hasn't produced anything in the way of work, but I feel accomplished\nMauro: that's what counts! and congratulations on your masters\nTerrence: why ty!\nTerrence: Question: If anyone is familiar with the SICP Exercise 1.5, we are analyzing this: [CODE_BLOCK] But I am not sure what is happening here. Should the first line be (define (p (p)) if we are defining a procedure p that takes procedure p?\nMauro: It's been a long time since I've looked at SICP. The first line is defining a procedure [CODE]. In the body of [CODE], [CODE] is being applied, since it's surrounded by parentheses, so it is basically calling itself\nTerrence: oh\nMauro: if you tried it out, it would recur forever since it's calling itself\nTerrence: yes\nTerrence: I saw that lol\nTerrence: would this be an example of recursion without a base case?\nMauro: it seems that [CODE] will never return\nMauro: yes, that would a good example, it doesn't have any base case so it never terminates\nTerrence: okay, that helps me understand it. tyvm!\nKami: it's equivalent to writing [CODE], which reveals that p is called inside the lambda\nTerrence: okay i will need to think about that\nTerrence: I haven't studied lambda yet at all\nKami: It's the minimal unit in Scheme languages. It's unique role is to create a new procedure. I won't spoil SICP, but keep in a corner of your mind that lambda is a bit magical. It's one of the rare keywords (usually) defined directly in Scheme interpreters (so not written in scheme, but in the base language used to implement Scheme) because it's the keyword that allows every other part of Scheme to exist. You could basically reduce any program to only [CODE] calls.\nTerrence: oooh I like magical stuff :slightly_smiling_face:\nKami: I guess that's also why Racket, and a lot of other Lisp languages, use lambda as a logo :racket:\nMauro: the idea of [CODE] is borrowed from Alonzo Church's lambda calculus, it can be thought of an abstract description of how a function is made of parameters and a body. The function is used by giving it arguments which are evaluated and bounded to corresponding variables in the body. Scheme allows you to directly work with [CODE]s so you can build complicated things with just [CODE]s\nMauro: The interesting thing is a [CODE] can be evaluated different ways, which is why you see discussion about applicative and normal evaluation in SICP, though my understanding is those terms are not standard in current programming language literature, they use different names. SICP was written a long time ago so things have moved long way since then\nTerrence: oh...I was devoting an entire blog entry to Applicative/Normal and hesitating...maybe I should just move on and get to the meaty stuff\nTerrence: are there more current explanations I can read?\nKami: it's not really an issue nowadays, apart from research fields\nTerrence: okay\nMauro: I won't worry too much about it, I'll look for a decent explanation for you though\nMauro: Terrence this is not bad overview, <[URL]\nKami: But there's one interesting thing you could talk about when you'll be finished with SICP and will try macros (it's not for now!): In Racket, procedures are applied in the classic order (arguments first, procedure after), but macros are applied in reverse (transformation first, arguments after). But it's a bit complicated for a beginner.\nTerrence: Mauro I quoted your explanation on my blog if that is okay\nMauro: it's fine with me Terrence\nTerrence: ty\nHallie: Re. 1 IMHO lindenmayer as cool as it is has too much of an academic vibe so it really depends on the desired audience of BR\nKristeen: Hallie do you think the language has an academic vibe (drawing trees for biology) or the paper/racket presentation of it has an academic vibe?\nHallie: mostly the former - and nothing wrong with that! But reading Matthew's \"why lop...\" post I feel it is mostly targeted at the industry (html, riposte, etc.)",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 49,
        "duration_minutes": 231.2,
        "contains_question": true,
        "action_keywords": [
          "action",
          "build",
          "create",
          "discuss",
          "finish",
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Kami",
          "Kristeen",
          "Lavette",
          "Mauro",
          "Shavon",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-22T06:12:33.170400",
          "text": "thanks <@Kristeen> i will take a more in-depth look at his code then."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T08:32:00.173400",
          "text": "I think you will need to use a more specific predicate. Can you use response?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T09:07:19.174200",
          "text": "<@Lillian> two thoughts on the presentation:\n1. I think the lindemayer example language would fit nicely in this document, especially since it generates cute pictures and comes with a tutorial paper\n2. I think an example earlier on would helpful, perhaps even in the first few paragarphs."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T09:11:00.175500",
          "text": "<@Terrence> Dan is indeed still here, and if you're into Racket there's lots of us here and you should definitely come say hi"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:11:40.175700",
          "text": "Perhaps I will :slightly_smiling_face:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:12:27.176500",
          "text": "I've thought about applying to the PhD program at the public health school, but I am not motivated lol"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T09:12:29.176700",
          "text": "Luddy hall is very fancy, and you're welcome to drop by my office anytime"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:12:37.176900",
          "text": "ty samth :slightly_smiling_face:"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-02-22T09:15:21.177600",
          "text": "So, it's Hoosier time here? I went to Purdue University :slightly_smiling_face:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:15:28.177800",
          "text": "I went there for a year"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:16:20.178400",
          "text": "At age 38, I felt like I was 20 years late for the prom, but Dr. Cover was my favorite instructor. Philosophy :slightly_smiling_face:"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:17:04.178700",
          "text": "never too late for some good college classes!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:17:39.179500",
          "text": "lol"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:17:53.180000",
          "text": "I'm 36 and I've debated whether I should consider masters or PhD in PL or computational science topics, it would be wonderful but it's debatable whether it's a wise course of action these days..."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:17:58.180200",
          "text": "I kept it going, but at other schools."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:18:40.180900",
          "text": "<@Mauro> I was 44 when I started my masters and 45 when I finished. Hasn't produced anything in the way of work, but I feel accomplished"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:19:07.181300",
          "text": "that's what counts! and congratulations on your masters"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:19:12.181500",
          "text": "why ty!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:21:03.183300",
          "text": "Question: If anyone is familiar with the SICP Exercise 1.5, we are analyzing this:\n\n```(define (p) (p))\n(define (test x y)\n  (if (= x 0) 0 y))\n\n(test 0 (p))```\n\nBut I am not sure what is happening here. Should the first line be (define (p (p)) if we are defining a procedure p that takes procedure p?"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:22:55.184600",
          "text": "It's been a long time since I've looked at SICP. The first line is defining a procedure `p`. In the body of `p`, `p` is being applied, since it's surrounded by parentheses, so it is basically calling itself"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:23:14.185100",
          "text": "oh"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:23:15.185200",
          "text": "if you tried it out, it would recur forever since it's calling itself"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:23:22.185400",
          "text": "yes"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:23:27.185700",
          "text": "I saw that lol"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:23:42.186200",
          "text": "would this be an example of recursion without a base case?"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:23:50.186500",
          "text": "it seems that `(test 0 (p))` will never return"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:24:13.187100",
          "text": "yes, that would a good example, it doesn't have any base case so it never terminates"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:24:26.187400",
          "text": "okay, that helps me understand it. tyvm!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-22T09:25:32.188400",
          "text": "it's equivalent to writing `(define p (lambda () (p)))`, which reveals that p is called inside the lambda"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:28:45.188600",
          "text": "okay i will need to think about that"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:28:58.188900",
          "text": "I haven't studied lambda yet at all"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-22T09:35:33.193100",
          "text": "It's the minimal unit in Scheme languages. It's unique role is to create a new procedure.\nI won't spoil SICP, but keep in a corner of your mind that lambda is a bit magical. It's one of the rare keywords (usually) defined directly in Scheme interpreters (so not written in scheme, but in the base language used to implement Scheme) because it's the keyword that allows every other part of Scheme to exist. You could basically reduce any program to only `lambda` calls."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:36:18.193300",
          "text": "oooh I like magical stuff :slightly_smiling_face:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-22T09:37:35.194500",
          "text": "I guess that's also why Racket, and a lot of other Lisp languages, use lambda as a logo :racket:"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:40:11.197100",
          "text": "the idea of `lambda` is borrowed from Alonzo Church's lambda calculus, it can be thought of an abstract description of how a function is made of parameters and a body. The function is used by giving it arguments which are evaluated and bounded to corresponding variables in the body. Scheme allows you to directly work with `lambda`s so you can build complicated things with just `lambda`s"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:42:44.199400",
          "text": "The interesting thing is a `lambda` can be evaluated different ways, which is why you see discussion about applicative and normal evaluation in SICP, though my understanding is those terms are not standard in current programming language literature, they use different names. SICP was written a long time ago so things have moved long way since then"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:44:07.200100",
          "text": "oh...I was devoting an entire blog entry to Applicative/Normal and hesitating...maybe I should just move on and get to the meaty stuff"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:44:27.200700",
          "text": "are there more current explanations I can read?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-22T09:44:39.201000",
          "text": "it's not really an issue nowadays, apart from research fields"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:44:47.201300",
          "text": "okay"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:45:23.202000",
          "text": "I won't worry too much about it, I'll look for a decent explanation for you though"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:47:15.204000",
          "text": "<@Terrence> this is not bad overview, <https://en.wikipedia.org/wiki/Evaluation_strategy>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-22T09:47:39.204600",
          "text": "But there's one interesting thing you could talk about when you'll be finished with SICP and will try macros (it's not for now!): In Racket, procedures are applied in the classic order (arguments first, procedure after), but macros are applied in reverse (transformation first, arguments after). But it's a bit complicated for a beginner."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:47:58.205100",
          "text": "<@Mauro> I quoted your explanation on my blog if that is okay"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-22T09:49:31.205900",
          "text": "it's fine with me <@Terrence>"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:49:35.206200",
          "text": "ty"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-22T09:53:19.206800",
          "text": "Re. 1 IMHO lindenmayer as cool as it is has too much of an academic vibe so it really depends on the desired audience of BR"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T09:56:04.207400",
          "text": "<@Hallie> do you think the language has an academic vibe (drawing trees for biology) or the paper/racket presentation of it has an academic vibe?"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-22T10:03:45.207600",
          "text": "mostly the former - and nothing wrong with that! But reading Matthew's \"why lop...\" post I feel it is mostly targeted at the industry (html, riposte, etc.)"
        }
      ]
    },
    {
      "conversation_id": "190",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loise: Thank you, Jérôme!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Loise"
        ]
      },
      "timeline": [
        {
          "user": "Loise",
          "timestamp": "2019-02-22T07:12:32.170600",
          "text": "Thank you, Jérôme!"
        }
      ]
    },
    {
      "conversation_id": "191",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jana: is there a way to support [CODE] from [CODE]require/typed[CODE]can-be-response?` but this fails: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jana"
        ]
      },
      "timeline": [
        {
          "user": "Jana",
          "timestamp": "2019-02-22T07:52:26.172100",
          "text": "is there a way to support `response` from `(require web-server/http/response-structs)` in typed/racket? I tried wrapping the struct in an opaque `require/typed` using `can-be-response?` but this fails:\n```\ncan-be-response?: contract violation\n  any-wrap/c: Unable to protect opaque value passed as `Any`\n  value: #&lt;response&gt;\n  This warning will become an error in a future release.\n  in: the 1st argument of\n      a part of the or/c of\n      (or/c\n       struct-predicate-procedure?/c\n       (-&gt; Any boolean?))\n  contract from: \n      (interface for can-be-response?)\n```"
        }
      ]
    },
    {
      "conversation_id": "192",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: Thank you, Jerome!\nTerrence: Kami I am also exploring minimalism, and living meaningfully\nTerrence: Oh neat, I live right next to Indiana University, so if Daniel Friedman is still there, I could theoretically go say hi.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 38.13,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T08:31:16.172500",
          "text": "Thank you, Jerome!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T08:33:47.173800",
          "text": "<@Kami> I am also exploring minimalism, and living meaningfully"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T09:09:24.174900",
          "text": "Oh neat, I live right next to Indiana University, so if Daniel Friedman is still there, I could theoretically go say hi."
        }
      ]
    },
    {
      "conversation_id": "193",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tuan: So I've been working on the classic perfect/abundant/deficient aliquot sum problem a bit and was experimenting with a couple of ways of completing it. [CODE_BLOCK]\nTuan: I'm wondering why the filter/foldl is so much slower than the flat [CODE] when I'm using a stream\nTuan: It's ~twice as slow to filter/foldl",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 0.87,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tuan"
        ]
      },
      "timeline": [
        {
          "user": "Tuan",
          "timestamp": "2019-02-22T10:21:23.209200",
          "text": "So I've been working on the classic perfect/abundant/deficient aliquot sum problem a bit and was experimenting with a couple of ways of completing it.\n```\n(require racket/stream)\n(require threading)\n(require memoize)\n\n(define (evenly-divisible? num denom)\n  (equal? 0 (remainder num denom)))\n\n(define/memo (factors n)\n  (stream-filter (curry evenly-divisible? n)\n    (in-range 1 n)))\n\n(define (aliquot-2-all n)\n  (stream-fold + 0 \n    (factors n)))\n\n; this one seems to run significantly faster than\n; the two step filter/reduce\n(define (aliquot-sum-1 n)\n  (stream-fold (curry aliquot-foldl n) 0 (in-range 1 n)))\n\n(define (aliquot-foldl max acc n)\n  (cond\n    [(evenly-divisible? max n) (+ acc n)]\n    [else acc]))\n\n(provide classify)\n(define (classify n)\n  (define al-sum (aliquot-sum-1 (abs n)))\n  (cond\n    [(equal? al-sum n) 'perfect]\n    [(&lt; al-sum n)      'deficient]\n    [(&gt; al-sum n)      'abundant]))\n```"
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-22T10:21:50.209800",
          "text": "I'm wondering why the filter/foldl is so much slower than the flat `foldl` when I'm using a stream"
        },
        {
          "user": "Tuan",
          "timestamp": "2019-02-22T10:22:15.210400",
          "text": "It's ~twice as slow to filter/foldl"
        }
      ]
    },
    {
      "conversation_id": "194",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Amira: if anyone knows about [CODE] vs. [CODE], please take a look at this pull request: <[URL]\nKristeen: Amira I think Clarinda is likely to know the most there\nAmira: he commented a few minutes ago :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 80.07,
        "contains_question": false,
        "action_keywords": [
          "please"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Amira",
          "timestamp": "2019-02-22T10:37:37.211300",
          "text": "if anyone knows about `make-screen-bitmap` vs. `make-bitmap`, please take a look at this pull request: <https://github.com/racket/plot/pull/51>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T11:56:53.211900",
          "text": "<@Amira> I think <@Clarinda> is likely to know the most there"
        },
        {
          "user": "Amira",
          "timestamp": "2019-02-22T11:57:41.212400",
          "text": "he commented a few minutes ago :)"
        }
      ]
    },
    {
      "conversation_id": "195",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Does anyone know if there is anything out there in Racket to do face recognition? If not, is there anything that could be a stepping stone to that?\nKristeen: I agree about the focus. I was mostly thinking of it as one of many examples but I can certainly see how it might come off the wrong way\nHallie: your best bet would be probably with tensorflow binding that apparently few people have started working on recently: <[URL]\nHallie: and then <[URL]\nLillian: Thanks for the reminder about lindenmayer. I like that one. I just forgot about it. Let me see what I can do …\nTerrence: There is a playground you can use for Tensorflow. <[URL]",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 6,
        "duration_minutes": 28.72,
        "contains_question": true,
        "action_keywords": [
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Kristeen",
          "Lillian",
          "Shavon",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-02-22T12:39:35.213400",
          "text": "Does anyone know if there is anything out there in Racket to do face recognition? If not, is there anything that could be a stepping stone to that?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T12:49:24.214100",
          "text": "I agree about the focus. I was mostly thinking of it as one of many examples but I can certainly see how it might come off the wrong way"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-22T12:49:51.214400",
          "text": "your best bet would be probably with tensorflow binding that apparently few people have started working on recently: <https://groups.google.com/forum/#!searchin/racket-users/tensorflow%7Csort:date/racket-users/SM83PPLlEL4/loe1i8FZAwAJ>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-02-22T12:50:24.214700",
          "text": "and then <https://github.com/davidsandberg/facenet>"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-02-22T12:52:54.214900",
          "text": "Thanks for the reminder about lindenmayer. I like that one. I just forgot about it. Let me see what I can do …"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T13:08:18.215600",
          "text": "There is a playground you can use for Tensorflow.\n\n<https://playground.tensorflow.org/#activation=tanh&amp;batchSize=10&amp;dataset=circle&amp;regDataset=reg-plane&amp;learningRate=0.03&amp;regularizationRate=0&amp;noise=0&amp;networkShape=4,2&amp;seed=0.42675&amp;showTestData=false&amp;discretize=false&amp;percTrainData=50&amp;x=true&amp;y=true&amp;xTimesY=false&amp;xSquared=false&amp;ySquared=false&amp;cosX=false&amp;sinX=false&amp;cosY=false&amp;sinY=false&amp;collectStats=false&amp;problem=classification&amp;initZero=false&amp;hideText=false>"
        }
      ]
    },
    {
      "conversation_id": "196",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: OK, added the lindenmayer example. Thanks\nLillian: (and also moved examples at the beginning)\nDeneen: I’ve been making some dirt-simple #langs that walk over modules and add bindings to them manipulating the AST rather than just defining macros to expand. We needed to do this because in one of the languages we’re planning to write, we need to replace identifiers (they have to be changed to applications of a lookup form to respect a security property of the language). Tiny progress here: <[URL] :slightly_smiling_face:\nDeneen: Any input or more examples is always appreciated, but this taught me a lot. I’ve only ever written macros that expand forms using things like syntax-case, never manipulating the AST directly, so playing around with the expander was really helpful..\nDeneen: One thing I don’t really “get” is how when you use [CODE], it introduces a binding that you can then use in quote-syntax. So for example, if you define [CODE] using [CODE], then [CODE] is valid (where ' is backtick but making slack-friendly). This is different than if I just did a regular quasiquote, where (quasiquote x) would just be the symbol x. Why isn’t it the case that [CODE] for quote-syntax is just the identifier x?\nKristeen: Deneen is your question \"why did they design [CODE]/[CODE] that way\", or \"how does that work\"?\nDeneen: I guess I’m trying to reconcile the differences between syntax-quote and regular quasiquoting, since I feel like I’m misunderstanding\nDeneen: so I suppose a bit of both, largely the second.\nPriscila: Wait - [CODE] and [CODE] is different. Do you mean [CODE] ?\nKristeen: First, one thing to know is that there's [CODE] which does what [CODE] does\nKristeen: ie, [CODE] is exactly the identifier [CODE]\nDeneen: right, ok\nDeneen: So to be precise about it, on this line here: <[URL]\nDeneen: I am surprised this expands to the syntax for [CODE] rather than the identifier [CODE]\nKristeen: Second, the basic idea is that \"pattern variables\" bound by [CODE] are used in the \"template\" created by the [CODE] form\nKristeen: this is to support \"macro by example\", as you see in [CODE] as well\nKristeen: Further, [CODE] is just a trivial wrapper around [CODE]\nDeneen: ah, ok, that last thing you said makes it make more sense\nDeneen: So it looks for pattern variables first and then defaults to an identifier if not found?\nDeneen: something like that?\nKristeen: but really [CODE] is just a combination of a pattern matcher and binding pattern variables, which are then available in things constructed with [CODE]\nDeneen: I see, that does make more sense.\nKristeen: you could have a pattern matcher that worked more like [CODE], and then have to use [CODE] to construct the output\nKristeen: this is what Common Lisp macros look like, somewhat\nDeneen: I see. I feel like I’ve got not a ton of intuition for this yet, but that helps!\nDeneen: sounds like I should mostly read more about syntax-case",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 26,
        "duration_minutes": 133.5,
        "contains_question": true,
        "action_keywords": [
          "create",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Kristeen",
          "Lillian",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-02-22T13:33:09.215900",
          "text": "OK, added the lindenmayer example. Thanks"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-02-22T13:38:34.216100",
          "text": "(and also moved examples at the beginning)"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:29:40.217700",
          "text": "I’ve been making some dirt-simple #langs that walk over modules and add bindings to them manipulating the AST rather than just defining macros to expand. We needed to do this because in one of the languages we’re planning to write, we need to replace identifiers (they have to be changed to applications of a lookup form to respect a security property of the language). Tiny progress here: <https://github.com/kmicinski/tinylangs/blob/master/tinylang1.rkt> :slightly_smiling_face:"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:30:18.218500",
          "text": "Any input or more examples is always appreciated, but this taught me a lot. I’ve only ever written macros that expand forms using things like syntax-case, never manipulating the AST directly, so playing around with the expander was really  helpful.."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:38:19.220300",
          "text": "One thing I don’t really “get” is how when you use `with-syntax`, it introduces a binding that you can then use in quote-syntax. So for example, if you define `x` using `with-syntax`, then `#'x` is valid (where  ' is backtick but making slack-friendly).  This is different  than if I just did a regular quasiquote, where (quasiquote x) would just be the symbol x.  Why isn’t it the  case that `#'x` for quote-syntax is just the identifier x?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:40:18.221600",
          "text": "<@Deneen> is your question \"why did they design `syntax-case`/`syntax` that way\", or \"how does that work\"?"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:40:48.222300",
          "text": "I guess I’m trying to reconcile the differences between syntax-quote and regular quasiquoting, since I feel like I’m misunderstanding"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:41:04.222700",
          "text": "so I suppose a bit of both, largely the second."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-22T15:41:27.223400",
          "text": "Wait - `syntax` and `syntax-quote` is different. Do you mean `syntax` ?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:41:38.223700",
          "text": "First, one thing to know is that there's `quote-syntax` which does what `quote` does"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:41:59.224100",
          "text": "ie, `(quote-syntax x)` is exactly the identifier `x`"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:42:05.224400",
          "text": "right, ok"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:42:10.224700",
          "text": "So to be precise about it, on this line here: <https://github.com/kmicinski/tinylangs/blob/master/tinylang1.rkt#L26>"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:42:32.225500",
          "text": "I am surprised this expands to the syntax for `transformed` rather than the identifier `transformed`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:43:03.226100",
          "text": "Second, the basic idea is that \"pattern variables\" bound by `syntax-case` are used in the \"template\" created by the `syntax` form"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:43:25.226600",
          "text": "this is to support \"macro by example\", as you see in `syntax-rules` as well"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:43:45.227200",
          "text": "Further, `with-syntax` is just a trivial wrapper around `syntax-case`"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:43:55.227500",
          "text": "ah, ok, that last thing you  said makes it make more sense"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:44:11.228200",
          "text": "So it looks for pattern variables first and then defaults to an identifier if not found?"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:44:15.228500",
          "text": "something like that?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:44:50.229000",
          "text": "but really `syntax-case` is just a combination of a pattern matcher and binding pattern variables, which are then available in things constructed with `syntax`"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:45:17.229600",
          "text": "I see, that does make more sense."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:45:31.229900",
          "text": "you could have a pattern matcher that worked more like `match`, and then have to use `quasisyntax` to construct the output"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-22T15:45:47.230300",
          "text": "this is what Common Lisp macros look like, somewhat"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:46:29.230700",
          "text": "I see. I feel like I’ve got not a ton of intuition for this yet, but that helps!"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-22T15:46:39.231000",
          "text": "sounds like I should mostly read more about syntax-case"
        }
      ]
    },
    {
      "conversation_id": "197",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: <[URL]\nPriscila: We need a beginners guide to lists in Racket.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.25,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-22T17:22:13.232300",
          "text": "<https://datastudio.google.com/u/0/reporting/1UUTtohIB1fBH7e8An-6AhEn4AyU3eMjd/page/QwNg?config=%7B%22df11%22:%22include%25EE%2580%25800%25EE%2580%2580IN%25EE%2580%2580racket%22%7D>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-22T17:22:28.232800",
          "text": "We need a beginners guide to lists in Racket."
        }
      ]
    },
    {
      "conversation_id": "198",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: What do you all do to combat those \"why should I bother with this?\" moments?\nKaren: Terrence say \"good point\" and not bother with it, usually\nKaren: I do that probably more often than I should\nJanett: Terrence It might be important to figure out who thinks you should bother and what their reasons are. Sometimes the reasons are hidden. Sometimes there aren't really good reasons, it's just inertia.\nTerrence: Janett I completely understand the inertia part of this. I have been pushing every day to work through it, and also work through the difficult concepts. It is worth it, even if I never work as a programmer again. I need to deprogram myself into thinking this is a way into the 20 somethings rat race. I love this language, and LOP, the more I read about it. Thanks for asking the question, because it made me think.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 355.97,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Janett",
          "Karen",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T17:50:39.233200",
          "text": "What do you all do to combat those \"why should I bother with this?\" moments?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-22T19:26:53.238000",
          "text": "<@Terrence> say \"good point\" and not bother with it, usually"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-22T19:28:57.238400",
          "text": "I do that probably more often than I should"
        },
        {
          "user": "Janett",
          "timestamp": "2019-02-22T20:29:22.239400",
          "text": "<@Terrence> It might be important to figure out who thinks you should bother and what their reasons are. Sometimes the reasons are hidden. Sometimes there aren't really good reasons, it's just inertia."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-22T23:46:37.247400",
          "text": "<@Janett> I completely understand the inertia part of this. I have been pushing every day to work through it, and also work through the difficult concepts. It is worth it, even if I never work as a programmer again. I need to deprogram myself into thinking this is a way into the 20 somethings rat race. I love this language, and LOP, the more I read about it.\n\nThanks for asking the question, because it made me think."
        }
      ]
    },
    {
      "conversation_id": "199",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: Do you use [CODE] for in-source documentation? Or do you always use a new file for documentation?\nJulia: I always make a [CODE]. I only sometimes use [CODE] in [CODE] files, to create doc submods that I include in the main [CODE] using [CODE].",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 15.55,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-02-22T18:46:35.234900",
          "text": "Do you use `scribble/srcdoc` for in-source documentation?\nOr do you always use a new file for documentation?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-22T19:02:08.236700",
          "text": "I always make a `&lt;package-name&gt;.scrbl`.\nI only sometimes use `scribble/srcdoc` in `.rkt` files, to create doc submods that I include in the main `.scrbl` using `@include-extracted`."
        }
      ]
    },
    {
      "conversation_id": "200",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Katharine: Is it specifically something you're trying to learn that seems to be pointless? I think in that situation, I skim it so I can recall the terminology involved, and if someday I realize it would help, I look it up then.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Katharine"
        ]
      },
      "timeline": [
        {
          "user": "Katharine",
          "timestamp": "2019-02-22T20:52:17.244400",
          "text": "Is it specifically something you're trying to learn that seems to be pointless? I think in that situation, I skim it so I can recall the terminology involved, and if someday I realize it would help, I look it up then."
        }
      ]
    },
    {
      "conversation_id": "201",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: I'm trying and failing to get this to type-check: [CODE_BLOCK] Does anyone know how to do this?\nKaren: Caprice I’m guessing the problem is the [CODE] part\nCaprice: I think so\nCaprice: the error I get is: [CODE_BLOCK]\nKaren: as a general rule, avoid unions between polymorphic types that aren’t disjoint\nKaren: they almost never work the way you want them to\nCaprice: Hmm I thought this would work since it's kind of similar to what a list looks like.\nKaren: lists use a special singleton null value as the end-of-list marker, but the [CODE] type is a union between two sets, not between a set and a singleton\nKaren: someone could instantiate [CODE] to [CODE], with a resulting union type of [CODE] - and then it’s ambiguous which case it is\nCaprice: Oh! I knew I must be missing something, and yes, you're right.\nCaprice: So I think I got my workaround: All I have to do is wrap the base in a struct\nKaren: Yup!\nCaprice: So [CODE] works, my function now returns [CODE]\nKaren: I got a working version of your thing:\nCaprice: thanks!\nKaren: [CODE_BLOCK]\nKaren: as a rule of thumb: be suspicious of [CODE]\nCaprice: haha\nCaprice: my version right now's a bit simpler so I'm going with it: [CODE_BLOCK]\nKaren: oh yup that’s a better way\nCaprice: By the way the reason this happened was because I meant [CODE] to actually be \"one of several subtypes of a struct\", but if I just use the parent struct in the type, I don't get to say \"function X works with a term of only a subtype of the struct\". So I just put type variables everywhere :smile:\nCaprice: rather, \"a parent struct or any subtype\"\nKaren: oh that makes sense :p\nCaprice: What's the meaning of the error I'm getting? For this code: [CODE_BLOCK]\nCaprice: I get [CODE_BLOCK]\nCaprice: My understanding is that since type [CODE] stands for an [CODE] of some class, get-field should be fine with it, no?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 26,
        "duration_minutes": 581.6,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "must",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:13:05.248100",
          "text": "I'm trying and failing to get this to type-check:\n```\n#lang typed/racket/base\n\n(struct (A) Prefix ([x : A]))\n\n(struct (A) Term\n  ([qual : (Prefix A)]\n   [base : (U (Term A) A)]))\n\n(: get-base (All (A) (-&gt; (Term A) A)))\n(define (get-base term)\n  (let ([maybe-base (Term-base term)])\n    (cond [(Term? maybe-base)\n           (get-base maybe-base)]\n          [else\n           maybe-base])))\n```\nDoes anyone know how to do this?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:13:45.248500",
          "text": "<@Caprice> I’m guessing the problem is the `(U (Term A) A)` part"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:14:09.249100",
          "text": "I think so"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:14:16.249400",
          "text": "the error I get is:\n```\nType Checker: Polymorphic function `get-base' could not be applied to arguments:\nArgument 1:\n  Expected: (Term A)\n  Given:    (U (Term A) (∩ #(struct:Term ((Prefix Any) Any)) A))\n\nResult type:     A\nExpected result: A\n in: (get-base maybe-base)\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:14:59.249900",
          "text": "as a general rule, avoid unions between polymorphic types that aren’t disjoint"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:15:10.250200",
          "text": "they almost never work the way you want them to"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:16:46.251300",
          "text": "Hmm I thought this would work since it's kind of similar to what a list looks like."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:17:59.252100",
          "text": "lists use a special singleton null value as the end-of-list marker, but the `(U (Term A) A)` type is a union between two sets, not between a set and a singleton"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:18:58.253800",
          "text": "someone could instantiate `A` to `(Term Foo)`, with a resulting union type of `(U (Term (Term Foo)) (Term Foo))` - and then it’s ambiguous which case it is"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:19:48.254600",
          "text": "Oh! I knew I must be missing something, and yes, you're right."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:19:55.254900",
          "text": "So I think I got my workaround: All I have to do is wrap the base in a struct"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:20:19.255500",
          "text": "Yup!"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:20:19.255700",
          "text": "So `(U (Term A) (Base A)` works, my function now returns `(Base A)`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:20:27.256000",
          "text": "I got a working version of your thing:"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:20:27.256300",
          "text": "thanks!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:20:33.256400",
          "text": "```\n#lang typed/racket/base\n\n(struct (A) Prefix ([x : A]))\n\n(struct (A) Primitive-Term\n  ([value : A]))\n\n(struct (A) Compound-Term\n  ([qual : (Prefix A)]\n   [base : (Term A)]))\n\n(define-type (Term A)\n  (U (Primitive-Term A) (Compound-Term A)))\n\n(: get-base (All (A) (-&gt; (Term A) A)))\n(define (get-base term)\n  (cond [(Primitive-Term? term)\n         (Primitive-Term-value term)]\n        [(Compound-Term? term)\n         (get-base (Compound-Term-base term))]))\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:21:35.257000",
          "text": "as a rule of thumb: be suspicious of `(U ... type-variable ...)`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:21:41.257200",
          "text": "haha"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:22:01.257700",
          "text": "my version right now's a bit simpler so I'm going with it:\n```\n#lang typed/racket/base\n\n(struct (A) Prefix ([x : A]))\n\n(struct (A) Term\n  ([qual : (Prefix A)]\n   [base : (U (Term A) (Base A))]))\n\n(struct (A) Base ([val : A]))\n\n(: get-base (All (A) (-&gt; (Term A) (Base A))))\n(define (get-base term)\n  (let ([maybe-base (Term-base term)])\n    (cond [(Term? maybe-base)\n           (get-base maybe-base)]\n          [else\n           maybe-base])))\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:22:23.257900",
          "text": "oh yup that’s a better way"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:36:41.263500",
          "text": "By the way the reason this happened was because I meant `A` to actually be \"one of several subtypes of a struct\", but if I just use the parent struct in the type, I don't get to say \"function X works with a term of only a subtype of the struct\". So I just put type variables everywhere :smile:"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T01:37:22.263900",
          "text": "rather, \"a parent struct or any subtype\""
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T01:40:51.264100",
          "text": "oh that makes sense :p"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T10:53:39.265300",
          "text": "What's the meaning of the error I'm getting? For this code:\n```\n#lang typed/racket/base\n\n(require typed/racket/class)\n\n(define-type Foo&lt;%&gt; (All (A) (Class (field [bar A]))))\n(define-type Foo (All (A) (Instance (Foo&lt;%&gt; A))))\n\n(define (baz [f : (All (A) (Foo A))])\n  (get-field bar f))\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T10:53:51.265700",
          "text": "I get\n```\nType Checker: type mismatch;\n expected an object value for get-field\n  given: Foo in: (get-field bar f)\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-23T10:54:41.266400",
          "text": "My understanding is that since type `Foo` stands for an `Instance` of some class, get-field should be fine with it, no?"
        }
      ]
    },
    {
      "conversation_id": "202",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Janett: Terrence While SICP is an important and influential book, there are ways in which it is more difficult than it needs to be. Racket's roots include, in part, the goal to improve on it. You might be interested in the paper \"The Structure and Interpretation of the Computer Science Curriculum\", by Felleisen et al., which goes into more detail. <[URL]\nTerrence: Janett thank you for this. :slightly_smiling_face:\nSusana: How to Design Programs is another free book, and is written by some of the people behind Racket\nTerrence: Inertia is my friend here. I start my new job on Monday so I will have less time to write code, but I will have a few hours before sleep to do some reading.\nTerrence: Yeah, reading this paper it's clear that the SICP is great, but what I'm doing is the equivalent of studying C to become better at C++. Two different things. I'll switch to HTDP/2e this weekend to give that a look.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 48.7,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Janett",
          "Susana",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Janett",
          "timestamp": "2019-02-23T11:44:38.268500",
          "text": "<@Terrence> While SICP is an important and influential book, there are ways in which it is more difficult than it needs to be. Racket's roots include, in part, the goal to improve on it. You might be interested in the paper \"The Structure and Interpretation of the Computer Science Curriculum\", by Felleisen et al., which goes into more detail. <https://www2.ccs.neu.edu/racket/pubs/jfp2004-fffk.pdf>"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-23T11:56:23.268900",
          "text": "<@Janett> thank you for this. :slightly_smiling_face:"
        },
        {
          "user": "Susana",
          "timestamp": "2019-02-23T11:59:10.269600",
          "text": "How to Design Programs is another free book, and is written by some of the people behind Racket"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-23T12:13:11.270400",
          "text": "Inertia is my friend here. I start my new job on Monday so I will have less time to write code, but I will have a few hours before sleep to do some reading."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-23T12:33:20.271700",
          "text": "Yeah, reading this paper it's clear that the SICP is great, but what I'm doing is the equivalent of studying C to become better at C++. Two different things. I'll switch to HTDP/2e this weekend to give that a look."
        }
      ]
    },
    {
      "conversation_id": "203",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: I think HtDP will give the general concepts and ergonomics for Racket, though. The methodology is what’s important. The particulars (knowing which [CODE] variant to use) aren’t quite as important. I think C/C++ isn’t quite the right comparison, since really HtDP is a subset of Racket that you could use thoughtfully very productively, while if you wrote K&amp;R-style C in C++ it would be a terrible idea :stuck_out_tongue:\nDeneen: That being said, I can empathize with the feeling that Racket is just a really big language that seemingly goes on forever, and it feels uneasy to use a subset that isn’t the “whole thing.” I felt that way when learning Racket from Scheme.\nDeneen: The part of Racket that’s hard to learn as a beginner is the extensible features of the language, treating the language as a compiler and language building framework, rather than a static thing (the way we’re used to learning languages) .\nDeneen: Kristeen you mentioned that [CODE] was just a macro on top of [CODE], which makes sense after reading more about syntax case and [CODE]. Any pointers on places--short of the actual Racket source--that would help build more fine-grained intuition about the macro system in this way? I presume I just need to dig through some papers on it.\nDeneen: the documentation has some good bits of insight scattered throughout.\nDeneen: I suspect I won’t really get this until I write a hygienic macro expander myself..\nDeneen: ok, that’s good advice\nDeneen: How did you learn how to do that, just play around with a bunch of examples?\nDeneen: I haven’t seen [CODE], is that something that messes with the scope sets on syntax objects?\nDeneen: okay, I see what’s going on here. I also feel like I’d get what’s going on if I could see how it all expands down to fully-expanded racket. Looks like all of this ends up expanding down to [CODE] and such.\nKaren: Playing with examples, as well as learning that it's used to implement these things: - match expanders - struct transformers (the static info about a struct) - syntax-parse pattern expanders (and probably syntax classes)\nKaren: Basically, whenever you need a way to pass around data at compile time between macros, [CODE] should be involved somewhere\nDeneen: that makes sense\nMai: The best tutorial for [CODE] is <[URL] section 2.1, IMO\nKaren: Also there's a really really good chapter somewhere in the racket guide about how modules, phases, and [CODE] interact\nDeneen: great, this is really helpful.\nKaren: Oh! One more thing that really helped me: the macros as sets of scopes paper and model. Specifically, it helped me a lot to think of identifiers as just strings plus sets of scopes. All of the information for keeping two identifiers with the same name distinct is encoded only in scopes. You don't actually need [CODE] at all, and if you find yourself using it in a macro what you probably want to do instead is to create a new scope. You can make your own scopes using [CODE], which is named that because the API existed before the set-of-scopes model. A more modern API would probably be something like [CODE] combined with [CODE].\nDeneen: Yeah, I watched a video by Matt Flatt a few times about this\nDeneen: <[URL]\nKaren: Yup that one!\nDeneen: watched this 3-4 times and then read examples..\nDeneen: the scope sets idea is great, but I don’t have a clear idea about how scope sets relate back to what will get expanded using which set of bindings, etc..\nKaren: yeah I think it's hard to connect the scope set ideas to the current racket syntax APIs\nKaren: The APIs would probably look a lot different if they were developed after scope sets were figured out\nDeneen: yeah, this is one challenge I have. There are a few different layers here that all interact in fairly subtle ways\nKaren: It's not just you. There's a lot of things that could be done to make the macro system more accessible.\nDeneen: Yes, this “macros that work together” paper is pretty good\nDeneen: It’s much more uniform in its economy of using the macro API.\nDeneen: I also get confused here because papers often use the term “compile-time”, but I realize this is just an approximation of what really happens: racket has multiple phases that expand various things, and so reconciling that high-level notion with the actual implementation is sometimes a bit tricky.\nKristeen: Deneen I find your comment a bit confusing, because there are a few different things in play here (1) the basics of Dybvig-style procedural macros, using [CODE], [CODE] and [CODE] (2) Racket's extensions to those (3) how hygiene works at a non-slogan level (4) the pragmatics of sophisticated metaprogramming in Racket\nKristeen: your confusion about [CODE] and [CODE] seems to be mostly in (1) but you've gotten answers mostly about the others\nKristeen: I would recommend Dybvig's \"writing hygenic macros in Scheme with syntax-case\" as a great macro-writing tutorial\nKristeen: perhaps especially because it doesn't treat any of the other more complex topics\nDeneen: Kristeen yes, thanks for the pointers. I read through this over the past few hours and it has been a great reference. My apologies, I’ve never properly “learned” macro-based programming, only superficially hacked around it..\nDeneen: I’ll think over this for a few days and work through the examples and see if I have more questions after that..!\nTerrence: Deneen compilers and languages is what drew me to LISP in the first place, and then to Racket. But yes, I've been \"learning\" this rather statically. Maybe I'll change that approach.\nKristeen: Yes, that's the correct solution, although you can just put the path you want directly in the define-runtime-path also.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 37,
        "duration_minutes": 1463.72,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Karen",
          "Kristeen",
          "Mai",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T13:33:05.273400",
          "text": "I think HtDP will give the general concepts and ergonomics for Racket, though. The methodology is what’s important. The particulars (knowing which `for` variant to use) aren’t quite as important. I think C/C++ isn’t quite the right comparison, since really HtDP is a subset of Racket that you could use thoughtfully very productively,  while if you  wrote K&amp;R-style C in C++ it would be a terrible  idea :stuck_out_tongue:"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T13:34:56.274200",
          "text": "That being said, I can empathize with the feeling that Racket is just a really big language that seemingly goes on forever, and it feels uneasy to use a subset that isn’t the “whole thing.” I felt that way when learning Racket from Scheme."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T13:35:27.274900",
          "text": "The part of Racket that’s hard to learn as a beginner is the extensible features of the language, treating the language as a compiler and language building framework, rather than a static thing (the way we’re used to learning languages) ."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:08:11.276400",
          "text": "<@Kristeen> you mentioned that `with-syntax` was just a macro on top of `syntax-case`, which makes sense after reading more about syntax case and `syntax`. Any pointers on places--short of the actual Racket source--that would help build more fine-grained intuition about the macro system in this way? I presume I just need to dig through some papers on it."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:09:24.276700",
          "text": "the documentation has some good bits of insight scattered throughout."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:11:27.277100",
          "text": "I suspect I won’t really get this until I write a hygienic macro expander myself.."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:12:54.279000",
          "text": "ok, that’s good advice"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:13:03.279400",
          "text": "How did you learn how to do that, just play around  with a bunch of examples?"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:13:18.279900",
          "text": "I haven’t seen  `syntax-local-value`, is that something  that messes with the scope sets on syntax objects?"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:17:18.285000",
          "text": "okay, I see what’s going on here. I also feel like I’d get what’s going on if I could see how it all expands down to fully-expanded racket. Looks like all of this ends up expanding down to `define-syntaxes` and such."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:17:34.285300",
          "text": "Playing with examples, as well as learning that it's used to implement these things:\n\n- match expanders\n- struct transformers (the static info about a struct)\n- syntax-parse pattern expanders (and probably syntax classes)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:19:36.287100",
          "text": "Basically, whenever you need a way to pass around data at compile time between macros, `syntax-local-value` should be involved somewhere"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:20:11.287300",
          "text": "that makes sense"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-23T18:27:12.288700",
          "text": "The best tutorial for `syntax-local-value` is <https://www.cs.utah.edu/plt/publications/jfp12-draft-fcdf.pdf>, section 2.1, IMO"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:27:39.289600",
          "text": "Also there's a really really good chapter somewhere in the racket guide about how modules, phases, and `define-syntax` interact"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:27:50.289800",
          "text": "great, this  is really helpful."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:33:06.296800",
          "text": "Oh! One more thing that really helped me: the macros as sets of scopes paper and model. Specifically, it helped me a lot to think of identifiers as just strings plus sets of scopes. All of the information for keeping two identifiers with the same name distinct is encoded only in scopes. You don't actually need `gensym` at all, and if you find yourself using it in a macro what you probably want to do instead is to create a new scope. You can make your own scopes using `make-syntax-introducer`, which is named that because the API existed before the set-of-scopes model. A more modern API would probably be something like `make-scope` combined with `identifier-add-scope`."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:33:32.297100",
          "text": "Yeah, I watched a video  by Matt Flatt a few times about this"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:33:43.297300",
          "text": "<https://www.youtube.com/watch?v=Or_yKiI3Ha4>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:33:49.297700",
          "text": "Yup that one!"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:33:51.297800",
          "text": "watched this 3-4 times and then read examples.."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:34:21.298400",
          "text": "the scope sets idea is great, but  I don’t have a clear idea about how scope sets relate back to what will  get expanded using which  set of bindings, etc.."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:34:53.299300",
          "text": "yeah I think it's hard to connect the scope set ideas to the current racket syntax APIs"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:35:33.300300",
          "text": "The APIs would probably look a lot different if they were developed after scope sets were figured out"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T18:36:06.300800",
          "text": "yeah, this is one challenge I have. There are a few different layers here that all interact in fairly  subtle ways"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:37:44.302100",
          "text": "It's not just you. There's a lot of things that could be done to make the macro system more accessible."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T20:13:11.302500",
          "text": "Yes, this “macros that work together” paper is pretty good"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T20:13:27.303000",
          "text": "It’s much more uniform in its economy of using the macro API."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T20:20:06.304100",
          "text": "I also get confused here because  papers often use the term “compile-time”, but I realize this is just an approximation of what really happens: racket has multiple phases that expand various  things, and so reconciling that high-level notion with the actual implementation is sometimes a bit tricky."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-23T20:29:51.306200",
          "text": "<@Deneen> I find your comment a bit confusing, because there are a few different things in play here (1) the basics of Dybvig-style procedural macros, using `define-syntax`, `syntax-case` and `syntax` (2) Racket's extensions to those (3) how hygiene works at a non-slogan level (4) the pragmatics of sophisticated metaprogramming in Racket"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-23T20:30:24.306900",
          "text": "your confusion about `with-syntax` and `syntax-case` seems to be mostly in (1) but you've gotten answers mostly about the others"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-23T20:31:11.307700",
          "text": "I would recommend Dybvig's \"writing hygenic macros in Scheme with syntax-case\" as a great macro-writing tutorial"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-23T20:31:43.308300",
          "text": "perhaps especially because it doesn't treat any of the other more complex topics"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T23:05:57.310600",
          "text": "<@Kristeen> yes, thanks for the pointers. I read through this over the past few hours and it has been a great reference. My apologies, I’ve never properly “learned” macro-based programming, only superficially hacked around it.."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-02-23T23:09:46.311500",
          "text": "I’ll think over this for a few days and work through the examples and see if I have more questions after that..!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-02-24T06:54:52.312900",
          "text": "<@Deneen> compilers and languages is what drew me to LISP in the first place, and then to Racket. But yes, I've been \"learning\" this rather statically. Maybe I'll change that approach."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-24T13:56:48.317300",
          "text": "Yes, that's the correct solution, although you can just put the path you want directly in the define-runtime-path also. "
        }
      ]
    },
    {
      "conversation_id": "204",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: For me, understanding how to pass values between macros using [CODE] and [CODE] made a lot of other stuff click into place",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-23T18:12:34.278700",
          "text": "For me, understanding how to pass values between macros using `define-syntax` and `syntax-local-value` made a lot of other stuff click into place"
        }
      ]
    },
    {
      "conversation_id": "205",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Has anyone else ever wanted an alternative to [CODE] that uses keyword arguments?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-23T22:07:01.309300",
          "text": "Has anyone else ever wanted an alternative to `make-struct-type` that uses keyword arguments?"
        }
      ]
    },
    {
      "conversation_id": "206",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Katharine: I recently pretended it had keyword arguments by using [CODE] instead of [CODE] for the \"keywords,\" so I think that makes me a fan of this idea. :) <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Katharine"
        ]
      },
      "timeline": [
        {
          "user": "Katharine",
          "timestamp": "2019-02-24T06:25:54.311600",
          "text": "I recently pretended it had keyword arguments by using `#;` instead of `#:` for the \"keywords,\" so I think that makes me a fan of this idea. :) <https://github.com/lathe/lathe-comforts-for-racket/blob/04bc5e24a54f9e6717970586cefc624fbcc400d7/lathe-comforts-lib/struct.rkt#L475>"
        }
      ]
    },
    {
      "conversation_id": "207",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marylin: Hello! I have a racket file that points to an other file in the same directory like: [CODE] but... the relative path doesn't work i.e. how to build a relative path w.r.t. the current file? thx !\nMarylin: Well, apparently, this will do the trick: [CODE_BLOCK]\nJulia: Marylin Note that [CODE] or even [CODE] are perfectly valid identifiers in Racket. So if you want you can do things like: [CODE_BLOCK] ¯\\_(ツ)_/¯",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 60.5,
        "contains_question": true,
        "action_keywords": [
          "build",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Marylin"
        ]
      },
      "timeline": [
        {
          "user": "Marylin",
          "timestamp": "2019-02-24T13:31:15.315600",
          "text": "Hello! I have a racket file that points to an other file in the same directory like: `\"./help.txt\"` but... the relative path doesn't work i.e. how to build a relative path w.r.t. the current file? thx !"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-24T13:38:39.316200",
          "text": "Well, apparently, this will do the trick:\n```\n(define-runtime-path data-dir \".\")\n(build-path data-dir \"help.txt\")\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-24T14:31:45.319300",
          "text": "<@Marylin> Note that `help.txt` or even `../path/to/foo.txt` are perfectly valid identifiers in Racket. So if you want you can do things like:\n```\n(require racket/runtime-path)\n(define-runtime-path help.txt \"help.txt\")\n(define-runtime-path ../path/to/foo.txt (build-path 'up \"path\" \"to\" \"foo.txt\"))\n``` ¯\\_(ツ)_/¯"
        }
      ]
    },
    {
      "conversation_id": "208",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Is there a shortcut for typing that man in the last line?\nJulia: Well that is my trademark but I will share how to do it anyway. It's the [CODE] command in slack. Just start the line(s) with [CODE].\nJulia: or not ¯\\_(ツ)_/¯\nJulia: :smile:\nPriscila: Thanks!\nPriscila: Strange. It's the only command of that type.\nPriscila: Ah Well.\nPriscila: ¯\\_(ツ)_/¯\nMarylin: /shrug Ok thx !\nPriscila: Mai Hi. Hopefully sorbits (Allan) will pull the PR monday, but if not how about this plan: We set up a Github team (say scheme-team) or reuse sicp-team. Then fork the grammar, and then take up pchaigo on his offer. <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 35.45,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Marylin",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-24T14:42:15.320300",
          "text": "Is there a shortcut for typing that man in the last line?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-24T14:45:21.321400",
          "text": "Well that is my trademark but I will share how to do it anyway. It's the `shrug` command in slack. Just start the line(s) with `/shrug`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-24T14:45:50.321500",
          "text": "or not ¯\\_(ツ)_/¯"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-24T14:45:54.321700",
          "text": ":smile:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-24T14:57:32.322000",
          "text": "Thanks!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-24T14:59:55.322400",
          "text": "Strange. It's the only command of that type."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-24T14:59:58.322700",
          "text": "Ah Well."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-24T15:00:02.322800",
          "text": "¯\\_(ツ)_/¯"
        },
        {
          "user": "Marylin",
          "timestamp": "2019-02-24T15:11:05.323200",
          "text": "/shrug Ok thx !"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-24T15:17:42.324900",
          "text": "<@Mai> Hi. Hopefully sorbits (Allan) will pull the PR monday, but if not how about this plan: We set up a Github team (say scheme-team) or reuse sicp-team. Then fork the grammar, and then take up pchaigo on his offer. <https://github.com/github/linguist/issues/3089#issuecomment-462360585>"
        }
      ]
    },
    {
      "conversation_id": "209",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: nice!!\nKaren: if you’re interested in more details, the docs for this function are online now: <[URL]\nKaren: (it’s part of my utils package)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 1.82,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-24T21:05:34.325500",
          "text": "nice!!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-24T21:07:13.325700",
          "text": "if you’re interested in more details, the docs for this function are online now: <http://docs.racket-lang.org/rebellion/Struct_Descriptors.html|docs.racket-lang.org/rebellion/Struct_Descriptors.html>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-24T21:07:23.325900",
          "text": "(it’s part of my utils package)"
        }
      ]
    },
    {
      "conversation_id": "210",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: Back when I was at Uni I had to use Java all the time. I didn’t understand that it was a problem, but I was slowly starting to hate programming. I was considering changing majors actually. However, when I discovered PLT-Scheme and SICP, it reignited my passion for programming. So, for that, I wanted thank all of you for your hard work. It made a big difference for me. Who knows what I would be doing now if I had quit CS?\nCaprice: Often typed/rackunit for me goes into an infinite loop kinda thing (the tests terminate after a while when drracket says it's gone out of memory)\nCaprice: is that a known bug?\nCaprice: Btw it only happens on test failures\nCaprice: I get this much displayed on screen: [CODE_BLOCK] And nothing after that, the interaction window stays like that for a while, and then DrRacket asks to kill the program as it's gone over memory limit.\nCaprice: Is there anything in Racket that's like Python's OrderedDict? An OrderedDict in Python is a dictionary that preserves insertion order when iterating. In Python3.6 onwards, they made the standard library's dictionary behave that way by default, it was faster for them. I don't care much for the speed, but I find the behavior quite useful.\nCaprice: As in, for/hash would receive the keys/values in the same order as insertion\nCaprice: In the meanwhile, a list of pairs works for me, it's fairly simple to write functions to work on that.\nKristeen: Caprice there's a pkg for that\nKristeen: I think it's called ordered-hash\nCaprice: Switching from contracts to types make types feel clunky (contracts were amazing! satisfying the type checker is so much work), switching from types to contracts make contracts seem so primitive (all my dear guarantees are gone! what's with all these runtime checks), but switching from having nothing to any one of those feels soooooo empowering :smile:\nCaprice: Kristeen nope must be something else\nKristeen: It's called ddict\nCaprice: Kristeen thank you so much for typed racket btw\nKristeen: And there's also dset\nCaprice: found ddict, thanks!\nCaprice: How does the package server tag packages?\nJulia: Kristeen Oh I thought you were going to suggest [CODE] <[URL] or or [CODE] <[URL]\nKristeen: Caprice tags are added by package authors\nCaprice: Right, basically I was looking for a place to add a suggestion/pull-request kinda thing, saying \"it would be nice if this package is searchable by terms like dictionary, ordered dictionary, hash\". Anyway that's fine.\nJulia: Caprice I think you could email the package author; I think most or all pkgs have email addresses? (But I agree a PR or \"suggest tag\" UI in the pkg web site would be nice.)\nCaprice: For now I've just powered on with my assoc-list and not used any package :blush: I hope to have this thing I'm working on submitted to the package server in a few days, so I'll feel less bad about asking so many things here :smile:\nCaprice: I did note the LIFO part but I figured as long as I know the order it's fine, I can always reverse in the end\nKaren: Caprice out of curiosity, what are you working on that requires an insertion-ordered dict?\nLillian: FWIW it took me a least a couple years to notice that all the functions in [CODE] will work with a list of pairs\nCaprice: Karen Sooo what I do is I maintain a data structure that allows me to present an interface for \"query\"-ing data, and holds enough information to be able to rendered to SQL later on. Part of that information is a \"list of join-graphs\". I can ask my query to include columns. These included things are \"qualified columns\", as in, they're prefixed by either a table or a list of relations from that table leading to another. Whenever I ask my query to \"include\" something across multiple relations, I check if the path represented by those lists of relations exists in one of the join-graphs and if it does, it just adds the column, and if it doesn't, it also adds the missing tail of the path into the relevant graph. When I actually get around to rendering the SQL, I iterate my list of graphs breadth-first and map each path-to-node to a string. This way when rendering columns I always know how to refer to the name of the relation-path that is the column's prefix. When I render the joins, instead of iterating my list of graphs again, I simply iterate over this map, because the map was made via iterating breadth-first, which means that as long as I iterate in insertion order, previous relations won't refer to future relations that haven't been rendered yet.\nKaren: Caprice I don’t follow the details, but I think I get the general idea you’re going for. Would it help you if you had a library for dealing specifically with directed acyclic graphs? It sounds like that kind of logic is embedded in a lot of that domain.\nCaprice: I dunno, really. Overall what I'm trying to do is have a \"language\" to allow client programs to query relations more naturally. Relations do form graphs. But I think the graph part is done now.\nCaprice: A lot of the difficulty is simply translating to sql without losing expressive power on either side.\nKaren: That makes sense\nKaren: there’s a [CODE] package for writing sql queries with s-expressions, you might find that useful\nKaren: but it sounds like you’re making something that’s more dynamic\nCaprice: Umm, \"losing expressive power\" is misleading. What I don't want to lose is the ability to let the client specify related columns, and/or filter based on related columns, while providing pretty much all of sql as far as filters go, but doing the right thing in terms of getting joins, optimizing, etc. so that the result is the one I want. And what I want is pretty unambiguous. The closest thing I had before this was in Python/Django/Django-ORM, where I leveraged django's relation lookups to do much of the heavy lifting. That worked brilliantly, but there were some pretty solid walls I hit that didn't allow me to do the additional things I wanted for future projects. Before that I'd done similar work in Python/SQLAlchemy, which has a more robust and flexible query builder, so it didn't have the same limitations as the django version, but it still had some fairly fundamental limitations, and didn't have the auto-relation-lookup thing done as comprehensively as django so there was less to leverage.\nCaprice: Karen yeah I saw the [CODE] package, but for now I don't need it. I do think I'll want to switch to it later, but that will be easy.\nCaprice: Another package that seems to have goals similar to mine is [CODE] but my approach is different. I'll see where we end up.\nKaren: I’ve done a little sqlalchemy muddling so this is an interesting space to me, but I don’t have much experience with it\nKaren: is any of your project’s code open source?\nCaprice: Not yet. I will open source all of this sql/relations part, and I thought I'd do so this week, but this week is looking less likely. Maybe on the weekend, or next week. Though I don't expect it to be very useful until some more work's done.\nCaprice: ... I find it funny how I can use \"open source\" as a verb.\nKaren: no rush, though whenever you get around to it feel free to let me know :)\nCaprice: Sure, will do\nCaprice: Karen btw what I mean by not \"need\"-ing the sql package was precisely this: what I'm making is more dynamic, and the reason it ought to be \"easy\" to switch to the package later on is that it'll only be there to pass through at the very end, so that (a) I can be more certain of the well-formed-ness of my sql across more than one database and (b) my tests no longer have to run against strings.\nCaprice: The [CODE] package's [CODE]/[CODE] functionality is gonna be a bit of a lifesaver though :phew: It's technically a workaround for what I originally wanted, but what I originally wanted isn't implemented anywhere else except postgresql's own client (psql) so this is about as good as it gets.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 43,
        "duration_minutes": 1670.63,
        "contains_question": true,
        "action_keywords": [
          "action",
          "agree",
          "build",
          "fix",
          "implement",
          "must",
          "requires",
          "submit",
          "will"
        ],
        "decision_keywords": [
          "works for me"
        ],
        "participants": [
          "Caprice",
          "Jule",
          "Julia",
          "Karen",
          "Kristeen",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-02-24T21:58:57.328800",
          "text": "Back when I was at Uni I had to use Java all the time. I didn’t understand that it was a problem, but I was slowly starting to hate programming. I was considering changing majors actually. However, when I discovered PLT-Scheme and SICP, it reignited my passion for programming. So, for that, I wanted thank all of you for your hard work. It made a big difference for me. Who knows what I would be doing now if I had quit CS?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T01:28:11.330300",
          "text": "Often typed/rackunit for me goes into an infinite loop kinda thing (the tests terminate after a while when drracket says it's gone out of memory)"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T01:28:14.330500",
          "text": "is that a known bug?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T01:37:01.331000",
          "text": "Btw it only happens on test failures"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T01:38:38.332500",
          "text": "I get this much displayed on screen:\n```\n--------------------\n. ../../../../../../usr/share/racket/pkgs/rackunit-typed/rackunit/main.rkt:22:2: FAILURE\n```\nAnd nothing after that, the interaction window stays like that for a while, and then DrRacket asks to kill the program as it's gone over memory limit."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T07:53:02.334700",
          "text": "Is there anything in Racket that's like Python's OrderedDict? An OrderedDict in Python is a dictionary that preserves insertion order when iterating. In Python3.6 onwards, they made the standard library's dictionary behave that way by default, it was faster for them. I don't care much for the speed, but I find the behavior quite useful."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T07:54:02.335100",
          "text": "As in, for/hash would receive the keys/values in the same order as insertion"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T08:11:32.335600",
          "text": "In the meanwhile, a list of pairs works for me, it's fairly simple to write functions to work on that."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-25T08:38:59.337300",
          "text": "<@Caprice> there's a pkg for that"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-25T08:39:34.338200",
          "text": "I think it's called ordered-hash"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T08:39:56.338500",
          "text": "Switching from contracts to types make types feel clunky (contracts were amazing! satisfying the type checker is so much work), switching from types to contracts make contracts seem so primitive (all my dear guarantees are gone! what's with all these runtime checks), but switching from having nothing to any one of those feels soooooo empowering :smile:"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T08:40:42.338900",
          "text": "<@Kristeen> nope must be something else"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-25T08:42:04.339400",
          "text": "It's called ddict"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T08:42:11.339700",
          "text": "<@Kristeen> thank you so much for typed racket btw"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-25T08:42:19.340000",
          "text": "And there's also dset"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T08:42:52.340400",
          "text": "found ddict, thanks!"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T08:49:08.340800",
          "text": "How does the package server tag packages?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-25T09:06:16.341900",
          "text": "<@Kristeen> Oh I thought you were going to suggest `data/splay-tree` <https://docs.racket-lang.org/data/Splay_Trees.html> or or `data/skip-list` <https://docs.racket-lang.org/data/skip-list.html>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-25T09:06:48.342500",
          "text": "<@Caprice> tags are added by package authors"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T09:33:35.343800",
          "text": "Right, basically I was looking for a place to add a suggestion/pull-request kinda thing, saying \"it would be nice if this package is searchable by terms like dictionary, ordered dictionary, hash\". Anyway that's fine."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-25T09:58:13.345500",
          "text": "<@Caprice> I think you could email the package author; I think most or all pkgs have email addresses?\n(But I agree a PR or \"suggest tag\" UI in the pkg web site would be nice.)"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T10:17:37.349700",
          "text": "For now I've just powered on with my assoc-list and not used any package :blush: I hope to have this thing I'm working on submitted to the package server in a few days, so I'll feel less bad about asking so many things here :smile:"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T10:18:40.350300",
          "text": "I did note the LIFO part but I figured as long as I know the order it's fine, I can always reverse in the end"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-25T15:25:08.351700",
          "text": "<@Caprice> out of curiosity, what are you working on that requires an insertion-ordered dict?"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-02-25T16:08:31.351800",
          "text": "FWIW it took me a least a couple years to notice that all the functions in `racket/dict` will work with a list of pairs"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-25T23:44:08.361200",
          "text": "<@Karen> Sooo what I do is I maintain a data structure that allows me to present an interface for \"query\"-ing data, and holds enough information to be able to rendered to SQL later on. Part of that information is a \"list of join-graphs\". I can ask my query to include columns. These included things are \"qualified columns\", as in, they're prefixed by either a table or a list of relations from that table leading to another. Whenever I ask my query to \"include\" something across multiple relations, I check if the path represented by those lists of relations exists in one of the join-graphs and if it does, it just adds the column, and if it doesn't, it also adds the missing tail of the path into the relevant graph. When I actually get around to rendering the SQL, I iterate my list of graphs breadth-first and map each path-to-node to a string. This way when rendering columns I always know how to refer to the name of the relation-path that is the column's prefix. When I render the joins, instead of iterating my list of graphs again, I simply iterate over this map, because the map was made via iterating breadth-first, which means that as long as I iterate in insertion order, previous relations won't refer to future relations that haven't been rendered yet."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-26T01:00:26.364000",
          "text": "<@Caprice> I don’t follow the details, but I think I get the general idea you’re going for. Would it help you if you had a library for dealing specifically with directed acyclic graphs? It sounds like that kind of logic is embedded in a lot of that domain."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:02:35.365600",
          "text": "I dunno, really. Overall what I'm trying to do is have a \"language\" to allow client programs to query relations more naturally. Relations do form graphs. But I think the graph part is done now."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:04:12.366800",
          "text": "A lot of the difficulty is simply translating to sql without losing expressive power on either side."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-26T01:07:53.369200",
          "text": "That makes sense"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-26T01:08:34.370700",
          "text": "there’s a `sql` package for writing sql queries with s-expressions, you might find that useful"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-26T01:08:41.371100",
          "text": "but it sounds like you’re making something that’s more dynamic"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:12:45.374900",
          "text": "Umm, \"losing expressive power\" is misleading. What I don't want to lose is the ability to let the client specify related columns, and/or filter based on related columns, while providing pretty much all of sql as far as filters go, but doing the right thing in terms of getting joins, optimizing, etc. so that the result is the one I want. And what I want is pretty unambiguous. The closest thing I had before this was in Python/Django/Django-ORM, where I leveraged django's relation lookups to do much of the heavy lifting. That worked brilliantly, but there were some pretty solid walls I hit that didn't allow me to do the additional things I wanted for future projects. Before that I'd done similar work in Python/SQLAlchemy, which has a more robust and flexible query builder, so it didn't have the same limitations as the django version, but it still had some fairly fundamental limitations, and didn't have the auto-relation-lookup thing done as comprehensively as django so there was less to leverage."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:13:56.376200",
          "text": "<@Karen> yeah I saw the `sql` package, but for now I don't need it. I do think I'll want to switch to it later, but that will be easy."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:14:33.377000",
          "text": "Another package that seems to have goals similar to mine is `plisqin` but my approach is different. I'll see where we end up."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-26T01:14:56.377600",
          "text": "I’ve done a little sqlalchemy muddling so this is an interesting space to me, but I don’t have much experience with it"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-26T01:15:07.378000",
          "text": "is any of your project’s code open source?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:16:26.379400",
          "text": "Not yet. I will open source all of this sql/relations part, and I thought I'd do so this week, but this week is looking less likely. Maybe on the weekend, or next week. Though I don't expect it to be very useful until some more work's done."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:17:40.379800",
          "text": "... I find it funny how I can use \"open source\" as a verb."
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-26T01:18:27.380600",
          "text": "no rush, though whenever you get around to it feel free to let me know :)"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:18:37.380800",
          "text": "Sure, will do"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:29:06.383000",
          "text": "<@Karen> btw what I mean by not \"need\"-ing the sql package was precisely this: what I'm making is more dynamic, and the reason it ought to be \"easy\" to switch to the package later on is that it'll only be there to pass through at the very end, so that (a) I can be more certain of the well-formed-ness of my sql across more than one database and (b) my tests no longer have to run against strings."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-26T01:49:35.384700",
          "text": "The `db` package's `groupings`/`group-rows` functionality is gonna be a bit of a lifesaver though :phew: It's technically a workaround for what I originally wanted, but what I originally wanted isn't implemented anywhere else except postgresql's own client (psql) so this is about as good as it gets."
        }
      ]
    },
    {
      "conversation_id": "211",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mitsuko: I discovered Racket through Exercism, and now I'm using it at work, so I can definitely recommend it.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mitsuko"
        ]
      },
      "timeline": [
        {
          "user": "Mitsuko",
          "timestamp": "2019-02-25T05:19:51.332700",
          "text": "I discovered Racket through Exercism, and now I'm using it at work, so I can definitely recommend it."
        }
      ]
    },
    {
      "conversation_id": "212",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: BTW I mentioned [CODE] and [CODE] because it looks like [CODE] is ordered LIFO, in case that matters? (Maybe you want LIFO. Or maybe it's sufficient to have _some_ order, e.g. when writing unit tests.)\nJulia: Having said all that I am super ignorant of, say, the pros and cons of splay trees and skip lists and so on. I'm not recommending, just pointing out. :smile:\nMai: Priscila let’s go with your plan. I don’t think Textmate people are going to merge that PR soon.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 766.57,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-02-25T10:00:44.347800",
          "text": "BTW I mentioned `splay-tree` and `skip-list` because it looks like `ddict` is ordered LIFO, in case that matters?\n(Maybe you want LIFO. Or maybe it's sufficient to have _some_ order, e.g. when writing unit tests.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-25T10:02:07.348600",
          "text": "Having said all that I am super ignorant of, say, the pros and cons of splay trees and skip lists and so on.\nI'm not recommending, just pointing out. :smile:"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-25T22:47:18.352900",
          "text": "<@Priscila> let’s go with your plan. I don’t think Textmate people are going to merge that PR soon."
        }
      ]
    },
    {
      "conversation_id": "213",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Mai I have forked the repository to the sicp-lang team (it turned out a new Team required a Github account associated with a business(?)). <[URL]\nMai: I will try merging the PR\nPriscila: Great.\nMai: Priscila I don’t have a permission to push to the fork, apparently\nPriscila: Mai I'll check again.\nPriscila: Ah! I teams are per repos - not per organisations.\nPriscila: Mai I have made a \"scheme-team\" and given you admin access.\nMai: Done!\nPriscila: Great - now we only need to test it.\nPriscila: I remember there is a page, where one can try out a new grammar definition.\nPriscila: But where...\nMai: A simpler thing to do might be to test it using TextMate directly (supposing that GitHub is compatible with TextMate)\nPriscila: Mai <[URL]\nMai: Looks correct to me!\nPriscila: Great. Wrote to pchaigno. Cross your fingers.\nMai: Meanwhile, I will look into <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 16,
        "duration_minutes": 28.05,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T03:46:51.386100",
          "text": "<@Mai> I have forked the repository to the sicp-lang team (it turned out a new Team required a Github account associated with a business(?)). <https://github.com/sicp-lang/scheme.tmbundle/issues/1>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T03:48:47.386900",
          "text": "I will try merging the PR"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T03:49:44.387600",
          "text": "Great."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T03:58:45.388300",
          "text": "<@Priscila> I don’t have a permission to push to the fork, apparently"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T03:59:02.388700",
          "text": "<@Mai> I'll check again."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T04:00:23.389200",
          "text": "Ah! I teams are per repos - not per organisations."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T04:02:51.389600",
          "text": "<@Mai> I have made a \"scheme-team\" and given you admin access."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T04:03:23.389800",
          "text": "Done!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T04:03:55.390100",
          "text": "Great - now we only need to test it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T04:04:10.390500",
          "text": "I remember there is a page, where one can try out a new grammar definition."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T04:04:13.390700",
          "text": "But where..."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T04:05:11.391400",
          "text": "A simpler thing to do might be to test it using TextMate directly (supposing that GitHub is compatible with TextMate)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T04:09:15.391700",
          "text": "<@Mai> <https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&amp;scope=from-url&amp;grammar_format=auto&amp;grammar_url=https%3A%2F%2Fgithub.com%2Fsicp-lang%2Fscheme.tmbundle%2Fblob%2Fmaster%2FSyntaxes%2FScheme.plist&amp;grammar_text=&amp;code_source=from-url&amp;code_url=https%3A%2F%2Fgithub.com%2Fnitinchandrol%2FBackgammon%2Fblob%2Fmaster%2Fproject%2Fproject.rkt&amp;code=>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T04:10:06.391900",
          "text": "Looks correct to me!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-26T04:12:46.392300",
          "text": "Great. Wrote to pchaigno. Cross your fingers."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T04:14:54.392700",
          "text": "Meanwhile, I will look into <https://github.com/textmate/scheme.tmbundle/issues/7>"
        }
      ]
    },
    {
      "conversation_id": "214",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Nova: morning all, got a dtalog question, would this be an ok place to ask for some advise / guideance ?\nHerman: Either here or the beginners channel is appropriate.\nNova: actually with fresh eyes i might havejust solved it …. :slightly_smiling_face:\nNova: but annother quick one though …\nNova: i cant seem to reference “built in” type ?? [CODE_BLOCK]\nNova: where would i import the type [CODE] from ??\nHerman: That's beyond me I'm afraid. The people you need are in a different time zone. They usually appear later. A few hours maybe.\nNova: Coolio, thanks anywho :)\nMai: Nova [CODE_BLOCK]\nMai: The thing that has method [CODE] is [CODE], not [CODE].\nMai: And [CODE] could be [CODE]. Typed Racket catches this mistake and reports a type error. By guarding [CODE] with [CODE], the code now works.\nMai: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 12,
        "duration_minutes": 259.37,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Mai",
          "Nova"
        ]
      },
      "timeline": [
        {
          "user": "Nova",
          "timestamp": "2019-02-26T06:36:18.393600",
          "text": "morning all, got a dtalog question, would this be an ok place to ask for some advise / guideance ?"
        },
        {
          "user": "Herman",
          "timestamp": "2019-02-26T06:38:22.394200",
          "text": "Either here or the beginners channel is appropriate."
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T06:39:16.394600",
          "text": "actually with fresh eyes i might havejust solved it …. :slightly_smiling_face:"
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T06:39:22.394900",
          "text": "but annother quick one though …"
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T06:39:54.395300",
          "text": "i cant seem to reference “built in” type ??\n```#lang typed/racket\n\n(require typed/racket/gui)\n\n(define (exit-editor button event) (exit 0))\n\n(define (setup-shortcuts [e : Keymap])\n  (define mapping (send e get-keymap))\n  (send mapping add-function \"quit\" exit-editor)\n  (send mapping map-function \"d:d\" \"quit\"))\n\n(define (log-it-out button event)\n  (display \"hey\\n\"))\n\n(define f (new frame% [label \"Simple Edit\"]\n                      [width 1024]\n                      [height 768]))\n(define c (new editor-canvas% [parent f]))\n(define t (new text%))\n(send c set-editor t)\n(new button% [parent f]\n     [label \"quit\"]\n     [callback exit-editor])\n\n(new button% [parent f]\n     [label \"clear\"]\n     [callback (lambda (button event) (send t erase))])\n\n(new button% [parent f]\n     [label \"log\"]\n     [callback log-it-out])\n\n(setup-shortcuts t)\n\n\n(define mb (new menu-bar% [parent f]))\n(define the-edit-menu (new menu% [label \"Edit\"] [parent mb]))\n(define the-font-menu (new menu% [label \"Font\"] [parent mb]))\n(send t set-max-undo-history 100)\n\n(send f show #t)\n\n```"
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T06:40:06.395700",
          "text": "where would i import the type `Keymap` from ??"
        },
        {
          "user": "Herman",
          "timestamp": "2019-02-26T06:45:12.396700",
          "text": "That's beyond me I'm afraid. The people you need are in a different time zone. They usually appear later. A few hours maybe."
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T06:46:24.397000",
          "text": "Coolio, thanks anywho :)"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T07:00:44.397600",
          "text": "<@Nova>\n\n```\n(define (setup-shortcuts [e : (Instance Text%)])\n  (define mapping (send e get-keymap))\n  (when mapping\n    (send mapping add-function \"quit\" exit-editor)\n    (send mapping map-function \"d:d\" \"quit\")))\n```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T07:01:39.398500",
          "text": "The thing that has method `get-keymap` is `text%`, not `keymap%`."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T07:02:38.399600",
          "text": "And `mapping` could be `#f`. Typed Racket catches this mistake and reports a type error. By guarding `(send mapping ...)` with `(when mapping ...)`, the code now works."
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T10:55:40.404100",
          "text": "```\n(define (setup-shortcuts [e : (Instance Text%)])\n  (: mapping (U (Instance Keymap%) #f))\n  (define mapping (send e get-keymap))\n  (when mapping\n    (send mapping add-function \"quit\" exit-editor)\n    (send mapping map-function \"d:d\" \"quit\")))\n```"
        }
      ]
    },
    {
      "conversation_id": "215",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Nova: So the “type” is keymap% but actually that was wrong for my specific usage here?\nNova: Ahhh sorry (Instance text% ) is the typedef :) got it\nMai: Nova right, it’s [CODE] that has type [CODE]\nNova: thanks Mai\nNova: just posted another wierd one too <#C09L257PY|beginners> if you feel like being a super human and helping me on that one too :wink:\nNova: Thanks a ton :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 233.1,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai",
          "Nova"
        ]
      },
      "timeline": [
        {
          "user": "Nova",
          "timestamp": "2019-02-26T08:04:19.401400",
          "text": "So the “type” is keymap% but actually that was wrong for my specific usage here?"
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T08:05:38.402700",
          "text": "Ahhh sorry (Instance text% ) is the typedef :) got it"
        },
        {
          "user": "Mai",
          "timestamp": "2019-02-26T10:55:35.403900",
          "text": "<@Nova> right, it’s `mapping` that has type `(U (Instance Keymap%) #f)`"
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T10:57:24.404700",
          "text": "thanks <@Mai>"
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T10:57:54.405400",
          "text": "just posted another wierd one too <#C09L257PY|beginners> if you feel like being a super human and helping me on that one too :wink:"
        },
        {
          "user": "Nova",
          "timestamp": "2019-02-26T11:57:25.405500",
          "text": "Thanks a ton :)"
        }
      ]
    },
    {
      "conversation_id": "216",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: How to use [CODE] like JavaDoc? :thinking_face: Is it supposed to look like this? : [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-02-26T12:52:50.409000",
          "text": "How to use `scribble/srcdoc` like JavaDoc? :thinking_face:\nIs it supposed to look like this? :\n```\n(provide \n (proc-doc/names\n  (any/c . -&gt; . boolean?)\n  (v)\n  @{Test if something @racket[v] is fun.}))\n(define (fun? v)\n  #f)\n```"
        }
      ]
    },
    {
      "conversation_id": "217",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sang: [CODE_BLOCK]\nSang: can anyone confirm that this is a bug before I dig further?\nSang: huh… yeah. they’re just missing\nSang: all of the [CODE] specifiers that are documented\nSang: <[URL]\nSang: Yes… but. I think the built-in libraries should be as usable/useful as possible.\nGonzalo: The SRFIs aren’t really the same as the “built-in libraries”, though, they are implementations of standards. If the standard isn’t what you want, you can’t just do something differently from the standard.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 362.8,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Sang"
        ]
      },
      "timeline": [
        {
          "user": "Sang",
          "timestamp": "2019-02-26T18:13:19.409500",
          "text": "```\n(require srfi/19)\n(string-&gt;date \"2019-02-26\" \"~Y-~m-~d\")  ; (date* 0 0 0 26 2 2019 ...)\n(string-&gt;date \"2019-02-26\" \"~1\")        ; TIME-ERROR type bad-date-format-string: \"~1\"\n```"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-26T18:13:49.409900",
          "text": "can anyone confirm that this is a bug before I dig further?"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-26T18:17:08.410200",
          "text": "huh… yeah. they’re just missing"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-26T18:17:24.410600",
          "text": "all of the `~#` specifiers that are documented"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-26T18:41:57.410800",
          "text": "<https://github.com/racket/srfi/issues/9>"
        },
        {
          "user": "Sang",
          "timestamp": "2019-02-27T00:11:11.411900",
          "text": "Yes… but. I think the built-in libraries should be as usable/useful as possible."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-27T00:16:07.412900",
          "text": "The SRFIs aren’t really the same as the “built-in libraries”, though, they are implementations of standards. If the standard isn’t what you want, you can’t just do something differently from the standard."
        }
      ]
    },
    {
      "conversation_id": "218",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shanell: An alternative: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Shanell",
          "timestamp": "2019-02-26T18:47:44.411300",
          "text": "An alternative:\n```\n&gt; (require gregor)\n&gt; (iso8601-&gt;date \"2019-02-26\")\n#&lt;date 2019-02-26&gt;\n```"
        }
      ]
    },
    {
      "conversation_id": "219",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: and those standards are scheme standards, not racket standards - there’s a reason the language changed its name from PLT scheme to racket\nKaren: So I wouldn’t consider them built-in libraries _of racket_\nCaprice: The problem is in [CODE] where the typechecker doesn't know that nums is definitely a list of numbers.\nCaprice: At least in a minimal example, this does the trick: [CODE_BLOCK]\nCaprice: Should I make an issue on github for the partition thing? Or is it something non-trivial to solve properly.. I checked the repo and the relevant part looks like this: [CODE_BLOCK] And I've no idea what to make of that.\nKaley: Caprice I've only briefly thought about it, but I'm pretty sure it would be a non-trivial fix\nCaprice: Kaley I'm using the [CODE] function I wrote above, as a workaround, works out for me. Anyway, I suppose you're right, but Typed Racket sure does _seem_ like it can do the thing you're talking about, like how it understands what to expect in the [CODE] branch of a [CODE] expression when using union types.\nKaley: Caprice random notes: on the [CODE] function, there's a [CODE] keyword you can use to reverse the lists as the final step if you want to maintain order (see the docs) or you could use [CODE]. And yes, Typed Racket can reason about negative type information generally, but not within a single type currently. I'm not sure if that's clear enough... I'm essentially saying you're right it seems like it should but it just falls short (because it does not feature negation types I believe).\nCaprice: Yes, the [CODE] keyword is super handy, I sorely missed that one before it was introduced. Back then I only used to do things like adventofcode in Racket.\nKaley: (I added it because I was losing my mind doing it after so many [CODE]s, lol)\nCaprice: haha, thanks! :smile:\nCaprice: Anyway, maybe some day I'll understand types, racket and typed racket well enough to contribute. Until then, I'll keep bugging people here :blush:\nCaprice: Rather a kind lot, you people are.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 13,
        "duration_minutes": 501.03,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Kaley",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-02-27T01:05:39.413400",
          "text": "and those standards are scheme standards, not racket standards - there’s a reason the language changed its name from PLT scheme to racket"
        },
        {
          "user": "Karen",
          "timestamp": "2019-02-27T01:06:07.413800",
          "text": "So I wouldn’t consider them built-in libraries _of racket_"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T02:29:30.416200",
          "text": "The problem is in `(apply + nums)` where the typechecker doesn't know that nums is definitely a list of numbers."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T02:46:07.416900",
          "text": "At least in a minimal example, this does the trick:\n```\n#lang typed/racket\n\n(define-type StringOrNum (U String Number))\n\n(define stuff '(1 \"asd\" 2 \"qwe\"))\n\n(: foo (-&gt; (Listof StringOrNum) Number))\n(define (foo lst)\n  (let-values\n      ([(strs nums)\n        ((inst my-partition String Number StringOrNum)\n         (λ([x : StringOrNum]) (string? x))\n         lst)])\n    (+ (length strs)\n       (apply + nums))))\n\n(: my-partition\n   (All (a b c)\n        (-&gt; (-&gt; c Any : #:+ a #:- b)\n            (Listof c)\n            (Values (Listof a) (Listof b)))))\n(define (my-partition fun lst)\n  (for/fold\n   : (Values (Listof a) (Listof b))\n    ([tru : (Listof a) '()]\n     [fal : (Listof b) '()])\n    ([x : c (in-list lst)])\n    (if (fun x)\n        (values (cons x tru) fal)\n        (values tru (cons x fal)))))\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T04:34:01.418600",
          "text": "Should I make an issue on github for the partition thing? Or is it something non-trivial to solve properly.. I checked the repo and the relevant part looks like this:\n```\n[partition\n (-poly (a b) (cl-&gt;*\n               (-&gt; (asym-pred b Univ (-PS (-is-type 0 a) -tt)) (-lst b) (-values (list (-lst a) (-lst b))))\n(-&gt; (-&gt; a Univ) (-lst a) (-values (list (-lst a) (-lst a))))))]\n```\nAnd I've no idea what to make of that."
        },
        {
          "user": "Kaley",
          "timestamp": "2019-02-27T08:49:24.421000",
          "text": "<@Caprice> I've only briefly thought about it, but I'm pretty sure it would be a non-trivial fix"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T09:19:10.425600",
          "text": "<@Kaley> I'm using the `my-partition` function I wrote above, as a workaround, works out for me. Anyway, I suppose you're right, but Typed Racket sure does _seem_ like it can do the thing you're talking about, like how it understands what to expect in the `else` branch of a `cond` expression when using union types."
        },
        {
          "user": "Kaley",
          "timestamp": "2019-02-27T09:21:46.427600",
          "text": "<@Caprice> random notes: on the `for/fold` function, there's a `#:result` keyword you can use to reverse the lists as the final step if you want to maintain order (see the docs) or you could use `for/lists`. And yes, Typed Racket can reason about negative type information generally, but not within a single type currently. I'm not sure if that's clear enough... I'm essentially saying you're right it seems like it should but it just falls short (because it does not feature negation types I believe)."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T09:23:58.428900",
          "text": "Yes, the `#:result` keyword is super handy, I sorely missed that one before it was introduced. Back then I only used to do things like adventofcode in Racket."
        },
        {
          "user": "Kaley",
          "timestamp": "2019-02-27T09:24:31.429700",
          "text": "(I added it because I was losing my mind doing it after so many `for/fold`s, lol)"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T09:24:57.430000",
          "text": "haha, thanks! :smile:"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T09:26:07.431000",
          "text": "Anyway, maybe some day I'll understand types, racket and typed racket well enough to contribute. Until then, I'll keep bugging people here :blush:"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T09:26:41.431200",
          "text": "Rather a kind lot, you people are."
        }
      ]
    },
    {
      "conversation_id": "220",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: How do I make this typecheck? [CODE_BLOCK] I can see from the documentation that what I need seems to be a \"negative proposition\", but I'm not sure where/how",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T02:28:50.415500",
          "text": "How do I make this typecheck?\n```\n#lang typed/racket\n\n(define-type StringOrNum (U String Number))\n\n(define stuff '(1 \"asd\" 2 \"qwe\"))\n\n(: foo (-&gt; (Listof StringOrNum) Number))\n(define (foo lst)\n  (let-values\n      ([(strs nums)\n        (partition\n         (λ([x : StringOrNum]) (string? x))\n         lst)])\n    (+ (length strs)\n       (apply + nums))))\n```\n\nI can see from the documentation that what I need seems to be a \"negative proposition\", but I'm not sure where/how"
        }
      ]
    },
    {
      "conversation_id": "221",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sang: Gonzalo I also mean [CODE], which doesn’t even have an equivalent of [CODE]\nGonzalo: Sang Indeed, but given that [CODE] is essentially nonexistent, turning it into a good datetime API would essentially mean reimplementing gregor. So just use gregor! But maybe it should be more clearly advertised.\nKaley: Currently Typed Racket can see that the [CODE] predicate does indeed recognize strings, but it fails to completely capture the notion of \"not a string\" in a type, which would likely be necessary to support [CODE] completely. A possible workaround would be to use [CODE] twice (once with [CODE] and once with [CODE]).",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 319.18,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Kaley",
          "Sang"
        ]
      },
      "timeline": [
        {
          "user": "Sang",
          "timestamp": "2019-02-27T03:31:42.417600",
          "text": "<@Gonzalo> I also mean `racket/date`, which doesn’t even have an equivalent of `string-&gt;date`"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-02-27T08:48:35.420600",
          "text": "<@Sang> Indeed, but given that `racket/date` is essentially nonexistent, turning it into a good datetime API would essentially mean reimplementing gregor. So just use gregor! But maybe it should be more clearly advertised."
        },
        {
          "user": "Kaley",
          "timestamp": "2019-02-27T08:50:53.422800",
          "text": "Currently Typed Racket can see that the `string?` predicate does indeed recognize strings, but it fails to completely capture the notion of \"not a string\" in a type, which would likely be necessary to support `partition` completely. A possible workaround would be to use `filter` twice (once with `string?` and once with `number?`)."
        }
      ]
    },
    {
      "conversation_id": "222",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lauryn: None",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lauryn"
        ]
      },
      "timeline": [
        {
          "user": "Lauryn",
          "timestamp": "2019-02-27T09:50:23.431400",
          "text": "None"
        }
      ]
    },
    {
      "conversation_id": "223",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Hey, I'm trying to write scribble documentation for a language, but the language can be used both as a [CODE] and by [CODE]. I tried using defmodule and defmodulelang, but I get an error saying tags are duplicated... I'd like to have a section of the doc about the [CODE] usage, and one about the [CODE] usage.\nKami: Any idea how to do that?\nKami: (I have a hard time understanding the documentation for defmodule &amp; co)\nKristeen: Kami most languages like that do use the [CODE] version (see slideshow, racket/gui, etc)\nKami: Kristeen Then, is there a way to render the module block without redefining a module in scribble?\nKristeen: not sure what you mean\nKami: well, when you define a module with defmodule, it renders a block showing [CODE]\nKami: I'd like to be able to show that again and again when I'm in a section of the documentation requiring that module\nKristeen: you might need the [CODE] versions\nKristeen: see for example <[URL]\nKami: mmmh, I still get the issue if I use no-declare multiple times\nKami: I get \"WARNING: collected information for key multiple times\"\nKami: in slideshow, the modules are slightly different : [CODE_BLOCK]\nKami: in my case, they have exactly the same name\nKami: I almost got it to work by using [CODE] but I still get something weird. It renders as: [CODE_BLOCK] The inner expression is not interpreted :disappointed:\nKami: WARNING: collected information for key multiple times\nKami: :confused:\nKami: the no-declare argument looks like it's not taken into account when specifying an actual module\nKami: the only way I get it to work is by using a \"content-expr\" (word from the doc: <[URL]\nKami: The syntax usage looks really weird to me, because depending on the type of what you pass to the first argument, it behaves differently\nKami: Ok, I'm starting to think it's not possible :disappointed:\nKami: Ok, I checked the output using the macro-stepper. It seems the macro is working fine, but the bug happens later on when trying to generate links\nKami: YES, I GOT IT!\nKami: I had to add [CODE] to prevent generating another link\nKami: :tada:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 25,
        "duration_minutes": 94.37,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:09:06.433700",
          "text": "Hey, I'm trying to write scribble documentation for a language, but the language can be used both as a `#lang` and by `(require)`. I tried using @defmodule and @defmodulelang, but I get an error saying tags are duplicated...\nI'd like to have a section of the doc about the `#lang` usage, and one about the `(require)` usage."
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:10:46.434000",
          "text": "Any idea how to do that?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:11:22.434400",
          "text": "(I have a hard time understanding the documentation for defmodule &amp; co)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T13:26:43.435100",
          "text": "<@Kami> most languages like that do use the `#lang` version (see slideshow, racket/gui, etc)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:28:22.435800",
          "text": "<@Kristeen> Then, is there a way to render the module block without redefining a module in scribble?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T13:28:38.436100",
          "text": "not sure what you mean"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:29:10.436800",
          "text": "well, when you define a module with @defmodule, it renders a block showing `(require module-name)                  package: package-name`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:29:49.437300",
          "text": "I'd like to be able to show that again and again when I'm in a section of the documentation requiring that module"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T13:30:25.437600",
          "text": "you might need the `no-declare` versions"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T13:30:33.437900",
          "text": "see for example <https://github.com/racket/slideshow/blob/master/slideshow-doc/scribblings/slideshow/slideshow.scrbl>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:34:05.438400",
          "text": "mmmh, I still get the issue if I use no-declare multiple times"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:36:41.438700",
          "text": "I get \"WARNING: collected information for key multiple times\""
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:38:17.439800",
          "text": "in slideshow, the modules are slightly different :\n```\n@defmodulelang*/no-declare[(slideshow/widescreen)]\n@defmodule*/no-declare[(slideshow/widescreen/base)]\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:38:36.440100",
          "text": "in my case, they have exactly the same name"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T13:53:27.441500",
          "text": "I almost got it to work by using `@defmodule[@racketmodname[rilouworld/quest] #:no-declare #:packages (\"rilouworld\")]` but I still get something weird. It renders as:\n```\n (require (racketmodname rilouworld/quest))                package: rilouworld\n```\nThe inner expression is not interpreted :disappointed:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:05:29.442100",
          "text": "WARNING: collected information for key multiple times"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:05:35.442300",
          "text": ":confused:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:06:25.443000",
          "text": "the no-declare argument looks like it's not taken into account when specifying an actual module"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:07:13.443800",
          "text": "the only way I get it to work is by using a \"content-expr\" (word from the doc: <https://docs.racket-lang.org/scribble/doc-modules.html?q=no-decalre#%28form._%28%28lib._scribble%2Fmanual..rkt%29._defmodule%29%29>)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:07:54.444500",
          "text": "The syntax usage looks really weird to me, because depending on the type of what you pass to the first argument, it behaves differently"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:22:00.444800",
          "text": "Ok, I'm starting to think it's not possible :disappointed:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:32:18.445500",
          "text": "Ok, I checked the output using the macro-stepper. It seems the macro is working fine, but the bug happens later on when trying to generate links"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:42:24.446000",
          "text": "YES, I GOT IT!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:43:05.446600",
          "text": "I had to add `#:link-target? #f` to prevent generating another link"
        },
        {
          "user": "Kami",
          "timestamp": "2019-02-27T14:43:28.446800",
          "text": ":tada:"
        }
      ]
    },
    {
      "conversation_id": "224",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: can you just put [CODE] there?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T14:00:31.441900",
          "text": "can you just put `rilouworld/quest` there?"
        }
      ]
    },
    {
      "conversation_id": "225",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mauro: when doing [CODE] on a BSD system I'm getting [CODE] is there a way to access and print that variable in REPL without needing to run the internal [CODE] module directly? I was hoping the variable would be printed to the debug logger but am not finding anything in the logger's output.\nPriscila: Mauro Which version of Racket are you using?\nMauro: Racket 7.2\nPriscila: Okay. Ought to be fine.\nMauro: I'm thinking possible something is misconfigured on this FreeBSD system related to SSL but don't have much to go on to figure out possible causes\nPriscila: The only similar error I find on Google, is: <[URL]\nPriscila: Here the issue was \"I have checked the difference between my previous working installation and the new one. I chose the wrong platform in the racket download page. I am in _x86_64_ and installed the _i386_ version. Re-installing the right one solves the issue.\"\nMauro: hmm, this Racket was installed from the ports\nMauro: if it's some version mismatch issue, might need to contact the port maintainer\nPriscila: I would try the official installer from: <[URL]\nPriscila: Then if that works, contact the port maintainer.\nPriscila: But - full disclosure - I have never tried Racket on FreeBSD. Using the official installer have solved other problems in the past though.\nMauro: just FYI there is no installer available for Unix variants, compile from source is the only possible option. I haven't had this particular issue before though. The pollen issue page told me how to find [CODE] and I see the problem is it's not able to find [CODE] and [CODE] is the installed version on this system. Hmm wondering if adding a symlink for [CODE] will resolve it\nKristeen: Mauro it's possible that this is a new error because we just made [URL] unconditional (as in earlier today)\nPriscila: The compile from source with prebuilt packages is the one I am thinking of.\nMauro: oh that could explain why this error is only now just popping up\nKristeen: see <[URL]\nKristeen: if you can comment there that would be helpful\nPriscila: (That's why I asked about the version number)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 19,
        "duration_minutes": 26.3,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Mauro",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Mauro",
          "timestamp": "2019-02-27T15:21:43.449800",
          "text": "when doing `raco pkg install` on a BSD system I'm getting `SSL not available, check 'ssl-load-fail-reason` is there a way to access and print that variable in REPL without needing to run the internal `mzssl.rkt` module directly? I was hoping the variable would be printed to the debug logger but am not finding anything in the logger's output."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:32:32.450300",
          "text": "<@Mauro> Which version of Racket are you using?"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-27T15:32:42.450500",
          "text": "Racket 7.2"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:33:09.451300",
          "text": "Okay. Ought to be fine."
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-27T15:33:27.451700",
          "text": "I'm thinking possible something is misconfigured on this FreeBSD system related to SSL but don't have much to go on to figure out possible causes"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:34:14.452200",
          "text": "The only similar error I find on Google, is: <https://github.com/mbutterick/pollen/issues/52>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:34:37.452900",
          "text": "Here the issue was \"I have checked the difference between my previous working installation and the new one. I chose the wrong platform in the racket download page. I am in _x86_64_ and installed the _i386_ version. Re-installing the right one solves the issue.\""
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-27T15:35:07.453500",
          "text": "hmm, this Racket was installed from the ports"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-27T15:35:27.453900",
          "text": "if it's some version mismatch issue, might need to contact the port maintainer"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:35:46.454300",
          "text": "I would try the official installer from: <https://download.racket-lang.org/>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:36:03.454700",
          "text": "Then if that works, contact the port maintainer."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:37:58.456200",
          "text": "But - full disclosure - I have never tried Racket on FreeBSD. Using the official installer have solved other problems in the past though."
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-27T15:47:01.458500",
          "text": "just FYI there is no installer available for Unix variants, compile from source is the only possible option. I haven't had this particular issue before though. The pollen issue page told me how to find `ssl-load-fail-reason` and I see the problem is it's not able to find `libcrypto.so` and `libcrypto.so.5` is the installed version on this system. Hmm wondering if adding a symlink for `libcrypto.so` will resolve it"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T15:47:26.459200",
          "text": "<@Mauro> it's possible that this is a new error because we just made https unconditional (as in earlier today)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:47:33.459500",
          "text": "The compile from source with prebuilt packages is the one I am thinking of."
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-27T15:47:45.459900",
          "text": "oh that could explain why this error is only now just popping up"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T15:47:45.460000",
          "text": "see <https://github.com/racket/racket-lang-org/issues/88>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-27T15:47:57.460600",
          "text": "if you can comment there that would be helpful"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-27T15:48:01.460800",
          "text": "(That's why I asked about the version number)"
        }
      ]
    },
    {
      "conversation_id": "226",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Does anyone know how [CODE] interacts with typed/racket? I need to make this kind of an expression work: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-02-27T23:37:15.461900",
          "text": "Does anyone know how `shared` interacts with typed/racket? I need to make this kind of an expression work:\n```\n#lang typed/racket\n\n(struct Foo ([a : Number]\n             [b : Foo])\n  #:mutable #:transparent)\n\n(shared ([#{a : Foo} (Foo 1 b)]\n         [#{b : Foo} (Foo 2 a)])\n  a)\n```"
        }
      ]
    },
    {
      "conversation_id": "227",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Clarinda Both [CODE] <[URL] and [CODE] <[URL] have this same note: &gt; See also [CODE] about the limitations of reading and writing to an SSL connection (i.e., one direction at a time). But, [CODE] <[URL] doesn't seem to discuss this AFAICT. Maybe the limitation was resolved and the [CODE] doc got updated -- and it's just the \"see also\" notes needed to be deleted but weren't? Or, is there some discussion that needs to be added to [CODE]?\nClarinda: Yes, I think that note is referring to a limitation that was removed.\nJulia: Thanks. That makes sense given my limited understanding of the [CODE] code I looked at. It seems to be doing an awful lot of work to handle openssl where you want to write, but it needs to read, presumably during the handshake phase but idk really. So maybe that work was to remove the limitation.\nJulia: Clarinda While I have you. I tried using [CODE] to \"upgrade\" a Racket pipe. The other end of the pipe is talking to UDP. I'm seeing the throughput get about 8X slower, which doesn't seem right. The CPU usage isn't super high, for instance. So it feels like something is blocking longer than it needs to... but I'm not really sure. I'm still trying to understand what's happening, and unfortunately don't have simple example code to share (yet). But I wanted to mention it in case it tickled something, some general advice to look at X, you might have? If not of course no worries and sorry to distract you!\nClarinda: Maybe buffering? Looking breifly at the implementation of SSL output ports, I don’t see a buffer for writes. Every individual write seems to go to [CODE].\nJulia: OK thank you, I'll think on that.\nJulia: Clarinda Did you mean, my app should try to write in bigger chunks to the TLS output-port, or, the implementation in mzssl.rkt would need to change? I ask b/c a single [CODE] many many bytes still elicits this. Also it seems like gc is 40-60% of the real time, depending on OS. Simple example, with timings in comments at the end: <[URL]\nJulia: (That example is just the TLS ports wrapping pipes -- like from one of the tests I noticed. Nothing to-do with UDP or whatever else.)\nClarinda: I can see why that example goes disasterously wrong. The output port has a buffer of 8000, so it’s writing 8000 of the N bytes passed by [CODE], and then [CODE] ends up copying N-8000 bytes for the next request, and so on, which makes it quadratic.\nMauro: Sorry about adding more noise to the channel, while troubleshooting the missing [CODE] issue when using racket on a TrueOS system which is a FreeBSD variant using LibreSSL, I ran into an entirely new problem after successfully resolving the [CODE] issue. The error every time I try to install a package is now telling me [CODE] This error is the same one as reported in <[URL] Not sure if this is possibly a bug in LIbreSSL, don't know how to start debugging this. I'm seeing if there are any LibreSSL environment variables that could help to print more details\nClarinda: Chunks much smaller than 8000, meanwhile, will be individually flushed. But maybe the SSL layer has its own buffering, because I don’t see much difference in relative performance between 7000 bytes and 70 bytes.\nClarinda: Oh, one write isn’t going to be a good comparison…\nClarinda: The gap does seem to narrow with 70 versus 700 written 1000 times, but it doesn’t close much.\nClarinda: So, it looks like the overhead of [CODE] is larger than the buffering effect.\nKristeen: Mauro can you try 6.9, which that report says works?\nMauro: I now have an entirely new problem, if 6.9 works then it should be possible to compare the relevant code between 6.9 and 7.2 to see what changed\nJulia: Hmm OK it looks like writing in smaller chunks (&lt; 8000) does make the TLS version be only 20X instead of 100X slower.\nJulia: I don't have a good intuition for how much slower it \"should\" be, except reading things about how using TLS only uses single digit % more CPU when Google did it. Which is handy-wavy.\nJulia: To me, [CODE] seems kind of scary and complicated; I feel I'd get it wrong. I'd probably try to use pipes. Even if that would work (?), would it be less performant?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 19,
        "duration_minutes": 324.88,
        "contains_question": true,
        "action_keywords": [
          "discuss",
          "implement",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Julia",
          "Kristeen",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-02-28T10:08:14.005200",
          "text": "<@Clarinda> Both `ssl-accept` <https://docs.racket-lang.org/openssl/index.html#%28def._%28%28lib._openssl%2Fmain..rkt%29._ssl-accept%29%29> and `ports-&gt;ssl-ports` <https://docs.racket-lang.org/openssl/index.html#%28def._%28%28lib._openssl%2Fmain..rkt%29._ports-~3essl-ports%29%29> have this same note:\n\n&gt; See also `ssl-connect` about the limitations of reading and writing to an SSL connection (i.e., one direction at a time).\n\nBut, `ssl-connect` <https://docs.racket-lang.org/openssl/index.html#%28def._%28%28lib._openssl%2Fmain..rkt%29._ssl-connect%29%29> doesn't seem to discuss this AFAICT.\n\nMaybe the limitation was resolved and the `ssl-connect` doc got updated -- and it's just the \"see also\" notes needed to be deleted but weren't?  Or, is there some discussion that needs to be added to `ssl-connect`?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T10:08:58.005600",
          "text": "Yes, I think that note is referring to a limitation that was removed."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T10:10:20.007000",
          "text": "Thanks. That makes sense given my limited understanding of the `mzssl.rkt` code I looked at. It seems to be doing an awful lot of work to handle openssl where you want to write, but it needs to read, presumably during the handshake phase but idk really.  So maybe that work was to remove the limitation."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T10:15:04.010600",
          "text": "<@Clarinda> While I have you. I tried using `ports-&gt;ssl-ports` to \"upgrade\" a Racket pipe. The other end of the pipe is talking to UDP.\nI'm seeing the throughput get about 8X slower, which doesn't seem right. The CPU usage isn't super high, for instance.\nSo it feels like something is blocking longer than it needs to... but I'm not really sure.\nI'm still trying to understand what's happening, and unfortunately don't have simple example code to share (yet).\nBut I wanted to mention it in case it tickled something, some general advice to look at X, you might have?\nIf not of course no worries and sorry to distract you!"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T10:18:46.011600",
          "text": "Maybe buffering? Looking breifly at the implementation of SSL output ports, I don’t see a buffer for writes. Every individual write seems to go to `SSL_write`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T10:20:52.012900",
          "text": "OK thank you, I'll think on that."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T13:50:57.015500",
          "text": "<@Clarinda> Did you mean, my app should try to write in bigger chunks to the TLS output-port, or, the implementation in mzssl.rkt would need to change?\nI ask b/c a single `write-bytes` many many bytes still elicits this.\nAlso it seems like gc is 40-60% of the real time, depending on OS.\nSimple example, with timings in comments at the end: <https://gist.github.com/greghendershott/c610fc2e6f74466a5e0d198115d6e5d2>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T13:52:00.016300",
          "text": "(That example is just the TLS ports wrapping pipes -- like from one of the tests I noticed. Nothing to-do with UDP or whatever else.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T14:01:47.018800",
          "text": "I can see why that example goes disasterously wrong. The output port has a buffer of 8000, so it’s writing 8000 of the N bytes passed by `write`, and then `write` ends up copying N-8000 bytes for the next request, and so on, which makes it quadratic."
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-28T14:03:28.020700",
          "text": "Sorry about adding more noise to the channel, while troubleshooting the missing `libcrypto.so` issue when using racket on a TrueOS system which is a FreeBSD variant using LibreSSL, I ran into an entirely new problem after successfully resolving the `libcrypto.so` issue. The error every time I try to  install a package is now telling me `tcp-write: error writing system error: Socket is not connected; errno=57` This error is the same one as reported in <https://github.com/racket/racket/issues/1812>\n\nNot sure if this is possibly a bug in LIbreSSL, don't know how to start debugging this. I'm seeing if there are any LibreSSL environment variables that could help to print more details"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T14:03:43.020900",
          "text": "Chunks much smaller than 8000, meanwhile, will be individually flushed. But maybe the SSL layer has its own buffering, because I don’t see much difference in relative performance between 7000 bytes and  70 bytes."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T14:04:33.021100",
          "text": "Oh, one write isn’t going to be a good comparison…"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T14:05:51.021300",
          "text": "The gap does seem to narrow with 70 versus 700 written 1000 times, but it doesn’t close much."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T14:06:59.021500",
          "text": "So, it looks like the overhead of `make-output-port` is larger than the buffering effect."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-28T14:08:22.022000",
          "text": "<@Mauro> can you try 6.9, which that report says works?"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-28T14:16:11.024700",
          "text": "I now have an entirely new problem, if 6.9 works then it should be possible to compare the relevant code between 6.9 and 7.2 to see what changed"
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T14:17:57.025000",
          "text": "Hmm OK it looks like writing in smaller chunks (&lt; 8000) does make the TLS version be only 20X instead of 100X slower."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T14:19:07.025200",
          "text": "I don't have a good intuition for how much slower it \"should\" be, except reading things about how using TLS only uses single digit % more CPU when Google did it. Which is handy-wavy."
        },
        {
          "user": "Julia",
          "timestamp": "2019-02-28T15:33:07.025800",
          "text": "To me, `make-{output input}-port` seems kind of scary and complicated; I feel I'd get it wrong. I'd probably try to use pipes. Even if that would work (?), would it be less performant?"
        }
      ]
    },
    {
      "conversation_id": "228",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mauro: I found the download for the 6.9 source code, will compile and report back\nPriscila: Mauro Did you solve the problem you had yesterday (or is it the same one)\nMauro: Priscila yes the problem I had yesterday have been solved, by adding appropriate entry to the versions list in [CODE]\nPriscila: Ok.\nKristeen: Mauro there are binaries for 6.9 here: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 6.7,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Mauro",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Mauro",
          "timestamp": "2019-02-28T14:14:02.022700",
          "text": "I found the download for the 6.9 source code, will compile and report back"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-28T14:14:56.023200",
          "text": "<@Mauro> Did you solve the problem you had yesterday (or is it the same one)"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-02-28T14:15:29.023800",
          "text": "<@Priscila> yes the problem I had yesterday have been solved, by adding appropriate entry to the versions list in `libcrypto.rkt`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-02-28T14:16:26.024900",
          "text": "Ok."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-28T14:20:44.025700",
          "text": "<@Mauro> there are binaries for 6.9 here: <https://download.racket-lang.org/racket-v6.9.html>"
        }
      ]
    },
    {
      "conversation_id": "229",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mauro: Kristeen I can verify that 6.9 works while 6.10 fails with the socket not connected error, looking at 6.10 announcements, I see that it was in 6.10 when the new rktio layer came into use so I suspect that's where the failure can be narrowed down\nKristeen: At this point probably Clarinda needs to suggest further debugging steps.\nClarinda: I don’t know. The longer-term solution may be an unsafe API for implementing lower-overhead ports.\nClarinda: Do you get the same error with just [CODE_BLOCK]\nClarinda: May need a [CODE].\nClarinda: Does it make any difference to add [CODE] to the FreeBSD section of “rktio_platform.h”?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 401.22,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Kristeen",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Mauro",
          "timestamp": "2019-02-28T16:03:38.027300",
          "text": "<@Kristeen> I can verify that 6.9 works while 6.10 fails with the socket not connected error, looking at 6.10 announcements, I see that it was in 6.10 when the new rktio layer came into use so I suspect that's where the failure can be narrowed down"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-02-28T16:04:15.027700",
          "text": "At this point probably <@Clarinda> needs to suggest further debugging steps."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T16:53:48.027800",
          "text": "I don’t know. The longer-term solution may be an unsafe API for implementing lower-overhead ports."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T16:59:39.028000",
          "text": "Do you get the same error with just\n```\n(define-values (i o) (tcp-connect \"<http://pkgs.racket-lang.org|pkgs.racket-lang.org>\" 443))\n(write-byte 0 o)\n```"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T16:59:57.028200",
          "text": "May need a `(flush-output o)`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-02-28T22:44:51.031100",
          "text": "Does it make any difference to add `#  define USE_FNDELAY_O_NONBLOCK` to the FreeBSD section of “rktio_platform.h”?"
        }
      ]
    },
    {
      "conversation_id": "230",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mauro: I ran the above under 7.2 and it returns [CODE_BLOCK]\nKeturah: I have written a racket program that solves a problem on <[URL] It is called \"meetup\", and the problem it is suppose to solve is to return a date object containing the specific date, given a [CODE] [CODE] [CODE] and an occurance (i.e. [CODE] [CODE] [CODE] [CODE] for the first Monday of April 2019 -&gt; return the day of the month) [CODE], [CODE], [CODE], [CODE] are all possible occurrences, which are also functions in racket. [CODE] is the only other possible occurrence (which would just be a day between 12 and 20). I have the function [CODE] that returns a list of days (integers) for a given year, month, and day of week, i.e. when I run [CODE] it returns [CODE] From here, I can simply evaluate [CODE], [CODE], [CODE], or [CODE] on the list. I wrote a custom [CODE] function to cover that use-case. The problem I am having is that [CODE] outside of DrRacket (and Emacs racket-mode) does not recognize any of these functions. My code can be found here: <[URL] The tests file here: <[URL] The error I am getting is [CODE_BLOCK] I tried commenting out the tests for [CODE], and found that I was getting the same error for [CODE], [CODE], etc. From what I gathered from the docs, [CODE] used inside a module needs a namespace to reference. It was not at all clear how to give it the intended reference (the file it was called from). Any help is greatly appreciated!\nKristeen: Keturah generally, you want to avoid using [CODE]\nKristeen: but to solve the particular problem of \"the namespace for this file\" see [CODE] and [CODE]\nKristeen: I would just change your program to use the value [CODE] instead of the symbol [CODE], and get rid of [CODE]\nJulia: <[URL]\nLavette: Keturah one additional minor comment in your [CODE] function: remember that [CODE] (and all other comparison functions in Racket) can take more than two arguments. So instead of [CODE] you can simply say [CODE]",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 7,
        "duration_minutes": 860.35,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Keturah",
          "Kristeen",
          "Lavette",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Mauro",
          "timestamp": "2019-02-28T19:04:50.030900",
          "text": "I ran the above under 7.2 and it returns\n\n```\ntcp-write: error writing\n    system error: Socket is not connected; errno=57\n```"
        },
        {
          "user": "Keturah",
          "timestamp": "2019-03-01T09:16:53.046000",
          "text": "I have written a racket program that solves a problem on <http://exercism.io|exercism.io>. It is called \"meetup\", and the problem it is suppose to solve is to return a date object containing the specific date, given a `year` `month` `day-of-week` and an occurance (i.e. `2019` `4` `Monday` `'first` for the first Monday of April 2019 -&gt; return the day of the month)\n\n`first`, `second`, `third`, `fourth` are all possible occurrences, which are also functions in racket. `teenth` is the only other possible occurrence (which would just be a day between 12 and 20).\n\nI have the function `all-dow-month` that returns a list of days (integers) for a given year, month, and day of week, i.e. when I run `(all-dow-month 2019 3 'Tuesday)` it returns `'(5 12 19 26)`\n\nFrom here, I can simply evaluate `first`, `second`, `third`, or `fourth` on the list. I wrote a custom `teenth` function to cover that use-case.\n\nThe problem I am having is that `eval` outside of DrRacket (and Emacs racket-mode) does not recognize any of these functions.\n\nMy code can be found here: <https://github.com/timotheosh/exercism-exercises/blob/master/racket/meetup/meetup.rkt>\n\nThe tests file here: <https://github.com/timotheosh/exercism-exercises/blob/master/racket/meetup/meetup-test.rkt>\n\nThe error I am getting is\n```\nraco test: (submod \"meetup-test.rkt\" test)\nteenth: unbound identifier;\n also, no #%top syntax transformer is bound\n  in: teenth\n  context...:\n   do-raise-syntax-error\n   expand-capturing-lifts\n   temp118_0\n   temp91_0\n   compile15\n   temp85_0\n   /home/thawes/exercism/racket/meetup/meetup.rkt:36:0: meetup-day\n   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/test-suite.rkt:86:13: the-tests\n   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/test-suite.rkt:61:0: apply-test-suite\n   /usr/share/racket/pkgs/rackunit-lib/rackunit/text-ui.rkt:91:0: run-tests5\n   (submod \"/home/thawes/exercism/racket/meetup/meetup-test.rkt\" test): [running body]\n   temp37_0\n   for-loop\n   run-module-instance!125\n   /usr/share/racket/pkgs/compiler-lib/compiler/commands/test.rkt:179:16\nmeetup-test.rkt: raco test: test raised an exception\n```\n\nI tried commenting out the tests for `teenth`, and found that I was getting the same error for `first`, `second`, etc.\n\nFrom what I gathered from the docs, `eval` used inside a module needs a namespace to reference. It was not at all clear how to give it the intended reference (the file it was called from).\n\nAny help is greatly appreciated!"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-01T09:19:51.046700",
          "text": "<@Keturah> generally, you want to avoid using `eval`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-01T09:20:29.047400",
          "text": "but to solve the particular problem of \"the namespace for this file\" see `define-namespace-anchor` and `namespace-anchor-&gt;namespace`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-01T09:21:14.047900",
          "text": "I would just change your program to use the value `first` instead of the symbol `'first`, and get rid of `eval`"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-01T09:22:02.048100",
          "text": "<https://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html>"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-03-01T09:25:11.049200",
          "text": "<@Keturah> one additional minor comment in your `teenth` function: remember that `&lt;` (and all other comparison functions in Racket) can take more than two arguments. So instead of `(and (&gt; x 12) (&lt; x 20))` you can simply say `(&lt; 12 x 20)`"
        }
      ]
    },
    {
      "conversation_id": "231",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mauro: I'm making the change though to clarify, is the single O a capitalized letter o or a zero?\nKristeen: That's the letter o not zero\nMauro: ok thank you\nKristeen: I think it stands for \"option\"\nKristeen: also I don't think numerals are allowed in preprocessor definition names\nMauro: that's good to know",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 2.33,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T10:06:41.049300",
          "text": "I'm making the change though to clarify, is the single O a capitalized letter o or a zero?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-01T10:07:32.049500",
          "text": "That's the letter o not zero"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T10:07:42.049700",
          "text": "ok thank you"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-01T10:07:46.049900",
          "text": "I think it stands for \"option\""
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-01T10:08:10.050100",
          "text": "also I don't think numerals are allowed in preprocessor definition names"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T10:09:01.050300",
          "text": "that's good to know"
        }
      ]
    },
    {
      "conversation_id": "232",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mauro: adding the [CODE] to the [CODE] file in the 7.2 codebase didn't resolve the error, am still getting the same socket not connected error when doing [CODE]\nMauro: here's a screenshot of the FreeBSD section in [CODE]\nClarinda: When you run the example with [CODE], what that in a file so that the [CODE] was tried immediately? If so, if you sleep for 1 second in between [CODE] and [CODE], do you still get the same answer?\nMauro: if I understood your question correctly, no I tried the example in the REPL and manually typed in the lines, and also I had to do [CODE] before the error appeared\nMauro: I'm trying the example again in a file and inserting a sleep line as requested\nClarinda: It seems unlikely that adding a sleep with affect the result, then.\nClarinda: What if you comment out the [CODE] on line 1187 of “rktio_network.c”?\nMauro: ok, trying that, btw, the file example with the [CODE] inserted produced the same error as you expected\nMauro: it looks like the file in 7.2 is now different from the one in the repo's HEAD, so I'm switching to the HEAD codebase now\nMauro: I had been using the 7.2 code from the installers on the website, sorry if that wasn't clear earlier\nKeturah: Doh! Now that should have been obvious. I've been making the same mistake in Common Lisp, and Clojure as well! Thanks for pointing that out.\nKeturah: Thanks for the comments! If this were production code, I would get rid of [CODE]. Since this is a learning exercise, I am just going to rewrite it with hygienicized inputs, and define the needed namespace-anchor.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 12,
        "duration_minutes": 27.98,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Keturah",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T10:55:37.053300",
          "text": "adding the `#  define USE_FNDELAY_O_NONBLOCK` to the `rktio_platform.h` file in the 7.2 codebase didn't resolve the error, am still getting the same socket not connected error when doing `raco pkg install`"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T10:56:10.053500",
          "text": "here's a screenshot of the FreeBSD section in `rktio_platform.h`"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-01T10:57:40.053900",
          "text": "When you run the example with `write-byte`, what that in a file so that the `write-byte` was tried immediately? If so, if you sleep for 1 second in between `tcp-connect` and `write-byte`, do you still get the same answer?"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T10:59:15.054300",
          "text": "if I understood your question correctly, no I tried the example in the REPL and manually typed in the lines, and also I had to do `(flush-output o)` before the error appeared"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T11:00:21.054700",
          "text": "I'm trying the example again in a file and inserting a sleep line as requested"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-01T11:00:53.054900",
          "text": "It seems unlikely that adding a sleep with affect the result, then."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-01T11:02:28.055100",
          "text": "What if you comment out the `fcntl(s, F_SETFL, RKTIO_NONBLOCKING);` on line 1187 of “rktio_network.c”?"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T11:03:30.055300",
          "text": "ok, trying that, btw, the file example with the `(sleep 1)` inserted produced the same error as you expected"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T11:07:56.055500",
          "text": "it looks like the file in 7.2 is now different from the one in the repo's HEAD, so I'm switching to the HEAD codebase now"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T11:08:14.055700",
          "text": "I had been using the 7.2 code from the installers on the website, sorry if that wasn't clear earlier"
        },
        {
          "user": "Keturah",
          "timestamp": "2019-03-01T11:20:20.056100",
          "text": "Doh! Now that should have been obvious. I've been making the same mistake in Common Lisp, and Clojure as well! Thanks for pointing that out."
        },
        {
          "user": "Keturah",
          "timestamp": "2019-03-01T11:23:36.058100",
          "text": "Thanks for the comments! If this were production code, I would get rid of `eval`. Since this is a learning exercise, I am just going to rewrite it with hygienicized inputs, and define the needed namespace-anchor."
        }
      ]
    },
    {
      "conversation_id": "233",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: The general tip is *always* to use two arguments with [CODE]. (well - besides only using [CODE] if absolutely necessary)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-01T11:24:36.059100",
          "text": "The general tip is *always* to use two arguments with `eval`.   (well - besides only using `eval` if absolutely necessary)"
        }
      ]
    },
    {
      "conversation_id": "234",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: I don’t think 7.2 vs. HEAD will matter\nLavette: I've found myself doing the same many times. At least in my brain, I think it's the decades of using other languages that force two operands per operator :slightly_smiling_face:\nMauro: I agree, looks like some of difference between 7.2 and HEAD probably don't matter much, it's just more of a matter of making sure your line numbers match what I see\nMauro: so far commenting out line 1187 doesn't resolve the error\nMauro: None\nMauro: here's a screenshot of the git diff showing changes made so far and result of [CODE] using the built HEAD\nMauro: also here's the defined macros for the OS [CODE_BLOCK] I checked the defines just in case it was something unexpected\nClarinda: I finally installed TrueOS, and now I’ve pushed a change intended to fix this problem\nCaprice: Is there any way of saying in typed racket \"This function returns a String if the first argument is #t and Symbol if it's #f\"\nCaprice: ... though I've started to think that kind of a function is usually a bad idea anyway. Better to have two functions. No reason not to make them especially when macros make it so easy to do so.\nKaren: Caprice definitely agree that kind of function sounds not so useful\nKaren: difficult to use\nKristeen: Caprice yes, you can use case-&gt; for that\nCaprice: Kristeen you're right, thanks... I did check for that before asking but at the time I must've been doing something wrong, I tried making a minimal example again just now and it works just fine",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 14,
        "duration_minutes": 1427.02,
        "contains_question": false,
        "action_keywords": [
          "agree",
          "fix",
          "must",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Clarinda",
          "Karen",
          "Kristeen",
          "Lavette",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-01T12:05:47.059300",
          "text": "I don’t think 7.2 vs. HEAD will matter"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-03-01T12:21:48.059500",
          "text": "I've found myself doing the same many times. At least in my brain, I think it's the decades of using other languages that force two operands per operator :slightly_smiling_face:"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T12:26:25.059800",
          "text": "I agree, looks like some of difference between 7.2 and HEAD probably don't matter much, it's just more of a matter of making sure your line numbers match what I see"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T12:26:39.060000",
          "text": "so far commenting out line 1187 doesn't resolve the error"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T12:26:51.060200",
          "text": "None"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T12:27:18.060600",
          "text": "here's a screenshot of the git diff showing changes made so far and result of `./raco pkg install gregor` using the built HEAD"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-01T12:27:47.060800",
          "text": "also here's the defined macros for the OS ```gcc -dM -E - &lt; /dev/null | grep FreeBSD\n\n#define __FreeBSD__ 13\n```\n\nI checked the defines just in case it was something unexpected"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-01T16:49:22.063500",
          "text": "I finally installed TrueOS, and now I’ve pushed a change intended to fix this problem"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-02T05:59:34.065600",
          "text": "Is there any way of saying in typed racket \"This function returns a String if the first argument is #t and Symbol if it's #f\""
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-02T06:45:19.066500",
          "text": "... though I've started to think that kind of a function is usually a bad idea anyway. Better to have two functions. No reason not to make them especially when macros make it so easy to do so."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-02T06:47:02.067500",
          "text": "<@Caprice> definitely agree that kind of function sounds not so useful"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-02T06:47:34.068100",
          "text": "difficult to use"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-02T09:33:15.068800",
          "text": "<@Caprice> yes, you can use case-&gt; for that"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-02T11:52:48.069700",
          "text": "<@Kristeen> you're right, thanks... I did check for that before asking but at the time I must've been doing something wrong, I tried making a minimal example again just now and it works just fine"
        }
      ]
    },
    {
      "conversation_id": "235",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Keturah: Just to update for posterity's sake, the code I linked to above is now working. I've added a contract to ensure nothing unexpected gets sent to eval (yes, it would be better to just manually handle each case in a [CODE] statement).",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Keturah"
        ]
      },
      "timeline": [
        {
          "user": "Keturah",
          "timestamp": "2019-03-01T13:00:39.063200",
          "text": "Just to update for posterity's sake, the code I linked to above is now working. I've added a contract to ensure nothing unexpected gets sent to eval (yes, it would be better to just manually handle each case in a `cond` statement)."
        }
      ]
    },
    {
      "conversation_id": "236",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: I don't get this. Sorting racket language repositories at Github after \"Recently Updated\" gets this:\nPriscila: <[URL]\nPriscila: The first on the list was updated sep 2018.\nPriscila: I suppose that's positive (too many recent updates), but horrible user experience.\nHallie: Priscila true, I personally use [CODE] like so <[URL]\nPriscila: Hallie Nice tip.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 117.45,
        "contains_question": true,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-02T15:19:53.070700",
          "text": "I don't get this. Sorting racket language repositories at Github after \"Recently Updated\" gets this:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-02T15:19:54.070900",
          "text": "<https://github.com/search?o=desc&amp;q=language%3ARacket&amp;s=updated&amp;type=Repositories>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-02T15:20:23.071300",
          "text": "The first on the list was updated sep 2018."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-02T15:54:19.072500",
          "text": "I suppose that's positive (too many recent updates), but horrible user experience."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-03-02T16:30:58.073300",
          "text": "<@Priscila> true, I personally use `pushed:&gt;2018-12-31` like so <https://github.com/search?q=language%3ARacket+pushed%3A%3E2018-12-31&amp;type=Repositories>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-02T17:17:20.073600",
          "text": "<@Hallie> Nice tip."
        }
      ]
    },
    {
      "conversation_id": "237",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Azucena: click the little circled \"?\" : there were too many results so some are not included",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Azucena"
        ]
      },
      "timeline": [
        {
          "user": "Azucena",
          "timestamp": "2019-03-02T15:49:23.071900",
          "text": "click the little circled \"?\" : there were too many results so some are not included"
        }
      ]
    },
    {
      "conversation_id": "238",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: If I'm making a package that depends on another package, I'm supposed to add the dependency in [CODE], right? In [CODE], I guess?\nCaprice: Is there a way to automatically figure out what should go in [CODE]?\nJulia: Caprice [CODE] has [CODE] or you could even use [CODE] <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 57.33,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-03-03T11:11:53.074500",
          "text": "If I'm making a package that depends on another package, I'm supposed to add the dependency in `info.rkt`, right? In `(define deps ...)`, I guess?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-03T11:12:35.074900",
          "text": "Is there a way to automatically figure out what should go in `deps`?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-03T12:09:13.075900",
          "text": "<@Caprice> `raco setup` has `--check-pkg-deps` or you could even use `--fix-pkg-deps` <https://docs.racket-lang.org/raco/running.html>"
        }
      ]
    },
    {
      "conversation_id": "239",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: What I tend to do for these things, either manually or via a [CODE]: <[URL]\nKaren: There's also [CODE] but I don't think it works correctly",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 153.67,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-03T12:12:24.076600",
          "text": "What I tend to do for these things, either manually or via a `Makefile`: <https://www.greghendershott.com/2017/04/racket-makefiles.html>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T14:46:04.077600",
          "text": "There's also `--unused-pkg-deps` but I don't think it works correctly"
        }
      ]
    },
    {
      "conversation_id": "240",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: Thread cells and parameters seem very similar. What is the motivation behind having them be separate constructs?\nKristeen: Leticia roughly, thread cells have the same value everywhere in a thread, while parameters can be dynamically bound with parameterize for just a small period\nLeticia: Kristeen ah ok, right. So presumably thread cells came first?\nKristeen: No, parameters are older by a lot\nKaren: Kristeen wait, what makes dynamically binding a parameter for a small period different from setting and unsetting a thread cell?\nKristeen: Tail call preservation, for one\nKaren: are there other differences? I’ve usually thought of the main difference between the two being how parameters interact with code that spawns new threads\nKaren: thread cell implementations seem to choose the same initial cell value regardless of how the thread was created, whereas parameters use the value the parameter had in the code that spawned the thread\nGonzalo: Not if the thread cell is preserved. Parameters correspond to _preserved_ thread cells.\nKaren: No, I mean thread cell implementations in other languages\nGonzalo: Ah, sure.\nGonzalo: The approach parameters take—namely, using continuation marks to store parameterizations—“just works” in the context of delimited continuations. You could do the same thing with [CODE], though, so it’s not really a fundamental difference.\nKaren: does recursively parameterizing the same parameter to different values have constant space usage? (I think there was a racket-users thread about this)\nGonzalo: If the inner use of [CODE] is in tail position with respect to the outer use, then yes.\nKaren: seems like it could if the recursion is a tail call- oh wait you beat me\nKaren: neat\nKaren: it’s kind of magic how well that works",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 17,
        "duration_minutes": 91.6,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen",
          "Kristeen",
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-03T20:23:53.079300",
          "text": "Thread cells and parameters seem very similar. What is the motivation behind having them be separate constructs?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-03T20:31:20.081000",
          "text": "<@Leticia> roughly, thread cells have the same value everywhere in a thread, while parameters can be dynamically bound with parameterize for just a small period"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-03T20:39:41.081500",
          "text": "<@Kristeen> ah ok, right. So presumably thread cells came first?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-03T20:58:44.081900",
          "text": "No, parameters are older by a lot"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:38:09.083600",
          "text": "<@Kristeen> wait, what makes dynamically binding a parameter for a small period different from setting and unsetting a thread cell?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-03T21:38:41.084100",
          "text": "Tail call preservation, for one"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:41:04.085000",
          "text": "are there other differences? I’ve usually thought of the main difference between the two being how parameters interact with code that spawns new threads"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:42:39.086400",
          "text": "thread cell implementations seem to choose the same initial cell value regardless of how the thread was created, whereas parameters use the value the parameter had in the code that spawned the thread"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-03T21:48:40.087000",
          "text": "Not if the thread cell is preserved. Parameters correspond to _preserved_ thread cells."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:48:57.087300",
          "text": "No, I mean thread cell implementations in other languages"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-03T21:49:06.087500",
          "text": "Ah, sure."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-03T21:50:28.088500",
          "text": "The approach parameters take—namely, using continuation marks to store parameterizations—“just works” in the context of delimited continuations. You could do the same thing with `dynamic-wind`, though, so it’s not really a fundamental difference."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:52:54.089500",
          "text": "does recursively parameterizing the same parameter to different values have constant space usage? (I think there was a racket-users thread about this)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-03T21:53:44.090100",
          "text": "If the inner use of `parameterize` is in tail position with respect to the outer use, then yes."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:53:53.090400",
          "text": "seems like it could if the recursion is a tail call- oh wait you beat me"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:54:04.090600",
          "text": "neat"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-03T21:55:29.091200",
          "text": "it’s kind of magic how well that works"
        }
      ]
    },
    {
      "conversation_id": "241",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Julia thanks!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-03-03T23:52:59.091400",
          "text": "<@Julia> thanks!"
        }
      ]
    },
    {
      "conversation_id": "242",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: Are there any women / poc that are historically notable in the development of lisp/scheme?\nDeneen: I am having trouble thinking of any.\nDeneen: (I can think of current ones, of course)\nPriscila: Deneen watch (skim) this one: <[URL]\nDeneen: ok, will do.\nPriscila: He tells about human \"computers\" which were women. The editor of the Lisp 1.5 manual (I think it was that one) was a woman. He implies that she deserves more credit.\nPriscila: (than given)\nPriscila: Can't remember where in the video.\nPriscila: Does anyone know a Racket package/library that allows something like this:\nPriscila: [CODE_BLOCK]\nPriscila: The variables defined with [CODE] can depend on each other in the same manner cells in a spread sheet can. I.e. no circular references.\nElin: Priscila This reminds me of something one of my friends at Northeastern University did at one point maybe 1 or 2 years ago. It didn’t need to use logic-programming, just mutable state combined with “recomputing” values every time you wanted to use something. It wasn’t very useful as it was though, because it didn’t have a notion of “when” it would need to recompute the values (because a dependency has changed) and when it could use a cached value (because no dependencies have changed between then and now).\nPriscila: The section on SICP on simulation of digital circuits might fall into this category?\nTambra: Priscila yes, digital circuits are a kind of dataflow language. You can get similar things with FRP, so [CODE]/[CODE] in [CODE] might give you what you want\nPriscila: ftime still works?\nTambra: last i used it!\nTambra: (which was two years ago or so admitedly)\nTambra: but I think its tests are still part of the release process since its in the main distro so it probably does\nPriscila: I vaguely recall having problems with the examples from the paper.\nPriscila: (A long, long time ago)\nHallie: last time I tried I was able to run the frtime examples but most with memory leaks\nTambra: ISTR there was some issue with rendering behaviors in drracket at some point…\nTambra: Yeah FRP is notorious for data leaks…\nPriscila: new-cell, set-cell! sounds useable - but I need to read up on signals.\nLavette: Priscila Your example reminds me also of one of the languages in Lillian's Beautiful Racket: <[URL] maybe some useful ideas there?\nSusana: Priscila maybe relevant: <[URL]\nPriscila: Susana thanks for the point\nPriscila: pointer\nPriscila: There is even an adapton for Racket: <[URL]\nPriscila: I think, adapton, might be it: <[URL]\nSusana: yeah, I was always meaning to try the racket version of adapton, but didn’t get around to it",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 31,
        "duration_minutes": 275.65,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Elin",
          "Hallie",
          "Lavette",
          "Priscila",
          "Susana",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-03-04T11:49:26.096500",
          "text": "Are there any women / poc that are historically notable in the development of lisp/scheme?"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-04T11:49:30.096700",
          "text": "I am having trouble thinking of any."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-04T11:49:43.097000",
          "text": "(I can think of current ones, of course)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T11:51:15.097700",
          "text": "<@Deneen> watch (skim) this one: <https://www.youtube.com/watch?v=hGY3uBHVVr4>"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-04T11:51:23.098000",
          "text": "ok, will do."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T11:52:33.099400",
          "text": "He tells about human \"computers\" which were women. The editor of the Lisp 1.5 manual (I think it was that one) was a woman. He implies that she deserves more credit."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T11:52:37.099600",
          "text": "(than given)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T11:53:09.099900",
          "text": "Can't remember where in the video."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T14:41:26.100500",
          "text": "Does anyone know a Racket package/library that allows something like this:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T14:41:33.100700",
          "text": "```\n#lang racket\n\n(:= a  0)\n(:= b  2)\n(:= c  0)\n(:= d (- (expt b 2) (* 4 a c)))\n\nd ; evaluates to 4\n\n(:= a 1)\n(:= c 1)\n\nd ; evaluates to 0\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T14:42:13.101600",
          "text": "The variables defined with `:=` can depend on each other in the same manner cells in a spread sheet can. I.e. no circular references."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-04T15:47:53.106600",
          "text": "<@Priscila> This reminds me of something one of my friends at Northeastern University did at one point maybe 1 or 2 years ago. It didn’t need to use logic-programming, just mutable state combined with “recomputing” values every time you wanted to use something. It wasn’t very useful as it was though, because it didn’t have a notion of “when” it would need to recompute the values (because a dependency has changed) and when it could use a cached value (because no dependencies have changed between then and now)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T15:58:48.108900",
          "text": "The section on SICP on simulation of digital circuits might fall into this category?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-04T16:03:48.110500",
          "text": "<@Priscila> yes, digital circuits are a kind of dataflow language. You can get similar things with FRP, so `new-cell`/`set-cell!` in `frtime` might give you what you want"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:04:27.110700",
          "text": "ftime still works?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-04T16:04:34.110900",
          "text": "last i used it!"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-04T16:04:47.111300",
          "text": "(which was two years ago or so admitedly)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-04T16:05:06.111800",
          "text": "but I think its tests are still part of the release process since its in the main distro so it probably does"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:05:30.112300",
          "text": "I vaguely recall having problems with the examples from the paper."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:05:39.112500",
          "text": "(A long, long time ago)"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-03-04T16:06:15.113200",
          "text": "last time I tried I was able to run the frtime examples but most with memory leaks"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-04T16:06:29.113500",
          "text": "ISTR there was some issue with rendering behaviors in drracket at some point…"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-04T16:09:03.114700",
          "text": "Yeah FRP is notorious for data leaks…"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:10:19.115500",
          "text": "new-cell, set-cell! sounds useable - but I need to read up on signals."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-03-04T16:16:58.116600",
          "text": "<@Priscila> Your example reminds me also of one of the languages in <@Lillian>'s Beautiful Racket: <https://beautifulracket.com/wires/intro.html>, maybe some useful ideas there?"
        },
        {
          "user": "Susana",
          "timestamp": "2019-03-04T16:19:12.117000",
          "text": "<@Priscila> maybe relevant: <http://adapton.org/>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:20:31.117700",
          "text": "<@Susana> thanks for the point"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:20:34.117900",
          "text": "pointer"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:21:04.118200",
          "text": "There is even an adapton for Racket: <https://github.com/plum-umd/adapton.racket>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T16:24:32.118700",
          "text": "I think, adapton, might be it: <https://docs.racket-lang.org/adapton/index.html?q=adapton>"
        },
        {
          "user": "Susana",
          "timestamp": "2019-03-04T16:25:05.119300",
          "text": "yeah, I was always meaning to try the racket version of adapton, but didn’t get around to it"
        }
      ]
    },
    {
      "conversation_id": "243",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Nova: would that be possible with racklog ?\nMauro: it sounds like what you're talking about is dataflow programming\nPriscila: Suprisingly long list of dataflow programming languages.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 21.35,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mauro",
          "Nova",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Nova",
          "timestamp": "2019-03-04T15:36:52.102200",
          "text": "would that be possible with racklog ?"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-04T15:51:34.107700",
          "text": "it sounds like what you're talking about is dataflow programming"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-04T15:58:13.108300",
          "text": "Suprisingly long list of dataflow programming languages."
        }
      ]
    },
    {
      "conversation_id": "244",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: What does [CODE] mean in the package server's package details page? It has a value of 2 for my package.\nMai: <[URL]\nCaprice: Mai got it, thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 5.37,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-03-04T21:34:17.120900",
          "text": "What does `Ring` mean in the package server's package details page? It has a value of 2 for my package."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-04T21:36:55.122700",
          "text": "<https://docs.racket-lang.org/pkg/Future_Plans.html>"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-04T21:39:39.123000",
          "text": "<@Mai> got it, thanks"
        }
      ]
    },
    {
      "conversation_id": "245",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Jeanine would it be a good idea to change [CODE] from the [CODE] package into a prefab struct? I think that gives the same \"singleton\" kinda behavior that you would look for. The struct constructor would need to have a different name for backward compatibility, I suppose.\nCaprice: I'm having an issue that's tangentially related: checking for [CODE] from [CODE] causes problems I don't really understand. What I do understand is that if I [CODE] a [CODE] form, eg [CODE] and then typecheck based on that, everything works fine. I tried the same trick with [CODE] and found that since [CODE] is an instantiated version of the struct, I don't get the same result.\nTerry: Half refer to a data-type Care to share your script?\nKaren: Will try to share tomorrow, heading to bed for now",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 142.27,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Karen",
          "Terry"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T01:51:21.124700",
          "text": "<@Jeanine> would it be a good idea to change `sql-null` from the `db` package into a prefab struct? I think that gives the same \"singleton\" kinda behavior that you would look for. The struct constructor would need to have a different name for backward compatibility, I suppose."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T01:53:59.127800",
          "text": "I'm having an issue that's tangentially related: checking for `SQL-Null` from `require typed/db` causes problems I don't really understand. What I do understand is that if I `require/typed` a `#:struct` form, eg `#:struct sql-timestamp` and then typecheck based on that, everything works fine. I tried the same trick with `sql-null` and found that since `sql-null` is an instantiated version of the struct, I don't get the same result."
        },
        {
          "user": "Terry",
          "timestamp": "2019-03-05T04:09:50.131000",
          "text": "Half refer to a data-type\nCare to share your script?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-05T04:13:37.131300",
          "text": "Will try to share tomorrow, heading to bed for now"
        }
      ]
    },
    {
      "conversation_id": "246",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Most common first words of identifiers exported by [CODE], where words are split on hyphens: [CODE_BLOCK]\nKaren: Here’s the most common words, first or otherwise: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 40.52,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-05T02:31:39.128700",
          "text": "Most common first words of identifiers exported by `racket/base`, where words are split on hyphens:\n```\nmake      98\nsyntax    64\ncurrent   54\nstring    44\nin        37\nread      35\nhash      35\nbytes     24\nregexp    24\nchar      24\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-05T03:12:10.129300",
          "text": "Here’s the most common words, first or otherwise:\n```\nmake      102\nsyntax    89\nhash      62\nstring    60\nmodule    58\ncurrent   56\nbytes     56\nin        46\npath      42\nread      38\n```"
        }
      ]
    },
    {
      "conversation_id": "247",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: I'm trying to pass a result of [CODE] from untyped racket to a function in my typed package. This functions takes a [CODE] and processes it. But I get this error: [CODE_BLOCK] Anyone knows how I should work around this?\nCaprice: My case is very similar to the one mentioned here: <[URL]\nKristeen: Caprice in general using [CODE] is problematic -- can you use a more specific type?\nElin: Caprice The [CODE] inside the vector produced by [CODE] represents the things that could be in the database. Are those simple values like numbers or strings? Are they existing _immutable_ racket data structures like lists? Are they existing _mutable_ racket data structures like vectors or boxes? Or are they your own datatype that you’re defining to put in the database?\nGonzalo: Kristeen can you make it so that people who aren’t admins can’t use @ everyone?\nKristeen: Caprice it's easier to discuss in real time here, though\nCaprice: oh ok\nCaprice: So yeah mostly the problem is [CODE]\nCaprice: What started all this was, I had a type, mostly a union of primitives that I expected to deal with from the database. [CODE]. Two things that I wanted The moment I added [CODE], all functions that dealt with these values started failing.\nElin: Though I think if it was an immutable vector instead of a mutable vector it would be fine\nElin: Because a mutable vector’s “contents” contract is used for both “typed -&gt; untyped” crossings and “untyped -&gt; typed” crossings\nCaprice: So what I did was this: [CODE_BLOCK] ... And this works just fine in my test. My tests are in [CODE], they use [CODE], and [CODE], and I do *not* use [CODE], I simply construct a list of vectors by hand, insert [CODE] values, and it all works.\nCaprice: But when I import this into an untyped module\nCaprice: and pass a result from [CODE]\nCaprice: It complains about [CODE]\nCaprice: This is a minimal, runnable example of the thing I'm trying to get around\nCaprice: I think you people are right and I should stop using [CODE], ditch the [CODE] thing, remove [CODE], use [CODE], and use [CODE] from [CODE], and try and fix the resulting type errors.\nKristeen: Caprice I think that's the right approach, but if it doesn't work out let me know\nKristeen: and we should change [CODE] to be something that plays better with typed racket\nKristeen: Gonzalo I changed that setting\nGonzalo: Thank you!\nCaprice: Kristeen Right, thanks, I just powered through all the type errors I was getting. The thing was, I had a lot of functions that relied on occurrence typing and they were all getting messed up. They were mostly working on a union of list, a custom struct, and an [CODE], where the [CODE] case always applied to [CODE]. And the list or custom struct could contain any of those 3 inside. But the moment I introduce [CODE] in the union type for [CODE] they would all get messed up because the actual struct for [CODE] is hidden. The way to work around this is to add a branch that checks for [CODE] before all the other branches, and simply copy whatever I was doing in the [CODE] branches. The code's all here, in a very work-in-progress kinda package I'm making: <[URL] (though at the time of writing this, it doesn't have the fixes/changes I'm making right now) So when I was doing this, I did understand that, and I figured that if I can use the [CODE] form of [CODE], it would work, and indeed, for [CODE], it all works, because if something is a list or a different struct it isn't a [CODE] and TR knows that. So it all works as expected. At the time I looked up the code for [CODE] and found this had been done to make it a singleton. Wouldn't a prefab struct achieve the same result, plus allow better interaction with TR?\nKristeen: A prefab struct wouldn't make it a singleton\nKristeen: [CODE_BLOCK]\nCaprice: Oh! totally did not expect that. My intuition failed me :disappointed:\nKristeen: the right thing from typed racket's perspective would be to make it a transparent struct\nCaprice: I see\nKristeen: but that would allow people to violate the singleton invariant, maybe\nKristeen: I think I have a way to fix it, but I have to test it out\nCaprice: cool, I'll check it out if I notice the change\nCaprice: Things mostly work now, but now my tests fail because [CODE] complains for the exact same reason! [CODE_BLOCK]\nGonzalo: I think you want to import [CODE] with [CODE] to create a new type [CODE], then import [CODE] with the type [CODE].\nKristeen: Caprice unfortunately that's a less-fixable problem with [CODE]\nKristeen: I think using [CODE] and [CODE] will work better\nGonzalo: Kristeen Why does [CODE] explode the [CODE] contract? I don’t totally understand, but I’m curious. I thought [CODE] just caused problems if you tried to use mutable state or call procedures or things like that.\nKristeen: Gonzalo it tries to wrap [CODE] with a chaperone that does the exploding, but it can't (because it's an opqaue struct) and so it errors\nGonzalo: Ah, I see, that makes sense. Hence the “opaque” in the error message.\nCaprice: Kristeen oh, yes, that works. I'd given up for the time being, but, coool :blush:\nKristeen: Caprice <[URL]\nCaprice: Kristeen thanks!\nElin: (By that I mean, [CODE] would only become an issue if you mutated it, but not if you only read from it)\nKristeen: Elin I don't really see how that would change things\nKristeen: [CODE] doesn't use [CODE] or [CODE]\nElin: I know, but the [CODE] type uses the [CODE] contract\nElin: and the argument to [CODE] needs to be [CODE] because of this\nKristeen: I'm confused\nElin: But if [CODE] took two contracts, one for “getting” and one for “setting”, then the “getting” one could be [CODE] and only the “setting” one would have to be [CODE]\nKristeen: is the issue about _using_ [CODE] in typed code?\nElin: Typed Racket’s contract-generation needs to be conservative to protect typed values\nKristeen: can you point to where in the code you're talking about?\nElin: This distinction between getting and setting would allow Typed Racket to be more liberal on the getting side\nKristeen: I still don't understand\nGonzalo: I think Alex is talking about the place where untyped code calls [CODE] with a vector in Caprice’s original example.\nGonzalo: It wouldn’t solve the [CODE] problem, but it would avoid the initial issue, if I understand what Alex is saying.\nElin: <[URL]\nKristeen: ah, I understand. You're saying that [CODE] could get translated to [CODE]\nElin: Yes\nElin: Yes, where the “getting” side is [CODE] and the “setting” side is [CODE]\nGonzalo: It’s sadly undocumented, I think… but it’s the contract TR uses for [CODE] (not [CODE]).\nGonzalo: It’s a chaperone contract, I think.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 60,
        "duration_minutes": 963.97,
        "contains_question": true,
        "action_keywords": [
          "action",
          "create",
          "discuss",
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Elin",
          "Gonzalo",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T06:35:01.133600",
          "text": "I'm trying to pass a result of `query-rows` from untyped racket to a function in my typed package. This functions takes a `(Listof (Vectorof Any))` and processes it. But I get this error:\n```\nany-wrap/c: Unable to protect opaque value passed as `Any`\n```\nAnyone knows how I should work around this?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T06:44:41.134300",
          "text": "My case is very similar to the one mentioned here: <https://www.mail-archive.com/racket-users@googlegroups.com/msg32201.html>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T08:49:45.134900",
          "text": "<@Caprice> in general using `Any` is problematic -- can you use a more specific type?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T11:57:36.139300",
          "text": "<@Caprice> The `Any` inside the vector produced by `query-rows` represents the things that could be in the database. Are those simple values like numbers or strings? Are they existing _immutable_ racket data structures like lists? Are they existing _mutable_ racket data structures like vectors or boxes? Or are they your own datatype that you’re defining to put in the database?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T12:54:56.142100",
          "text": "<@Kristeen> can you make it so that people who aren’t admins can’t use @ everyone?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T13:12:43.148700",
          "text": "<@Caprice> it's easier to discuss in real time here, though"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:12:57.149000",
          "text": "oh ok"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:13:06.149300",
          "text": "So yeah mostly the problem is `sql-null`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:13:31.150100",
          "text": "What started all this was, I had a type, mostly a union of primitives that I expected to deal with from the database. `(U String Number Boolean Char Bytes)`. Two things that I wanted The moment I added `SQL-Null`, all functions that dealt with these values started failing."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T13:13:39.150500",
          "text": "Though I think if it was an immutable vector instead of a mutable vector it would be fine"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T13:14:19.151700",
          "text": "Because a mutable vector’s “contents” contract is used for both “typed -&gt; untyped” crossings and “untyped -&gt; typed” crossings"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:16:02.153700",
          "text": "So what I did was this:\n```\n(define-type RawResults (Listof (Vectorof Any)))\n(define-type ResultRow (Vectorof AnyVal))\n(define-type Results (Listof ResultRow))\n(struct LocalSQLNull () #:prefab)\n\n(define-type AnyVal\n  (U String\n     Number\n     Boolean\n     Char\n     Bytes\n     sql-timestamp\n     LocalSQLNull))\n\n(: pre-process-results (-&gt; RawResults Results))\n(define (pre-process-results raw-res)\n  (map (λ([row-vec : (Vectorof Any)])\n         (vector-map (λ([val : Any])\n                       (cond [(sql-null? val)\n                              (LocalSQLNull)]\n                             [else\n                              (cast val AnyVal)]))\n                     row-vec))\n       raw-res))\n```\n\n... And this works just fine in my test.\nMy tests are in `#lang typed/racket/base`, they use `typed/rackunit`, and `typed/db`, and I do *not* use `query-rows`, I simply construct a list of vectors by hand, insert `sql-null` values, and it all works."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:16:22.154000",
          "text": "But when I import this into an untyped module"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:16:29.154300",
          "text": "and pass a result from `query-rows`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:16:36.154500",
          "text": "It complains about `sql-null`"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:28:03.155500",
          "text": "This is a minimal, runnable example of the thing I'm trying to get around"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:38:52.156800",
          "text": "I think you people are right and I should stop using `Any`, ditch the `LocalSQLNull` thing, remove `RawResults`, use `(Listof (Vectorof AnyVal))`, and use `SQL-Null` from `typed/db`, and try and fix the resulting type errors."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T13:39:37.157300",
          "text": "<@Caprice> I think that's the right approach, but if it doesn't work out let me know"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T13:39:54.157700",
          "text": "and we should change `sql-null` to be something that plays better with typed racket"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T13:49:55.158200",
          "text": "<@Gonzalo> I changed that setting"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T13:50:17.158400",
          "text": "Thank you!"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T14:09:52.166100",
          "text": "<@Kristeen> Right, thanks, I just powered through all the type errors I was getting. The thing was, I had a lot of functions that relied on occurrence typing and they were all getting messed up. They were mostly working on a union of list, a custom struct, and an `AnyVal`, where the `else` case always applied to `AnyVal`. And the list or custom struct could contain any of those 3 inside. But the moment I introduce `SQL-Null` in the union type for `AnyVal` they would all get messed up because the actual struct for `sql-null` is hidden.\n\nThe way to work around this is to add a branch that checks for `sql-null` before all the other branches, and simply copy whatever I was doing in the `else` branches.\n\nThe code's all here, in a very work-in-progress kinda package I'm making: <https://gitlab.com/hashimmm/remap/blob/master/private/grouping-v2.rkt> (though at the time of writing this, it doesn't have the fixes/changes I'm making right now)\n\nSo when I was doing this, I did understand that, and I figured that if I can use the `#:struct` form of `require/typed`, it would work, and indeed, for `sql-timestamp`, it all works, because if something is a list or a different struct it isn't a `sql-timestamp` and TR knows that. So it all works as expected.\n\nAt the time I looked up the code for `sql-null` and found this had been done to make it a singleton. Wouldn't a prefab struct achieve the same result, plus allow better interaction with TR?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:10:43.166500",
          "text": "A prefab struct wouldn't make it a singleton"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:11:19.167100",
          "text": "```\n&gt; (eq? #s(sql-null) #s(sql-null))\n#f\n```"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T14:11:40.167800",
          "text": "Oh! totally did not expect that. My intuition failed me :disappointed:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:11:43.167900",
          "text": "the right thing from typed racket's perspective would be to make it a transparent struct"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T14:12:02.168300",
          "text": "I see"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:12:07.168500",
          "text": "but that would allow people to violate the singleton invariant, maybe"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:12:19.168800",
          "text": "I think I have a way to fix it, but I have to test it out"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T14:12:44.169300",
          "text": "cool, I'll check it out if I notice the change"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T14:17:16.170100",
          "text": "Things mostly work now, but now my tests fail because `check-equal?` complains for the exact same reason!\n```\ncheck-equal?: contract violation\n  any-wrap/c: Unable to protect opaque value passed as `Any`\n  value: #&lt;sql-null&gt;\n  in: the 2nd argument of\n      (-&gt;* (Any Any) (any/c) any/c)\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T14:20:07.170800",
          "text": "I think you want to import `sql-null?` with `#:opaque` to create a new type `Sql-Null`, then import `sql-null` with the type `Sql-Null`."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:21:53.171700",
          "text": "<@Caprice> unfortunately that's a less-fixable problem with `check-equal?`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:23:02.172000",
          "text": "I think using `check` and `equal?` will work better"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T14:30:31.173100",
          "text": "<@Kristeen> Why does `check-equal?` explode the `any-wrap/c` contract? I don’t totally understand, but I’m curious. I thought `any-wrap/c` just caused problems if you tried to use mutable state or call procedures or things like that."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:31:26.173900",
          "text": "<@Gonzalo> it tries to wrap `sql-null` with a chaperone that does the exploding, but it can't (because it's an opqaue struct) and so it errors"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T14:31:53.174300",
          "text": "Ah, I see, that makes sense. Hence the “opaque” in the error message."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T14:33:08.175300",
          "text": "<@Kristeen> oh, yes, that works. I'd given up for the time being, but, coool :blush:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T14:58:27.175700",
          "text": "<@Caprice> <https://github.com/racket/racket/pull/2515>"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T15:10:38.178500",
          "text": "<@Kristeen> thanks!"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:12:10.179900",
          "text": "(By that I mean, `any-wrap/c` would only become an issue if you mutated it, but not if you only read from it)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T15:12:10.180000",
          "text": "<@Elin> I don't really see how that would change things"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T15:12:25.180400",
          "text": "`any-wrap/c` doesn't use `box/c` or `vectorof`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:12:50.180900",
          "text": "I know, but the `Vectorof` type uses the `vectorof` contract"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:13:01.181200",
          "text": "and the argument to `vectorof` needs to be `any-wrap/c` because of this"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T15:13:36.182100",
          "text": "I'm confused"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:13:44.182400",
          "text": "But if `vectorof` took two contracts, one for “getting” and one for “setting”, then the “getting” one could be `any/c` and only the “setting” one would have to be `any-wrap/c`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T15:13:53.182700",
          "text": "is the issue about _using_ `vectorof` in typed code?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:14:17.183300",
          "text": "Typed Racket’s contract-generation needs to be conservative to protect typed values"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T15:14:47.184000",
          "text": "can you point to where in the code you're talking about?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:15:10.184500",
          "text": "This distinction between getting and setting would allow Typed Racket to be more liberal on the getting side"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T15:15:46.185100",
          "text": "I still don't understand"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T15:15:50.185300",
          "text": "I think Alex is talking about the place where untyped code calls `pre-process-results` with a vector in <@Caprice>’s original example."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T15:16:21.185900",
          "text": "It wouldn’t solve the `check-equal?` problem, but it would avoid the initial issue, if I understand what Alex is saying."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:16:44.186100",
          "text": "<https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/static-contracts/combinators/structural.rkt#L162>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T15:17:29.187000",
          "text": "ah, I understand. You're saying that `(Vectorof Any)` could get translated to `(vectorof any/c any-wrap/c)`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:17:41.187300",
          "text": "Yes"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:18:06.187800",
          "text": "Yes, where the “getting” side is `#:covariant` and the “setting” side is `#:contravariant`"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T22:16:44.190400",
          "text": "It’s sadly undocumented, I think… but it’s the contract TR uses for `Any` (not `any/c`)."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T22:38:59.191900",
          "text": "It’s a chaperone contract, I think."
        }
      ]
    },
    {
      "conversation_id": "248",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Or is it [CODE] that’s giving you the problem?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-05T12:01:36.139800",
          "text": "Or is it `sql-null` that’s giving you the problem?"
        }
      ]
    },
    {
      "conversation_id": "249",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: This is pretty clever: \"Racket ABNF implementation (interpreter &amp; compiler), for directly cutting-and-pasting from RFCs.\"\nPriscila: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.1,
        "contains_question": false,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-05T12:26:47.140300",
          "text": "This is pretty clever: \"Racket ABNF implementation (interpreter &amp; compiler), for directly cutting-and-pasting from RFCs.\""
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-05T12:26:53.140500",
          "text": "<https://github.com/tonyg/racket-abnf>"
        }
      ]
    },
    {
      "conversation_id": "250",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Verlie: +1\nKristeen: I'll see what I can do but slack moderation tools are not very good\nGonzalo: I know, but I do know you can disable @ everyone\nCaprice: Kristeen Elin I suppose I'll post on the mailing list; slack doesn't seem like a very good place for writing any amount of detail.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 4,
        "duration_minutes": 16.53,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Caprice",
          "Gonzalo",
          "Kristeen",
          "Verlie"
        ]
      },
      "timeline": [
        {
          "user": "Verlie",
          "timestamp": "2019-03-05T12:55:27.142400",
          "text": "+1"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-05T12:57:39.143600",
          "text": "I'll see what I can do but slack moderation tools are not very good"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T12:57:59.143900",
          "text": "I know, but I do know you can disable @ everyone"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T13:11:59.148100",
          "text": "<@Kristeen> <@Elin> I suppose I'll post on the mailing list; slack doesn't seem like a very good place for writing any amount of detail."
        }
      ]
    },
    {
      "conversation_id": "251",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: (I haven’t read all the above context, so if that was already discussed, sorry.)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-05T14:20:50.171200",
          "text": "(I haven’t read all the above context, so if that was already discussed, sorry.)"
        }
      ]
    },
    {
      "conversation_id": "252",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Another thing we could do is improve vector contracts. Typed Racket relies on different contracts for [CODE] depending on whether its doing from “typed -&gt; untyped” or “unyped -&gt; typed”. The [[CODE]](<[URL] contract allows those to be different, so that different contracts can be applied depending on which direction its crossing the boundary in. If the [CODE] contract (and probably all the contracts for mutable data structures) allowed that in the same way, then [CODE] would not be an issue in places like this.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-05T15:11:05.179000",
          "text": "Another thing we could do is improve vector contracts. Typed Racket relies on different contracts for `Any` depending on whether its doing from “typed -&gt; untyped” or “unyped -&gt; typed”. The [`box/c`](<https://docs.racket-lang.org/reference/data-structure-contracts.html#(def._((lib._racket%2Fcontract%2Fprivate%2Fbox..rkt)._box%2Fc))>) contract allows those to be different, so that different contracts can be applied depending on which direction its crossing the boundary in. If the `vectorof` contract (and probably all the contracts for mutable data structures) allowed that in the same way, then `any-wrap/c` would not be an issue in places like this."
        }
      ]
    },
    {
      "conversation_id": "253",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: What's [CODE]? I sort of can't find it\nCaprice: Is it an impersonator contract?\nCaprice: Yes, it's undocumented; first I looked in the docs, then I searched the github repo (racket/racket) and then I posted here. Is it an impersonator contract?\nCaprice: hmm ok\nPok: I think this is the implementation if you’re interested, <[URL]\nCaprice: I'm basically trying to develop better intuition around what the error meant when it said \"unable to protect opaque value passed as any\". Would it be correct to say that the error occurred because of all these things: (a) the function accepts a type name that TR doesn't know about, (b) we gave TR a predicate, saying \"this is how you check the type\", (c) in an untyped module, a value is given to that function that MAY be of the accepted type, (d) because the value is opaque, and the contract isn't flat, TR cannot deduce whether the contract has modified the value, (e) as in, TR can't tell that maybe the value was of the accepted type but the contract messed with it, or maybe the value was not of the accepted type but the contract may have made it so\nCaprice: (f) as in, the predicate may return true or false on that value, but that may not be the same value as the one originally passed, so the result of the predicate would be invalid\nCaprice: In which case, there _seems_ to be a way out: because if the predicate is an \"eq?\" check, then the result of the predicate is always valid, no?\nCaprice: thanks! Silly me, I ought to have thought to search in the typed racket repo",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 9,
        "duration_minutes": 56.67,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [
          "accepted"
        ],
        "participants": [
          "Caprice",
          "Pok"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T21:58:25.189500",
          "text": "What's `any-wrap/c`? I sort of can't find it"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T21:58:51.189800",
          "text": "Is it an impersonator contract?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T22:37:08.191700",
          "text": "Yes, it's undocumented; first I looked in the docs, then I searched the github repo (racket/racket) and then I posted here. Is it an impersonator contract?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T22:41:44.192100",
          "text": "hmm ok"
        },
        {
          "user": "Pok",
          "timestamp": "2019-03-05T22:45:35.194500",
          "text": "I think this is the implementation if you’re interested, <https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/utils/any-wrap.rkt>"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T22:49:22.197500",
          "text": "I'm basically trying to develop better intuition around what the error meant when it said \"unable to protect opaque value passed as any\". Would it be correct to say that the error occurred because of all these things: (a) the function accepts a type name that TR doesn't know about, (b) we gave TR a predicate, saying \"this is how you check the type\", (c) in an untyped module, a value is given to that function that MAY be of the accepted type, (d) because the value is opaque, and the contract isn't flat, TR cannot deduce whether the contract has modified the value, (e) as in, TR can't tell that maybe the value was of the accepted type but the contract messed with it, or maybe the value was not of the accepted type but the contract may have made it so"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T22:50:54.198600",
          "text": "(f) as in, the predicate may return true or false on that value, but that may not be the same value as the one originally passed, so the result of the predicate would be invalid"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T22:52:47.199800",
          "text": "In which case, there _seems_ to be a way out: because if the predicate is an \"eq?\" check, then the result of the predicate is always valid, no?"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-05T22:55:05.200800",
          "text": "thanks! Silly me, I ought to have thought to search in the typed racket repo"
        }
      ]
    },
    {
      "conversation_id": "254",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terry: Hi, Would anyone be interested in an informal Racket meetup in London? Any preference for date/time? For a location I’m thinking about ‘The Microsoft Reactor London - 70 Wilson St, London EC2A 2DB’ as it appears to be free and relatively central. <[URL] Kind regards, Stephen [EMAIL]\nKami: Terry Yeah why not! I live in the north of France so I can easily get there (if the train tickets are not so expensive at the time). I don't know about the date. How many people are you planning to host?\nTerry: Depends on how many are interested.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 5.7,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Terry"
        ]
      },
      "timeline": [
        {
          "user": "Terry",
          "timestamp": "2019-03-06T08:55:11.201500",
          "text": "Hi, \n\nWould anyone be interested in an informal Racket meetup in London? \n\nAny preference for date/time?\n\nFor a location I’m thinking about  ‘The Microsoft Reactor London - 70 Wilson St, London EC2A 2DB’ as it appears to be free and relatively central.\n\n<https://developer.microsoft.com/en-us/reactor/Form/5> \n\nKind regards, \n\nStephen\n\n<mailto:spdegabrielle@gmail.com|spdegabrielle@gmail.com>\n\n"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-06T08:59:35.203400",
          "text": "<@Terry> Yeah why not! I live in the north of France so I can easily get there (if the train tickets are not so expensive at the time). I don't know about the date. How many people are you planning to host?"
        },
        {
          "user": "Terry",
          "timestamp": "2019-03-06T09:00:53.204400",
          "text": "Depends on how many are interested."
        }
      ]
    },
    {
      "conversation_id": "255",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Clarinda Kristeen I am trying to get CI done for cross compilation/testing. I have a script doing this automatically for arch X (where X is a variable). I am setting up jobs and wondering which archs to test. s390x seems to be one supported arch. Which archs are officially supported? [CODE], [CODE], [CODE] and I think [CODE]?\nClarinda: All architectures are supposed to be supported for traditional Racket, but that seems like a fine set if you add [CODE]. All of those have JIT support except [CODE].\nShavon: OK, so for [CODE] I need [CODE], for [CODE] I need [CODE]. I will give these a try. Thanks.\nShavon: And for completeness, CS is only supported in [CODE] for now?\nShavon: Just recalled that [CODE] is supported in traditional racket too, right?\nClarinda: Yes, [CODE]. You don’t have to use [CODE] or other flags; the [CODE] script is supposed to figure out which things are supported. CS should work for [CODE]. (It should also work for [CODE] and [CODE], eventually, but there are currently no pre-built Chez Scheme boot files.)\nShavon: OK. I will trigger the initial builds and then we'll see what to add. Thanks for the information.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 27.25,
        "contains_question": true,
        "action_keywords": [
          "build",
          "complete",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-03-06T11:45:37.207000",
          "text": "<@Clarinda> <@Kristeen> I am trying to get CI done for cross compilation/testing. I have a script doing this automatically for arch X (where X is a variable). I am setting up jobs and wondering which archs to test. s390x seems to be one supported arch. Which archs are officially supported? `x86_64`, `arm`, `s390x` and I think `ppc`?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-06T11:47:41.207300",
          "text": "All architectures are supposed to be supported for traditional Racket, but that seems like a fine set if you add `i386`. All of those have JIT support except `s390x`."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-06T11:49:15.207500",
          "text": "OK, so for `s390x` I need `--disable-jit`, for `ppc` I need `--disable-places --disable-futures`. I will give these a try. Thanks."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-06T11:50:10.207700",
          "text": "And for completeness, CS is only supported in `x86_64` for now?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-06T11:52:22.207900",
          "text": "Just recalled that `mips` is supported in traditional racket too, right?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-06T12:01:44.208100",
          "text": "Yes, `mips`. You don’t have to use `--disable-jit` or other flags; the `configure` script is supposed to figure out which things are supported. CS should work for `i386`. (It should also work for `arm` and `ppc`, eventually, but there are currently no pre-built Chez Scheme boot files.)"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-06T12:12:52.209100",
          "text": "OK. I will trigger the initial builds and then we'll see what to add. Thanks for the information."
        }
      ]
    },
    {
      "conversation_id": "256",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Here's a question about Typed Racket and calling functions generated by a macro. I've got a macro, currently in untyped Racket, that \"compiles\" a little DSL that lets you define nodes in a graph as illustrated by [CODE] below. The node class being defined is called [CODE] and it takes one argument, [CODE]. Attributes of the node, like [CODE], are defined in terms of expressions that can include that argument. The [CODE] clause adds further arguments, indicating what nodes of this class should link to and how.\nPenni: The current version of the macro generates functions to evaluate those expressions. The number of arguments varies according to the node class, of course. The line marked \"THIS LINE HERE\" calls those functions. The function shown below is called by a function called [CODE] to make a new node of a given class. You pass [CODE] the arguments for the node class—which vary by node class—like this: [CODE]. To make, say, a node class without arguments, you would write [CODE]. My question: How can I call these generated functions so that Typed Racket won't complain? I expect complaints because of the varying function signatures in the generated code. Better yet, is there a (not too hard) way to make Typed Racket complain if I try to instantiate a node class with inappropriate arguments?\nGonzalo: Penni I think the answer to your question depends on what [CODE] can be in [CODE] if it’s not a procedure. Can it be anything?\nPenni: Currently it can be anything. But since I'm now overhauling the whole system as I move it to Typed Racket, I could change that or anything else.\nGonzalo: I’ll give two answers: one that just focuses on the specific sort of thing you do in [CODE] and one that takes the rest of the context you gave into account.\nGonzalo: The problem with functions like [CODE] in Typed Racket is that [CODE] succeeding tells the typechecker very little about [CODE]. It knows it’s a function, but it has no idea how that function can be called. It could demand no arguments, it could demand exactly 12 arguments, it could demand keyword arguments. TR just can’t know. So even if [CODE] produces [CODE], absent of other information, the typechecker won’t let you call [CODE] at all, under any circumstances. _But_ this is only true if the typechecker doesn’t know anything about [CODE] already. If [CODE]’s type is not [CODE], but is instead something like [CODE], then if [CODE] returns [CODE], TR can be certain that [CODE] _isn’t_ an [CODE], so it knows it must have type [CODE]. In that case, you can invoke the function if you take that branch. So: [CODE] is useless on something that you don’t know very much about statically. But it could be useful if you can give it a more constrained type.\nGonzalo: Now, the bigger-picture answer. It seems like it might be easier to make all this machinery work if you restructure things in a more significant way besides just changing something local to [CODE]. I am not totally sure I understand what evaluating a [CODE] form does—does it insert an entry in a global hash table? does it evaluate to some value? does it define some variable?—but your description of [CODE] would seem to imply that whatever [CODE] does, the information is eventually looked up symbolically, perhaps being stored in a hash table somewhere. That seems hard to statically type. Typed Racket doesn’t support heterogenous hash tables (i.e. hash tables used as records instead of as dictionaries), so you can’t have a hash table where the values associated with specific keys have different types. This means your hash table would have to have some very vague type like [CODE], and it wouldn’t be able to encapsulate how certain keys in the hash table are associated with tagclasses that take different types of arguments. A better approach, more conducive to static typing, would probably be to skip the hash table and the symbolic lookup, and instead make the [CODE] form produce a value or definition with a rich type. So, for example, you could make [CODE] actually expand to [CODE], and you could pass the [CODE] function directly to [CODE], instead of passing the symbol [CODE]. If you need more information than just a function, you could make [CODE] a struct that combines a function with some extra information.\nPenni: Your guess is right: the node classes are stored as structs and looked up in a hash table somewhere.\nGonzalo: I think you’ll have a much easier time if you avoid the indirection through the hash table and instead define variables (which can each have distinct types) and refer to those directly. Is there a reason you need the indirection?\nPenni: No particular reason; it's just what I hacked out as a semi-beginning Racket coder. Well, one reason: I've got code like this, which decides at run-time which class of node to make. Sometimes I want to say, \"Of these tag classes, which could validly be instantiated and linked to these nodes?\"\nGonzalo: I’m trying to understand, but I’m missing some context: does that code select a _class_ dynamically from the hash table, or does it just look iterate through the predefined list [CODE]? If it’s the latter, I think you could just define [CODE] to be [CODE]. If it’s the former, it’s much more interesting.\nPenni: I definitely like the idea of generating typed functions inside the macro. It's a little scary, since as you rightly just guessed, some of the main code does indirection on node classes, so that would need to be rewritten from scratch. But I don't think there's too much of that code. And really, I'd like to move that code inside the DSL; I just haven't figured out a way yet.\nGonzalo: If you legitimately use the indirection for some purpose, I think there are ways of encoding that in a way that TR would be happy about. But if you don’t need the indirection, then it’s probably much easier to just get rid of it.\nPenni: Here's the function that looks through [CODE]. It's the second way—the non-interesting way, which is likely a good thing.\nPenni: OK, this might be the idea that I needed to hear: just get rid of the indirection. I've been taking the need for indirection so much for granted, I've never really examined whether I can just do without it.\nPenni: I've been trying to write some code for \"auto-tagging\"—generically saying \"If any tags could apply to these nodes, build them and link them.\" That sounds like it needs indirection, but now I wonder if the macro could just generate code to do that.\nGonzalo: Well, here’s another way to think about the things: when you are choosing a _specific_ tag—whether via the indirection or not—you know in your head exactly what arguments it needs to be supplied with. For example, when you write [CODE], you know that [CODE] is a class that takes one argument, so you give it one. If you were instead iterating through the hash table of tags without a specific tag already in mind, now you have a problem, even in untyped Racket: you don’t know how to actually build the node class because you don’t know anything about which arguments should be supplied. For any particular [CODE], [CODE] pair, the [CODE] might need two arguments, four, or none at all. And since your code is just looping through all of them, it can’t even know how many arguments to provide, much less which arguments they should be. TR is not quite as “smart” as you are, since you _know_ that [CODE] will give you something that needs one argument (a symbol), but TR doesn’t. On the other hand, TR’s “stupidity” is actually somewhat insightful here, from another point of view: it rightfully points out that, when you view the hash table as a dictionary mapping arbitrary keys to arbitrary values, the values are pretty useless. You have no way of using them without some kind of extra, prior knowledge. The “auto-tagging” function you describe would presumably have to dig through the hash table of tags to find “applicable” tags, but if some of those tags take arguments, your “auto-tagger” would be screwed, even in untyped Racket. On the other hand, your [CODE] list provides precisely the right information: it couples tags with their arguments, making it possible for some tool to understand how to get the actual node class from the tag. This suggests a slightly different way of viewing things: tags that take arguments aren’t really tags at all, they’re _tag constructors_, aka functions that produce tags. So if you built a hash table full of tags, without the tag constructors (or, perhaps more usefully, with the tag constructors already applied to produce tags), you could do interesting things with it. But as you are right now, your hash table contains a jumble of tags and tag constructors, and that just isn’t very helpful.\nPenni: I agree: the \"stupidity\" would be useful. I've had a couple long, painful debugging sessions due to passing wrong arguments to tag constructors. Node classes inherit from other node classes, as in OO, and currently there's nothing to ensure that \"super-class\" constructors get called with the correct arguments. BTW, what sort of thing did you have in mind as an \"interesting thing\" that I could do if I structured the hash table differently?\nPenni: One other thing: the main idea here is to make it easy to try out different ideas for tagging, responding to tags, etc. There's no one exact thing, like [CODE], that I'm trying to implement. I'm hoping to be able to just say, in the DSL, \"Here are some node classes—let's see what happens!\", rather than hard-coding too much in plain Racket. IOW, this program overall is tool for experimenting with graphs whose contents tell how to modify themselves—a wild, mostly unexplored domain, which I'm writing this program to explore.\nGonzalo: Well, the “auto-tagging” application is interesting, and that’s one that could be solved in a simple enough way by what I just described: build a list or hash table of tags that have already been fully-applied to arguments, which is what your [CODE] list is already morally doing. If you were doing something even _more_ interesting, though, where you had a scheme by which arguments to tags could somehow be inferred, at runtime, and your code was selecting tag constructors and somehow automatically figuring out how to plug their arguments, you’d need to do something fancier. But it’s always _possible_ to get fancier in some direction or another, so that isn’t saying much. :)\nGonzalo: I do understand not wanting to hardcode too much. I think skipping the indirection doesn’t cost you anything there, though, since my above point was basically that it wasn’t actually getting you _any_ expressive power over just having direct variable references.\nPenni: Ah, now I see: so the \"tags\" that you have in mind wouldn't be actual nodes in the graph, but complete sets of attributes that could be put into new nodes? The need for \"tags\" that aren't really nodes turned into a headache in the first version of the program. I often want to ask the question \"Could a tag of this class apply to these nodes?\" The current system, where attributes are stored in the [CODE] struct as functions if you need to call them to get the real attribute value, led to … you guessed it, some painful debugging sessions.\nGonzalo: I see… I’m admittedly a little confused about the nomenclature, so I might be mixing concepts up. (Is a “tag” different from a “tag class”, and is that different from a “node class”? Is a “node” different from a “tag”? I don’t actually really know.)\nPenni: Yes: a \"tag\" is just a kind of \"node\" (one that's meant to describe other nodes); a \"tag class\" is just a kind of \"node class\", and the \"classes\" are unchanging, abstract definitions whereas actual \"tags\" and \"nodes\" are elements of the graph, which can be removed or have their attributes modified as the program runs.\nPenni: Excellent point that indirection actually hasn't been helping. Now that I think about it, the main value of the indirection has been convenience in writing code to add nodes to graphs. Here's a crude example:\nGonzalo: What is a “node class”, and how is a “tag class” different from a generic “node class”?\nPenni: A \"node class\" is just a definition of a category of node: what attributes it contains, what \"ports\" it has, and how it's supposed to link to other nodes. The difference between a \"node class\" and a \"tag class\" is mostly their purpose: the latter describe the former. For example, you might have two nodes of class [CODE], like [CODE] and [CODE], and they might be \"tagged\" by a node of class [CODE], indicating that the program \"noticed\" that relationship, and possibly triggering actions based on that relationship. There is one \"real\" difference between a tag and a node, but it's not a big deal: a tag gets automatically removed when the nodes that it tags are removed. For example, if [CODE]greater-than[CODE]greater-than[CODE](number 4) would stay in the graph.\nGonzalo: Okay… so do you have a [CODE] form that is basically the same as a [CODE] form except that the latter generates “tag nodes” instead of ordinary nodes?\nPenni: Hmm, there is one other place that uses indirection, and it's actually important, even though its only function is convenience. There's a little DSL that lets you tell how to make a graph without writing lots of explicit calls to [CODE]. The code is an interpreter for lists that look like this:\nPenni: Re [CODE]/[CODE]: yep. [CODE] is the macro that does all the work. (I think this is a bit ugly. As I'm moving to Typed Racket, I'm currently rewriting this so there is only one main macro, [CODE], which does everything.)\nGonzalo: It seems like you could make that DSL work without the indirection by just doing something like [CODE_BLOCK] though I’m not sure, since I don’t totally understand all the features of the DSL. If the quoting/unquoting became too unwieldy, it might be easier to just do it with a macro, or set of macros.\nGonzalo: And yeah, that makes sense.\nGonzalo: I think what I said above is still true, though maybe now I can state it more precisely and not confuse terms. When you define a node class or tag class with arguments, you aren’t defining a node or a tag. You’re defining a node or tag _constructor_, a function that evaluates to a node. In fact, you might even be able to get away with skipping argument support in nodes/tags entirely and just writing: [CODE_BLOCK] I.e. literally just writing functions that produce tags/nodes when invoked.\nPenni: About [CODE], that brings up a source of messiness in the program. Maybe you know of a way to avoid this. When you make a new node, you get two values back: the new node's id, and the updated graph. So, [CODE] would have to return two values, messing up the use of unquoting. Much of the code right now is long [CODE] statements like the one a few code snippets above.\nPenni: Yeah, I think viewing the class definitions as constructor definitions makes a lot of sense.\nGonzalo: I see, yes. It does seem like maybe it would be better to do this with a macro rather than a runtime interpreter. It’s what macros are for, after all. :) Beside the obvious advantages of being able to do the work at compile-time and being able to reuse all of Racket’s macro-writing machinery, you get the very potent advantage of not having to reimplement scope yourself, since the macro system will handle that for you.\nGonzalo: It seems like you could probably define [CODE], [CODE], and [CODE] as macros. Or maybe [CODE] wouldn’t be its own macro but would be part of the syntax of [CODE], I don’t know.\nPenni: Good point about not reimplementing scope! That was a bit of a nuisance, though I was able to exploit it to do stuff like make [CODE] cause all the new nodes created inside it link automatically as \"members\" of the outer node.\nGonzalo: Yes, I don’t know the details about all the things your DSL does, but I’d bet it’d be possible to replicate all the functionality and convenience via a macro or set of cooperating macros, and that’d _definitely_ play nicer with Typed Racket. But it might involve some more advanced macro machinery to do everything the same way.\nPenni: Regarding [CODE], the current version is pretty ugly. In an old version of that DSL, written in Clojure, I had it look up the \"port classes\" (oh no, another kind of class!—nah, it's really not so bad) in the node-class definitions, and infer which ports were appropriate to link by. So, you could just say [CODE] and it would infer that the edge must go from port [CODE] to port [CODE].\nPenni: So, that's yet another place where code needs to \"reflect\" on the class definitions—a sort of indirection.\nPenni: The more I've worked on this, and the more I've learned about [CODE], the more I've come to think that it would be a big improvement to add more to the DSL. That could simplify the plain-Racket code quite a bit. It may be a little beyond my current [CODE]-fu, but I'm learning…\nGonzalo: Is that a reflection on the class definitions, or a reflection on the nodes themselves? It sounded to me from what you said that the “classes” are just the syntax, they don’t exist at runtime (and at runtime there are only nodes).\nPenni: It's a reflection on the class definitions. At run-time, in the current implementation, the classes still exist as structs that can be queried for various things, like \"What port-labels do you link by?\", \"Does this class inherit from you?\", etc.\nPenni: Right now I'm thinking that it would be better to just make the big macro generate functions to answer those questions.\nGonzalo: I see. Yes, I think that’s right. So a class definition does exist as a separate thing from an “instantiation” of the class?\nPenni: Yes.\nGonzalo: Yes, it seems like then it would make sense to define variables bound to the class definitions, then make the macro expand to functions that inspect the class definitions at runtime to do the appropriate things. The macro can probably handle things like binding in [CODE] at compile-time, though (although it’s certainly possible that [CODE] could have extra runtime effects, too).\nPenni: In fact, the nodes themselves (the \"instantiations\") are not represented in one place, like as a struct. There is a big struct for the graph as a whole, which contains hash tables for node ids, [CODE] -&gt; incident ports, and looking up a node's attributes by the node's id and the attribute name.\nTambra: Priscila i made a little dataflow language similar to what you were asking about: <[URL] (I literally wrote it this morning, no garuntees that its actually good :P)\nPriscila: The example looks just right.\nTambra: I can’t imagine where I got that example from…. :stuck_out_tongue:\nPriscila: And you even check that there are no cycles between cells.\nPriscila: What's the idea behind the continuation marks?\nTambra: the idea is to do the cycle detection dynamically: if we every try to evaluate a cell *while* evaluating that same cell, we ran accross a cycle\nTambra: to tell if we are currently evaluating some cell the can look at the continuation marks an see if the stack is marked by that cells identity\nPriscila: Oooh! That's clever.\nTambra: I thing promices do basically the same thing\nPriscila: I think I got confused by the name [CODE].\nPriscila: I was thinking of the identity function.\nTambra: oooh… yeah no I just wanted a seperate notion of [CODE] in case the cells get chaperoned some day\nTambra: because like contracts are good, right?\nPriscila: But rereading, I see identity is bound two lines above its use...\nTambra: right its just a fieldless struct stored in the cell\nTambra: thats used to track [CODE]ness since the cell identity is generated with each cell\nTambra: (also i was wrong looks like promices use semaphores and thread-eqness to track re-entrance, so that its thread safe. which i didn’t even think of… meh sounds like a later problem)\nPriscila: I like your implementation. It's a nice example of something that's hard to do without macros.\nTambra: So I had a first pass that didn’t need macros actually\nTambra: Basically cells were built out of constants and functions could be [CODE]ed to work on cells, but that felt kinda ugly to me (and also [CODE]ing involved [CODE] which always feels gross to me)\nTambra: It also meant that cells values had to be extracted by function, which meant that it was possible to accidentally lose track of a dependency which isn’t great\nTambra: (so… thank you for giving me an excuse to avoid my real work/Agda for a morning and work in racket for a while :P)\nPriscila: :wink:\nKaren: Tambra oh hey your [CODE] struct is the same as my [CODE] struct: <[URL]\nTambra: There is something similar too in [CODE] using [CODE], although thats using uninterned symbols since I also want the actual name there: <[URL]\nPriscila: Most likely they are defined - but maybe in a different scope than you are expecting?",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 75,
        "duration_minutes": 235.42,
        "contains_question": true,
        "action_keywords": [
          "action",
          "agree",
          "build",
          "complete",
          "create",
          "decide",
          "implement",
          "let's",
          "must",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen",
          "Penni",
          "Priscila",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:10:39.208300",
          "text": "Here's a question about Typed Racket and calling functions generated by a macro.\n\nI've got a macro, currently in untyped Racket, that \"compiles\" a little DSL that lets you define nodes in a graph as illustrated by `tagclass` below.\n\nThe node class being defined is called `needs` and it takes one argument, `need-type`.  Attributes of the node, like `name`, are defined in terms of expressions that can include that argument. The `applies-to` clause adds further arguments, indicating what nodes of this class should link to and how."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:12:08.208700",
          "text": "The current version of the macro generates functions to evaluate those expressions. The number of arguments varies according to the node class, of course. The line marked \"THIS LINE HERE\" calls those functions. The function shown below is called by a function called `make-node` to make a new node of a given class. You pass `make-node` the arguments for the node class—which vary by node class—like this: `(make-node g 'needs 'source)`. To make, say, a node class without arguments, you would write `(make-node g 'plus)`.\n\nMy question: How can I call these generated functions so that Typed Racket won't complain?\n\nI expect complaints because of the varying function signatures in the generated code. Better yet, is there a (not too hard) way to make Typed Racket complain if I try to instantiate a node class with inappropriate arguments?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:15:01.210000",
          "text": "<@Penni> I think the answer to your question depends on what `f` can be in `apply-f` if it’s not a procedure. Can it be anything?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:15:52.210800",
          "text": "Currently it can be anything. But since I'm now overhauling the whole system as I move it to Typed Racket, I could change that or anything else."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:16:44.211600",
          "text": "I’ll give two answers: one that just focuses on the specific sort of thing you do in `apply-f` and one that takes the rest of the context you gave into account."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:20:51.216200",
          "text": "The problem with functions like `apply-f` in Typed Racket is that `(procedure? f)` succeeding tells the typechecker very little about `f`. It knows it’s a function, but it has no idea how that function can be called. It could demand no arguments, it could demand exactly 12 arguments, it could demand keyword arguments. TR just can’t know. So even if `(procedure? f)` produces `#t`, absent of other information, the typechecker won’t let you call `f` at all, under any circumstances.\n\n_But_ this is only true if the typechecker doesn’t know anything about `f` already. If `f`’s type is not `Any`, but is instead something like `(U (-&gt; String Integer) Integer)`, then if `(procedure? f)` returns `#t`, TR can be certain that `f` _isn’t_ an `Integer`, so it knows it must have type `(-&gt; String Integer)`. In that case, you can invoke the function if you take that branch.\n\nSo: `procedure?` is useless on something that you don’t know very much about statically. But it could be useful if you can give it a more constrained type."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:31:19.225400",
          "text": "Now, the bigger-picture answer. It seems like it might be easier to make all this machinery work if you restructure things in a more significant way besides just changing something local to `apply-class-attr`. I am not totally sure I understand what evaluating a `tagclass` form does—does it insert an entry in a global hash table? does it evaluate to some value? does it define some variable?—but your description of `make-node` would seem to imply that whatever `tagclass` does, the information is eventually looked up symbolically, perhaps being stored in a hash table somewhere.\n\nThat seems hard to statically type. Typed Racket doesn’t support heterogenous hash tables (i.e. hash tables used as records instead of as dictionaries), so you can’t have a hash table where the values associated with specific keys have different types. This means your hash table would have to have some very vague type like `(HashTable Symbol Tagclass-Info)`, and it wouldn’t be able to encapsulate how certain keys in the hash table are associated with tagclasses that take different types of arguments.\n\nA better approach, more conducive to static typing, would probably be to skip the hash table and the symbolic lookup, and instead make the `tagclass` form produce a value or definition with a rich type. So, for example, you could make `(tagclass (needs [need-type : Foo]) ....)` actually expand to `(define (needs [need-type : Foo]) : Tagclass ....)`, and you could pass the `needs` function directly to `make-node`, instead of passing the symbol `'needs`. If you need more information than just a function, you could make `needs` a struct that combines a function with some extra information."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:32:15.226100",
          "text": "Your guess is right: the node classes are stored as structs and looked up in a hash table somewhere."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:32:57.226900",
          "text": "I think you’ll have a much easier time if you avoid the indirection through the hash table and instead define variables (which can each have distinct types) and refer to those directly. Is there a reason you need the indirection?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:37:43.228500",
          "text": "No particular reason; it's just what I hacked out as a semi-beginning Racket coder. Well, one reason: I've got code like this, which decides at run-time which class of node to make. Sometimes I want to say, \"Of these tag classes, which could validly be instantiated and linked to these nodes?\""
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:41:08.231900",
          "text": "I’m trying to understand, but I’m missing some context: does that code select a _class_ dynamically from the hash table, or does it just look iterate through the predefined list `problem-tags`? If it’s the latter, I think you could just define `problem-tags` to be `(list (needs 'source) (needs 'result))`. If it’s the former, it’s much more interesting."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:41:18.232100",
          "text": "I definitely like the idea of generating typed functions inside the macro. It's a little scary, since as you rightly just guessed, some of the main code does indirection on node classes, so that would need to be rewritten from scratch. But I don't think there's too much of that code. And really, I'd like to move that code inside the DSL; I just haven't figured out a way yet."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:42:31.233100",
          "text": "If you legitimately use the indirection for some purpose, I think there are ways of encoding that in a way that TR would be happy about. But if you don’t need the indirection, then it’s probably much easier to just get rid of it."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:44:26.233700",
          "text": "Here's the function that looks through `problem-tags`. It's the second way—the non-interesting way, which is likely a good thing."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:45:48.235100",
          "text": "OK, this might be the idea that I needed to hear: just get rid of the indirection. I've been taking the need for indirection so much for granted, I've never really examined whether I can just do without it."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T12:48:10.237400",
          "text": "I've been trying to write some code for \"auto-tagging\"—generically saying \"If any tags could apply to these nodes, build them and link them.\" That sounds like it needs indirection, but now I wonder if the macro could just generate code to do that."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T12:56:27.246300",
          "text": "Well, here’s another way to think about the things: when you are choosing a _specific_ tag—whether via the indirection or not—you know in your head exactly what arguments it needs to be supplied with. For example, when you write `(make-node g 'needs 'source)`, you know that `'needs` is a class that takes one argument, so you give it one.\n\nIf you were instead iterating through the hash table of tags without a specific tag already in mind, now you have a problem, even in untyped Racket: you don’t know how to actually build the node class because you don’t know anything about which arguments should be supplied. For any particular `key`, `value` pair, the `value` might need two arguments, four, or none at all. And since your code is just looping through all of them, it can’t even know how many arguments to provide, much less which arguments they should be.\n\nTR is not quite as “smart” as you are, since you _know_ that `(hash-ref all-the-tags 'needs)` will give you something that needs one argument (a symbol), but TR doesn’t. On the other hand, TR’s “stupidity” is actually somewhat insightful here, from another point of view: it rightfully points out that, when you view the hash table as a dictionary mapping arbitrary keys to arbitrary values, the values are pretty useless. You have no way of using them without some kind of extra, prior knowledge.\n\nThe “auto-tagging” function you describe would presumably have to dig through the hash table of tags to find “applicable” tags, but if some of those tags take arguments, your “auto-tagger” would be screwed, even in untyped Racket. On the other hand, your `problem-tags` list provides precisely the right information: it couples tags with their arguments, making it possible for some tool to understand how to get the actual node class from the tag.\n\nThis suggests a slightly different way of viewing things: tags that take arguments aren’t really tags at all, they’re _tag constructors_, aka functions that produce tags. So if you built a hash table full of tags, without the tag constructors (or, perhaps more usefully, with the tag constructors already applied to produce tags), you could do interesting things with it. But as you are right now, your hash table contains a jumble of tags and tag constructors, and that just isn’t very helpful."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:07:05.249000",
          "text": "I agree: the \"stupidity\" would be useful. I've had a couple long, painful debugging sessions due to passing wrong arguments to tag constructors. Node classes inherit from other node classes, as in OO, and currently there's nothing to ensure that \"super-class\" constructors get called with the correct arguments.\n\nBTW, what sort of thing did you have in mind as an \"interesting thing\" that I could do if I structured the hash table differently?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:10:13.253400",
          "text": "One other thing: the main idea here is to make it easy to try out different ideas for tagging, responding to tags, etc. There's no one exact thing, like `find-node-with-problems`, that I'm trying to implement. I'm hoping to be able to just say, in the DSL, \"Here are some node classes—let's see what happens!\", rather than hard-coding too much in plain Racket. IOW, this program overall is tool for experimenting with graphs whose contents tell how to modify themselves—a wild, mostly unexplored domain, which I'm writing this program to explore."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:11:17.254600",
          "text": "Well, the “auto-tagging” application is interesting, and that’s one that could be solved in a simple enough way by what I just described: build a list or hash table of tags that have already been fully-applied to arguments, which is what your `problem-tags` list is already morally doing. If you were doing something even _more_ interesting, though, where you had a scheme by which arguments to tags could somehow be inferred, at runtime, and your code was selecting tag constructors and somehow automatically figuring out how to plug their arguments, you’d need to do something fancier. But it’s always _possible_ to get fancier in some direction or another, so that isn’t saying much. :)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:12:14.256000",
          "text": "I do understand not wanting to hardcode too much. I think skipping the indirection doesn’t cost you anything there, though, since my above point was basically that it wasn’t actually getting you _any_ expressive power over just having direct variable references."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:15:06.258900",
          "text": "Ah, now I see: so the \"tags\" that you have in mind wouldn't be actual nodes in the graph, but complete sets of attributes that could be put into new nodes?\n\nThe need for \"tags\" that aren't really nodes turned into a headache in the first version of the program. I often want to ask the question \"Could a tag of this class apply to these nodes?\" The current system, where attributes are stored in the `nodeclass` struct as functions if you need to call them to get the real attribute value, led to … you guessed it, some painful debugging sessions."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:16:31.260700",
          "text": "I see… I’m admittedly a little confused about the nomenclature, so I might be mixing concepts up. (Is a “tag” different from a “tag class”, and is that different from a “node class”? Is a “node” different from a “tag”? I don’t actually really know.)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:18:57.262900",
          "text": "Yes: a \"tag\" is just a kind of \"node\" (one that's meant to describe other nodes); a \"tag class\" is just a kind of \"node class\", and the \"classes\" are unchanging, abstract definitions whereas actual \"tags\" and \"nodes\" are elements of the graph, which can be removed or have their attributes modified as the program runs."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:21:01.263600",
          "text": "Excellent point that indirection actually hasn't been helping. Now that I think about it, the main value of the indirection has been convenience in writing code to add nodes to graphs. Here's a crude example:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:21:07.264000",
          "text": "What is a “node class”, and how is a “tag class” different from a generic “node class”?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:26:08.269000",
          "text": "A \"node class\" is just a definition of a category of node: what attributes it contains, what \"ports\" it has, and how it's supposed to link to other nodes. The difference between a \"node class\" and a \"tag class\" is mostly their purpose: the latter describe the former. For example, you might have two nodes of class `number`, like `(number 4)` and `(number 17)`, and they might be \"tagged\" by a node of class `greater-than`, indicating that the program \"noticed\" that relationship, and possibly triggering actions based on that relationship.\n\nThere is one \"real\" difference between a tag and a node, but it's not a big deal: a tag gets automatically removed when the nodes that it tags are removed. For example, if `(number 4) got removed, then the `greater-than` tag would also get removed, but if the `greater-than` got removed, the `(number 4) would stay in the graph."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:28:16.270000",
          "text": "Okay… so do you have a `nodeclass` form that is basically the same as a `tagclass` form except that the latter generates “tag nodes” instead of ordinary nodes?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:29:16.270100",
          "text": "Hmm, there is one other place that uses indirection, and it's actually important, even though its only function is convenience. There's a little DSL that lets you tell how to make a graph without writing lots of explicit calls to `make-node`. The code is an interpreter for lists that look like this:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:32:21.271500",
          "text": "Re `nodeclass`/`tagclass`: yep. `nodeclass-body` is the macro that does all the work. (I think this is a bit ugly. As I'm moving to Typed Racket, I'm currently rewriting this so there is only one main macro, `farg-model-spec`, which does everything.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:32:35.272000",
          "text": "It seems like you could make that DSL work without the indirection by just doing something like\n```\n`(:in slipnet\n      (:in (equation)\n           (:let ([15 ,(number 15)]\n                  [+ ,(+)]\n                  [9 ,(number 9)]\n                  [6 ,(number 6)])\n                 (:edge 15 source + result)\n                 (:edge 9 result + operands))))\n```\nthough I’m not sure, since I don’t totally understand all the features of the DSL. If the quoting/unquoting became too unwieldy, it might be easier to just do it with a macro, or set of macros."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:32:54.272200",
          "text": "And yeah, that makes sense."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:35:37.276900",
          "text": "I think what I said above is still true, though maybe now I can state it more precisely and not confuse terms. When you define a node class or tag class with arguments, you aren’t defining a node or a tag. You’re defining a node or tag _constructor_, a function that evaluates to a node. In fact, you might even be able to get away with skipping argument support in nodes/tags entirely and just writing:\n```\n(define (needs need-type)\n  (tagclass needs ....))\n```\nI.e. literally just writing functions that produce tags/nodes when invoked."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:35:56.277300",
          "text": "About `,(number 15)`, that brings up a source of messiness in the program. Maybe you know of a way to avoid this. When you make a new node, you get two values back: the new node's id, and the updated graph. So, `(number 15)` would have to return two values, messing up the use of unquoting. Much of the code right now is long `let*-values` statements like the one a few code snippets above."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:37:15.278500",
          "text": "Yeah, I think viewing the class definitions as constructor definitions makes a lot of sense."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:38:03.279300",
          "text": "I see, yes. It does seem like maybe it would be better to do this with a macro rather than a runtime interpreter. It’s what macros are for, after all. :) Beside the obvious advantages of being able to do the work at compile-time and being able to reuse all of Racket’s macro-writing machinery, you get the very potent advantage of not having to reimplement scope yourself, since the macro system will handle that for you."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:38:51.280700",
          "text": "It seems like you could probably define `:in`, `:let`, and `:edge` as macros. Or maybe `:edge` wouldn’t be its own macro but would be part of the syntax of `:let`, I don’t know."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:39:06.281100",
          "text": "Good point about not reimplementing scope! That was a bit of a nuisance, though I was able to exploit it to do stuff like make `:in` cause all the new nodes created inside it link automatically as \"members\" of the outer node."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:40:24.283000",
          "text": "Yes, I don’t know the details about all the things your DSL does, but I’d bet it’d be possible to replicate all the functionality and convenience via a macro or set of cooperating macros, and that’d _definitely_ play nicer with Typed Racket. But it might involve some more advanced macro machinery to do everything the same way."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:42:41.285400",
          "text": "Regarding `:edge`, the current version is pretty ugly. In an old version of that DSL, written in Clojure, I had it look up the \"port classes\" (oh no, another kind of class!—nah, it's really not so bad) in the node-class definitions, and infer which ports were appropriate to link by. So, you could just say `(+ -&gt; 15)` and it would infer that the edge must go from port `(+ result)` to port `(15 source)`."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:43:41.286000",
          "text": "So, that's yet another place where code needs to \"reflect\" on the class definitions—a sort of indirection."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:45:32.287800",
          "text": "The more I've worked on this, and the more I've learned about `syntax/parse`, the more I've come to think that it would be a big improvement to add more to the DSL. That could simplify the plain-Racket code quite a bit. It may be a little beyond my current `syntax/parse`-fu, but I'm learning…"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:46:13.288600",
          "text": "Is that a reflection on the class definitions, or a reflection on the nodes themselves? It sounded to me from what you said that the “classes” are just the syntax, they don’t exist at runtime (and at runtime there are only nodes)."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:49:28.290400",
          "text": "It's a reflection on the class definitions. At run-time, in the current implementation, the classes still exist as structs that can be queried for various things, like \"What port-labels do you link by?\", \"Does this class inherit from you?\", etc."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:49:59.290900",
          "text": "Right now I'm thinking that it would be better to just make the big macro generate functions to answer those questions."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:55:22.291800",
          "text": "I see. Yes, I think that’s right. So a class definition does exist as a separate thing from an “instantiation” of the class?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:55:31.292000",
          "text": "Yes."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T13:57:15.294900",
          "text": "Yes, it seems like then it would make sense to define variables bound to the class definitions, then make the macro expand to functions that inspect the class definitions at runtime to do the appropriate things. The macro can probably handle things like binding in `:let` at compile-time, though (although it’s certainly possible that `:let` could have extra runtime effects, too)."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T13:57:57.296300",
          "text": "In fact, the nodes themselves (the \"instantiations\") are not represented in one place, like as a struct. There is a big struct for the graph as a whole, which contains hash tables for node ids, `(,node-id ,port-label)` -&gt; incident ports, and looking up a node's attributes by the node's id and the attribute name."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T13:58:16.296400",
          "text": "<@Priscila> i made a little dataflow language similar to what you were asking about: <https://pkgd.racket-lang.org/pkgn/package/datacell>\n\n(I literally wrote it this morning, no garuntees that its actually good :P)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T13:59:57.297000",
          "text": "The example looks just right."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:00:14.297300",
          "text": "I can’t imagine where I got that example from…. :stuck_out_tongue:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:02:36.297900",
          "text": "And you even check that there are no cycles between cells."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:04:46.298400",
          "text": "What's the idea behind the continuation marks?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:05:41.299000",
          "text": "the idea is to do the cycle detection dynamically: if we every try to evaluate a cell *while* evaluating that same cell, we ran accross a cycle"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:06:11.299700",
          "text": "to tell if we are currently evaluating some cell the can look at the continuation marks an see if the stack is marked by that cells identity"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:06:26.300100",
          "text": "Oooh! That's clever."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:06:39.300400",
          "text": "I thing promices do basically the same thing"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:07:17.300800",
          "text": "I think I got confused by the name  `identity`."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:07:29.301200",
          "text": "I was thinking of the identity function."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:07:59.301900",
          "text": "oooh… yeah no I just wanted a seperate notion of `eq` in case the cells get chaperoned some day"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:08:06.302200",
          "text": "because like contracts are good, right?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:08:18.302500",
          "text": "But rereading, I see identity is bound two lines above its use..."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:08:59.303100",
          "text": "right its just a fieldless struct stored in the cell"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:09:18.303600",
          "text": "thats used to track `eq?`ness since the cell identity is generated with each cell"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:10:17.304500",
          "text": "(also i was wrong looks like promices use semaphores and thread-eqness to track re-entrance, so that its thread safe. which i didn’t even think of… meh sounds like a later problem)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:12:03.305200",
          "text": "I like your implementation. It's a nice example of something that's hard to do without macros."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:13:36.306200",
          "text": "So I had a first pass that didn’t need macros actually"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:14:29.307300",
          "text": "Basically cells were built out of constants and functions could be `lift`ed to work on cells, but that felt kinda ugly to me (and also `lift`ing involved `make-keyword-procedure` which always feels gross to me)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:15:15.308100",
          "text": "It also meant that cells values had to be extracted by function, which meant that it was possible to accidentally lose track of a dependency which isn’t great"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T14:16:29.309000",
          "text": "(so…  thank you for giving me an excuse to avoid my real work/Agda for a morning and work in racket for a while :P)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T14:16:41.309200",
          "text": ":wink:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T15:46:47.316700",
          "text": "<@Tambra> oh hey your `identity` struct is the same as my `generative-token` struct: <https://docs.racket-lang.org/rebellion/Generative_Tokens.html>"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-06T15:56:11.317600",
          "text": "There is something similar too in `reactor` using `signal-name`, although thats using uninterned symbols since I also want the actual name there:\n\n<https://github.com/florence/reactor/blob/master/data.rkt#L46>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:06:04.318900",
          "text": "Most likely they are defined - but maybe in a different scope than you are expecting?"
        }
      ]
    },
    {
      "conversation_id": "257",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Tambra cool!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T13:59:08.296600",
          "text": "<@Tambra> cool!"
        }
      ]
    },
    {
      "conversation_id": "258",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Gonzalo Thanks for your time and advice. The last time you helped me out, you helped me get the first version of the macro for this DSL working when I was completely stumped about how to use [CODE]. Thinking about what you said today, it's hit me that the node-constructor function shouldn't take the graph as an argument nor return an updated graph. It should just return a hash table of the node's attributes except for the node's [CODE]. That can then get passed to the function that makes the new node (i.e. puts it in the graph) and assigns it an id. Failure to keep those ideas separate has probably cost the program some unnecessary complexity and bug-proneness up to this point. In other words, just change from [CODE] to [CODE]. I'm still not sure how inference of the right port-labels for an edge could be done, but that can wait.\nPenni: Does anyone know why the variables defined in the outer [CODE] don't get defined? The functions defined in the inner [CODE] do get defined.\nPenni: Any idea how I could track down that scope?\nPriscila: The context is missing. Is this the body of a define-syntax?\nPenni: Here's a little test that invokes the macro. The last line gets [CODE]. [CODE] works fine.\nPenni: Yes.\nPenni: Even this gets [CODE].\nPriscila: The [CODE] in [CODE] needs to have the same scope as stx.\nPriscila: Wrap your #` with a with-syntax.\nPenni: Ohhhhh…\nPriscila: (with-syntax ([hey (format-id stx \"hey\")) ...your syntax...)\nPenni: Is [CODE] the idiomatic way to do it with [CODE] or does [CODE] have its own natural way, maybe involving a keyword like [CODE]?\nKaren: Penni There’s a [CODE] keyword, and I usually write [CODE] macros using [CODE], [CODE], and [CODE] instead of directly calling [CODE] or using [CODE]\nPenni: Indeed I don't like defining a bunch of magic variables. This was a quick test to see if I could generate the hash table. On the other hand, I also don't want to burden the user (me) with having to supply a list of all the various things like this that are going to be defined.\nKaren: [CODE_BLOCK]\nJulia: Penni Fair enough. I just learned that rule of thumb, and so for me the lazy thing to do is follow that rule of thumb, rather than worry too much about scope if possible. :smile:\nPenni: Oh, I like that rule of thumb, though! I'll keep it in mind as I try to finish this thing today.\nPenni: I'm all for simple rules of thumb and standard programming idioms so you don't have to consider lots of alternatives, you can just code!\nKaren: I really wish the standard racket libraries had a nice wrapper around [CODE] that took care of the whole [CODE] thing\nPenni: Karen Indeed I wrote my own wrapper like that once. Today I totally forgot about the need for [CODE].\nPriscila: The [CODE] and [CODE] aka [CODE] works everywhere. It's independent of [CODE], [CODE] etc. It even works in Scheme.\nKaren: There’s a couple of wrappers in the package catalog too I think\nPriscila: It's good advice not to introduce a new identifier into an outer scope though.\nGonzalo: Very much not in the standard library (yet), but I have an implementation of such a function here: <[URL]\nGonzalo: Maybe it should be put somewhere.\nPriscila: Doesn't [CODE] (of [CODE] handle sub-ranges?\nPenni: Priscila Thanks. I'm just seeking one of those standard, idiomatic things so the code is easy to read (and write). I'm going to try it with [CODE] and if that doesn't work, go back to [CODE]. (A little grepping shows that I've been doing [CODE] + [CODE] throughout other code. Weird that I forgot about it today!)\nPenni: Ah, maybe it would be better to have the [CODE] macro _return_ that hash table—or some struct that contains all the stuff that it needs to generate, apart from the various functions (named by the user) inside the spec.\nKaren: Priscila I don’t think so, I think that’s just the source location of the whole identifier. Not for any specific portions of the identifier.\nPriscila: I see. Why not extend [CODE] then. No need to have a wrapper if we can avoid it.\nKaren: a list of everyone’s implementations of this would be a compelling argument for a [CODE] PR :p\nPenni: It worked with [CODE] and [CODE]. Hooray! Thanks for saving me an hour of stupidly trying stuff until it hit me. :wink:\nKaren: Priscila That would also be fine with me, and probably won’t break anything\nPenni: Julia This requires passing an additional argument to the function, but at least there's no mess of \"magic\" or \"implicit\" identifiers being defined.\nPriscila: Gonzalo Put in [CODE] using a new keyword.\nPenni: Hmm, [CODE] can't define functions in addition to returning a [CODE] struct. Looks like it'll have to be [CODE].\nGonzalo: Priscila Doing it in [CODE] would be more work, since you’d have to parse the pattern to figure out where the insertions begin and end. [CODE] currently just ultimately turns into [CODE], but making it do the smarter thing would require doing more itself.\nGonzalo: Still, it’s probably the right thing to do.\nKaren: something like this? [CODE_BLOCK]\nPenni: Now it works without [CODE] or [CODE]. Hooray! Thanks again, this time for guiding me along a saner design path.\nGonzalo: I wonder if it would cause any actual backwards-compatibility problems to make [CODE] default to [CODE]. It would probably make some existing programs magically more cooperative with Check Syntax. But maybe that’s too magical and not worth it.\nPriscila: I need to read up on sub-range-binders.\nGonzalo: Priscila [CODE] is what lets [CODE] have different binding arrows for the [CODE] and [CODE] parts.\nKaren: Maybe it can default to [CODE] initially and then change to defaulting to [CODE] after a release or two.\nKaren: And it’s what lets DrRacket’s “renaming” tool work on struct fields\nKaren: if you rename the [CODE] field of a [CODE] struct to [CODE], drracket will rename [CODE] to [CODE]\nPriscila: Yes. I just can't remember the details. For example. Is it possible for format-id to infer from \"~a-~a\" what to do? In other situation it might be \"~a/~a\" or something different.\nPriscila: I begin to see what you meant with \"it is more work in format-id\".\nPriscila: For simple cases it might not be too bad though.\nKaren: in my utils package I’ll probably just replace the whole [CODE] shebang with something where format strings are actual structured data and not just strings, so it’s much less magic how [CODE] works\nGonzalo: It’s not _too_ hard. It just involves manually expanding the format string.\nKaren: what should [CODE] do?\nGonzalo: Non-identifier arguments just don’t cause any entries in the [CODE] value.\nKaren: which means [CODE] will be a silent bug\nKaren: that will pretty much never get caught, since this is the kind of thing that people don’t test for (and it’s hard to test for)\nGonzalo: I can’t imagine very many cases where a sub-range-binder is actually useful but someone would somehow accidentally return a stringified version.\nGonzalo: If you _ever_ see that happen in the wild, let me know. :)\nKaren: it’s very common that I use [CODE] with [CODE], and I’ve been known to get myself confused over what I’m mapping over or whether I’m getting a syntax object or a symbol as an argument\nKaren: that would be a case where a lenient [CODE] would go unnoticed by me\nKaren: ….when does [CODE] get used with arguments that _aren’t_ identifiers anyway?\nGonzalo: I guess I could theoretically see people using [CODE] instead of [CODE] and dropping properties. But I don’t really care enough to worry about it.\nGonzalo: What’s far more likely is that people won’t specify [CODE], the resulting syntax object won’t be [CODE], and Check Syntax will ignore it anyway.\nKaren: oh yeah I didn’t even realize that would be necessary\nKaren: so [CODE] is broken on its own, it needs a [CODE] argument with…. what?\nKaren: just copying the props of [CODE] or [CODE] doesn’t seem right\nGonzalo: Good question. Syntax properties are goofy. I don’t think they’re actually a very good solution to very many things, but that’s not a fight for anytime soon.\nGonzalo: But think about it another way: you’re copying lexical context from [CODE] or [CODE]. That doesn’t really seem right, either.\nKaren: No the lexical context copying _does_ seem right, since that’s how I introduce the identifier into the same scope as either [CODE] or [CODE] (like struct field accessors)\nGonzalo: If a macro generates [CODE], and [CODE] has totally different lexical context from [CODE], what lexical context should [CODE] be in? Who knows?\nKaren: for field accessors it should be the context of the field name\nGonzalo: Then you should copy the properties from the field name.\nKaren: I don’t think that follows\nGonzalo: IME, when using [CODE], you _usually_ want the lctx, srcloc, and props arguments to all be the same.\nKaren: yeah and that’s what I do by default but I don’t feel like I have a good enough argument for _why_ I do that, and I don’t know if it actually works the way I want it to all the time. It just seems like the simplest thing to do that isn’t obviously broken somehow.\nGonzalo: Think of it this way. When you write [CODE], you’re usually generating an identifier derived from one or more other identifiers. Sometimes, it isn’t clear which of the identifiers is the “primary” identifier. That case is hard. But when you _can_ designate one of them as a “primary” identifier, then you’re basically morally saying that the resulting identifier _is the same identifier_ as the original one, the user just wrote it in an abbreviated form. So everything about the original identifier should be copied onto the new one; they’re the “same” identifier.\nKaren: That’s definitely not what I want to say though, because sometimes I’m deriving multiple different identifiers from the same one. Like struct lenses. I want to say that these identifiers are all derived from this other one, and should have the same scope, but I _don’t_ want to say that they’re the same because I don’t think of them all as the same identifier at all. Like, what if the field name _already had_ a sub range binders property?\nKaren: use case: macro for nested struct definitions that did something magic to generate field names by stringing together lots of other field names\nGonzalo: Sure, that case is trickier. But keep in mind that just because the binding site has a sub-range-binders property doesn’t mean its uses do. It’s actually extremely unlikely for an identifier with a sub-range-binders property on it to ever show up in the input to a macro.\nKaren: (there’s a couple of interface description languages that do this, most notably google’s protobuffer language)\nGonzalo: In any case, I think if you’re doing something that fancy, you’re probably going to get weird behavior, anyway, with any automatic scheme.\nGonzalo: So you might just have to be careful and do it by hand.\nKaren: I think I want a list of what common syntax properties there are and to understand how they’re affected by copying onto derived ids like this\nKaren: I only know of the ones used by check syntax\nGonzalo: Yeah, me too. I think the fact that all syntax properties are automatically copied by the expander was probably a mistake, but it’s also unclear what a better solution is. So I don’t know. I don’t think syntax properties are “the right thing”, I think they’re sort of a hack, so I try not to worry about them that much.\nKaren: They seem alright for use-site metadata. Anything related to the binding of the id though…. not so much. Like type information.\nGonzalo: I think they work okay for things like [CODE], but not for lots of other kinds of metadata, like [CODE].\nGonzalo: Since it really doesn’t make very much sense for [CODE] to get copied onto the expansion of a macro.\nKaren: Yeah [CODE] _definitely_ doesn’t make sense\nGonzalo: But that’s just the problem: syntax properties are used for a half dozen different things, but they’re a one-size-fits-all solution. Which doesn’t work.\nGonzalo: But, to be fair, I doubt most of those use cases were known when syntax properties were first added.\nKaren: Yup\nKaren: I’m gonna make a gist listing syntax properties\nKaren: <[URL]\nKaren: looking at that list, [CODE] jumps out at me as something I would plausibly want on a struct field name, an accessor, and a setter, and I’d want them all different\nPenni: I see. Further REPLing suggests that the problem has something to do with literals.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 95,
        "duration_minutes": 164.2,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "complete",
          "finish",
          "implement",
          "need to",
          "requires",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Julia",
          "Karen",
          "Penni",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-03-06T14:48:03.315200",
          "text": "<@Gonzalo> Thanks for your time and advice. The last time you helped me out, you helped me get the first version of the macro for this DSL working when I was completely stumped about how to use `syntax/parse`. Thinking about what you said today, it's hit me that the node-constructor function shouldn't take the graph as an argument nor return an updated graph. It should just return a hash table of the node's attributes except for the node's `id`. That can then get passed to the function that makes the new node (i.e. puts it in the graph) and assigns it an id. Failure to keep those ideas separate has probably cost the program some unnecessary complexity and bug-proneness up to this point. In other words, just change from `(make-node g 'number 17)` to `(make-node g (number 17))`. I'm still not sure how inference of the right port-labels for an edge could be done, but that can wait."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:03:57.318000",
          "text": "Does anyone know why the variables defined in the outer `begin` don't get defined? The functions defined in the inner `begin` do get defined."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:07:43.319200",
          "text": "Any idea how I could track down that scope?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:08:52.319700",
          "text": "The context is missing. Is this the body of a define-syntax?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:09:18.319800",
          "text": "Here's a little test that invokes the macro. The last line gets `hey: unbound identifier in: hey`. `(number 17)` works fine."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:09:22.320200",
          "text": "Yes."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:10:20.320300",
          "text": "Even this gets `hey: unbound identifier in: hey`."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:10:49.321000",
          "text": "The `hey` in `(define hey 'h)` needs to have the same scope as stx."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:11:10.321400",
          "text": "Wrap your #` with a with-syntax."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:11:24.321800",
          "text": "Ohhhhh…"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:12:20.322400",
          "text": "(with-syntax ([hey (format-id stx \"hey\"))  ...your syntax...)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:13:26.323800",
          "text": "Is `with-syntax` the idiomatic way to do it with `syntax/parse` or does `syntax/parse` have its own natural way, maybe involving a keyword like `#:with`?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:15:35.326500",
          "text": "<@Penni> There’s a `#:with` keyword, and I usually write `syntax/parse` macros using `define-simple-macro`, `#:with`, and `#:do` instead of directly calling `syntax-parse` or using `with-syntax`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:17:39.328600",
          "text": "Indeed I don't like defining a bunch of magic variables. This was a quick test to see if I could generate the hash table. On the other hand, I also don't want to burden the user (me) with having to supply a list of all the various things like this that are going to be defined."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:17:51.328800",
          "text": "```\n(define-simple-macro (dtest)\n  #:with hey (some expr returning a syntax object ...)\n  (begin (define hey 'h)))\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-06T16:19:17.330500",
          "text": "<@Penni> Fair enough. I just learned that rule of thumb, and so for me the lazy thing to do is follow that rule of thumb, rather than worry too much about scope if possible. :smile:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:20:05.331500",
          "text": "Oh, I like that rule of thumb, though! I'll keep it in mind as I try to finish this thing today."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:20:55.332900",
          "text": "I'm all for simple rules of thumb and standard programming idioms so you don't have to consider lots of alternatives, you can just code!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:21:43.333800",
          "text": "I really wish the standard racket libraries had a nice wrapper around `format-id` that took care of the whole `'sub-range-binders` thing"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:22:17.334900",
          "text": "<@Karen> Indeed I wrote my own wrapper like that once. Today I totally forgot about the need for `format-id`."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:22:28.335200",
          "text": "The `with-syntax` and `syntax` aka `#'` works everywhere. It's independent of `syntax-parse`, `syntax-case` etc. It even works in Scheme."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:22:45.335700",
          "text": "There’s a couple of wrappers in the package catalog too I think"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:23:19.336600",
          "text": "It's good advice not to introduce a new identifier into an outer scope though."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:23:58.337600",
          "text": "Very much not in the standard library (yet), but I have an implementation of such a function here: <https://github.com/lexi-lambda/mini-ml/blob/e8e0b62d294293bce343c77ac21c1ecb69d6f6a9/mini-ml-lib/mini-ml/private/util/syntax/misc.rkt#L143-L151>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:24:03.338000",
          "text": "Maybe it should be put somewhere."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:24:18.338700",
          "text": "Doesn't `#:source` (of `format-id` handle sub-ranges?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:24:28.338900",
          "text": "<@Priscila> Thanks. I'm just seeking one of those standard, idiomatic things so the code is easy to read (and write). I'm going to try it with `#:with` and if that doesn't work, go back to `with-syntax`. (A little grepping shows that I've been doing `with-syntax` + `format-id` throughout other code. Weird that I forgot about it today!)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:26:21.340900",
          "text": "Ah, maybe it would be better to have the `spec` macro _return_ that hash table—or some struct that contains all the stuff that it needs to generate, apart from the various functions (named by the user) inside the spec."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:26:25.341100",
          "text": "<@Priscila> I don’t think so, I think that’s just the source location of the whole identifier. Not for any specific portions of the identifier."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:27:17.341900",
          "text": "I see. Why not extend `format-id` then. No need to have a wrapper if we can avoid it."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:27:17.342000",
          "text": "a list of everyone’s implementations of this would be a compelling argument for a `racket/syntax` PR :p"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:29:31.343600",
          "text": "It worked with `#:with` and `format-id`. Hooray! Thanks for saving me an hour of stupidly trying stuff until it hit me. :wink:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:30:43.344800",
          "text": "<@Priscila> That would also be fine with me, and probably won’t break anything"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:34:49.345000",
          "text": "<@Julia> This requires passing an additional argument to the function, but at least there's no mess of \"magic\" or \"implicit\" identifiers being defined."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:41:56.346900",
          "text": "<@Gonzalo> Put in `format-id` using a new keyword."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:42:04.347100",
          "text": "Hmm, `(define sp (spec . . .))` can't define functions in addition to returning a `FARGishSpec` struct. Looks like it'll have to be `(define-fargish-spec specname (nodeclass blah blah . . .) . . .)`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:45:18.347300",
          "text": "<@Priscila> Doing it in `format-id` would be more work, since you’d have to parse the pattern to figure out where the insertions begin and end. `format-id` currently just ultimately turns into `format`, but making it do the smarter thing would require doing more itself."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:45:43.347500",
          "text": "Still, it’s probably the right thing to do."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:45:55.347700",
          "text": "something like this?\n```\n(format-id #'foo \"~a-~a\" #'foo #'bar #:sub-range-binders? #t)\n```"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T16:46:53.348600",
          "text": "Now it works without `#:with` or `format-id`. Hooray! Thanks again, this time for guiding me along a saner design path."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:47:34.348800",
          "text": "I wonder if it would cause any actual backwards-compatibility problems to make `#:sub-range-binders?` default to `#t`. It would probably make some existing programs magically more cooperative with Check Syntax. But maybe that’s too magical and not worth it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:47:37.349000",
          "text": "I need to read up on sub-range-binders."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:48:40.349200",
          "text": "<@Priscila> `sub-range-binders` is what lets `posn-x` have different binding arrows for the `posn` and `x` parts."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:48:43.349400",
          "text": "Maybe it can default to `#f` initially and then change to defaulting to `#t` after a release or two."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:49:03.349600",
          "text": "And it’s what lets DrRacket’s “renaming” tool work on struct fields"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:49:28.349800",
          "text": "if you rename the `x` field of a `posn` struct to `foo`, drracket will rename `posn-x` to `posn-foo`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:50:06.350000",
          "text": "Yes. I just can't remember the details. For example. Is it possible for format-id to infer from \"~a-~a\" what to do? In other situation it might be \"~a/~a\" or something different."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:50:53.350200",
          "text": "I begin to see what you meant with \"it is more work in format-id\"."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T16:51:09.350400",
          "text": "For simple cases it might not be too bad though."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:52:39.350600",
          "text": "in my utils package I’ll probably just replace the whole `format-id` shebang with something where format strings are actual structured data and not just strings, so it’s much less magic how `format-id` works"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:54:00.350800",
          "text": "It’s not _too_ hard. It just involves manually expanding the format string."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:54:57.351000",
          "text": "what should `(format-id #'foo \"~a-~a\" #'bar \"not an identifier\" #:sub-range-binders? #t)` do?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:55:35.351200",
          "text": "Non-identifier arguments just don’t cause any entries in the `'sub-range-binders` value."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:56:17.351400",
          "text": "which means `(format-id #'foo \"~a-~a\" #'bar (expression-that-should-return-identifier-but-doesnt) #:sub-range-binders? #t)` will be a silent bug"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:56:43.351600",
          "text": "that will pretty much never get caught, since this is the kind of thing that people don’t test for (and it’s hard to test for)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:57:28.351800",
          "text": "I can’t imagine very many cases where a sub-range-binder is actually useful but someone would somehow accidentally return a stringified version."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T16:57:57.352100",
          "text": "If you _ever_ see that happen in the wild, let me know. :)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:58:31.352300",
          "text": "it’s very common that I use `format-id` with `map`, and I’ve been known to get myself confused over what I’m mapping over or whether I’m getting a syntax object or a symbol as an argument"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:58:46.352500",
          "text": "that would be a case where a lenient `format-id` would go unnoticed by me"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T16:59:42.352700",
          "text": "….when does `format-id` get used with arguments that _aren’t_ identifiers anyway?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:00:39.352900",
          "text": "I guess I could theoretically see people using `syntax-&gt;datum` instead of `syntax-&gt;list` and dropping properties. But I don’t really care enough to worry about it."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:01:07.353100",
          "text": "What’s far more likely is that people won’t specify `#:props`, the resulting syntax object won’t be `syntax-original?`, and Check Syntax will ignore it anyway."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:01:31.353300",
          "text": "oh yeah I didn’t even realize that would be necessary"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:02:11.353500",
          "text": "so `(format-id #'foo \"~a-~a\" #'foo #'bar #:sub-range-binders? #t)` is broken on its own, it needs a `#:props` argument with…. what?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:02:48.353700",
          "text": "just copying the props of `#'foo` or `#'bar` doesn’t seem right"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:02:53.353900",
          "text": "Good question. Syntax properties are goofy. I don’t think they’re actually a very good solution to very many things, but that’s not a fight for anytime soon."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:03:22.354100",
          "text": "But think about it another way: you’re copying lexical context from `#'foo` or `#'bar`. That doesn’t really seem right, either."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:04:02.354300",
          "text": "No the lexical context copying _does_ seem right, since that’s how I introduce the identifier into the same scope as either `#'foo` or `#'bar` (like struct field accessors)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:04:06.354500",
          "text": "If a macro generates `(struct foo (x))`, and `foo` has totally different lexical context from `x`, what lexical context should `foo-x` be in? Who knows?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:04:21.354700",
          "text": "for field accessors it should be the context of the field name"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:04:39.354900",
          "text": "Then you should copy the properties from the field name."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:05:13.355100",
          "text": "I don’t think that follows"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:05:30.355300",
          "text": "IME, when using `format-id`, you _usually_ want the lctx, srcloc, and props arguments to all be the same."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:07:01.355500",
          "text": "yeah and that’s what I do by default but I don’t feel like I have a good enough argument for _why_ I do that, and I don’t know if it actually works the way I want it to all the time. It just seems like the simplest thing to do that isn’t obviously broken somehow."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:07:44.355700",
          "text": "Think of it this way. When you write `format-id`, you’re usually generating an identifier derived from one or more other identifiers. Sometimes, it isn’t clear which of the identifiers is the “primary” identifier. That case is hard. But when you _can_ designate one of them as a “primary” identifier, then you’re basically morally saying that the resulting identifier _is the same identifier_ as the original one, the user just wrote it in an abbreviated form. So everything about the original identifier should be copied onto the new one; they’re the “same” identifier."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:09:16.355900",
          "text": "That’s definitely not what I want to say though, because sometimes I’m deriving multiple different identifiers from the same one. Like struct lenses. I want to say that these identifiers are all derived from this other one, and should have the same scope, but I _don’t_ want to say that they’re the same because I don’t think of them all as the same identifier at all. Like, what if the field name _already had_ a sub range binders property?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:10:16.356100",
          "text": "use case: macro for nested struct definitions that did something magic to generate field names by stringing together lots of other field names"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:11:06.356300",
          "text": "Sure, that case is trickier. But keep in mind that just because the binding site has a sub-range-binders property doesn’t mean its uses do. It’s actually extremely unlikely for an identifier with a sub-range-binders property on it to ever show up in the input to a macro."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:11:09.356500",
          "text": "(there’s a couple of interface description languages that do this, most notably google’s protobuffer language)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:12:36.356700",
          "text": "In any case, I think if you’re doing something that fancy, you’re probably going to get weird behavior, anyway, with any automatic scheme."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:12:51.356900",
          "text": "So you might just have to be careful and do it by hand."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:12:53.357100",
          "text": "I think I want a list of what common syntax properties there are and to understand how they’re affected by copying onto derived ids like this"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:13:08.357300",
          "text": "I only know of the ones used by check syntax"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:14:07.357500",
          "text": "Yeah, me too. I think the fact that all syntax properties are automatically copied by the expander was probably a mistake, but it’s also unclear what a better solution is. So I don’t know. I don’t think syntax properties are “the right thing”, I think they’re sort of a hack, so I try not to worry about them that much."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:14:50.357700",
          "text": "They seem alright for use-site metadata. Anything related to the binding of the id though…. not so much. Like type information."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:15:32.357900",
          "text": "I think they work okay for things like `'disappeared-use`, but not for lots of other kinds of metadata, like `'paren-shape`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:15:46.358100",
          "text": "Since it really doesn’t make very much sense for `'paren-shape` to get copied onto the expansion of a macro."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:16:08.358300",
          "text": "Yeah `'paren-shape` _definitely_ doesn’t make sense"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:16:30.358500",
          "text": "But that’s just the problem: syntax properties are used for a half dozen different things, but they’re a one-size-fits-all solution. Which doesn’t work."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T17:16:45.358700",
          "text": "But, to be fair, I doubt most of those use cases were known when syntax properties were first added."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:17:28.358900",
          "text": "Yup"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:17:40.359100",
          "text": "I’m gonna make a gist listing syntax properties"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:27:07.360200",
          "text": "<https://gist.github.com/jackfirth/09270f3334f9069bea817e3ab9cff11f>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T17:28:01.360400",
          "text": "looking at that list, `'mouse-over-tooltips` jumps out at me as something I would plausibly want on a struct field name, an accessor, and a setter, and I’d want them all different"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T17:32:15.361800",
          "text": "I see. Further REPLing suggests that the problem has something to do with literals."
        }
      ]
    },
    {
      "conversation_id": "259",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: So, another way to fix this is to have things like [CODE] and [CODE] be supplied by the user/invoker of the macro. So maybe the [CODE] macro takes these from the user. When a macro [CODE]s things, and starts introducing names, that's often friendlier. It's usually OK to bend the rules and form identifiers using [CODE] that add to a name supplied by the macro user. Much like how [CODE] and [CODE] take the struct name from you, then make accessors from that base name.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-06T16:15:25.326300",
          "text": "So, another way to fix this is to have things like `hey` and `ht/class-&gt;is-a` be supplied by the user/invoker of the macro.\nSo maybe the `spec` macro takes these from the user.\nWhen a macro `define`s things, and starts introducing names, that's often friendlier.\nIt's usually OK to bend the rules and form identifiers using `format-id` that add to a name supplied by the macro user.\nMuch like how `struct` and `define-struct` take the struct name from you, then make accessors from that base name."
        }
      ]
    },
    {
      "conversation_id": "260",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Priscila &amp; Loise Sorry, I was out sick for the past month, so no, they aren't. :disappointed:\nPriscila: No worries.\nPenni: Is this just something that hasn't been migrated to Typed Racket yet, or am I misusing [CODE]?\nElin: A lot of [CODE] internal functions just haven’t been put into Typed Racket yet\nPenni: Any suggestion for how to get around this?\nPenni: I'm surprised that this doesn't work. It makes me suspect that I'm probably making some elementary error rather than pushing [CODE] beyond what's been migrated to Typed Racket. Does anything look wrong there?\nElin: I hate to tell you this bad news, but no amount of [CODE] will fix this. The [CODE] identifier produced by the [CODE] macro doesn’t have a type, and [CODE] (and [CODE] too) produces a new binding, which the output of [CODE] will never refer to because it’s not in scope. The only thing that might fix this is a super unsafe, undocumented, internal, super not-meant-to-be-used-by-users thing called [CODE]. It’s weird and dangerous, more dangerous than [CODE]. You can think of it sort of like compile-time mutation on Typed Racket’s internal type table. It doesn’t just define a new identifier that might be unsafe to use like [CODE] would; mutates the table for existing identifiers without creating a new binding. So code [CODE] using it can make code [CODE] unsafe even if [CODE] has nothing to do with it. So maybe _someone_ should use that to provide types for internal [CODE] functions, but it should be part of the official [CODE] package, reviewed for type safety, and it will have to update whenever the _internal implementation details_ of [CODE] update, not just when the interface updates.\nPenni: OK, that does indeed sound scary, especially for a Typed Racket _and_ [CODE] newbie.\nPenni: I'm now seeing if defining syntax-classes will work. That's how, purely by chance, I've been doing it in other code so far.\nPenni: Well, this works!\nElin: So [CODE] just avoids using the [CODE] identifier here?\nElin: Wait, when I try that I get a similar error about [CODE] instead.\nGonzalo: Penni I think you probably want to use untyped Racket at phase 1 (that is, for all your compile-time code) and just use Typed Racket at phase 0.\nGonzalo: I don’t think it’s theoretically impossible to use TR for phase 1 code, but I don’t think it’s easy, either.\nPenni: Ohhhhhh, that might explain it. The error messages are all from me typing into the REPL. The code that worked was in a source file that I ran. The source file has [CODE], so so does the REPL. But as you say, phase 1 should be run with Untyped Racket.\nGonzalo: Yes… I think [CODE] provides ordinary [CODE] at phase 1?\nGonzalo: If you write your code in the REPL under a [CODE], you might have better luck.\nPenni: Yes. Or at least I'm pretty sure that's what's happening.\nPenni: And thanks for the REPL suggestion! I'd been grooving on how easy it is to try even [CODE] stuff at the REPL, but OK, it's not quite as easy as I imagined, but that's still fine for quickly trying stuff out to see if I'm doing it right.\nElin: If you want a REPL that’s consistently at compile-time, you can start one with [CODE] or something like that: [CODE_BLOCK]\nGonzalo: Wow, I had no idea that would work.\nPenni: Excellent!\nGonzalo: It seems to be maybe less than ideal in DrRacket.\nPenni: Indeed when I'm experimenting like this, I usually try many, many variations until I get it right.\nPenni: Ah, I see. It's got that \"eof\" box. Elin, are you running with something like XREPL?\nElin: No, I’m running it in DrRacket, I’ve just gotten used working with that “eof” box in the way\nPenni: I see. Life is filled with trade-offs. :wink:\nPenni: Anyway, thanks. Now I'm no longer making workarounds for things that aren't problems, and now I've got a way to experiment with [CODE] in the REPL.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 28,
        "duration_minutes": 56.77,
        "contains_question": true,
        "action_keywords": [
          "action",
          "fix",
          "implement",
          "review",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Gonzalo",
          "Marcelina",
          "Penni",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-06T17:23:47.359900",
          "text": "<@Priscila> &amp; <@Loise> Sorry, I was out sick for the past month, so no, they aren't. :disappointed:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-06T17:24:12.360100",
          "text": "No worries."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T17:29:10.360600",
          "text": "Is this just something that hasn't been migrated to Typed Racket yet, or am I misusing `~or*`?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-06T17:30:46.361300",
          "text": "A lot of `syntax-parse` internal functions just haven’t been put into Typed Racket yet"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T17:39:39.361900",
          "text": "Any suggestion for how to get around this?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T17:48:14.367200",
          "text": "I'm surprised that this doesn't work. It makes me suspect that I'm probably making some elementary error rather than pushing `syntax-parse` beyond what's been migrated to Typed Racket. Does anything look wrong there?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-06T17:55:25.373600",
          "text": "I hate to tell you this bad news, but no amount of `required/typed` will fix this. The `normalize-context` identifier produced by the `syntax-parse` macro doesn’t have a type, and `require/typed` (and `unsafe-require/typed` too) produces a new binding, which the output of `syntax-parse` will never refer to because it’s not in scope.\n\nThe only thing that might fix this is a super unsafe, undocumented, internal, super not-meant-to-be-used-by-users thing called `#lang s-exp typed-racket/base-env/extra-env-lang`.\n\nIt’s weird and dangerous, more dangerous than `unsafe-require/typed/provide`. You can think of it sort of like compile-time mutation on Typed Racket’s internal type table. It doesn’t just define a new identifier that might be unsafe to use like `unsafe-require/typed/provide` would; mutates the table for existing identifiers without creating a new binding. So code `X` using it can make code `Y` unsafe even if `Y` has nothing to do with it.\n\nSo maybe _someone_ should use that to provide types for internal `syntax-parse` functions, but it should be part of the official `typed-racket-more` package, reviewed for type safety, and it will have to update whenever the _internal implementation details_ of `syntax-parse` update, not just when the interface updates."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T17:56:38.374500",
          "text": "OK, that does indeed sound scary, especially for a Typed Racket _and_ `syntax-parse` newbie."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T17:57:11.375100",
          "text": "I'm now seeing if defining syntax-classes will work. That's how, purely by chance, I've been doing it in other code so far."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:00:21.375200",
          "text": "Well, this works!"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-06T18:01:19.375900",
          "text": "So `define-syntax-class` just avoids using the `normalize-context` identifier here?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-06T18:03:18.376300",
          "text": "Wait, when I try that I get a similar error about `es-add-thing` instead."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T18:03:53.376900",
          "text": "<@Penni> I think you probably want to use untyped Racket at phase 1 (that is, for all your compile-time code) and just use Typed Racket at phase 0."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T18:04:17.377500",
          "text": "I don’t think it’s theoretically impossible to use TR for phase 1 code, but I don’t think it’s easy, either."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:05:45.379200",
          "text": "Ohhhhhh, that might explain it. The error messages are all from me typing into the REPL. The code that worked was in a source file that I ran. The source file has `#lang typed/racket`, so so does the REPL. But as you say, phase 1 should be run with Untyped Racket."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T18:07:01.379700",
          "text": "Yes… I think `#lang typed/racket` provides ordinary `racket/base` at phase 1?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T18:07:19.380200",
          "text": "If you write your code in the REPL under a `begin-for-syntax`, you might have better luck."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:08:16.380600",
          "text": "Yes. Or at least I'm pretty sure that's what's happening."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:09:20.382000",
          "text": "And thanks for the REPL suggestion! I'd been grooving on how easy it is to try even `syntax-parse` stuff at the REPL, but OK, it's not quite as easy as I imagined, but that's still fine for quickly trying stuff out to see if I'm doing it right."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-06T18:12:27.383100",
          "text": "If you want a REPL that’s consistently at compile-time, you can start one with `(begin-for-syntax (read-eval-print-loop))` or something like that:\n```\n&gt; (begin-for-syntax (read-eval-print-loop))\n&gt; (define-syntax-class nodeclass-head\n    #:datum-literals [nodeclass tagclass]\n    #:attributes [tagclass?]\n    (pattern nodeclass\n      #:with tagclass? #'#f)\n    (pattern tagclass\n      #:with tagclass? #'#t))\n&gt; (syntax-parse #'nodeclass [x:nodeclass-head #'x.tagclass?])\n.#&lt;syntax:interactions from an unsaved editor::156 #f&gt;\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T18:13:24.383400",
          "text": "Wow, I had no idea that would work."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:13:27.383500",
          "text": "Excellent!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-06T18:13:53.384000",
          "text": "It seems to be maybe less than ideal in DrRacket."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:14:09.384400",
          "text": "Indeed when I'm experimenting like this, I usually try many, many variations until I get it right."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:15:16.385200",
          "text": "Ah, I see. It's got that \"eof\" box. <@Elin>, are you running with something like XREPL?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-06T18:16:27.385900",
          "text": "No, I’m running it in DrRacket, I’ve just gotten used working with that “eof” box in the way"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:17:23.386300",
          "text": "I see. Life is filled with trade-offs. :wink:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-06T18:20:33.387200",
          "text": "Anyway, thanks. Now I'm no longer making workarounds for things that aren't problems, and now I've got a way to experiment with `syntax-parse` in the REPL."
        }
      ]
    },
    {
      "conversation_id": "261",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Elin wait, _what_\nKaren: that _works_?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.05,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-06T18:29:22.387400",
          "text": "<@Elin> wait, _what_"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T18:29:25.387600",
          "text": "that _works_?"
        }
      ]
    },
    {
      "conversation_id": "262",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Switching between [CODE] and [CODE], if I had a nickel for every time I mixed up seconds and milliseconds, I'd have either 100 or 100,000 nickels.\nKristeen: Julia I had 100000 nickels but then I divided by 1000\nKaren: Julia Kristeen fun fact: inside Google, functions that accept / return a number of seconds / milliseconds / days / etc. are required by policy to include the unit in the function name and tools check for this automatically during code reviews\nKristeen: What do you do for function arguments (as in Julia's examples)?\nKaren: Either include the unit in the function name or (better) accept a structured type like [CODE] instead of a plain number\nKaren: so like, either [CODE] or [CODE]\nKaren: The former approach tends to get used when you can't use a structured type easily, like for a command line flag.\nJulia: For my own function definitions I tend to do a keyword argument that says the units. e.g. For a \"Racket2\" I'd suggest [CODE] and [CODE]. In my own code I tend to abbreviate [CODE]. Although, real talk: If I haven't burned my hand on the stove recently, I sometimes still define them ambiguously. hash tag do as I say not as I do. ¯\\_(ツ)_/¯\nKaren: That works pretty well in a pinch. I assume it makes it difficult to document such a function though.\nKaren: Penni I’d expect something like [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 351.1,
        "contains_question": true,
        "action_keywords": [
          "review"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Karen",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-06T19:38:21.389200",
          "text": "Switching between `sleep` and `alarm-evt`, if I had a nickel for every time I mixed up seconds and milliseconds, I'd have either 100 or 100,000 nickels."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-06T20:33:24.390000",
          "text": "<@Julia> I had 100000 nickels but then I divided by 1000"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T20:41:12.394000",
          "text": "<@Julia> <@Kristeen> fun fact: inside Google, functions that accept / return a number of seconds / milliseconds / days / etc. are required by policy to include the unit in the function name and tools check for this automatically during code reviews"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-06T20:41:57.394400",
          "text": "What do you do for function arguments (as in <@Julia>'s examples)?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T20:42:51.395400",
          "text": "Either include the unit in the function name or (better) accept a structured type like `Duration` instead of a plain number"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T20:43:56.397100",
          "text": "so like, either `(sleep-seconds 200)` or `(sleep (seconds 200))`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T20:44:48.398200",
          "text": "The former approach tends to get used when you can't use a structured type easily, like for a command line flag."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-06T21:32:03.403400",
          "text": "For my own function definitions I tend to do a keyword argument that says the units.\ne.g. For a \"Racket2\" I'd suggest `(sleep #:seconds n)` and `(alarm-evt #:milliseconds n)`.\nIn my own code I tend to abbreviate `#:msec`.\nAlthough, real talk: If I haven't burned my hand on the stove recently, I sometimes still define them ambiguously. hash tag do as I say not as I do. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-06T22:51:20.404300",
          "text": "That works pretty well in a pinch. I assume it makes it difficult to document such a function though."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:29:27.409200",
          "text": "<@Penni> I’d expect something like `(topological-sort (syntax-&gt;list #'(foo ...)))`"
        }
      ]
    },
    {
      "conversation_id": "263",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Ashlea: Hello, I'm making some autocomplete plugins from drracket: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Ashlea"
        ]
      },
      "timeline": [
        {
          "user": "Ashlea",
          "timestamp": "2019-03-06T21:41:11.404100",
          "text": "Hello, I'm making some autocomplete plugins from drracket: <https://github.com/yjqww6/drcomplete>"
        }
      ]
    },
    {
      "conversation_id": "264",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Caprice: Cool!\nPenni: How can you do a topological sort on things defined within a [CODE] macro? The topological sort itself hasn't been an obstacle for me (there's a library function that does it, for one thing). The difficulty has been pulling the syntax objects out of pattern variables to pass to the topological-sort function. I'd need to make a closure or something that accepts one pattern variable and returns its \"parent\" attribute(s). But is that even possible?\nKaren: but I suspect you’re having issues because you want to do something like [CODE]?\nPenni: Yes, exactly.\nKaren: I think a reasonable way to do that would be to make a syntax class that does the sorting\nPenni: Hmm. So how could a syntax class do that?\nPenni: Just a sec, I'll paste some code…\nKaren: [CODE_BLOCK]\nKaren: beware, I have only written this code, not compiled it\nKaren: in particular I’m not sure if that [CODE] part will correctly expose [CODE] and [CODE]\nPenni: So how do you write the function, passed to the topo-sort function, that accepts an element and returns its neighbors?\nKaren: hmm. I wouldn’t topo-sort that way, I’d use a partial order (a function of two args that returns [CODE])\nKaren: is there an implementation of topological sort somewhere in the stdlibs?\nPenni: This is way more than the minimal code to illustrate the problem, but hopefully the comments make the relevant bits salient.\nPenni: Yes, there's a topo sort right here: <[URL]\nKaren: if it were me I’d probably make my own implementation that accepted a partial order, since that way it’s impossible to accidentally have cycles\nPenni: The main problem, though, is just how to extract info from the syntax objects to process by arbitrary Racket code, as suggested here: <[URL] I figure this must be a pretty fundamental technique. I've been experimenting with functions like [CODE], but I haven't found how to pass data between the [CODE] world and the Racket world yet.\nKaren: ah, right - I think the issue there is that an expression like [CODE] throws away all the syntax attributes of [CODE], since those aren’t really something connected to the [CODE] identifier\nPenni: I hazily remember implementing a topo sort via partial order once, a long time ago. I'll think about applying it here. I do want to raise an error if there is a cycle.\nKaren: the [CODE] library just binds related identifiers like [CODE] using [CODE]\nPenni: I was wondering how attributes were connected to pattern variables. :wink:\nKaren: but the [CODE] form and [CODE] don’t know anything at all about that connection\nPenni: One idea I've been exploring, so far without success, is to make a list in [CODE] that places each name next to its parents, like this:\nKaren: so, what’s a nodeclass anyway?\nPenni: A nodeclass is a definition of a kind of node that can go into the graph that this program operates on. A nodeclass specifies values for attributes and rules for what kind of linking is allowed. Here are a couple illustrations. (A \"tagclass\" is just a nodeclass for nodes that describe other nodes.)\nPenni: The reason for the topological sort is to implement inheritance for nodeclasses.\nKaren: Penni You might have more luck making actual structs for your nodeclass and tagclass concepts and defining functions that construct and manipulate them. Then you could have macros that create those structs at compile time. That would be easier to do complex transformations on than raw syntax objects.\nPenni: Hmm, that's what the current version (the one I'm now rewriting) does, actually. (It keeps the nodeclass structs around during run-time and consults them for various things, which is probably not what you have in mind.) I was wondering if people do complex transformations right within [CODE], or, if not, how they generate code that does non-trivial rewriting of parts of the program like what happens in inheritance.\nKaren: I think there’s a wide variety of ways people do it. Macrology is far from a refined science. For especially complex compile-time transformations, I personally would create structs holding the pieces of syntax I’m transforming so I can implement the transformations with functions that are documented, tested, and provided from their own module that I import at compile time when I need it.\nPenni: Hmm, so are you thinking to structure the program something like this? 1. [CODE] to read the source code and generate structs. 2. Racket code to operate on the structs to do stuff like inheritance. 3. Another round of [CODE] to read the structs and generate code.\nKaren: I’m honestly not sure\nKaren: I suspect a good place to unify the structs and [CODE] would be syntax classes though\nKaren: since you can put the struct instances in a syntax class’s attributes\nPenni: I keep hearing how [CODE] makes it easy to whip out DSLs. I figure it's a matter of seeing how it's done on a variety of non-trivial examples.\nKaren: Yeah there is not a lot of guidance for complex DSLs\nPenni: Yeah, I've been having some success using syntax classes as \"subroutines\" that return \"multiple values\" through their attributes.\nPenni: Oh well, I was hoping that this was a simple DSL!\nPenni: I suppose that inheritance adds some non-trivial complexity. It's given me a headache in each version of this DSL that I've implemented. (Some were in Clojure before I switched to Racket.)\nKaren: hmm, maybe the nodeclass and tagclass things don’t need to be macros at all\nKaren: what is your program using them for?\nPenni: To unravel the mysteries of the mind. More precisely, to simulate human analogy-making in solving an arithmetic puzzle. But I'd like the same DSL to easily implement other, related computer models—called \"FARG models\" (for Fluid Analogy Research Group).\nKaren: this thing? <[URL]\nPenni: Yes.\nPenni: A better answer to your question is: to automate various kinds of matching of subgraphs and editing of the graph. For example, if the program \"notices\" that there's a [CODE] node and a [CODE] node, it might \"tag\" them with a [CODE] tag, which in turn could help trigger some other kind of match, eventually leading to solving the puzzle.\nKaren: huh, that kinda reminds me of RDF and OWL\nKaren: anyways, so this program is working with a graph and the program is allowed to add edges it thinks are interesting / useful to the graph - when is the program done? what’s the success state?\nPenni: FARG models try to simulate thought at a \"subcognitive\" level: psychological pressures pushing the system to explore this way or that way, somewhat different than the formal-logic style of semantic-web stuff. But in practice, sometimes the difference is not all that great. Anyway…\nKaren: Yeah it sounds much less directed\nKaren: (not a bad thing!)\nPenni: The program has to detect when it has solved the puzzle. Some versions just have some code that checks if there is a solution after every timestep. I think it's better to have detecting the solution be yet another thought process to simulate. Probably not too important, though. My main concern right now is just to get the DSL into good-enough shape that it's easy to try ideas.\nKaren: what’s the puzzle?\nPenni: If the nodeclasses weren't defined by macros, how might that work? (Tagclasses are nodeclasses with a [CODE] attribute set to [CODE].)\nKaren: I’m guessing the program is supposed to solve the puzzle in a very generic way that involves guessing at graphs of concepts of stuff, instead of some sort of algorithmic solution that’s very specialized to the kind of puzzle being solved\nPenni: In this FARG model, the puzzle is to figure out how to add, subtract, and/or multiply some given numbers to produce a target number. For example, given 6, 3, 4, and 5, make 32. Yes, the program is supposed to follow human-like heuristics, guessing at what looks promising, applying mathematical insight, maybe gaining some mathematical insight during the process.\nPenni: Something that I want to add pretty soon is some sort of logarithmic representation of the number line, to judge, say, that 32 is \"much bigger\" than the other numbers, which are all \"pretty close together\". This needs to be easy to add in the DSL. But right now, the main thing is just to get the linking right, so that code can look around to see what tags apply to what nodes, search its memory for similar situations, make adjustments to those memories to guide the current search—that sort of thing.\nKaren: is the idea of the [CODE] and [CODE] DSL to allow people to make their own models and puzzles? or is the DSL you’re making specialized to this arithmetic puzzle?\nPenni: I definitely want other people to be able to make their own FARG models with this DSL. Another grad student here has occasionally been pair-programming with me on it, hoping to apply it to model that he's planning to make. Also, there is a neat theoretical idea, where different parts of the graph form coalitions and compete or steal each other's nodes, which I want to try out. Really, the best way to think of this thing is that it's a test bench for experimenting with ideas for FARG models—hopefully without writing huge amounts of code. (Past FARG models have been 15,000 lines of Lisp or more.)\nPenni: Also, _I_ want to model some things aside from this puzzle, especially parsing of natural language and making simple mathematical proofs.\nKaren: I dunno what I’d do ¯\\_(ツ)_/¯\nPenni: Oh well! So, inheritance doesn't come up often in Racket DSLs?\nKaren: it sounds like a very complex domain that I have very little experience with so really any advice I can give would be based on generic practices I tend to follow, rather than stuff specialized to your use case\nPenni: Yeah, I don't think knowledge of the domain is really necessary. I'm just gunning for how to add inheritance to nodeclasses. Or more generally, how to extract info from syntax objects (like attributes of pattern variables), run it through Racket functions, and then generate code.\nKaren: A generic principle of mine that might be relevant: if I’m describing something with nouns, I like to reflect that language in code by defining a data type for that noun and then defining a library of operations on that noun. For example, if I’m working with things I’m calling graphs then there ought to be a [CODE] predicate and a library of [CODE] functions. So since you’re describing tools to build FARG models, I ask you: what’s a [CODE] value? What can you do to it? Is there a [CODE] function? A [CODE] expression that makes a model? If it were me, I’d think about those questions and then create a [CODE] collection with Scribble docs. Any DSLs I make ought to be things built _on top_ of this collection.\nKaren: so for inheritance and nodeclasses, I’d have to think about what a [CODE] object is\nKaren: no idea if that’s at all helpful to you though\nPenni: It sounds like we approach this the same way. I've got a [CODE] struct (in the new version now under construction, it's [CODE] since I just moved it to Typed Racket) with a whole bunch of functions to operate on it: making and removing nodes, finding neighbors, etc. Then there's [CODE], which provides a layer on top of [CODE]. [CODE] knows about nodeclasses and other elements of the spec. You can tell it to \"tag\" some nodes, ask it if some nodes have been tagged, ask if a node could be tagged with a certain (not yet created) tag, etc. There are some other things, too, involving a spreading-activation network and a network by which nodes support the continued existence of other nodes.\nKaren: So, tags\nKaren: what’s a [CODE] value?\nPenni: Each node has a bunch of attributes: just an arbitrary hash table. The nodeclass determines what those attributes are when the node is first created. If one of those attributes is [CODE] and its value is [CODE], then the node is a tag. The node/tag distinction is mostly how we think about them: tags describe other nodes (including other tags). A node's nodeclass also determines what it can link to, and its \"desiderata\": other elements of the graph that it wants to see built or maintained.\nPenni: Lexi.lambda led me to an idea earlier today: to make the spec macro generate a \"constructor\" function for each nodeclass. So, if the spec defined a nodeclass [CODE], you would get a function [CODE], that you could call, e.g. [CODE], and it would return something—the initial hash table of attributes, I think. That's very different from the current working version, where I've been threading the graph as the first argument through practically every function, and there's a general [CODE] function to which you pass the name of the class and its arguments (e.g. [CODE]), and it consults the nodeclass struct to figure out how to make the node's initial attributes.\nKaren: so this graph has hashes for nodes - what are edges? Are edges between nodes directed or labeled?\nPenni: Edges in this graph are unordered pairs of [CODE]. That is, you don't simply have an edge between two nodes, you have an edge between specific \"ports\" of two nodes. For example, a \"group\" node (a node that \"contains\" other nodes, like an equation) has a port called [CODE], and each of its members has a port called [CODE], and there is an edge connecting them.\nKaren: ah, I get that\nKaren: I think that’s equivalent to a graph with undirected labeled edges where an edge label is a [CODE]\nPenni: The spec also has some clauses that provide rules for which ports can link to which other ports. In previous versions, I've often had operator nodes, like [CODE], which have [CODE] and [CODE] ports. The [CODE] port can link to the [CODE] port of a number; a number's [CODE] port can link to an [CODE] port.\nPenni: Yes.\nKaren: So, [CODE] in the hypothetical graph API I’ve been meaning to create\nPenni: I believe so, yes.\nPenni: I've struggled with graph APIs a bunch myself! It's hard to be fully general without making everything painful.\nKaren: Strongly agreed\nPenni: Tags usually have a port called [CODE] and link to a port called [CODE], but not all tags work that way.\nKaren: so these nodes, I imagine there’s different node types and that the type determines what ports there are?\nPenni: Another lesson learned from experience in many programming languages: programming involving graphs is hard! Much harder than it seems like it ought to be.\nPenni: I've played a bit with making a tiny DSL to walk around a graph starting at a given node and collect nodes to operate on and maybe do something to them, but it's never been satisfactory.\nKaren: Yeah. I’ve really wanted to see a good immutable graphs library for racket that used the algebraic approach described in this blog post: <[URL]\nKaren: specifically, there’s an algebra of graphs described by the following components: - an _empty graph_ - the _overlay_ operator, which combines two graphs into a single graph with the nodes and edges of each but doesn’t add any edges - the _connect_ operator, which combines two graphs into a single graph and adds an edge from every node of the left graph to every node of the right graph - _singleton graphs_ which can be constructed from regular values by turning the value into a one-node graph with no edges\nKaren: the operators have some nice math properties and they’re a decent way to express how to build up an immutable graph\nPenni: The graphs in this program are immutable but the API has none of that algebraic elegance. It's mostly lots of code that looks like this:\nPenni: There's got to be a better way to do it, but at least for now, the graph representation is not the pain point. Right now, all the pain is in defining searching and matching—and, for the moment, converting the spec macro to generate Typed Racket.\nKaren: yup I’d definitely need scribble docs to make more sense of this :p\nPenni: Oh well, there goes my dream of writing readable, self-explanatory Racket code. :wink:\nKaren: the most readable Racket code is the code you never have to read because the API docs were enough :P\nPenni: I'm glad to hear that from someone with experience! I'd been getting that impression.\nKaren: (don’t worry that’s quite nice code, it’s just there’s lots of concepts involved that I’m totally unfamiliar with)\nKaren: So, searching and matching\nKaren: sounds like the domain of a [CODE] type\nPenni: Could be. I've got some hacked-up, hand-coded stuff that will probably get me to my next demo—if, that is, I can get my spec macro working again, now that I'm moving to Typed Racket.\nPenni: A lot of the matching should be done by the [CODE] clauses in the nodeclasses. We often just want to ask \"If we made a tag of class such-and-such, could it apply to these nodes? Yes? Then build it.\"\nPenni: The current working version has lots of rather bug-prone code that looks at [CODE] structs (and [CODE] structs and [CODE] structs and [CODE] structs …) to answer that question. Now that I know [CODE] a little better, I'm thinking that the macro should just generate a single function to answer it for each nodeclass. At compile-time, we already have all the information at hand, so hopefully that will be easier—and faster and less bug-prone.\nPenni: Now that I've come to see a little of the enormous power of [CODE], I'm a little surprised that it's not easy to do something like whip up a compile-time hash table of computed info or sort some doodads topologically for inheritance. Are we missing some easy way to operate on syntax objects?\nKaren: ¯\\_(ツ)_/¯\nKaren: There’s probably an easy way to do it but I’m not gonna be able to figure it out at 1AM with a distracted mind\nPenni: I know what you mean. My brain was out earlier tonight, though miraculously it seems to have woken up again.\nPenni: I think I'll experiment some more with the approach of making structs, sorting the structs, and then generating code from the structs. That seems to be what's hinted at on this page: <[URL]\nKaren: Good idea\nKaren: I think I’ll mess around with making a total / partial orders library and some graph and multiset APIs\nPenni: Is there some documentation somewhere that explains how those attributes of pattern variables are stored? That seems to be the main obstacle: the syntax objects don't actually contain their attributes, is that right?\nKaren: Right. But I do know you can extract the value of an attribute you know the name of using [CODE]\nPenni: Ohhhh. I didn't know you could do that. I'd been wondering how you can use [CODE] to get at something outside the current syntax class.\nPenni: Just had a thought: long ago, in Chez Scheme, I did icky stuff in [CODE] macros by calling [CODE] and [CODE] all over the place. So, that's always available as a fallback.\nKaren: when in doubt, destroy everything but the data inside the syntax object :p\nKaren: works every time (note: does not actually work every time)\nPenni: :wink:\nPenni: Yeah, I remember that code was painfully bug-prone.\nPenni: OK, here's something new. I made a new attribute for nodeclass: a struct called [CODE]. I put this test code in the \"top level\" (the [CODE] rather than a syntax class), and it makes this error message. How do you apply an ellipsis when you have a non-syntax-object attribute?\nKaren: ah, you can’t\nKaren: non-syntax attributes are _only_ useful with the [CODE] mechanism of extracting the attribute value\nKaren: in your case the [CODE] attribute is a list of syntax objects, but it is not itself a syntax object\nKaren: wait no I misread\nKaren: ah, now I see what you want\nPenni: OMG this seems to work:\nKaren: [CODE] works even if [CODE] is a repeated attribute\nKaren: yeah like that\nKaren: it gives you a list of attribute values\nPenni: This might be the answer!\nKaren: it works for arbitrary elipses depths too\nKaren: e.g. if you needed two elipses, then [CODE] would give you a list of lists\nPenni: Hallelujah! I've gotten lots of bruises fighting with [CODE] over how many ellipses I need.\nPenni: \"Just gimme a list of lists, will ya??\" Well, there it is. :slightly_smiling_face:\nKaren: finally, the magic easy approach is discovered :p\nCaprice: Is there any way I can get this to work without resorting to [CODE] ?\nPenni: Caprice I'm still pretty new to Typed Racket, but the example of [CODE] on this page makes me think that the [CODE] is necessary.\nCaprice: Penni I think you're right\nPenni: Karen Well, I got the topological sort to work. It remains to be seen if I can exploit that to actually inherit things while generating code. But now I'm taking a break!\nKaren: :tada: :tada: :tada:\nKaren: and for me it’s definitely time for sleep",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 136,
        "duration_minutes": 224.29,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "create",
          "implement",
          "must",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [
          "accepted",
          "agreed"
        ],
        "participants": [
          "Caprice",
          "Karen",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Caprice",
          "timestamp": "2019-03-07T01:26:34.407100",
          "text": "Cool!"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:28:36.408500",
          "text": "How can you do a topological sort on things defined within a `syntax-parse` macro? The topological sort itself hasn't been an obstacle for me (there's a library function that does it, for one thing). The difficulty has been pulling the syntax objects out of pattern variables to pass to the topological-sort function. I'd need to make a closure or something that accepts one pattern variable and returns its \"parent\" attribute(s). But is that even possible?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:29:40.409600",
          "text": "but I suspect you’re having issues because you want to do something like `foo.attr`?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:29:47.409800",
          "text": "Yes, exactly."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:30:12.410300",
          "text": "I think a reasonable way to do that would be to make a syntax class that does the sorting"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:30:48.410600",
          "text": "Hmm. So how could a syntax class do that?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:31:48.411700",
          "text": "Just a sec, I'll paste some code…"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:33:14.413100",
          "text": "```\n(define-syntax-class foo\n  #:attributes (attr1 attr2)\n  (pattern ...))\n\n(define-syntax-class foos\n  #:attributes ([sorted 1] [sorted.attr1 1] [sorted.attr2 1])\n  (pattern (unsorted:foo ...) #:with (sorted:foo ...) (topological-sort-ids #'(unsorted ...))))\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:33:28.413400",
          "text": "beware, I have only written this code, not compiled it"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:34:14.414300",
          "text": "in particular I’m not sure if that `#:with (sorted:foo ...)` part will correctly expose `sorted.attr1` and `sorted.attr2`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:34:41.414800",
          "text": "So how do you write the function, passed to the topo-sort function, that accepts an element and returns its  neighbors?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:36:34.415800",
          "text": "hmm. I wouldn’t topo-sort that way, I’d use a partial order (a function of two args that returns `(or/c '&lt; '&gt; '= '≠)`)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:36:59.416200",
          "text": "is there an implementation of topological sort somewhere in the stdlibs?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:39:32.416300",
          "text": "This is way more than the minimal code to illustrate the problem, but hopefully the comments make the relevant bits salient."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:39:59.416900",
          "text": "Yes, there's a topo sort right here: <https://docs.racket-lang.org/mischief/sort.html>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:43:57.419600",
          "text": "if it were me I’d probably make my own implementation that accepted a partial order, since that way it’s impossible to accidentally have cycles"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:44:17.420100",
          "text": "The main problem, though, is just how to extract info from the syntax objects to process by arbitrary Racket code, as suggested here: <https://docs.racket-lang.org/syntax/varied-meanings.html?q=~optional#%28part._.Non-syntax-valued_.Attributes%29>  I figure this must be a pretty fundamental technique. I've been experimenting with functions like `stx-&gt;list`, but I haven't found how to pass data between the `syntax-parse` world and the Racket world yet."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:45:26.421900",
          "text": "ah, right - I think the issue there is that an expression like `#'(foo …)` throws away all the syntax attributes of `foo`, since those aren’t really something connected to the `foo` identifier"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:45:34.422300",
          "text": "I hazily remember implementing a topo sort via partial order once, a long time ago. I'll think about applying it here. I do want to raise an error if there is a cycle."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:45:50.422800",
          "text": "the `syntax/parse` library just binds related identifiers like `foo.attr` using `with-syntax`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:46:00.423300",
          "text": "I was wondering how attributes were connected to pattern variables. :wink:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:46:06.423500",
          "text": "but the `(syntax ...)` form and `with-syntax` don’t know anything at all about that connection"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:48:13.424400",
          "text": "One idea I've been exploring, so far without success, is to make a list in `syntax-parse` that places each name next to its parents, like this:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T01:50:08.425000",
          "text": "so, what’s a nodeclass anyway?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:54:19.425100",
          "text": "A nodeclass is a definition of a kind of node that can go into the graph that this program operates on. A nodeclass specifies values for attributes and rules for what kind of linking is allowed. Here are a couple illustrations. (A \"tagclass\" is just a nodeclass for nodes that describe other nodes.)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T01:54:47.425700",
          "text": "The reason for the topological sort is to implement inheritance for nodeclasses."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:21:55.427000",
          "text": "<@Penni> You might have more luck making actual structs for your nodeclass and tagclass concepts and defining functions that construct and manipulate them. Then you could have macros that create those structs at compile time. That would be easier to do complex transformations on than raw syntax objects."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:29:00.429800",
          "text": "Hmm, that's what the current version (the one I'm now rewriting) does, actually. (It keeps the nodeclass structs around during run-time and consults them for various things, which is probably not what you have in mind.) I was wondering if people do complex transformations right within `syntax-parse`, or, if not, how they generate code that does non-trivial rewriting of parts of the program like what happens in inheritance."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:32:15.432100",
          "text": "I think there’s a wide variety of ways people do it. Macrology is far from a refined science. For especially complex compile-time transformations, I personally would create structs holding the pieces of syntax I’m transforming so I can implement the transformations with functions that are documented, tested, and provided from their own module that I import at compile time when I need it."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:33:55.433500",
          "text": "Hmm, so are you thinking to structure the program something like this?\n1. `syntax-parse` to read the source code and generate structs.\n2. Racket code to operate on the structs to do stuff like inheritance.\n3. Another round of `syntax-parse` to read the structs and generate code."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:34:26.433900",
          "text": "I’m honestly not sure"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:34:39.434400",
          "text": "I suspect a good place to unify the structs and `syntax-parse` would be syntax classes though"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:35:08.435000",
          "text": "since you can put the struct instances in a syntax class’s attributes"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:35:24.435400",
          "text": "I keep hearing how `syntax-parse` makes it easy to whip out DSLs. I figure it's a matter of seeing how it's done on a variety of non-trivial examples."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:35:52.436100",
          "text": "Yeah there is not a lot of guidance for complex DSLs"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:36:29.436700",
          "text": "Yeah, I've been having some success using syntax classes as \"subroutines\" that return \"multiple values\" through their attributes."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:36:54.437000",
          "text": "Oh well, I was hoping that this was a simple DSL!"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:37:47.437900",
          "text": "I suppose that inheritance adds some non-trivial complexity. It's given me a headache in each version of this DSL that I've implemented. (Some were in Clojure before I switched to Racket.)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:38:39.438900",
          "text": "hmm, maybe the nodeclass and tagclass things don’t need to be macros at all"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:38:47.439200",
          "text": "what is your program using them for?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:41:51.441000",
          "text": "To unravel the mysteries of the mind. More precisely, to simulate human analogy-making in solving an arithmetic puzzle. But I'd like the same DSL to easily implement other, related computer models—called \"FARG models\" (for Fluid Analogy Research Group)."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:42:47.441500",
          "text": "this thing? <https://cogsci.indiana.edu/research.html>"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:42:59.441800",
          "text": "Yes."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:45:04.444000",
          "text": "A better answer to your question is: to automate various kinds of matching of subgraphs and editing of the graph. For example, if the program \"notices\" that there's a `(number 4)` node and a `(number 17)` node, it might \"tag\" them with a `greater-than` tag, which in turn could help trigger some other kind of match, eventually leading to solving the puzzle."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:45:46.444300",
          "text": "huh, that kinda reminds me of RDF and OWL"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:47:53.446300",
          "text": "anyways, so this program is working with a graph and the program is allowed to add edges it thinks are interesting / useful to the graph - when is the program done? what’s the success state?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:48:55.447300",
          "text": "FARG models try to simulate thought at a \"subcognitive\" level: psychological pressures pushing the system to explore this way or that way, somewhat different than the formal-logic style of semantic-web stuff. But in practice, sometimes the difference is not all that great. Anyway…"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:49:17.447900",
          "text": "Yeah it sounds much less directed"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:49:27.448200",
          "text": "(not a bad thing!)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:50:46.449700",
          "text": "The program has to detect when it has solved the puzzle. Some versions just have some code that checks if there is a solution after every timestep. I think it's better to have detecting the solution be yet another thought process to simulate. Probably not too important, though. My main concern right now is just to get the DSL into good-enough shape that it's easy to try ideas."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:51:58.450500",
          "text": "what’s the puzzle?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:52:29.451300",
          "text": "If the nodeclasses weren't defined by macros, how might that work? (Tagclasses are nodeclasses with a `tag?` attribute set to `#t`.)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T02:53:10.452600",
          "text": "I’m guessing the program is supposed to solve the puzzle in a very generic way that involves guessing at graphs of concepts of stuff, instead of some sort of algorithmic solution that’s very specialized to the kind of puzzle being solved"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:55:16.454200",
          "text": "In this FARG model, the puzzle is to figure out how to add, subtract, and/or multiply some given numbers to produce a target number. For example, given 6, 3, 4, and 5, make 32. Yes, the program is supposed to follow human-like heuristics, guessing at what looks promising, applying mathematical insight, maybe gaining some mathematical insight during the process."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T02:59:29.457000",
          "text": "Something that I want to add pretty soon is some sort of logarithmic representation of the number line, to judge, say, that 32 is \"much bigger\" than the other numbers, which are all \"pretty close together\". This needs to be easy to add in the DSL. But right now, the main thing is just to get the linking right, so that code can look around to see what tags apply to what nodes, search its memory for similar situations, make adjustments to those memories to guide the current search—that sort of thing."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:00:52.457800",
          "text": "is the idea of the `tagclass` and `nodeclass` DSL to allow people to make their own models and puzzles? or is the DSL you’re making specialized to this arithmetic puzzle?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:03:57.460800",
          "text": "I definitely want other people to be able to make their own FARG models with this DSL. Another grad student here has occasionally been pair-programming with me on it, hoping to apply it to model that he's planning to make. Also, there is a neat theoretical idea, where different parts of the graph form coalitions and compete or steal each other's nodes, which I want to try out. Really, the best way to think of this thing is that it's a test bench for experimenting with ideas for FARG models—hopefully without writing huge amounts of code. (Past FARG models have been 15,000 lines of Lisp or more.)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:05:06.461700",
          "text": "Also, _I_ want to model some things aside from this puzzle, especially parsing of natural language and making simple mathematical proofs."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:06:09.461800",
          "text": "I dunno what I’d do ¯\\_(ツ)_/¯"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:06:30.462500",
          "text": "Oh well! So, inheritance doesn't come up often in Racket DSLs?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:06:45.462900",
          "text": "it sounds like a very complex domain that I have very little experience with so really any advice I can give would be based on generic practices I tend to follow, rather than stuff specialized to your use case"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:08:23.464600",
          "text": "Yeah, I don't think knowledge of the domain is really necessary. I'm just gunning for how to add inheritance to nodeclasses. Or more generally, how to extract info from syntax objects (like attributes of pattern variables), run it through Racket functions, and then generate code."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:13:40.469200",
          "text": "A generic principle of mine that might be relevant: if I’m describing something with nouns, I like to reflect that language in code by defining a data type for that noun and then defining a library of operations on that noun. For example, if I’m working with things I’m calling graphs then there ought to be a `graph?` predicate and a library of `graph-_` functions. So since you’re describing tools to build FARG models, I ask you: what’s a `farg-model?` value? What can you do to it? Is there a `(farg-model-query model query)` function? A `(farg-model ...)` expression that makes a model? If it were me, I’d think about those questions and then create a `(require farg-model)` collection with Scribble docs. Any DSLs I make ought to be things built _on top_ of this collection."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:14:12.469600",
          "text": "so for inheritance and nodeclasses, I’d have to think about what a `nodeclass?` object is"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:15:10.470200",
          "text": "no idea if that’s at all helpful to you though"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:20:08.474700",
          "text": "It sounds like we approach this the same way. I've got a `graph` struct (in the new version now under construction, it's `Graph` since I just moved it to Typed Racket) with a whole bunch of functions to operate on it: making and removing nodes, finding neighbors, etc. Then there's `model.rkt`, which provides a layer on top of `graph`. `model.rkt` knows about nodeclasses and other elements of the spec. You can tell it to \"tag\" some nodes, ask it if some nodes have been tagged, ask if a node could be tagged with a certain (not yet created) tag, etc. There are some other things, too, involving a spreading-activation network and a network by which nodes support the continued existence of other nodes."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:20:51.475500",
          "text": "So, tags"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:21:01.475900",
          "text": "what’s a `tag?` value?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:24:46.479400",
          "text": "Each node has a bunch of attributes: just an arbitrary hash table. The nodeclass determines what those attributes are when the node is first created. If one of those attributes is `'tag?` and its value is `#t`, then the node is a tag. The node/tag distinction is mostly how we think about them: tags describe other nodes (including other tags). A node's nodeclass also determines what it can link to, and its \"desiderata\": other elements of the graph that it wants to see built or maintained."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:28:27.483800",
          "text": "Lexi.lambda led me to an idea earlier today: to make the spec macro generate a \"constructor\" function for each nodeclass. So, if the spec defined a nodeclass `(number n)`, you would get a function `number`, that you could call, e.g. `(number 17)`, and it would return something—the initial hash table of attributes, I think. That's very different from the current working version, where I've been threading the graph as the first argument through practically every function, and there's a general `make-node` function to which you pass the name of the class and its arguments (e.g. `(make-node g 'number 17)`), and it consults the nodeclass struct to figure out how to make the node's initial attributes."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:28:55.484000",
          "text": "so this graph has hashes for nodes - what are edges? Are edges between nodes directed or labeled?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:31:19.485900",
          "text": "Edges in this graph are unordered pairs of `(,node ,port-label)`. That is, you don't simply have an edge between two nodes, you have an edge between specific \"ports\" of two nodes. For example, a \"group\" node (a node that \"contains\" other nodes, like an equation) has a port called `members`, and each of its members has a port called `member-of`, and there is an edge connecting them."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:32:49.487400",
          "text": "ah, I get that"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:33:32.488900",
          "text": "I think that’s equivalent to a graph with undirected labeled edges where an edge label is a `(pair/c port-label? port-label?)`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:33:53.489400",
          "text": "The spec also has some clauses that provide rules for which ports can link to which other ports. In previous versions, I've often had operator nodes, like `+`, which have `result` and `operand` ports. The `result` port can link to the `source` port of a number; a number's `result` port can link to an `operand` port."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:34:10.489600",
          "text": "Yes."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:35:17.490600",
          "text": "So, `(multigraph/c node? (pair/c port-label? port-label?) #:directed? #f)` in the hypothetical graph API I’ve been meaning to create"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:35:36.490800",
          "text": "I believe so, yes."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:36:09.491400",
          "text": "I've struggled with graph APIs a bunch myself! It's hard to be fully general without making everything painful."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:37:04.492200",
          "text": "Strongly agreed"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:37:19.492500",
          "text": "Tags usually have a port called `tagged` and link to a port called `tags`, but not all tags work that way."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:38:04.493500",
          "text": "so these nodes, I imagine there’s different node types and that the type determines what ports there are?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:38:22.493800",
          "text": "Another lesson learned from experience in many programming languages: programming involving graphs is hard! Much harder than it seems like it ought to be."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:39:09.495200",
          "text": "I've played a bit with making a tiny DSL to walk around a graph starting at a given node and collect nodes to operate on and maybe do something to them, but it's never been satisfactory."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:39:12.495300",
          "text": "Yeah. I’ve really wanted to see a good immutable graphs library for racket that used the algebraic approach described in this blog post: <https://blogs.ncl.ac.uk/andreymokhov/an-algebra-of-graphs/>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:41:30.497500",
          "text": "specifically, there’s an algebra of graphs described by the following components:\n\n- an _empty graph_\n- the _overlay_ operator, which combines two graphs into a single graph with the nodes and edges of each but doesn’t add any edges\n- the _connect_ operator, which combines two graphs into a single graph and adds an edge from every node of the left graph to every node of the right graph\n- _singleton graphs_ which can be constructed from regular values by turning the value into a one-node graph with no edges"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:42:11.498100",
          "text": "the operators have some nice math properties and they’re a decent way to express how to build up an immutable graph"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:45:36.499200",
          "text": "The graphs in this program are immutable but the API has none of that algebraic elegance. It's mostly lots of code that looks like this:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:48:02.501300",
          "text": "There's got to be a better way to do it,  but at least for now, the graph representation is not the pain point. Right now, all the pain is in defining searching and matching—and, for the moment, converting the spec macro to generate Typed Racket."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:48:13.501500",
          "text": "yup I’d definitely need scribble docs to make more sense of this :p"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:48:38.502400",
          "text": "Oh well, there goes my dream of writing readable, self-explanatory Racket code. :wink:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:49:00.503100",
          "text": "the most readable Racket code is the code you never have to read because the API docs were enough :P"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:49:21.503700",
          "text": "I'm glad to hear that from someone with experience! I'd been getting that impression."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:49:34.504000",
          "text": "(don’t worry that’s quite nice code, it’s just there’s lots of concepts involved that I’m totally unfamiliar with)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:50:07.504200",
          "text": "So, searching and matching"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T03:50:20.504500",
          "text": "sounds like the domain of a `graph-query?` type"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:51:16.505500",
          "text": "Could be. I've got some hacked-up, hand-coded stuff that will probably get me to my next demo—if, that is, I can get my spec macro working again, now that I'm moving to Typed Racket."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:52:36.506800",
          "text": "A lot of the matching should be done by the `applies-to` clauses in the nodeclasses. We often just want to ask \"If we made a tag of class such-and-such, could it apply to these nodes? Yes? Then build it.\""
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:55:40.509700",
          "text": "The current working version has lots of rather bug-prone code that looks at `nodeclass` structs (and `applies-to` structs and `taggee-info` structs and `by-ports` structs …) to answer that question. Now that I know `syntax-parse` a little better, I'm thinking that the macro should just generate a single function to answer it for each nodeclass. At compile-time, we already have all the information at hand, so hopefully that will be easier—and faster and less bug-prone."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T03:57:12.510500",
          "text": "Now that I've come to see a little of the enormous power of `syntax-parse`, I'm a little surprised that it's not easy to do something like whip up a compile-time hash table of computed info or sort some doodads topologically for inheritance. Are we missing some easy way to operate on syntax objects?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:03:16.510800",
          "text": "¯\\_(ツ)_/¯"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:04:12.511800",
          "text": "There’s probably an easy way to do it but I’m not gonna be able to figure it out at 1AM with a distracted mind"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:04:43.512400",
          "text": "I know what you mean. My brain was out earlier tonight, though miraculously it seems to have woken up again."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:06:10.513400",
          "text": "I think I'll experiment some more with the approach of making structs, sorting the structs, and then generating code from the structs. That seems to be what's hinted at on this page: <https://docs.racket-lang.org/syntax/varied-meanings.html>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:06:41.513600",
          "text": "Good idea"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:07:10.514700",
          "text": "I think I’ll mess around with making a total / partial orders library and some graph and multiset APIs"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:07:41.515300",
          "text": "Is there some documentation somewhere that explains how those attributes of pattern variables are stored? That seems to be the main obstacle: the syntax objects don't actually contain their attributes, is that right?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:08:23.515900",
          "text": "Right. But I do know you can extract the value of an attribute you know the name of using `(attribute foo.attr)`"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:09:35.516600",
          "text": "Ohhhh. I didn't know you could do that. I'd been wondering how you can use `attribute` to get at something outside the current syntax class."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:11:09.517700",
          "text": "Just had a thought: long ago, in Chez Scheme, I did icky stuff in `syntax-case` macros by calling `syntax-&gt;datum` and `datum-&gt;syntax` all over the place. So, that's always available as a fallback."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:12:38.518300",
          "text": "when in doubt, destroy everything but the data inside the syntax object :p"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:12:56.518700",
          "text": "works every time (note: does not actually work every time)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:13:49.518900",
          "text": ":wink:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:14:18.519200",
          "text": "Yeah, I remember that code was painfully bug-prone."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:21:28.519300",
          "text": "OK, here's something new. I made a new attribute for nodeclass: a struct called `sortable`. I put this test code in the \"top level\" (the `syntax-parse` rather than a syntax class), and it makes this error message. How do you apply an ellipsis when you have a non-syntax-object attribute?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:24:54.519700",
          "text": "ah, you can’t"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:25:16.520400",
          "text": "non-syntax attributes are _only_ useful with the `(attribute nc.sortable)` mechanism of extracting the attribute value"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:26:00.520800",
          "text": "in your case the `topo` attribute is a list of syntax objects, but it is not itself a syntax object"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:26:25.521200",
          "text": "wait no I misread"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:26:37.521500",
          "text": "ah, now I see what you want"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:26:52.521900",
          "text": "OMG this seems to work:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:26:58.522300",
          "text": "`(attribute nc.sortable)` works even if `nc.sortable` is a repeated attribute"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:27:00.522600",
          "text": "yeah like that"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:27:08.523000",
          "text": "it gives you a list of attribute values"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:27:17.523300",
          "text": "This might be the answer!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:27:31.523600",
          "text": "it works for arbitrary elipses depths too"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:27:48.524200",
          "text": "e.g. if you needed two elipses, then `(attribute foo.attr)` would give you a list of lists"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:28:15.524700",
          "text": "Hallelujah! I've gotten lots of bruises fighting with `syntax-parse` over how many ellipses I need."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:28:39.525100",
          "text": "\"Just gimme a list of lists, will ya??\" Well, there it is. :slightly_smiling_face:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T04:29:16.525600",
          "text": "finally, the magic easy approach is discovered :p"
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-07T04:36:55.526400",
          "text": "Is there any way I can get this to work without resorting to `(inst ident-class Number)` ?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T04:48:42.527900",
          "text": "<@Caprice> I'm still pretty new to Typed Racket, but the example of `cons%` on this page makes me think that the `inst` is necessary."
        },
        {
          "user": "Caprice",
          "timestamp": "2019-03-07T05:06:56.528300",
          "text": "<@Penni> I think you're right"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-07T05:08:49.528400",
          "text": "<@Karen> Well, I got the topological sort to work. It remains to be seen if I can exploit that to actually inherit things while generating code. But now I'm taking a break!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T05:10:40.529000",
          "text": ":tada: :tada: :tada:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-07T05:10:51.529300",
          "text": "and for me it’s definitely time for sleep"
        }
      ]
    },
    {
      "conversation_id": "265",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leonila: Hey! I'm trying to update the wrapper for libsodium (the crypto library)\nLeonila: and I'm seeing a consistent issue with the return code being -1\nLeonila: And I'm trying to track down if it's in the FFI or if it's in my usage of libsodium\nLeonila: Can someone eyeball this definition for generichash\nLeonila: [CODE_BLOCK]\nJeanine: Leonila libsodium defines [CODE] as a function, not a constant, so you need to apply it in the two places it appears above (or use the constant [CODE], if you've defined it). But I also recommend looking at the [CODE] package, which provides access to much of libsodium, including BLAKE2b (the algorithm implemented by [CODE]).\nLeonila: Jeanine interesting, the lower cased version worked for me but the uppercase version didn't.\nLeonila: [CODE_BLOCK]\nJeanine: That's a pretty implausible hash output length. How was crypto_generichash_bytes defined?\nLeonila: (define-sodium crypto_generichash_bytes _int)\nLeonila: You're right though... that's weird\nJeanine: The declaration in [CODE] is [CODE]. So the wrapper should define it as a function: [CODE]. Defining it with [CODE] just takes the lower 32 bits of the function's address.\nLeonila: :+1::+1:\nLeonila: Thank you, that makes sense, I thought it was being exported as a context.\nLeonila: *constant\nLeonila: Cheers!\nMai: Just want to be sure. Is [CODE] equivalent to [CODE] with literal-sets being [CODE]?\nJulia: Leonila I wasn't sure if you noticed Jeanine had pointed out the [CODE] Racket package? <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 18,
        "duration_minutes": 396.18,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeanine",
          "Julia",
          "Leonila",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T06:57:26.529900",
          "text": "Hey! I'm trying to update the wrapper for libsodium (the crypto library)"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T06:57:37.530300",
          "text": "and I'm seeing a consistent issue with the return code being -1"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T06:57:54.530700",
          "text": "And I'm trying to track down if it's in the FFI  or if it's in my usage of libsodium"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T06:58:01.531100",
          "text": "Can someone eyeball this definition for generichash"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T06:58:23.531500",
          "text": "```\n(define sodium-ffi (ffi-lib \"/usr/local/lib/libsodium.so\"))\n\n(define-ffi-definer define-sodium sodium-ffi)\n(define-sodium crypto_generichash (_fun (output : (_bytes o crypto_generichash_bytes))\n                                        (_size = crypto_generichash_bytes)\n                                        (input : _bytes)\n                                        (_llong = (bytes-length input))\n                                        (key : _bytes)\n                                        (_size = (if (not key) 0 (bytes-length key))) -&gt; (r : _int) -&gt; (values r output)))\n```"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-07T09:19:25.535300",
          "text": "<@Leonila> libsodium defines `crypto_generichash_bytes` as a function, not a constant, so you need to apply it in the two places it appears above (or use the constant `crypto_generichash_BYTES`, if you've defined it). But I also recommend looking at the `crypto` package, which provides access to much of libsodium, including BLAKE2b (the algorithm implemented by `crypto_generichash`)."
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T11:06:22.538800",
          "text": "<@Jeanine> interesting, the lower cased version worked for me but the uppercase version didn't."
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T11:06:27.539000",
          "text": "```\n&gt; crypto_generichash_bytes\n8376\n&gt; \n```"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-07T11:08:38.539800",
          "text": "That's a pretty implausible hash output length. How was crypto_generichash_bytes defined?"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T12:02:07.540100",
          "text": "(define-sodium crypto_generichash_bytes _int)"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T12:03:54.540300",
          "text": "You're right though... that's weird"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-07T12:06:54.541900",
          "text": "The declaration in `sodium/crypto_generichash.h` is `size_t  crypto_generichash_bytes(void);`. So the wrapper should define it as a function: `(define-sodium crypto_generichash_bytes (_fun -&gt; _size))`. Defining it with `_int` just takes the lower 32 bits of the function's address."
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T12:08:02.542200",
          "text": ":+1::+1:"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T12:08:13.542500",
          "text": "Thank you, that makes sense, I thought it was being exported as a context."
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T12:08:16.542700",
          "text": "*constant"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-07T12:08:23.542900",
          "text": "Cheers!"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-07T13:31:44.544800",
          "text": "Just want to be sure. Is `kernel-syntax-case/phase stx i ...` equivalent to `syntax-parse` with literal-sets being `([kernel-literals #:phase i])`?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-07T13:33:37.545600",
          "text": "<@Leonila> I wasn't sure if you noticed <@Jeanine> had pointed out the `crypto` Racket package? <https://docs.racket-lang.org/crypto/index.html>"
        }
      ]
    },
    {
      "conversation_id": "266",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Hello everyone! I sent a question on SO about a somehow complex macro question: <[URL] I found a solution, but I wonder if there's a better way to do what I'm doing (correctly handling syntax-classes used in ~optional). Do you mind taking a look? :slightly_smiling_face:\nKami: Elin Thanks for your awesome answer :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 52.62,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-07T09:36:50.537400",
          "text": "Hello everyone! I sent a question on SO about a somehow complex macro question: <https://stackoverflow.com/questions/55045447/how-to-access-syntax-class-attributes-in-optional-that-contains-ellipsis>\nI found a solution, but I wonder if there's a better way to do what I'm doing (correctly handling syntax-classes used in ~optional).\nDo you mind taking a look? :slightly_smiling_face:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-07T10:29:27.538000",
          "text": "<@Elin> Thanks for your awesome answer :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "267",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Not necessarily to discourage you from making your own wrapper, and perhaps another package. Well... maybe to discourage you a _little_ bit. :smile: I wonder if it's a domain where we'd all benefit from more eyeballs on one thing. ¯\\_(ツ)_/¯\nMarcelina: Clarinda Is there any reason that Racket's opengl context (the one for [CODE]) doesn't use glew at all?\nMarcelina: I was asked this and I didn't really have an answer.\nMarcelina: (Basically, the opengl context doesn't seem to work on windows 64 bit with an intel graphics card)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 54.93,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-07T13:35:08.546800",
          "text": "Not necessarily to discourage you from making your own wrapper, and perhaps another package.\nWell... maybe to discourage you a _little_ bit. :smile:\nI wonder if it's a domain where we'd all benefit from more eyeballs on one thing. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-07T14:29:05.547700",
          "text": "<@Clarinda> Is there any reason that Racket's opengl context (the one for `canvas%`) doesn't use glew at all?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-07T14:29:27.548200",
          "text": "I was asked this and I didn't really have an answer."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-07T14:30:04.548800",
          "text": "(Basically, the opengl context doesn't seem to work on windows 64 bit with an intel graphics card)"
        }
      ]
    },
    {
      "conversation_id": "268",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: No reason, other than me not knowing about GLEW",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-07T15:33:44.549400",
          "text": "No reason, other than me not knowing about GLEW"
        }
      ]
    },
    {
      "conversation_id": "269",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: Why does HTML generated by scribble look like the old-timey racket documentation and not the lovely current version?\nLoma: I guess you are using [CODE] now and the ‘lovely current version’ you mean probably refers to the style used by current Racket documentation: <[URL] Use [CODE] to get the same L&amp;F used by Racket Documentation.\nLeticia: actually I’m using [CODE]\nLoma: [CODE_BLOCK] may work for you. However, since you just want a better css style, I feel replacing the content of [CODE] is the best way to do this.\nKaren: alas I no longer have the code I used to restrict it to the first words only",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 3036.88,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Leticia",
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-07T20:00:47.553800",
          "text": "Why does HTML generated by scribble look like the old-timey racket documentation and not the lovely current version?"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-07T21:47:13.554000",
          "text": "I guess you are using `scribble/base` now and the ‘lovely current version’ you mean probably refers to the style used by current Racket documentation:\n<https://docs.racket-lang.org/index.html>\nUse `scribble/manual` to get the same L&amp;F used by Racket Documentation."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-07T22:22:30.554500",
          "text": "actually I’m using `scribble/lp2`"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-07T22:40:28.555200",
          "text": "```\n#lang scribble/manual\n@(require scribble/lp2)\n```\nmay work for you. However, since you just want a better css style, I feel replacing the content of `scribble.css` is the best way to do this."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-09T22:37:40.559100",
          "text": "alas I no longer have the code I used to restrict it to the first words only"
        }
      ]
    },
    {
      "conversation_id": "270",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Terry So it’s not in any sort of refined state, but this is the code I used to get the most common words in [CODE] identifiers: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-09T22:35:54.558800",
          "text": "<@Terry> So it’s not in any sort of refined state, but this is the code I used to get the most common words in `racket/base` identifiers: <https://github.com/jackfirth/rebellion/pull/54>"
        }
      ]
    },
    {
      "conversation_id": "271",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: Is there a way in XREPL to say \"Recompile and reload all source files that have changed since they were last loaded,\" the same as Ctrl-E, Ctrl-R in DrRacket?\nJulia: Penni I believe if you [CODE] one of the files, it will reload all of the files directly or transitively [CODE]d by the first one?\nJulia: I think [CODE] is the closest thing to the *Run* command in DrRacket.\nPenni: Julia Ah, thanks! I didn't know that.\nPenni: Hooray! The errortrace in XREPL shows the line number of the rackunit test that failed.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 774.32,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-03-10T11:32:07.560700",
          "text": "Is there a way in XREPL to say \"Recompile and reload all source files that have changed since they were last loaded,\" the same as Ctrl-E, Ctrl-R in DrRacket?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-10T21:06:53.563500",
          "text": "<@Penni> I believe if you `,enter` one of the files, it will reload all of the files directly or transitively `require`d by the first one?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-10T21:08:27.564100",
          "text": "I think `,enter` is the closest thing to the *Run* command in DrRacket."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-11T00:17:02.565000",
          "text": "<@Julia> Ah, thanks! I didn't know that."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-11T00:26:26.565600",
          "text": "Hooray! The errortrace in XREPL shows the line number of the rackunit test that failed."
        }
      ]
    },
    {
      "conversation_id": "272",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: In the terminal - or in emacs?\nPenni: Priscila In the terminal.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 349.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Penni",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-10T13:43:23.561000",
          "text": "In the terminal - or in emacs?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-10T19:32:41.561400",
          "text": "<@Priscila> In the terminal."
        }
      ]
    },
    {
      "conversation_id": "273",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: This will work [CODE_BLOCK]\nLillian: That’s how I made <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.33,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-10T23:11:10.564300",
          "text": "This will work\n```\n#lang scribble/lp2\n@(require scribble/manual)\n```"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-10T23:11:30.564500",
          "text": "That’s how I made <https://docs.racket-lang.org/pollen-tfl/>"
        }
      ]
    },
    {
      "conversation_id": "274",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: is it possible to define metafunctions and judgement forms in [CODE] that work in any language?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-11T19:13:41.568600",
          "text": "is it possible to define metafunctions and judgement forms in `redex` that work in any language?"
        }
      ]
    },
    {
      "conversation_id": "275",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: is it possible to produce pdf version of slides using [CODE], like _scribble_?:thinking_face:\nKristeen: Loma, see the various printing options to the [CODE] command\nLoma: Oh sure! Sorry for not reading the full manual before asking :grimacing:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 6.7,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-03-11T21:20:17.569800",
          "text": "is it possible to produce pdf version of slides using `#lang slideshow`, like _scribble_?:thinking_face:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-11T21:24:49.570200",
          "text": "<@Loma>, see the various printing options to the `slideshow` command"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-11T21:26:59.570900",
          "text": "Oh sure! Sorry for not reading the full manual before asking :grimacing:"
        }
      ]
    },
    {
      "conversation_id": "276",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sean: Loma, I had to laugh. The Scribble manual is not too long, true, but sometimes docs are Bible-length, and I was imagining someone asking a Bible-related question and then apologizing, “Sorry for not reading the full Bible before asking.” I’m sure your question helped someone who did not already know the answer. The Racket community is by far the friendliest and most helpful technology community I’ve encountered.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Sean"
        ]
      },
      "timeline": [
        {
          "user": "Sean",
          "timestamp": "2019-03-12T07:14:26.573800",
          "text": "<@Loma>, I had to laugh. The Scribble manual is not too long, true, but sometimes docs are Bible-length, and I was imagining someone asking a Bible-related question and then apologizing, “Sorry for not reading the full Bible before asking.”  I’m sure your question helped someone who did not already know the answer.  The Racket community is by far the friendliest and most helpful technology community I’ve encountered."
        }
      ]
    },
    {
      "conversation_id": "277",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: These days the question isn't \"can I\" but \"how do I\".\nLauryn: A quick question here and thanks in advance for possible help! Is there any way in DrRacket that [CODE] and [CODE] could be distinguished in different colors? Like in Elixir or any other languages. Thank you!\nPriscila: I don't think so. In DrRacket find \"Preferences...\" in the \"DrRacket\" menu. Then click the tab \"Colors\".\nPriscila: You can now see what's possible to change.\nPriscila: Note also that colors change after clicking the \"Check Syntax\" icon (upper right corner: check mark+looking glass).\nPriscila: Then you can hover over an identifier and see arrows that show the binding.\nClarinda: I don’t think so. A common strategy (which you’ve probably already considered) is to parameterize over the language with a macro.\nLauryn: Hah! This is actually cool Priscila Thanks a lot!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 45.35,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Lauryn",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T08:20:39.574600",
          "text": "These days the question isn't \"can I\" but \"how do I\"."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-03-12T08:33:40.578100",
          "text": "A quick question here and thanks in advance for possible help!\n\nIs there any way in DrRacket that `FunctionName` and `InputName` could be distinguished in different colors?  Like in Elixir or any other languages.\n\nThank you!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T08:37:07.579400",
          "text": "I don't think so. In DrRacket find \"Preferences...\" in the \"DrRacket\" menu. Then click the tab \"Colors\"."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T08:37:27.579700",
          "text": "You can now see what's possible to change."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T08:38:01.580400",
          "text": "Note also that colors change after clicking the \"Check Syntax\" icon (upper right corner: check mark+looking glass)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T08:38:21.580900",
          "text": "Then you can hover over an identifier and see arrows that show the binding."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-12T08:39:27.581000",
          "text": "I don’t think so. A common strategy (which you’ve probably already considered) is to parameterize over the language with a macro."
        },
        {
          "user": "Lauryn",
          "timestamp": "2019-03-12T09:06:00.581800",
          "text": "Hah! This is actually cool <@Priscila> Thanks a lot!"
        }
      ]
    },
    {
      "conversation_id": "278",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mauro: I'm curious about why [CODE] doesn't support individually defined defaults for struct fields? As far as I can tell the only option is to use [CODE] and the corresponding [CODE] which unfortunately doesn't quite do what I want to be able to do. I'd like to be able to do something like [CODE_BLOCK] Am I completely out of luck?\nKristeen: Mauro you can use one of several packages that provide abstractions over [CODE]\nMauro: ok, my issue now is that I'm constrained to using just pre-base and available modules in [CODE] I'll think of something\nKristeen: in that case you're out of luck -- the underlying [CODE] is constrained that way\nKristeen: I would just write a constructor that does what you want\nMauro: yeah that's what I'm thinking as well, thanks\nKaren: Kristeen why was the [CODE] feature originally introduced? the feature seems kind of bizarre",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 56.62,
        "contains_question": true,
        "action_keywords": [
          "action",
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Kristeen",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Mauro",
          "timestamp": "2019-03-12T12:03:08.584600",
          "text": "I'm curious about why `struct` doesn't support individually defined defaults for struct fields? As far as I can tell the only option is to use `#:auto` and the corresponding `#:auto-value` which unfortunately doesn't quite do what I want to be able to do.\n\nI'd like to be able to do something like\n\n```(struct a (b c [d #:default 'hi]) #:transparent)\n\n(define test1 (a 1 2)) -&gt; (a 1 2 'hi)\n(define test2 (a 1 2 'hello)) -&gt; (a 1 2 'hello)```\n\nAm I completely out of luck?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-12T12:04:20.585100",
          "text": "<@Mauro> you can use one of several packages that provide abstractions over `struct`"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-12T12:05:08.585900",
          "text": "ok, my issue now is that I'm constrained to using just pre-base and available modules in `racket/private` I'll think of something"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-12T12:05:53.586400",
          "text": "in that case you're out of luck -- the underlying `make-struct-type` is constrained that way"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-12T12:06:02.586700",
          "text": "I would just write a constructor that does what you want"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-12T12:06:16.587000",
          "text": "yeah that's what I'm thinking as well, thanks"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-12T12:59:45.589100",
          "text": "<@Kristeen> why was the `#:auto` feature originally introduced? the feature seems kind of bizarre"
        }
      ]
    },
    {
      "conversation_id": "279",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: It's an old feature. It's present in PLT Scheme 372: <[URL] (page 30)\nKaren: how old is that?\nPriscila: It's not present in PLT Scheme 103 (from year 2000).\nPriscila: It's in PLT Scheme 200 from 2002. <[URL]\nPriscila: To the archives! <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 3.07,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T13:03:21.589700",
          "text": "It's an old feature. It's present in PLT Scheme 372: <http://download.plt-scheme.org/doc/372/pdf/mzscheme.pdf> (page 30)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-12T13:04:16.590000",
          "text": "how old is that? "
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T13:04:47.590500",
          "text": "It's not present in PLT Scheme 103 (from year 2000)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T13:05:35.591000",
          "text": "It's in PLT Scheme 200 from 2002. <http://download.plt-scheme.org/doc/200/html/mzscheme/mzscheme-Z-H-4.html#%_sec_4.3>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-12T13:06:25.591200",
          "text": "To the archives! <http://www.cs.utah.edu/plt/mailarch/>"
        }
      ]
    },
    {
      "conversation_id": "280",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Clarinda &amp; Alden, I think that Danny and I found a bug in either [CODE] or the contract library: <[URL]\nMarcelina: None\nMarcelina: (It doesn't have to be [CODE], anything that uses [CODE] seems to have the same bug.\nAlden: Not sure what’s going on, but this one doesn’t do it:\nAlden: [CODE_BLOCK]\nMarcelina: The [CODE] needs to be in both the lift and directly in the macro. So this one does do it:\nMarcelina: [CODE_BLOCK]\nMarcelina: (The difference being the second to last line: [CODE_BLOCK])\nAlden: I see.\nAlden: might be a bug in this function:\nAlden: <[URL]\nDanny: The direct output gets expanded first and lifts something to do variable-reference-&gt;module-source; the lifted output is expanded later and uses a cached reference to that same lift, but to a definition that ends up appearing lower in the module.\nAlden: that does indeed sound like a bug in the linked function.\nAlden: maybe\nAlden: in any case, the code I linked to is what is managing the cache you mention\nMarcelina: Alden YUp, and looks like it converts the identifiers in the source to the lifted varients, yes?\nMarcelina: variants*\nAlden: Oh, I think I get it. Maybe. But I don’t see how to fix it.\nDanny: I’m not sure how to fix it without either 1. giving up on caching or 2. changing the rules for lifts. The basic assumption that lifts introduced by expressions that expand earlier will execute earlier is wrong.\nDanny: I could imagine the expansion of lifts being different, such that the lifted expression is expanded immediately instead of delayed, but I don’t know how much other code that might break.\nAlden: that sounds like a scary change\nAlden: I think it would be okay if the macro just got a little more information and then used two different entries in the cache for these two situations (lifted vs not) somehow\nAlden: The goal of this lifting is to avoid creating wrappers multiple times for some given export (say [CODE]) that is used many times in a single module.\nAlden: So having some number of wrappers proportional to the number of times lifts are invoked inside lifts would be fine, I presume\nMarcelina: Honestly, it seems to me like caching 'should' be fine. Is there any reason why [CODE] can't do a binding dependency walk to see what order things should go in?\nAlden: that’d be easier for me. :wink:\nMarcelina: lol\nAlden: But it doesn’t sound like the kind of thing we might expect the macro system to do.\nAlden: Not that I’m an expert here\nMarcelina: Although honestly Alden I would much prefer to have a cache lift. Making a new lift whenever an identifier that uses a contract is used is....well seems inefficient.\nMarcelina: Fair. I would probably defer to Danny or Clarinda here, as they know way more than me. :slightly_smiling_face:\nAlden: I don’t think that this particular inefficiency is going to matter in practice. But if you see somewhere where people are lifting inside lifts that lift inside lifts etc etc etc and use contracts and those contracts are creating too many wrappers, then lets figure out a better way. (Or if it isn’t possible to communicate something that could be used as suitable key.)\nDanny: Looks like the expansion of lifts is delayed so that [CODE] can exist.\nMarcelina: Err...I have been known to write macros that are hairy enough to do that. :confused:\nMarcelina: (I mean, I don't want to write lifts in lifts....But sometimes there isn't any other way)\nDanny: And I don’t see a way for the contract macros to figure out whether they’re inside a syntax-local-lift-expression or not.\nDanny: The syntax-local-context is ’expression.\nDanny: The syntax-local-lift-context isn’t changed.\nAlden: Add [CODE] that is like [CODE] but might return something with a natural inside?\nAlden: (well, the name is a bit on the short side for my taste, so maybe that’s not a good idea :wink:)\nMarcelina: lol....also eww.....but mostly lol.\nMarcelina: You're right, the problem is that the name needs to be roughly 10x longer.\nMarcelina: That is certainly an interesting idea though.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 43,
        "duration_minutes": 28.88,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Danny",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:02:42.592300",
          "text": "<@Clarinda> &amp; <@Alden>, I think that <@Danny> and I found a bug in either `syntax-local-lift-expression` or the contract library: <https://gist.github.com/LeifAndersen/5edd52dd2a6e4b1d5a116790ddf1add2>"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:02:43.592400",
          "text": "None"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:03:07.593100",
          "text": "(It doesn't have to be `pict`, anything that uses `contra t-out` seems to have the same bug."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:04:58.593400",
          "text": "Not sure what’s going on, but this one doesn’t do it:"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:05:01.593700",
          "text": "```#lang racket\n\n(module m racket/base\n  (require racket/contract)\n  (provide (contract-out [x any/c]))\n  (define x 1))\n\n(require (submod \".\" m))\n(define-syntax (m stx)  \n  #`(list #,(syntax-local-lift-expression #'x)))\n(#%expression (m))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:07:05.594300",
          "text": "The `x` needs to be in both the lift and directly in the macro. So this one does do it:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:07:16.594500",
          "text": "```\n#lang racket\n\n(module m racket/base\n  (require racket/contract)\n  (provide (contract-out [x any/c]))\n  (define x 1))\n\n(require (submod \".\" m))\n(define-syntax (m stx)  \n  #`(list x #,(syntax-local-lift-expression #'x)))\n(#%expression (m))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:07:44.595000",
          "text": "(The difference being the second to last line: ```  #`(list x #,(syntax-local-lift-expression #'x)))```)"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:08:00.595300",
          "text": "I see."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:08:58.596400",
          "text": "might be a bug in this function:"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:08:59.596600",
          "text": "<https://github.com/racket/racket/blob/master/racket/collects/racket/contract/private/provide.rkt#L156>"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T15:09:47.597100",
          "text": "The direct output gets expanded first and lifts something to do variable-reference-&gt;module-source; the lifted output is expanded later and uses a cached reference to that same lift, but to a definition that ends up appearing lower in the module."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:10:21.597500",
          "text": "that does indeed sound like a bug in the linked function."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:10:30.597700",
          "text": "maybe"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:11:35.598300",
          "text": "in any case, the code I linked to is what is managing the cache you mention"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:12:15.599300",
          "text": "<@Alden> YUp, and looks like it converts the identifiers in the source to the lifted varients, yes?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:12:18.599500",
          "text": "variants*"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:14:32.600600",
          "text": "Oh, I think I get it. Maybe. But I don’t see how to fix it."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T15:15:28.601200",
          "text": "I’m not sure how to fix it without either 1. giving up on caching or 2. changing the rules for lifts. The basic assumption that lifts introduced by expressions that expand earlier will execute earlier is wrong."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T15:16:12.602000",
          "text": "I could imagine the expansion of lifts being different, such that the lifted expression is expanded immediately instead of delayed, but I don’t know how much other code that might break."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:16:30.602200",
          "text": "that sounds like a scary change"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:16:54.602800",
          "text": "I think it would be okay if the macro just got a little more information and then used two different entries in the cache for these two situations (lifted vs not) somehow"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:17:45.603700",
          "text": "The goal of this lifting is to avoid creating wrappers multiple times for some given export (say `circle`) that is used many times in a single module."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:18:33.604900",
          "text": "So having some number of wrappers proportional to the number of times lifts are invoked inside lifts would be fine, I presume"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:18:42.605100",
          "text": "Honestly, it seems to me like caching 'should' be fine. Is there any reason why `syntax-local-lift-expression` can't do a binding dependency walk to see what order things should go in?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:19:00.605400",
          "text": "that’d be easier for me. :wink:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:19:04.605700",
          "text": "lol"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:19:24.606700",
          "text": "But it doesn’t sound like the kind of thing we might expect the macro system to do."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:19:29.607000",
          "text": "Not that I’m an expert here"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:19:46.607400",
          "text": "Although honestly <@Alden> I would much prefer to have a cache lift. Making a new lift whenever an identifier that uses a contract is used is....well seems inefficient."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:20:10.607800",
          "text": "Fair. I would probably defer to <@Danny> or <@Clarinda> here, as they know way more than me. :slightly_smiling_face:"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:21:35.609300",
          "text": "I don’t think that this particular inefficiency is going to matter in practice. But if you see somewhere where people are lifting inside lifts that lift inside lifts etc etc etc and use contracts and those contracts are creating too many wrappers, then lets figure out a better way. (Or if it isn’t possible to communicate something that could be used as suitable key.)"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T15:26:00.609900",
          "text": "Looks like the expansion of lifts is delayed so that `local-expand/capture-lifts` can exist."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:28:02.610400",
          "text": "Err...I have been known to write macros that are hairy enough to do that. :confused:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:28:20.610900",
          "text": "(I mean, I don't want to write lifts in lifts....But sometimes there isn't any other way)"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T15:29:32.611400",
          "text": "And I don’t see a way for the contract macros to figure out whether they’re inside a syntax-local-lift-expression or not."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T15:29:39.611700",
          "text": "The syntax-local-context is ’expression."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T15:29:54.612100",
          "text": "The syntax-local-lift-context isn’t changed."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:30:27.612700",
          "text": "Add `syntax-local-context/including-number-of-lifts` that is like `syntax-local-context` but might return something with a natural inside?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T15:30:47.613400",
          "text": "(well, the name is a bit on the short side for my taste, so maybe that’s not a good idea :wink:)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:31:00.613600",
          "text": "lol....also eww.....but mostly lol."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:31:14.614000",
          "text": "You're right, the problem is that the name needs to be roughly 10x longer."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T15:31:35.614300",
          "text": "That is certainly an interesting idea though."
        }
      ]
    },
    {
      "conversation_id": "281",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeanine: What if [CODE] returned an element in a partial order instead of an equivalence class, where ctx1 &lt;= ctx2 meant that all of the lifts of ctx1 are available in ctx2?\nDanny: The only use of [CODE] in the standard distribution collections appears to be in Typed Racket. It could be adapted to work with a modification of the expander that expands as it lifts, instead of delaying. I don’t have an easy way of searching the rest of the universe of Racket code…\nDanny: Jeanine do you see a good reason expansion of lifted expressions is delayed?\nAlden: Jeanine depending what you answer to MB: the partial order thing isn't as amenable to the cache.\nJeanine: Danny If it's not delayed, then the context needs to be fixed up before expansion. Consider syntax-parameters, for example, and maybe other things defined in Racket that the macro expander doesn't know about. I don't know how much of an issue that is, but that's what I would worry about.\nDanny: What do you mean about the context needing to be fixed up? Scopes? Environment?\nDanny: Ah. Environment, like syntax parameters.\nDanny: I see.\nDanny: It’s an algebraic effects problem! The effect of lifted expansion needs to happen outside the scope of local effects like syntax parameterize.\nDanny: If only the expander didn’t install a continuation barrier. :slightly_smiling_face:\nJeanine: Danny sorry, my fault :slightly_smiling_face:\nDanny: (I’ve run into other places where I really want to save off things like the current introduction scope in a continuation and restore it later)\nGonzalo: (You could stash an introduction scope somewhere easily enough, but obviously the other things are much harder—like the binding context.)\nDanny: The problem is I can’t restore the introduction scope.\nGonzalo: Ah, right.\nGonzalo: What are the use cases for [CODE]? Aside from basically “Typed Racket”.\nKaren: wondering that myself\nJeanine: Alden It seems like this would work with caching, it would just move some of the responsibility to the macro expander. Instead of a target meaning both \"this is where lifts go\" and \"this is what's available\" (which this bug demonstrates is not true), it would only mean the latter. So the cache would be a [CODE] and before lifting you would have to check if the current context extended any of the existing ones. Would that work?\nDanny: Typed Racket uses it to typecheck the lifted expression, I think. Other contexts where you’re re-writing fully expanded Racket might do something similar.\nAlden: I can do that\nKristeen: I think the use case in TR is more specific/general than that -- just wanting to expand something and put all the relevant pieces in one place\nGonzalo: It seems like you could imagine situations where capturing lifts in a more local context could be theoretically useful, but I imagine a lot of macros that use [CODE] assume the result is going to end up at a module top level, and I don’t know if that would be an easy invariant to maintain unless you’re doing a TR-like thing in [CODE].\nKaren: in general, would “[CODE] from a module context that wants to do whole-module transformations” be a good place to use it?\nKristeen: that isn't really where Typed Racket uses it\nKaren: oh, where does TR use it?\nKristeen: it's used in [CODE] (part of the implementation of [CODE] but needed to implement [CODE] as an abstraction), in how the toplevel works, and in [CODE]",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 26,
        "duration_minutes": 17.8,
        "contains_question": true,
        "action_keywords": [
          "action",
          "fix",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Danny",
          "Gonzalo",
          "Jeanine",
          "Karen",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T16:00:17.617700",
          "text": "What if `syntax-local-lift-context` returned an element in a partial order instead of an equivalence class, where ctx1 &lt;= ctx2 meant that all of the lifts of ctx1 are available in ctx2?"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:00:19.617800",
          "text": "The only use of `local-expand/capture-lifts` in the standard distribution collections appears to be in Typed Racket. It could be adapted to work with a modification of the expander that expands as it lifts, instead of delaying. I don’t have an easy way of searching the rest of the universe of Racket code…"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:00:43.618200",
          "text": "<@Jeanine> do you see a good reason expansion of lifted expressions is delayed?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T16:02:39.620400",
          "text": "<@Jeanine> depending what you answer to MB: the partial order thing isn't as amenable to the cache. "
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T16:03:31.621400",
          "text": "<@Danny> If it's not delayed, then the context needs to be fixed up before expansion. Consider syntax-parameters, for example, and maybe other things defined in Racket that the macro expander doesn't know about. I don't know how much of an issue that is, but that's what I would worry about."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:03:59.621800",
          "text": "What do you mean about the context needing to be fixed up? Scopes? Environment?"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:04:23.622300",
          "text": "Ah. Environment, like syntax parameters."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:04:31.622600",
          "text": "I see."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:05:04.623400",
          "text": "It’s an algebraic effects problem! The effect of lifted expansion needs to happen outside the scope of local effects like syntax parameterize."
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:07:46.623900",
          "text": "If only the expander didn’t install a continuation barrier. :slightly_smiling_face:"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T16:08:16.624400",
          "text": "<@Danny> sorry, my fault :slightly_smiling_face:"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:08:54.625500",
          "text": "(I’ve run into other places where I really want to save off things like the current introduction scope in a continuation and restore it later)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-12T16:12:02.628000",
          "text": "(You could stash an introduction scope somewhere easily enough, but obviously the other things are much harder—like the binding context.)"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:12:49.628700",
          "text": "The problem is I can’t restore the introduction scope."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-12T16:12:57.629000",
          "text": "Ah, right."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-12T16:13:32.629900",
          "text": "What are the use cases for `local-expand/capture-lifts`? Aside from basically “Typed Racket”."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-12T16:14:07.631300",
          "text": "wondering that myself"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T16:14:15.631700",
          "text": "<@Alden> It seems like this would work with caching, it would just move some of the responsibility to the macro expander. Instead of a target meaning both \"this is where lifts go\" and \"this is what's available\" (which this bug demonstrates is not true), it would only mean the latter.  So the cache would be a `Key =&gt; (listof (pair Ctx Id))` and before lifting you would have to check if the current context extended any of the existing ones. Would that work?"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-12T16:14:16.631900",
          "text": "Typed Racket uses it to typecheck the lifted expression, I think. Other contexts where you’re re-writing fully expanded Racket might do something similar."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-12T16:14:52.633400",
          "text": "I can do that"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-12T16:14:54.633500",
          "text": "I think the use case in TR is more specific/general than that -- just wanting to expand something and put all the relevant pieces in one place"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-12T16:15:20.634600",
          "text": "It seems like you could imagine situations where capturing lifts in a more local context could be theoretically useful, but I imagine a lot of macros that use `syntax-local-lift-expression` assume the result is going to end up at a module top level, and I don’t know if that would be an easy invariant to maintain unless you’re doing a TR-like thing in `#%module-begin`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-12T16:15:33.634700",
          "text": "in general, would “`local-expand` from a module context that wants to do whole-module transformations” be a good place to use it?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-12T16:15:54.635300",
          "text": "that isn't really where Typed Racket uses it"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-12T16:16:08.635600",
          "text": "oh, where does TR use it?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-12T16:18:05.636600",
          "text": "it's used in `require/contract` (part of the implementation of `require/typed` but needed to implement `require/contract` as an abstraction), in how the toplevel works, and in `with-types`"
        }
      ]
    },
    {
      "conversation_id": "282",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Jeanine I don't see how changing [CODE] would help with caching in [CODE]?\nJeanine: Marcelina The idea is to change [CODE] to return something that represents whether a previously lifted identifier is actually available here and now. Thinking about it some more, my idea of a partial order isn't quite right, or at least it would be a little awkward---you'd have to get the context, check it, lift, and then get the new context and save that in the cache. Perhaps it would be better to have a predicate that takes a lift context and an identifier and returns true if the identifier is available (previously lifted to that context or a parent and defined *above* the current expansion point).\nJeanine: In other words, the contract library currently assumes that if an expression was previously *sent* to the current lift context, the resulting id is available. Your example shows that the order of sends doesn't always correspond to the order of receives (that is, the order that lifted definitions occur in the expanded module). So hopefully a fix would be to check whether the lifted expression was previously *received* (that is, its definition occurs above the current expansion position).\nMarcelina: Ah, okay, that makes sense.\nJeanine: Thanks for the question; writing the answer helped clarify my thoughts. I (currently?) think the new predicate on identifiers would be the easiest solution.\nJeanine: It's a little like a degenerate version of the letrec/undefined analysis exposed as part of the macro API.\nMarcelina: Mmmm...so it seems like it would technically break backwards compatibility. But not in any meaningful way, is that correct?\nJeanine: Sorry, forget what I said about changing [CODE]. Let's say we add a new thing, like [CODE]. The contract cache would maintain a mapping [CODE]. Each time you lift the expression corresponding to a key, you add the resulting identifier to the key's associated list. But before doing a new lift, you check the key and see if any of the identifiers are [CODE]; if so, it's safe to just use that identifier as a reference.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 35.3,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "let's"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeanine",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T16:49:33.637600",
          "text": "<@Jeanine> I don't see how changing `syntax-local-lift-context` would help with caching in `syntax-local-lift-expression`?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T16:59:24.642100",
          "text": "<@Marcelina> The idea is to change `syntax-local-lift-context` to return something that represents whether a previously lifted identifier is actually available here and now. Thinking about it some more, my idea of a partial order isn't quite right, or at least it would be a little awkward---you'd have to get the context, check it, lift, and then get the new context and save that in the cache. Perhaps it would be better to have a predicate that takes a lift context and an identifier and returns true if the identifier is available (previously lifted to that context or a parent and defined *above* the current expansion point)."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T17:05:26.646600",
          "text": "In other words, the contract library currently assumes that if an expression was previously *sent* to the current lift context, the resulting id is available. Your example shows that the order of sends doesn't always correspond to the order of receives (that is, the order that lifted definitions occur in the expanded module). So hopefully a fix would be to check whether the lifted expression was previously *received* (that is, its definition occurs above the current expansion position)."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T17:06:50.646800",
          "text": "Ah, okay, that makes sense."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T17:11:52.648300",
          "text": "Thanks for the question; writing the answer helped clarify my thoughts. I (currently?) think the new predicate on identifiers would be the easiest solution."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T17:15:01.649900",
          "text": "It's a little like a degenerate version of the letrec/undefined analysis exposed as part of the macro API."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-12T17:16:37.650600",
          "text": "Mmmm...so it seems like it would technically break backwards compatibility. But not in any meaningful way, is that correct?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-12T17:24:51.655000",
          "text": "Sorry, forget what I said about changing `syntax-local-lift-context`. Let's say we add a new thing, like `syntax-local-defined-above? : Identifier -&gt; Boolean`. The contract cache would maintain a mapping `Key =&gt; (Listof Identifier)`. Each time you lift the expression corresponding to a key, you add the resulting identifier to the key's associated list. But before doing a new lift, you check the key and see if any of the identifiers are `syntax-local-defined-above?`; if so, it's safe to just use that identifier as a reference."
        }
      ]
    },
    {
      "conversation_id": "283",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Alden: Sounds straightforward!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Alden"
        ]
      },
      "timeline": [
        {
          "user": "Alden",
          "timestamp": "2019-03-12T18:17:25.655300",
          "text": "Sounds straightforward!"
        }
      ]
    },
    {
      "conversation_id": "284",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tambra: [CODE] uses it because to expands into a unit and some of its lift’s bind state that should be local to each unit instantiation. (Not that I ever claim that pop-pl does *anything* the right way)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Tambra",
          "timestamp": "2019-03-12T20:37:45.655400",
          "text": "`pop-pl` uses it because to expands into a unit and some of its lift’s bind state that should be local to each unit instantiation. (Not that I ever claim that pop-pl does *anything* the right way)"
        }
      ]
    },
    {
      "conversation_id": "285",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leonila: Hey, my company bought a couple extra diversity tickets for racketfest, if you know anyone who's in an underrepresented group and would be interested, please have them reach out!\nShavon: Leonila Awesome. Have you tweetted about it?\nLeonila: Shavon not yet, I have all of ~300 twitter followers so not sure it's going to move the needle a ton.\nShavon: but it will allow others to retweet you. :slightly_smiling_face: Not that I have that many followers myself though.\nLeonila: Shavon <[URL]\nLeonila: If you do follow me, you can get my best take on Amsterdam, Scala, running an Agtech startup in the developing world... and customer service issues and complaining about american politics which is what I really use it for.\nLeonila: Anyone who's going to racketfest in berlin interested in doing a long bike ride on Sunday?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 55.68,
        "contains_question": true,
        "action_keywords": [
          "please",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Leonila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Leonila",
          "timestamp": "2019-03-13T07:16:31.656700",
          "text": "Hey, my company bought a couple extra diversity tickets for racketfest, if you know anyone who's in an underrepresented group and would be interested, please have them reach out!"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-13T07:43:03.657200",
          "text": "<@Leonila> Awesome. Have you tweetted about it?"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-13T08:03:31.657900",
          "text": "<@Shavon> not yet, I have all of ~300 twitter followers so not sure it's going to move the needle a ton."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-13T08:04:09.658500",
          "text": "but it will allow others to retweet you. :slightly_smiling_face: Not that I have that many followers myself though."
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-13T08:07:37.658700",
          "text": "<@Shavon> <https://twitter.com/estsauver/status/1105802267473645571>"
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-13T08:11:05.659900",
          "text": "If you do follow me, you can get my best take on Amsterdam, Scala, running an Agtech startup in the developing world... and customer service issues and complaining about american politics which is what I really use it for."
        },
        {
          "user": "Leonila",
          "timestamp": "2019-03-13T08:12:12.660300",
          "text": "Anyone who's going to racketfest in berlin interested in doing a long bike ride on Sunday?"
        }
      ]
    },
    {
      "conversation_id": "286",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Is there any difference between [CODE] and [CODE]? The documentation seems to imply that [CODE] uses [CODE], but it seems to be identical on all inputs I tried so far\nKristeen: Mai [CODE] has a much bigger domain: [CODE_BLOCK]\nMai: Ah, I see\nMai: Thanks\nMai: Perhaps the examples at <[URL] should include a list that doesn’t have any syntax object inside?\nElin: It also includes things that are neither proper lists nor syntax objects, but chains of [CODE] pairs that might have syntax-lists in the [CODE] instead of normal lists: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 8.2,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Kristeen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-13T11:07:53.661500",
          "text": "Is there any difference between `stx-&gt;list` and `syntax-&gt;list`? The documentation seems to imply that `stx-&gt;list` uses `syntax-&gt;list`, but it seems to be identical on all inputs I tried so far"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-13T11:09:04.661900",
          "text": "<@Mai> `stx-&gt;list` has a much bigger domain:\n```\n&gt; (stx-&gt;list (list 1 2 3))\n'(1 2 3)\n&gt; (syntax-&gt;list (list 1 2 3))\n; syntax-&gt;list: contract violation\n;   expected: syntax?\n;   given: '(1 2 3)\n; [,bt for context]\n```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-13T11:09:26.662100",
          "text": "Ah, I see"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-13T11:09:34.662300",
          "text": "Thanks"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-13T11:11:32.663000",
          "text": "Perhaps the examples at <https://docs.racket-lang.org/syntax/syntax-helpers.html#%28def._%28%28lib._syntax%2Fstx..rkt%29._stx-list~3f%29%29> should include a list that doesn’t have any syntax object inside?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-13T11:16:05.664600",
          "text": "It also includes things that are neither proper lists nor syntax objects, but chains of `cons` pairs that might have syntax-lists in the `rest` instead of normal lists:\n```\n&gt; (stx-&gt;list (cons 1 (cons 2 #'(5 3))))\n'(1 2 #&lt;syntax 5&gt; #&lt;syntax 3&gt;)\n&gt; (syntax-&gt;list (cons 1 (cons 2 #'(5 3))))\nsyntax-&gt;list: contract violation\n  expected: syntax?\n  given: '(1 2 . #&lt;syntax (5 3)&gt;)\n```"
        }
      ]
    },
    {
      "conversation_id": "287",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herman: Does anyone know if there is a package for doing transactions (NOT database transactions)?\nKaren: Herman like, transactions in the sense of software transactional memory (STM)?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 200.57,
        "contains_question": true,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Herman",
          "timestamp": "2019-03-13T11:38:15.666300",
          "text": "Does anyone know if there is a package for doing transactions (NOT database transactions)?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-13T14:58:49.674600",
          "text": "<@Herman> like, transactions in the sense of software transactional memory (STM)?"
        }
      ]
    },
    {
      "conversation_id": "288",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Shavon can you change the gitlab notifications to not email me? and even better, to post to the <#C3P4M37H7|notifications> channel here?\nShavon: Kristeen Sure. I am out today but will do that today as soon as I return.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 39.28,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-03-13T11:47:33.666900",
          "text": "<@Shavon> can you change the gitlab notifications to not email me? and even better, to post to the <#C3P4M37H7|notifications> channel here?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-13T12:26:50.667800",
          "text": "<@Kristeen> Sure. I am out today but will do that today as soon as I return. "
        }
      ]
    },
    {
      "conversation_id": "289",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Good heavens: [CODE_BLOCK] outputs [CODE_BLOCK] :scream:\nGonzalo: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 4.77,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-13T15:37:07.675200",
          "text": "Good heavens:\n```\n#lang racket\n\n(define (println/c v)\n  (make-contract\n   #:projection (λ (blame) (λ (val) (println v) val))))\n\n(define/contract foo%\n  (class/c (override [m (println/c #f)]))\n  (class object%\n    (super-new)\n    (define/public (m) #f)))\n\n(define/contract foo+c1%\n  (class/c (override [m (println/c 1)]))\n  foo%)\n\n(define/contract foo+c2%\n  (class/c (override [m (println/c 2)]))\n  foo%)\n\n(class foo+c2%\n  (super-new)\n  (define/override (m) #f))\n```\noutputs\n```\n2\n1\n#f\n#&lt;class:/tmp/test.rkt:21:0&gt;\n```\n:scream:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-13T15:41:53.675600",
          "text": "<https://github.com/racket/racket/issues/2533>"
        }
      ]
    },
    {
      "conversation_id": "290",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Is it bad for me to prefer [CODE_BLOCK] over [CODE_BLOCK] or the equivalent [CODE_BLOCK] ?\nJulia: Is there some other idiom for \"forever\" that is too clever for its own good? :grin:\nPriscila: So you want a [CODE] ! :wink:\nShanell: ... and corresponding [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 11.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Priscila",
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-13T15:53:34.676000",
          "text": "Is it bad for me to prefer\n```\n(for ([_ (in-producer void)])\n  __)\n```\nover\n```\n(let id ()\n  _\n  (id))\n```\nor the equivalent\n```\n(define (id)\n  _\n  (id))\n```\n?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T15:54:24.676700",
          "text": "Is there some other idiom for \"forever\" that is too clever for its own good? :grin:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-13T16:04:17.677200",
          "text": "So you want a `for-ever` !    :wink:"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-13T16:04:52.677600",
          "text": "... and corresponding `for*/ever`"
        }
      ]
    },
    {
      "conversation_id": "291",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: The documentation says that [CODE] is deprecated and [CODE] is more preferable. However, there’s only [CODE] and no [CODE]. Is [CODE] considered deprecated too? And what should we use instead?\nMai: (I’m aware of [CODE] with [CODE], but that’s not what I want to do)\nJulia: Mai I've wondered the same thing, then just used [CODE], assuming it hadn't been worth getting around to renaming or aliasing that, yet.\nMauro: Mai If you want to be able to protect your struct inside a module, you could define the struct inside a sub module then provide the struct bindings via [CODE] and [CODE] so they’re protected and available for use in the parent module.\nGonzalo: There’s a thing called [CODE] on HEAD that will be in 7.3 that might be interesting to you.\nGonzalo: It lets you write this: [CODE_BLOCK]\nJulia: I've also done [CODE] and a TR struct b/c I prefer its syntax ¯\\_(ツ)_/¯\nJulia: I meant that in response to Mauro, another variation on defining the struct in a submod. I didn't mean I prefer this to what Gonzalo suggested; I'd never heard of that until now. :smile:\nGonzalo: It’s very new! It isn’t even in 7.2.\nGonzalo: Robby added it about a month ago.\nMauro: That looks very nice! I’m looking forward to 7.3\nAlden: It is in a nightly build I believe.\nAlden: Feedback is easier to respond to before it gets into a release. :)\nJulia: So comparing things, I'm guessing the [CODE] approach is only checking contracts when updating the struct -- not when reading it. (Which if that's the case, is either a drawback or a huge perf advantage, depending on what you want.) ?\nAlden: It guards the constructor. Doesn't work for mutable struct\nAlden: S\nMauro: Is [CODE] only available in [CODE] and [CODE]?\nKaren: If you use immutable structs, [CODE] is the safest way to enforce things\nJulia: I meant, with [CODE], I thought the contract is applied/checked even when using read accessors. No?\nKaren: Julia I don't know, but for immutable structs you probably don't want to check the reads anyway\nJulia: That's why I thought, \"Oh, maybe part of the motivation for [CODE] was it intentionally only guards the construction, not the read accesses, as contrasted with [CODE].\" Just curious.\nKaren: Julia out of curiosity, what sort of places do you usually find yourself using mutable structs?\nJulia: Almost never.\nJulia: I don't like mutability. And when I have to use it, the struct setters are super verbose and it's usually easier to [CODE] local variables in a closure.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 24,
        "duration_minutes": 32.75,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Gonzalo",
          "Julia",
          "Karen",
          "Mai",
          "Mauro"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-13T18:15:24.678700",
          "text": "The documentation says that `define-struct` is deprecated and `struct` is more preferable. However, there’s only `define-struct/contract` and no `struct/contract`. Is `define-struct/contract` considered deprecated too? And what should we use instead?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-13T18:17:22.679500",
          "text": "(I’m aware of `contract-out` with `struct/c`, but that’s not what I want to do)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:29:11.681600",
          "text": "<@Mai> I've wondered the same thing, then just used `define-struct/contract`, assuming it hadn't been worth getting around to renaming or aliasing that, yet."
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-13T18:30:25.683100",
          "text": "<@Mai> If you want to be able to protect your struct inside a module, you could define the struct inside a sub module then provide the struct bindings via `contract-out` and `struct/c` so they’re protected and available for use in the parent module."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-13T18:35:42.683700",
          "text": "There’s a thing called `struct-guard/c` on HEAD that will be in 7.3 that might be interesting to you."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-13T18:36:09.684500",
          "text": "It lets you write this:\n```\n&gt; (struct snake (weight hungry?)\n    #:guard (struct-guard/c real? boolean?))\n&gt; (snake 1.5 \"yep\")\nsnake, field 2: contract violation\n  expected: boolean?\n  given: \"yep\"\n  in: boolean?\n  contract from: top-level\n  blaming: top-level\n   (assuming the contract is correct)\n  at: eval:2.0\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:36:20.684700",
          "text": "I've also done `(module foo typed/racket/base __)` and a TR struct b/c I prefer its syntax ¯\\_(ツ)_/¯"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:37:35.685700",
          "text": "I meant that in response to <@Mauro>, another variation on defining the struct in a submod.\nI didn't mean I prefer this to what <@Gonzalo> suggested; I'd never heard of that until now. :smile:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-13T18:38:19.686000",
          "text": "It’s very new! It isn’t even in 7.2."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-13T18:38:39.686800",
          "text": "Robby added it about a month ago."
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-13T18:38:41.686900",
          "text": "That looks very nice! I’m looking forward to 7.3"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-13T18:39:50.687300",
          "text": "It is in a nightly build I believe. "
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-13T18:40:05.687800",
          "text": "Feedback is easier to respond to before it gets into a release. :)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:41:22.689400",
          "text": "So comparing things, I'm guessing the `#:guard (struct-guard/c __)` approach is only checking contracts when updating the struct -- not when reading it.\n(Which if that's the case, is either a drawback or a huge perf advantage, depending on what you want.)\n?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-13T18:41:54.691100",
          "text": "It guards the constructor. Doesn't work for mutable struct"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-13T18:41:57.691400",
          "text": "S"
        },
        {
          "user": "Mauro",
          "timestamp": "2019-03-13T18:42:01.691600",
          "text": "Is `struct-guard/c` only available in `racket/contract` and `racket`?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-13T18:43:12.692900",
          "text": "If you use immutable structs, `struct-guard/c` is the safest way to enforce things"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:43:14.693000",
          "text": "I meant, with `define-struct/contract`, I thought the contract is applied/checked even when using read accessors. No?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-13T18:44:31.694100",
          "text": "<@Julia> I don't know, but for immutable structs you probably don't want to check the reads anyway"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:45:41.695300",
          "text": "That's why I thought, \"Oh, maybe part of the motivation for `struct-guard/c` was it intentionally only guards the construction, not the read accesses, as contrasted with `d-s/c`.\"  Just curious."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-13T18:46:43.696500",
          "text": "<@Julia> out of curiosity, what sort of places do you usually find yourself using mutable structs?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:47:11.696700",
          "text": "Almost never."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-13T18:48:09.697600",
          "text": "I don't like mutability. And when I have to use it, the struct setters are super verbose and it's usually easier to `set!` local variables in a closure."
        }
      ]
    },
    {
      "conversation_id": "292",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: I’m looking forward to using [CODE]!\nMai: Clarinda what guarantee does Racket give when I mess with [CODE]? In particular, my buggy code results in the following error: [CODE_BLOCK] Is this considered a Racket bug? Or all bets are off when I mess with the compiler?\nMai: Yep, I am using 7.2",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 582.0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-14T01:08:11.700100",
          "text": "I’m looking forward to using `struct-guard/c`!"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-14T01:11:26.702100",
          "text": "<@Clarinda> what guarantee does Racket give when I mess with `current-compile`? In particular, my buggy code results in the following error:\n\n```\nhash-ref: no value found for key\n  key: 'foo\n  context...:\n   compile-identifier22\n   compile5\n   [repeats 1 more time]\n   compile-let13\n   compile5\n   [repeats 4 more times]\n   compile-let13\n   compile5\n   [repeats 5 more times]\n   for-loop\n   compile-let13\n   compile5\n   for-loop\n   loop!\n   compile-forms33\n   compile-module-from-parsed34\n   ...\n```\n\nIs this considered a Racket bug? Or all bets are off when I mess with the compiler?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-14T10:50:11.703200",
          "text": "Yep, I am using 7.2"
        }
      ]
    },
    {
      "conversation_id": "293",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herman: Karen Yes sort of like STM.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Herman"
        ]
      },
      "timeline": [
        {
          "user": "Herman",
          "timestamp": "2019-03-14T03:33:25.702800",
          "text": "<@Karen> Yes sort of like STM."
        }
      ]
    },
    {
      "conversation_id": "294",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: That looks like the bug fixed recently for this issue: <[URL] Are you using v7.2, or at least a pre-release version that’s more than 17 days old?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-14T08:43:52.702900",
          "text": "That looks like the bug fixed recently for this issue: <https://github.com/racket/racket/issues/2458>\nAre you using v7.2, or at least a pre-release version that’s more than 17 days old?"
        }
      ]
    },
    {
      "conversation_id": "295",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Hello Racketeers! I wanna check for the presence of some keywords in a syntax-class (but the keyword themselves don't have any value following them, they are just stand-alone keywords). I make a pattern to match them, but how do I retrieve the information about whether one of them is present or not if there's no syntax binding? [CODE] can be checked with [CODE], but what about [CODE]?\nKristeen: Kami try [CODE] around that\nKami: oh, right!\nKami: thanks a lot, I forgot this trick!\nKami: I made a SO question to document that: <[URL] You are welcome to suggest a better answer than mine :slightly_smiling_face:\nKami: Elin Yeah, why not! I'll do a PR too :slightly_smiling_face:\nKami: SO and this page of the doc were the two places where I looked for an answer",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 88.9,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-14T16:19:19.707000",
          "text": "Hello Racketeers! I wanna check for the presence of some keywords in a syntax-class (but the keyword themselves don't have any value following them, they are just stand-alone keywords).\nI make a pattern to match them, but how do I retrieve the information about whether one of them is present or not if there's no syntax binding?\n`(~optional #:my-keyword &lt;a-value&gt;:expr)` can be checked with `(~? &lt;a-value&gt;)`, but what about `(~optional #:my-keyword)`?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-14T16:21:32.707600",
          "text": "<@Kami> try `(~and p ...)` around that"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-14T16:21:47.707900",
          "text": "oh, right!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-14T16:22:02.708200",
          "text": "thanks a lot, I forgot this trick!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-14T16:59:42.708900",
          "text": "I made a SO question to document that: <https://stackoverflow.com/questions/55171895/how-do-i-check-for-the-presence-of-a-keyword-in-a-racket-syntax>\nYou are welcome to suggest a better answer than mine :slightly_smiling_face:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-14T17:47:49.710600",
          "text": "<@Elin> Yeah, why not! I'll do a PR too :slightly_smiling_face:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-14T17:48:13.711000",
          "text": "SO and this page of the doc were the two places where I looked for an answer"
        }
      ]
    },
    {
      "conversation_id": "296",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Maybe a better place would be in the [CODE] examples section on optional keyword arguments:\nElin: <[URL]\nElin: [CODE] <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 190.52,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-14T17:07:15.709700",
          "text": "Maybe a better place would be in the `syntax/parse` examples section on optional keyword arguments:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-14T17:07:16.709900",
          "text": "<https://docs.racket-lang.org/syntax/Optional_Keyword_Arguments.html>"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-14T20:17:46.713900",
          "text": "`(:: \";\" (:* (:~ #\\newline)))`\n<https://github.com/racket/syntax-color/blob/603c1f7746e7108b3186daa2b30898a8416400d6/syntax-color-lib/syntax-color/racket-lexer.rkt#L54>"
        }
      ]
    },
    {
      "conversation_id": "297",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: How do you match a single line comment using [CODE]? Is there a way to match (eof) as the end of a single line comment? :disappointed_relieved:\nLoma: Almost forgot racket source is a good place to learn! Thanks :pray:\nElin: The important part is that it doesn’t need to include a newline at the end, it just greedily consumes all characters that are not newlines.\nLoma: Yes I see. Lillian I guess your jsonic lexer tutorial probably needs an update on matching single line comment.\nLeticia: That’s unfortunate. I did consider a macro, I was just a little unsure if that would mess things up in some way. I guess I’ll do that then.\nLillian: I cover that technique in the [CODE] tutorial\nLillian: See the lexer macro called [CODE]\nMai: Like this, I think\nElin: For the purposes of the [CODE] example though, maybe it should be something simpler, that doesn’t require [CODE] or [CODE].",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 9,
        "duration_minutes": 1237.8,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Leticia",
          "Lillian",
          "Loma",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-03-14T19:52:03.713400",
          "text": "How do you match a single line comment using `lexer`? Is there a way to match (eof) as the end of a single line comment? :disappointed_relieved:"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-14T20:18:52.714100",
          "text": "Almost forgot racket source is a good place to learn! Thanks :pray:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-14T20:22:32.716400",
          "text": "The important part is that it doesn’t need to include a newline at the end, it just greedily consumes all characters that are not newlines."
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-14T20:26:30.716600",
          "text": "Yes I see. <@Lillian> I guess your jsonic lexer tutorial probably needs an update on matching single line comment."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-14T22:41:13.716800",
          "text": "That’s unfortunate. I did consider a macro, I was just a little unsure if that would mess things up in some way. I guess I’ll do that then."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-15T00:10:33.717200",
          "text": "I cover that technique in the `basic` tutorial"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-15T00:10:48.717400",
          "text": "See the lexer macro called `from/stop-before`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-15T16:28:49.720100",
          "text": "Like this, I think"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-15T16:29:51.720300",
          "text": "For the purposes of the `syntax-parse` example though, maybe it should be something simpler, that doesn’t require `~bind` or `~?`."
        }
      ]
    },
    {
      "conversation_id": "298",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: Thanks!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-14T22:41:19.717000",
          "text": "Thanks!"
        }
      ]
    },
    {
      "conversation_id": "299",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: I made the change: <[URL] Feel free to review it :slightly_smiling_face:\nKami: Mai Hey! Thanks for reviewing. I don't know how to use [CODE], care to explain further?\nMai: [CODE_BLOCK]\nMai: I see. That’s a good point.\nKami: Mai Oh, I see, thanks! I agree with Elin, that would be cool to find a simpler example.\nElin: The first thing that comes to mind is a [CODE]-like macro with a [CODE] flag that determines whether the “inspector” argument is [CODE] or [CODE], but that might also be more complicated than neccessary.\nKami: Yep, I was thinking about something with structs too, because that's one of the \"standalone keywords\" in the wild that are widely used\nKami: But as all other examples were about this [CODE] thing, I tried to stay consistent\nElin: The “More Keyword Arguments” section of the syntax-parse examples uses the [CODE] options as examples: <[URL]\nElin: However, it uses it to explain ellipsis-head patterns, which is also more complicated than necessary when there’s only one flag.\nElin: But maybe a simplified version of that [CODE] example with only one flag would make sense in the first “Optional Keyword Arguments” section.\nKami: Wow, yes, my solution was already buried in that big example, and I definitely couldn't see it when I skimmed over the doc.\nKami: I guess it's a good reason for making a simpler example\nElin: &gt; There are two main problems with the pattern above: &gt; • There’s no way to tell whether a zero-argument keyword like [CODE] was seen. &gt; • Some options, like [CODE], should appear at most once. &gt; &gt; The first problem can be remedied using ~and patterns to bind a pattern variable to the keyword itself, as in this sub-pattern: &gt; [CODE]\nKami: It happens a lot when Iearn new tricks in Racket: I read the doc, I don't understand a thing, I try stuff by myself, I check on stackoverflow, I ask here, then days later, when I finally get it, I read the doc again, and now it makes sense.\nElin: The problem is the doc example in “Other Keyword Arguments” tried to address both of those two bullet points at once, and the solution to the first ended up washed out by the solution to the second.\nKami: yep\nKami: I'd add that none of the examples in that page shows up the template part\nKami: which means as a reader you don't know how to use what you just matched\nKami: By reading those example, as a beginner, I still don't get why (~and) was used and what it did (create an attribute bound to the keyword)\nKami: while the example I suggest shows precisely that, and nothing else\nKami: (except from the ~@ usage which I find clumsy)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 22,
        "duration_minutes": 34.45,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "create",
          "review",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Kami",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:18:41.718400",
          "text": "I made the change: <https://github.com/racket/racket/pull/2537> Feel free to review it :slightly_smiling_face:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:26:53.719700",
          "text": "<@Mai> Hey! Thanks for reviewing. I don't know how to use `~bind`, care to explain further?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-15T16:28:45.719900",
          "text": "```\n(define-syntax (mycond stx)\n  (syntax-parse stx\n    [(mycond (~optional (~and (~bind [fallthrough\n                                      #'[else\n                                         (error 'failure\n                                                \"no clause matched\")]])\n                              #:error-on-fallthrough))\n             clause ...)\n     #'(cond clause ... (~? fallthrough))]))\n```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-15T16:31:14.720500",
          "text": "I see. That’s a good point."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:31:37.720700",
          "text": "<@Mai> Oh, I see, thanks!\nI agree with <@Elin>, that would be cool to find a simpler example."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-15T16:32:52.720900",
          "text": "The first thing that comes to mind is a `struct`-like macro with a `#:transparent` flag that determines whether the “inspector” argument is `#f` or `(current-inspector)`, but that might also be more complicated than neccessary."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:33:39.721100",
          "text": "Yep, I was thinking about something with structs too, because that's one of the \"standalone keywords\" in the wild that are widely used"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:34:24.721300",
          "text": "But as all other examples were about this `mycond` thing, I tried to stay consistent"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-15T16:42:01.721600",
          "text": "The “More Keyword Arguments” section of the syntax-parse examples uses the `struct` options as examples: <https://docs.racket-lang.org/syntax/More_Keyword_Arguments.html?q=Optional%20Keyword>"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-15T16:42:54.721800",
          "text": "However, it uses it to explain ellipsis-head patterns, which is also more complicated than necessary when there’s only one flag."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-15T16:43:42.722000",
          "text": "But maybe a simplified version of that `struct` example with only one flag would make sense in the first “Optional Keyword Arguments” section."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:44:51.722200",
          "text": "Wow, yes, my solution was already buried in that big example, and I definitely couldn't see it when I skimmed over the doc."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:45:12.722400",
          "text": "I guess it's a good reason for making a simpler example"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-15T16:46:34.722600",
          "text": "&gt; There are two main problems with the pattern above:\n&gt; • There’s no way to tell whether a zero-argument keyword like `#:mutable` was seen.\n&gt; • Some options, like `#:mutable`, should appear at most once.\n&gt;\n&gt; The first problem can be remedied using ~and patterns to bind a pattern variable to the keyword itself, as in this sub-pattern:\n&gt; `(~seq (~and #:mutable mutable-kw))`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:47:08.722800",
          "text": "It happens a lot when Iearn new tricks in Racket: I read the doc, I don't understand a thing, I try stuff by myself, I check on stackoverflow, I ask here, then days later, when I finally get it, I read the doc again, and now it makes sense."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-15T16:48:06.723000",
          "text": "The problem is the doc example in “Other Keyword Arguments” tried to address both of those two bullet points at once, and the solution to the first ended up washed out by the solution to the second."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:48:34.723200",
          "text": "yep"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:49:32.723400",
          "text": "I'd add that none of the examples in that page shows up the template part"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:49:47.723600",
          "text": "which means as a reader you don't know how to use what you just matched"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:51:37.723800",
          "text": "By reading those example, as a beginner, I still don't get why (~and) was used and what it did (create an attribute bound to the keyword)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:52:45.724000",
          "text": "while the example I suggest shows precisely that, and nothing else"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-15T16:53:08.724200",
          "text": "(except from the ~@ usage which I find clumsy)"
        }
      ]
    },
    {
      "conversation_id": "300",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Sorry for a dumb question, but why is, for example, [CODE] a part of Racket core form? Ideally I think that after fully expand Racket code, I would have code in phase 0, and all [CODE] could be safely removed.\nKaren: Mai I think it's because fully expanded modules can still export syntax definitions for other modules to import\nKaren: There may be other reasons too\nKristeen: Mai what Karen says is right -- if you are turning something into a single executable and you'll never require the module, then [CODE] could be removed\nMai: I see. Thanks!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 289.97,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Kristeen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-15T18:35:09.726900",
          "text": "Sorry for a dumb question, but why is, for example, `define-syntaxes` a part of Racket core form? Ideally I think that after fully expand Racket code, I would have code in phase 0, and all `define-syntaxes` could be safely removed."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-15T19:49:27.729900",
          "text": "<@Mai> I think it's because fully expanded modules can still export syntax definitions for other modules to import"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-15T19:50:14.730300",
          "text": "There may be other reasons too"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-15T20:47:18.732600",
          "text": "<@Mai> what <@Karen> says is right -- if you are turning something into a single executable and you'll never require the module, then `define-syntax` could be removed"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-15T23:25:07.734300",
          "text": "I see. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "301",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Vicki: It's possible that they will be used by some other module for example, the expansion time of another module could depend on those transformers and even the runtime of another module could depend on them if the module is [CODE]\nVicki: if a module would only by instantiated at 0, then those [CODE] won't be used but the module itself cannot determine that\nGonzalo: Mai It’s worth noting that [CODE] can only show up in fully-expanded code at the module top level—[CODE] used as an internal definition is guaranteed to go away after expansion. And that makes sense, when considered together with the things others have already pointed out.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 881.37,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Vicki"
        ]
      },
      "timeline": [
        {
          "user": "Vicki",
          "timestamp": "2019-03-15T20:41:41.730700",
          "text": "It's possible that they will be used by some other module\nfor example, the expansion time of another module could depend on those transformers\nand even the runtime of another module could depend on them if the module is `require for-template`"
        },
        {
          "user": "Vicki",
          "timestamp": "2019-03-15T20:44:53.731800",
          "text": "if a module would only by instantiated at 0, then those `define-syntaxes` won't be used\nbut the module itself cannot determine that"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-16T11:23:03.735900",
          "text": "<@Mai> It’s worth noting that `define-syntaxes` can only show up in fully-expanded code at the module top level—`define-syntax` used as an internal definition is guaranteed to go away after expansion. And that makes sense, when considered together with the things others have already pointed out."
        }
      ]
    },
    {
      "conversation_id": "302",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Is there a way to extract the numerator and denominator of an [CODE] number, similar to how [CODE] and [CODE] destructure a complex number?\nFranklin: Lillian does this work? <[URL]\nLillian: Duh\nLillian: Thanks I should’ve noticed that",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 14.75,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Franklin",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-16T15:57:32.737100",
          "text": "Is there a way to extract the numerator and denominator of an `exact?` number, similar to how `real-part` and `imag-part` destructure a complex number?"
        },
        {
          "user": "Franklin",
          "timestamp": "2019-03-16T16:02:24.738500",
          "text": "<@Lillian> does this work? <https://docs.racket-lang.org/reference/generic-numbers.html?q=denominator#%28def._%28%28quote._~23~25kernel%29._numerator%29%29>"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-16T16:11:55.738700",
          "text": "Duh"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-16T16:12:17.739000",
          "text": "Thanks I should’ve noticed that"
        }
      ]
    },
    {
      "conversation_id": "303",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Hey, I got a somewhat complicated question for syntax experts around here. I'm trying to attach meta-information to a syntax identifier at compile-time, by overriding the identifier defined by struct with my own (and keeping the old identifier somewhere for future reference). But once an identifier has been defined with [CODE], it seems impossible to override it (I get an \"already defined\" error). Is there a better way to embed more info into a struct identifier at compile-time?\nKami: I'm doing all this because I need struct's field names (and parent's field names recursively), and they are not provided by [CODE] (only the final getters and setters)\nKami: I'd like to do something similar to what struct does: creating a [CODE] and keeping it inside a syntax variable so that other structs can use it when inheriting. But as the identifier for my struct is already taken, I can't use the exact same name.\nKami: Does all that make sense?\nKaren: Kami usually doing this requires that there's a struct-type-property you can use like [CODE]. I think there's a similar property for structs\nKaren: I think [CODE] is what you want\nKami: but aren't struct properties used at run-time?\nKami: maybe I could just... use [CODE] and keep my own wrapper around that, or something... my head hurts",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 54.67,
        "contains_question": true,
        "action_keywords": [
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-16T16:47:23.742100",
          "text": "Hey, I got a somewhat complicated question for syntax experts around here. I'm trying to attach meta-information to a syntax identifier at compile-time, by overriding the identifier defined by struct with my own (and keeping the old identifier somewhere for future reference). But once an identifier has been defined with `define-syntax`, it seems impossible to override it (I get an \"already defined\" error). Is there a better way to embed more info into a struct identifier at compile-time?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T16:51:35.743300",
          "text": "I'm doing all this because I need struct's field names (and parent's field names recursively), and they are not provided by `extract-struct-info` (only the final getters and setters)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T16:54:14.744700",
          "text": "I'd like to do something similar to what struct does: creating a `struct:id` and keeping it inside a syntax variable so that other structs can use it when inheriting. But as the identifier for my struct is already taken, I can't use the exact same name."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T16:55:15.745000",
          "text": "Does all that make sense?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-16T17:12:42.747900",
          "text": "<@Kami>  usually doing this requires that there's a struct-type-property you can use like `prop:match-expander`. I think there's a similar property for structs"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-16T17:16:07.749000",
          "text": "I think `prop:struct-info` is what you want"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T17:38:51.750100",
          "text": "but aren't struct properties used at run-time?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T17:42:03.751600",
          "text": "maybe I could just... use `make-struct-type` and keep my own wrapper around that, or something... my head hurts"
        }
      ]
    },
    {
      "conversation_id": "304",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: I have some questions. Do you want to attach the meta-information to existing structs defined by other libraries, or would you be fine with a macro that defines new structs with meta-information attached?\nKami: the later :slightly_smiling_face:\nElin: Okay that makes it slightly easier I think.\nElin: You shouldn’t need to go all the way down to [CODE].\nElin: What I’ve done in the past is define the struct with different id passed in for the [CODE] and [CODE] fields, and then use [CODE] with an instance of a compile-time [CODE] struct, which has [CODE] for the normal behavior, [CODE] for the struct-info behavior, and [CODE] for your meta information.\nKami: I see\nKami: by \"[CODE] struct\" you mean a struct instance that exists only at compile-time?\nKami: or a syntax?\nElin: Like this: [CODE_BLOCK] Where somewhere you have a struct definition for [CODE] in a begin-for-syntax: [CODE_BLOCK]\nKami: I think I'm starting to understand, I just don't get why you would need a prop:procedure though\nElin: Oh, that’s so that you can still use the struct name as a constructor, like you can use [CODE] to make an instance of [CODE]\nKami: ok I see! In my case, I made the macro that generates the struct to also generate a syntax used as the constructor, so I guess I won't need this\nKami: I'll try your method, thanks!\nKaren: Kami in answer to your earlier question, [CODE] is meant to be used at compile time, not runtime. So you'd use [CODE] where [CODE] is a struct type with [CODE].\nKaren: And then your macros can use [CODE] to get the [CODE] instance and use it to decide what code to generate\nKami: Ok, that's what seemed the most logical, but I wasn't sure I understood it correctly!\nKaren: (oops I didn’t notice that that’s exactly what alex’s code does - long codeblocks are very hard to read on mobile)\nKami: it seems like it's nearly working! Thanks a lot for your help!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 18,
        "duration_minutes": 52.03,
        "contains_question": true,
        "action_keywords": [
          "decide",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Kami",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-16T17:57:35.753500",
          "text": "I have some questions. Do you want to attach the meta-information to existing structs defined by other libraries, or would you be fine with a macro that defines new structs with meta-information attached?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T17:57:51.753800",
          "text": "the later :slightly_smiling_face:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-16T17:58:05.754200",
          "text": "Okay that makes it slightly easier I think."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-16T17:58:24.754500",
          "text": "You shouldn’t need to go all the way down to `make-struct-type`."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-16T18:00:55.757100",
          "text": "What I’ve done in the past is define the struct with different id passed in for the `#:name` and `#:constructor-name` fields, and then use `define-syntax` with an instance of a compile-time `normal+struct-info+extra-meta-information` struct, which has `prop:procedure` for the normal behavior, `prop:struct-info` for the struct-info behavior, and `prop:whatever-you-need-for-meta-information` for your meta information."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:02:22.758500",
          "text": "I see"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:03:28.759400",
          "text": "by \"`normal+struct-info+extra-meta-information` struct\" you mean a struct instance that exists only at compile-time?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:04:27.759700",
          "text": "or a syntax?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-16T18:06:38.762300",
          "text": "Like this:\n```\n(begin\n  (struct foo [field ...] option ...\n    #:name internal-foo #:constructor-name internal-foo)\n  (define-syntax foo\n    (normal+struct-info+extra-meta-information\n     (make-var-like-transformer #'internal-foo)\n     (extract-struct-info (syntax-local-value #'internal-foo))\n     ...extra-meta-information...)))\n```\nWhere somewhere you have a struct definition for `normal+struct-info+extra-meta-information` in a begin-for-syntax:\n```\n(begin-for-syntax\n  (struct normal+struct-info+extra-meta-information [normal struct-info extra-meta-information]\n    #:property prop:procedure (struct-field-index normal)\n    #:property prop:struct-info (lambda (self) (normal+struct-info+extra-meta-information-struct-info self))\n    #:property prop:extra-meta-information ...stuff...))\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:06:39.762400",
          "text": "I think I'm starting to understand, I just don't get why you would need a prop:procedure though"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-16T18:07:17.763200",
          "text": "Oh, that’s so that you can still use the struct name as a constructor, like you can use `(foo 1 2 3)` to make an instance of `(struct foo [a b c])`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:08:10.764000",
          "text": "ok I see! In my case, I made the macro that generates the struct to also generate a syntax used as the constructor, so I guess I won't need this"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:09:52.764300",
          "text": "I'll try your method, thanks!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-16T18:17:28.769600",
          "text": "<@Kami> in answer to your earlier question, `prop:struct-info` is meant to be used at compile time, not runtime. So you'd use `(define-syntax foo (make-my-meta-info))` where `my-meta-info` is a struct type with `prop:struct-info`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-16T18:18:34.771200",
          "text": "And then your macros can use `syntax-local-value` to get the `my-meta-info` instance and use it to decide what code to generate"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:20:12.772000",
          "text": "Ok, that's what seemed the most logical, but I wasn't sure I understood it correctly!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-16T18:43:54.772700",
          "text": "(oops I didn’t notice that that’s exactly what alex’s code does - long codeblocks are very hard to read on mobile)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-16T18:49:37.773200",
          "text": "it seems like it's nearly working! Thanks a lot for your help!"
        }
      ]
    },
    {
      "conversation_id": "305",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Buena: so, brainfart here, I'm trying to call (system* \"/usr/bin/ls\" \"/tmp/\") from inside a serve/servlet, everything works outside the servlet, but always fails inside ... I'm guessing this is because of sandbox but I can't find the docs for it\nBuena: is there a way to get a call to system* to work inside a servlet?\nBuena: wow, so this is a new one\nBuena: apparently trying to run emacs with /dev/null as the working directory was the problem\nBuena: I guess this is why we have a /var/run/ folder\nKami: I think I found a simpler way by simply generating a [CODE] call\nPriscila: In principle the compilation happening in phase 2 and phase 1 can happen at separate times (say monday and tuesday). Therefore the solution you found (letting phase 2 generate a phase 1 program containing a call to [CODE]) seems to be The Right Thing®.\nKami: Ok, another short question... (I feel like I'll never be finished with that freakin' macro) If I produce a syntax-list, then bind it with [CODE] it fails and just binds the first item in the list\nKami: it prints a correct syntax like so: [CODE]\nPriscila: Also try #:with ((elem ...) ...)\nElin: Is it always a list of two-element lists?\nKami: nope, there can be more or less elements inside\nKami: oh, wait, I think I see the issue\nKami: it had a syntax-class\nKami: but the syntax-class is already resolved at this point\nElin: ?\nKami: Ok, so my issue is that I want to merge two (elem:my-class ...) bindings into a single one\nElin: Oh, where [CODE] is a splicing class?\nKami: nope\nKami: it's a simple class\nKami: but it parses a lot of stuff and creates attributes\nKami: and I want to get those attributes later, but since the merge happens between different phases, the attributes are gone\nKami: (I know, it's complicated :P)\nElin: That’s a lot of things to do at once\nPriscila: So you need to rewrite (a1 a2 ...) (b1 b2 ...) to (a1 b1 a2 b2 ...) ?\nKami: yep\nPriscila: (append-map list as bs)\nKami: right now I'm doing an append, then datum-&gt;syntax\nKami: but datum-&gt;syntax loses the class attributes, it just renders plain syntax\nPriscila: attributes on the indivisual elements?\nKami: yep\nPriscila: (append-map list (syntax-&gt;list as) (syntax-&gt;list bs)) ought to be fine?\nKami: yeah, that's what I do... but in fact I realize the issue is that I can't pass attributes down a phase level. I need to render them into a [CODE] call, so I lose them\nPriscila: Hmm. I can't remember how that works.\nKami: Well, the only way I see would be to make a call to [CODE] with each attribute rendered in the list\nKami: so that I can get them back by position\nKami: something like [CODE_BLOCK]\nElin: I would do this by having a single attribute of the syntax class to represent the info that needs to be passed down a phase level\nKami: yep\nKami: I'm going this way\nElin: And then if that attribute is called [CODE] the syntax call would look like [CODE]\nKami: It's reassuring to know there are people like you who can actually understand what I'm doing... Cause I don't x)\nElin: I’ve learned because I’ve failed before but kept going eventually finding it\nKami: So, before I try putting everything in a single syntax for the next phase... Can you confirm that there's no way to create a syntax-class instance manually?\nKami: cause that would simplify the code\nPriscila: Do you (Kami) mean something like this? [CODE_BLOCK]\nKami: yep, except I'd like to return the bound value instead of using it. But I guess it's not possible\nKami: It breaks the fundamentals of syntax-parsing\nKami: I'm going to use a simple list with two elements and put the attributes I need in there\nKami: like this: [CODE_BLOCK]\nKami: or maybe...\nKami: [CODE_BLOCK]\nKami: then I can do [CODE_BLOCK]\nPriscila: Off topic: Kami If you are interested in a free C64 book: <[URL]\nKami: Oh my god my code works\nKami: I think it's the most complicated macro I ever wrote\nKami: and it's only 150 lines long x)\nKami: well, actually even less than that, I'm counting (define-for-syntax) helpers too\nKami: it generate macros that can inherit from other macros\nKami: I just have a small question for you Elin : Remember yesterday you gave me the way to create a wrapper around struct ids at compile time? I have doubts about [CODE] being passed [CODE]. It takes only one argument so when a call is done like so [CODE] it fails as \"arity mismatch\"\nKami: For the record, a complete example: [CODE_BLOCK]\nKami: the only part I don't understand is the use of [CODE] and [CODE]\nKami: obviously it just works if I use internal-id instead, so it's not a big deal for me. I just want to understand what's happening\nKami: Thanks! I cannot express how awesome the help I get here is :slightly_smiling_face: When I'm describing my problem I feel like I'm using some weird incantation spells, but you actually understand!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 64,
        "duration_minutes": 1068.62,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "create",
          "finish",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Buena",
          "Elin",
          "Kami",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Buena",
          "timestamp": "2019-03-16T19:24:39.775600",
          "text": "so, brainfart here, I'm trying to call (system* \"/usr/bin/ls\" \"/tmp/\") from inside a serve/servlet, everything works outside the servlet, but always fails inside ... I'm guessing this is because of sandbox but I can't find the docs for it"
        },
        {
          "user": "Buena",
          "timestamp": "2019-03-16T19:25:42.776400",
          "text": "is there a way to get a call to system* to work inside a servlet?"
        },
        {
          "user": "Buena",
          "timestamp": "2019-03-16T19:35:17.776600",
          "text": "wow, so this is a new one"
        },
        {
          "user": "Buena",
          "timestamp": "2019-03-16T19:35:45.777100",
          "text": "apparently trying to run emacs with /dev/null as the working directory was the problem"
        },
        {
          "user": "Buena",
          "timestamp": "2019-03-16T19:36:02.777500",
          "text": "I guess this is why we have a /var/run/ folder"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T10:31:29.781200",
          "text": "I think I found a simpler way by simply generating a `#'()` call"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T10:38:42.783600",
          "text": "In principle the compilation happening in phase 2 and phase 1 can happen at separate times (say monday and tuesday). Therefore the solution you found (letting phase 2 generate a phase 1 program containing a call to `syntax`) seems to be The Right Thing®."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:13:50.785200",
          "text": "Ok, another short question... (I feel like I'll never be finished with that freakin' macro)\nIf I produce a syntax-list, then bind it with `#:with (elem ...) (my-syntax-list-producer)` it fails and just binds the first item in the list"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:15:07.786500",
          "text": "it prints a correct syntax like so: `#'((elem1 blabla) (elem2 blabla))`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:15:22.786800",
          "text": "Also try #:with ((elem ...) ...)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:16:52.788000",
          "text": "Is it always a list of two-element lists?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:17:36.788500",
          "text": "nope, there can be more or less elements inside"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:18:25.788700",
          "text": "oh, wait, I think I see the issue"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:18:35.789000",
          "text": "it had a syntax-class"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:18:44.789300",
          "text": "but the syntax-class is already resolved at this point"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:19:10.789500",
          "text": "?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:20:05.790200",
          "text": "Ok, so my issue is that I want to merge two (elem:my-class ...) bindings into a single one"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:20:57.791300",
          "text": "Oh, where `my-class` is a splicing class?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:21:15.791600",
          "text": "nope"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:21:26.791800",
          "text": "it's a simple class"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:21:39.792100",
          "text": "but it parses a lot of stuff and creates attributes"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:22:19.792900",
          "text": "and I want to get those attributes later, but since the merge happens between different phases, the attributes are gone"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:22:36.793300",
          "text": "(I know, it's complicated :P)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:22:58.794100",
          "text": "That’s a lot of things to do at once "
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:23:23.794600",
          "text": "So you need to rewrite (a1 a2 ...) (b1 b2 ...)   to (a1 b1 a2 b2 ...) ?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:23:30.794800",
          "text": "yep"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:24:14.795400",
          "text": "(append-map list as bs)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:24:32.795700",
          "text": "right now I'm doing an append, then datum-&gt;syntax"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:24:52.796100",
          "text": "but datum-&gt;syntax loses the class attributes, it just renders plain syntax"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:25:51.796800",
          "text": "attributes on the indivisual elements?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:25:55.797000",
          "text": "yep"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:26:20.797600",
          "text": "(append-map list (syntax-&gt;list as) (syntax-&gt;list bs))   ought to be fine?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:27:09.798500",
          "text": "yeah, that's what I do... but in fact I realize the issue is that I can't pass attributes down a phase level. I need to render them into a `syntax` call, so I lose them"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:28:39.799400",
          "text": "Hmm. I can't remember how that works."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:29:20.800400",
          "text": "Well, the only way I see would be to make a call to `syntax` with each attribute rendered in the list"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:29:34.800700",
          "text": "so that I can get them back by position"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:31:11.802900",
          "text": "something like\n```\n#:with (elem:class ...) (my-elements)\n#'(define-syntax my-other-phase (quote-syntax #'(elem.attr1 elem.attr2 elem.attr3)))\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:31:47.804100",
          "text": "I would do this by having a single attribute of the syntax class to represent the info that needs to be passed down a phase level"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:31:53.804300",
          "text": "yep"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:31:56.804500",
          "text": "I'm going this way"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:33:36.806900",
          "text": "And then if that attribute is called `nextphase` the syntax call would look like `#'(elem.nextphase ...)`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:34:39.807700",
          "text": "It's reassuring to know there are people like you who can actually understand what I'm doing... Cause I don't x)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:35:47.809000",
          "text": "I’ve learned because I’ve failed before but kept going eventually finding it"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:37:00.810000",
          "text": "So, before I try putting everything in a single syntax for the next phase... Can you confirm that there's no way to create a syntax-class instance manually?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:37:32.810300",
          "text": "cause that would simplify the code"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:43:57.812300",
          "text": "Do you (<@Kami>) mean something like this?\n```\n(syntax-parse &lt;manually-created-syntax-object\n  [elem:class   &lt;use elem here&gt;])```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:44:52.813000",
          "text": "yep, except I'd like to return the bound value instead of using it. But I guess it's not possible"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:45:51.813400",
          "text": "It breaks the fundamentals of syntax-parsing"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:46:59.813800",
          "text": "I'm going to use a simple list with two elements and put the attributes I need in there"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:48:12.814500",
          "text": "like this:\n```\n(list (quote-syntax (&lt;elem&gt;.attr1 ...))\n      (quote-syntax (&lt;elem&gt;.attr2 ...)))\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:51:06.814700",
          "text": "or maybe..."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:51:37.815300",
          "text": "```\n(quote-syntax ((&lt;elem&gt;.attr1 &lt;elem&gt;.attr2) ...))\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T11:57:37.815900",
          "text": "then I can do\n```\n#:with ((attr1 attr2) ...) (merge-elements)\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:58:12.816500",
          "text": "Off topic:   <@Kami> If you are interested in a free C64 book:  <https://fusionretrobooks.com/collections/pdf/products/pdf-the-story-of-the-commodore-64-in-pixels_?fbclid=IwAR0DH_gLvlCnxN3tOEBcvaRgxv6tGe148nJmdnIfhGpm8MBKyaHRzkVi_5k>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:06:20.816900",
          "text": "Oh my god my code works"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:07:38.817900",
          "text": "I think it's the most complicated macro I ever wrote"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:07:48.818200",
          "text": "and it's only 150 lines long x)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:09:30.818800",
          "text": "well, actually even less than that, I'm counting (define-for-syntax) helpers too"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:10:16.819100",
          "text": "it generate macros that can inherit from other macros"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:14:18.821900",
          "text": "I just have a small question for you <@Elin> :\nRemember yesterday you gave me the way to create a wrapper around struct ids at compile time?\nI have doubts about `#:property prop:procedure` being passed `(make-variable-like-transformer #'internal-id)`. It takes only one argument so when a call is done like so `(my-own-wrapper value1 value2 value3)` it fails as \"arity mismatch\""
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:19:48.823200",
          "text": "For the record, a complete example:\n```\n;; in begin-for-syntax:\n(struct metactor (normal struct-info attributes)\n    #:property prop:procedure (struct-field-index normal)\n    #:property prop:struct-info (lambda (self) (metactor-struct-info self))\n    #:property prop:metattributes (lambda (self) (metactor-attributes self)))\n\n;; in macro template for next phase:\n(struct &lt;id&gt; () #:name internal-id #:constructor-name internal-id)\n(define-syntax &lt;id&gt;\n  (metactor\n   (make-variable-like-transformer #'internal-id)\n   (extract-struct-info (syntax-local-value #'internal-id))\n   (~? (quote-syntax ((&lt;own-attr&gt;.parse-pattern &lt;own-attr&gt;.term) ...)) #'())))\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:22:33.824300",
          "text": "the only part I don't understand is the use of `make-variable-like-transformer` and `struct-field-index`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T12:29:01.825000",
          "text": "obviously it just works if I use internal-id instead, so it's not a big deal for me. I just want to understand what's happening"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-17T13:13:16.827000",
          "text": "Thanks! I cannot express how awesome the help I get here is :slightly_smiling_face: When I'm describing my problem I feel like I'm using some weird incantation spells, but you actually understand!"
        }
      ]
    },
    {
      "conversation_id": "306",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Just want to make sure I understand its implication correctly. This means that suppose I want to perform some optimization (let’s say, constant folding) on fully expanded code and module [CODE] has a macro [CODE] with content [CODE]: - If I change [CODE], I can skip performing optimization inside [CODE] because other modules (say [CODE]) that use [CODE] from [CODE] would expand [CODE] to [CODE] anyway, so it will be optimized regardless. - If I trigger the optimization per module (by overriding [CODE]), then I have both options. That is, if I perform optimization inside [CODE], then any usage of [CODE] will directly result in [CODE]. In contrast, if I don’t, then [CODE] will still exist, and won’t be optimized. Do I understand correctly?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-17T01:04:14.777900",
          "text": "Just want to make sure I understand its implication correctly. This means that suppose I want to perform some optimization (let’s say, constant folding) on fully expanded code and module `mod1` has a macro `foo` with content `(+ 1 1)`:\n\n- If I change `(current-compile)`, I can skip performing optimization inside `define-syntax` because other modules (say `mod2`) that use `foo` from `mod1` would expand `foo` to `(+ 1 1)` anyway, so it will be optimized regardless.\n- If I trigger the optimization per module (by overriding `#%module-begin`), then I have both options. That is, if I perform optimization inside `define-syntax`, then any usage of `foo` will directly result in `2`. In contrast, if I don’t, then `(+ 1 1)` will still exist, and won’t be optimized.\n\nDo I understand correctly?"
        }
      ]
    },
    {
      "conversation_id": "307",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Is it possible to pass down a syntax object from one phase to the other? I have a macro at phase 2, which creates a macro at phase 1. But to be able to pass down syntax objects, I put them into structs, then transform them back into syntax objects using stx-map, datum-&gt;syntax, and co. Is there a better way?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-17T08:32:56.780800",
          "text": "Is it possible to pass down a syntax object from one phase to the other? I have a macro at phase 2, which creates a macro at phase 1. But to be able to pass down syntax objects, I put them into structs, then transform them back into syntax objects using stx-map, datum-&gt;syntax, and co. Is there a better way?"
        }
      ]
    },
    {
      "conversation_id": "308",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Double check: what does [CODE] print?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T11:14:37.785800",
          "text": "Double check: what does `(display (my-syntax-list-producer)` print?"
        }
      ]
    },
    {
      "conversation_id": "309",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Not sure what you mean",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-17T11:40:48.810700",
          "text": "Not sure what you mean"
        }
      ]
    },
    {
      "conversation_id": "310",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: I’ll have to try it on my computer\nElin: Oh, sorry, I forgot that [CODE] produces a [CODE]-transformer instead of a “normal” procedure.\nElin: So to get around this I usually define: [CODE_BLOCK]\nElin: To whoever made [CODE], why is the value it returns not a procedure?\nElin: And to whoever made [CODE] why do you get an “arity mismatch” error if the value doesn’t lead to a procedure, instead of a “not a procedure” error?\nPriscila: It returns a [CODE]. So something needs to know whether a transformer is a set!-transformer. Probably [CODE]. But is that what you are getting at?\nElin: But something can be both a [CODE] and a [CODE] if it implements both [CODE] and [CODE]\nPriscila: Could it be that set!-transformers are older than applicable structs?\nPriscila: It seems 203 is the first version of the docs where \"structures as functions\" are mentioned (that section is not in the 202 docs).\nPriscila: On the other hand set!-transformers are older. But as I read the old docs on set!-transformer a normal procedure is expected.\nPriscila: Anyone knows what's the oldest version of PLT Scheme that still runs on macOS?\nPriscila: Version 350 gives a similar error message: procedure application: expected procedure, given: #&lt;set!-transformer&gt;; arguments were: #&lt;syntax::474&gt;",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 12,
        "duration_minutes": 162.02,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-17T13:08:02.825600",
          "text": "I’ll have to try it on my computer"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T13:25:07.827600",
          "text": "Oh, sorry, I forgot that `make-variable-like-transformer` produces a `set!`-transformer instead of a “normal” procedure."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T13:25:49.828000",
          "text": "So to get around this I usually define:\n```\n(begin-for-syntax\n  (define (make-var-like-transformer id)\n    (set!-transformer-procedure (make-variable-like-transformer id))))\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T13:27:30.828600",
          "text": "To whoever made `make-variable-like-transformer`, why is the value it returns not a procedure?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T13:28:27.829400",
          "text": "And to whoever made `prop:procedure` why do you get an “arity mismatch” error if the value doesn’t lead to a procedure, instead of a “not a procedure” error?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T13:32:03.832200",
          "text": "It returns a `set!-transformer`. So something needs to know whether a transformer is a set!-transformer. Probably `set!-values`. But is that what you are getting at?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T13:33:14.832900",
          "text": "But something can be both a `set!-transformer?` and a `procedure?` if it implements both `prop:set!-transformer` and `prop:procedure`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T13:34:08.833300",
          "text": "Could it be that set!-transformers are older than applicable structs?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T15:31:20.834300",
          "text": "It seems 203 is the first version of the docs where \"structures as functions\" are mentioned (that section is not in the 202 docs)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T15:32:02.835100",
          "text": "On the other hand set!-transformers are older. But as I read the old docs on set!-transformer a normal procedure is expected."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T15:40:23.836000",
          "text": "Anyone knows what's the oldest version of PLT Scheme that still runs on macOS?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T15:50:03.837400",
          "text": "Version 350 gives a similar error message:\nprocedure application: expected procedure, given: #&lt;set!-transformer&gt;; arguments were: #&lt;syntax::474&gt;"
        }
      ]
    },
    {
      "conversation_id": "311",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Thanks! It works fine now :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-17T13:54:47.833500",
          "text": "Thanks! It works fine now :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "312",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: That choice allows [CODE] to be a constant-time test.\nElin: [CODE_BLOCK]\nElin: That makes sense as to why [CODE] would return true. However, it doesn’t make sense why the error message would say “arity mismatch”\nPriscila: :slightly_smiling_face: Attempted to download v103. Got to choose between Mac Classic ppc or 68k.\nClarinda: I guess it’s more that [CODE] returns [CODE] (and since [CODE] returns true, then [CODE] needs to return something). With that choice, attempting to apply the procedure should report an arity error.\nElin: I have a function that’s just like [CODE] except that it doesn’t produce a [CODE] or handle [CODE]. What should it be called? [CODE] doesn’t seem right. Is something like [CODE] better? Expression alias? Named expression transformer? Other ideas?\nElin: I seem to copy some version of this function into every file or every project I write. Also, the fact that it doesn’t exist in the base racket distribution has caused problems for both me and just recently for Jerome.\nElin: The only problem I’m having is giving it a name.\nJulia: Elin I think you already solved this? <[URL]\nElin: Is [CODE] a good name?\nElin: I am constantly frustrated because both [CODE] and [CODE] are _so close_ but can’t be used in so many situations that require a [CODE] value.\nJeanine: Elin You could change [CODE] to return an instance of a struct that implements both [CODE] and [CODE]. Or you could add an argument to suppress the [CODE] wrapper.\nElin: Should [CODE] return such a struct that has both?\nJeanine: I don't know. That's a bigger change, and it risks breaking code that assumes [CODE]s and procedures are disjoint. I don't know if any such code exists.\nElin: I think the [CODE] behavior should be the _default_ behavior of some procedure in the documentation. I don’t want it to be “hidden” behind an optional argument.\nJeanine: I think it's fine to change [CODE] to return something that implements both interfaces. (It's more recent and less widely used than [CODE], which is why I think there's less risk with it.)\nElin: Okay.\nElin: Jeanine That’s what I’ve now done in <[URL]",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 18,
        "duration_minutes": 472.42,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Jeanine",
          "Julia",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-17T15:37:27.835200",
          "text": "That choice allows `procedure?` to be a constant-time test."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T15:39:06.835500",
          "text": "```\n(define x 5)\n(define-syntax m1 (make-set!-transformer (λ (stx) #'x)))\nm1 ;=&gt; 5\n(define-syntax m2 (compose identity (make-set!-transformer (λ (stx) #'x))))\n;=error&gt;\n;compose: contract violation\n;  expected: procedure?\n;  given: #&lt;set!-transformer&gt;\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T15:40:28.836100",
          "text": "That makes sense as to why `procedure?` would return true. However, it doesn’t make sense why the error message would say “arity mismatch”"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-17T15:42:40.837000",
          "text": ":slightly_smiling_face:   Attempted to download v103. Got to choose between Mac Classic ppc or 68k."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-17T16:00:08.837800",
          "text": "I guess it’s more that `procedure-arity` returns `'()` (and since `procedure?` returns true, then `procedure-arity` needs to return something). With that choice, attempting to apply the procedure should report an arity error."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T21:02:27.841200",
          "text": "I have a function that’s just like `make-variable-like-transformer` except that it doesn’t produce a `set!-transformer` or handle `setter-stx`.\n\nWhat should it be called? `make-constant-like-transformer` doesn’t seem right. Is something like `make-expression-id-transformer` better? Expression alias? Named expression transformer? Other ideas?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T21:05:40.843500",
          "text": "I seem to copy some version of this function into every file or every project I write. Also, the fact that it doesn’t exist in the base racket distribution has caused problems for both me and just recently for Jerome."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T21:06:19.844200",
          "text": "The only problem I’m having is giving it a name."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-17T21:08:18.844900",
          "text": "<@Elin> I think you already solved this? <https://twitter.com/AlexKnauth/status/1063213319031570432>"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T21:09:20.845300",
          "text": "Is `make-id-transformer` a good name?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T21:10:18.846300",
          "text": "I am constantly frustrated because both `make-rename-transformer` and `make-variable-like-transformer` are _so close_ but can’t be used in so many situations that require a `procedure?` value."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-17T22:36:47.848000",
          "text": "<@Elin> You could change `make-variable-like-transformer` to return an instance of a struct that implements both `prop:set!-transformer` and `prop:procedure`. Or you could add an argument to suppress the `make-set!-transformer` wrapper."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T22:37:47.848400",
          "text": "Should `make-set!-transformer` return such a struct that has both?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-17T22:40:50.849800",
          "text": "I don't know. That's a bigger change, and it risks breaking code that assumes `set!-transformer`s and procedures are disjoint. I don't know if any such code exists."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T22:41:27.850600",
          "text": "I think the `procedure?` behavior should be the _default_ behavior of some procedure in the documentation. I don’t want it to be “hidden” behind an optional argument."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-17T22:43:44.852100",
          "text": "I think it's fine to change `make-variable-like-transformer` to return something that implements both interfaces. (It's more recent and less widely used than `set!-transformer`, which is why I think there's less risk with it.)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T22:44:24.852300",
          "text": "Okay."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-17T23:29:52.852700",
          "text": "<@Jeanine> That’s what I’ve now done in <https://github.com/racket/racket/pull/2540>"
        }
      ]
    },
    {
      "conversation_id": "313",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lavette: Thanks for the link! A great book for a Commodore fan :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lavette"
        ]
      },
      "timeline": [
        {
          "user": "Lavette",
          "timestamp": "2019-03-17T17:35:34.838100",
          "text": "Thanks for the link! A great book for a Commodore fan :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "314",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Maybe [CODE]? Just kidding :stuck_out_tongue:\nElin: Does the [CODE] lexer-abbreviation include identifiers with digits in them?\nLoma: Yes\nLoma: And if I reload #lang extension\nLoma: Or if I type a space in front of each identifier, it will look right\nLoma: Here is a video\nLoma: [CODE_BLOCK] Here is the exact code I used for my color lexer… I really dont know where did I go wrong\nLoma: Even I use literal string “OP_1234” to match, it still has the same issue",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 149.85,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Kami",
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-18T06:28:54.853300",
          "text": "Maybe `make-procedure-like-transformer`? Just kidding :stuck_out_tongue:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-18T08:33:00.857500",
          "text": "Does the `identifier` lexer-abbreviation include identifiers with digits in them?"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-18T08:33:18.857700",
          "text": "Yes"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-18T08:34:30.858200",
          "text": "And if I reload #lang extension"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-18T08:35:11.858600",
          "text": "Or if I type a space in front of each identifier, it will look right"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-18T08:44:44.858900",
          "text": "Here is a video"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-18T08:58:05.860300",
          "text": "```\n;; brag/support\n(define bs-lexer\n  (lexer\n   [(eof)\n    (values lexeme 'eof #f #f #f)]\n   [\"OP_1234\"\n    (values lexeme 'symbol #f (pos lexeme-start) (pos lexeme-end))] \n   [(:+ (:/ \"09\"))\n    (values lexeme 'constant #f (pos lexeme-start) (pos lexeme-end))]\n   [any-char\n    (values lexeme 'symbol #f (pos lexeme-start) (pos lexeme-end))]))\n\n(define (color-bs port offset racket-coloring-mode?)\n  (define-values (str cat paren start end)\n    (bs-lexer port))\n  (values str cat paren start end 0 #f))\n```\nHere is the exact code I used for my color lexer… I really dont know where did I go wrong"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-18T08:58:45.860800",
          "text": "Even I use literal string “OP_1234” to match, it still has the same issue"
        }
      ]
    },
    {
      "conversation_id": "315",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: I tried to write a color lexer for my #lang, but the lexer always in favour of matching digits [CODE] than matching as identifier [CODE]; can anybody tell me where did I go wrong? The lexer is somewhat like: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-03-18T08:22:25.855600",
          "text": "I tried to write a color lexer for my #lang, but the lexer always in favour of matching digits `(:+ (:/ \"09\"))` than matching as identifier `(:: \"OP_\" (:* (:or \"_\" (:/ \"AZ\" \"09\"))))`; can anybody tell me where did I go wrong?\n\nThe lexer is somewhat like:\n```\n(define bs-lexer\n  (lexer\n   [(eof) #f]\n   [identifier 'symbol]\n   [digits 'constant]\n   [any-char 'symbol]))\n```"
        }
      ]
    },
    {
      "conversation_id": "316",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Jeanine Is there any easy way to get to a nested syntax-class attribute?\nMarcelina: Something like maybe: [CODE_BLOCK]\nJeanine: Marcelina The Right Way is to add [CODE] to the definition of [CODE]. The Sketchy, Deprecated Way is to add [CODE] instead (but then it matters that [CODE] is defined after [CODE]). In both of those cases, you need to delete the [CODE] from the use at the bottom. Yet another thing you could do is leave the definitions alone and re-parse the subterm: change the [CODE] line to [CODE] (for example).\nKami: Jeanine [CODE_BLOCK]\nMarcelina: I don't think I could do [CODE], because its a splicing-syntax-class.\nMarcelina: Ya, I get [CODE] with that code.\nJeanine: Ah, then you could do [CODE], I think. But re-parsing is still not a great way to do it.\nMarcelina: As for adding the [CODE] manually. I'd rather not do that as its then repeating a bunch of the [CODE] syntax class. But if that's the only way, thanks anyway. :disappointed:\nMarcelina: Makes sense.\nKami: I wonder why it works if you add parens around the splicing syntax class :thinking_face:\nKami: is it for saying \"this is a sequence\"?\nJeanine: Yes, the pattern [CODE] means match a term whose contents consist of a [CODE] match, followed by nothing else.\nJeanine: For example, [CODE] can match the *sequence of terms* [CODE], so [CODE] can match the *term* [CODE].\nMarcelina: Jeanine Oh geez. So it looks like if I do use the [CODE] field, then I would need to manually specify every single attribute. :confused:\nMarcelina: Something like:\nMarcelina: [CODE_BLOCK]\nMarcelina: Which translate to a rather long list in my actual code. :disappointed:\nJeanine: Yes, [CODE] does not have a signature abstraction. Or you could use [CODE] if you're willing to live with the restrictions. Or you could try to move some of the computation into the syntax class definitions to reduce the number of attributes you need to export.\nMarcelina: What do you mean by the 'syntax class definitions'?\nKami: something like this maybe: [CODE_BLOCK]\nKami: Using the x and y definitions in place instead of passing them down\nKami: I'm not sure yet it's a good strategy, but it has served me well so far.\nMarcelina: Ah, okay.\nMai: None",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 24,
        "duration_minutes": 311.65,
        "contains_question": true,
        "action_keywords": [
          "action",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeanine",
          "Kami",
          "Mai",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:04:21.861700",
          "text": "<@Jeanine> Is there any easy way to get to a nested syntax-class attribute?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:04:35.862000",
          "text": "Something like maybe:\n\n```\n(define-splicing-syntax-class foo\n  (pattern (~seq x:id y:id)))\n(define-syntax-class bar\n  (pattern (a:foo b:foo)))\n\n(define stx #'(q w e r))\n\n(syntax-parse stx\n  [that:bar\n   #:declare that.a foo\n   (attribute that.a.x)])\n```"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-18T09:11:42.865600",
          "text": "<@Marcelina> The Right Way is to add `#:attributes (a.x b.x)` to the definition of `bar`. The Sketchy, Deprecated Way is to add `#:auto-nested-attributes` instead (but then it matters that `bar` is defined after `foo`). In both of those cases, you need to delete the `#:declare` from the use at the bottom. Yet another thing you could do is leave the definitions alone and re-parse the subterm: change the `#:declare` line to `#:with a:foo #'that.a` (for example)."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-18T09:12:57.866500",
          "text": "<@Jeanine>\n```\n&gt; (syntax-parse stx\n    [that:bar\n     #:with a:foo #'that.a\n     (attribute a.x)])\n; readline-input:61:12: syntax-parse: splicing syntax class not allowed here\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:13:11.866900",
          "text": "I don't think I could do `#:with a:foo #'that.a`, because its a splicing-syntax-class."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:13:48.867500",
          "text": "Ya, I get `. syntax-parse: splicing syntax class not allowed here in: a:foo` with that code."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-18T09:14:38.868800",
          "text": "Ah, then you could do `#:with (a:foo) #'that.a`, I think. But re-parsing is still not a great way to do it."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:15:06.869400",
          "text": "As for adding the `#:attributes` manually. I'd rather not do that as its then repeating a bunch of the `foo` syntax class. But if that's the only way, thanks anyway. :disappointed:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:15:23.869600",
          "text": "Makes sense."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-18T09:17:11.870300",
          "text": "I wonder why it works if you add parens around the splicing syntax class :thinking_face:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-18T09:17:58.870900",
          "text": "is it for saying \"this is a sequence\"?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-18T09:20:38.871800",
          "text": "Yes, the pattern `(a:foo)` means match a term whose contents consist of a `foo` match, followed by nothing else."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-18T09:23:02.872900",
          "text": "For example, `a:foo` can match the *sequence of terms* `apple orange`, so `(a:foo)` can match the *term* `(apple orange)`."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:24:09.873700",
          "text": "<@Jeanine> Oh geez. So it looks like if I do use the `#:attributes` field, then I would need to manually specify every single attribute. :confused:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:24:35.873900",
          "text": "Something like:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:24:38.874100",
          "text": "```\n(define-splicing-syntax-class foo\n  (pattern (~seq x:id y:id)))\n(define-syntax-class bar\n  #:attributes (a b a.x a.y b.x b.y)\n  (pattern (a:foo b:foo)))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:24:58.874600",
          "text": "Which translate to a rather long list in my actual code. :disappointed:"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-18T09:30:22.876400",
          "text": "Yes, `syntax-parse` does not have a signature abstraction. Or you could use `#:auto-nested-attributes` if you're willing to live with the restrictions. Or you could try to move some of the computation into the syntax class definitions to reduce the number of attributes you need to export."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:31:52.876800",
          "text": "What do you mean by the 'syntax class definitions'?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-18T09:33:59.878200",
          "text": "something like this maybe:\n```\n(define-splicing-syntax-class foo\n (pattern (~seq x:id y:id)))\n(define-syntax-class bar\n (pattern (a:foo b:foo)\n    #:with result #'(a.x a.y b.x b.y)))\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-18T09:34:34.878600",
          "text": "Using the x and y definitions in place instead of passing them down"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-18T09:38:58.879300",
          "text": "I'm not sure yet it's a good strategy, but it has served me well so far."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-18T09:41:14.879500",
          "text": "Ah, okay."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T14:16:00.879700",
          "text": "None"
        }
      ]
    },
    {
      "conversation_id": "317",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Why is [CODE] underlined? Note that it’s my own [CODE], and I did [CODE]\nKristeen: because it didn't find the binding for [CODE]\nMai: But I did require for label… isn’t that supposed to make the binding for [CODE] appear?\nMai: I think yes. Here’s my code: [CODE_BLOCK]\nKaren: Mai questions: 1. If you replace [CODE] with [CODE], does it work? 2. If you look at the definition of the [CODE] module, does it actually provide [CODE]?\nMai: 1. [CODE] is also a hash lang, so [CODE] creates a bunch of conflict. E.g., [CODE] 2. It does provide [CODE], though in the [CODE] it uses [CODE] rather than [CODE]. I did try switching [CODE] to regular Racket and [CODE] and if I’m not mistaken, the problem persists.\nMai: If you want to try out the actual code, here it is: <[URL]\nMai: No it’s not the same one. It’s defined as [CODE]. I don’t want it to link to Racket documentation.\nMai: And I mean, this problem happens with non-Racket identifiers like [CODE] as well.\nMai: So I don’t think it’s about how Racket and sicp are conflicted\nMai: Will try, thanks!\nMai: Yup, avoiding two [CODE] solves the problem. Thank you again :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 12,
        "duration_minutes": 414.93,
        "contains_question": true,
        "action_keywords": [
          "create",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Kristeen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-18T14:17:03.881000",
          "text": "Why is `true` underlined? Note that it’s my own `true`, and I did `(require (for-label (only-in my-lang true)))`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-18T14:17:53.881500",
          "text": "because it didn't find the binding for `true`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T14:18:44.882100",
          "text": "But I did require for label… isn’t that supposed to make the binding for `true` appear?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T14:37:01.884800",
          "text": "I think yes. Here’s my code:\n\n```\n@(require (for-label (only-in sicp true)))\n@defmodule[sicp]\n@defthing[true boolean?]{\n  The same as @racket[#t].\n}\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-18T14:47:50.885900",
          "text": "<@Mai> questions:\n\n1. If you replace `(for-label (only-in sicp true))` with `(for-label sicp)`, does it work?\n2. If you look at the definition of the `sicp` module, does it actually provide `true`?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T15:09:41.887900",
          "text": "1. `sicp` is also a hash lang, so `(for-label sicp)` creates a bunch of conflict. E.g., `module: identifier already required for label at: #%app`\n2. It does provide `true`, though in the `r5rs` it uses `(#%provide true)` rather than `(provide true)`. I did try switching `sicp` to regular Racket and `(provide true)` and if I’m not mistaken, the problem persists."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T15:13:14.888300",
          "text": "If you want to try out the actual code, here it is: <https://github.com/sicp-lang/sicp/blob/master/sicp-doc/sicp-manual.scrbl#L4>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T15:40:53.890200",
          "text": "No it’s not the same one. It’s defined as `(define true #t)`. I don’t want it to link to Racket documentation."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T15:45:07.890900",
          "text": "And I mean, this problem happens with non-Racket identifiers like `nil` as well."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T15:45:57.891700",
          "text": "So I don’t think it’s about how Racket and sicp are conflicted"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T17:05:10.892200",
          "text": "Will try, thanks!"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-18T21:11:59.894500",
          "text": "Yup, avoiding two `defmodule` solves the problem. Thank you again :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "318",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: You also have a [CODE] with [CODE] in the same scribble-document, right? Does the way you refer to [CODE] in the [CODE] match the way you refer to [CODE] in the for-label require?\nElin: Is the [CODE] it provides the same one as from [CODE], or is it a separate binding that happens to produce the same value? Does that matter for scribble documentation links?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 64.07,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-18T14:33:02.883500",
          "text": "You also have a `defmodule` with `my-lang` in the same scribble-document, right? Does the way you refer to `my-lang` in the `defmodule` match the way you refer to `my-lang` in the for-label require?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-18T15:37:06.889500",
          "text": "Is the `true` it provides the same one as from `racket`, or is it a separate binding that happens to produce the same value? Does that matter for scribble documentation links?"
        }
      ]
    },
    {
      "conversation_id": "319",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: If you “Reload #lang extensions” from DrRacket → Racket menu, does the coloring correct itself? If so, I believe the issue is that when you’re typing, the color lexer is not recoloring what came before. To control this, you need to use the wider colorer API that handles backtracking. <[URL]\nClarinda: You can’t have two [CODE]s in a section. You can use [CODE]. Also, since some bindings are provided by both module, use [CODE] to prefer the more specific one: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 21.85,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-18T16:33:25.891800",
          "text": "If you “Reload #lang extensions” from DrRacket → Racket menu, does the coloring correct itself? If so, I believe the issue is that when you’re typing, the color lexer is not recoloring what came before. To control this, you need to use the wider colorer API that handles backtracking. <https://beautifulracket.com/jsonic-2/syntax-coloring.html#coloring-annotations>"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-18T16:55:16.892000",
          "text": "You can’t have two `defmodule`s in a section. You can use `#:multi`. Also, since some bindings are provided by both module, use `#:use-sources` to prefer the more specific one:\n```\n@defmodule[#:multi (sicp sicp-pict) #:use-sources (sicp-pict)]\n```"
        }
      ]
    },
    {
      "conversation_id": "320",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: Yes, reload #lang extension do work. Is ‘handles backtracking’ refers to setting my backup distance to some value larger than 0? Thanks for the help BTH!\nLoma: Thanks for the help! That perfectly solves my problem! :fireworks:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 137.83,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Loma"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-03-18T17:47:36.892400",
          "text": "Yes, reload #lang extension do work. Is ‘handles backtracking’ refers to setting my backup distance to some value larger than 0?\nThanks for the help BTH!"
        },
        {
          "user": "Loma",
          "timestamp": "2019-03-18T20:05:26.892800",
          "text": "Thanks for the help! That perfectly solves my problem! :fireworks:"
        }
      ]
    },
    {
      "conversation_id": "321",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Right. The problem here is that when you’re typing, the colorer thinks [CODE] is a symbol followed by a number. Thus, after you color a symbol, probably you want to set the backup distance to the length of that symbol, in case it becomes part of an identifier on the next keystroke. See the docs for [CODE] for a description of this API <[URL]\nClarinda: The menu bar and “About” names are taken (by the OS) from the application name, so those will change if you make an executable with [CODE] or even [CODE]. I think the extra status line is because [CODE] applies [CODE] to [CODE], but you should be able to apply it to [CODE].\nClarinda: I mean [CODE], which should preserve he menus.\nClarinda: I see that removes [CODE] and [CODE], so maybe there’s a better choice. Or maybe use the more primitive [CODE] and [CODE].\nRoxy: OK, so I am able to make an app with raco that shows correct titles. I'm having library problems now, but I'll look at that in a bit.\nRoxy: This worked: (class (frame:standard-menus-mixin (frame:status-line-mixin frame:basic%))\nRoxy: So, now that's working, raco exe can't find rsound: [CODE_BLOCK] The collects flags don't seem to do anything, neither created a folder or moved any libraries into the app bundle.\nClarinda: I vaguely recalled something about [CODE] and user-scope packages, but had to check the [CODE] docs… Assuming that “rsound” is installed as a user-scope package, try [CODE] as flags to [CODE].\nPriscila: <[URL]\nGonzalo: I wish those questions had reasonable answers. But R7RS just specifies too little.\nKristeen: Part of the answer is [CODE], right?\nKristeen: and another part of the answer is [CODE]\nKristeen: and a third part is \"give up on portable scheme code\"\nAmira: Alden Essie the northwestern current snapshots are all broken links: <[URL]\nAlden: I don’t think Essie is involved in that.\nAmira: ok, I wasn't sure. Just ping Robby next time?\nAlden: sure. I’m investigating\nAlden: Looks like the rsync mysteriously failed last night.\nAlden: No disks appear to be full.\nAlden: from the sending side:\nAlden: [CODE_BLOCK]\nAlden: it should be doing today’s rsync soon, so I guess the best course is to just let things go and check back in, in a few hours.\nAlden: Northwestern is making a transition from being an EECS department to being two departments (CS and ECE) and so that might lead to things getting a bit wonky here and there.\nAlden: Not sure if that’s what happened here, tho.\nAlden: oh, it might actually still be a few hours. I see that today’s build hasn’t started the docs yet (altho yesterday’s started them at some point in the 7am hour (it is nearly 10am here))\nAlden: If things go wrong again today, I’ll involve our tech staff (who run the machine that the rsync (that failed) connects to).\nAlden: Thanks for letting mek now.\nGonzalo: Kristeen R7RS doesn’t specify [CODE], either, only R6RS specifies [CODE].\nKristeen: damn\nGonzalo: It’s hopeless.\nKristeen: ok, switching fully to my third thought\nEssie: Amira, Alden: Indeed.\nEileen: I started on a R7RS Large Red Edition package, but I don't know if I have the patience of Gonzalo to deal with tech support for it.\nGonzalo: Tech support for R7RS small is easy. The answer to almost every issue is “sorry, R7RS doesn’t specify that”. :)\nEileen: Also if I wasn't really going to use it the only point would be for 100% completion (and engineering challenge) sake.",
      "analysis_metadata": {
        "user_count": 10,
        "message_count": 35,
        "duration_minutes": 1086.63,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Amira",
          "Clarinda",
          "Eileen",
          "Essie",
          "Gonzalo",
          "Kristeen",
          "Lillian",
          "Priscila",
          "Roxy"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-18T19:37:53.892600",
          "text": "Right. The problem here is that when you’re typing, the colorer thinks `OP_1` is a symbol followed by a number.  Thus, after you color a symbol, probably you want to set the backup distance to the length of that symbol, in case it becomes part of an identifier on the next keystroke. See the docs for `start-colorer` for a description of this API <https://docs.racket-lang.org/framework/Color.html?q=start-colorer#%28meth._%28%28%28lib._framework%2Fmain..rkt%29._color~3atext~3c~25~3e%29._start-colorer%29%29>"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-18T22:14:24.894700",
          "text": "The menu bar and “About” names are taken (by the OS) from the application name, so those will change if you make an executable with `raco exe --gui` or even `raco exe --gui --launcher`.\n\nI think the extra status line is because `frame:standard-menus%` applies `frame:standard-menus-mixin` to `frame:status-line%`, but you should be able to apply it to `frame:basic%`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-18T22:21:57.895100",
          "text": "I mean `(new (frame:standard-menus-mixin frame:basic%) ....)`, which should preserve he menus."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-18T22:22:23.895300",
          "text": "I see that removes `open-status-line` and `update-status-line`, so maybe there’s a better choice. Or maybe use the more primitive `create-status-line` and `set-status-text`."
        },
        {
          "user": "Roxy",
          "timestamp": "2019-03-18T22:23:18.895500",
          "text": "OK, so I am able to make an app with raco that shows correct titles. I'm having library problems now, but I'll look at that in a bit."
        },
        {
          "user": "Roxy",
          "timestamp": "2019-03-18T22:26:26.895700",
          "text": "This worked: (class (frame:standard-menus-mixin (frame:status-line-mixin frame:basic%))"
        },
        {
          "user": "Roxy",
          "timestamp": "2019-03-18T22:58:38.897300",
          "text": "So, now that's working, raco exe can't find rsound:\n```\nraco exe --gui -l ++lib rsound -o build/Odyssey.app Odyssey.rkt\nstandard-module-name-resolver: collection not found\n  for module path: rsound\n  collection: \"rsound\"\n  in collection directories:\n   /Users/mdh/Applications/Racket v7.2/collects\n…\n```\nThe collects flags don't seem to do anything, neither created a folder or moved any libraries into the app bundle."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-19T09:48:43.906000",
          "text": "I vaguely recalled something about `-l` and user-scope packages, but had to check the `raco exe` docs… Assuming that “rsound” is installed as a user-scope package, try `--exf -U` as flags to `raco exe`."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T10:05:12.909000",
          "text": "<https://stackoverflow.com/questions/55242394/using-scheme-libraries-in-a-racket-program>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-19T10:32:18.910000",
          "text": "I wish those questions had reasonable answers. But R7RS just specifies too little."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T10:34:25.910300",
          "text": "Part of the answer is `#!r7rs`, right?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T10:34:37.910600",
          "text": "and another part of the answer is `include`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T10:34:48.910900",
          "text": "and a third part is \"give up on portable scheme code\""
        },
        {
          "user": "Amira",
          "timestamp": "2019-03-19T10:37:53.911400",
          "text": "<@Alden> <@Essie> the northwestern current snapshots are all broken links: <https://plt.eecs.northwestern.edu/snapshots/current/>"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:38:28.911700",
          "text": "I don’t think <@Essie> is involved in that."
        },
        {
          "user": "Amira",
          "timestamp": "2019-03-19T10:38:49.912000",
          "text": "ok, I wasn't sure. Just ping Robby next time?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:39:00.912200",
          "text": "sure. I’m investigating"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:42:51.912500",
          "text": "Looks like the rsync mysteriously failed last night."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:42:56.912800",
          "text": "No disks appear to be full."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:43:08.913000",
          "text": "from the sending side:"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:43:10.913200",
          "text": "```2019/03/18 16:34:34 [42315] rsync: writefd_unbuffered failed to write 5342 bytes [sender]: Broken pipe (32)\n2019/03/18 16:34:34 [42315] rsync: connection unexpectedly closed (66896 bytes received so far) [sender]\n2019/03/18 16:34:34 [42315] rsync error: unexplained error (code 255) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-52/rsync/io.c(453) [sender=2.6.9]\n```"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:43:38.913800",
          "text": "it should be doing today’s rsync soon, so I guess the best course is to just let things go and check back in, in a few hours."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:44:13.914600",
          "text": "Northwestern is making a transition from being an EECS department to being two departments (CS and ECE) and so that might lead to things getting a bit wonky here and there."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:44:19.914800",
          "text": "Not sure if that’s what happened here, tho."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:45:29.915500",
          "text": "oh, it might actually still be a few hours. I see that today’s build hasn’t started the docs yet (altho yesterday’s started them at some point in the 7am hour (it is nearly 10am here))"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:46:01.916100",
          "text": "If things go wrong again today, I’ll involve our tech staff (who run the machine that the rsync (that failed) connects to)."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-19T10:46:20.916300",
          "text": "Thanks for letting mek now."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-19T10:51:24.916800",
          "text": "<@Kristeen> R7RS doesn’t specify `#!r7rs`, either, only R6RS specifies `#!r6rs`."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T10:51:35.917000",
          "text": "damn"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-19T10:51:39.917200",
          "text": "It’s hopeless."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T10:51:57.917600",
          "text": "ok, switching fully to my third thought"
        },
        {
          "user": "Essie",
          "timestamp": "2019-03-19T10:52:23.918000",
          "text": "<@Amira>, <@Alden>: Indeed."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-19T13:36:37.921200",
          "text": "I started on a R7RS Large Red Edition package, but I don't know if I have the patience of <@Gonzalo> to deal with tech support for it."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-19T13:37:12.921800",
          "text": "Tech support for R7RS small is easy. The answer to almost every issue is “sorry, R7RS doesn’t specify that”. :)"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-19T13:44:31.922700",
          "text": "Also if I wasn't really going to use it the only point would be for 100% completion (and engineering challenge) sake."
        }
      ]
    },
    {
      "conversation_id": "322",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Roxy: When I make a UI with framework, it doesn't change the app name in the menu bar or About, and it has an extra status bar with memory, is there a way to fix those? [CODE_BLOCK]\nRoxy: I mostly want the standard menus, tho, maybe I'm not seeing a way to remove a status line?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 87.87,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Roxy"
        ]
      },
      "timeline": [
        {
          "user": "Roxy",
          "timestamp": "2019-03-18T20:49:28.894400",
          "text": "When I make a UI with framework, it doesn't change the app name in the menu bar or About, and it has an extra status bar with memory, is there a way to fix those?\n```\n\t(application:current-app-name kAppName)\n\t(set! frame (new frame:standard-menus% [label kAppName] [width kWidth] [height kHeight] [min-width kWidth] [min-height kHeight]\n\t\t[style '(no-resize-border)]\n\t))\n\t(set! canvas (new game-canvas% [parent (send frame get-area-container)]))\n\t(send frame open-status-line 'status)\n\t(send frame update-status-line 'status \"Hello, World!\")\n\t(send frame show #t)\n```"
        },
        {
          "user": "Roxy",
          "timestamp": "2019-03-18T22:17:20.894900",
          "text": "I mostly want the standard menus, tho, maybe I'm not seeing a way to remove a status line?"
        }
      ]
    },
    {
      "conversation_id": "323",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Ideally, I want to write [CODE]. The problem is that [CODE] is actually not a thing. Rather, a _painter_ is an alias of a function that consumes a [CODE] and produces a [CODE]. What’s the best way to document this? My options seem to be: - [CODE]: I don’t like this. It’s super unreadable. - [CODE]: I also don’t like this as it’s very imprecise. - [CODE] and then document [CODE] and [CODE] (in terms of [CODE]). Which is the best? And is there a better way?\nJeanine: Mai Option 3 is probably best, but you should name it [CODE] instead of [CODE], since it is a higher-order contract and not a predicate. Another alternative is to [CODE] the word \"painter\" somewhere in your document and then use [CODE] (or [CODE] or IIRC [CODE]) as the \"contract\" on the argument and result. But defining and documenting [CODE] is better.\nMai: Thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 46.87,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeanine",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-19T09:08:26.905100",
          "text": "Ideally, I want to write `@defproc[(flip-horiz [p painter?]) painter?]`. The problem is that `painter?` is actually not a thing. Rather, a _painter_ is an alias of a function that consumes a `frame?` and produces a `frame?`. What’s the best way to document this?\n\nMy options seem to be:\n\n- `@defproc[(flip-horiz [p (-&gt; frame? frame?)]) (-&gt; frame? frame?)]`: I don’t like this. It’s super unreadable.\n- `@defproc[(flip-horiz [p procedure?]) procedure?]`: I also don’t like this as it’s very imprecise.\n- `(define painter? (-&gt; frame? frame?))` and then document `painter?` and `flip-horiz` (in terms of `painter?`).\n\nWhich is the best? And is there a better way?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-19T09:53:18.908500",
          "text": "<@Mai> Option 3 is probably best, but you should name it `painter/c` instead of `painter?`, since it is a higher-order contract and not a predicate. Another alternative is to `@deftech` the word \"painter\" somewhere in your document and then use `#, @tech{painter}` (or `#,(tech \"painter\")` or IIRC `@#,painter{tech}`) as the \"contract\" on the argument and result. But defining and documenting `painter/c` is better."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-19T09:55:18.908600",
          "text": "Thanks!"
        }
      ]
    },
    {
      "conversation_id": "324",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jamila: Question about pict and bounding boxes and curves: I have the following function, that's supposed to draw a filled dot, and an arrow coming down to the right and bending in to point to the left: [CODE_BLOCK] When I run this code in DrR, though, the resulting image (a) takes up twice as much height at the repl as the frame itself does, and (b) the frame is cropped in tightly to the disk and the arrowhead, but the curve is clipped, despite calling [CODE] to enlarge the bounding box. I'm not too concerned about the REPL weirdness (unless it causes the picture to behave badly in scribble later, but that's a problem for later). But is there any way for me to ensure that the bounding box of the pict is automatically enlarged to include the curvy line? Or failing that, is there an alternative to [CODE] that gives me bezier curves and arrowheads?\nJamila: I've found the [CODE] library, which intrigues me, but I'd love it if I didn't have to compute the control points myself :wink:\nPriscila: You can use [CODE] from MetaPict to compute the control points.\nPriscila: Example: (curve p1 .. p2 .. pt3 .. pt4) will draw a \"nice\" curve through the points.\nPriscila: replace one of the .. with -- to get a straight line between two of the points.\nPriscila: If the curve needs to enter or leave a point in a particular direction, you can do:\nPriscila: (curve direction-to-enter p1 direction-to-leave .. p2 ...)\nPriscila: The enter and leave directions are optional everywhere.\nJamila: what's the syntax for directions? are they angles (deg or rad), or keywords, or...?\nPriscila: The directions are represented as vectors using a [CODE] structure.\nPriscila: E.g. (vec 1 0) will be the east direction.\nJamila: ah, ok, cool\nPriscila: up left right down are predefined\nPriscila: There is also a function that takes a number of degrees and return a unit vector in that direction.\nKristeen: I don't understand why [CODE] isn't taking the line into account\nKristeen: my guess is that the line isn't actually represented as a sub-pict\nKristeen: but that behavior seems like a bug\nJamila: Kristeen, is the code snippet I have above producing the same clipping output for you?\nKristeen: yes\nKristeen: if you just have one particular image, you can fix it with [CODE]\nKristeen: but in general this seems not-good\nJamila: looking at pict-lib/pict/private/main.rkt [CODE], seems like it's just building a [CODE] and directly sending [CODE] and [CODE] messages\nJamila: doesn't seem like there's a [CODE] structure being created for the curve itself\nJamila: Priscila so that gets me part of the way there... looks like metapict will give me picts, so that's relatively easy to compose with other picts. last bit of the puzzle: how do I draw arrowheads of a given size, and how do I shorten the bezier curve to give room for the arrowhead at the end of it?\nKristeen: yeah that was my guess\nPriscila: [CODE_BLOCK]\nPriscila: The function [CODE] will draw the curve with an arrow in the end.\nJamila: Does [CODE] produce a pict that I can combine with other picts? And, can I customize the arrowhead itself?\nJamila: (Looking at the metapict docs, but most of the links are broken/incomplete, so I haven't figured it out yet myself)\nPriscila: Yes. draw-arrow returns a pict.\nPriscila: See <[URL]\nPriscila: for different arrow heads and the parameters that can be tweaked.\nPriscila: And I agree - the documentation is not done.\nJamila: no worries -- thanks for the help so far :slightly_smiling_face:\nPriscila: The idea is that the settings are done using the parameters beginning at line 24.\nPriscila: Normally I don't need to change anything but the arrow head length using ahlength.\nPriscila: Well - if you only need to change the settings for a single arrow, than use the keywords. See line 161.\nJamila: cool, ok. when using [CODE], does it place the arrow so that the _tip_ of the arrowhead is the anchor point of the curve, or the inner notch is? (IIRC, in tikz, you can control this because, naturally, everything is tweakable in tikz...and I don't remember what the defaults were)\nPriscila: It places the arrow head on the anchor point (not the notch).\nJamila: yay :slightly_smiling_face:\nPriscila: Also ... If you curve is say a circle, you can get your arrow head to \"bend\". (I think - I can't remember if I changed my mind)\nPriscila: Oh. And if you just need to the bezier control points, then just use [CODE] which basically is a struct holding a list of [CODE] structures.\nJamila: well, with only the control points, I won't get the right bounding box (unless I compute it myself...) I'm hoping that [CODE] implicitly gets it right for me, because of subdivision\nJamila: Is there a way to avoid using the [CODE] as my bounding box, and pick whatever is tightest on the actual drawing?\nJamila: (i.e. the equivalent of panorama?)\nJamila: <[URL]\nPriscila: I haven't anything built-in. But I think it ought to be doable.\nPriscila: I have a [CODE] which computes an approximate (may be too large) bounding box.\nPriscila: And sfont has a bezier-bounding-box which could be used.\nPriscila: Also a dc-path has a (send a-dc-path get-bounding-box) method.\nKristeen: Herb to figure out the lines spanned, you need to look at the [CODE] and then see if there are newlines in the actual bytes\nKristeen: fundamentally you want this method: <[URL]\nPriscila: Jamila The sfont code does compute the proper bounding box for a Bezier curve. So given a curve (a list of Bezier curves) we need to compute the bounding box for each and then combine them.\nPriscila: But this gives the bounding box in virtual coordinates. When the curve is drawn the pen size etc will affect the real bounding box.\nPriscila: I am not sure how to deal with that.\nJamila: worst case, just inflate the box by half the pen width? (That's ignoring pen-cap details, but I'm ok with that for now)\nPriscila: Jamila Yeah - ought to work.\nPriscila: But it will still result in a bounding box for a single curve only.\nPriscila: The [CODE] operation simply draws stuff on top of a pict.\nPriscila: Or rather it constructs a pict.\nPriscila: So ... maybe panorama works on the result?\nPriscila: Nope. Wishfull thinking.\nPriscila: MetaPict of course sets the bounding box - so panorama doesn't have a chance.\nJamila: well, but then you can cheat, and say [CODE], so that maybe you can force the bounding box to be what you want, so that panorama gets the right info?\nJamila: I'm fine with producing a floating pict that I need to combine with an existing pict myself\nJamila: Kristeen is there a pict function that's the opposite of [CODE], that says \"draw this pict but pretend it has a zero-size bbox\"?\nTambra: Jamila a cheap-trick ive used for that before: [CODE_BLOCK]\nJamila: hehe\nJamila: that makes total sense\nClarinda: I was going to suggest [CODE] with negative values, but that’s better.\nKristeen: Clarinda any thoughts on the issue of lines and panorama that Jamila has?\nClarinda: No ideas. As you’ve worked out, [CODE] doesn’t add information that [CODE] can use.\nAmira: Today's build worked :)\nJamila: In my case, since I happen to know something algebraic about the control points of my curve, I can figure out that [CODE] is an extremal point of the curve, so I can figure out my bounding box for now on my own. But because [CODE] doesn't actually add a pict for the arrowhead, it gets clipped away... fortunately, that won't matter for my overall image, but in general, it's slightly awkward.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 74,
        "duration_minutes": 223.18,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "complete",
          "create",
          "fix",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Clarinda",
          "Jamila",
          "Kristeen",
          "Priscila",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T15:51:30.926300",
          "text": "Question about pict and bounding boxes and curves: I have the following function, that's supposed to draw a filled dot, and an arrow coming down to the right and bending in to point to the left:\n```\n(require (prefix-in p: pict))\n\n(define (right-curve height)\n  (define rad 5)\n  (define dot (p:disk (* 2 rad) #:color \"black\" #:draw-border? #f))\n  (define tip (p:blank))\n  (define img (p:pin-over dot rad height tip))\n  (p:frame (p:panorama\n   (p:pin-arrow-line (* 2 rad) img dot p:cc-find tip p:cc-find\n                     #:start-angle (* pi 7/4) #:end-angle pi\n                     #:color \"red\"))))\n(right-curve 50)\n```\nWhen I run this code in DrR, though, the resulting image (a) takes up twice as much height at the repl as the frame itself does, and (b) the frame is cropped in tightly to the disk and the arrowhead, but the curve is clipped, despite calling `panorama` to enlarge the bounding box.  I'm not too concerned about the REPL weirdness (unless it causes the picture to behave badly in scribble later, but that's a problem for later).  But is there any way for me to ensure that the bounding box of the pict is automatically enlarged to include the curvy line?  Or failing that, is there an alternative to `pin-arrow-line` that gives me bezier curves and arrowheads?"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T15:53:18.926900",
          "text": "I've found the `metapict/bez` library, which intrigues me, but I'd love it if I didn't have to compute the control points myself :wink:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T15:54:57.927500",
          "text": "You can use `curve` from MetaPict to compute the control points."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T15:56:28.928200",
          "text": "Example:  (curve p1 .. p2 .. pt3 .. pt4) will draw a \"nice\" curve through the points."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T15:56:48.928700",
          "text": "replace one of the ..  with -- to get a straight line between two of the points."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T15:57:47.929800",
          "text": "If the curve needs to enter or leave a point in a particular direction, you can do:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T15:58:15.930400",
          "text": "(curve direction-to-enter p1 direction-to-leave .. p2  ...)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T15:58:33.930800",
          "text": "The enter and leave directions are optional everywhere."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T15:58:59.931200",
          "text": "what's the syntax for directions?  are they angles (deg or rad), or keywords, or...?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T15:59:43.931800",
          "text": "The directions are represented as vectors using a `vec` structure."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:00:07.932400",
          "text": "E.g.  (vec 1 0) will be the east direction."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:00:13.932600",
          "text": "ah, ok, cool"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:00:30.933200",
          "text": "up left right down are predefined"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:01:18.934900",
          "text": "There is also a function that takes a number of degrees and return a unit vector in that direction."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:01:22.935100",
          "text": "I don't understand why `panorama` isn't taking the line into account"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:01:33.935500",
          "text": "my guess is that the line isn't actually represented as a sub-pict"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:01:47.936100",
          "text": "but that behavior seems like a bug"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:01:49.936200",
          "text": "<@Kristeen>, is the code snippet I have above producing the same clipping output for you?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:01:52.936500",
          "text": "yes"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:02:15.936900",
          "text": "if you just have one particular image, you can fix it with `inset`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:02:26.937200",
          "text": "but in general this seems not-good"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:03:18.937900",
          "text": "looking at pict-lib/pict/private/main.rkt `pin-curve*`, seems like it's just building a `dc-path%` and directly sending `move-to` and `curve-to` messages"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:03:34.938300",
          "text": "doesn't seem like there's a `pict` structure being created for the curve itself"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:03:37.938500",
          "text": "<@Priscila> so that gets me part of the way there...  looks like metapict will give me picts, so that's relatively easy to compose with other picts.  last bit of the puzzle: how do I draw arrowheads of a given size, and how do I shorten the bezier curve to give room for the arrowhead at the end of it?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:03:43.938700",
          "text": "yeah that was my guess"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:07:02.938900",
          "text": "```\n#lang racket\n(require metapict)\n\n(define p (pt 0 1))\n(define q (pt 0 0))\n\n(draw (fill (circle p 0.1))\n      (color \"red\"\n             (draw-arrow (curve p .. left q))))\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:07:43.939500",
          "text": "The function `draw-arrow` will draw the curve with an arrow in the end."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:08:14.939900",
          "text": "Does `draw-arrow` produce a pict that I can combine with other picts?  And, can I customize the arrowhead itself?"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:08:40.940800",
          "text": "(Looking at the metapict docs, but most of the links are broken/incomplete, so I haven't figured it out yet myself)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:08:54.941100",
          "text": "Yes. draw-arrow returns a pict."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:08:56.941300",
          "text": "See <https://github.com/soegaard/metapict/blob/master/metapict/arrow.rkt>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:09:09.941800",
          "text": "for different arrow heads and the parameters that can be tweaked."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:09:46.942200",
          "text": "And I agree - the documentation is not done."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:10:15.942500",
          "text": "no worries -- thanks for the help so far :slightly_smiling_face:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:10:39.943000",
          "text": "The idea is that the settings are done using the parameters beginning at line 24."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:11:03.943800",
          "text": "Normally I don't need to change anything but the arrow head length using ahlength."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:11:57.945100",
          "text": "Well - if you only need to change the settings for a single arrow, than use the keywords. See line 161."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:12:05.945300",
          "text": "cool, ok.  when using `draw-arrow`, does it place the arrow so that the _tip_ of the arrowhead is the anchor point of the curve, or the inner notch is?  (IIRC, in tikz, you can control this because, naturally, everything is tweakable in tikz...and I don't remember what the defaults were)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:12:49.946000",
          "text": "It places the arrow head on the anchor point (not the notch)."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:12:54.946200",
          "text": "yay :slightly_smiling_face:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:13:51.947200",
          "text": "Also ... If you curve is say a circle, you can get your arrow head to \"bend\". (I think - I can't remember if I changed my mind)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:16:00.948500",
          "text": "Oh. And if you just need to the bezier control points, then just use `curve` which basically is a struct holding a list of `bez` structures."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:20:11.949300",
          "text": "well, with only the control points, I won't get the right bounding box (unless I compute it myself...)  I'm hoping that `curve` implicitly gets it right for me, because of subdivision"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:24:13.949900",
          "text": "Is there a way to avoid using the `window` as my bounding box, and pick whatever is tightest on the actual drawing?"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:24:29.950100",
          "text": "(i.e. the equivalent of panorama?)"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:25:20.950600",
          "text": "<https://docs.racket-lang.org/pict/Bounding_Box_Adjusters.html?q=pict#%28def._%28%28lib._pict%2Fmain..rkt%29._panorama%29%29>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:27:58.952200",
          "text": "I haven't anything built-in. But I think it  ought to be doable."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:28:31.953300",
          "text": "I have a `bez-large-bounding-box` which computes an approximate (may be too large) bounding box."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:29:22.953900",
          "text": "And  sfont  has a bezier-bounding-box which could be used."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:30:21.954900",
          "text": "Also a dc-path has a (send a-dc-path get-bounding-box)\t method."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:32:00.956300",
          "text": "<@Herb> to figure out the lines spanned, you need to look at the `syntax-span` and then see if there are newlines in the actual bytes"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:34:06.958300",
          "text": "fundamentally you want this method: <https://docs.racket-lang.org/framework/Racket.html?q=indent#%28meth._%28%28%28lib._framework%2Fmain..rkt%29._racket~3atext~3c~25~3e%29._compute-amount-to-indent%29%29>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:36:06.959800",
          "text": "<@Jamila> The sfont code does compute the proper bounding box for a Bezier curve. So given a curve (a list of Bezier curves) we need to compute the bounding box for each and then combine them."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:36:52.960800",
          "text": "But this gives the bounding box in virtual coordinates. When the curve is drawn the pen size etc will affect the real bounding box."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:37:17.961200",
          "text": "I am not sure how to deal with that."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:40:25.961700",
          "text": "worst case, just inflate the box by half the pen width?  (That's ignoring pen-cap details, but I'm ok with that for now)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:44:45.962500",
          "text": "<@Jamila> Yeah - ought to work."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:47:55.962900",
          "text": "But it will still result in a bounding box for a single curve only."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:48:18.963500",
          "text": "The `draw` operation simply draws stuff on top of a pict."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:48:46.963900",
          "text": "Or rather it constructs a pict."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:49:04.964300",
          "text": "So ... maybe panorama works on the result?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:51:02.964600",
          "text": "Nope. Wishfull thinking."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-19T16:51:29.965100",
          "text": "MetaPict of course sets the bounding box - so panorama doesn't have a chance."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:57:20.966500",
          "text": "well, but then you can cheat, and say `(inset (inset the-metapict (- the-pict-bounding-box) ...) the-metapict-bounding-box ...)`, so that maybe you can force the bounding box to be what you want, so that panorama gets the right info?"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T16:57:52.967000",
          "text": "I'm fine with producing a floating pict that I need to combine with an existing pict myself"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T17:27:19.967600",
          "text": "<@Kristeen> is there a pict function that's the opposite of `ghost`, that says \"draw this pict but pretend it has a zero-size bbox\"?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-19T17:31:51.969200",
          "text": "<@Jamila> a cheap-trick ive used  for that before:\n\n```\n(let ([x (blank)])\n    (refocus (ht-append x the-pict) x))\n```"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T17:31:59.969500",
          "text": "hehe"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T17:32:07.969700",
          "text": "that makes total sense"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-19T17:32:25.970100",
          "text": "I was going to suggest `inset` with negative values, but that’s better."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T17:38:24.970900",
          "text": "<@Clarinda> any thoughts on the issue of lines and panorama that <@Jamila> has?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-19T17:42:10.971900",
          "text": "No ideas. As you’ve worked out, `pin-arrow-line` doesn’t add information that `panorama` can use."
        },
        {
          "user": "Amira",
          "timestamp": "2019-03-19T17:42:18.972000",
          "text": "Today's build worked :)"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T19:34:41.975800",
          "text": "In my case, since I happen to know something algebraic about the control points of my curve, I can figure out that `(point-at c 0.5)` is an extremal point of the curve, so I can figure out my bounding box for now on my own.  But because `draw-arrow` doesn't actually add a pict for the arrowhead, it gets clipped away...  fortunately, that won't matter for my overall image, but in general, it's slightly awkward."
        }
      ]
    },
    {
      "conversation_id": "325",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herb: Hello, all: I'm currently writing an indentation checker for teaching language files. I'd like to be able to take a file, run the DrRacket autoindenter on it, then diff the files, but I don't think I can invoke that functionality in a convenient way. My alternate strategy is to read through the syntax objects, and calculate what the expected indentation(s) should be. Unfortunately, I can't find how many lines a syntax object spans in a nice way. Anyone have advice?\nKristeen: which I agree doesn't seem nice\nHerb: Drat.... Anyone know how to invoke the DrRacket indenter?\nKristeen: You ought to be able to run the indenter automatically, but I don't know how easily\nKristeen: Herb here: [CODE_BLOCK]\nHerb: Thanks.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 12.35,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Herb",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Herb",
          "timestamp": "2019-03-19T16:30:43.955300",
          "text": "Hello, all: I'm currently writing an indentation checker for teaching language files. I'd like to be able to take a file, run the DrRacket autoindenter on it, then diff the files, but I don't think I can invoke that functionality in a convenient way. My alternate strategy is to read through the syntax objects, and calculate what the expected indentation(s) should be. Unfortunately, I can't find how many lines a syntax object spans in a nice way. Anyone have advice?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:32:08.956500",
          "text": "which I agree doesn't seem nice"
        },
        {
          "user": "Herb",
          "timestamp": "2019-03-19T16:32:40.957400",
          "text": "Drat.... Anyone know how to invoke the DrRacket indenter?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:32:58.957900",
          "text": "You ought to be able to run the indenter automatically, but I don't know how easily"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-19T16:42:42.962000",
          "text": "<@Herb> here:\n```\n#lang racket\n\n(require framework)\n\n(define (indent s)\n  (define t (new racket:text%))\n  (send t insert s)\n  (send t tabify-all)\n  (send t get-text))\n\n(indent \"(lambda (x)\\nx)\")\n```"
        },
        {
          "user": "Herb",
          "timestamp": "2019-03-19T16:43:04.962200",
          "text": "Thanks."
        }
      ]
    },
    {
      "conversation_id": "326",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jamila: Priscila I gotta step away from the computer for a little while, but istm that <[URL] doesn't quite play nicely with the rest of the pict ecosystem. Instead of using [CODE] and [CODE] parameters, I _think_ you can compute the correct bbox of the curve, in logical coordinates, and add onto it any decorations like arrowheads. Then things like [CODE] and [CODE] and [CODE] will all behave \"the same way\" as they do on other picts.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jamila"
        ]
      },
      "timeline": [
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T19:33:29.974300",
          "text": "<@Priscila> I gotta step away from the computer for a little while, but istm that <https://docs.racket-lang.org/metapict/index.html?q=metapict#%28part._ref-draw-and-fill%29> doesn't quite play nicely with the rest of the pict ecosystem.  Instead of using `curve-pict-width` and `curve-pict-height` parameters, I _think_ you can compute the correct bbox of the curve, in logical coordinates, and add onto it any decorations like arrowheads.  Then things like `panorama` and `inset` and `clip` will all behave \"the same way\" as they do on other picts."
        }
      ]
    },
    {
      "conversation_id": "327",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: ooooo fun, I got [CODE] to segfault\nLeticia: oh, one of the libraries I’m using is doing unsafe stuff internally.\nLeticia: that’s less exciting.\nLeticia: oh, duh. [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 156.38,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-19T20:21:20.976100",
          "text": "ooooo fun, I got `racket` to segfault"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-19T20:38:34.977000",
          "text": "oh, one of the libraries I’m using is doing unsafe stuff internally."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-19T20:38:38.977200",
          "text": "that’s less exciting."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-19T22:57:43.978500",
          "text": "oh, duh. `--help`"
        }
      ]
    },
    {
      "conversation_id": "328",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: is there a way to get scribble to spit out SVGs instead of PNGs?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-19T22:56:44.978300",
          "text": "is there a way to get scribble to spit out SVGs instead of PNGs?"
        }
      ]
    },
    {
      "conversation_id": "329",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jamila: Another question about picts: Suppose I just use the standard [CODE] pict. I get an arrowhead, no biggie. If I [CODE] it, I get a tightly fitting box. If I use Tambra’s trick above (using [CODE] instead, to get things centered), and say [CODE], I get an empty pict: [CODE] returns 0. If I try to rotate it, though, things go wrong. Specifically, if I try [CODE], I get a width of 20. Huh? Without the rotate, I get a width of 10 as expected...\nTambra: Pict bounding boxes are rectangles. So if you rotate by 45 degrees (that's what pi is right? I never remember...) the width should be the length of the diagonal, not the length of the side\nJamila: pi is 180 degrees\nTambra: Oh...whelp back to basic trig for me\nJamila: (also, if it were 45 degrees, I'd wind up with a width of 10*sqrt(2) = 14.1... :wink: )\nTambra: (fwiw I can trigger this without smash, just using panorama and rotate)\nJamila: ok, so that's a useful simplification.\nPriscila: Jamila This might be easier to fix than I thought. I have a hunch, that the bounding box stems from line 22 in the definition of [CODE]. Changing this to either an user provided pict or an \"empty pict\" with no bounding box ought be easy. <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 467.47,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Jamila",
          "Priscila",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T23:21:39.981500",
          "text": "Another question about picts: Suppose I just use the standard `(arrowhead 10 0)` pict.  I get an arrowhead, no biggie.  If I `frame` it, I get a tightly fitting box.  If I use <@Tambra>’s trick above (using `cc-superimpose` instead, to get things centered), and say `(frame (smash (arrowhead 10 0)))`, I get an empty pict: `pict-width` returns 0.  If I try to rotate it, though, things go wrong.  Specifically, if I try `(pict-width (panorama (smash (rotate (arrowhead 10 0) pi))))`, I get a width of 20.  Huh?  Without the rotate, I get a width of 10 as expected..."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-19T23:26:59.985200",
          "text": "Pict bounding boxes are rectangles. So if you rotate by 45 degrees (that's what pi is right? I never remember...) the width should be the length of the diagonal, not the length of the side"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T23:27:38.985600",
          "text": "pi is 180 degrees"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-19T23:27:55.986400",
          "text": "Oh...whelp back to basic trig for me"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T23:32:42.988200",
          "text": "(also, if it were 45 degrees, I'd wind up with a width of 10*sqrt(2) = 14.1... :wink: )"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-19T23:37:05.989800",
          "text": "(fwiw I can trigger this without smash, just using panorama and rotate)"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-19T23:37:43.990100",
          "text": "ok, so that's a useful simplification."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T07:09:07.996400",
          "text": "<@Jamila> This might be easier to fix than I thought. I have a hunch, that the bounding box stems from line 22 in the definition of `draw`. Changing this to either an user provided pict or an \"empty pict\" with no bounding box ought be easy.\n<https://github.com/soegaard/metapict/blob/master/metapict/draw.rkt#L22>"
        }
      ]
    },
    {
      "conversation_id": "330",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Roxy: OK, that worked!\nAlden: something mysterious went wrong with the pkg build last night at northwestern, but the snapshots appear to be good\nAlden: (Since Amira asked yesterday)\nJamila: One finessed issue that occurred to me is, how to handle arrowheads. The case I'm thinking of is, suppose I have a C-shaped curve with arrows at both tips. Then I'd really, really like to be able to use [CODE] or [CODE] to coincide with the endpoints of the curve. But because of the vertical bulk of the arrowhead, a simple bounding-box would go beyond those corners, and so the finder functions would be useless. Two possibilities occur to me:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 303.0,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Jamila",
          "Roxy"
        ]
      },
      "timeline": [
        {
          "user": "Roxy",
          "timestamp": "2019-03-20T02:46:31.990300",
          "text": "OK, that worked!"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T07:38:56.998000",
          "text": "something mysterious went wrong with the pkg build last night at northwestern, but the snapshots appear to be good"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T07:39:07.998300",
          "text": "(Since <@Amira> asked yesterday)"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T07:49:32.004700",
          "text": "One finessed issue that occurred to me is, how to handle arrowheads.  The case I'm thinking of is, suppose I have a C-shaped curve with arrows at both tips.  Then I'd really, really like to be able to use `rt-find` or `rb-find` to coincide with the endpoints of the curve.  But because of the vertical bulk of the arrowhead, a simple bounding-box would go beyond those corners, and so the finder functions would be useless.  Two possibilities occur to me:"
        }
      ]
    },
    {
      "conversation_id": "331",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Jamila I see what you mean (about the picts produced by MetaPict). I need to think about, whether a change is doable. The idea of manually setting the overall picture width and height comes from MetaPost, where the goal is to produce images with a fixed size to be used in pdfs.\nPriscila: Nope. That's not enough. Every place where [CODE] is used needs to me changed.\nJamila: Priscila I think it's not soooo bad -- every place that [CODE] or [CODE] are mentioned in draw.rkt should instead call a hypothetical [CODE] function (with variants for -curves, -bezier, etc). The hard part is that the [CODE] function itself presumes that all its subpicts are [CODE]d and all the same size. But that to me seems ok: Suppose that [CODE] computed the bboxes of all its arguments, took the maximum of them, and then cc-superimposed over that. Then a programmer can write [CODE] to get individual tight bboxes for each img, or they can write [CODE] to pad each img to the same size and then [CODE] them all at once.\nJamila: 1) You could be totally awesome and build out TikZ's notion of named anchors within an image :wink: But that's a lot of work...\nJamila: 2) You draw the image as normal, including the arrow tips. Then you compute a _second_ bounding box that ignores all path tip decorations, and you a variant of Tambra’s trick to change the bbox to that: [CODE], (where [CODE] is whichever function allows you the easiest way to place the two boxes in the right placement relative to each toher). Now, the pict you return will draw everything but claim a tighter bounding box, and yet calling [CODE] on it will expand to include the arrow tips\nPriscila: Jamila I need to think it through. Wrt to 1). Maybe the stuff in \"node.rkt: is what you have in mind? It contains a work-in-progress. The idea is to have a convenient way of drawing nodes and connecting them. The shape of a node can be user-defined, but the most common ones are provided. Anchors on the node is computed by [CODE] where n is a node and v is a vector (in the direction you want the anchor). So for example [CODE] will give you the point in the circle to the right of the center.\nPriscila: It needs to support more of the features in tikz though.\nJamila: I'll try to look later today, need to prep for lectures, first :-)\nJamila: Yes, this is related to what I was thinking. Also things like [CODE], but I don't know how to make that interact with the [CODE] operations of picts. Rampant speculation ahead:\nJamila: Maybe create a [CODE] macro, such that [CODE] would produce a bunch of bindings of [CODE] to zero-sized [CODE]s that were pinned to their respective locations on the result of [CODE], and the resulting mess of pinned picts is bound to [CODE]. Then, you could easily say [CODE] to get the exact point of that anchor relative to the curve, no matter where the curve got embedded in another pict\nJamila: (Basically, I'm trying to get around the fact that [CODE] and its kin are mutually recursive and not open to extension, so the only way to add anchors to an existing pict is to overlay [CODE]s onto that pict, and then find them later.)\nJamila: So, [CODE] would be bound to something like [CODE]\nJamila: ooh that's fun. so if you tagged all curves, then you could use find-tag to get them out of the surrounding pict, then somehow combine the results of [CODE] and [CODE] to get an anchor point on the curve...\nJamila: actually, ppict in general looks pretty neat\nJamila: it's great other than the earlier failing of [CODE] to give me proper bounding boxes :wink:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 15,
        "duration_minutes": 402.33,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "fix",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jamila",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T06:27:49.993200",
          "text": "<@Jamila> I see what you mean (about the picts produced by MetaPict). I need to think about, whether a change is doable. The idea of manually setting the overall picture width and height comes from MetaPost, where the goal is to produce images with a fixed size to be used in pdfs."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T07:21:24.997600",
          "text": "Nope. That's not enough. Every place where `dc` is used needs to me changed."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T07:47:09.002300",
          "text": "<@Priscila> I think it's not soooo bad -- every place that `(curve-pict-width)` or `-height` are mentioned in draw.rkt should instead call a hypothetical `(compute-curve-bbox c)` function (with variants for -curves, -bezier, etc).  The hard part is that the `draw` function itself presumes that all its subpicts are `cc-superimpose`d and all the same size.  But that to me seems ok: Suppose that `draw` computed the bboxes of all its arguments, took the maximum of them, and then cc-superimposed over that.  Then a programmer can write `(fold my-combiner (map draw my-imgs))` to get individual tight bboxes for each img, or they can write `(draw my-imgs)` to pad each img to the same size and then `cc-superimpose` them all at once."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T07:49:52.005200",
          "text": "1) You could be totally awesome and build out TikZ's notion of named anchors within an image :wink:  But that's a lot of work..."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T07:53:37.008600",
          "text": "2) You draw the image as normal, including the arrow tips.  Then you compute a _second_ bounding box that ignores all path tip decorations, and you a variant of <@Tambra>’s trick to change the bbox to that: `(let ([tight-bb (blank tight-width tight-height)]) (refocus (*-superimpose image-with-tips tight-bb) tight-bb))`, (where `*-superimpose` is whichever function allows you the easiest way to place the two boxes in the right placement relative to each toher).  Now, the pict you return will draw everything but claim a tighter bounding box, and yet calling `panorama` on it will expand to include the arrow tips"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T09:50:24.012400",
          "text": "<@Jamila> I need to think it through.   Wrt to 1). Maybe the stuff in \"node.rkt: is what you have in mind? It contains a work-in-progress. The idea is to have a convenient way of drawing nodes and connecting them. The shape of a node can be user-defined, but the most common ones are provided. Anchors on the node is computed by `(anchor n v)` where n is a node and v is a vector (in the direction you want the anchor). So for example `(anchor (circle-node (pt 2 3) .1) right)` will give you the point in the circle to the right of the center."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T09:52:18.013100",
          "text": "It needs to support more of the features in tikz though."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T09:54:02.013700",
          "text": "I'll try to look later today, need to prep for lectures, first :-)"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T11:50:39.015900",
          "text": "Yes, this is related to what I was thinking.  Also things like `(point-of c t)`, but I don't know how to make that interact with the `find-*` operations of picts.  Rampant speculation ahead:"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T11:54:46.016100",
          "text": "Maybe create a `define--curve-and-anchors` macro, such that `(define-curve-and-anchors my-curve-name [(my-anchor-name1 (point-at curve-exp t1)) (my-anchor-name2 (some-other-coord ...)) ...])` would produce a bunch of bindings of `my-anchor-name*` to zero-sized `(blank)`s that were pinned to their respective locations on the result of `curve-exp`, and the resulting mess of pinned picts is bound to `my-curve-name`.  Then, you could easily say `(cc-find my-curve-name my-anchor-name1)` to get the exact point of that anchor relative to the curve, no matter where the curve got embedded in another pict"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T11:56:03.016400",
          "text": "(Basically, I'm trying to get around the fact that `cc-find` and its kin are mutually recursive and not open to extension, so the only way to add anchors to an existing pict is to overlay `(blank)`s onto that pict, and then find them later.)"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T11:56:51.016600",
          "text": "So, `my-curve-name` would be bound to something like `(refocus (pin-over the-curve the-blanks) the-curve)`"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T12:50:58.017000",
          "text": "ooh that's fun.  so if you tagged all curves, then you could use find-tag to get them out of the surrounding pict, then somehow combine the results of  `ht-find` and `point-of` to get an anchor point on the curve..."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T12:53:20.017200",
          "text": "actually, ppict in general looks pretty neat"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T13:10:10.017900",
          "text": "it's great other than the earlier failing of `pin-arrow-line` to give me proper bounding boxes :wink:"
        }
      ]
    },
    {
      "conversation_id": "332",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Elin Following what you teached me, I got inspired to write this SO question addressing the issue of overriding a struct: <[URL]\nKami: I wonder if my reasoning is correct, so I'll just leave that here.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 1.75,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-20T10:52:09.015100",
          "text": "<@Elin> Following what you teached me, I got inspired to write this SO question addressing the issue of overriding a struct: <https://stackoverflow.com/questions/55262818/how-to-override-a-struct-constructor-while-still-providing-the-struct-metadata-f>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-20T10:53:54.015800",
          "text": "I wonder if my reasoning is correct, so I'll just leave that here."
        }
      ]
    },
    {
      "conversation_id": "333",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tambra: Would tagged picts help you at all here? <[URL]\nTambra: I actually originally used that adding a blank pict trick then refocusing trick in conjunction with tags and at-find-pict to place things in exact locations and then draw arrows between them!\nTambra: Also you might find this little ditty useful: [CODE_BLOCK] Its just [CODE] but it a) takes tags not picts and b) its curried so you can build up all the arrows you want to make *then* fold them all in a separate step (which I found cleans up the code a lot)\nTambra: [CODE] does expose its bounding box, so this shouldn’t be to hard to do. Should we add new functions that draw arrows and extend the bounding box, or should we add yet one more optional argument to [CODE] and friends?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 112.05,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T12:25:52.016800",
          "text": "Would tagged picts help you at all here?\n\n<https://docs.racket-lang.org/ppict/index.html#%28def._%28%28lib._ppict%2Ftag..rkt%29._tag-pict%29%29>"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T13:04:30.017400",
          "text": "I actually originally used that adding a blank pict trick then refocusing trick in conjunction with tags and at-find-pict to place things in exact locations and then draw arrows between them!"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T13:07:10.017600",
          "text": "Also you might find this little ditty useful:\n\n```\n(define (arrow/tag* src find-src dest find-dest [arw 30]\n                    #:line-width [line-width 5]\n                    #:start-angle [start-angle #f]\t \t\n                    #:end-angle [end-angle #f]\n                    #:solid? [solid? #t])\n  (lambda (pict)\n    (pin-arrow-line\n     arw\n     pict\n     (find-tag pict src) find-src (find-tag pict dest) find-dest\n     #:line-width line-width\n     #:start-angle start-angle\t \t \t \t \n     #:end-angle end-angle\n     #:solid? solid?)))\n```\n\nIts just `pin-arrow-line` but it a) takes tags not picts and b) its curried so you can build up all the arrows you want to make *then* fold them all in a separate step (which I found cleans up the code a lot)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T14:17:55.019800",
          "text": "`path%` does expose its bounding box, so this shouldn’t be to hard to do. Should we add new functions that draw arrows and extend the bounding box, or should we add yet one more optional argument to `pin-arrow-line` and friends?"
        }
      ]
    },
    {
      "conversation_id": "334",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: seems like we should just fix that\nJamila: I sure wouldn't say no to that. But it does sound like there's a broader library of curve-based pict builders that could easily exist, and metapict is a good start on them...\nTambra: Jamila re the panorama and rotate issue: <[URL]\nKristeen: one more optional argument\nKristeen: n more functions is so much added complexity\nPriscila: Consider get-path-bounding-box\nTambra: Sounds like a plan. I'll try to add it later today\nAlden: It is an explicit protocol\nAlden: Not an implicit one.\nAlden: Rereading your question I think that maybe I actually don't understand it. Certainly contracts do not, unless there are bugs, go to lengths to compute something and then not use it for ease of implementation.....\nAlden: And the protocols are explicit. Which I don't think is synonymous with documented although I understand why you might think that.\nGonzalo: Alden Okay, let me rephrase with an example, since I get the sense that I didn’t make my question very clear. I was intrigued that this program does not raise an exception: [CODE_BLOCK] I found it interesting because I know that [CODE] implements its own val first projection, so it wasn’t just using the adapter around the late neg projection that would wait until all the arguments had been supplied to raise an error. I looked at the implementation of [CODE]’s val first projection, and I saw that when the first-order check fails, even if it has all the blame information necessary to report an error, it explicitly waits to do so until the negative party is provided. The rest of the projection does nothing at all except call [CODE], like this: [CODE_BLOCK] So I was wondering: if I were to define my own contract, with its own val first projection, am I expected to wait until I get the negative party until I call [CODE]? And if so, why, and is it documented anywhere?\nAlden: Oh! I see my confusion — I somehow confused late-neg and val-first.\nAlden: The answer is: don’t define any val-first projections.\nAlden: that’s there only for legacy reasons\nAlden: But yes, the protocol for val-first is not to raise blame until you have all of the blam einformation.\nAlden: There is some case where the literal interpretation of that isn’t followed (ie positive blame may be raised in a server module before it gets required but tht’s a separate issue)\nTambra: Ah yes I do. That might fixe the first problem, let me try\nGonzalo: Is val first really only for legacy uses, though? I imagine it doesn’t matter that much for most contracts, but it seems like it could matter for [CODE] (since it’s used so often). Since [CODE] has the value but _not_ the negative party inside the providing module, [CODE]’s val first projection skips performing the first order checks every time it’s used in a different module (and therefore has a different negative party).\nGonzalo: If it only provided a late neg projection, it’d have to do those first order checks again inside every importing module.\nAlden: val first really is only for legacy, yes.\nAlden: it should be avoided\nGonzalo: Maybe my bigger question is why val first projections are deprecated at all if most contracts are attached with [CODE], anyway… which really does get the value before it gets the negative party, so it has to do the currying anyway.\nGonzalo: What does using late neg projections save over using val first projections?\nAlden: it doesn’t do currying\nAlden: it gets called twice\nGonzalo: Sure, but it still closes over the blame object, so don’t you end up having to do the same amount of allocation? Or is the point that you don’t have a lingering reference to [CODE] in the closure…? I guess I’m confused, but it doesn’t really matter, I was mostly just curious.\nTambra: oh no i take it back i don’t have the [CODE] there…\nGonzalo: I guess I could see that, for subcontracts where the blame is swapped, you lose with the val first projection because you have to apply the curried function, and you already have the negative party at that point.\nPriscila: Okay - so the question is whether we can get a tighter bounding box for a path (without knowing the pen size).\nPriscila: Maybe there is something low-level in Cairo?\nTambra: The pen size is known at this point\nAlden: the currying with late-neg isn’t helpful; might as well just take the two arguments at once\nTambra: It looks like [CODE] is actually implemented as a low level cairo operation\nTambra: (in path%)\nGonzalo: But it _is_ helpful for the top-level projection of a contract inside [CODE], right? Since when a contract is attached to a value with [CODE], you _do_ have the value but not the negative party. If that isn’t true, why does [CODE] use the val first projection instead of the late neg projection?\nPriscila: Yes - I think I was partly responsible for that one.\nPriscila: I get a \"connection refused\" from <[URL]\nTambra: But I’m rather heistent to bring something that low-level into pict directly\nPriscila: ?\nTambra: huh same. whomp\nAlden: not really\nAlden: top-level doesn’t matter\nKaren: side request: can we document the deprecation of val-first projections more explicitly?\nAlden: it doesn’t happen in a loop (in most programs)\nAlden: Karen that sounds like a great idea\nAlden: but the other stuff does\nAlden: (happen in a loop)\nTambra: I could always make a [CODE] or something like that and call [CODE] directly on that\nPriscila: Sounds expensive.\nGonzalo: Okay, yeah, I’ll buy that. But then why bother having a val first projection on [CODE] at all? And why bother using the val first projection inside the implementation of [CODE], with a big comment explaining that it’s a legitimate use (which I don’t actually understand)? [CODE_BLOCK]\nAlden: we can delete it\nAlden: (that’s the royal we, of course)\nGonzalo: Okay, I’m happy with that answer. :)\nAlden: There is some code that still uses val-first projections and for that code, it is nice to have a proper val-first -&gt;\nKaren: Did it exist before late neg contracts were added?\nPriscila: <[URL]\nKaren: Ah\nAlden: It would be best to get rid of all val-first projections. The hangers on are, I believe, the [CODE] contracts.\nPriscila: Is [CODE] what [CODE] uses?\nAlden: so they should probably be fixed before removing that\nAlden: and probalby it would be good to set up something like drdr but for the gradual typing benchmark too\nAlden: so to make sure the change doesn’t have unintended consequences\nAlden: But yes, Karen, val-first existed before late-neg (and [CODE] before either)\nTambra: sometimes\nTambra: [CODE_BLOCK]\nPriscila: Yeah. One can see the original function name in the error message :slightly_smiling_face:\nKaren: this is a tangent, but how can I make a code searching tool for racket that’s 1) binding and macro aware and 2) multi-module + multi-package?\nKaren: I’m guessing there have been a couple of attempts at that kind of thing before\nTambra: lol\nPriscila: Could we make a new, scratch drawing context with a pen size 1 and use that as the [CODE] (cairo \"context\")?\nElin: What do you mean by searching in a “macro-aware” way? Do you mean that if I had a macro def and call like this: [CODE_BLOCK] Searching for [CODE] would succeed?\nTambra: Thats what I meant by using a [CODE] or something\nKaren: Possibly, yes. But really I’m only thinking of searching for usages of single identifiers, not for patterns of usages.\nTambra: I can create one once an reuse for all the pin-arrow calls\nKaren: (at least, as a first draft)\nTambra: but IDK what will happen if the curve extends outside of the dc’s bounds\nTambra: it does\nPriscila: great\nTambra: but i think I can just use an empty bitmap-dc instead\nKaren: Some specific things I’d like to handle are modules that reprovide and rename the exports of other modules and macros that produce usages of things\nKaren: And I’d like to be able to search across the source code of all packages in the entire package catalog for usages\nTambra: yeah, it looks like the backing DC needs to be big enough to draw the entire path already\nTambra: that’s annoying\nElin: Oooh, would it “purposefully not find” anything if you were searching for [CODE] in this: [CODE_BLOCK]\nKaren: Yes, I definitely think it _shouldn’t_ count that as a usage of [CODE]\nElin: Should it find anything in a situation like this? [CODE_BLOCK]\nKaren: It’s not _not_ a usage of add1. And multiple occurrences of [CODE] is definitely a different case than just one occurrence or no occurrences at all. But I don’t know how to report it meaningfully to a user.\nKaren: and I think its different if the definition of [CODE] is in its own module and imported by many modules that each write [CODE], because there needs to be some way to tell the user that although add1 is being used in each of these client modules, they’re all the result of the same macro\nElin: Now what about (define-simple-macro (m x y z) #:with yz/x (if (today-is-tuesday?) (format-id #’x “~a~a” #’y (syntax-e #’z)) #’sub1) (yz/x 5)) (m here add 1)\nKaren: Yeah that should still count. Macro implementations using nondeterminism / IO are a case of caveat emptor. If the expanded code is nondeterministic, then it seems logical to me that the usages found in expanded code are nondeterministic.\nElin: Okay. Now what about match-expanders where you use the pattern form but not the expression form? Like searching for uses of [CODE]: [CODE_BLOCK] In: [CODE_BLOCK] Both in the version of match that uses the [CODE] and [CODE] properties to save this information, and in a hypothetical version of match that didn’t save those properties.\nKaren: If you’re searching for usages of [CODE] then both forms should count as usages. I think there should be some way to name the two forms of [CODE]. I made a syntax annotations library that did this kind of thing by forcing all such “multi-meaning” identifiers to be implemented as rename transformers that can be configured to expand to different bindings. In this context that would mean that [CODE] would be something like a struct with two fields, each of which contains an identifier. The first is used for expressions and the second for patterns. So instead of searching for [CODE], you’d search for one of those two identifiers contained _within_ [CODE] if you wanted to search for usages of just one of the two forms of [CODE].\nKaren: The problem with this approach to searching is that identifiers aren’t serializable. So how do you build and save a search index?",
      "analysis_metadata": {
        "user_count": 8,
        "message_count": 94,
        "duration_minutes": 246.38,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "fix",
          "implement",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Elin",
          "Gonzalo",
          "Jamila",
          "Karen",
          "Kristeen",
          "Priscila",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-03-20T13:45:20.018200",
          "text": "seems like we should just fix that"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-03-20T13:46:11.018400",
          "text": "I sure wouldn't say no to that.  But it does sound like there's a broader library of curve-based pict builders that could easily exist, and metapict is a good start on them..."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T13:54:40.019500",
          "text": "<@Jamila> re the panorama and rotate issue: <https://github.com/racket/pict/pull/51>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-20T14:19:13.020000",
          "text": "one more optional argument"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-20T14:19:23.020200",
          "text": "n more functions is so much added complexity"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T14:20:23.020500",
          "text": "Consider  get-path-bounding-box"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T14:20:52.020700",
          "text": "Sounds like a plan. I'll try to add it later today"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:11:44.025600",
          "text": "It is an explicit protocol "
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:11:58.025800",
          "text": "Not an implicit one. "
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:26:16.028100",
          "text": "Rereading your question I think that maybe I actually don't understand it. Certainly contracts do not, unless there are bugs, go to lengths to compute something and then not use it for ease of implementation....."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:26:52.029100",
          "text": "And the protocols are explicit. Which I don't think is synonymous with documented although I understand why you might think that. "
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:39:49.034200",
          "text": "<@Alden> Okay, let me rephrase with an example, since I get the sense that I didn’t make my question very clear. I was intrigued that this program does not raise an exception:\n```\n#lang racket\n\n(require racket/contract/private/blame\n         syntax/location)\n\n(define ctc (-&gt; any/c))\n(define blame (make-blame (quote-srcloc) 'foo (λ () (contract-name ctc)) 'pos #f #t))\n(((contract-val-first-projection ctc) blame) 'not-a-function)\n```\nI found it interesting because I know that `-&gt;` implements its own val first projection, so it wasn’t just using the adapter around the late neg projection that would wait until all the arguments had been supplied to raise an error. I looked at the implementation of `-&gt;`’s val first projection, and I saw that when the first-order check fails, even if it has all the blame information necessary to report an error, it explicitly waits to do so until the negative party is provided. The rest of the projection does nothing at all except call `raise-blame-error`, like this:\n```\n(unless (procedure? val)\n  (k\n   (λ (neg-party)\n     (raise-blame-error blame #:missing-party neg-party val\n                        `(expected: ,proc/meth\n                                    given: \"~e\")\n                        val))))\n```\nSo I was wondering: if I were to define my own contract, with its own val first projection, am I expected to wait until I get the negative party until I call `raise-blame-error`? And if so, why, and is it documented anywhere?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:40:57.034700",
          "text": "Oh! I see my confusion — I somehow confused late-neg and val-first."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:41:06.035000",
          "text": "The answer is: don’t define any val-first projections."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:41:13.035200",
          "text": "that’s there only for legacy reasons"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:41:36.035900",
          "text": "But yes, the protocol for val-first is not to raise blame until you have all of the blam einformation."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:42:10.037200",
          "text": "There is some case where the literal interpretation of that isn’t followed (ie positive blame may be raised in a server module before it gets required but tht’s a separate issue)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:42:17.037300",
          "text": "Ah yes I do. That might fixe the first problem, let me try"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:42:56.038100",
          "text": "Is val first really only for legacy uses, though? I imagine it doesn’t matter that much for most contracts, but it seems like it could matter for `-&gt;` (since it’s used so often). Since `contract-out` has the value but _not_ the negative party inside the providing module, `-&gt;`’s val first projection skips performing the first order checks every time it’s used in a different module (and therefore has a different negative party)."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:43:39.038700",
          "text": "If it only provided a late neg projection, it’d have to do those first order checks again inside every importing module."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:44:31.039600",
          "text": "val first really is only for legacy, yes."
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:44:37.039900",
          "text": "it should be avoided"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:44:51.040300",
          "text": "Maybe my bigger question is why val first projections are deprecated at all if most contracts are attached with `contract-out`, anyway… which really does get the value before it gets the negative party, so it has to do the currying anyway."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:45:06.040700",
          "text": "What does using late neg projections save over using val first projections?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:45:12.040900",
          "text": "it doesn’t do currying"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:45:16.041100",
          "text": "it gets called twice"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:47:08.042700",
          "text": "Sure, but it still closes over the blame object, so don’t you end up having to do the same amount of allocation? Or is the point that you don’t have a lingering reference to `val` in the closure…? I guess I’m confused, but it doesn’t really matter, I was mostly just curious."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:47:40.043100",
          "text": "oh no i take it back i don’t have the `dc` there…"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:48:10.043900",
          "text": "I guess I could see that, for subcontracts where the blame is swapped, you lose with the val first projection because you have to apply the curried function, and you already have the negative party at that point."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:48:33.044200",
          "text": "Okay - so the question is whether we can get a tighter bounding box for a path (without knowing the pen size)."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:48:44.044600",
          "text": "Maybe there is something low-level in Cairo?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:49:00.045100",
          "text": "The pen size is known at this point"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:49:01.045300",
          "text": "the currying with late-neg isn’t helpful; might as well just take the two arguments at once"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:49:26.045700",
          "text": "It looks like `get-path-bounding-box` is actually implemented as a low level cairo operation"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:50:16.046800",
          "text": "(in path%)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:50:24.047100",
          "text": "But it _is_ helpful for the top-level projection of a contract inside `contract-out`, right? Since when a contract is attached to a value with `contract-out`, you _do_ have the value but not the negative party. If that isn’t true, why does `contract-out` use the val first projection instead of the late neg projection?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:50:35.047200",
          "text": "Yes - I think I was partly responsible for that one."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:50:50.047400",
          "text": "I get a \"connection refused\" from <https://www.cairographics.org/>"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:50:50.047600",
          "text": "But I’m rather heistent to bring something that low-level into pict directly"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:50:51.047800",
          "text": "?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:51:26.048500",
          "text": "huh same. whomp"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:51:45.049200",
          "text": "not really"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:51:49.049400",
          "text": "top-level doesn’t matter"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T16:51:52.049600",
          "text": "side request: can we document the deprecation of val-first projections more explicitly?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:51:58.049800",
          "text": "it doesn’t happen in a loop (in most programs)"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:52:04.050000",
          "text": "<@Karen> that sounds like a great idea"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:52:20.050600",
          "text": "but the other stuff does"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:52:23.050900",
          "text": "(happen in a loop)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:53:26.052200",
          "text": "I could always make a `record-dc%` or something like that and call `get-path-bounding-box` directly on that"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:53:41.052500",
          "text": "Sounds expensive."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:53:58.053000",
          "text": "Okay, yeah, I’ll buy that. But then why bother having a val first projection on `-&gt;` at all? And why bother using the val first projection inside the implementation of `contract-out`, with a big comment explaining that it’s a legitimate use (which I don’t actually understand)?\n```\n  (define p (parameterize ([warn-about-val-first? #f])\n              ;; when we're building the val-first projection\n              ;; here we might be needing the plus1 arity\n              ;; function (which will be on the val first's result)\n              ;; so this is a legtimate use. don't warn.\n              (get/build-val-first-projection ctc)))\n```"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:54:25.053200",
          "text": "we can delete it"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:54:32.053400",
          "text": "(that’s the royal we, of course)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:54:48.053800",
          "text": "Okay, I’m happy with that answer. :)"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:55:15.054800",
          "text": "There is some code that still uses val-first projections and for that code, it is nice to have a proper val-first -&gt;"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T16:55:21.055200",
          "text": "Did it exist before late neg contracts were added?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:55:22.055300",
          "text": "<https://developer.gnome.org/cairo/stable/cairo-Paths.html#cairo-path-extents>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T16:55:24.055500",
          "text": "Ah"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:55:47.056000",
          "text": "It would be best to get rid of all val-first projections. The hangers on are, I believe, the `opt/c` contracts."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:55:50.056200",
          "text": "Is `cairo_path_extents` what `get-path-bounding-box` uses?"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:55:56.056500",
          "text": "so they should probably be fixed before removing that"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:56:15.057100",
          "text": "and probalby it would be good to set up something like drdr but for the gradual typing benchmark too"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:56:25.057600",
          "text": "so to make sure the change doesn’t have unintended consequences"
        },
        {
          "user": "Alden",
          "timestamp": "2019-03-20T16:56:51.058100",
          "text": "But yes, <@Karen>, val-first existed before late-neg (and `#:projection` before either)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:56:58.058200",
          "text": "sometimes"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:57:06.058400",
          "text": "```\n(define cairo_op\n              (cond\n                [(eq? type 'path)   cairo_path_extents]\n                [(eq? type 'fill)   cairo_fill_extents]\n                [(eq? type 'stroke) cairo_stroke_extents]\n                [else (error 'get-tight-binding-boc \"expected 'path, 'fill, or, 'stroke\")]))\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:58:03.059100",
          "text": "Yeah. One can see the original function name in the error message :slightly_smiling_face:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T16:58:31.059600",
          "text": "this is a tangent, but how can I make a code searching tool for racket that’s 1) binding and macro aware and 2) multi-module + multi-package?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T16:59:21.060400",
          "text": "I’m guessing there have been a couple of attempts at that kind of thing before"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:59:51.060500",
          "text": "lol"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T17:00:40.060700",
          "text": "Could we make a new, scratch drawing context with a pen size 1 and use that as the `cr` (cairo \"context\")?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-20T17:02:49.062200",
          "text": "What do you mean by searching in a “macro-aware” way?\nDo you mean that if I had a macro def and call like this:\n```\n(define-simple-macro (m x) (f x))\n(m (g 5))\n```\nSearching for `(f (g 5))` would succeed?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T17:03:31.062600",
          "text": "Thats what I meant by using a `record-dc%` or something"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:03:46.063000",
          "text": "Possibly, yes. But really I’m only thinking of searching for usages of single identifiers, not for patterns of usages."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T17:03:54.063200",
          "text": "I can create one once an reuse for all the pin-arrow calls"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:03:59.063500",
          "text": "(at least, as a first draft)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T17:04:21.063800",
          "text": "but IDK what will happen if the curve extends outside of the dc’s bounds"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T17:05:40.065400",
          "text": "it does"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T17:05:45.065700",
          "text": "great"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T17:05:57.066100",
          "text": "but i think I can just use an empty bitmap-dc instead"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:06:29.066700",
          "text": "Some specific things I’d like to handle are modules that reprovide and rename the exports of other modules and macros that produce usages of things"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:07:54.067400",
          "text": "And I’d like to be able to search across the source code of all packages in the entire package catalog for usages"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T17:16:13.067500",
          "text": "yeah, it looks like the backing DC needs to be big enough to draw the entire path already"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T17:16:18.067700",
          "text": "that’s annoying"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-20T17:18:18.068900",
          "text": "Oooh, would it “purposefully not find” anything if you were searching for `add1` in this:\n```\n(define-simple-macro (m x e) (let ([x 5]) e))\n(m add1 add1)\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:20:11.069300",
          "text": "Yes, I definitely think it _shouldn’t_ count that as a usage of `add1`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-20T17:33:26.071200",
          "text": "Should it find anything in a situation like this?\n```\n(define-simple-macro (m x y z)\n  #:with yz/x (format-id #'x \"~a~a\" #'y (syntax-e #'z))\n  (yz/x 5))\n(m here add 1)\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:36:19.073000",
          "text": "It’s not _not_ a usage of add1. And multiple occurrences of `(m here add 1)` is definitely a different case than just one occurrence or no occurrences at all. But I don’t know how to report it meaningfully to a user."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:37:39.074300",
          "text": "and I think its different if the definition of `m` is in its own module and imported by many modules that each write `(m here add 1)`, because there needs to be some way to tell the user that although add1 is being used in each of these client modules, they’re all the result of the same macro"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-20T17:37:47.074500",
          "text": "Now what about\n(define-simple-macro (m x y z)\n  #:with yz/x (if (today-is-tuesday?) (format-id #’x “~a~a” #’y (syntax-e #’z)) #’sub1)\n  (yz/x 5))\n(m here add 1)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:39:34.075900",
          "text": "Yeah that should still count. Macro implementations using nondeterminism / IO are a case of caveat emptor. If the expanded code is nondeterministic, then it seems logical to me that the usages found in expanded code are nondeterministic."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-20T17:47:02.079400",
          "text": "Okay. Now what about match-expanders where you use the pattern form but not the expression form?\nLike searching for uses of `m`:\n```\n(define-match-expander m\n  (syntax-parser [(_) #'5])\n  (syntax-parser [(_) #'5]))\n```\nIn:\n```\n(match (+ 2 3)\n  [(m) #true]\n  [_ #false])\n```\nBoth in the version of match that uses the `'origin` and `'disappeared-use` properties to save this information, and in a hypothetical version of match that didn’t save those properties."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:51:15.082800",
          "text": "If you’re searching for usages of `m` then both forms should count as usages. I think there should be some way to name the two forms of `m`. I made a syntax annotations library that did this kind of thing by forcing all such “multi-meaning” identifiers to be implemented as rename transformers that can be configured to expand to different bindings. In this context that would mean that `m` would be something like a struct with two fields, each of which contains an identifier. The first is used for expressions and the second for patterns. So instead of searching for `m`, you’d search for one of those two identifiers contained _within_ `m` if you wanted to search for usages of just one of the two forms of `m`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:51:43.083600",
          "text": "The problem with this approach to searching is that identifiers aren’t serializable. So how do you build and save a search index?"
        }
      ]
    },
    {
      "conversation_id": "335",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Alden Why doesn’t [CODE]’s val first projection raise blame errors for first-order, positive violations before receiving the negative party? It seems to do all the work of checking for such violations before receiving the missing party, so it’s clearly taking advantage of not having to do that work twice, but I’m unclear on why it defers actually signaling the error. Is there some implicit protocol that val first projections aren’t supposed to raise errors until given the missing party?\nGonzalo: (If the answer is just “it was easier to implement that way”, that’s fine; I’m mostly just trying to understand if signaling an error earlier in a custom contract’s val first projection would be considered bad.)\nGonzalo: Oh? Where is it documented?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 29.45,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T15:43:55.024500",
          "text": "<@Alden> Why doesn’t `-&gt;`’s val first projection raise blame errors for first-order, positive violations before receiving the negative party? It seems to do all the work of checking for such violations before receiving the missing party, so it’s clearly taking advantage of not having to do that work twice, but I’m unclear on why it defers actually signaling the error. Is there some implicit protocol that val first projections aren’t supposed to raise errors until given the missing party?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T15:46:08.025300",
          "text": "(If the answer is just “it was easier to implement that way”, that’s fine; I’m mostly just trying to understand if signaling an error earlier in a custom contract’s val first projection would be considered bad.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-20T16:13:22.026100",
          "text": "Oh? Where is it documented?"
        }
      ]
    },
    {
      "conversation_id": "336",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tambra: hrm, this is a little tricky. [CODE] from [CODE] gives a bounding box that contains the bezier control points, not just the path. Also the bit that adds the arrow head uses picts (undocumented) internal drawing language, and I haven’t the foggiest how to go about convincing this to extend the bounding box in the right way. Also panorama behaves oddly on the result of [CODE], extending the bounding box in places where nothing is actually drawn…\nTambra: so in short I haven’t the foggiest how to do this without adding a bunch of extra whitespace\nPriscila: get-path-bounding-box from dc% ought to give a tighter bound - but do you have the drawing context?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 1.48,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:38:12.032200",
          "text": "hrm, this is a little tricky. `get-bounding-box` from `dc-path%` gives a bounding box that contains the bezier control points, not just the path. Also the bit that adds the arrow head uses picts (undocumented) internal drawing language, and I haven’t the foggiest how to go about convincing this to extend the bounding box in the right way. Also panorama behaves oddly on the result of `pin-arrow-line`, extending the bounding box in places where nothing is actually drawn…"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T16:38:31.032700",
          "text": "so in short I haven’t the foggiest how to do this without adding a bunch of extra whitespace"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T16:39:41.033900",
          "text": "get-path-bounding-box from dc% ought to give a tighter bound - but do you have the drawing context?"
        }
      ]
    },
    {
      "conversation_id": "337",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Ah. Does a record-dc% even have a cairo backing?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-20T17:05:18.064800",
          "text": "Ah. Does a record-dc% even have a cairo backing?"
        }
      ]
    },
    {
      "conversation_id": "338",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Very good example",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-20T17:20:20.069500",
          "text": "Very good example"
        }
      ]
    },
    {
      "conversation_id": "339",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: is there a good way to get [CODE] to spit out xelatex sources for a document? the [CODE] flag has it try to generate a pdf, which is not very helpful for debugging.\nKristeen: Leticia you should be able to generate latex sources with [CODE] and then compile that with [CODE]\nLeticia: Kristeen yes, but that uses the latex pdf rendering mixin and not the xelatex one, right?\nKristeen: the only difference between those is what command is used\nKristeen: see the two functions here: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 28.37,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-20T20:30:02.084800",
          "text": "is there a good way to get `scribble` to spit out xelatex sources for a document? the `--xelatex` flag has it try to generate a pdf, which is not very helpful for debugging."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-20T20:45:23.085500",
          "text": "<@Leticia> you should be able to generate latex sources with `--latex` and then compile that with `xelatex`"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-20T20:55:10.086200",
          "text": "<@Kristeen> yes, but that uses the latex pdf rendering mixin and not the xelatex one, right?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-20T20:57:58.086500",
          "text": "the only difference between those is what command is used"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-20T20:58:24.086800",
          "text": "see the two functions here: <https://github.com/racket/scribble/blob/master/scribble-lib/scribble/pdf-render.rkt>"
        }
      ]
    },
    {
      "conversation_id": "340",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tambra: I’m trying to (re)build racket form source on a Mac, but I’ve started getting a fun error: [CODE_BLOCK] (plus lots of other undefined symbols) Anyone have any idea how to go about debugging this?\nTambra: ah, somehow the wrong version of [CODE] was in my path… fun…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 11.23,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T22:30:20.088000",
          "text": "I’m trying to (re)build racket form source on a Mac, but I’ve started getting a fun error:\n\n```\ngcc -o racketcgc   main.o -Wl,-headerpad_max_install_names -F. -framework Racket -ldl -lm  -liconv\nUndefined symbols for architecture x86_64:\n  \"_GC_malloc\", referenced from:\n      _main_after_stack in main.o\n```\n(plus lots of other undefined symbols)\n\nAnyone have any idea how to go about debugging this?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-20T22:41:34.088700",
          "text": "ah, somehow the wrong version of `ar` was in my path… fun…"
        }
      ]
    },
    {
      "conversation_id": "341",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clarinda Assuming the module currently being expanded is, in fact, located somewhere on disk, is there any reliable way to get its path on the filesystem? [CODE] seems to reliably return a resolved module path with a [CODE] in it when used at phase 0 (I assume because it comes from the value of [CODE] when the module is actually evaluated), but at phase 1, it just returns the symbolic name of the module. I suppose I can use [CODE] on some piece of syntax and hope that the reader sticks the right path in there, but I’m wondering if there’s any other way.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-21T14:40:11.092600",
          "text": "<@Clarinda> Assuming the module currently being expanded is, in fact, located somewhere on disk, is there any reliable way to get its path on the filesystem? `(variable-reference-&gt;resolved-module-path (#%variable-reference))` seems to reliably return a resolved module path with a `path?` in it when used at phase 0 (I assume because it comes from the value of `current-module-declare-name` when the module is actually evaluated), but at phase 1, it just returns the symbolic name of the module. I suppose I can use `syntax-source` on some piece of syntax and hope that the reader sticks the right path in there, but I’m wondering if there’s any other way."
        }
      ]
    },
    {
      "conversation_id": "342",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Seeing the RacketCon 2019 keynote choice made me realize how many dumb questions I have about Rust and the Racket FFI. Like: 1. Can Rust produce C shared libs, that Racket's FFI could use, today? 2. Could Rust produce something \"richer\" (more knowledge about object lifetimes or whatever, _waves hands_) that an enhanced Racket FFI could utilize, to make things safer, faster, or both?\nKristeen: 1. Yes\nEileen: 1. I think so 2. probably not ?\nKristeen: 2. probably? but it's not obvious what that would be.\nEileen: I was under the impression that lifetimes were erased so the runtime wouldn't have much insight into that. Although Julia did say \"enhanced Racket FFI\" so...\nKristeen: I was imagining that you'd do something with the static information ahead-of-time",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 15.33,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Eileen",
          "Julia",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-21T15:59:35.095700",
          "text": "Seeing the RacketCon 2019 keynote choice made me realize how many dumb questions I have about Rust and the Racket FFI.\nLike:\n1. Can Rust produce C shared libs, that Racket's FFI could use, today?\n2. Could Rust produce something \"richer\" (more knowledge about object lifetimes or whatever, _waves hands_) that an enhanced Racket FFI could utilize, to make things safer, faster, or both?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-21T16:06:04.096000",
          "text": "1. Yes"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-21T16:06:10.096300",
          "text": "1. I think so 2. probably not ?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-21T16:06:28.096600",
          "text": "2. probably? but it's not obvious what that would be."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-21T16:09:56.097800",
          "text": "I was under the impression that lifetimes were erased so the runtime wouldn't have much insight into that.  Although <@Julia> did say \"enhanced Racket FFI\" so..."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-21T16:14:55.098300",
          "text": "I was imagining that you'd do something with the static information ahead-of-time"
        }
      ]
    },
    {
      "conversation_id": "343",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: I don’t think there’s a good way to do that. Can I ask what use you had in mind?\nGonzalo: The use I had is a hack, anyway, so it isn’t a big deal, I was just wondering if there was an easier way. It isn’t a good/valid use case. :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 3.32,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-21T17:02:12.098600",
          "text": "I don’t think there’s a good way to do that. Can I ask what use you had in mind?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-21T17:05:31.098800",
          "text": "The use I had is a hack, anyway, so it isn’t a big deal, I was just wondering if there was an easier way. It isn’t a good/valid use case. :)"
        }
      ]
    },
    {
      "conversation_id": "344",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herman: Am I right in thinking there is no tree widget in the racket gui library?\nPriscila: There is a \"tree\" widget, but I can't remember whether it is a package or a part of the gui library.\nPriscila: <[URL]\nHerman: Ah, I couldn't find it in the docs.\nHerman: Thanks\nPriscila: It's in the \"MrLib: Extra GUI Libraries.\" <[URL]\nHerman: Cool. Didn't think of looking for Hierarchical List Control :grin:\nPriscila: I cheated - I googled it - and found a reddit answer pointing to the answer.\nHerman: Haha.. Thanks again\nHallie: I see this question (tree widget) so often that I wonder: maybe it is time to move it to base gui lib?\nPriscila: Example: <[URL]\nHerman: Nice",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 12,
        "duration_minutes": 5.03,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Herman",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Herman",
          "timestamp": "2019-03-22T09:58:35.099800",
          "text": "Am I right in thinking there is no tree widget in the racket gui library?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-22T09:59:44.100700",
          "text": "There is a \"tree\" widget, but I can't remember whether it is a package or a part of the gui library."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-22T10:00:46.101200",
          "text": "<https://docs.racket-lang.org/mrlib/Hierarchical_List_Control.html>"
        },
        {
          "user": "Herman",
          "timestamp": "2019-03-22T10:00:49.101300",
          "text": "Ah, I couldn't find it in the docs."
        },
        {
          "user": "Herman",
          "timestamp": "2019-03-22T10:00:52.101500",
          "text": "Thanks"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-22T10:01:18.102000",
          "text": "It's in the \"MrLib: Extra GUI Libraries.\"  <https://docs.racket-lang.org/mrlib/index.html>"
        },
        {
          "user": "Herman",
          "timestamp": "2019-03-22T10:02:02.103100",
          "text": "Cool. Didn't think of looking for Hierarchical List Control :grin:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-22T10:02:32.104000",
          "text": "I cheated - I googled it - and found a reddit answer pointing to the answer."
        },
        {
          "user": "Herman",
          "timestamp": "2019-03-22T10:02:46.104400",
          "text": "Haha.. Thanks again"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-03-22T10:02:46.104500",
          "text": "I see this question (tree widget) so often that I wonder: maybe it is time to move it to base gui lib?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-22T10:03:00.104700",
          "text": "Example:  <https://github.com/tonyg/racket-explorer>"
        },
        {
          "user": "Herman",
          "timestamp": "2019-03-22T10:03:37.105200",
          "text": "Nice"
        }
      ]
    },
    {
      "conversation_id": "345",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: TIL that you can apparently successfully stick procedures that aren’t structs and don’t close over anything in compiled code.\nKaren: [EMAIL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 35.37,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-22T13:48:06.105800",
          "text": "TIL that you can apparently successfully stick procedures that aren’t structs and don’t close over anything in compiled code."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-22T14:23:28.106200",
          "text": "<@Gonzalo>....what"
        }
      ]
    },
    {
      "conversation_id": "346",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Please don’t do that. :slightly_smiling_face:\nElin: :no_mouth:\nEileen: Not sure I understand the ramifications. Could you subvert a compiled procedure or exported name?\nGonzalo: I was not intending to. :)\nElin: I may have done this in the [CODE] package for [CODE]. Is there a “good” way, an alternative?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 5,
        "duration_minutes": 8.92,
        "contains_question": true,
        "action_keywords": [
          "please"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Eileen",
          "Elin",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-22T15:56:56.106400",
          "text": "Please don’t do that. :slightly_smiling_face:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T16:03:09.107400",
          "text": ":no_mouth:"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-22T16:03:11.107500",
          "text": "Not sure I understand the ramifications.  Could you subvert a compiled procedure or exported name?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-22T16:03:50.108000",
          "text": "I was not intending to. :)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T16:05:51.109200",
          "text": "I may have done this in the `debug` package for `(debug-repl)`. Is there a “good” way, an alternative?"
        }
      ]
    },
    {
      "conversation_id": "347",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: I’m assuming that Gonzalo means something like [CODE_BLOCK] although that example will only work if the JIT is disabled. It works accidentally due to the way the bytecode compiler represents closed [CODE] forms in compiled code. It doesn’t work with Racket CS. It also doesn’t create any particular security holes, since you could always have constructed the bytecode stream manually. But it’s unspecified and unintended behavior that’s a little tedious to prevent, so I’d prefer to keep ignoring the issue. Injecting procedures into syntax where you’re not going to marshal is a somewhat different issue, and debugging is one of the cases where that seems useful (enough that we haven’t changed [CODE] to disallow it).\nLeticia: In typed racket, I’m not really clear on the difference between [CODE] and [CODE].\nKaren: Leticia The first type accepts any number of arguments, but the second type accepts _at least one_ argument. I think.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 204.6,
        "contains_question": false,
        "action_keywords": [
          "create",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Karen",
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-22T17:01:18.114800",
          "text": "I’m assuming that <@Gonzalo> means something like\n```\n(let-values ([(i o) (make-pipe)])\n  (write (compile (lambda (x) x)) o) ; `lambda` term is not quoted\n  (eval\n   (parameterize ([read-accept-compiled #t])\n     (read i))))\n```\nalthough that example will only work if the JIT is disabled. It works accidentally due to the way the bytecode compiler represents closed `lambda` forms in compiled code. It doesn’t work with Racket CS. It also doesn’t create any particular security holes, since you could always have constructed the bytecode stream manually. But it’s unspecified and unintended behavior that’s a little tedious to prevent, so I’d prefer to keep ignoring the issue.\n\nInjecting procedures into syntax where you’re not going to marshal is a somewhat different issue, and debugging is one of the cases where that seems useful (enough that we haven’t changed `datum-&gt;syntax` to disallow it)."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-22T18:55:12.116000",
          "text": "In typed racket, I’m not really clear on the difference between `(All (a ...) (a ... -&gt; Symbol))` and `(All (a ...) (a ... a -&gt; Symbol))`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-22T20:25:54.117700",
          "text": "<@Leticia> The first type accepts any number of arguments, but the second type accepts _at least one_ argument. I think."
        }
      ]
    },
    {
      "conversation_id": "348",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I don't use TR much so I'm guessing\nElin: I didn’t know that the first one was legal.\nElin: The second one, I think of like the [CODE] means [CODE], with a subscript a.\nElin: The ellipsis repeats the thing before it with the same number of times as the type variable [CODE] is repeated.\nElin: The first one, I don’t know what it does.\nLeticia: Elin after some further investigation, I think they do the same thing?\nLeticia: if I define something as type [CODE]\nLeticia: and ask the repl what it is\nLeticia: it spits back [CODE]\nElin: Oh, so _tvar_ ... is shorthand for _tvar_ … _tvar_, I guess.\nElin: The type variable usage is repeated the same number of times as the type variable in the input.\nElin: I didn’t know that.\nKristeen: Elin Leticia they do the same thing; TR infers the second a in the first one",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 1189.92,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Karen",
          "Kristeen",
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-22T20:26:27.118200",
          "text": "I don't use TR much so I'm guessing"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T20:36:51.118500",
          "text": "I didn’t know that the first one was legal."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T20:37:36.119200",
          "text": "The second one, I think of like the `... a` means `...ₐ`, with a subscript a."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T20:38:10.119800",
          "text": "The ellipsis repeats the thing before it with the same number of times as the type variable `a` is repeated."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T20:38:18.120100",
          "text": "The first one, I don’t know what it does."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-22T20:42:43.121100",
          "text": "<@Elin> after some further investigation, I think they do the same thing?"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-22T20:43:05.121500",
          "text": "if I define something as type `(All (a ...) (a ... -&gt; Symbol))`"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-22T20:43:18.121800",
          "text": "and ask the repl what it is"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-22T20:43:23.122100",
          "text": "it spits back `(All (a ...) (a ... a -&gt; Symbol))`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T20:45:39.123300",
          "text": "Oh, so _tvar_ ... is shorthand for _tvar_ … _tvar_, I guess."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T20:46:18.123900",
          "text": "The type variable usage is repeated the same number of times as the type variable in the input."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-22T20:46:28.124100",
          "text": "I didn’t know that."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-23T16:16:22.125800",
          "text": "<@Elin> <@Leticia> they do the same thing;  TR infers the second a in the first one"
        }
      ]
    },
    {
      "conversation_id": "349",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: So I’ve been talking to my LaTeX gnome, who objects to the presence of the line [CODE_BLOCK] in the XeLaTeX output, as it manages to break some things.\nLeticia: &gt; The LaTeX source includes stuff that transforms UTF-8 byte sequences into LaTeX commands. However, XeTeX doesn’t serve bytes, but whole characters, causing the stuff to break. &gt; The source file contains some engine-specific code, notably, the code that tries to transform UTF-8 text into commands. &gt; Otherwise, the document appears to be XeLaTeX compatible. &gt; The line &gt; [CODE] &gt; is what tries to transform UTF-8 text into commands, thus breaking some text. Removing it will fix the botched text.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 5.45,
        "contains_question": false,
        "action_keywords": [
          "fix",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-22T23:19:07.124400",
          "text": "So I’ve been talking to my LaTeX gnome, who objects to the presence of the line\n\n```\n\\usepackage[utf8]{inputenc}\n```\n\nin the XeLaTeX output, as it manages to break some things."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-22T23:24:34.124700",
          "text": "&gt; The LaTeX source includes stuff that transforms UTF-8 byte sequences into LaTeX commands. However, XeTeX doesn’t serve bytes, but whole characters, causing the stuff to break.\n\n&gt; The source file contains some engine-specific code, notably, the code that tries to transform UTF-8 text into commands.\n&gt; Otherwise, the document appears to be XeLaTeX compatible.\n&gt; The line\n&gt; `\\usepackage[utf8]{inputenc}`\n&gt; is what tries to transform UTF-8 text into commands, thus breaking some text.\nRemoving it will fix the botched text."
        }
      ]
    },
    {
      "conversation_id": "350",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marceline: Hi. I asked that question on Stack Overflow. I managed to come up with something that works for me (posted an answer to that question).\nMarceline: Basically, wrapper files and [CODE]\nMarceline: Yeah, that's a bummer. We could think about writing an SRFI to propose [CODE], but even nicer would be to have Racket's [CODE] in Schemes. It would be more flexible. Also playing well with Unix shebang lines ([CODE]) should be taken into account.\nMarceline: Seriously, if anyone wants to write that SRFI with me let's do it. The reason I ended up here in the first place is we're trying to improve the parsing/tooling around SRFI documents on the srfi-discuss mailing list. I wrote an experimental CI server for the SRFI process in Racket with a portable core in R7RS. It's my first Racket (and R7RS) program ever and Racket made the job easy so I'm a happy camper :slightly_smiling_face:\nMarceline: On an unrelated note, I couldn't find a [CODE] library for Racket (i.e. parse the [CODE] environment variable, figure out what database driver and settings to use, and return a ready-to-use database connection). If there isn't one yet, let's make one. It\nMarceline: shouldn't be much effort at all.\nMarceline: Another thing that would be nice to have a uniform interface to, is archive files. Currently the unzip/untar modules differ in functionality and interface. I can also help with this if someone can mentor (I have no idea how to publish packages and what the process is for getting things into the base distribution).\nMarceline: On yet another note, if anyone is interested in automatic code formatters, talk to me :slightly_smiling_face: Most Lisps have fairly similar syntax and indentation/line breaking concerns, so we could try to write a code formatter using only R7RS and immutable data structures. If the program used such a restricted language it ought to be easy to auto-translate it to Racket, Common Lisp, Clojure, etc. to fit in the respective workflows in each community.\nMarceline: I can't tell whether you're joking or being serious. Just consider me a complete noob and you're not far off the mark :stuck_out_tongue:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 9,
        "duration_minutes": 109.75,
        "contains_question": false,
        "action_keywords": [
          "complete",
          "discuss",
          "let's",
          "should"
        ],
        "decision_keywords": [
          "works for me"
        ],
        "participants": [
          "Marceline"
        ]
      },
      "timeline": [
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T05:51:11.128600",
          "text": "Hi. I asked that question on Stack Overflow. I managed to come up with something that works for me (posted an answer to that question)."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T05:51:58.129000",
          "text": "Basically, wrapper files and `include`"
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T06:03:55.129200",
          "text": "Yeah, that's a bummer. We could think about writing an SRFI to propose `#!r7rs`, but even nicer would be to have Racket's `#lang` in Schemes. It would be more flexible. Also playing well with Unix shebang lines (`#!`) should be taken into account."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T06:22:34.133100",
          "text": "Seriously, if anyone wants to write that SRFI with me let's do it. The reason I ended up here in the first place is we're trying to improve the parsing/tooling around SRFI documents on the srfi-discuss mailing list. I wrote an experimental CI server for the SRFI process in Racket with a portable core in R7RS. It's my first Racket (and R7RS) program ever and Racket made the job easy so I'm a happy camper :slightly_smiling_face:"
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T06:24:44.135500",
          "text": "On an unrelated note, I couldn't find a `database-url` library for Racket (i.e. parse the `DATABASE_URL` environment variable, figure out what database driver and settings to use, and return a ready-to-use database connection). If there isn't one yet, let's make one. It"
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T06:25:22.136200",
          "text": "shouldn't be much effort at all."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T06:39:10.140200",
          "text": "Another thing that would be nice to have a uniform interface to, is archive files. Currently the unzip/untar modules differ in functionality and interface. I can also help with this if someone can mentor (I have no idea how to publish packages and what the process is for getting things into the base distribution)."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T06:55:43.144200",
          "text": "On yet another note, if anyone is interested in automatic code formatters, talk to me :slightly_smiling_face: Most Lisps have fairly similar syntax and indentation/line breaking concerns, so we could try to write a code formatter using only R7RS and immutable data structures. If the program used such a restricted language it ought to be easy to auto-translate it to Racket, Common Lisp, Clojure, etc. to fit in the respective workflows in each community."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T07:40:56.145700",
          "text": "I can't tell whether you're joking or being serious. Just consider me a complete noob and you're not far off the mark :stuck_out_tongue:"
        }
      ]
    },
    {
      "conversation_id": "351",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: We have a new time!\nPriscila: (require (for-indentation ...))\nPriscila: Bit of both.\nPriscila: It would be great, when defining a macro with a new syntax, to be able to tell the indenter how the various subforms of an macro application should be indented.\nPriscila: But at the same time it also feels a bit over-engineered.\nMarceline: Not over-engineered if you ask me. I've been wanting that in Common Lisp for years. As they say, \"the complexity has to go somewhere\". If the source code doesn't specify macro indentation then everyone has to specify it in their own text editor config. The editor could hunt down the original macro definitions and parse them but that's a steep requirement for an editor.\nMarceline: The editor could ask a \"language server\" about the indentation but relying on that is brittle and complex on many levels.\nMarceline: Plus it would be nice to be able to run an indenter from the command line without involving text editors or language servers.\nMarceline: I don't know which Racket lang has the most complex syntax at the moment, but for languages not as simple as Lisp, code formatter settings can get very complex over the years. Obligatory link to [CODE] options: <[URL]\nMarceline: Many existing formatters for non-Racket languages just use a configuration file in the root directory of your project, including [CODE].\nMarceline: Plus if Racket implements a language that also has non-Racket implementations, it'd be really nice if all those implementations could read formatting options from the same place. That could rule out storing the options in [CODE].\nMarceline: Also some established languages have several competing formatters and people don't agree on which one to use.\nMarceline: The Unibeautify project is trying to develop a common vocabulary for different formatters' settings: <[URL] I'll gladly help to get any Lisp-flavored languages represented in it.\nDeeanna: Is there a known issue/interaction between dynamic-rerequire and the IO system? I've been trying to figure out why my DB queries sporadically take significantly longer (&gt;1s rather than less than 1ms on average) than they should after my code reloads (and *only* after the first time it reloads). I've ruled out the database and I've also ruled out the [CODE] package (I linked it locally and started profiling every function on the call stack for a query). Profiling the [CODE] package, I found that [CODE] (i.e. reading the next character from the db connection) is taking up all of the time when those slowdowns occur. Upon every reload, my code restarts the web-server and the db connection pool so I don't think this is to do with any lingering ports or custodians (I've tried creating a new custodian to hold everything and shutting it down for every reload, no luck w/ that either). Any ideas what might be causing my issue?\nPriscila: Best idea: Make a minimal example and post it to the mailing list.\nPriscila: Which isn't that simple to make in your situation.\nDeeanna: Yeah, there are quite a few moving parts, but I'll try to do that if I can't figure it out soon.\nDeeanna: What would really help debug this is if I could somehow instrument all running threads and tell them to print something to standard out when they wake up. Is there such a hook available?\nDeeanna: My suspicion is that, upon reload, some background threads end up leaking and when [CODE] is called, the scheduler wakes up one of those threads and it does... something that takes up all that time.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 19,
        "duration_minutes": 125.92,
        "contains_question": true,
        "action_keywords": [
          "action",
          "agree",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Deeanna",
          "Marceline",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T07:36:01.144400",
          "text": "We have a new time!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T07:36:06.144600",
          "text": "(require (for-indentation ...))"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T07:41:12.145900",
          "text": "Bit of both."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T07:42:40.147300",
          "text": "It would be great, when defining a macro with a new syntax, to be able to tell the indenter how the various subforms of an macro application should be indented."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T07:43:36.148200",
          "text": "But at the same time it also feels a bit over-engineered."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T07:46:57.151500",
          "text": "Not over-engineered if you ask me. I've been wanting that in Common Lisp for years. As they say, \"the complexity has to go somewhere\". If the source code doesn't specify macro indentation then everyone has to specify it in their own text editor config. The editor could hunt down the original macro definitions and parse them but that's a steep requirement for an editor."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T07:48:40.152300",
          "text": "The editor could ask a \"language server\" about the indentation but relying on that is brittle and complex on many levels."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T07:49:51.153200",
          "text": "Plus it would be nice to be able to run an indenter from the command line without involving text editors or language servers."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T09:11:24.159500",
          "text": "I don't know which Racket lang has the most complex syntax at the moment, but for languages not as simple as Lisp, code formatter settings can get very complex over the years. Obligatory link to `clang-format` options: <https://clang.llvm.org/docs/ClangFormatStyleOptions.html>"
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T09:12:37.160400",
          "text": "Many existing formatters for non-Racket languages just use a configuration file in the root directory of your project, including `clang-format`."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T09:16:04.162000",
          "text": "Plus if Racket implements a language that also has non-Racket implementations, it'd be really nice if all those implementations could read formatting options from the same place. That could rule out storing the options in `info.rkt`."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T09:17:54.162700",
          "text": "Also some established languages have several competing formatters and people don't agree on which one to use."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T09:20:34.166700",
          "text": "The Unibeautify project is trying to develop a common vocabulary for different formatters' settings: <https://github.com/unibeautify> I'll gladly help to get any Lisp-flavored languages represented in it."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-03-24T09:23:07.168000",
          "text": "Is there a known issue/interaction between dynamic-rerequire and the IO system? I've been trying to figure out why my DB queries sporadically take significantly longer (&gt;1s rather than less than 1ms on average) than they should after my code reloads (and *only* after the first time it reloads). I've ruled out the database and I've also ruled out the `db` package (I linked it locally and started profiling every function on the call stack for a query). Profiling the `db` package, I found that `read-char` (i.e. reading the next character from the db connection) is taking up all of the time when those slowdowns occur. Upon every reload, my code restarts the web-server and the db connection pool so I don't think this is to do with any lingering ports or custodians (I've tried creating a new custodian to hold everything and shutting it down for every reload, no luck w/ that either). Any ideas what might be causing my issue?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T09:35:52.168700",
          "text": "Best idea: Make a minimal example and post it to the mailing list."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T09:36:41.169100",
          "text": "Which isn't that simple to make in your situation."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-03-24T09:39:17.169900",
          "text": "Yeah, there are quite a few moving parts, but I'll try to do that if I can't figure it out soon."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-03-24T09:40:57.170700",
          "text": "What would really help debug this is if I could somehow instrument all running threads and tell them to print something to standard out when they wake up. Is there such a hook available?"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-03-24T09:41:56.171900",
          "text": "My suspicion is that, upon reload, some background threads end up leaking and when `read-char` is called, the scheduler wakes up one of those threads and it does... something that takes up all that time."
        }
      ]
    },
    {
      "conversation_id": "352",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: The problem is that a Racket program doesn’t necessarily need to use the S-expression syntax.\nPriscila: So each #lang language ought to provide (at indentation time) a function/structure that describes how to indent ... something... .\nPriscila: Hmm.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 3.45,
        "contains_question": false,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-24T08:43:20.154800",
          "text": "The problem is that a Racket program doesn’t necessarily need to use the S-expression syntax."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T08:46:42.155700",
          "text": "So each #lang language ought to provide (at indentation time) a function/structure that describes how to indent ... something... ."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T08:46:47.155900",
          "text": "Hmm."
        }
      ]
    },
    {
      "conversation_id": "353",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marceline: I'm almost done writing that [CODE] library. But... is there a \"URL path for humans\" function somewhere? [CODE] gives me what I *think* is a list of structs of some kind, but I'm not sure. I can't find anything in the standard libraries to effectively traverse or convert that thing to the usual \"foo/bar/baz\" form as it's written in the URL.\nMarceline: It looks like it's complex in an attempt to aid URL&lt;-&gt;file-system-path conversions across operating systems, but I'm just totally confused.\nMai: This looks like a bug to me… <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 14.25,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai",
          "Marceline"
        ]
      },
      "timeline": [
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T11:16:09.174300",
          "text": "I'm almost done writing that `database-url` library. But... is there a \"URL path for humans\" function somewhere? `(url-path u)` gives me what I *think* is a list of structs of some kind, but I'm not sure. I can't find anything in the standard libraries to effectively traverse or convert that thing to the usual \"foo/bar/baz\" form as it's written in the URL."
        },
        {
          "user": "Marceline",
          "timestamp": "2019-03-24T11:19:15.176200",
          "text": "It looks like it's complex in an attempt to aid URL&lt;-&gt;file-system-path conversions across operating systems, but I'm just totally confused."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-24T11:30:24.176600",
          "text": "This looks like a bug to me… <https://stackoverflow.com/questions/55321755/applying-cast-to-dynamically-required-function-in-typed-racket>"
        }
      ]
    },
    {
      "conversation_id": "354",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: How, in the world of [CODE], can I call a syntax class as a subroutine, passing it syntax variables with all their attributes (and sub-attributes, etc.)? What I'd like to be able to do, in this example, is move the code for that big lambda to its own syntax class, where it would be called with information not available in this syntax class (parsed elsewhere; needed for the TODO line). IOW, I'd like to be able to do all the parsing first, and then, when all the parsed information is available, do all the code generation. This is for maintainability and readability more than just to fix the TODO line.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "todo"
        ],
        "decision_keywords": [],
        "participants": [
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-03-24T11:58:23.176800",
          "text": "How, in the world of `syntax-parse`, can I call a syntax class as a subroutine, passing it syntax variables with all their attributes (and sub-attributes, etc.)?\n\nWhat I'd like to be able to do, in this example, is move the code for that big lambda to its own syntax class, where it would be called with information not available in this syntax class (parsed elsewhere; needed for the TODO line). IOW, I'd like to be able to do all the parsing first, and then, when all the parsed information is available, do all the code generation. This is for maintainability and readability more than just to fix the TODO line."
        }
      ]
    },
    {
      "conversation_id": "355",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Mai I think the problem is that TR treats [CODE] as a typed/untyped boundary, so it (confusingly) treats even this program as an error: [CODE_BLOCK] This happens because it thinks that the use of [CODE] inside the [CODE] is flowing into an untyped region and attaches [CODE] to it. I don’t think that’s actually necessary here, though, since none of the things [CODE] guards against can actually happen. So maybe contracts generated by [CODE] should never include [CODE] contracts?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-24T13:37:38.179800",
          "text": "<@Mai> I think the problem is that TR treats `cast` as a typed/untyped boundary, so it (confusingly) treats even this program as an error:\n```\n#lang typed/racket\n\n(define x : Any\n  (lambda ([n : Integer]) (add1 n)))\n\n((cast x (-&gt; Integer Integer)) 42)\n```\nThis happens because it thinks that the use of `x` inside the `cast` is flowing into an untyped region and attaches `any-wrap/c` to it. I don’t think that’s actually necessary here, though, since none of the things `any-wrap/c` guards against can actually happen. So maybe contracts generated by `cast` should never include `any-wrap/c` contracts?"
        }
      ]
    },
    {
      "conversation_id": "356",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: I have an idea for how this could be solved.\nElin: I’ve thought about this and the issue is TR currently doesn’t distinguish between: - typed values that it knows nothing about the type of, which it needs to guard with [CODE] when passing into untyped code or casting - untyped values that can be passed back into untyped code or casted safely without [CODE] Currently TR treats everything with type [CODE] as the first one, which is conservative and safe. However I think the second one is valuable too, especially if things like [CODE] are involved. It could be a separate type, a subtype of [CODE] (it would not be a supertype of any non-flat types), that could be called [CODE].\nElin: The [CODE] type would be different from [CODE] in two ways: (1) It is *not* a super-type of any other type that might involve typed higher-order values. (2) It is safe to pass values of this type into untyped code without any additional checks or contracts When values go through an untyped-&gt;typed boundary they need a first-order check. When values go through a typed-&gt;untyped boundary they don’t need any check or contract. [CODE] would return [CODE] [CODE] [CODE] [CODE] (not a supertype of any type might contain mutable values) [CODE] [CODE] (not a supertype of any type that might contain function values or take inputs)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 12.28,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-24T13:51:50.180100",
          "text": "I have an idea for how this could be solved."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-24T13:58:44.186000",
          "text": "I’ve thought about this and the issue is TR currently doesn’t distinguish between:\n - typed values that it knows nothing about the type of, which it needs to guard with `any-wrap/c` when passing into untyped code or casting\n - untyped values that can be passed back into untyped code or casted safely without `any-wrap/c`\n\nCurrently TR treats everything with type `Any` as the first one, which is conservative and safe. However I think the second one is valuable too, especially if things like `dynamic-require` are involved. It could be a separate type, a subtype of `Any` (it would not be a supertype of any non-flat types), that could be called `DynamicAny`."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-24T14:04:07.189300",
          "text": "The `DynamicAny` type would be different from `Any` in two ways:\n  (1) It is *not* a super-type of any other type that might involve typed higher-order values.\n  (2) It is safe to pass values of this type into untyped code without any additional checks or contracts\n\nWhen values go through an untyped-&gt;typed boundary they need a first-order check.\nWhen values go through a typed-&gt;untyped boundary they don’t need any check or contract.\n\n`dynamic-require` would return `DynamicAny`\n`DynamicAny &lt;: Any`\n`FlatFirstOrderImmutableData &lt;: DynamicAny`\n`(Boxof _) &lt;/: DynamicAny` (not a supertype of any type might contain mutable values)\n`(Vectorof _) &lt;/: DynamicAny`\n`(-&gt; _ ... _) &lt;/: DynamicAny` (not a supertype of any type that might contain function values or take inputs)"
        }
      ]
    },
    {
      "conversation_id": "357",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: Have you considered just writing a syntax-time function that takes the syntax and all of the properties and returns the new syntax?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Eileen"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-03-24T14:48:02.189600",
          "text": "Have you considered just writing a syntax-time function that takes the syntax and all of the properties and returns the new syntax?"
        }
      ]
    },
    {
      "conversation_id": "358",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Deeanna What kind of server are you asking [CODE] to talk to -- an in-process FFI one like sqlite, --or--, one it must connect to via TCP or Unix domain socket like postgres? If latter, maybe you're seeing something connection-related? (Maybe the connection always takes 1 sec but you don't notice on the initial load because it's just another second among many? And/or, maybe there is some delay due to recycling a TCP port? Just a couple wild guesses, that might not involve Racket per se.)\nJulia: If latter, and you're using TCP now, maybe try Unix domain socket instead. I believe that's a relatively recent addition to the [CODE] package. It's probably better generally, even if n/a for your immediate question. Probably unix domain sockets are more secure and faster, both.\nPenni: I'll try that as soon as my code compiles again...\nPenni: Priscila Here's what I got in XREPL. This is Typed Racket. I haven't tried it in Untyped Racket, but the module that I want to re-run at will is in Typed Racket.\nPenni: So, do people not normally put code in at the top level of a module that they want to run at will?\nJeanine: Penni One approach is to make your syntax-class take parameters (but the parameters are treated as ordinary variables, not syntax pattern variables). Another is to change [CODE] from a syntax object bound using [CODE] to a procedure-valued attribute bound with [CODE] that takes the contextual information and produces the syntax. The caller of the syntax-class would have to get the procedure attribute and call it with the necessary information.\nPenni: Eileen I'm actually calling a syntax-time function elsewhere, for a different purpose. The rough spot here is that I need to pass all the attributes from the [CODE] syntax class. I suppose I could package them all up in some big list, or maybe [CODE] will do that, but then I have to parse them all out again—and I'll have to change this code every time I modify [CODE]. Not an insurmountable challenge, but I wonder if there's some nice way to pass all the contextual information that [CODE] already has access to right inside the [CODE] syntax class.\nPenni: Jeanine Ah, I had not thought of making an [CODE] whose value is a procedure—a closure! Thanks. If I understand this right, the closure would still have access to everything that [CODE] has access to inside the [CODE] syntax class (the thing I was hoping for in the previous message).\nPenni: Jeanine I tried passing an argument to the [CODE] syntax class (via the [CODE] syntax class), like this: `(define-syntax-class nodeclass #:attributes [cnodeclass] (pattern (head:nodeclass-head ~! decl:name+args body:(nodeclass-body #'decl.name))` but that didn't work—and probably with good reason.\nPenni: Eileen I'm hoping not to do that, since that's pretty slow, and speed is the main reason I'm now experimenting with XREPL. Is there no way in Racket to say \"Run that module\"?\nJulia: Penni how about [CODE] <[URL]\nPenni: [CODE] doesn't seem to re-run the module if it's already been loaded.\nJulia: Or maybe the two commands above it?\nJulia: maybe [CODE]?\nPenni: Hmm, I haven't tried either of those. I'll try them next time my code compiles. :wink:\nPenni: So, there is no way in Racket to say \"Run the top-level code of such-and-such module\"?\nJulia: (Many years ago I tried to use XREPL in a shell buffer in Emacs, with some hotkeys to do [CODE]. I was confused by reloading, or not. That was kind of what nudged me to making successively less-crude versions of racket-mode.)\nJulia: Normally [CODE] or [CODE] the functions, or the similar XREPL commands, should eval module-level expressions in the file.\nJulia: And the default [CODE] wraps each top expression in a print, so you see each one (unless it's [CODE]).\nPenni: Regardless of the question about re-running a module, I'm pretty sure there is something weird about the way [CODE] decides which modules to reload. It's often missed reloading a file that I just modified. I haven't checked it out carefully yet, but it looks like [CODE] will not reload the module that you're currently in. So, if you're in [CODE] and you [CODE], [CODE] won't get reloaded even if you just modified it. Not 100% sure of that, though.\nJulia: There could be a bug like I thought there was years ago, or it could be I'm misunderstanding.\nJulia: One thing to keep in mind, is that some modules with lots of macros can be quite time-consuming to expand. And most of the time to require them is spent on expansion. This tends to be true of Typed Racket, for example. So in bigger projects, it can help to use [CODE] directly, or indirectly through [CODE] of your collection or package, to compile to bytecode [CODE] files.\nJulia: Those have already been expanded and tend to load quickly.\nJulia: And then, in an env like DrRacket or racket-mode, that always reloads everything on each run, it's not very painful.\nJulia: I don't use DrRacket often, but it has an option to make these bytecode files automatically, I think.\nPenni: Ah, thanks for that. I've gotten the impression just from the compile times that modules are often getting recompiled unnecessarily. I figured there'd be some way to prevent that. Happily, there seems to be a lot less recompilation under XREPL. (Hopefully not because it's failing to recompile changed modules! Most of the time it does, though. Happily, it tells you what it's recompiling.)\nPenni: BTW, I'm now in the midst of making all sorts of modifications to a big macro that implements a DSL, along with lots of modifications to the code that interfaces with the generated code. This could have been a undebuggable catastrophe, except that the last thing I did was convert everything to Typed Racket (including the generated code). It's catching subtle errors very nicely, with very little extra effort to set up the types. I'm actually staying confident that the code is correct. Whew! Now I wish I'd converted everything to Typed Racket months ago.\nPenni: This is something that I've found a bit mysterious about the Lisp languages ever since I started programming in them: how to \"grow\" a program incrementally, where you get a little bit to work, then you add something and maybe modify existing code to work with it, add a bit more and get all tests to pass again, etc., occasionally \"refactoring\" when the code starts to get messy. I know that the ability to do this is often said to be a great strength of Lisp, but I kept finding myself in long debugging sessions and generally losing confidence in my code. In OO languages, I was pretty good at \"growing\" programs incrementally, because of course that's pretty much what OO is designed for, and a whole lot of common wisdom has emerged about how to do that in ways that don't invite bugs—hiding everything behind very narrow interfaces, Once-and-Only-Once, Law of Demeter, Dependency Inversion, Open-Closed, etc. Has anything like that common wisdom emerged in the Racket world? Switching to Typed Racket has helped enormously, but I'll bet there's more.\nJeanine: Penni You can't use the colon notation with arguments. Use [CODE] or [CODE].\nPenni: Oh, I see. Thanks. I thought that whole approach was hopeless. Now I'll have a closer look.\nLillian: IMHO the distinctive feature of Racket (and I assume other Lisp languages, though I haven’t used them) is _expressiveness_: the Lego-like constructibility means that one can write code that’s very close to the idea one holds about the problem. That is the good news. That is also the bad news, because Racket acts as a parabolic mirror on these ideas. Your program therefore reflects back your brilliance (some days) or your ignorance (others).\nLillian: IMHO2 having now written a certain amount of nice Racket &amp; plenty of nasty Racket, I’m ready to theorize that the shortest / smallest Racket code is often the best, and tends to be the result of discovering the clearest / simplest idea for modeling the problem.\nPenni: Lillian I was sorta thinking roughly the same thing: that it's not so easy in Racket to start with a clumsy/ignorant design and gradually streamline it into simplicity and elegance through many small changes, all of which compile and run without bugs. Hence get it pretty much right the first time and keep it small, because bigger things are harder to change, and if you get a better idea, you'll probably need to restart from scratch. I hope someone will tell me this isn't true!\nLillian: I worry less about “restarting from scratch” — throwing out junky code is a great pleasure — and more about never getting that “better idea”.\nPenni: I'm *usually* not too concerned about starting from scratch—until the program gets large and rewriting it becomes a long and risky endeavor. The incremental approach is pretty risk-averse: you might delete a lot of code over the life of the program, but at any given moment, you're never more than 10 minutes or so from a working version. But perhaps the flexibility of Lisp languages just doesn't work that way. OO makes it possible by working within a lot of restrictions: basically by severely limiting each part of the program's access to data.\nLillian: One virtuous habit in Racket is to split things off into separate packages as soon as they reveal themselves to be self-contained side missions. For instance, the package that is now [CODE] once contained the code now found in the packages known as [CODE], [CODE], [CODE] and [CODE]. But the act of separation both clarifies the structure of the main program, and allows the side missions to evolve and grow at their own pace.\nPenni: Thanks. That is a good one. I've been looking for ways to separate this monster thing I'm working on into little libraries, maybe little languages. The biggest headache has probably been the graph representation. That's hard to redo independently because pretty much everything calls upon it. Of course, even though some things are hard to split off, other things might be very splittable.\nPenni: Lillian BTW, I noticed in [CODE] that you provided a very nice small technique for keeping programs easy to modify, which took me quite a while to hit on: Instead of making sure that I pass a function a list, or set, or whatever it wants, call something like [CODE] or [CODE] within the function, so the function accepts whatever you pass it. This has become particularly handy now that I've gone to Typed Racket. (Unfortunately, I didn't browse [CODE] until hitting on this the hard way!)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 38,
        "duration_minutes": 500.7,
        "contains_question": true,
        "action_keywords": [
          "decide",
          "implement",
          "must",
          "need to",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeanine",
          "Julia",
          "Lillian",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-24T15:46:07.193200",
          "text": "<@Deeanna> What kind of server are you asking `db` to talk to -- an in-process FFI one like sqlite, --or--, one it must connect to via TCP or Unix domain socket like postgres?\n\nIf latter, maybe you're seeing something connection-related? (Maybe the connection always takes 1 sec but you don't notice on the initial load because it's just another second among many?  And/or, maybe there is some delay due to recycling a TCP port?  Just a couple wild guesses, that might not involve Racket per se.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T15:54:19.196300",
          "text": "If latter, and you're using TCP now, maybe try Unix domain socket instead. I believe that's a relatively recent addition to the `db` package. It's probably better generally, even if n/a for your immediate question. Probably unix domain sockets are more secure and faster, both."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T16:53:11.198200",
          "text": "I'll try that as soon as my code compiles again..."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T16:59:08.198400",
          "text": "<@Priscila> Here's what I got in XREPL. This is Typed Racket. I haven't tried it in Untyped Racket, but the module that I want to re-run at will is in Typed Racket."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T17:01:02.199900",
          "text": "So, do people not normally put code in at the top level of a module that they want to run at will?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-24T17:32:14.200500",
          "text": "<@Penni> One approach is to make your syntax-class take parameters (but the parameters are treated as ordinary variables, not syntax pattern variables). Another is to change `apply-tag` from a syntax object bound using `#:with` to a procedure-valued attribute bound with `#:attr` that takes the contextual information and produces the syntax. The caller of the syntax-class would have to get the procedure attribute and call it with the necessary information."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T17:45:30.200700",
          "text": "<@Eileen> I'm actually calling a syntax-time function elsewhere, for a different purpose. The rough spot here is that I need to pass all the attributes from the `taggee-info` syntax class. I suppose I could package them all up in some big list, or maybe `attribute` will do that, but then I have to parse them all out again—and I'll have to change this code every time I modify `taggee-info`. Not an insurmountable challenge, but I wonder if there's some nice way to pass all the contextual information that `#:with` already has access to right inside the `applies-to` syntax class."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T17:48:10.200900",
          "text": "<@Jeanine> Ah, I had not thought of making an `#:attr` whose value is a procedure—a closure! Thanks. If I understand this right, the closure would still have access to everything that `#:with` has access to inside the `applies-to` syntax class (the thing I was hoping for in the previous message)."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T17:49:59.201100",
          "text": "<@Jeanine> I tried passing an argument to the `applies-to` syntax class (via the `nodeclass-body` syntax class), like this:\n`(define-syntax-class nodeclass\n    #:attributes [cnodeclass]\n    (pattern (head:nodeclass-head ~! decl:name+args body:(nodeclass-body #'decl.name))`\nbut that didn't work—and probably with good reason."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T18:17:25.203800",
          "text": "<@Eileen> I'm hoping not to do that, since that's pretty slow, and speed is the main reason I'm now experimenting with XREPL. Is there no way in Racket to say \"Run that module\"?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T18:52:51.204900",
          "text": "<@Penni> how about `,enter` <https://docs.racket-lang.org/xrepl/index.html#(xrepl._enter)>"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T18:53:31.205700",
          "text": "`,en` doesn't seem to re-run the module if it's already been loaded."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T18:53:40.205900",
          "text": "Or maybe the two commands above it?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T18:55:45.206600",
          "text": "maybe `,require-reloadable`?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T18:56:44.207800",
          "text": "Hmm, I haven't tried either of those. I'll try them next time my code compiles. :wink:"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T18:57:18.208800",
          "text": "So, there is no way in Racket to say \"Run the top-level code of such-and-such module\"?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T18:57:25.209000",
          "text": "(Many years ago I tried to use XREPL in a shell buffer in Emacs, with some hotkeys to do `enter`. I was confused by reloading, or not. That was kind of what nudged me to making successively less-crude versions of racket-mode.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T18:58:10.210200",
          "text": "Normally `require` or `enter!` the functions, or the similar XREPL commands, should eval module-level expressions in the file."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T18:59:01.211500",
          "text": "And the default `#%module-begin` wraps each top expression in a print, so you see each one (unless it's `void`)."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T18:59:35.212300",
          "text": "Regardless of the question about re-running a module, I'm pretty sure there is something weird about the way `enter!` decides which modules to reload. It's often missed reloading a file that I just modified. I haven't checked it out carefully yet, but it looks like `enter!` will not reload the module that you're currently in. So, if you're in `\"my-module.rkt\"` and you `,en \"module-that-requires-my-module.rkt\"`, `\"my-module.rkt\"` won't get reloaded even if you just modified it. Not 100% sure of that, though."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T19:00:54.213200",
          "text": "There could be a bug like I thought there was years ago, or it could be I'm misunderstanding."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T19:02:27.215100",
          "text": "One thing to keep in mind, is that some modules with lots of macros can be quite time-consuming to expand.\nAnd most of the time to require them is spent on expansion.\nThis tends to be true of Typed Racket, for example.\nSo in bigger projects, it can help to use `raco make` directly, or indirectly through `raco setup` of your collection or package, to compile to bytecode `zo` files."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T19:02:40.215500",
          "text": "Those have already been expanded and tend to load quickly."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T19:03:08.216200",
          "text": "And then, in an env like DrRacket or racket-mode, that always reloads everything on each run, it's not very painful."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-24T19:03:58.217200",
          "text": "I don't use DrRacket often, but it has an option to make these bytecode files automatically, I think."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T19:04:03.217400",
          "text": "Ah, thanks for that. I've gotten the impression just from the compile times that modules are often getting recompiled unnecessarily. I figured there'd be some way to prevent that. Happily, there seems to be a lot less recompilation under XREPL. (Hopefully not because it's failing to recompile changed modules! Most of the time it does, though. Happily, it tells you what it's recompiling.)"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T19:09:55.220600",
          "text": "BTW, I'm now in the midst of making all sorts of modifications to a big macro that implements a DSL, along with lots of modifications to the code that interfaces with the generated code. This could have been a undebuggable catastrophe, except that the last thing I did was convert everything to Typed Racket (including the generated code). It's catching subtle errors very nicely, with very little extra effort to set up the types. I'm actually staying confident that the code is correct. Whew! Now I wish I'd converted everything to Typed Racket months ago."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T19:20:15.227100",
          "text": "This is something that I've found a bit mysterious about the Lisp languages ever since I started programming in them: how to \"grow\" a program incrementally, where you get a little bit to work, then you add something and maybe modify existing code to work with it, add a bit more and get all tests to pass again, etc., occasionally \"refactoring\" when the code starts to get messy. I know that the ability to do this is often said to be a great strength of Lisp, but I kept finding myself in long debugging sessions and generally losing confidence in my code.\n\nIn OO languages, I was pretty good at \"growing\" programs incrementally, because of course that's pretty much what OO is designed for, and a whole lot of common wisdom has emerged about how to do that in ways that don't invite bugs—hiding everything behind very narrow interfaces, Once-and-Only-Once, Law of Demeter, Dependency Inversion, Open-Closed, etc.\n\nHas anything like that common wisdom emerged in the Racket world? Switching to Typed Racket has helped enormously, but I'll bet there's more."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-24T20:10:20.227400",
          "text": "<@Penni> You can't use the colon notation with arguments. Use `#:declare body (nodeclass-body #'decl.name)` or `(~var body (nodeclass-body #'decl.name))`."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T20:11:56.228700",
          "text": "Oh, I see. Thanks. I thought that whole approach was hopeless. Now I'll have a closer look."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-24T20:24:30.236300",
          "text": "IMHO the distinctive feature of Racket (and I assume other Lisp languages, though I haven’t used them) is _expressiveness_: the Lego-like constructibility means that one can write code that’s very close to the idea one holds about the problem. That is the good news. That is also the bad news, because Racket acts as a parabolic mirror on these ideas. Your program therefore reflects back your brilliance (some days) or your ignorance (others)."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-24T20:28:49.238900",
          "text": "IMHO2 having now written a certain amount of nice Racket &amp; plenty of nasty Racket, I’m ready to theorize that the shortest / smallest Racket code is often the best, and tends to be the result of discovering the clearest / simplest idea for modeling the problem."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T20:45:31.241600",
          "text": "<@Lillian> I was sorta thinking roughly the same thing: that it's not so easy in Racket to start with a clumsy/ignorant design and gradually streamline it into simplicity and elegance through many small changes, all of which compile and run without bugs. Hence get it pretty much right the first time and keep it small, because bigger things are harder to change, and if you get a better idea, you'll probably need to restart from scratch. I hope someone will tell me this isn't true!"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-24T22:56:46.245500",
          "text": "I worry less about “restarting from scratch” — throwing out junky code is a great pleasure — and more about never getting that “better idea”."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-24T23:03:40.249200",
          "text": "I'm *usually* not too concerned about starting from scratch—until the program gets large and rewriting it becomes a long and risky endeavor. The incremental approach is pretty risk-averse: you might delete a lot of code over the life of the program, but at any given moment, you're never more than 10 minutes or so from a working version. But perhaps the flexibility of Lisp languages just doesn't work that way. OO makes it possible by working within a lot of restrictions: basically by severely limiting each part of the program's access to data."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-24T23:52:33.249500",
          "text": "One virtuous habit in Racket is to split things off into separate packages as soon as they reveal themselves to be self-contained side missions. For instance, the package that is now `pollen` once contained the code now found in the packages known as `hyphenate`, `css-tools`, `txexpr` and `sugar`. But the act of separation both clarifies the structure of the main program, and allows the side missions to evolve and grow at their own pace."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-25T00:02:45.249700",
          "text": "Thanks. That is a good one. I've been looking for ways to separate this monster thing I'm working on into little libraries, maybe little languages. The biggest headache has probably been the graph representation. That's hard to redo independently because pretty much everything calls upon it. Of course, even though some things are hard to split off, other things might be very splittable."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-25T00:06:49.249900",
          "text": "<@Lillian> BTW, I noticed in `sugar` that you provided a very nice small technique for keeping programs easy to modify, which took me quite a while to hit on: Instead of making sure that I pass a function a list, or set, or whatever it wants, call something like `-&gt;list` or `-&gt;set` within the function, so the function accepts whatever you pass it. This has become particularly handy now that I've gone to Typed Racket. (Unfortunately, I didn't browse `sugar` until hitting on this the hard way!)"
        }
      ]
    },
    {
      "conversation_id": "359",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: If you're in the REPL, how do you run a module that's already been loaded or entered? IOW, what's the REPL equivalent of Cmd-R in DrRacket?\nDeeanna: I'm using Postgres so the driver is written in pure Racket (not FFI). I thought it might be connection overhead, but it doesn't look like it based on PG's logs. Turning on debug logging for the [CODE] topic shows that the issue occurs even an idle connection is being grabbed from the pool. When I profiled the [CODE] library I narrowed it down to the moment a query response is retrieved from PG (i.e. that [CODE] call I mentioned) so I'm still thinking it's some scheduling thing.\nDeeanna: At any rate, I sprinkled[1] a couple custodians in places I thought might be problematic and that seems to have helped! The issue still happens and it still only happens after a reload, but it happens less often now. [1]: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 2.32,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Deeanna",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-03-24T16:18:14.196900",
          "text": "If you're in the REPL, how do you run a module that's already been loaded or entered?\n\nIOW, what's the REPL equivalent of Cmd-R in DrRacket?"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-03-24T16:19:34.197000",
          "text": "I'm using Postgres so the driver is written in pure Racket (not FFI). I thought it might be connection overhead, but it doesn't look like it based on PG's logs. Turning on debug logging for the `db` topic shows that the issue occurs even an idle connection is being grabbed from the pool. When I profiled the `db` library I narrowed it down to the moment a query response is retrieved from PG (i.e. that `read-char` call I mentioned) so I'm still thinking it's some scheduling thing."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-03-24T16:20:33.197300",
          "text": "At any rate, I sprinkled[1] a couple custodians in places I thought might be problematic and that seems to have helped!\n\nThe issue still happens and it still only happens after a reload, but it happens less often now.\n\n[1]: <https://github.com/Bogdanp/racket-webapp-template/commit/b49f03c8eafb9f6abc9641675345cec9831ea15b>"
        }
      ]
    },
    {
      "conversation_id": "360",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Rerequire ?\nPriscila: I don’t know enough about TR.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 44.95,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T16:45:30.197900",
          "text": "Rerequire ?\n"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-24T17:30:27.200400",
          "text": "I don’t know enough about TR. "
        }
      ]
    },
    {
      "conversation_id": "361",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: I think if you really want the same as Ctrl-R in DrRacket you should exit and restart.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-03-24T18:05:17.202700",
          "text": "I think if you really want the same as Ctrl-R in DrRacket you should exit and restart."
        }
      ]
    },
    {
      "conversation_id": "362",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Penni: How can I generate code conditionally (with an [CODE]) for the current [CODE]? Since the arity of [CODE] is 1, the [CODE]s inside the [CODE] are failing. The only way I can think of is to generate something like [CODE] in the syntax class that returns the [CODE]. I'd prefer not to, since that harms readability: that syntax class would have to know about the local variable [CODE], which is generated here in a syntax class a couple levels up. And the code here wouldn't be as clear.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Penni",
          "timestamp": "2019-03-24T21:56:09.241800",
          "text": "How can I generate code conditionally (with an `if`) for the current `taggee`? Since the arity of `taggee` is 1, the `#'`s inside the `#,` are failing.\n\nThe only way I can think of is to generate something like `taggee.let-binding` in the syntax class that returns the `taggee`. I'd prefer not to, since that harms readability: that syntax class would have to know about the local variable `ht/nodes`, which is generated here in a syntax class a couple levels up. And the code here wouldn't be as clear."
        }
      ]
    },
    {
      "conversation_id": "363",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: At the \"edge\" of a program, \"accepts whatever you pass it\" can be useful -- as a kind of input validation, especially from humans or from messy files or APIs. \"Do what I mean\".\nJulia: But I get uncomfortable when that permeates the whole program. I think it actually makes it harder to catch problems near where they originate.\nJulia: So ideally I like to keep the DWIM part as a pretty thin outside edge/layer. And pretty quickly try to get very \"brittle\", where contracts (or static types) are being super picky about what functions accept, and loudly complain about surprises.\nJulia: But. That's just my own guideline, for myself. It's not always so simple or easy to structure things that way. ¯\\_(ツ)_/¯",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 2.75,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-25T17:24:50.250900",
          "text": "At the \"edge\" of a program, \"accepts whatever you pass it\" can be useful -- as a kind of input validation, especially from humans or from messy files or APIs.  \"Do what I mean\"."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-25T17:25:47.251100",
          "text": "But I get uncomfortable when that permeates the whole program. I think it actually makes it harder to catch problems near where they originate."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-25T17:26:45.251300",
          "text": "So ideally I like to keep the DWIM part as a pretty thin outside edge/layer. And pretty quickly try to get very \"brittle\", where contracts (or static types) are being super picky about what functions accept, and loudly complain about surprises."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-25T17:27:35.251600",
          "text": "But. That's just my own guideline, for myself. It's not always so simple or easy to structure things that way. ¯\\_(ツ)_/¯"
        }
      ]
    },
    {
      "conversation_id": "364",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Is there any way to write a macro that binds an identifier the first time its expanded, but on subsequent expansions (in the same scope) it doesn't. That is, a macro, say [CODE], that can expand like:\nMarcelina: [CODE_BLOCK] =&gt; [CODE_BLOCK]\nMarcelina: BUt if we call it twice, [CODE] only gets bound once. So: [CODE_BLOCK] =&gt; [CODE_BLOCK]\nMarcelina: ?\nKaren: Marcelina no idea, but very good question. I can think of tons of use cases for that.\nGonzalo: You could always do it with some mutable state.\nKaren: I wouldn't trust an implementation that did though\nGonzalo: I dunno, definition contexts are imperative, anyway, and to quote Sam paraphrasing Ryan, “I can’t think of a better way”. :)\nGonzalo: You can use the value of [CODE] to check if you’ve already added a definition in the current definition context or not.\nKaren: maybe it could be done with an approach similar to [CODE], where an intermediate step performs local expansion? [CODE_BLOCK]\nGonzalo: I really do think you can reliably put the value of [CODE] in a phase 1, mutable, [CODE]-based hash set and use that to check whether or not you’ve “seen” the current definition context or not.\nGonzalo: Any situation in which that isn’t true means someone else did something wrong.\nKaren: I don’t disagree with that, but I also think it’s a solution to a very narrow set of problems\nGonzalo: I don’t think I really understand. It’s the recommended solution to the very general problem of asking “have I seen this definition context before?”\nKaren: What I mean is that I don’t think asking that question is something macros should be doing, because it inserts temporal dependencies between them. I don’t want to have to debug that kind of code.\nGonzalo: Expansion fundamentally has an arrow of time, and Marcelina’s request depends upon it, so I don’t think you can get away from that entirely. Though of course you could wrap it up behind some abstraction if you wanted.\nMarcelina: Gonzalo Ya, you're probably right. Although I may be doing something wrong, because I keep getting what it believes is the same internal definition context: [CODE_BLOCK]\nGonzalo: Make sure you’re using [CODE], though that might not be what’s going wrong there.\nMarcelina: Ah, okay, that helped.\nKaren: Both macros could emit the duplicate definition within some outer macro that locally expands its body and deduplicates definitions. Then there’s no dependency on the order that individual body transformers are called.\nMarcelina: Still, odd that [CODE] is returning [CODE] for [CODE]\nGonzalo: Also, if you’re in an internal definition context, [CODE] is a list. You probably want to get the first element out of the list and use that.\nGonzalo: The value inside the list returned from [CODE] can be anything. It’s only guaranteed to be different with respect to [CODE] in different contexts.\nMarcelina: Oh yes, it is a list,with a liberal-definition-context in it.\nMarcelina: Doesn't the docs say its one of several symbols or a list?\nMarcelina: AH, okay\nGonzalo: Yes, it is a list when you’re in an internal definition context.\nGonzalo: You probably want to allow [CODE] or a list, and nothing else.\nGonzalo: Well, maybe also [CODE], if you want to support that.\nMarcelina: THat would explain why I could never get [CODE] to work.\nGonzalo: You can put [CODE] directly in your mutable set without worrying about it, since there can only be expansion in one module per visit to your module. So you’ll never end up with [CODE] being returned for two different modules before your mutable set is emptied.\nGonzalo: So, to summarize, you probably want something like this: [CODE_BLOCK]\nMarcelina: Interesting. Is there any reason for the last [CODE] other than style?\nGonzalo: No.\nMarcelina: (As opposed to just putting it in the body.)\nMarcelina: Okay, so just style?\nGonzalo: Yes.\nMarcelina: Cool.\nMarcelina: Also thx.\nMarcelina: oh, one more thing, why did you get the first element of the list if its an internal definition context?\nMarcelina: Since the list itself is eq? if the context is eq?\nMarcelina: Oh...durp....the docs\nMarcelina: \". The identity of the list’s first element (i.e., its eq?ness) reflects the identity of the internal-definition context\"\nMarcelina: thanks. :slightly_smiling_face:\nGonzalo: Yes, I’ll be honest, I am not certain exactly when [CODE] would be a list of more than one element.\nMarcelina: Honestly, you're guess is as good as mine.\nMarcelina: If anyone knows, its one of Clarinda, Jeanine, or Danny\nGonzalo: The [CODE] documentation states: &gt; If the internal-definition context is meant to be self-contained, the list for [CODE] should contain only the generated value; if the internal-definition context is meant to splice into an immediately enclosing context, then when [CODE] produces a list, [CODE] the generated value onto that list. However, I do not know when an internal definition context would splice into an enclosing one in a way that would still be a distinct definition context.\nGonzalo: When [CODE] splices into an enclosing context, expansion of the forms in the [CODE] are still in the same context as the enclosing one.\nPenni: Julia Thanks. I appreciate the voice of experience about this. Lately I have indeed been going wild with DWIM arguments, deep in internal function calls. Hopefully I won't get burned! When I started with Racket, I kept getting burned by forgetting whether something was a list or a set (also in Clojure). If I changed which one a function accepted or returned, it was hard to track down what other code needed to be changed. How do people deal with that under dynamic typing? Many little things are error-prone in that way, e.g. \"pass the struct\" vs. \"pass the thing inside the struct\". So far, it's been working out: the calling code is now simpler (e.g. no more [CODE] or [CODE] wrapping arguments to function calls) and more readable. But I'll watch out. Do you know of something bad that results from functions that take whichever representation they're given?\nPenni: Jeanine I put in the closure that accepts the class name in the \"deep\" syntax class. It worked easily, and even let me simplify some code by making syntax classes no longer return so many attributes. Thanks again!\nDanny: I think I saw this in the implementation of splicing-local the other day.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 52,
        "duration_minutes": 76.78,
        "contains_question": true,
        "action_keywords": [
          "action",
          "agree",
          "implement",
          "should"
        ],
        "decision_keywords": [
          "accepted"
        ],
        "participants": [
          "Danny",
          "Gonzalo",
          "Karen",
          "Marcelina",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T18:33:40.253200",
          "text": "Is there any way to write a macro that binds an identifier the first time its expanded, but on subsequent expansions (in the same scope) it doesn't. That is, a macro, say `(define-foo x body)`, that can expand like:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T18:34:18.254100",
          "text": "```\n(let ()\n  (define-foo x body))\n```\n=&gt;\n```\n(let ()\n  (define foo some-expr)\n  (define x body))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T18:35:24.255400",
          "text": "BUt if we call it twice, `foo` only gets bound once. So:\n\n```\n(let ()\n  (define-foo x body))\n  (define-foo y body)))\n```\n=&gt;\n```\n(let ()\n  (define foo some-expr)\n  (define x body)\n  (define y body))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T18:35:25.255600",
          "text": "?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-25T18:38:00.257500",
          "text": "<@Marcelina> no idea, but very good question. I can think of tons of use cases for that."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T18:39:11.257800",
          "text": "You could always do it with some mutable state."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-25T18:39:48.258400",
          "text": "I wouldn't trust an implementation that did though"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T18:40:36.259100",
          "text": "I dunno, definition contexts are imperative, anyway, and to quote Sam paraphrasing Ryan, “I can’t think of a better way”. :)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T18:41:25.259600",
          "text": "You can use the value of `syntax-local-context` to check if you’ve already added a definition in the current definition context or not."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-25T18:52:34.262300",
          "text": "maybe it could be done with an approach similar to `racket/splicing`, where an intermediate step performs local expansion?\n\n```\n(with-definition-merger (lambda (first-id second-id) ...)\n  (define-foo x body)\n  (define-foo y body))\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T18:54:18.263500",
          "text": "I really do think you can reliably put the value of `(syntax-local-context)` in a phase 1, mutable, `eq?`-based hash set and use that to check whether or not you’ve “seen” the current definition context or not."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T18:54:42.264200",
          "text": "Any situation in which that isn’t true means someone else did something wrong."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-25T18:54:57.264500",
          "text": "I don’t disagree with that, but I also think it’s a solution to a very narrow set of problems"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T18:57:00.265100",
          "text": "I don’t think I really understand. It’s the recommended solution to the very general problem of asking “have I seen this definition context before?”"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-25T18:58:39.266500",
          "text": "What I mean is that I don’t think asking that question is something macros should be doing, because it inserts temporal dependencies between them. I don’t want to have to debug that kind of code."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:01:10.268300",
          "text": "Expansion fundamentally has an arrow of time, and <@Marcelina>’s request depends upon it, so I don’t think you can get away from that entirely. Though of course you could wrap it up behind some abstraction if you wanted."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:04:00.270800",
          "text": "<@Gonzalo> Ya, you're probably right. Although I may be doing something wrong, because I keep getting what it believes is the same internal definition context:\n```\n(define-for-syntax ctxs\n  (mutable-set))\n\n(define-syntax-parser define-foo\n  [(_ x:id body)\n   (set-add! ctxs (syntax-local-context))\n   (writeln ctxs)\n   #'(define x body)])\n\n(let ()\n  (define-foo x 42)\n  (void))\n\n(let()\n  (define-foo x 48)\n  (void))\n\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:04:31.271200",
          "text": "Make sure you’re using `mutable-seteq`, though that might not be what’s going wrong there."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:04:52.271900",
          "text": "Ah, okay, that helped."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-25T19:05:15.273100",
          "text": "Both macros could emit the duplicate definition within some outer macro that locally expands its body and deduplicates definitions. Then there’s no dependency on the order that individual body transformers are called."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:05:15.273200",
          "text": "Still, odd that `internal-definition-context?` is returning `#f` for `(syntax-local-context)`"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:05:16.273300",
          "text": "Also, if you’re in an internal definition context, `(syntax-local-context)` is a list. You probably want to get the first element out of the list and use that."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:05:55.274300",
          "text": "The value inside the list returned from `(syntax-local-context)` can be anything. It’s only guaranteed to be different with respect to `eq?` in different contexts."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:05:59.274500",
          "text": "Oh yes, it is a list,with a liberal-definition-context in it."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:06:18.275000",
          "text": "Doesn't the docs say its one of several symbols or a list?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:06:26.275400",
          "text": "AH, okay"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:06:29.275700",
          "text": "Yes, it is a list when you’re in an internal definition context."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:06:38.276000",
          "text": "You probably want to allow `'module` or a list, and nothing else."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:06:52.276400",
          "text": "Well, maybe also `'top-level`, if you want to support that."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:07:19.277000",
          "text": "THat would explain why I could never get `internal-definition-context-binding-identifiers` to work."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:08:17.277900",
          "text": "You can put `'module` directly in your mutable set without worrying about it, since there can only be expansion in one module per visit to your module. So you’ll never end up with `'module` being returned for two different modules before your mutable set is emptied."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:13:07.281300",
          "text": "So, to summarize, you probably want something like this:\n```\n(define-syntax-parser define-foo\n  [(_ x:id body)\n   #:do [(define ctx (syntax-local-context))]\n   #:fail-unless (or (memq ctx '(module top-level)) (pair? ctx)) \"only allowed in a definition context\"\n   #:do [(define ctx-v (if (pair? ctx) (car ctx) ctx))\n         (define seen? (set-member? ctxs ctx))\n         (set-add! ctxs ctx)]\n   #| do something with seen? |#])\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:14:17.281700",
          "text": "Interesting. Is there any reason for the last `#:do` other than style?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:14:35.282200",
          "text": "No."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:14:36.282400",
          "text": "(As opposed to just putting it in the body.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:14:42.282600",
          "text": "Okay, so just style?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:14:48.282900",
          "text": "Yes."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:14:53.283100",
          "text": "Cool."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:14:56.283300",
          "text": "Also thx."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:15:56.283800",
          "text": "oh, one more thing, why did you get the first element of the list if its an internal definition context?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:16:13.284200",
          "text": "Since the list itself is eq? if the context is eq?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:16:48.284400",
          "text": "Oh...durp....the docs"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:17:06.284700",
          "text": "\". The identity of the list’s first element (i.e., its eq?ness) reflects the identity of the internal-definition context\""
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:17:08.284900",
          "text": "thanks. :slightly_smiling_face:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:20:23.285400",
          "text": "Yes, I’ll be honest, I am not certain exactly when `(syntax-local-context)` would be a list of more than one element."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:20:43.286000",
          "text": "Honestly, you're guess is as good as mine."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-25T19:20:57.286600",
          "text": "If anyone knows, its one of <@Clarinda>, <@Jeanine>, or <@Danny>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:21:30.287300",
          "text": "The `local-expand` documentation states:\n&gt; If the internal-definition context is meant to be self-contained, the list for `context-v` should contain only the generated value; if the internal-definition context is meant to splice into an immediately enclosing context, then when `syntax-local-context` produces a list, `cons` the generated value onto that list.\nHowever, I do not know when an internal definition context would splice into an enclosing one in a way that would still be a distinct definition context."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-25T19:21:49.287800",
          "text": "When `begin` splices into an enclosing context, expansion of the forms in the `begin` are still in the same context as the enclosing one."
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-25T19:26:48.289100",
          "text": "<@Julia> Thanks. I appreciate the voice of experience about this. Lately I have indeed been going wild with DWIM arguments, deep in internal function calls. Hopefully I won't get burned! When I started with Racket, I kept getting burned by forgetting whether something was a list or a set (also in Clojure). If I changed which one a function accepted or returned, it was hard to track down what other code needed to be changed. How do people deal with that under dynamic typing?\n\nMany little things are error-prone in that way, e.g. \"pass the struct\" vs. \"pass the thing inside the struct\".  So far, it's been working out: the calling code is now simpler (e.g. no more `set-&gt;list` or `list-&gt;set` wrapping arguments to function calls) and more readable. But I'll watch out. Do you know of something bad that results from functions that take whichever representation they're given?"
        },
        {
          "user": "Penni",
          "timestamp": "2019-03-25T19:36:49.289300",
          "text": "<@Jeanine> I put in the closure that accepts the class name in the \"deep\" syntax class. It worked easily, and even let me simplify some code by making syntax classes no longer return so many attributes. Thanks again!"
        },
        {
          "user": "Danny",
          "timestamp": "2019-03-25T19:50:27.290300",
          "text": "I think I saw this in the implementation of splicing-local the other day."
        }
      ]
    },
    {
      "conversation_id": "365",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Danny: It's an alternative implementation of a splicing definition context that uses local expand rather than trampolining in the context to be spliced into.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Danny"
        ]
      },
      "timeline": [
        {
          "user": "Danny",
          "timestamp": "2019-03-25T19:51:32.292000",
          "text": "It's an alternative implementation of a splicing definition context that uses local expand rather than trampolining in the context to be spliced into."
        }
      ]
    },
    {
      "conversation_id": "366",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: So, I mean, the usual caveat applies: It depends. :smile: Early on, as I explore something new, I define some functions -- without contracts. I have \"types\" in my head, loosely. I try calling these functions from the REPL, supplying various examples, see if they behave as I expect. As things \"settle down\", I might copy some of those REPL example calls inside [CODE] forms in [CODE] submodule, as tests. If the function signatures seem \"obvious\", I might stop there, for awhile. Or, I might also add contracts. But I might wait until things gel, and I feel confident about the decisions. (I think \"premature ceremonialization\" is bad for similar reasons as premature optimization.)\nJulia: &gt; Do you know of something bad that results from functions that take whichever representation they're given? There's some (Alan Perlis??) quote: \"If you have a function with 10 arguments, you probably missed some.\" I feel like a variation of that is, \"If you have a function argument that can be any of 10 different things, you probably missed some.\" I just feel like it's hard enough to make code really correct under all edge cases. So I don't want to add even more edge cases. Also if a function expects an integer, but the caller gives it a string -- the caller is probably confused about something. The sooner the callee complains, and the caller can be fixed, the easier it is. (whereas if it blows up 5 or 10 function calls away from that original confused function, it's going to be harder to fix. Especially if you don't notice the bug until long after the bad thing was written.)\nJulia: So again, some early version of a function, maybe I hedge my bets, don't commit to firmly to what the acceptable values are. That's part of exploring the problem space. But I like to tighten it up as I go along. ¯\\_(ツ)_/¯\nJulia: Also, Lillian described how, over time, you might break a big bunch of code into smaller modules, maybe even publish them as their own packages. Certainly by that time, it's nice to firm things up. \"This function does _this_, here's what it expects from you, here's what you can expect from it, yada yada.\"\nJulia: [CODE]\nLillian: To echo Julia, those [CODE] coercion functions were written early in my Racket (self-)education. The longer I use Racket, the less I rely on them. They can be too lenient. If something is a [CODE] or a [CODE], I should be curious about _why_ it is so. Similar to how one should think twice before using [CODE] or [CODE]: you are possibly sawing against the grain of the data structure.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 42.53,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-03-25T20:03:58.292100",
          "text": "So, I mean, the usual caveat applies: It depends. :smile:\nEarly on, as I explore something new, I define some functions -- without contracts. I have \"types\" in my head, loosely.\nI try calling these functions from the REPL, supplying various examples, see if they behave as I expect.\nAs things \"settle down\", I might copy some of those REPL example calls inside `check-equal?` forms in `(module+ test ___)` submodule, as tests.\nIf the function signatures seem \"obvious\", I might stop there, for awhile.\nOr, I might also add contracts. But I might wait until things gel, and I feel confident about the decisions.\n(I think \"premature ceremonialization\" is bad for similar reasons as premature optimization.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-25T20:07:51.292300",
          "text": "&gt; Do you know of something bad that results from functions that take whichever representation they're given?\nThere's some (Alan Perlis??) quote: \"If you have a function with 10 arguments, you probably missed some.\"\nI feel like a variation of that is, \"If you have a function argument that can be any of 10 different things, you probably missed some.\"\nI just feel like it's hard enough to make code really correct under all edge cases. So I don't want to add even more edge cases.\nAlso if a function expects an integer, but the caller gives it a string -- the caller is probably confused about something. The sooner the callee complains, and the caller can be fixed, the easier it is.  (whereas if it blows up 5 or 10 function calls away from that original confused function, it's going to be harder to fix. Especially if you don't notice the bug until long after the bad thing was written.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-25T20:09:23.292500",
          "text": "So again, some early version of a function, maybe I hedge my bets, don't commit to firmly to what the acceptable values are. That's part of exploring the problem space. But I like to tighten it up as I go along. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-25T20:11:34.292700",
          "text": "Also, <@Lillian> described how, over time, you might break a big bunch of code into smaller modules, maybe even publish them as their own packages.\nCertainly by that time, it's nice to firm things up. \"This function does _this_, here's what it expects from you, here's what you can expect from it, yada yada.\""
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-25T20:11:52.292900",
          "text": "`&lt;/wall-of-text&gt;`"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-25T20:46:30.293100",
          "text": "To echo <@Julia>, those `sugar` coercion functions were written early in my Racket (self-)education. The longer I use Racket, the less I rely on them. They can be too lenient. If something is a `set` or a `vector`, I should be curious about _why_ it is so. Similar to how one should think twice before using `list-ref` or `port-&gt;bytes`: you are possibly sawing against the grain of the data structure."
        }
      ]
    },
    {
      "conversation_id": "367",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: One problem with a type like [CODE] is that its contract would be flat, but for type soundness we need [CODE] on it to fail. We cannot allow a typed function to produce true with the proposition [CODE] on it. The contract should only be used for either [CODE], [CODE], or [CODE], and never for [CODE]. Is there a way to specify that restriction in Typed Racket’s framework?\nElin: A predicate of type [CODE] returning true would be unsound, but a predicate of type [CODE] would be fine.\nMarcelina: (I can't use the macro stepper because the generated code is too big, so I'm trying to do a bit of print line debugging.)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 709.93,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-26T00:31:28.296500",
          "text": "One problem with a type like `DynamicAny` is that its contract would be flat, but for type soundness we need `make-predicate` on it to fail. We cannot allow a typed function to produce true with the proposition `#:+ DynamicAny` on it. The contract should only be used for either `cast`, `require/typed`, or `provide`, and never for `make-predicate`. Is there a way to specify that restriction in Typed Racket’s framework?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-26T00:42:42.297700",
          "text": "A predicate of type `(-&gt; Any Boolean : #:+ DynamicAny)` returning true would be unsound,\nbut a predicate of type `(-&gt; DynamicAny Boolean : #:+ DynamicAny)` would be fine."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T12:21:24.300600",
          "text": "(I can't use the macro stepper because the generated code is too big, so I'm trying to do a bit of print line debugging.)"
        }
      ]
    },
    {
      "conversation_id": "368",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: A definition context immediately nested in another can do this when the inner one wants to splice into the outer one. I don’t remember a macro like that offhand to demonstrate, though.\nMarcelina: Is there any way to print out the set of scopes associated with an identifier?\nMarcelina: I suspect Danny or Jeanine might know?\nJeanine: Marcelina use [CODE], or try the [CODE] package\nMarcelina: Jeanine THanks",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 225.35,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Jeanine",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-26T09:23:33.299200",
          "text": "A definition context immediately nested in another can do this when the inner one wants to splice into the outer one. I don’t remember a macro like that offhand to demonstrate, though."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T12:20:53.299900",
          "text": "Is there any way to print out the set of scopes associated with an identifier?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T12:21:34.300900",
          "text": "I suspect <@Danny> or <@Jeanine> might know?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-03-26T12:24:43.302000",
          "text": "<@Marcelina> use `syntax-debug-info`, or try the `debug-scopes` package"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T13:08:54.302500",
          "text": "<@Jeanine> THanks"
        }
      ]
    },
    {
      "conversation_id": "369",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: I’ve used this [CODE] function (with [CODE]) for debugging, to turn scopes and their jumbles of numbers into letters: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-03-26T13:08:09.302100",
          "text": "I’ve used this `scope-&gt;symbol` function (with `syntax-debug-info`) for debugging, to turn scopes and their jumbles of numbers into letters: <https://gist.github.com/AlexKnauth/11cde092aec836aecb21c9634fedd4f3>"
        }
      ]
    },
    {
      "conversation_id": "370",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: “Two fixnums that are [CODE] are also the same according to [CODE]” Does that mean there’s a potential speed advantage to using [CODE] in preference to [CODE] when you know you’re comparing fixnums?\nLillian: <[URL]\nKristeen: Lillian yes\nLillian: Part 2: “Characters range over Unicode scalar values, which includes characters whose values range from [CODE] to [CODE].” This max value fits into 24 bits. Therefore, am I correct in thinking that every valid Unicode codepoint (and thus, every value resulting from [CODE]) is a fixnum? And therefore can be compared with [CODE] <[URL]\nLillian: (I know that characters themselves are not [CODE])\nShanell: Lillian Nope\nShanell: Only the first, er, 256[? or was it higher?] characters are represented as immediate values.\nShanell: Oh, I should mention that I'm referring to classic Racket. Not sure how chars are represented in Chez.\nShanell: Oh, sorry\nShanell: Wow -- I missed the important part of what you wrote\nShanell: Yes, the integer values are fixnums.\nKaren: would adding [CODE] and [CODE] to racket be a good idea?\nShanell: (And the first 256 aren't represented as immediates; they're just interned, so they're pointers, but they're always the _same_ pointer.)\nLillian: Thank you I will put this knowledge to questionable use\nShanell: I _think_ characters are all immediate in Chez.\nMai: Is there a way to force module instantiation. I.e., make [CODE] twice possible?\nMai: What I want to do is to run the same program with different [CODE].\nGonzalo: If you want to recompile the module then you need to do more than just reinstantiate. Can you do it in two separate namespaces?\nTambra: Even doing it in separate namespaces might not be enough, no? You would also need to do something like set [CODE] to empty to avoid [CODE] from grabbing the file off disk\nTambra: I was assuming it might have been compiled to disk\nGonzalo: Yes, in that case you’d also probably want custom-load.\nTambra: oh right, you don’t want to recompile the universe\nTambra: Mai This might do what you want: [CODE_BLOCK] depending if you only want to recompile for effect or not\nTambra: (well, if you want to do this to something in racket/base it wont work, but fixing that just requires some plumbing)\nMai: Thanks! I was playing around with your earlier suggestion and the program seems to get stuck at [CODE]. Will try your code right now.\nTambra: [CODE] isn’t in the main distribution i think, you’ll need to install it\nTambra: (the pkg has the same name as the collection)\nVicki: [CODE] will compile the entire racket (except the VM) from source :wink:",
      "analysis_metadata": {
        "user_count": 8,
        "message_count": 28,
        "duration_minutes": 51.3,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "need to",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen",
          "Kristeen",
          "Lillian",
          "Mai",
          "Shanell",
          "Tambra",
          "Vicki"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T14:49:23.303700",
          "text": "“Two fixnums that are `=` are also the same according to `eq?`” Does that mean there’s a potential speed advantage to using `eq?` in preference to `=` when you know you’re comparing fixnums?"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T14:49:27.303900",
          "text": "<https://docs.racket-lang.org/reference/numbers.html?q=fixnum#%28tech._fixnum%29>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-26T14:49:46.304200",
          "text": "<@Lillian> yes"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T14:57:22.306800",
          "text": "Part 2: “Characters range over Unicode scalar values, which includes characters whose values range from `#x0` to `#x10FFFF`.” This max value fits into 24 bits. Therefore, am I correct in thinking that every valid Unicode codepoint (and thus, every value resulting from `char-&gt;integer`) is a fixnum? And therefore can be compared with `eq?`  <https://docs.racket-lang.org/reference/characters.html?q=char-%3Einteger#%28def._%28%28quote._~23~25kernel%29._char-~3einteger%29%29>"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T14:57:32.307100",
          "text": "(I know that characters themselves are not `eq?`)"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T14:58:01.307400",
          "text": "<@Lillian> Nope"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T14:59:30.309000",
          "text": "Only the first, er, 256[? or was it higher?] characters are represented as immediate values."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T15:00:17.309600",
          "text": "Oh, I should mention that I'm referring to classic Racket. Not sure how chars are represented in Chez."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T15:00:44.310200",
          "text": "Oh, sorry"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T15:00:51.310600",
          "text": "Wow -- I missed the important part of what you wrote"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T15:01:07.311100",
          "text": "Yes, the integer values are fixnums."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T15:02:21.312300",
          "text": "would adding `fixnum-max-value` and `fixnum-min-value` to racket be a good idea?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T15:02:43.312800",
          "text": "(And the first 256 aren't represented as immediates; they're just interned, so they're pointers, but they're always the _same_ pointer.)"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T15:06:12.314200",
          "text": "Thank you I will put this knowledge to questionable use"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-03-26T15:08:39.314700",
          "text": "I _think_ characters are all immediate in Chez."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-26T15:13:36.315500",
          "text": "Is there a way to force module instantiation. I.e., make `dynamic-require` twice possible?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-26T15:14:10.315900",
          "text": "What I want to do is to run the same program with different `(current-compile)`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T15:15:56.317100",
          "text": "If you want to recompile the module then you need to do more than just reinstantiate. Can you do it in two separate namespaces?"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-26T15:18:50.318400",
          "text": "Even doing it in separate namespaces might not be enough, no? You would also need to do something like set `use-compiled-file-paths` to empty to avoid `current-load/use-compiled` from grabbing the file off disk"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-26T15:20:35.320600",
          "text": "I was assuming it might have been compiled to disk"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T15:20:56.321300",
          "text": "Yes, in that case you’d also probably want custom-load."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-26T15:21:15.321700",
          "text": "oh right, you don’t want to recompile the universe"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-26T15:29:55.323100",
          "text": "<@Mai> This might do what you want:\n\n```\n(require custom-load\n         syntax/modresolve)\n(define (path-&gt;regexp s)\n  (regexp (regexp-quote (path-&gt;string s))))\n(define (force-recompile-for-effect mod)\n  (parameterize ([current-namespace (make-base-namespace)]\n                 [current-load/use-compiled\n                  (make-custom-load/use-compiled\n                   #:blacklist\n                   (let ([p (resolved-module-path-name\n                             ((current-module-name-resolver)\n                              (resolve-module-path mod)\n                              #f\n                              #f\n                              #f))])\n                     (cond  [(path? p) (path-&gt;regexp p)]\n                            [(pair? p)\n                             (if (path? (first p))\n                                 (path-&gt;regexp (first p))\n                                 empty)]\n                            [else empty])))])\n    (dynamic-require mod #f)))\n```\n\ndepending if you only want to recompile for effect or not"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-26T15:31:57.325700",
          "text": "(well, if you want to do this to something in racket/base it wont work, but fixing that just requires some plumbing)"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-26T15:32:24.325900",
          "text": "Thanks! I was playing around with your earlier suggestion and the program seems to get stuck at `(use-compiled-file-paths '())`. Will try your code right now."
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-26T15:32:57.326500",
          "text": "`custom-load` isn’t in the main distribution i think, you’ll need to install it"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-26T15:33:05.326800",
          "text": "(the pkg has the same name as the collection)"
        },
        {
          "user": "Vicki",
          "timestamp": "2019-03-26T15:40:41.327500",
          "text": "`(use-compiled-file-paths '())` will compile the entire racket (except the VM) from source :wink:"
        }
      ]
    },
    {
      "conversation_id": "371",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Well, if the file isn’t compiled on disk then loading it would compile it in-memory, right? So it could work if the namespaces were different. Or does Racket cache that somehow?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T15:20:14.320300",
          "text": "Well, if the file isn’t compiled on disk then loading it would compile it in-memory, right? So it could work if the namespaces were different. Or does Racket cache that somehow?"
        }
      ]
    },
    {
      "conversation_id": "372",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Yes",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-26T15:51:47.327800",
          "text": "Yes"
        }
      ]
    },
    {
      "conversation_id": "373",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Is it more than this?[CODE_BLOCK]\nLillian: “more [complicated]”\nLillian: Perhaps. As a dumb person, I’d suppose that if [CODE] guarantees a pointer-based equality test, and pointers are tied to machine-word size, then [CODE] is permanently tethered to machine-word size (and thus so are fixnums, which are just the signed integers that could be pointers … if we treated them as unsigned integers … something like that)\nMarcelina: None",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 120.8,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Lillian",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T16:15:31.328000",
          "text": "Is it more than this?```\n(define max-fixnum (sub1 (arithmetic-shift 1 (- (system-type 'word) 2))))\n(define min-fixnum (- (arithmetic-shift 1 (- (system-type 'word) 2))))\n```"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T16:15:47.328300",
          "text": "“more [complicated]”"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-26T17:44:52.329300",
          "text": "Perhaps. As a dumb person, I’d suppose that if `eq?` guarantees a pointer-based equality test, and pointers are tied to machine-word size, then `eq?` is permanently tethered to machine-word size (and thus so are fixnums, which are just the signed integers that could be pointers … if we treated them as unsigned integers … something like that)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:16:19.331100",
          "text": "None"
        }
      ]
    },
    {
      "conversation_id": "374",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I don’t know. I remember reading through the fixnum docs and not finding any clear answers on what the max and min were, then later I found the [CODE] trick. But that’s not mentioned anywhere in the fixnum docs.\nKaren: The main thing is that I want something that’s documented right next to all the other fixnum operations, so if the representation of fixnums _changes_ for some reason (like say, as some consequence of moving to Chez Scheme) there’s no chance of breaking client code that needs to know the max and min fixnums.\nKaren: It seems entirely possible to me that racket implementation changes could change how the max and min fixnums depend on [CODE].\nKaren: Yeah that seems like a sensible assumption to me. I just don’t want to _have_ to make such an assumption. It seems way simpler to me to just leave it up to the fixnum module to define what the max and min fixnums are.\nKaren: The “Not My Job” solution.\nMadelaine: I've wished I could give a debugging name argument to [CODE] like the way module scopes are printed.\nMarcelina: Jeanine, Clarinda, &amp; Danny I have the following macro that gives an unbound variable error: <[URL]\nMarcelina: Basically, module [CODE] creates a [CODE], form that creates two macros and has one call another.\nMarcelina: (Which is kind of silly in this example, but my actual code base needs to do this for other reasons.)\nMarcelina: Anyway, module [CODE] creates its own [CODE], and uses it plus the [CODE] to make a referencer macro.\nMarcelina: Finally, module [CODE] Uses the two form [CODE] and the result from [CODE], but gets an unbound variable.\nMarcelina: I feel like there's something silly I'm missing here, but I can't seem to get the example any smaller than that. Would you have any idea what's causing the unbound identifier error?\nMadelaine: I've wanted these constants, and hard-coded them (or what I think they are) into a program, for purposes like working with bitmasks. I would also like constants for the fixnum limits on the platform with the smallest limits. I think Typed Racket must include some version of those for the [CODE] and [CODE] types (\"the sets of values included in the types are architecture-dependent, but typechecking is architecture-independent\"), but I'm not even sure what predicate corresponds to [CODE]: <[URL]\nMadelaine: When I run [CODE] on a sub-collection, does it compile the sub-collection's \"main\" module, too? For example, given the hierarchy: [CODE_BLOCK] does [CODE] compile [CODE], or only [CODE] and its siblings?\nGonzalo: Marcelina The code you’ve written is very twisty, but it seems like maybe you wanted this: [CODE_BLOCK]\nGonzalo: The differences are all in module [CODE]: instead of using [CODE] as [CODE] inside [CODE], it uses the original input syntax to [CODE].\nKaren: I don’t know, but lately I’ve been avoiding this kind of problem by putting all my code in a [CODE] directory and _only_ writing [CODE] modules to expose the public collection-ized API\nKaren: here’s an example: <[URL]\nGonzalo: However, there’s a better way. Don’t unhygienically shadow [CODE]. Instead, call [CODE] again inside of [CODE], like this: [CODE_BLOCK]\nMarcelina: Gonzalo ya...it is very twisty. Sorry. All of the versions without the twists didn't give me the unbound identifier error.\nGonzalo: That way the [CODE] syntax parameter will just have the right value, and user code that shadows it will do the right thing.\nMarcelina: It does look like you made some changes in [CODE]. but still using the name [CODE], yes?\nGonzalo: Oh, I just put those uses of [CODE] in [CODE] so that the ambiguous binding error would point somewhere useful.\nMarcelina: OH, okay\nMarcelina: That's actually very cute. Thanks for pointing it out. :smile:\nGonzalo: What you were doing before was copying the lexical context from (the literal identifier) [CODE] onto the generated [CODE] identifier.\nMadelaine: I think, though, that [CODE] would still need to be re-compiled when [CODE] changes, to avoid errors like \"bad variable linkage; reference to a variable that has the wrong procedure or structure-type shape.\"\nMarcelina: Anyway, I need to shadow [CODE] sadly.\nMarcelina: Because I want [CODE] to be in scope inside of a [CODE].\nKaren: Yes. My only approach to avoid that is to always run [CODE]\nMarcelina: But because its made with a macro plugging into another macro, the default [CODE] is the outer macro, rather than the original call site.\nMarcelina: (I think)\nGonzalo: [CODE] is a syntax parameter, so if you change its value by wrapping something in [CODE], any uses lexically inside the [CODE] will use the new value.\nMarcelina: OH\nMarcelina: I see.\nMarcelina: You literally meant introduce a new syntax-parser inside of the syntax-parser.\nGonzalo: Syntax parameters are designed precisely to avoid needing to shadow identifiers in that way. The original paper explains them in a little more detail: <[URL]\nGonzalo: And yes, the second example code I gave does just that.\nMarcelina: (which is of course inside of yet another [CODE]. ;)\nMarcelina: Okay though, that's useful. (I didn't realize that [CODE] was a syntax-parameter. I must've missed it in the docs.)\nGonzalo: It has to be a syntax parameter, not an unhygienically-introduced binding, because it has a binding.\nGonzalo: If it were unhygienically introduced, then [CODE] wouldn’t even be bound outside of [CODE], and the scribble docs wouldn’t be able to link to it or even associate documentation with it (since there would be no binding to attach the documentation to).\nMarcelina: That is presuming though that the this-syntax in the docs is the same one from syntax-parse. :wink:\nMarcelina: But I get what you mean, and totally agree.\nMadelaine: That is what I usually do now, but I often have a sub-collection like [CODE] that is used by both [CODE] and [CODE]. The immaginary [CODE] and [CODE] don't depend on each other, and they don't peek inside [CODE]: they just [CODE]. Having to recompile [CODE] is slow when developing [CODE] and [CODE].\nMadelaine: I haven't timed it, but the full collection I'm thinking of when I say [CODE] is something like 40,000 lines of code.\nKaren: I’ve definitely hit similar issues in my workflow, and I don’t really have any solutions\nKaren: the compilation infrastructure for racket is frustrating when it comes to dependency management\nMarcelina: Gonzalo Oh fun, when I made the inner [CODE], I got this error:\nMarcelina: [CODE_BLOCK]\nGonzalo: It looks like somehow those aforementioned identifiers are ending up in a scope where they aren’t bound. But I can’t really say any more without seeing the code.\nMarcelina: Ya, that makes sense.\nMarcelina: While I'd be happy to share the code with you, your eyes would start bleeding.\nMarcelina: (its about 200 lines long, uses splicing-let and splicing-let-syntax, creates submodule pieces (that another macro combines), it creates whole submodules in those submodule pieces. It defines a macro definer, and finally it defines a class type.)\nMarcelina: The sad thing is that most of the real smarts are in other macros...the 200 lines is _after_ I factored out a bunch of code. :confused:\nMarcelina: (I'm sure there's more I could factor out obviously.)\nMarcelina: Of course though, I'd be happy to point you to it should you decide you're life needed more unpleasantness in it. :wink:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 57,
        "duration_minutes": 132.9,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "create",
          "decide",
          "fix",
          "implement",
          "must",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen",
          "Madelaine",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-26T16:52:04.328500",
          "text": "I don’t know.  I remember reading through the fixnum docs and not finding any clear answers on what the max and min were, then later I found the `(system-type 'word)` trick. But that’s not mentioned anywhere in the fixnum docs."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T16:53:49.328700",
          "text": "The main thing is that I want something that’s documented right next to all the other fixnum operations, so if the representation of fixnums _changes_ for some reason (like say, as some consequence of moving to Chez Scheme) there’s no chance of breaking client code that needs to know the max and min fixnums."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T16:54:44.328900",
          "text": "It seems entirely possible to me that racket implementation changes could change how the max and min fixnums depend on `(system-type 'word)`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T17:49:32.329500",
          "text": "Yeah that seems like a sensible assumption to me. I just don’t want to _have_ to make such an assumption. It seems way simpler to me to just leave it up to the fixnum module to define what the max and min fixnums are."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T17:49:48.329700",
          "text": "The “Not My Job” solution."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-26T18:13:50.330000",
          "text": "I've wished I could give a debugging name argument to `make-syntax-introducer` like the way module scopes are printed."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:16:17.331000",
          "text": "<@Jeanine>, <@Clarinda>, &amp; <@Danny> I have the following macro that gives an unbound variable error: <https://gist.github.com/LeifAndersen/0e625b56167bbd15a9dfd2745836ae73>"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:17:12.332000",
          "text": "Basically, module `A` creates a `define-foo`, form that creates two macros and has one call another."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:17:44.332800",
          "text": "(Which is kind of silly in this example, but my actual code base needs to do this for other reasons.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:18:38.333700",
          "text": "Anyway, module `B` creates its own `define/leif`, and uses it plus the `define-foo` to make a referencer macro."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:19:48.334500",
          "text": "Finally, module `C` Uses the two form `(define/leif)` and the result from `define-foo`, but gets an unbound variable."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:20:59.335400",
          "text": "I feel like there's something silly I'm missing here, but I can't seem to get the example any smaller than that. Would you have any idea what's causing the unbound identifier error?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-26T18:22:18.335500",
          "text": "I've wanted these constants, and hard-coded them (or what I think they are) into a program, for purposes like working with bitmasks. I would also like constants for the fixnum limits on the platform with the smallest limits. I think Typed Racket must include some version of those for the `Fixnum` and `Index` types (\"the sets of values included in the types are architecture-dependent, but typechecking is architecture-independent\"), but I'm not even sure what predicate corresponds to `Index`: <https://docs.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Index%29%29>"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-26T18:26:29.338400",
          "text": "When I run `raco setup` on a sub-collection, does it compile the sub-collection's \"main\" module, too? For example, given the hierarchy:\n```\nfruit/\n├── apple.rkt\n├── apple/\n│   ├── granny-smith.rkt\n│   └── ...\n├── peach.rkt\n└── peach/\n    ├── georgia.rkt\n    └── ...\n```\ndoes `raco setup fruit/apple` compile `fruit/apple.rkt`, or only `fruit/apple/granny-smith.rkt` and its siblings?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:27:12.339000",
          "text": "<@Marcelina> The code you’ve written is very twisty, but it seems like maybe you wanted this:\n```\n#lang racket/base\n\n(module A racket\n  (require syntax/parse/define)\n  (provide define-foo)\n  (define-syntax-parser define-foo\n    [(_ name body ...)\n     #:with this-syntax-id (datum-&gt;syntax #'name 'this-syntax #'here)\n     #'(begin\n         (define-syntax foo2\n           (syntax-parser\n             [(_ n)\n              #:do [(define this-syntax-id #'n)]\n              body ...]))\n         (define-syntax name\n           (syntax-parser\n             [(_) #`(foo2 #,this-syntax)])))]))\n\n(module B racket\n  (require (submod \"..\" A) syntax/parse/define)\n  (provide (all-defined-out))\n  (define-syntax-parser define/leif\n    [(_)\n     #:with leif (datum-&gt;syntax this-syntax 'leif #'here)\n     #'(define leif 42)])\n  (define-foo blue\n    #:with leif (datum-&gt;syntax this-syntax 'leif #'here)\n    #'leif))\n\n(module C racket\n  (require (submod \"..\" B))\n  (define/leif)\n  (blue))\n\n(require 'C)\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:28:05.340100",
          "text": "The differences are all in module `A`: instead of using `#'name` as `this-syntax` inside `foo2`, it uses the original input syntax to `name`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T18:28:30.340500",
          "text": "I don’t know, but lately I’ve been avoiding this kind of problem by putting all my code in a `private/` directory and _only_ writing `#lang reprovide` modules to expose the public collection-ized API"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T18:28:53.341100",
          "text": "here’s an example: <https://github.com/jackfirth/rebellion>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:29:50.341800",
          "text": "However, there’s a better way. Don’t unhygienically shadow `this-syntax`. Instead, call `syntax-parse` again inside of `foo2`, like this:\n```(module A racket\n  (require syntax/parse/define)\n  (provide define-foo)\n  (define-syntax-parser define-foo\n    [(_ name body ...)\n     #'(begin\n         (define-syntax foo2\n           (syntax-parser\n             [(_ orig-stx)\n              (syntax-parse #'orig-stx\n                [_\n                 body ...])]))\n         (define-syntax name\n           (syntax-parser\n             [(_) #`(foo2 #,this-syntax)])))]))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:30:58.343200",
          "text": "<@Gonzalo> ya...it is very twisty. Sorry. All of the versions without the twists didn't give me the unbound identifier error."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:30:58.343300",
          "text": "That way the `this-syntax` syntax parameter will just have the right value, and user code that shadows it will do the right thing."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:32:08.344700",
          "text": "It does look like you made some changes in `B`. but still using the name `this-syntax`, yes?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:32:42.345300",
          "text": "Oh, I just put those uses of `#'here` in `B` so that the ambiguous binding error would point somewhere useful."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:33:03.345500",
          "text": "OH, okay"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:33:19.345900",
          "text": "That's actually very cute. Thanks for pointing it out. :smile:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:34:07.346600",
          "text": "What you were doing before was copying the lexical context from (the literal identifier) `blue` onto the generated `leif` identifier."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-26T18:34:15.346700",
          "text": "I think, though, that `fruit/apple.rkt` would still need to be re-compiled when `fruit/apple/granny-smith.rkt` changes, to avoid errors like \"bad variable linkage; reference to a variable that has the wrong procedure or structure-type shape.\""
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:34:49.347200",
          "text": "Anyway, I need to shadow `this-syntax` sadly."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:35:03.347600",
          "text": "Because I want `this-syntax` to be in scope inside of a `define-foo`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T18:35:08.347800",
          "text": "Yes. My only approach to avoid that is to always run `raco setup -p mywholepackage`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:35:34.348900",
          "text": "But because its made with a macro plugging into another macro, the default `this-syntax` is the outer macro, rather than the original call site."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:35:38.349200",
          "text": "(I think)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:35:48.349400",
          "text": "`this-syntax` is a syntax parameter, so if you change its value by wrapping something in `syntax-parse`, any uses lexically inside the `syntax-parse` will use the new value."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:36:41.350100",
          "text": "OH"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:36:43.350300",
          "text": "I see."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:37:13.351100",
          "text": "You literally meant introduce a new syntax-parser inside of the syntax-parser."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:37:17.351300",
          "text": "Syntax parameters are designed precisely to avoid needing to shadow identifiers in that way. The original paper explains them in a little more detail: <http://scheme2011.ucombinator.org/papers/Barzilay2011.pdf>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:37:26.351700",
          "text": "And yes, the second example code I gave does just that."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:37:35.351900",
          "text": "(which is of course inside of yet another `syntax-parser`. ;)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:38:44.352800",
          "text": "Okay though, that's useful. (I didn't realize that `this-syntax` was a syntax-parameter. I must've missed it in the docs.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:39:13.353300",
          "text": "It has to be a syntax parameter, not an unhygienically-introduced binding, because it has a binding."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:39:59.354300",
          "text": "If it were unhygienically introduced, then `this-syntax` wouldn’t even be bound outside of `syntax-parse`, and the scribble docs wouldn’t be able to link to it or even associate documentation with it (since there would be no binding to attach the documentation to)."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:40:44.354900",
          "text": "That is presuming though that the this-syntax in the docs is the same one from syntax-parse. :wink:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:40:50.355200",
          "text": "But I get what you mean, and totally agree."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-26T18:42:05.355300",
          "text": "That is what I usually do now, but I often have a sub-collection like `example/common` that is used by both `example/foo` and `example/bar`. The immaginary  `example/foo` and `example/bar` don't depend on each other, and they don't peek inside `example/common`: they just `(require example/common)`. Having to recompile `example/bar` is slow when developing `example/common` and `example/foo`."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-26T18:46:33.355800",
          "text": "I haven't timed it, but the full collection I'm thinking of when I say `example` is something like 40,000 lines of code."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T18:50:13.356200",
          "text": "I’ve definitely hit similar issues in my workflow, and I don’t really have any solutions"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-26T18:50:56.356400",
          "text": "the compilation infrastructure for racket is frustrating when it comes to dependency management"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:55:56.356900",
          "text": "<@Gonzalo> Oh fun, when I made the inner `syntax-parse`, I got this error:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:56:01.357100",
          "text": "```\ndefine-values: not allowed in an expression position\n  after encountering unbound identifiers (which is possibly the real problem):\n   this\n   define-elaborate\n   super-new\n   base$\n   foo$\n   define-editor\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T18:56:59.357900",
          "text": "It looks like somehow those aforementioned identifiers are ending up in a scope where they aren’t bound. But I can’t really say any more without seeing the code."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:57:19.358100",
          "text": "Ya, that makes sense."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:57:37.358700",
          "text": "While I'd be happy to share the code with you, your eyes would start bleeding."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:59:22.359900",
          "text": "(its about 200 lines long, uses splicing-let and splicing-let-syntax, creates submodule pieces (that another macro combines), it creates whole submodules in those submodule pieces. It defines a macro definer, and finally it defines a class type.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T18:59:51.360600",
          "text": "The sad thing is that most of the real smarts are in other macros...the 200 lines is _after_ I factored out a bunch of code. :confused:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T19:00:02.360900",
          "text": "(I'm sure there's more I could factor out obviously.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-26T19:04:58.361900",
          "text": "Of course though, I'd be happy to point you to it should you decide you're life needed more unpleasantness in it. :wink:"
        }
      ]
    },
    {
      "conversation_id": "375",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Oh…. interesting.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-26T17:09:38.329100",
          "text": "Oh…. interesting."
        }
      ]
    },
    {
      "conversation_id": "376",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: how slow?\nMadelaine: In reality, [CODE] also includes a lot of [CODE] code, and the relative slowness of the [CODE] compiler is noticeable.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 3.2,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-26T18:45:11.355600",
          "text": "how slow?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-26T18:48:23.356000",
          "text": "In reality, `ricoeur/portal` also includes a lot of `#lang web-server` code, and the relative slowness of the `#lang web-server` compiler is noticeable."
        }
      ]
    },
    {
      "conversation_id": "377",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Vicki: To be more accurate, the [CODE] parameter instructs where should Racket look for bytecode files. If it is set to [CODE], IIUC any new module declaration will need to load (and compile) from source. Therefore if you dynamically require [CODE] in a namespace from [CODE], anything outside [CODE] that [CODE] depends on will be compiled from source.\nClarinda: Madelaine Out of curiosty, why compile [CODE] explicitly instead of just compiling [CODE] (which will recompile whatever [CODE] uses)?\nGonzalo: Thanks, I suspected that might be the case. For context, I’m trying to figure out how to generate values at phase 1 that will be embedded in expanded phase 0 code and will be unique at runtime (but they only need to be unique within a single module). I see a few ways to do this. I could arrange for runtime definitions to be generated that hold gensyms and reference those definitions instead of generating quoted values directly. That would require some extra bookkeeping to ensure the definitions end up in the right place, though. Another might be to use identifiers instead of symbols, made with generate-temporary and preserved with quote-syntax instead of quote, then compared at runtime with free-identifier=?. That seems heavyweight, since I care about the equality check being fast, but maybe it doesn’t matter. A third way would be to just hold a mutable counter in memory at compile time and generate unique symbols by appending the counter to the end and incrementing the counter atomically using box-cas!, and I think this would guarantee that each symbol would at least be unique from other symbols generated that way during the compilation of a single module, which is all I need. Is there a better option?\nShavon: Clarinda not an expert on numerics but i took a look at the paper and the code and they seem to agree. I executed the tests he posted on pasterack and accuracy is higher without the issues at z=18.25 so looks good to me. only thing i would say is that i would prefer to avoid (z . &lt; . X) comparisons in the codebase, but that's really just a syntactic niggle.\nShavon: Clarinda should add that a few runs of his tests showed the solution to be slower by 13.6%.\nShavon: Wonder if there's anything that can be done to improve that while still having the same benefits he presented in his method.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 6,
        "duration_minutes": 957.12,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo",
          "Shavon",
          "Vicki"
        ]
      },
      "timeline": [
        {
          "user": "Vicki",
          "timestamp": "2019-03-26T19:37:14.362000",
          "text": "To be more accurate, the `use-compiled-file-paths` parameter instructs where should Racket  look for bytecode files.\n\nIf it is set to `'()`, IIUC any new module declaration will need to load (and compile) from source.\n\nTherefore if you dynamically require `racket/contract` in a namespace from `(make-base-namespace)`, anything outside `racket/base` that `racket/contract` depends on will be compiled from source."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-27T10:09:03.366800",
          "text": "<@Madelaine> Out of curiosty, why compile `example/common` explicitly instead of just compiling `example/foo` (which will recompile whatever `example/foo` uses)?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-27T11:22:34.382500",
          "text": "Thanks, I suspected that might be the case. For context, I’m trying to figure out how to generate values at phase 1 that will be embedded in expanded phase 0 code and will be unique at runtime (but they only need to be unique within a single module). I see a few ways to do this. I could arrange for runtime definitions to be generated that hold gensyms and reference those definitions instead of generating quoted values directly. That would require some extra bookkeeping to ensure the definitions end up in the right place, though. Another might be to use identifiers instead of symbols, made with generate-temporary and preserved with quote-syntax instead of quote, then compared at runtime with free-identifier=?. That seems heavyweight, since I care about the equality check being fast, but maybe it doesn’t matter. A third way would be to just hold a mutable counter in memory at compile time and generate unique symbols by appending the counter to the end and incrementing the counter atomically using box-cas!, and I think this would guarantee that each symbol would at least be unique from other symbols generated that way during the compilation of a single module, which is all I need. Is there a better option?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-27T11:23:32.383600",
          "text": "<@Clarinda> not an expert on numerics but i took a look at the paper and the code and they seem to agree. I executed the tests he posted on pasterack and accuracy is higher without the issues at z=18.25 so looks good to me.  only thing i would say is that i would prefer to avoid (z . &lt; . X) comparisons in the codebase, but that's really just a syntactic niggle."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-27T11:33:39.385000",
          "text": "<@Clarinda> should add that a few runs of his tests showed the solution to be slower by 13.6%."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-27T11:34:21.385800",
          "text": "Wonder if there's anything that can be done to improve that while still having the same benefits he presented in his method."
        }
      ]
    },
    {
      "conversation_id": "378",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Is there any guarantee that two [CODE]s will have distinct symbolic names if they were generated in the same namespace? And if not, does anything in Racket marshallable to bytecode provide that kind of guarantee?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-26T21:50:20.363400",
          "text": "Is there any guarantee that two `gensym`s will have distinct symbolic names if they were generated in the same namespace? And if not, does anything in Racket marshallable to bytecode provide that kind of guarantee?"
        }
      ]
    },
    {
      "conversation_id": "379",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Fun fact: the name of a gensym symbol on Chez is not generated until it is needed. What Racket on Chez does - I don’t know.\nClarinda: There’s no guarantee. In the current implementation, the names will be different when they’re generated in the same place and run of Racket, independent of namespace.\nPriscila: <[URL]\nKami: I've got a question for you friends: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 191.78,
        "contains_question": false,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Kami",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-27T08:15:55.366500",
          "text": "Fun fact: the name of a gensym symbol on Chez is not generated until it is needed. What Racket on Chez does - I don’t know. "
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-27T08:28:14.366600",
          "text": "There’s no guarantee. In the current implementation, the names will be different when they’re generated in the same place  and run of Racket, independent of namespace."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-27T10:52:37.368100",
          "text": "<https://www.reddit.com/r/Racket/comments/b5o34z/any_way_to_improve_performance_of_drracket/>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-27T11:27:42.384000",
          "text": "I've got a question for you friends: <https://stackoverflow.com/questions/55380849/is-it-possible-to-change-the-result-of-a-syntax-class>"
        }
      ]
    },
    {
      "conversation_id": "380",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Anyone with numerics expertise and an opinion on <[URL] ? It looks plausible to me…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-27T10:50:00.367700",
          "text": "Anyone with numerics expertise and an opinion on <https://github.com/racket/racket/pull/2565> ? It looks plausible to me…"
        }
      ]
    },
    {
      "conversation_id": "381",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Karen which frustrating things are you thinking of?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T11:04:15.368300",
          "text": "<@Karen> which frustrating things are you thinking of?"
        }
      ]
    },
    {
      "conversation_id": "382",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Priscila racket-on-chez doesn't use chez gensyms\nElin: No, something like [CODE] or [CODE], [CODE], or some other named attribute, is necessary. You can make that attribute a short name, like a single letter… that’s what [CODE] does with its [CODE] attribute.\nClarinda: That last option sounds right. The macro expander does that to generate “unreadable” symbols to represent distinct bindings. A counter that resets with each module expansion has the benefit of generating a consistent result when the same module is recompiled.\nGonzalo: Okay, I’ll go with that, then. Thanks!\nElin: Come to think about it, you could name the attribute the “empty symbol” [CODE], and then instead of [CODE] you could use [CODE]… [CODE_BLOCK]\nKami: Wow, tricky :stuck_out_tongue:\nKami: My issue is that I'm generating those macros, so I don't know in advance if the element is gonna be a splicing class or not. To prevent that, I made a dummy class that has a [CODE] with it's own content, and I apply this class to everything. This way, I always have a [CODE] attribute. But I was trying to find a better way.\nElin: I’m curious what the macros look like when you use them, and what they’re meant to do\nKami: I made a way to declare objects that have attributes, like so: [CODE_BLOCK] To create an instance of this fish, you would do like this: [CODE_BLOCK] But some contracts, like [CODE], trigger a different syntax, in which you can omit the [CODE] call: [CODE_BLOCK] Since I don't know in advance if the attribute is going to have such a contract, I need to generate a macro that handle having some attributes splicing, and some not.\nKami: The implementation is there: <[URL]\nKami: I hope it makes sense, cause this macro is starting to get out of control x)",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 11,
        "duration_minutes": 38.03,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Gonzalo",
          "Kami",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T11:54:53.386200",
          "text": "<@Priscila> racket-on-chez doesn't use chez gensyms"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T12:02:55.386300",
          "text": "No, something like `.result` or `.norm`, `.value`, or some other named attribute, is necessary. You can make that attribute a short name, like a single letter… that’s what `(expr/c contract)` does with its `.c` attribute."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-27T12:04:01.386500",
          "text": "That last option sounds right. The macro expander does that to generate “unreadable” symbols to represent distinct bindings. A counter that resets with each module expansion has the benefit of generating a consistent result when the same module is recompiled."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-27T12:07:14.386700",
          "text": "Okay, I’ll go with that, then. Thanks!"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T12:07:45.386900",
          "text": "Come to think about it, you could name the attribute the “empty symbol” `||`, and then instead of `p.result` you could use `p.`…\n```\n(define-splicing-syntax-class pair\n  [pattern {~seq a b} #:attr || #'(list a b)])\n\n(syntax-parse #'(hash 1 \"do\" 2 \"re\" 3 \"mi\" 4 \"fa\" 5 \"sol\")\n  [(_ p:pair ...) #'(list p. ...)])\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-27T12:08:04.387100",
          "text": "Wow, tricky :stuck_out_tongue:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-27T12:09:49.387300",
          "text": "My issue is that I'm generating those macros, so I don't know in advance if the element is gonna be a splicing class or not. To prevent that, I made a dummy class that has a `result` with it's own content, and I apply this class to everything. This way, I always have a `.result` attribute. But I was trying to find a better way."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T12:12:47.387500",
          "text": "I’m curious what the macros look like when you use them, and what they’re meant to do"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-27T12:19:06.387700",
          "text": "I made a way to declare objects that have attributes, like so:\n```\n(define-quest-actor fish\n  (attributes\n    (position vec?)\n    (color symbol?)))\n```\nTo create an instance of this fish, you would do like this:\n```\n(fish (position (vec 1.0 1.0))\n      (color 'red))\n```\nBut some contracts, like `vec?`, trigger a different syntax, in which you can omit the `(vec)` call:\n```\n(fish (position 1.0 1.0)\n      (color 'red))\n```\nSince I don't know in advance if the attribute is going to have such a contract, I need to generate a macro that handle having some attributes splicing, and some not."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-27T12:20:21.387900",
          "text": "The implementation is there: <https://github.com/euhmeuh/rilouworld/blob/master/private/bundle/expander.rkt>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-27T12:32:55.388300",
          "text": "I hope it makes sense, cause this macro is starting to get out of control x)"
        }
      ]
    },
    {
      "conversation_id": "383",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Thanks!\nKristeen: I think because it wouldn't behave the way current racket does, but Clarinda may know for sure",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 51.6,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-27T12:54:55.388500",
          "text": "Thanks!"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T13:46:31.390000",
          "text": "I think because it wouldn't behave the way current racket does, but <@Clarinda> may know for sure"
        }
      ]
    },
    {
      "conversation_id": "384",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tambra: Interesting… Why doesn’t it?\nKristeen: (currently racketcs gensyms are about 3x slower than Racket gensyms and much much slower than Chez gensyms when you don't look at them)\nTambra: Ah, looks like this explains why: <[URL]\nClarinda: Yes, to “because it wouldn’t behave the way current racket does”. I have been tempted to add Racket gensyms (which are more conventional) to Chez Scheme and vice versa, but the difference has never been big enough to finish either addition.\nKristeen: It would be interesting to measure how many Racket gensyms are forced in the chez sense\nElin: Does the [CODE] predicate have the syntax class associated with it or something?\nElin: I see you’re embedding [CODE] and [CODE] as syntax objects into the [CODE] struct. I would avoid this, and instead define a syntax class to express this. Then instead of putting those syntax objects in the [CODE] struct, I would put identifiers that point to those syntax classes.\nKaren: Yes. And more determinism / reproducibility, and more APIs like that [CODE] module proposed by Ryan.\nKaren: I think it would also be interesting to know how many uses of Racket gensyms in macros are unnecessary.\nKaren: Things seem pretty deterministic on the same machine. Cross-machine determinism is what I had in mind.\nKaren: Yes. That best practice really needs to be explicitly documented somewhere. Ideally with a link to it in the docs for [CODE].\nMarcelina: 1. You bind something _not_ in a reader macro.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 12,
        "duration_minutes": 93.25,
        "contains_question": true,
        "action_keywords": [
          "finish"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Karen",
          "Kristeen",
          "Marcelina",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Tambra",
          "timestamp": "2019-03-27T13:45:20.389800",
          "text": "Interesting… Why doesn’t it?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T13:47:33.390200",
          "text": "(currently racketcs gensyms are about 3x slower than Racket gensyms and much much slower than  Chez gensyms when you don't look at them)"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-03-27T13:51:42.390400",
          "text": "Ah, looks like this explains why:\n\n<https://github.com/racket/racket/commit/fd462604bd653544b7e3898d2a67d8fc4fea8e48>"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-27T14:01:17.390600",
          "text": "Yes, to “because it wouldn’t behave the way current racket does”. I have been tempted to add Racket gensyms (which are more conventional) to Chez Scheme and vice versa, but the difference has never been big enough to finish either addition."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T14:02:25.390800",
          "text": "It would be interesting to measure how many Racket gensyms are forced in the chez sense"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T14:02:46.391000",
          "text": "Does the `vec?` predicate have the syntax class associated with it or something?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T14:21:07.392600",
          "text": "I see you’re embedding `&lt;own-attr&gt;.parse-pat` and `&lt;own-attr&gt;.parse-res` as syntax objects into the `define-syntax`  struct. I would avoid this, and instead define a syntax class to express this.\n\nThen instead of putting those syntax objects in the `define-syntax` struct, I would put identifiers that point to those syntax classes."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T14:25:47.393000",
          "text": "Yes. And more determinism / reproducibility, and more APIs like that `whereis` module proposed by Ryan."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T14:27:33.393200",
          "text": "I think it would also be interesting to know how many uses of Racket gensyms in macros are unnecessary."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T15:04:11.394000",
          "text": "Things seem pretty deterministic on the same machine. Cross-machine determinism is what I had in mind."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T15:06:31.394200",
          "text": "Yes. That best practice really needs to be explicitly documented somewhere. Ideally with a link to it in the docs for `gensym`."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:18:35.395800",
          "text": "1. You bind something _not_ in a reader macro."
        }
      ]
    },
    {
      "conversation_id": "385",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Registration is open for Racket School 2019 (8–12 July) and ninth RacketCon (13–14 July) <[URL]\nKaren: Kristeen I wish I didn't have to leave racket and use the terminal for so many things. I'd prefer to write a program in a [CODE] saying how I'd like to compile and test code. I have memory problems so command line APIs and shell scripts are generally very frustrating for me.\nKristeen: ah, so more racket functions for performing compilation/package tasks?\nElin: This is similar to what you’re already doing with [CODE], [CODE], etc, so I would just do that more, for new macro-defined syntax classes in addition to pre-defined syntax classes.\nKristeen: which things are non-deterministic?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 5,
        "duration_minutes": 21.57,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Karen",
          "Kristeen",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-27T14:18:45.391900",
          "text": "Registration is open for Racket School 2019 (8–12 July) and ninth RacketCon (13–14 July) <https://con.racket-lang.org/>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T14:19:50.392100",
          "text": "<@Kristeen> I wish I didn't have to leave racket and use the terminal for so many things. I'd prefer to write a program in a `#lang` saying how I'd like to compile and test code. I have memory problems so command line APIs and shell scripts are generally very frustrating for me."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T14:20:53.392300",
          "text": "ah, so more racket functions for performing compilation/package tasks?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T14:24:46.392800",
          "text": "This is similar to what you’re already doing with `#'any-exp`, `#'vec-exp`, etc, so I would just do that more, for new macro-defined syntax classes in addition to pre-defined syntax classes."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T14:40:19.393400",
          "text": "which things are non-deterministic?"
        }
      ]
    },
    {
      "conversation_id": "386",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Racket macros generally do not/should not use [CODE], because it enforces uniqueness by virtue of being uninterned, but uninterned symbols become interned symbols when they are written to bytecode. Rather, Racket macros that need unique identifiers should use [CODE], instead, which enforces uniqueness by adding a fresh scope, which is a kind of uniqueness that cooperates well with the macro system.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-27T14:49:47.393800",
          "text": "Racket macros generally do not/should not use `gensym`, because it enforces uniqueness by virtue of being uninterned, but uninterned symbols become interned symbols when they are written to bytecode. Rather, Racket macros that need unique identifiers should use `generate-temporary`, instead, which enforces uniqueness by adding a fresh scope, which is a kind of uniqueness that cooperates well with the macro system."
        }
      ]
    },
    {
      "conversation_id": "387",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Hey Elin just an FYI, your hygenic reader macro package doesn't work if:\nElin: “not”?\nMarcelina: Ya, basically if you bind something with a standard macro.\nMarcelina: and then 2. try to reference that thing from a macro generated by a reader macro.\nMarcelina: Like, as an example. Imagine I've made a (admittedly silly) macro [CODE]\nMarcelina: the semantics of [CODE] is to expand to [CODE], where [CODE] is added to the user's scope.\nMarcelina: Next, you create a reader macro, say [CODE], which reads to [CODE].\nMarcelina: The [CODE] macro expands to [CODE], where [CODE] is whatever [CODE] is bound in the user's scope.\nMarcelina: If I then write the following program:\nMarcelina: [CODE_BLOCK] You'll get a [CODE] unbound error.\nElin: So [CODE] is an unhygienic macro, but the reference to it should be generated hygienically?\nMarcelina: (But if you just do: [CODE_BLOCK] it obviously works fine.)\nMarcelina: Yes, ,that is correct.\nMarcelina: I want [CODE] to always be read as this specific [CODE] form.\nElin: I assume that if you write [CODE_BLOCK] That works?\nMarcelina: Yes it does.\nMarcelina: Because in that case [CODE] has the outer scope, not the inner one.\nMarcelina: Unfortunately this might be a fundamental issue, as I can't find any way to work around it without just dropping hygenic reader macros. :disappointed:\nKristeen: I think you should always get the same zo files, for example\nElin: How is [CODE] defined? Does it use [CODE], or does it use [CODE] or something?\nKaren: It's likely much more of a communication and documentation hurdle than a technical one.\nElin: Marcelina I got some version of this to work in the most useless way. By fiddling with the definitions of [CODE] and [CODE], I was able to get this program to work: [CODE_BLOCK] However, putting anything around the use of the reader macro causes it to fail: [CODE_BLOCK]\nMarcelina: Elin [CODE] uses datum-&gt;syntax.\nMarcelina: Anyway, [CODE] was defined with something like this:\nMarcelina: [CODE_BLOCK]\nMarcelina: Where [CODE] expands to a [CODE]. (A la the example Gonzalo was helping with yesterday.)\nMarcelina: err...[CODE] and [CODE].\nElin: Is that the elaborator for the editors?\nElin: Anyway, If I change the definition of [CODE] to use [CODE] and [CODE] and the definition of [CODE] to use [CODE], then I get it to work if [CODE] is exactly at the top level, but not within a definition or function call.\nElin: Actually, this program fails the same way: [CODE_BLOCK] in another file: [CODE_BLOCK]\nElin: But [CODE_BLOCK] works fine.\nMarcelina: Elin ya, that's the elaborator for the editors.\nMarcelina: Okay. Although that seems like an odd way to bind a new variable.\nMarcelina: (I know Danny complains all the time about people needing to use [CODE] for that purpose.)\nKaren: Marcelina for which purpose exactly? (curious)\nMarcelina: Oh, IIRC, its just that (ideally) [CODE] should just be an internal implementation detail rather than part of the public API. I forget why though. Anyway, I'm sure Michael would know more about what Michael thinks. :wink:\nKaren: huh :thinking_face:\nMarcelina: Umm... I *think* its related to the fact that it exposes that inside of a macro is more of a negative space, while outside is a positive space. Which causes Gonzalo to make her...uhh....macro-like-apply?\nMarcelina: Anyway, sorry, I'm probably not being very coherent right now. I also don't really understand the argument entirely myself.\nKaren: sounds like someone somewhere ought to write a blog post\nKristeen: [CODE] is just [CODE] + [CODE] so it seems like removing it would really mean \"don't expose scopes to macro programmers\"\nKaren: I was thinking it meant that there shouldn’t be an introduction scope that’s added to macros by default, and instead evaluating [CODE] should create a scope and add it to things. If anyone remembers that racket-users thread started by lexi that talked about alternate approaches to hygiene, that’s what I’m thinking of.\nKristeen: Karen that's an idea proposed previously by Andre van Tonder\nKaren: yes! that’s the one\nKristeen: I think you want SRFI 72\nKaren: I think I don’t know what I want\nKristeen: I mean, SRFI 72 is his spec document\nMarcelina: I think I want to know what I think I want...I think?\nKaren: What I mean is although that’s definitely the right spec for that alternative, I don’t know how I feel about that specific alternative.\nMarcelina: But ya, I think Kristeen is right, that its having scope sets as part of the public API...probably.\nKaren: Scope sets don’t feel like they are part of the public API now\nKaren: they’re sort of indirectly referred to via introducer functions\nKaren: but there’s no [CODE] predicate or [CODE] predicate\nKristeen: the relevant thread is [CODE] from March 2018\nKristeen: Karen I think the docs for [CODE] make it clear that scopes are part of the API\nKristeen: it has a bad name for historical reasons\nKristeen: and it's encapsulated by a procedure rather than a struct with a procedure that takes it as an argument\nKaren: Kristeen I don’t think encapsulating scopes in procedures is the same as making scopes part of the API. The functionality is the same, but it feels totally different to users.\nMarcelina: Karen Is that true? Most of the users I've talked to (or been in the past) either have no idea what syntax-local-introduce does, or understands that its basically a toggle switch for a macro scope.\nKristeen: If there was a [CODE] function that answered [CODE] to the results of [CODE] would you feel differently?\nKaren: Marcelina In fairness, I guess I can’t say if it feels totally different to users. But it does feel totally different to _me_.\nMarcelina: fair.\nKaren: Kristeen Yes, provided there were also a few scope-related functions whose names started with [CODE]. Like [CODE], and similar for [CODE] / [CODE].\nMarcelina: Anyway, there's also the [CODE] and family.\nMarcelina: (admittedly Mathew made that public because of some really terrible macros I needed to write.)\nKaren: this package is closer in spirit to what I think of as a “public scopes API”: <[URL]\nKristeen: Right but that library is a very simple wrapper over the current API\nKaren: Yup. But it feels totally different and is much more intuitive to me.\nKristeen: And even more, the concepts and operations in that library are 1-1 with the racket API\nKristeen: So I can totally agree that such an API would be nicer\nKristeen: But I think they expose the same things\nMarcelina: Just with nicer names. :wink:\nMarcelina: (for some definition of 'nicer' anyway.)\nMarcelina: Anyway, from my (very limited) experience, the more complex the macros you make, the more scope sets pop out of the API. But at least _most_ of the time I don't have to think about it (too much)\nMarcelina: probably.\nKaren: Kristeen Think about it this way: what if everywhere racket currently uses numbers, it instead described “successor introducers” which were functions that you had to call with special arguments in order to do math? Like [CODE]\nKaren: The functionality is the same. But it’s a vastly different experience.\nMarcelina: Karen Wait, aren't there some FP languages that do exactly that? And the 'successor introducers' do feel like just numbers.\nMarcelina: Like,where 3 is a function.\nMarcelina: And + takes a function that takes two functions and results in another function that is the sum?\nKaren: Marcelina There are languages that do that for a semi-internal representation of things but they usually have reader-level syntax to support it and go to efforts to simplify / hide this representation in things like error messages. Because it confuses the hell out of people.\nKaren: If you want to write a number like three, you just write the number [CODE]. If you want to add things, you just write [CODE]. This might be achieved through a representation of numbers as closures and defining [CODE] as a closure-accepting-and-returning operator. But you aren’t forced to actually think about that.\nKaren: And docs don’t describe numbers as “successor introducers”, they just call them numbers.\nMarcelina: Karen Okay, then I must be missing something here. Because I don't see how your description of [CODE] is substantively different from [CODE]. But that's okay. Brain no longer feels like jelly thank god, so I can get back to work. :slightly_smiling_face:\nKaren: Marcelina There’s no functionality difference. There’s only communication and experience differences. For example, when I put the text cursor over [CODE] in DrRacket and press F1, I get taken to documentation for [CODE].\nKaren: People underestimate how much those kinds of differences affect what code people write\nMarcelina: Okay, in that case yes, that makes sense.\nMarcelina: In that case, its hard to say for macros, because there isn't any good guide in the docs (from my experience), and therefore its pieced together by academic papers, books, and blog-posts.\nMarcelina: That, and poking others...\nMarcelina: So.... null?\nMarcelina: lol slack fail. Srry.\nKaren: Still works :p",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 92,
        "duration_minutes": 329.98,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "create",
          "implement",
          "must",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Karen",
          "Kristeen",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:18:02.395100",
          "text": "Hey <@Elin> just an FYI, your hygenic reader macro package doesn't work if:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T15:18:44.396200",
          "text": "“not”?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:19:08.396700",
          "text": "Ya, basically if you bind something with a standard macro."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:19:37.397200",
          "text": "and then 2. try to reference that thing from a macro generated by a reader macro."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:20:08.397800",
          "text": "Like, as an example. Imagine I've made a (admittedly silly) macro `(define-foo)`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:21:28.399300",
          "text": "the semantics of `(define-foo)` is to expand to `(define foo 42)`, where `foo` is added to the user's scope."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:22:24.400100",
          "text": "Next, you create a reader macro, say `#my-super-awesome-macro`, which reads to `(#%awesome)`."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:22:52.400700",
          "text": "The `(#%awesome)` macro expands to `foo`, where `foo` is whatever `foo` is bound in the user's scope."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:23:00.401000",
          "text": "If I then write the following program:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:23:31.402200",
          "text": "```\n#lang my-reader-macro racket\n(define-foo)\n#my-super-awesome-macro\n```\n\nYou'll get a `foo` unbound error."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T15:23:40.402600",
          "text": "So `#%awesome` is an unhygienic macro, but the reference to it should be generated hygienically?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:23:48.402800",
          "text": "(But if you just do:\n```\n(define-foo)\nfoo\n```\nit obviously works fine.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:24:00.403000",
          "text": "Yes, ,that is correct."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:24:32.403700",
          "text": "I want `#my-super-awesome-macro` to always be read as this specific `(#%awesome)` form."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T15:27:10.404500",
          "text": "I assume that if you write\n```\n(define-foo)\n(#%awesome)\n```\nThat works?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:29:00.404700",
          "text": "Yes it does."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:29:19.405200",
          "text": "Because in that case `(#%awesome)` has the outer scope, not the inner one."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T15:29:57.406000",
          "text": "Unfortunately this might be a fundamental issue, as I can't find any way to work around it without just dropping hygenic reader macros. :disappointed:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T15:32:47.406300",
          "text": "I think you should always get the same zo files, for example"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T15:33:56.407100",
          "text": "How is `#%awesome` defined? Does it use `datum-&gt;syntax`, or does it use `syntax-local-introduce` or something?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T15:41:46.407400",
          "text": "It's likely much more of a communication and documentation hurdle than a technical one."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T16:25:56.409600",
          "text": "<@Marcelina> I got some version of this to work in the most useless way. By fiddling with the definitions of `define-foo` and `#%awesome`, I was able to get this program to work:\n```\n(define-foo)\n#my-super-awesome-macro\n;=&gt; 42\n```\nHowever, putting anything around the use of the reader macro causes it to fail:\n```\n(define-foo)\n(add1 #my-super-awesome-macro)\n;=error&gt; foo: unbound identifier in: foo\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T16:35:00.410800",
          "text": "<@Elin> `#%awesome` uses datum-&gt;syntax."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T16:36:18.411400",
          "text": "Anyway, `#%awesome` was defined with something like this:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T16:37:03.411900",
          "text": "```\n  (define-elaborate this\n    (define/syntax-parse foo (datum-&gt;syntax this-syntax 'foo))\n    #'foo))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T16:37:47.412500",
          "text": "Where `define-elaborate` expands to a `define-syntax`. (A la the example <@Gonzalo> was helping with yesterday.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T16:38:03.412800",
          "text": "err...`define-syntax` and `syntax-parse`."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T16:38:18.413100",
          "text": "Is that the elaborator for the editors?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T16:41:18.414700",
          "text": "Anyway, If I change the definition of `define-foo` to use `syntax-local-identifier-as-binding` and `syntax-local-introduce` and the definition of `#%awesome` to use `syntax-local-introduce`, then I get it to work if `#my-super-awesome-macro` is exactly at the top level, but not within a definition or function call."
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T16:46:52.415600",
          "text": "Actually, this program fails the same way:\n```\n(define-simple-macro (define-it)\n  #:with x (syntax-local-identifier-as-binding (syntax-local-introduce #'it))\n  (define x 42))\n(define-syntax-parser refer-to-it\n  [(_) (syntax-local-introduce #'it)])\n```\nin another file:\n```\n(define-it)\n(add1 (refer-to-it))\n;=error&gt; it: unbound identifier in: it\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-27T16:47:23.416000",
          "text": "But\n```\n(define-it)\n(refer-to-it)\n;=&gt; 42\n```\nworks fine."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:01:03.416300",
          "text": "<@Elin> ya, that's the elaborator for the editors."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:03:24.417200",
          "text": "Okay. Although that seems like an odd way to bind a new variable."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:04:00.417900",
          "text": "(I know <@Danny> complains all the time about people needing to use `syntax-local-introduce` for that purpose.)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:06:13.419000",
          "text": "<@Marcelina> for which purpose exactly? (curious)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:07:36.420300",
          "text": "Oh, IIRC, its just that (ideally) `syntax-local-introduce` should just be an internal implementation detail rather than part of the public API. I forget why though. Anyway, I'm sure Michael would know more about what Michael thinks. :wink:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:08:28.420700",
          "text": "huh :thinking_face:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:09:51.421900",
          "text": "Umm... I *think* its related to the fact that it exposes that inside of a macro is more of a negative space, while outside is a positive space. Which causes <@Gonzalo> to make her...uhh....macro-like-apply?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:10:16.422500",
          "text": "Anyway, sorry, I'm probably not being very coherent right now. I also don't really understand the argument entirely myself."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:10:51.422900",
          "text": "sounds like someone somewhere ought to write a blog post"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:12:07.423800",
          "text": "`syntax-local-introduce` is just `get-the-current-scope` + `apply-a-scope` so it seems like removing it would really mean \"don't expose scopes to macro programmers\""
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:13:55.425600",
          "text": "I was thinking it meant that there shouldn’t be an introduction scope that’s added to macros by default, and instead evaluating `#'(foo ...)` should create a scope and add it to things. If anyone remembers that racket-users thread started by lexi that talked about alternate approaches to hygiene, that’s what I’m thinking of."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:14:44.426000",
          "text": "<@Karen> that's an idea proposed previously by Andre van Tonder"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:14:53.426300",
          "text": "yes! that’s the one"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:15:42.426600",
          "text": "I think you want SRFI 72"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:15:57.426800",
          "text": "I think I don’t know what I want"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:16:13.427100",
          "text": "I mean, SRFI 72 is his spec document"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:17:09.428400",
          "text": "I think I want to know what I think I want...I think?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:17:47.429300",
          "text": "What I mean is although that’s definitely the right spec for that alternative, I don’t know how I feel about that specific alternative."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:18:03.429700",
          "text": "But ya, I think <@Kristeen> is right, that its having scope sets as part of the public API...probably."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:18:50.430100",
          "text": "Scope sets don’t feel like they are part of the public API now"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:19:06.430500",
          "text": "they’re sort of indirectly referred to via introducer functions"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:19:19.430900",
          "text": "but there’s no `scope?` predicate or `scope-set?` predicate"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:21:44.431400",
          "text": "the relevant thread is `syntax/parse is not hygenic` from March 2018"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:24:17.432000",
          "text": "<@Karen> I think the docs for `make-syntax-introducer` make it clear that scopes are part of the API"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:24:25.432400",
          "text": "it has a bad name for historical reasons"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:24:52.433000",
          "text": "and it's encapsulated by a procedure rather than a struct with a procedure that takes it as an argument"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:26:10.433900",
          "text": "<@Kristeen> I don’t think encapsulating scopes in procedures is the same as making scopes part of the API. The functionality is the same, but it feels totally different to users."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:27:16.435300",
          "text": "<@Karen> Is that true? Most of the users I've talked to (or been in the past) either have no idea what syntax-local-introduce does, or understands that its basically a toggle switch for a macro scope."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:27:18.435400",
          "text": "If there was a `scope?` function that answered `#true` to the results of `make-syntax-introducer` would you feel differently?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:28:01.436000",
          "text": "<@Marcelina> In fairness, I guess I can’t say if it feels totally different to users. But it does feel totally different to _me_."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:29:07.437500",
          "text": "fair."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:29:16.438000",
          "text": "<@Kristeen> Yes, provided there were also a few scope-related functions whose names started with `scope-`. Like `(scope-add scope? syntax?)`, and similar for `scope-remove` / `scope-flip`."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:29:20.438200",
          "text": "Anyway, there's also the `syntax-binding-set` and family."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:29:44.438800",
          "text": "(admittedly Mathew made that public because of some really terrible macros I needed to write.)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:30:39.439500",
          "text": "this package is closer in spirit to what I think of as a “public scopes API”: <https://docs.racket-lang.org/scope-operations/index.html>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:31:18.440100",
          "text": "Right but that library is a very simple wrapper over the current API"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:32:03.441500",
          "text": "Yup. But it feels totally different and is much more intuitive to me."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:32:20.442100",
          "text": "And even more, the concepts and operations in that library are 1-1 with the racket API"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:32:46.442900",
          "text": "So I can totally agree that such an API would be nicer"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T17:33:10.443500",
          "text": "But I think they expose the same things"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:34:16.444700",
          "text": "Just with nicer names. :wink:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:34:23.445000",
          "text": "(for some definition of 'nicer' anyway.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:36:09.447200",
          "text": "Anyway, from my (very limited) experience,  the more complex the macros you make, the more scope sets pop out of the API. But at least _most_ of the time I don't have to think about it (too much)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:36:13.447400",
          "text": "probably."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:36:43.447900",
          "text": "<@Kristeen> Think about it this way: what if everywhere racket currently uses numbers, it instead described “successor introducers” which were functions that you had to call with special arguments in order to do math? Like `(num1 'add num2)`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:36:55.448200",
          "text": "The functionality is the same. But it’s a vastly different experience."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:43:23.449100",
          "text": "<@Karen> Wait, aren't there some FP languages that do exactly that? And the 'successor introducers' do feel like just numbers."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:43:32.449700",
          "text": "Like,where 3 is a function."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:44:13.451200",
          "text": "And + takes a function that takes two functions and results in another function that is the sum?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:44:26.451600",
          "text": "<@Marcelina> There are languages that do that for a semi-internal representation of things but they usually have reader-level syntax to support it and go to efforts to simplify / hide this representation in things like error messages. Because it confuses the hell out of people."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:46:40.453300",
          "text": "If you want to write a number like three, you just write the number `3`. If you want to add things, you just write `3 + 5`. This might be achieved through a representation of numbers as closures and defining `+` as a closure-accepting-and-returning operator. But you aren’t forced to actually think about that."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T17:47:16.453700",
          "text": "And docs don’t describe numbers as “successor introducers”, they just call them numbers."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T18:29:28.456100",
          "text": "<@Karen> Okay, then I must be missing something here. Because I don't see how your description of `(num1 'add num2)` is substantively different from `num1 + num2`. But that's okay. Brain no longer feels like jelly thank god, so I can get back to work. :slightly_smiling_face:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T18:46:03.458000",
          "text": "<@Marcelina> There’s no functionality difference. There’s only communication and experience differences. For example, when I put the text cursor over `+` in DrRacket and press F1, I get taken to documentation for `+`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T18:46:43.458500",
          "text": "People underestimate how much those kinds of differences affect what code people write"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T20:40:43.459500",
          "text": "Okay, in that case yes, that makes sense."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T20:42:27.461500",
          "text": "In that case, its hard to say for macros, because there isn't any good guide in the docs (from my experience), and therefore its pieced together by academic papers, books, and blog-posts."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T20:42:44.461900",
          "text": "That, and poking others..."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T20:43:38.462300",
          "text": "So.... null?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T20:44:07.462900",
          "text": "lol slack fail. Srry."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-27T20:48:01.463100",
          "text": "Still works :p"
        }
      ]
    },
    {
      "conversation_id": "388",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: which things?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T15:32:30.406100",
          "text": "which things?"
        }
      ]
    },
    {
      "conversation_id": "389",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I don't really know if there's any specific problems. I just don't feel like I understand the big picture of how all the different flags, config files, parameters, and environment variables can affect compilation. I also don't know how I'd test and verify aspects of the compiler.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-27T15:40:49.407200",
          "text": "I don't really know if there's any specific problems. I just don't feel like I understand the big picture of how all the different flags, config files, parameters, and environment variables can affect compilation. I also don't know how I'd test and verify aspects of the compiler."
        }
      ]
    },
    {
      "conversation_id": "390",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Sorry. my brain feels like it went through a juicer, so I had to step away from my computer for a bit. reading now.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T16:34:16.410300",
          "text": "Sorry. my brain feels like it went through a juicer, so I had to step away from my computer for a bit. reading now."
        }
      ]
    },
    {
      "conversation_id": "391",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: ?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T17:43:26.449300",
          "text": "?"
        }
      ]
    },
    {
      "conversation_id": "392",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: Clarinda I guess because I thought that didn't work. I'm not sure exactly what I was doing when I formed that belief (much less a way to reproduce it), because I've been doing it this way for a while, but there are points in my workflow when I run into linkage errors, and I thought compiling only [CODE] wasn't enough to solve them if [CODE] had changed.\nMadelaine: One possibility is that I'm conflating in my memory pressing [CODE] in DrRacket, which I do frequently (I think I have [CODE] + [CODE] + [CODE] in muscle memory), with explicitly running [CODE]. I vaguely remember there being some issues where the two interacting caused friction.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 3.52,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-03-27T18:03:34.453800",
          "text": "<@Clarinda> I guess because I thought that didn't work. I'm not sure exactly what I was doing when I formed that belief (much less a way to reproduce it), because I've been doing it this way for a while, but there are points in my workflow when I run into linkage errors, and I thought compiling only `example/foo` wasn't enough to solve them if `example/common` had changed."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-27T18:07:05.454000",
          "text": "One possibility is that I'm conflating in my memory pressing `Run` in DrRacket, which I do frequently (I think I have `⌘i` + `⌘s` + `⌘r` in muscle memory), with explicitly running `raco setup`. I vaguely remember there being some issues where the two interacting caused friction."
        }
      ]
    },
    {
      "conversation_id": "393",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: OH! You are literally just talking about documentation, not about API design itself.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-03-27T20:40:32.459200",
          "text": "OH! You are literally just talking about documentation, not about API design itself."
        }
      ]
    },
    {
      "conversation_id": "394",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: Totally uninformed random question. Is there anything Jekyll-like in Racket? I know I could hack Scribble but I’m looking for something a bit closer to what Jekyll does in Ruby. My guess is that it could be done much more naturally in Racket via macros.\nKristeen: Deneen I think you want [CODE]\nDeneen: yeah, was just looking at [CODE] too :slightly_smiling_face: <[URL]\nDeneen: Thanks for the [CODE] pointer. I’ll check them out.\nDeneen: Yeah, this looks really nice. I’ll try moving my site over from Jekyll soon!\nJulia: Last few days, I've been exploring redoing my own blog, using a [CODE] driving a few command-line tools, which are mostly a few pieces copied/modified from Frog.\nJulia: I might put those pieces in a lib called \"tadpole\". :slightly_smiling_face:\nJulia: Or I might just make one or two missing Racket packages (e.g. to make Atom and RSS feeds).\nKristeen: also jekyll is no longer the hotness in static blog generation\nJulia: and just share the other glue code in a repo, not a package.\nKristeen: everything should be a package!\nJulia: I don't plan to abandon Frog. I'm just kind of at the point where, if anyone wants it to do more features or be more configurable, I don't think I can really do that.\nDeneen: Kristeen what is the hottest now?\nJulia: I kind of feel like there's some Greenspun's Tenth Rule about static blog generators being implementations of make.\nKristeen: I hear about hugo\nDeneen: github pages supports jekyll out of the box. But it doesn’t work with the [CODE] tool I use, so I hand-compile and then upload to generate my site.\nDeneen: I tried using [CODE] a while back. It was nice. Then the API changed from Arrows to Monads and broke 50% of the entire codebase I wrote up laboriously while learning Haskell along the way.\nDeneen: I’d like to start using Racket-based tools as a matter of principle, though.. :slightly_smiling_face:\nMichelina: Deneen sounds like Pollen might be useful (<[URL]\nDeneen: You’re right, it does sound good, and I’ve used it once. My intuition tells me that [CODE] is going to take slightly less work to make it do what I want, but I think [CODE] is built on top of Pollen.\nMai: You are right that Frog is going to take less work to make it do basic stuff. Pollen’s main goal is not static blog generation, so it doesn’t have, for example, basic page layout supports.\nDeneen: Mai in general I do want pretty low-level control over how HTML and such gets laid out.\nDeneen: I’m all for building beautiful things, but often when I’m hacking on websites I just need to do something kind of dirty because the time investment often isn’t worth justifying (why I use Jekyll, tbh). That being said, I’d be willing to put in some time to learning a tool if it were in Racket (more than I would in Ruby)\nLavette: Deneen Kristeen I use Hugo for my website, it's very powerful but with a bit of a learning curve. I have now gotten to the point where I have my templates the way I want, and I can produce the Hugo markup for my website from a big org-mode file, so I barely even see it. Netlify automatically then builds and hosts the website itself. Works nicely :slightly_smiling_face:\nLavette: Deneen you get a lot of low-level control with Hugo, if that's what you want. I think there might even be a semi-automated Jekyll-to-Hugo converter out there.\nLavette: Hugo is in Go though, so you need to learn and get used to the go templating engine, which is kind of weird, but you get used to it.\nDeneen: Yeah, I use Jekyll very productively now and know how to hack on it well, but I’d be interested in using something Racket-based for catharsis..",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 27,
        "duration_minutes": 276.66,
        "contains_question": true,
        "action_keywords": [
          "build",
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Julia",
          "Kristeen",
          "Lavette",
          "Mai",
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:18:24.464200",
          "text": "Totally uninformed random question. Is there anything Jekyll-like in Racket? I know I could hack Scribble but I’m looking for something a bit closer to what Jekyll does in Ruby. My guess is that it could be done much more naturally in Racket via macros."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T22:19:26.464600",
          "text": "<@Deneen> I think you want `frog`"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:19:37.464900",
          "text": "yeah, was just looking at `toad` too :slightly_smiling_face: <https://parametri.city/blog/2015-06-01-toad-design.html>"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:19:46.465200",
          "text": "Thanks for the `frog` pointer. I’ll check them out."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:22:16.466300",
          "text": "Yeah, this looks really nice. I’ll try moving my site over from Jekyll soon!"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-27T22:26:34.468300",
          "text": "Last few days, I've been exploring redoing my own blog, using a `Makefile` driving a few command-line tools, which are mostly a few pieces copied/modified from Frog."
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-27T22:27:43.468800",
          "text": "I might put those pieces in a lib called \"tadpole\". :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-27T22:28:31.469700",
          "text": "Or I might just make one or two missing Racket packages (e.g. to make Atom and RSS feeds)."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T22:28:42.470200",
          "text": "also jekyll is no longer the hotness in static blog generation"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-27T22:28:43.470300",
          "text": "and just share the other glue code in a repo, not a package."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T22:28:58.470600",
          "text": "everything should be a package!"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-27T22:29:27.471300",
          "text": "I don't plan to abandon Frog. I'm just kind of at the point where, if anyone wants it to do more features or be more configurable, I don't think I can really do that."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:29:56.472000",
          "text": "<@Kristeen> what is the hottest now?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-27T22:30:03.472400",
          "text": "I kind of feel like there's some Greenspun's Tenth Rule about static blog generators being implementations of make."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-27T22:30:14.472800",
          "text": "I hear about hugo"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:30:16.472900",
          "text": "github pages supports jekyll out of the box. But it doesn’t work with the `bibtex2html` tool I use, so I hand-compile and then upload to generate my site."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:30:48.473600",
          "text": "I tried using `hakyll` a while back. It was nice. Then the API changed from Arrows to Monads and broke 50% of the entire codebase I wrote up laboriously while learning Haskell along the way."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-27T22:34:38.474100",
          "text": "I’d like to start using Racket-based tools as a matter of principle, though.. :slightly_smiling_face:"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-03-28T01:13:26.000900",
          "text": "<@Deneen> sounds like Pollen might be useful (<https://pollenpub.com>)"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-28T01:33:02.005600",
          "text": "You’re right, it does sound good, and I’ve used it once. My intuition tells me that `frog` is going to take slightly less work to make it do what I want, but I think `frog` is built on top of Pollen."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-28T01:40:20.009500",
          "text": "You are right that Frog is going to take less work to make it do basic stuff. Pollen’s main goal is not static blog generation, so it doesn’t have, for example, basic page layout supports."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-28T02:16:06.014100",
          "text": "<@Mai> in general I do want pretty low-level control over how HTML and such gets laid out."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-28T02:16:53.015100",
          "text": "I’m all for building beautiful things, but often when I’m hacking on websites I just need to do something kind of dirty because the time investment often isn’t worth justifying (why I use Jekyll, tbh). That being said, I’d be willing to put in some time to learning a tool if it were in Racket (more than I would in Ruby)"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-03-28T02:48:39.016600",
          "text": "<@Deneen> <@Kristeen> I use Hugo for my website, it's very powerful but with a bit of a learning curve. I have now gotten to the point where I have my templates the way I want, and I can produce the Hugo markup for my website from a big org-mode file, so I barely even see it. Netlify automatically then builds and hosts the website itself. Works nicely :slightly_smiling_face:"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-03-28T02:49:50.017700",
          "text": "<@Deneen> you get a lot of low-level control with Hugo, if that's what you want. I think there might even be a semi-automated Jekyll-to-Hugo converter out there."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-03-28T02:50:59.018500",
          "text": "Hugo is in Go though, so you need to learn and get used to the go templating engine, which is kind of weird, but you get used to it."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-28T02:55:04.019300",
          "text": "Yeah, I use Jekyll very productively now and know how to hack on it well, but I’d be interested in using something Racket-based for catharsis.."
        }
      ]
    },
    {
      "conversation_id": "395",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Pollen and Frog are different enough that I wouldn’t say one is built on top of the other, but if I must, I would say that Pollen is built on top of Frog. In fact, Pollen’s Markdown mode simply uses Frog’s Markdown parser. Pollen’s syntax highlighting is also borrowed from Frog.\nMai: IMO, deciding whether Frog or Pollen is the right choice depends on how much you want to have control over document manipulation. Frog won’t let you manipulate content much (in a nice way), whereas in Pollen, the intermediate document data structure is xexpr of which you have a complete control.\nMichelina: Julia at Racketfest lots of people talked about racket-mode for Emacs -- kudos for working on it!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 12.72,
        "contains_question": false,
        "action_keywords": [
          "complete",
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai",
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-28T01:38:24.008300",
          "text": "Pollen and Frog are different enough that I wouldn’t say one is built on top of the other, but if I must, I would say that Pollen is built on top of Frog. In fact, Pollen’s Markdown mode simply uses Frog’s Markdown parser. Pollen’s syntax highlighting is also borrowed from Frog."
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-28T01:44:33.012500",
          "text": "IMO, deciding whether Frog or Pollen is the right choice depends on how much you want to have control over document manipulation. Frog won’t let you manipulate content much (in a nice way), whereas in Pollen, the intermediate document data structure is xexpr of which you have a complete control."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-03-28T01:51:07.013500",
          "text": "<@Julia> at Racketfest lots of people talked about racket-mode for Emacs -- kudos for working on it!"
        }
      ]
    },
    {
      "conversation_id": "396",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: if you're looking for some low-level control, I think you'll find Pollen more to your liking. The tradeoff is that you need to do considerable more work; there's only rudimentary support (if that!) for stuff you take for granted in Jekyll\nMichelina: I use Pollen to generate my own sites, but I'm fussy like that. I've been bitten a number of times by having to do many tasks myself, having to do stuff that probably comes out-of-the-box with other tools\nMichelina: That's not a criticism of Pollen; I see it as something that comes with the territory.\nMichelina: I also use Pollen for my books (but there, I'm generating ConTeXt rather than HTML).\nDeneen: Yeah, I used Pollen for a book-like thing once and it seems really nice for that!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 6.73,
        "contains_question": false,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-03-28T03:44:29.021300",
          "text": "if you're looking for some low-level control, I think you'll find Pollen more to your liking. The tradeoff is that you need to do considerable more work; there's only rudimentary support (if that!) for stuff you take for granted in Jekyll"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-03-28T03:46:26.023000",
          "text": "I use Pollen to generate my own sites, but I'm fussy like that. I've been bitten a number of times by having to do many tasks myself, having to do stuff that probably comes out-of-the-box with other tools"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-03-28T03:47:00.023600",
          "text": "That's not a criticism of Pollen; I see it as something that comes with the territory."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-03-28T03:47:34.024200",
          "text": "I also use Pollen for my books (but there, I'm generating ConTeXt rather than HTML)."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-28T03:51:13.024600",
          "text": "Yeah, I used Pollen for a book-like thing once and it seems really nice  for that!"
        }
      ]
    },
    {
      "conversation_id": "397",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Oh, I think I see! You mean I should create syntax-classes for the next phase. I'll try that, yeah, I didn't think about it.\nKami: That would make things easier to understand",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.35,
        "contains_question": false,
        "action_keywords": [
          "create",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-03-28T05:02:53.025500",
          "text": "Oh, I think I see! You mean I should create syntax-classes for the next phase. I'll try that, yeah, I didn't think about it."
        },
        {
          "user": "Kami",
          "timestamp": "2019-03-28T05:03:14.025700",
          "text": "That would make things easier to understand"
        }
      ]
    },
    {
      "conversation_id": "398",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Ima: Julia I'll delurk to second what Jesse said - racket-mode is my primary method of working with racket.\nPriscila: The Reddit user experiencing scrolling problems in DrRacket has provided more information. Does scrolling become slower in larger windows? <[URL]\nShavon: I am quite surprised, user [CODE] on the thread (<[URL] says that it's pretty bad for him as well. I expected DrRacket on MacOS to be flawless - I had this idea that a lot of the core people were using it.\nPriscila: Compared to, say, SublimeText the UI is slow - but I am puzzled too.\nShavon: Unfortunately can't comment here, since I know next to nothing about OSX and don't own a Mac.\nKaren: I use drracket on macOS regularly and can confirm that scrolling speed is consistently the most frustrating problem\nElin: And it’s okay on small files but much worse on large files\nJulia: A few years ago I found the background expansion slow enough that, turning it off made a big difference. That was on a slower laptop on macOS. Scrolling hasn't bothered me but I use Emacs for heavy edits and DrRacket for its special features. (Emacs is also not immune from probs with large files, esp if there aren't many line-endings to \"break it up\".)\nPriscila: Alex is right - something happens for very large files. I have a tendency to put everything in the same file at first - then split things later. And at some point DrRacket becomes noticeably slower.\nPriscila: That does indeed sound drastic. I attempted to find out whether anyone is working on a Metal backend for Cairo, but I couldn't find anything.\nPriscila: Anecdote: The Unity Editor also suffered a slow-down when Mojave came out. This user blames the new font-rendering in macOS. <[URL]\nMai: The slowdown problem for large files has been around for years though (that is, before Mojave came out). I remember quitting using DrRacket when I took an introductory programming class in 2014 due to how laggy DrRacket was.",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 12,
        "duration_minutes": 576.37,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Ima",
          "Julia",
          "Karen",
          "Mai",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Ima",
          "timestamp": "2019-03-28T06:42:10.026400",
          "text": "<@Julia> I'll delurk to second what Jesse said - racket-mode is my primary method of working with racket."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-28T13:11:42.027500",
          "text": "The Reddit user experiencing scrolling problems in DrRacket has provided more information. Does scrolling become slower in larger windows?\n<https://www.reddit.com/r/Racket/comments/b5o34z/any_way_to_improve_performance_of_drracket/>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-28T13:16:05.029000",
          "text": "I am quite surprised, user `lispm` on the thread (<https://www.reddit.com/r/Racket/comments/b5o34z/any_way_to_improve_performance_of_drracket/ejiv0n4?utm_source=share&amp;utm_medium=web2x>) says that it's pretty bad for him as well. I expected DrRacket on MacOS to be flawless - I had this idea that a lot of the core people were using it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-28T13:17:18.029800",
          "text": "Compared to, say, SublimeText the UI is slow - but I am puzzled too."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-28T13:18:26.030700",
          "text": "Unfortunately can't comment here, since I know next to nothing about OSX and don't own a Mac."
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-28T13:26:37.032100",
          "text": "I use drracket on macOS regularly and can confirm that scrolling speed is consistently the most frustrating problem"
        },
        {
          "user": "Elin",
          "timestamp": "2019-03-28T13:36:05.033700",
          "text": "And it’s okay on small files but much worse on large files"
        },
        {
          "user": "Julia",
          "timestamp": "2019-03-28T13:37:25.035400",
          "text": "A few years ago I found the background expansion slow enough that, turning it off made a big difference.\nThat was on a slower laptop on macOS.\nScrolling hasn't bothered me but I use Emacs for heavy edits and DrRacket for its special features.\n(Emacs is also not immune from probs with large files, esp if there aren't many line-endings to \"break it up\".)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-28T13:43:16.036900",
          "text": "Alex is right - something happens for very large files.\nI have a tendency to put everything in the same file at first - then split things later.\nAnd at some point DrRacket becomes noticeably slower."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-28T14:45:03.042800",
          "text": "That does indeed sound drastic. I attempted to find out whether anyone is working on a Metal backend for Cairo, but I couldn't find anything."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-28T16:13:53.047000",
          "text": "Anecdote: The Unity Editor also suffered a slow-down when Mojave came out. This user blames the new font-rendering in macOS. <https://forum.unity.com/threads/unity-editor-performance-under-mojave-10-14-is-less-than-half-of-10-13-x-versions-of-macos.552736/#post-3732451>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-03-28T16:18:32.048600",
          "text": "The slowdown problem for large files has been around for years though (that is, before Mojave came out). I remember quitting using DrRacket when I took an introductory programming class in 2014 due to how laggy DrRacket was."
        }
      ]
    },
    {
      "conversation_id": "399",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: FWIW I used [CODE] not [CODE] for the Racket blog <[URL]\nLillian: On the idea that [CODE] by design makes the most common blog requirements easy; [CODE] by design does not care about blogs\nClarinda: I’m generally stuck on how to improve refresh performance on Mac OS. Some of it is that Mac OS changes have made things worse; Slideshow animations don’t work nearly well after I upgraded to 10.14, for example. My only idea currently is to try out Skia as a replacement for Cairo+Pango, but it’s not clear that it would help.\nLeticia: Clarinda it occurs to me that this seems like precisely the kind of modularity that units are meant to allow for.\nClarinda: I doubt that units will help. Units are good for scaling up function-style abstraction. Redex wants a lot of not-first-class info (so macros instead of functions).\nMarcelina: Clarinda fwiw, I'd be down for a replacement of cairo+pango.\nClarinda: I don’t think [CODE] should add a scope for the reader implementation. Are you sure the implementation isn’t adding one itself?\nClarinda: The way to remove scopes is via [CODE], but it does sound like [CODE] was the wrong tool to start with in this case. I’m not clear on what scopes you mean to add (on which subforms) and which ones are unwanted.\nGonzalo: Clarinda Is this behavior a bug? This program: [CODE_BLOCK] prints: [CODE_BLOCK] I don’t have any idea if this is a bug, intentional, or unspecified behavior, but it is a little confusing.\nGonzalo: It also seems like it’s different from Racket 6.12, since on Racket 6.12 the paths are [CODE] (both are interned).\nClarinda: Gonzalo It’s intentionally inconvenient. A compile-time module path does not necessarily have anything to do with the run-time module path. The new expander uses an uninterned symbol that prints in a useful-for-debugging way but is meant to be consistently different from the run-time name.\nGonzalo: Got it, that makes sense. It came up when I was writing tests for <[URL] and I wanted to make sure the right module was blamed, so I am looking at the value inside the [CODE] field of a blame object. I ended up doing this: <[URL] Is there a better way/is there something I should do instead?\nClarinda: I can think of anything better.\nGonzalo: I guess maybe the right thing to do in that case is to extract the actual module path from the module at the appropriate phase, but it’d be a little more effort. Maybe I’ll make that change.\nGonzalo: Clarinda Thinking about it some more, is there any particular reason module names at compile-time ignore [CODE]? I realize that parameter is designed to affect, well, when a module is _declared_, but it does seem unnecessarily confusing that the expansion-time module name is sometimes very different… so maybe there could be something _like_ that parameter that affects expansion-time? I guess the current approach makes things like phase 1 uses of [CODE] conveniently work out, in that they will produce symbols instead of paths, which means bytecode that contains quoted versions of those paths will be machine-independent, but that seems more accidental than intentional.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 15,
        "duration_minutes": 1518.53,
        "contains_question": true,
        "action_keywords": [
          "action",
          "implement",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo",
          "Leticia",
          "Lillian",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-03-28T14:10:27.037000",
          "text": "FWIW I used `frog` not `pollen` for the Racket blog <http://blog.racket-lang.org|blog.racket-lang.org>"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-03-28T14:11:47.037600",
          "text": "On the idea that `frog` by design makes the most common blog requirements easy; `pollen` by design does not care about blogs"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-28T14:16:03.040700",
          "text": "I’m generally stuck on how to improve refresh performance on Mac OS. Some of it is that Mac OS changes have made things worse; Slideshow animations don’t work nearly well after I upgraded to 10.14, for example. My only idea currently is to try out Skia as a replacement for Cairo+Pango, but it’s not clear that it would help."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-03-28T15:08:14.042900",
          "text": "<@Clarinda> it occurs to me that this seems like precisely the kind of modularity that units are meant to allow for."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-28T15:32:09.046000",
          "text": "I doubt that units will help. Units are good for scaling up function-style abstraction. Redex wants a lot of not-first-class info (so macros instead of functions)."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T18:39:07.049100",
          "text": "<@Clarinda> fwiw, I'd be down for a replacement of cairo+pango."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-28T20:00:03.052700",
          "text": "I don’t think `#reader` should add a scope for the reader implementation. Are you sure the implementation isn’t adding one itself?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-29T09:48:21.054200",
          "text": "The way to remove scopes is via `make-syntax-delta-introducer`, but it does sound like `quasisyntax` was the wrong tool to start with in this case. I’m not clear on what scopes you mean to add (on which subforms) and which ones are unwanted."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T13:32:25.058000",
          "text": "<@Clarinda> Is this behavior a bug? This program:\n```\n#lang racket\n(parameterize ([current-namespace (make-base-namespace)])\n  (eval '(module m racket\n           (define phase-0-mod-path\n             (resolved-module-path-name\n              (variable-reference-&gt;resolved-module-path (#%variable-reference))))\n\n           (define-syntax (quote-phase-1-mod-path stx)\n             #`'#,(resolved-module-path-name\n                   (variable-reference-&gt;resolved-module-path (#%variable-reference))))\n\n           (define phase-1-mod-path (quote-phase-1-mod-path))\n\n           (printf \"          mod-path @ 0 = ~v\\n\" phase-0-mod-path)\n           (printf \"          mod-path @ 1 = ~v\\n\\n\" phase-1-mod-path)\n           (printf \"      mod-paths equal? = ~v\\n\\n\" (equal? phase-0-mod-path phase-1-mod-path))\n           (printf \"mod-path interned? @ 0 = ~v\\n\" (symbol-interned? phase-0-mod-path))\n           (printf \"mod-path interned? @ 1 = ~v\\n\" (symbol-interned? phase-1-mod-path))))\n\n  (eval '(require 'm)))\n```\nprints:\n```\n          mod-path @ 0 = 'm\n          mod-path @ 1 = 'm\n\n      mod-paths equal? = #f\n\nmod-path interned? @ 0 = #t\nmod-path interned? @ 1 = #f\n```\nI don’t have any idea if this is a bug, intentional, or unspecified behavior, but it is a little confusing."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T13:33:13.058600",
          "text": "It also seems like it’s different from Racket 6.12, since on Racket 6.12 the paths are `equal?` (both are interned)."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-29T14:10:09.060400",
          "text": "<@Gonzalo> It’s intentionally inconvenient. A compile-time module path does not necessarily have anything to do with the run-time module path. The new expander uses an uninterned symbol that prints in a useful-for-debugging way but is meant to be consistently different from the run-time name."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T14:12:14.061900",
          "text": "Got it, that makes sense. It came up when I was writing tests for <https://github.com/racket/racket/pull/2554>, and I wanted to make sure the right module was blamed, so I am looking at the value inside the `blame-positive` field of a blame object. I ended up doing this: <https://github.com/racket/racket/blob/660107e0a9204e146994080189aeca1bca8aa6bd/pkgs/racket-test/tests/syntax/contract/phase.rkt#L23-L25> Is there a better way/is there something I should do instead?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-03-29T14:37:10.062400",
          "text": "I can think of anything better."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T14:39:39.063500",
          "text": "I guess maybe the right thing to do in that case is to extract the actual module path from the module at the appropriate phase, but it’d be a little more effort. Maybe I’ll make that change."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T15:28:59.068300",
          "text": "<@Clarinda> Thinking about it some more, is there any particular reason module names at compile-time ignore `current-module-declare-name`? I realize that parameter is designed to affect, well, when a module is _declared_, but it does seem unnecessarily confusing that the expansion-time module name is sometimes very different… so maybe there could be something _like_ that parameter that affects expansion-time? I guess the current approach makes things like phase 1 uses of `quote-module-name` conveniently work out, in that they will produce symbols instead of paths, which means bytecode that contains quoted versions of those paths will be machine-independent, but that seems more accidental than intentional."
        }
      ]
    },
    {
      "conversation_id": "400",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: When I’ve tried in the past though, units don’t play very well with redex.\nDeneen: Awesome. That is what I needed to hear, Matthew.\nMarcelina: (And given enough time might do it myself....you know in a few years. :stuck_out_tongue: )\nMarcelina: It would solve so many problems. (Like the really slow performance on linux, and the HORRIBLE situation is PangoCairoFontConfigTtfEtcEtc fonts...)\nMarcelina: BTW, is there any way to remove the scope added from reader extensions?\nMarcelina: (Like, the syntax that a reader extension adds seems to have a module scope for both the module its reading, as well as the implementation module.)\nMarcelina: Clarinda Yes, its certainly the implementation, its the syntax object its returning.\nMarcelina: And that syntax object has the scopes of the module its defined in.\nMarcelina: (Unless you are saying that I should bootstrap with [CODE], and then try to manually add scopes?\nMarcelina: (Basically, right now I am using quasisynta to return syntax, because it reads to something that's not otherwise in the core.)\nAshlea: Personally, on MacOS, I merge consecutive wheel events into one (by adjusting wheel-step) in every 200ms, though the overall performance of DrRacket is still much slower than on Linux, it do avoid the unresponsive problems while scrolling large files.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 11,
        "duration_minutes": 1138.37,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Ashlea",
          "Deneen",
          "Leticia",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-03-28T15:08:37.043100",
          "text": "When I’ve tried in the past though, units don’t play very well with redex."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-03-28T15:30:09.044100",
          "text": "Awesome.  That is what I needed to hear, Matthew."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T18:39:30.049700",
          "text": "(And given enough time might do it myself....you know in a few years. :stuck_out_tongue: )"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T18:40:56.050700",
          "text": "It would solve so many problems. (Like the really slow performance on linux, and the HORRIBLE situation is PangoCairoFontConfigTtfEtcEtc fonts...)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T18:42:02.051300",
          "text": "BTW, is there any way to remove the scope added from reader extensions?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T18:42:44.052200",
          "text": "(Like, the syntax that a reader extension adds seems to have a module scope for both the module its reading, as well as the implementation module.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T21:42:22.052900",
          "text": "<@Clarinda> Yes, its certainly the implementation, its the syntax object its returning."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T21:43:08.053100",
          "text": "And that syntax object has the scopes of the module its defined in."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T21:43:39.053300",
          "text": "(Unless you are saying that I should bootstrap with `datum-&gt;syntax`, and then try to manually add scopes?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-28T22:01:41.053500",
          "text": "(Basically, right now I am using quasisynta to return syntax, because it reads to something that's not otherwise in the core.)"
        },
        {
          "user": "Ashlea",
          "timestamp": "2019-03-29T10:06:59.055100",
          "text": "Personally, on MacOS, I merge consecutive wheel events into one (by adjusting wheel-step) in every 200ms, though the overall performance of DrRacket is still much slower than on Linux, it do avoid the unresponsive problems while scrolling large files."
        }
      ]
    },
    {
      "conversation_id": "401",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Kristeen the reduced version from 2569, was this generated using demodularize + full expand?\nKristeen: That's generated from the extraction tool used for bootstrapping the expander (see racket/src/expander/README)\nShavon: Will take a look, thanks.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 1.07,
        "contains_question": true,
        "action_keywords": [
          "action",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-03-29T10:07:06.055300",
          "text": "<@Kristeen> the reduced version from 2569, was this generated using demodularize + full expand?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-03-29T10:07:40.055900",
          "text": "That's generated from the extraction tool used for bootstrapping the expander (see racket/src/expander/README)"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-03-29T10:08:10.056300",
          "text": "Will take a look, thanks."
        }
      ]
    },
    {
      "conversation_id": "402",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Ashlea Is this the code you use for DrRacket to merge consecutive wheel events?\nPriscila: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.03,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-29T15:11:36.064400",
          "text": "<@Ashlea> Is this the code you use for DrRacket to merge consecutive wheel events?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-29T15:11:38.064600",
          "text": "<https://github.com/yjqww6/useless/blob/master/gadgets/tool-wheel.rkt>"
        }
      ]
    },
    {
      "conversation_id": "403",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: What are module names anyway? I don't really understand the subtler points of how they relate to phases, file paths, the top level, and bytecode.\nMarcelina: Oh cool. That actually seemed to work. (replacing [CODE] with [CODE] and using delta introducers. Thanks.\nMarcelina: When I have the following macros: <[URL]\nMarcelina: None\nMarcelina: The syntax object inside of [CODE] has one less scope than the one inside of [CODE].\nMarcelina: [CODE_BLOCK]\nMarcelina: Is there any way to remove the second use site scope?\nGonzalo: You need to call [CODE] before calling [CODE] to see the “outside” view instead of the “inside” view.\nMarcelina: Gonzalo Ya, but iirc that only removes the macro scope.\nGonzalo: Oh, sure. You can’t arbitrarily get rid of use-site scopes.\nMarcelina: But isn't that a problem when you have a macro that expands to another macro (use) that wants to bind a new variable?\nGonzalo: No, because use-site scopes are pruned by the expander when it binds a variable in a definition context.\nMarcelina: err....other way\nMarcelina: err...never mind, the original way.\nGonzalo: You can prune some use-site scopes off of identifiers using [CODE]. But that only works on identifiers, since you’re only supposed to use it if you’re implementing your own definition context-like expansion loop.\nGonzalo: See this section of the sets-of-scopes paper: <[URL]\nGonzalo: Specifically, see that section and the next one.\nMarcelina: OH. So this is a limitation of Danita’s and Sam C.'s trick to extend environments in turnstyle.\nGonzalo: Section 2.4 explains the pruning of use-site scopes.\nGonzalo: I don’t know what you mean, but I don’t think turnstile should be negatively impacted by this, though it may need to call [CODE] in certain places.\nGonzalo: It’s possible it currently doesn’t do that, but should.\nMarcelina: (because we've been local-expanding it in an 'expression' context, which obviously isn't a binding one.\nMarcelina: Nah, that's almost certainly how to get around it.\nGonzalo: If you’re expanding an expression, you should expand it in an expression context, yes… but then use-site scopes shouldn’t affect you, since you’re in an expression context.\nMarcelina: I think that you answered my question (without realizing it) so thanks. :smile:\nGonzalo: Use-site scopes only come into play when you’re expanding in a definition context.\nMarcelina: THe overall macro is in a definition context.\nGonzalo: Then yes, you’d get a use-site scope. But the use-site scope should go everywhere, so it shouldn’t matter if the thing you’re expanding is an expression.\nAshlea: Yes, it is\nAshlea: another attempt is <[URL] didn't feel a significant difference.\nPriscila: <[URL]\nPriscila: Ashlea I just found this in the docs: \"If provided, the wheel-step argument is passed on to the wheel-step method. The default wheel step can be overridden globally though the 'GRacket:wheelStep preference; see Preferences.\"\nPriscila: Have you tried various values for wheelStep?\nPriscila: <[URL]",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 34,
        "duration_minutes": 1357.9,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Ashlea",
          "Gonzalo",
          "Karen",
          "Marcelina",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-29T16:19:52.070500",
          "text": "What are module names anyway? I don't really understand the subtler points of how they relate to phases, file paths, the top level, and bytecode."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:29:06.070700",
          "text": "Oh cool. That actually seemed to work. (replacing `quasisyntax` with `datum-&gt;syntax` and using delta introducers. Thanks."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:29:18.071100",
          "text": "When I have the following macros: <https://gist.github.com/LeifAndersen/8f06b4a15d9eb62e8fe8d5078d1253b4>"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:29:19.071200",
          "text": "None"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:30:31.072100",
          "text": "The syntax object inside of `bar` has one less scope than the one inside of `foo`."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:30:48.072500",
          "text": "```\n#hasheq((context\n         .\n         (#(71034 module)\n          #(71042 module anonymous-module)\n          #(71606 macro)\n          #(71607 use-site))))\n#hasheq((context\n         .\n         (#(71034 module)\n          #(71042 module anonymous-module)\n          #(71607 use-site)\n          #(71608 macro)\n          #(71609 use-site))))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:31:04.073100",
          "text": "Is there any way to remove the second use site scope?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:31:07.073300",
          "text": "You need to call `syntax-local-introduce` before calling `syntax-debug-info` to see the “outside” view instead of the “inside” view."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:31:36.073800",
          "text": "<@Gonzalo> Ya, but iirc that only removes the macro scope."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:31:54.074200",
          "text": "Oh, sure. You can’t arbitrarily get rid of use-site scopes."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:32:32.075400",
          "text": "But isn't that a problem when you have a macro that expands to another macro (use) that wants to bind a new variable?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:32:51.076000",
          "text": "No, because use-site scopes are pruned by the expander when it binds a variable in a definition context."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:32:53.076200",
          "text": "err....other way"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:33:08.076800",
          "text": "err...never mind, the original way."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:33:11.076900",
          "text": "You can prune some use-site scopes off of identifiers using `syntax-local-identifier-as-binding`. But that only works on identifiers, since you’re only supposed to use it if you’re implementing your own definition context-like expansion loop."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:33:39.077400",
          "text": "See this section of the sets-of-scopes paper: <http://www.cs.utah.edu/plt/scope-sets/pattern-macros.html#%28part._use-site%29>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:34:13.078300",
          "text": "Specifically, see that section and the next one."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:34:26.078800",
          "text": "OH. So this is a limitation of <@Danita>’s and Sam C.'s trick to extend environments in turnstyle."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:34:28.078900",
          "text": "Section 2.4 explains the pruning of use-site scopes."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:35:01.080000",
          "text": "I don’t know what you mean, but I don’t think turnstile should be negatively impacted by this, though it may need to call `syntax-local-identifier-as-binding` in certain places."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:35:14.080500",
          "text": "It’s possible it currently doesn’t do that, but should."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:35:20.080700",
          "text": "(because we've been local-expanding it in an 'expression' context, which obviously isn't a binding one."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:35:56.081600",
          "text": "Nah, that's almost certainly how to get around it."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:36:03.082000",
          "text": "If you’re expanding an expression, you should expand it in an expression context, yes… but then use-site scopes shouldn’t affect you, since you’re in an expression context."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:36:09.082400",
          "text": "I think that you answered my question (without realizing it) so thanks. :smile:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:36:15.082700",
          "text": "Use-site scopes only come into play when you’re expanding in a definition context."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-03-29T16:37:17.083800",
          "text": "THe overall macro is in a definition context."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-29T16:44:06.084300",
          "text": "Then yes, you’d get a use-site scope. But the use-site scope should go everywhere, so it shouldn’t matter if the thing you’re expanding is an expression."
        },
        {
          "user": "Ashlea",
          "timestamp": "2019-03-29T21:27:29.086200",
          "text": "Yes, it is"
        },
        {
          "user": "Ashlea",
          "timestamp": "2019-03-29T22:48:24.086400",
          "text": "another attempt is <https://github.com/yjqww6/useless/blob/master/gadgets/tool-wheel2.rkt>, didn't feel a significant difference."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-30T11:40:26.087100",
          "text": "<https://www.researchgate.net/profile/Kostadin_Damevski/publication/331718154_Exploratory_Study_of_Slack_QA_Chats_as_a_Mining_Source_for_Software_Engineering_Tools/links/5c93877745851506d7200253/Exploratory-Study-of-Slack-Q-A-Chats-as-a-Mining-Source-for-Software-Engineering-Tools.pdf>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-30T14:57:24.087200",
          "text": "<@Ashlea> I just found this in the docs:\n\"If provided, the wheel-step argument is passed on to the wheel-step method. The default wheel step can be overridden globally though the 'GRacket:wheelStep preference; see Preferences.\""
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-30T14:57:40.087400",
          "text": "Have you tried various values for wheelStep?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-30T14:57:46.087600",
          "text": "<https://docs.racket-lang.org/gui/editor-canvas_.html?q=text%25>"
        }
      ]
    },
    {
      "conversation_id": "404",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Aubrey: Has anyone made a redex model of wasm yet?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Aubrey"
        ]
      },
      "timeline": [
        {
          "user": "Aubrey",
          "timestamp": "2019-03-29T20:26:41.084700",
          "text": "Has anyone made a redex model of wasm yet?"
        }
      ]
    },
    {
      "conversation_id": "405",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: or a [CODE] for that matter\nKaren: The text format of wasm uses s-expressions so it should be really easy",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.45,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-29T20:49:00.085200",
          "text": "or a `#lang` for that matter"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-29T20:49:27.086100",
          "text": "The text format of wasm uses s-expressions so it should be really easy"
        }
      ]
    },
    {
      "conversation_id": "406",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: I don’t know whether there would be any harm in practice to setting the compile-time name based on[CODE], but I expect that various tools would have to change to make the value consistently what you expect.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-03-30T08:50:43.086800",
          "text": "I don’t know whether there would be any harm in practice to setting the compile-time name based on` current-module-declare-name`, but I expect that various tools would have to change to make the value consistently what you expect."
        }
      ]
    },
    {
      "conversation_id": "407",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Angelika: In beautiful racket's stacker (<[URL] why do we not need to do [CODE]? It's used in the expanded syntax: [CODE].\nGonzalo: Macro hygiene. In the same way that a lambda closes over its free variables, a reference to a variable in a macro definition still references the same variable even when the code is moved somewhere else.\nAngelika: Ah, and is that different than [CODE] because [CODE] is only there via the syntax template [CODE], so its binding isn't captured and needs to be explicitly provided?\nGonzalo: Language _readers_ in Racket are not hygienic, only macros. So when [CODE] produces some syntax, all of the identifiers in it have to be bound, directly or indirectly, by the module language.\nGonzalo: Morally, readers just produce _s-expressions_, though they end up getting wrapped in syntax objects just so that they can have source locations attached. The produced s-expression is then treated the same way as a program you wrote yourself.\nGonzalo: But after the reader finishes, then the macroexpander gets to transform the program, and it enforces hygiene.\nGonzalo: I think this is, in some respects, a flaw in the way Racket’s language stack works. But it basically means you want to do as much in the expander as you can, and as little in the reader.\nAngelika: okay this all makes sense again\nAngelika: it's hard to come back to thinking about this after time away!\nAshlea: It seems the reason of scrolling problems is that the os deliver wheel events much more quick than DrRacket's redrawing. My code just limits the frequency of redrawing for wheel events, and it works well for me.\nPriscila: Huh. Using \\epsilon in DrRacket inserts an epsilon as expected. But if I copy paste it - I get a prompt to normalize the inserted string - and then I get a different epsilon!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 11,
        "duration_minutes": 889.93,
        "contains_question": true,
        "action_keywords": [
          "finish",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Angelika",
          "Ashlea",
          "Gonzalo",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Angelika",
          "timestamp": "2019-03-30T20:08:41.089500",
          "text": "In beautiful racket's stacker (<https://beautifulracket.com/stacker/source-listing.html>), why do we not need to do `(provide stack)`? It's used in the expanded syntax: `(display (first stack))`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-30T20:10:02.090700",
          "text": "Macro hygiene. In the same way that a lambda closes over its free variables, a reference to a variable in a macro definition still references the same variable even when the code is moved somewhere else."
        },
        {
          "user": "Angelika",
          "timestamp": "2019-03-30T20:11:40.092000",
          "text": "Ah, and is that different than `handle` because `handle` is only there via the syntax template `HANDLE-EXPR ...`, so its binding isn't captured and needs to be explicitly provided?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-30T20:14:56.093100",
          "text": "Language _readers_ in Racket are not hygienic, only macros. So when `read-syntax` produces some syntax, all of the identifiers in it have to be bound, directly or indirectly, by the module language."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-30T20:16:14.094400",
          "text": "Morally, readers just produce _s-expressions_, though they end up getting wrapped in syntax objects just so that they can have source locations attached. The produced s-expression is then treated the same way as a program you wrote yourself."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-30T20:17:06.095200",
          "text": "But after the reader finishes, then the macroexpander gets to transform the program, and it enforces hygiene."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-30T20:18:09.096000",
          "text": "I think this is, in some respects, a flaw in the way Racket’s language stack works. But it basically means you want to do as much in the expander as you can, and as little in the reader."
        },
        {
          "user": "Angelika",
          "timestamp": "2019-03-30T20:22:22.096200",
          "text": "okay this all makes sense again"
        },
        {
          "user": "Angelika",
          "timestamp": "2019-03-30T20:23:30.097000",
          "text": "it's hard to come back to thinking about this after time away!"
        },
        {
          "user": "Ashlea",
          "timestamp": "2019-03-31T08:14:23.100400",
          "text": "It seems the reason of scrolling problems is that the os deliver wheel events much more quick than DrRacket's redrawing. My code just limits the frequency of redrawing for wheel events, and it works well for me."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-03-31T10:58:37.104600",
          "text": "Huh. Using \\epsilon in DrRacket inserts an epsilon as expected. But if I copy paste it - I get a prompt to normalize the inserted string - and then I get a different epsilon!"
        }
      ]
    },
    {
      "conversation_id": "408",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: I feel [CODE] is too low-level for most usage. I simply want to specify what fields should be counted, but don’t need the ability to fine-control the hash code. Has someone created a package to simplify this already?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "create",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-03-31T02:56:06.100000",
          "text": "I feel `equal+hash` is too low-level for most usage. I simply want to specify what fields should be counted, but don’t need the ability to fine-control the hash code. Has someone created a package to simplify this already?"
        }
      ]
    },
    {
      "conversation_id": "409",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Ashlea: I didn't change the default value of it, I change it according to how many events are received and restore it immediately after the composed wheel event emitted. For example, If 10 wheel-down events are received, I increased it to 10 times and call the on-char from super class with a single wheel-up event.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ashlea"
        ]
      },
      "timeline": [
        {
          "user": "Ashlea",
          "timestamp": "2019-03-31T08:08:01.100200",
          "text": "I didn't change the default value of it, I change it according to how many events are received and restore it immediately after the composed wheel event emitted. For example, If 10 wheel-down events are received, I increased it to 10 times and call the on-char from super class with a single wheel-up event."
        }
      ]
    },
    {
      "conversation_id": "410",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Why not put it in DrRacket?\nVicki: $\\epsilon$ and $\\varepsilon$, interesting",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 224.57,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Vicki"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-03-31T10:04:35.103500",
          "text": "Why not put it in DrRacket?"
        },
        {
          "user": "Vicki",
          "timestamp": "2019-03-31T13:49:09.105400",
          "text": "$\\epsilon$ and $\\varepsilon$, interesting"
        }
      ]
    },
    {
      "conversation_id": "411",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Ashlea: I think DrRacket would need similar things, but my solutions, which only use public APIs, are really ugly hacks. It would be better to be built into DrRacket deeply, which I am unfamiliar with.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ashlea"
        ]
      },
      "timeline": [
        {
          "user": "Ashlea",
          "timestamp": "2019-03-31T11:36:27.104700",
          "text": "I think DrRacket would need similar things, but my solutions, which only use public APIs, are really ugly hacks. It would be better to be built into DrRacket deeply, which I am unfamiliar with."
        }
      ]
    },
    {
      "conversation_id": "412",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Merna: vincent: ping!\nMerna: Essie ping!\nEssie: Merna: Here!\nEssie: Let's move to PMs.\nMerna: yeah... uh... tell me how that works on slack ...",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 4.53,
        "contains_question": false,
        "action_keywords": [
          "let's"
        ],
        "decision_keywords": [],
        "participants": [
          "Essie",
          "Merna"
        ]
      },
      "timeline": [
        {
          "user": "Merna",
          "timestamp": "2019-03-31T16:16:40.105600",
          "text": "vincent: ping!"
        },
        {
          "user": "Merna",
          "timestamp": "2019-03-31T16:16:49.105900",
          "text": "<@Essie> ping!"
        },
        {
          "user": "Essie",
          "timestamp": "2019-03-31T16:18:47.106100",
          "text": "<@Merna>: Here!"
        },
        {
          "user": "Essie",
          "timestamp": "2019-03-31T16:18:53.106300",
          "text": "Let's move to PMs."
        },
        {
          "user": "Merna",
          "timestamp": "2019-03-31T16:21:12.106700",
          "text": "yeah... uh... tell me how that works on slack ..."
        }
      ]
    },
    {
      "conversation_id": "413",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Will [CODE] return [CODE] on Windows? I don’t have a Windows machine to check.\nEileen: Not on my system\nEileen: DrRacket 7.1\nGonzalo: Thanks. I wonder if there’s a way to get the right newline sequence for the current platform.\nEileen: [CODE_BLOCK]\nGonzalo: I know that normally it doesn’t matter, since reading/writing a file in text mode automatically converts as-needed in Racket. But in my case I’m just looking at some bytes, and I can’t depend on the automatic conversion.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 7.28,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-31T17:52:54.107900",
          "text": "Will `(call-with-output-bytes newline)` return `#\"\\r\\n\"` on Windows? I don’t have a Windows machine to check."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-31T17:57:58.108200",
          "text": "Not on my system"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-31T17:58:06.108400",
          "text": "DrRacket 7.1"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-31T17:59:13.109100",
          "text": "Thanks. I wonder if there’s a way to get the right newline sequence for the current platform."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-03-31T17:59:22.109500",
          "text": "```\n(call-with-output-bytes newline)\n#\"\\n\"\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-03-31T18:00:11.110500",
          "text": "I know that normally it doesn’t matter, since reading/writing a file in text mode automatically converts as-needed in Racket. But in my case I’m just looking at some bytes, and I can’t depend on the automatic conversion."
        }
      ]
    },
    {
      "conversation_id": "414",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: What I usually do is I implement [CODE] by extracting a list of the fields in the struct I care about and calling the [CODE] function on that list. I also toss in a [CODE] so that struct instances have a different hash code than actual lists. Something like this: [CODE_BLOCK]\nKaren: This allocates lists every time [CODE] is called or hash codes are computed, but… oh well. It’s simple, easy to maintain, and gets the job done.\nJulia: Dear lazy slack: Is anyone using CircleCI to test a package against multiple versions of Racket? I'd love to see your [CODE] as an example. i.e. the CircleCI equivalent of my Travis CI example (So far I've figured out it could use Karen’s docker images, and, it will use [CODE] instead of a Travis CI \"matrix\"... I think.)\nJulia: Realizing what I _really_ want is not to write any frakking YAML at all. Instead I want to write a little utility that reads an [CODE], looks at [CODE] to find the oldest supported Racket that needs to be tested. And then writes the [CODE] for me. And if some CI du jour doesn't let you parameterize jobs/builds/whatevers, at least I'm not writing that stuff by hand.\nJulia: If json is a subset of yaml, maybe this even gets close to a few lines of Racket ending in [CODE].\nJulia: Of course, _someone_ needs to figure out the correct tortured YAML required by service X. I tried to for Travis CI. I was hoping someone else could take a turn, this time. :slightly_smiling_face:\nJulia: For CircleCI.\nLavette: As someone who recently started using CircleCI (not for Racket though), I can attest to how nice it would be for the YAML to write itself :slightly_smiling_face:\nKaren: Julia Uh oh, does this mean I'm going to end up being the de facto Racket-on-Circle-CI expert?\nJulia: Tomas I feared but also admired SkyNet. I did not realize it would be the crushing banality of yaml ...\nKaren: _desperately looks for an escape route as the baton inches ever closer to my hesitantly outstretched hand_\nJulia: Seriously, this picket fence will be _so_ fun to whitewash. Think about it, you can make a [CODE]. Everyone will respect and love you.\nKaren: The siren song of Open Source Fame\nJulia: Well, it's probably impossible. No one could figure that out. I understand why you'd be reluctant.\nKaren: Dammit now I'm actually thinking about how a CI [CODE] would work\nJulia: Thank you! You won't regret it!! :slightly_smiling_face:\nJulia: For at least five years.\nKaren: name idea: [CODE]\nKaren: Julia wait, I missed part of your original statement: Travis CI was acquired and might be going away?\nJulia: Not going away soon, but looks like an acquifire <[URL]\nKaren: oh dear\nKaren: they don’t, but they own a lot of other b2b software companies and their business model seems to be “buy existing products that are mostly well established, cease new development, cut costs by only keeping on the people needed for basic maintenance, and monetize the long tail of existing subscriptions”\nKaren: (“they” being Idera, the company that acquired travis)\nKaren: so travis will probably stick around for a long time but it’s unlikely to get new features\nPriscila: They bought Embarcadero Technologies in 2015 ( Delphi).\nKaren: ah yeah… no telling what Idera will decide to do with the free open source offering",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 26,
        "duration_minutes": 1267.13,
        "contains_question": true,
        "action_keywords": [
          "build",
          "decide",
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Karen",
          "Lavette",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-03-31T18:40:14.110600",
          "text": "What I usually do is I implement `hash-proc` by extracting a list of the fields in the struct I care about and calling the `recur` function on that list. I also toss in a `gensym` so that struct instances have a different hash code than actual lists. Something like this:\n\n```\n#:methods gen:equal+hash\n[(define (this-&gt;list this) (list ... important fields only ...))\n (define datatype-gensym (gensym))\n (define (equal-proc this other recur)\n   (recur (this-&gt;list this) (this-&gt;list other)))\n (define (hash-proc this recur)\n   (recur (cons datatype-gensym (this-&gt;list this)))\n ;; the recur argument given to hash2-proc\n ;; returns different codes than the one given\n ;; to hash-proc, so using the same implementation\n ;; for both still gives us a different secondary\n ;; hash code\n (define hash2-proc hash-proc)]\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-03-31T18:41:57.110800",
          "text": "This allocates lists every time `equal?` is called or hash codes are computed, but… oh well. It’s simple, easy to maintain, and gets the job done."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T09:38:51.119100",
          "text": "Dear lazy slack: Is anyone using CircleCI to test a package against multiple versions of Racket?\nI'd love to see your `.circleci/config.yml` as an example.\ni.e. the CircleCI equivalent of my Travis CI example\n(So far I've figured out it could use <@Karen>’s docker images, and, it will use `Workflows` instead of a Travis CI \"matrix\"... I think.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T13:37:42.123900",
          "text": "Realizing what I _really_ want is not to write any frakking YAML at all.\nInstead I want to write a little utility that reads an `info.rkt`, looks at `base #:version` to find the oldest supported Racket that needs to be tested.\nAnd then writes the `.yml` for me.\nAnd if some CI du jour doesn't let you parameterize jobs/builds/whatevers, at least I'm not writing that stuff by hand."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T13:39:03.125100",
          "text": "If json is a subset of yaml, maybe this even gets close to a few lines of Racket ending in `write-jsexpr`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T13:40:13.126000",
          "text": "Of course, _someone_ needs to figure out the correct tortured YAML required by service X.\nI tried to for Travis CI.\nI was hoping someone else could take a turn, this time. :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T13:40:25.126200",
          "text": "For CircleCI."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-01T14:17:09.127500",
          "text": "As someone who recently started using CircleCI (not for Racket though), I can attest to how nice it would be for the YAML to write itself :slightly_smiling_face:"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T14:30:32.129300",
          "text": "<@Julia> Uh oh, does this mean I'm going to end up being the de facto Racket-on-Circle-CI expert?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T14:33:36.131300",
          "text": "<@Tomas> I feared but also admired SkyNet. I did not realize it would be the crushing banality of yaml ..."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T14:34:55.132600",
          "text": "_desperately looks for an escape route as the baton inches ever closer to my hesitantly outstretched hand_"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T14:35:26.133200",
          "text": "Seriously, this picket fence will be _so_ fun to whitewash. Think about it, you can make a `#lang stupid-ci`. Everyone will respect and love you."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T14:38:42.133900",
          "text": "The siren song of Open Source Fame"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T14:39:44.134500",
          "text": "Well, it's probably impossible. No one could figure that out. I understand why you'd be reluctant."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T14:41:17.135300",
          "text": "Dammit now I'm actually thinking about how a CI `#lang` would work"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T14:42:23.135600",
          "text": "Thank you! You won't regret it!! :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T14:42:34.135800",
          "text": "For at least five years."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T14:43:35.136100",
          "text": "name idea: `#lang bikeshed`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:00:19.137400",
          "text": "<@Julia> wait, I missed part of your original statement: Travis CI was acquired and might be going away?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:16:24.137800",
          "text": "Not going away soon, but looks like an acquifire <https://news.ycombinator.com/item?id=19218036>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:28:09.138000",
          "text": "oh dear"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:30:22.140200",
          "text": "they don’t, but they own a lot of other b2b software companies and their business model seems to be “buy existing products that are mostly well established, cease new development, cut costs by only keeping on the people needed for basic maintenance, and monetize the long tail of existing subscriptions”"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:30:57.140700",
          "text": "(“they” being Idera, the company that acquired travis)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:32:03.141200",
          "text": "so travis will probably stick around for a long time but it’s unlikely to get new features"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-01T15:34:05.141800",
          "text": "They bought  Embarcadero Technologies in 2015 ( Delphi)."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:47:22.143600",
          "text": "ah yeah… no telling what Idera will decide to do with the free open source offering"
        }
      ]
    },
    {
      "conversation_id": "415",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Amira: hey, if anyone has thoughts on plots &amp; color maps please comment on this pull request: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "please"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira"
        ]
      },
      "timeline": [
        {
          "user": "Amira",
          "timestamp": "2019-03-31T20:53:55.111400",
          "text": "hey, if anyone has thoughts on plots &amp; color maps please comment on this pull request: <https://github.com/racket/plot/pull/52>"
        }
      ]
    },
    {
      "conversation_id": "416",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Vicki: for [CODE]: looks like it is converted at the rktio layer <[URL] so perhaps you have to look at [CODE] and repeat what [CODE] documented\nMadelaine: I played with a [CODE] a little, a while ago. I remember there being a few annoying things: for example, wasm exposes the payloads of nan values, which Racket doesn't.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 15.43,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Madelaine",
          "Vicki"
        ]
      },
      "timeline": [
        {
          "user": "Vicki",
          "timestamp": "2019-03-31T22:20:40.114200",
          "text": "for `\\r\\n`: looks like it is converted at the rktio layer\n<https://github.com/racket/racket/blob/master/racket/src/rktio/rktio_fd.c#L947>\nso perhaps you have to look at `(system-type 'os)` and repeat what `open-input-file` documented"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-03-31T22:36:06.114400",
          "text": "I played with a `#lang` a little, a while ago. I remember there being a few annoying things: for example, wasm exposes the payloads of nan values, which Racket doesn't."
        }
      ]
    },
    {
      "conversation_id": "417",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: I made one some times ago. It's not that good cause I was still learning how to make [CODE]s, but there's that. <[URL]\nKami: Elin Ok so, I tried using syntax-classes, but I don't see how I can transmit those classes to other modules once they are created. If I put the syntax-bound variable containing my class inside my metadata container, then give that to another expander somewhere in another module, how can the expander use that class as if it was declared here? In other words, my children parsers are going to need a lot of classes from their ancestors, but won't have them in scope.\nKami: I guess one way would be to change [CODE] so that it also provides all the classes defined by a [CODE], so that other modules can use them. But I'm wondering whether this simplifies my code or complicates it. Right now I'm just passing that information in a syntax object.\nKami: I guess I'll just try that and see... Thanks for the rubberducking.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 479.72,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-04-01T04:14:23.114600",
          "text": "I made one some times ago. It's not that good cause I was still learning how to make `#lang`s, but there's that. <https://github.com/euhmeuh/wasm-adventure>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-01T12:06:28.119600",
          "text": "<@Elin> Ok so, I tried using syntax-classes, but I don't see how I can transmit those classes to other modules once they are created. If I put the syntax-bound variable containing my class inside my metadata container, then give that to another expander somewhere in another module, how can the expander use that class as if it was declared here? In other words, my children parsers are going to need a lot of classes from their ancestors, but won't have them in scope."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-01T12:10:58.120000",
          "text": "I guess one way would be to change `actor-out` so that it also provides all the classes defined by a `define-actor`, so that other modules can use them. But I'm wondering whether this simplifies my code or complicates it. Right now I'm just passing that information in a syntax object."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-01T12:14:06.120200",
          "text": "I guess I'll just try that and see... Thanks for the rubberducking."
        }
      ]
    },
    {
      "conversation_id": "418",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Maybe I’m misunderstanding… You shouldn’t always have to provide the syntax classes all the time. Macro hygiene can take care of a lot for you.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-01T12:34:00.120800",
          "text": "Maybe I’m misunderstanding… You shouldn’t always have to provide the syntax classes all the time. Macro hygiene can take care of a lot for you."
        }
      ]
    },
    {
      "conversation_id": "419",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: eventually, when the YAML becomes self-assembling, we will all drown in it. _We’re already close_",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-04-01T14:08:03.126700",
          "text": "eventually, when the YAML becomes self-assembling, we will all drown in it. _We’re already close_"
        }
      ]
    },
    {
      "conversation_id": "420",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Do they own a competitor? (I have a hard time comprehending why they might close CI).\nIma: Defintely was - loads of people were laid off.\nJulia: I bet Travis will stick around for at least a few years... for _paying_ customers.\nJulia: If they're trying to cut expenses as deep as senior engineering staff, I'm not sure why they wouldn't look at quarterly numbers and say why are we paying to run stuff for free.\nJulia: So, I thought I might start looking at another CI thing, before it becomes a fire drill.\nJulia: I get why some people don't like Microsoft acquiring GitHub, but, I don't fear Microsoft cutting off free GH plans because they're trying to milk the bottom-line. For the foreseeable future, it's strategory to Microsoft. To Idera it's just a cash-flow stream.\nPriscila: Agree.\nKaren: I’d bet most of the expenses they’re trying to cut are engineer salaries rather than actual machine operating costs, so whether or not they keep the free option going probably depends on how much human effort it takes to keep it running\nKaren: and to provide customer support for it\nJulia: I don't know either. It might not be much dollars to run the servers. But someday rando exec might have indigestion from too many hamberders and suddenly the rest of us are having a fire drill.\nKaren: yup, no accounting for arbitrary executive termination mandates\nKaren: Julia so, what _do_ you want out of a [CODE]?\nJulia: As little as possible! Seriously, if I want to do 1 shell command on 10 containers, I feel like that should be max 11 lines to express.\nJulia: Maybe it's not quite _that_ simple.\nJulia: But in that spirit. Make simple things easy.\nKaren: do you want something tailored to racket’s concepts, or do you really want something that only deals with shell commands and docker stuff?\nJulia: I don't understand why CI services aren't just [CODE], why it needs to be wrapped in so much ceremony.\nJulia: Oh, yeah, I guess what I said just now, is generic and not Racket-specific.\nKaren: something something reproducibility something serialization something\nJulia: The earlier thing I said, I like, too. That for most Racket packages, the info is in [CODE].\nKaren: yup\nJulia: Not all packages are that simple, but most are.\nKaren: do you want something that explicitly knows about [CODE] and uses that as a source of truth?\nJulia: That would be wonderful. As version 0.1. And/or as the easy-button aspect of something that can handle more complicated scenarios.\nKaren: other question: are you fine with the apache 2 license, and (more importantly) are you comfortable with Google being the copyright owner instead of me?\nJulia: I mean, I have e.g. racket-mode which needs to test some permutation of X versions of Racket and Y versions of Emacs. But I wouldn't expect info.rkt =&gt; ci.yml to handle that in easy-mode. Or handle it at all. I'm talking about the 90% or 95% case, should be easy.\nJulia: I'm fine with either license, just please let me know if Idera will acquire Google ahead of time (so I can do $THINGS in the market). :slightly_smiling_face:\nJulia: (I guess what I want, in a hand-wavy way, is for the Racket build server to handle older Racket versions, and have spiffy hooks for Git{Hub Lab}. That would be fine for me and most packages, too. But that's not reasonable for the Racket team to do.)\nKaren: would you be comfortable making a github repo for this project under your account and adding me as a contributor? (google’s open source process is much simpler to follow for patches to existing projects owned by others than for releasing your own projects)\nKaren: if not, that’s totally understandable\nJulia: Karen Sorry I was away; back now. Yes. I'll make a repo and add you as a contributor.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 31,
        "duration_minutes": 84.23,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "please",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ima",
          "Julia",
          "Karen",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-04-01T15:28:52.138700",
          "text": "Do they own a competitor? (I have a hard time comprehending why they might close CI)."
        },
        {
          "user": "Ima",
          "timestamp": "2019-04-01T15:29:34.139200",
          "text": "Defintely was - loads of people were laid off."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:46:29.142300",
          "text": "I bet Travis will stick around for at least a few years... for _paying_ customers."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:47:25.143700",
          "text": "If they're trying to cut expenses as deep as senior engineering staff, I'm not sure why they wouldn't look at quarterly numbers and say why are we paying to run stuff for free."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:47:50.144200",
          "text": "So, I thought I might start looking at another CI thing, before it becomes a fire drill."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:49:53.145800",
          "text": "I get why some people don't like Microsoft acquiring GitHub, but, I don't fear Microsoft cutting off free GH plans because they're trying to milk the bottom-line. For the foreseeable future, it's strategory to Microsoft. To Idera it's just a cash-flow stream."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-01T15:51:16.147000",
          "text": "Agree."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:51:34.147100",
          "text": "I’d bet most of the expenses they’re trying to cut are engineer salaries rather than actual machine operating costs, so whether or not they keep the free option going probably depends on how much human effort it takes to keep it running"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:52:06.147500",
          "text": "and to provide customer support for it"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:53:29.148900",
          "text": "I don't know either. It might not be much dollars to run the servers. But someday rando exec might have indigestion from too many hamberders and suddenly the rest of us are having a fire drill."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:54:37.149500",
          "text": "yup, no accounting for arbitrary executive termination mandates"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:55:27.150300",
          "text": "<@Julia> so, what _do_ you want out of a `#lang ci-config`?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:56:13.150900",
          "text": "As little as possible!  Seriously, if I want to do 1 shell command on 10 containers, I feel like that should be max 11 lines to express."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:56:20.151200",
          "text": "Maybe it's not quite _that_ simple."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:56:34.151800",
          "text": "But in that spirit. Make simple things easy."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:56:51.152500",
          "text": "do you want something tailored to racket’s concepts, or do you really want something that only deals with shell commands and docker stuff?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:57:02.152800",
          "text": "I don't understand why CI services aren't just `run-the-thing.sh`, why it needs to be wrapped in so much ceremony."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:57:33.153500",
          "text": "Oh, yeah, I guess what I said just now, is generic and not Racket-specific."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:57:37.153700",
          "text": "something something reproducibility something serialization something"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:57:58.154200",
          "text": "The earlier thing I said, I like, too. That for most Racket packages, the info is in `info.rkt`."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:58:10.154400",
          "text": "yup"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:58:22.155000",
          "text": "Not all packages are that simple, but most are."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T15:58:23.155100",
          "text": "do you want something that explicitly knows about `info.rkt` and uses that as a source of truth?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T15:59:13.155900",
          "text": "That would be wonderful. As version 0.1. And/or as the easy-button aspect of something that can handle more complicated scenarios."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T16:01:45.157700",
          "text": "other question: are you fine with the apache 2 license, and (more importantly) are you comfortable with Google being the copyright owner instead of me?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T16:03:33.159400",
          "text": "I mean, I have e.g. racket-mode which needs to test some permutation of X versions of Racket and Y versions of Emacs.\nBut I wouldn't expect info.rkt =&gt; ci.yml to handle that in easy-mode. Or handle it at all.\nI'm talking about the 90% or 95% case, should be easy."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T16:04:18.160100",
          "text": "I'm fine with either license, just please let me know if Idera will acquire Google ahead of time (so I can do $THINGS in the market). :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T16:06:27.162000",
          "text": "(I guess what I want, in a hand-wavy way, is for the Racket build server to handle older Racket versions, and have spiffy hooks for Git{Hub Lab}. That would be fine for me and most packages, too. But that's not reasonable for the Racket team to do.)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T16:08:57.163200",
          "text": "would you be comfortable making a github repo for this project under your account and adding me as a contributor? (google’s open source process is much simpler to follow for patches to existing projects owned by others than for releasing your own projects)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-01T16:09:17.163500",
          "text": "if not, that’s totally understandable"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-01T16:53:06.165500",
          "text": "<@Karen> Sorry I was away; back now. Yes. I'll make a repo and add you as a contributor."
        }
      ]
    },
    {
      "conversation_id": "421",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-04-01T18:18:16.165900",
          "text": "<https://racket-news.com/2019/04/racket-news-issue-5.html>"
        }
      ]
    },
    {
      "conversation_id": "422",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: who here was at Racketfest?\nIma: I was at Racketfest. :metal:\nShavon: Michelina Racketfest!\nShavon: :slightly_smiling_face:\nMichelina: I'm preparing the Racketfest videos and proceedings -- stay tuned!\nMichelina: I've got 4.5 gigabytes of Shriram\nShavon: That's definitely lots of Shriram bytes!\nKami: Maybe there's something about [CODE] I don't understand. I would have thought the scope of a [CODE] would prevent other phases from accessing the classes defined there. Does [CODE] work as a closure?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 8,
        "duration_minutes": 183.57,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ima",
          "Kami",
          "Michelina",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T02:47:49.167700",
          "text": "who here was at Racketfest?"
        },
        {
          "user": "Ima",
          "timestamp": "2019-04-02T03:00:13.168000",
          "text": "I was at Racketfest.  :metal:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-02T03:07:59.168500",
          "text": "<@Michelina> Racketfest!"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-02T03:08:04.168700",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T03:19:32.169400",
          "text": "I'm preparing the Racketfest videos and proceedings -- stay tuned!"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T03:51:37.170000",
          "text": "I've got 4.5 gigabytes of Shriram"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-02T04:01:00.170700",
          "text": "That's definitely lots of Shriram bytes!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-02T05:51:23.171100",
          "text": "Maybe there's something about `begin-for-syntax` I don't understand. I would have thought the scope of a `begin-for-syntax` would prevent other phases from accessing the classes defined there. Does `#'` work as a closure?"
        }
      ]
    },
    {
      "conversation_id": "423",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Awesome! :slightly_smiling_face: Thanks for that.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-04-02T03:25:44.169600",
          "text": "Awesome! :slightly_smiling_face: Thanks for that."
        }
      ]
    },
    {
      "conversation_id": "424",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Ok you were right. Passing a class through #'(my-class-name) seems to actually pass the whole identifier down phase levels. I was expecting something like \"my-class-name is not bound to a class\", but it seems to work.\nAzucena: is there a standard way to have a cut inside a syntax class be treated as a cut for the pattern that uses the class\nGonzalo: Azucena Yes, use #:no-delimit-cut.\nAzucena: Gonzalo Thanks! Maybe that should be mentioned under the description of [CODE], which mentions syntax classes but not that option (which is probably why I didn't look carefully enough in the syntax-class section).",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 221.85,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Azucena",
          "Gonzalo",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-04-02T05:49:10.170900",
          "text": "Ok you were right. Passing a class through #'(my-class-name) seems to actually pass the whole identifier down phase levels. I was expecting something like \"my-class-name is not bound to a class\", but it seems to work."
        },
        {
          "user": "Azucena",
          "timestamp": "2019-04-02T09:21:07.172300",
          "text": "is there a standard way to have a cut inside a syntax class be treated as a cut for the pattern that uses the class"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-02T09:24:31.173000",
          "text": "<@Azucena> Yes, use #:no-delimit-cut."
        },
        {
          "user": "Azucena",
          "timestamp": "2019-04-02T09:31:01.174600",
          "text": "<@Gonzalo> Thanks! Maybe that should be mentioned under the description of `~!`, which mentions syntax classes but not that option (which is probably why I didn't look carefully enough in the syntax-class section)."
        }
      ]
    },
    {
      "conversation_id": "425",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: Julia for some reason I'm finding that call/input-request in the http package is *really* slow -- has something changed? I'm on 7.2.\nMichelina: wait, nevermind -- I'm using port-&gt;bytes as part of my entity reader, and this is somehow the bottleneck.\nKristeen: Milissa if there's something wrong (or even suboptimal) in [CODE] let me know\nMichelina: it's my mistake, no error in either Julia's stuff or [CODE]-- I was being dumb and unboundedly reading an open HTTP connection\nMichelina: very silly error on my part. presumably the remote HTTP server was cutting me (that is, the open connection) off after one minute (the amount of time [CODE] was taking)\nKristeen: aha\nKristeen: btw, sounds like RacketFest was great!\nMichelina: yeah! it was a blast. a ton of people showed up (65 registered, about 55 actually came), coming from many perspectives. I'd say only a handful of the people were major/serious Racket programmers. Most were enthusiasts of one kind or another and had dabbled with the language to varying degrees.\nGonzalo: Is there any way to do the equivalent of [CODE] in Racket, i.e. replace the current process with a new one? I suppose I could always just call [CODE] via the FFI, but I’d rather not have to.\nPriscila: Alas the \"Window\" menu is gone.\nPriscila: So how can I choose the window I minimized?\nLeticia: Priscila is it not in the dock?\nPriscila: Leticia I found eventually in the dock. But I am not used to use the dock. To conserve horizontal space I have hidden the dock and have a 90 sec delay for it to appear.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 13,
        "duration_minutes": 1128.22,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Kristeen",
          "Leticia",
          "Michelina",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T10:36:06.175600",
          "text": "<@Julia> for some reason I'm finding that call/input-request in the http package is *really* slow -- has something changed? I'm on 7.2."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T10:43:05.177200",
          "text": "wait, nevermind -- I'm using port-&gt;bytes as part of my entity reader, and this is somehow the bottleneck."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-02T10:45:40.177700",
          "text": "<@Milissa> if there's something wrong (or even suboptimal) in `port-&gt;bytes` let me know"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T10:49:41.180600",
          "text": "it's my mistake, no error in either <@Julia>'s stuff or `port-&gt;bytes`-- I was being dumb and unboundedly reading an open HTTP connection"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T10:51:06.181700",
          "text": "very silly error on my part. presumably the remote HTTP server was cutting me (that is, the open connection) off after one minute (the amount of time `port-&gt;bytes` was taking)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-02T10:52:45.181900",
          "text": "aha"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-02T10:52:52.182200",
          "text": "btw, sounds like RacketFest was great!"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-02T10:55:04.184200",
          "text": "yeah! it was a blast. a ton of people showed up (65 registered, about 55 actually came), coming from many perspectives. I'd say only a handful of the people were major/serious Racket programmers. Most were enthusiasts of one kind or another and had dabbled with the language to varying degrees."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-02T16:23:01.188100",
          "text": "Is there any way to do the equivalent of `exec` in Racket, i.e. replace the current process with a new one? I suppose I could always just call `execv` via the FFI, but I’d rather not have to."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-02T16:23:40.189100",
          "text": "Alas the \"Window\" menu is gone."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-02T16:23:52.189600",
          "text": "So how can I choose the window I minimized?"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-04-02T22:55:18.190800",
          "text": "<@Priscila> is it not in the dock?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-03T05:24:19.195100",
          "text": "<@Leticia> I found eventually in the dock. But I am not used to use the dock. To conserve horizontal space I have hidden the dock and have a 90 sec delay for it to appear."
        }
      ]
    },
    {
      "conversation_id": "426",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: The scope of a [CODE]? Identifiers defined inside a [CODE] are available in all other phase 1 code that has those scopes. This includes: - Other [CODE] things in that module - Macro transformer expressions in [CODE], [CODE], etc. in that module - Macro templates in that module that might get inserted into phase-1 positions in any module, including other modules This isn’t about crossing phases. I’m guessing the way you’re using it, the identifier is being put into a phase-1 position in the other module, and that’s fine, supported by macro hygiene.\nElin: And when it gets moved into other modules it retains the scopes from the macro-definition site in the original module, so the _non-provided_ syntax class in the [CODE] will be available as long as you insert it into the same phase.\nPriscila: Try this. Open DrRacket. Type a little. Minimize the window (macOS). Switch to another program, then switch back to DrRacket.\nJulia: <[URL] FWIW I did that: <[URL]\nMadelaine: I hope I'm missing something simple here, but I'm trying to write a macro that expands to [CODE], declares an lexically-scoped initialization argument, and lets the body forms refer to it via a syntax parameter. Some ways that don't work: [CODE_BLOCK] [CODE_BLOCK] [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 5,
        "duration_minutes": 745.03,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Julia",
          "Madelaine",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-02T13:56:11.184800",
          "text": "The scope of a `begin-for-syntax`? Identifiers defined inside a `begin-for-syntax` are available in all other phase 1 code that has those scopes.\n\nThis includes:\n - Other `begin-for-syntax` things in that module\n - Macro transformer expressions in `define-syntax`, `let-syntax`, etc. in that module\n - Macro templates in that module that might get inserted into phase-1 positions in any module, including other modules\n\nThis isn’t about crossing phases. I’m guessing the way you’re using it, the identifier is being put into a phase-1 position in the other module, and that’s fine, supported by macro hygiene."
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-02T14:49:59.185300",
          "text": "And when it gets moved into other modules it retains the scopes from the macro-definition site in the original module, so the _non-provided_ syntax class in the `begin-for-syntax` will be available as long as you insert it into the same phase."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-02T16:23:02.188200",
          "text": "Try this. Open DrRacket. Type a little. Minimize the window (macOS). Switch to another program, then switch back to DrRacket."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-02T20:55:58.190200",
          "text": "<https://racket.slack.com/archives/C06V96CKX/p1553739994468300>\nFWIW I did that: <https://github.com/greghendershott/blog>"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T02:21:13.193700",
          "text": "I hope I'm missing something simple here, but I'm trying to write a macro that expands to `class`, declares an lexically-scoped initialization argument, and lets the body forms refer to it via a syntax parameter. Some ways that don't work:\n```\n(define-syntax-parameter arg #f)\n(let ()\n  (define-local-member-name lexical)\n  (syntax-parameterize ([arg (make-rename-transformer\n                              #'lexical)])\n    (class object%\n      (super-new)\n      (init [lexical 1])\n      (printf arg))))\n;; lexical: unbound local member name\n```\n```\n(define-syntax-parameter arg #f)\n(let ()\n  (define-local-member-name lexical)\n  (class object%\n    (super-new)\n    (init [lexical 1])\n    (splicing-syntax-parameterize ([arg (make-rename-transformer\n                                         #'lexical)])\n      (printf arg))))\n;; identifier used out of context: lexical\n```\n```\n(define-syntax-parameter arg #f)\n(let ()\n  (define-local-member-name lexical)\n  (class object%\n    (super-new)\n    (init [(internal-name lexical) 1])\n    (splicing-syntax-parameterize ([arg (make-rename-transformer\n                                         #'internal-name)])\n      (printf arg))))\n;; identifier used out of context: internal-name\n```"
        }
      ]
    },
    {
      "conversation_id": "427",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: I guess my case is the third one. I'm putting the syntax-class in a template, moved through provide into other modules.\nKami: I see, thanks for the explanation!\nPriscila: Now I see \"DrRacket\", \"File\" and \"Help\" menus in the menu bar.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 126.43,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-04-02T14:17:03.185100",
          "text": "I guess my case is the third one. I'm putting the syntax-class in a template, moved through provide into other modules."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-02T16:04:40.185800",
          "text": "I see, thanks for the explanation!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-02T16:23:29.188700",
          "text": "Now I see \"DrRacket\", \"File\" and \"Help\" menus in the menu bar."
        }
      ]
    },
    {
      "conversation_id": "428",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: No, there’s no equivalent to [CODE].",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-04-03T01:42:14.190900",
          "text": "No, there’s no equivalent to `exec`."
        }
      ]
    },
    {
      "conversation_id": "429",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Madelaine You need define-rename-transformer-parameter (see the syntax parameter docs for why).\nMadelaine: Gonzalo Thanks! This is getting me closer (I guess it makes sense that [CODE] would be using [CODE] internally). I can put [CODE] around a single expression in the class body, but I'm still struggling to [CODE] the whole body (or, at least, multiple definitions and expressions). If I put [CODE] outside of [CODE], I get an [CODE] error (though in terms of [CODE] now, not [CODE]), I would guess because it gets extra scopes from being bound as a class-internal name, but if I use [CODE] inside the class (after the relevant [CODE]), I still get [CODE].\nGonzalo: Madelaine Looks like a bug to me. Peeking at the [CODE] form source code and at its expansion in the macro stepper, it looks like what’s going on is that [CODE] doesn’t actually expand expressions itself: it expands to some code with the unexpanded expressions left behind and lets the macroexpander do the work. So when you write [CODE_BLOCK] it gets turned into something like [CODE_BLOCK] Notice that the [CODE] ends up getting moved outside the [CODE] where [CODE] is rebound.\nGonzalo: I think the right fix is to change [CODE] so that it expands expressions in the same context it expands everything else, but an easy quick fix that should solve your problem would be to move the [CODE] inside the [CODE] so that things get bound properly.\nGonzalo: Then you should be able to use [CODE] and things should work.\nGonzalo: An aside: the way the [CODE] form handles local member names is, in general, a little fishy. It appears to simply find the member names that were bound and unhygienically introduces new bindings that shadow those names. I think a better way would be to make local member names work via syntax parameters instead of shadowing, but I wouldn’t be surprised if [CODE] predates syntax parameters, hence the current implementation strategy.\nGonzalo: The problem with the existing implementation strategy is that a macro that expands into a local member name might not be captured by the introduced [CODE] binding, which is probably not what people would expect. This is why you need the [CODE] to be inside the class body, not outside it—the RHS of the syntax parameter needs to end up getting the local scopes of the class body, otherwise it won’t be shadowed.\nGonzalo: If I were to call [CODE] via the FFI, would that break things in particularly bad ways, or should it be reasonably safe (modulo general FFI unsafety)? Might there be something I ought to call before calling [CODE]?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 92.0,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T10:35:37.196100",
          "text": "<@Madelaine> You need define-rename-transformer-parameter (see the syntax parameter docs for why)."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T11:03:18.201400",
          "text": "<@Gonzalo> Thanks! This is getting me closer (I guess it makes sense that `class` would be using `syntax-local-value` internally). I can put `syntax-parameterize` around a single expression in the class body, but I'm still struggling to `syntax-parameterize` the whole body (or, at least, multiple definitions and expressions). If I put `syntax-parameterize` outside of `class`, I get an `unbound local member name` error (though in terms of `arg` now, not `lexical`), I would guess because it gets extra scopes from being bound as a class-internal name, but if I use `splicing-syntax-parameterize` inside the class (after the relevant `init`), I still get `identifier used out of context: lexical`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T11:40:33.204800",
          "text": "<@Madelaine> Looks like a bug to me. Peeking at the `class` form source code and at its expansion in the macro stepper, it looks like what’s going on is that `class` doesn’t actually expand expressions itself: it expands to some code with the unexpanded expressions left behind and lets the macroexpander do the work. So when you write\n```\n(class object%\n  (super-new)\n  (init [lexical 1])\n  (define-syntax indirect (make-variable-like-transformer #'lexical))\n  (printf indirect))\n```\nit gets turned into something like\n```\n(define-syntax indirect (make-variable-like-transformer #'lexical))\n(letrec-syntaxes+values ([(lexical) (make-init-redirect #'lexical2)])\n                        ([(lexical2) unsafe-undefined])\n  (begin\n    (super-new)\n    (set! lexical2 (extract-args init-args 'lexical))\n    (printf indirect)))\n```\nNotice that the `define-syntax` ends up getting moved outside the `letrec+syntaxes+values` where `lexical` is rebound."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T11:41:45.206100",
          "text": "I think the right fix is to change `class` so that it expands expressions in the same context it expands everything else, but an easy quick fix that should solve your problem would be to move the `define-syntax` inside the `letrec-syntaxes+values` so that things get bound properly."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T11:42:00.206500",
          "text": "Then you should be able to use `splicing-syntax-parameterize` and things should work."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T11:44:07.208900",
          "text": "An aside: the way the `class` form handles local member names is, in general, a little fishy. It appears to simply find the member names that were bound and unhygienically introduces new bindings that shadow those names. I think a better way would be to make local member names work via syntax parameters instead of shadowing, but I wouldn’t be surprised if `class` predates syntax parameters, hence the current implementation strategy."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T11:46:12.211000",
          "text": "The problem with the existing implementation strategy is that a macro that expands into a local member name might not be captured by the introduced `init-redirect` binding, which is probably not what people would expect. This is why you need the `syntax-parameterize` to be inside the class body, not outside it—the RHS of the syntax parameter needs to end up getting the local scopes of the class body, otherwise it won’t be shadowed."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T12:07:37.211100",
          "text": "If I were to call `execv` via the FFI, would that break things in particularly bad ways, or should it be reasonably safe (modulo general FFI unsafety)? Might there be something I ought to call before calling `execv`?"
        }
      ]
    },
    {
      "conversation_id": "430",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Has anyone noticed that OpenGL contexts for Racket don't seem to work on Windows with Intel graphics cards?\nMarcelina: (They do seem to work with nvidea ones, and on os x and linux)\nMarcelina: You just get a blank window: <[URL]\nMarcelina: (Based on [CODE], it sounds like Clarinda would either be the right person to talk to, or know the right person to talk to?)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 2.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-03T12:22:41.211800",
          "text": "Has anyone noticed that OpenGL contexts for Racket don't seem to work on Windows with Intel graphics cards?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-03T12:22:56.212200",
          "text": "(They do seem to work with nvidea ones, and on os x and linux)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-03T12:23:10.212700",
          "text": "You just get a blank window: <https://stackoverflow.com/questions/54935910/how-to-make-a-programmable-pipeline-opengl-context-in-racket>"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-03T12:24:59.213900",
          "text": "(Based on `git blame win32/gl-context.rkt`, it sounds like <@Clarinda> would either be the right person to talk to, or know the right person to talk to?)"
        }
      ]
    },
    {
      "conversation_id": "431",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: There are problems. Some file descriptors might be left open, and some signal handlers or dispositions might be different from what they should be for a new process. It might also create some problem to skip some shutdown actions, such as call [CODE] on the original plumber or some custodian callbacks, but those effects are no worse than the state after crashing.\nGonzalo: Are the things you mentioned (signal handlers, etc.) properly adjusted for subprocesses spawned with [CODE], or do they inherit those things, too? (I’m okay with file descriptors being left open, since if they’re not marked [CODE], they’d be left open anyway.)\nClarinda: Those things are adjusted for the new process created by [CODE]. (Otherwise, [CODE] would be broken.)\nGonzalo: Got it. And I imagine it would be effort (maybe big and maybe small, but definitely nonzero) to make it possible to perform the kinds of adjustments [CODE] and the various process shutdown handlers perform without actually spawning a process/the VM down so that the process can safely call [CODE]?\nMadelaine: Gonzalo Thanks yet again—that looks promising! I suspected [CODE] was doing something wrong, but … well, [CODE]&lt;1434 lines of code here&gt;[CODE] is a great example of why [CODE] etc. are such a big step forward for macro writers. I will open an issue to track this and try the quick fix.\nMadelaine: For local member names in general, I would want the behavior you describe, but I'm a bit fuzzy on whether the current behavior is intentional. I had figured out at an earlier stage of trying to debug this that [CODE], as you said, \"appears to simply find the member names that were bound and unhygienically introduces new bindings that shadow those names.\" I've read <[URL] a few times now, and these parts raise questions for me:\nMadelaine: \"If a single [CODE] is provided for a method declaration, the identifier is used for both the internal and external names.\"\nMadelaine: \"Each [CODE], [CODE], [CODE], or [CODE] variable similarly has an internal and an external name. The internal name is used within the class to access the variable, while the external name is used outside the class when providing initialization arguments …, inheriting a field, or accessing a field externally ….\"\nMadelaine: \"A single identifier can be used as an internal identifier and an external identifier, and it is possible to use the same identifier as internal and external identifiers for different bindings. … Overall, each internal identifier must be distinct from all other internal identifiers, each external method name must be distinct from all other method names, each external field name must be distinct from all other field names, and each initialization argument name must be distinct from all other initialization argument names.\"\nMadelaine: \"By default, external names have no lexical scope … The [CODE] and [CODE] forms introduce scoped external names.\"\nMadelaine: (Note that it doesn't specify a predicate for its notion of \"the same identifier\" and \"distinct\" identifiers.)\nMadelaine: I could see an interpretation of those passages—and I hope this is wrong, because I don't want it to work this way—to say that [CODE] is really just shorthand for [CODE]. The external identifier is a reference—either to something bound in the \"member namespace\" or to a global, if there is no such binding—and the internal identifier identifier is a binding occurance that just happens to be symbolically the same as the external identifier. So, under this interpretation, a macro that expands to a local-member-name use is specifically referring to a \"scoped external name,\" which _shouldn't_ refer to the symbolically-identical internal name.\nMadelaine: As I said, though, I don't like this behavior. Even if this is what the documentation is telling us to expect (and it certainly isn't doing so clearly and unambiguously), I'm having a hard time coming up with a scenario when that behavior would actually be useful, where I would have liked the local-member-names-as-syntax-parameters behavior. I would support support changing this even if it were technically \"breaking\" behavior that the documentation had been attempting to specify, as long as nothing is actually relying on the current behavior in practice (which seems very unlikely).\nMadelaine: Jana I believe you would need to use [CODE] to tell Typed Racket about its type. Have you tried that?\nElin: If you’re just passing them through, then what problem are you running into with [CODE]?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 15,
        "duration_minutes": 203.77,
        "contains_question": true,
        "action_keywords": [
          "action",
          "create",
          "fix",
          "must",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Gonzalo",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-04-03T12:50:04.214000",
          "text": "There are problems. Some file descriptors might be left open, and some signal handlers or dispositions might be different from what they should be for a new process. It might also create some problem to skip some shutdown actions, such as call `plumber-flush-all` on the original plumber or some custodian callbacks, but those effects are no worse than the state after crashing."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T12:52:09.214200",
          "text": "Are the things you mentioned (signal handlers, etc.) properly adjusted for subprocesses spawned with `subprocess`, or do they inherit those things, too? (I’m okay with file descriptors being left open, since if they’re not marked `close-on-exec`, they’d be left open anyway.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-03T12:57:57.214400",
          "text": "Those things are adjusted for the new process created by `subprocess`. (Otherwise, `subprocess` would be broken.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T12:59:57.214600",
          "text": "Got it. And I imagine it would be effort (maybe big and maybe small, but definitely nonzero) to make it possible to perform the kinds of adjustments `subprocess` and the various process shutdown handlers perform without actually spawning a process/the VM down so that the process can safely call `execv`?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:28:46.218000",
          "text": "<@Gonzalo> Thanks yet again—that looks promising! I suspected `class` was doing something wrong, but … well, `(define-syntaxes (class* _class class/derived) `&lt;1434 lines of code here&gt;`)` is a great example of why `syntax-parse` etc. are such a big step forward for macro writers. I will open an issue to track this and try the quick fix."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:36:37.218100",
          "text": "For local member names in general, I would want the behavior you describe, but I'm a bit fuzzy on whether the current behavior is intentional. I had figured out at an earlier stage of trying to debug this that `class`, as you said, \"appears to simply find the member names that were bound and unhygienically introduces new bindings that shadow those names.\" I've read <https://docs.racket-lang.org/reference/createclass.html#(part._extnames)> a few times now, and these parts raise questions for me:"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:37:33.218400",
          "text": "\"If a single `id` is provided for a method declaration, the identifier is used for both the internal and external names.\""
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:38:09.218600",
          "text": "\"Each `init`, `init-field`, `field`, or `inherit-field` variable similarly has an internal and an external name. The internal name is used within the class to access the variable, while the external name is used outside the class when providing initialization arguments …, inheriting a field, or accessing a field externally ….\""
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:41:08.219000",
          "text": "\"A single identifier can be used as an internal identifier and an external identifier, and it is possible to use the same identifier as internal and external identifiers for different bindings. … Overall, each internal identifier must be distinct from all other internal identifiers, each external method name must be distinct from all other method names, each external field name must be distinct from all other field names, and each initialization argument name must be distinct from all other initialization argument names.\""
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:41:44.219200",
          "text": "\"By default, external names have no lexical scope … The `define-local-member-name` and `define-member-name` forms introduce scoped external names.\""
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:43:19.219400",
          "text": "(Note that it doesn't specify a predicate for its notion of \"the same identifier\" and \"distinct\" identifiers.)"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T14:53:47.219600",
          "text": "I could see an interpretation of those passages—and I hope this is wrong, because I don't want it to work this way—to say that `(init [x 1])` is really just shorthand for `(init [(x x) 1])`. The external identifier is a reference—either to something bound in the \"member namespace\" or to a global, if there is no such binding—and the internal identifier identifier is a binding occurance that just happens to be symbolically the same as the external identifier. So, under this interpretation, a macro that expands to a local-member-name use is specifically referring to a \"scoped external name,\" which _shouldn't_ refer to the symbolically-identical internal name."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T15:02:31.219800",
          "text": "As I said, though, I don't like this behavior. Even if this is what the documentation is telling us to expect (and it certainly isn't doing so clearly and unambiguously), I'm having a hard time coming up with a scenario when that behavior would actually be useful, where I would have liked the local-member-names-as-syntax-parameters behavior. I would support support changing this even if it were technically \"breaking\" behavior that the documentation had been attempting to specify, as long as nothing is actually relying on the current behavior in practice (which seems very unlikely)."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T16:04:18.223300",
          "text": "<@Jana> I believe you would need to use `require/typed` to tell Typed Racket about its type. Have you tried that?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-03T16:13:50.229000",
          "text": "If you’re just passing them through, then what problem are you running into with `#:opaque`?"
        }
      ]
    },
    {
      "conversation_id": "432",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-04-03T13:46:17.215000",
          "text": "<https://kimsereylam.com/>"
        }
      ]
    },
    {
      "conversation_id": "433",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Hallie: Priscila I don't know who that guy is - but he should be writing books - I like the clarity of his writing.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie"
        ]
      },
      "timeline": [
        {
          "user": "Hallie",
          "timestamp": "2019-04-03T15:20:40.221400",
          "text": "<@Priscila> I don't know who that guy is - but he should be writing books - I like the clarity of his writing."
        }
      ]
    },
    {
      "conversation_id": "434",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jana: :wave::skin-tone-3: anyone knows if this is possible to use [CODE] from `web-server/[URL] in typed racket? I struggle with that…\nJana: i tried using [CODE_BLOCK]\nJana: but this does not work as expected\nMadelaine: Using [CODE] allows you to work with responses as opaque values. You can accept them as arguments, pass them around, and recognize them with [CODE]—but it doesn't tell Typed Racket how to construct responses or access their fields. To do that, you must use a [CODE] clause with [CODE].\nJana: I just want to pass them through actually. Only part of my code is typed. Looking at [CODE] :eyes: …\nMadelaine: Here's a first attempt with [CODE]:\nMadelaine: [CODE_BLOCK] But note two issues: 1. The result of output is really [CODE], but Typed Racket can't generate a contract for that. Since in practice only the library calls [CODE], this isn't likely to cause problems in practice. 2. The docs say that [CODE] and [CODE] have the contract [CODE], but they should be more restrictive (e.g. [CODE] for code).\nJana: indeed, after some more fiddling around my signature, the error went away… :neutral_face:. I’m reloading code and had probably some stuff stuck in memory that was not correct\nJana: :thumbsup: amazing, thanks for that :slightly_smiling_face: I’ll definitely use this as a starting point\nJana: I’m in the process of migrating a small webapp to typed racket and this is both exciting and challenging. I’m a casual racketter and my typed-racket is really :cow: for now…\nAmira: Jana typed racket comes with types for the [CODE] and [CODE] structs. They're available by `(require typed/web-server/[URL] The docs are sparse but anyway: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 11,
        "duration_minutes": 144.97,
        "contains_question": true,
        "action_keywords": [
          "must",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Jana",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Jana",
          "timestamp": "2019-04-03T16:00:03.222300",
          "text": ":wave::skin-tone-3: anyone knows if this is possible to use `response` from `web-server/http/response-structs` in typed racket? I struggle with that…"
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-03T16:05:28.223700",
          "text": "i tried using\n```\n(require/typed 'response-wrapper\n                 [#:opaque response response?])\n```"
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-03T16:05:38.224000",
          "text": "but this does not work as expected"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T16:10:30.227100",
          "text": "Using `#:opaque` allows you to work with responses as opaque values. You can accept them as arguments, pass them around, and recognize them with `response`—but it doesn't tell Typed Racket how to construct responses or access their fields. To do that, you must use a `#:struct` clause with `require/typed`."
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-03T16:12:18.228300",
          "text": "I just want to pass them through actually. Only part of my code is typed. Looking at `#:struct` :eyes: …"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T16:14:46.229600",
          "text": "Here's a first attempt with `#:struct`:"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T16:20:33.233000",
          "text": "```\n(require/typed\n web-server/http\n [#:struct header\n  ([field : Bytes]\n   [value : Bytes])]\n [#:struct response\n  ([code : Number]\n   [message : Bytes]\n   [seconds : Number]\n   [mime : (U #f Bytes)]\n   [headers : (Listof header)]\n   [output : (-&gt; Output-Port Any)])])\n```\nBut note two issues:\n1. The result of output is really `AnyValues`, but Typed Racket can't generate a contract for that. Since in practice only the library calls `output`, this isn't likely to cause problems in practice.\n2. The docs say that `code` and `message` have the contract `number?`, but they should be more restrictive (e.g. `exact-positive-integer?` for code)."
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-03T16:22:18.233200",
          "text": "indeed, after some more fiddling around my signature, the error went away… :neutral_face:. I’m reloading code and had probably some stuff stuck in memory that was not correct"
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-03T16:23:21.234000",
          "text": ":thumbsup:  amazing, thanks for that :slightly_smiling_face: I’ll definitely use this as a starting point"
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-03T16:24:21.235100",
          "text": "I’m in the process of migrating a small webapp to typed racket and this is both exciting and challenging. I’m a casual racketter and my typed-racket is really :cow: for now…"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-03T18:25:01.237200",
          "text": "<@Jana> typed racket comes with types for the `header` and `response` structs. They're available by `(require typed/web-server/http)`. The docs are sparse but anyway: <https://docs.racket-lang.org/ts-reference/Libraries_Provided_With_Typed_Racket.html#(mod-path._typed%2Fweb-server%2Fhttp)>"
        }
      ]
    },
    {
      "conversation_id": "435",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Yes – probably not too bad, but some effort. I can add it to my list.\nLeticia: That would explain the weird error messages I was getting…\nGonzalo: It’s okay, it isn’t very important. I’d like to have it, but it’s very low priority. :)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 7.38,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo",
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-04-03T17:38:40.235600",
          "text": "Yes – probably not too bad, but some effort. I can add it to my list."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-04-03T17:44:21.235800",
          "text": "That would explain the weird error messages I was getting…"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T17:46:03.236000",
          "text": "It’s okay, it isn’t very important. I’d like to have it, but it’s very low priority. :)"
        }
      ]
    },
    {
      "conversation_id": "436",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: I have a semi-naive question here. I have a student who passed [CODE] to [CODE] and got back [CODE] rather than (for example) [CODE]. Am I right in saying that this is because [CODE] is a core syntactic form, and so it obeys this rule in the “Expansion steps” documentation: &gt;Thus, the possibilities that do not fail lead to an identifier with a particular binding. This binding refers to one of three things: &gt; … A core syntactic form, which is parsed as described for each form in Syntactic Forms.\nGonzalo: Deneen The devil is in the details: just because both the input and output identifiers are named [CODE] does not mean they are the _same_ [CODE]. Indeed, just because they aren’t spelled [CODE] doesn’t mean they aren’t actually the same binding.\nDeneen: My understanding was that [CODE] would fully expand the syntax you give it to fully-expanded racket using the current lexical context, but I am probably being naive in just not seeing how this fits in there.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 79.48,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T21:00:54.238800",
          "text": "I have a semi-naive question here. I have a student who passed `(lambda (x) x)` to `local-expand` and got back `(lambda (x) x)` rather than (for example) `#%plain-lambda`.  Am I right in saying that this is because `lambda` is a core syntactic form, and so it obeys this rule in the “Expansion steps” documentation:\n&gt;Thus, the possibilities that do not fail lead to an identifier with a particular binding. This binding refers to one of three things:\n&gt; … A core syntactic form, which is parsed as described for each form in Syntactic Forms."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T21:56:43.240100",
          "text": "<@Deneen> The devil is in the details: just because both the input and output identifiers are named `lambda` does not mean they are the _same_ `lambda`. Indeed, just because they aren’t spelled `#%plain-lambda` doesn’t mean they aren’t actually the same binding."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:20:23.245100",
          "text": "My understanding was that `local-expand` would fully expand the syntax you give it to fully-expanded racket using the current lexical context, but I am probably being naive in just not seeing how this fits in there."
        }
      ]
    },
    {
      "conversation_id": "437",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: DrRacket can tell you what it thinks the actual binding of a syntax object is if you print it and click on the little triangle that shows up in the interactions window.\nMadelaine: No, it is because it says in <[URL] to \"Beware that the symbolic names of identifiers in a fully expanded program may not match the symbolic names in the grammar. Only the binding (according to [CODE]) matters.\" You can demonstrate this with the following program: [CODE_BLOCK] The program evaluates to [CODE], which means that the expanded identifier is [CODE] to [CODE], but printing it shows that it is symbolically [CODE].\nGonzalo: Here’s a screenshot from DrRacket that illustrates what I was talking about. Notice the “Identifier binding” section in the syntax info, which says that [CODE] comes from [CODE].\nGonzalo: …and here’s the [CODE] from the output. Notice that one comes from [CODE] (exported through [CODE]). Not the same binding! Just the same name.\nGonzalo: I think that what you’ve said is true, and something I’d overlooked. It seems to me that [CODE] really is shorthand for [CODE]. The docs seem pretty clear in that [CODE] creates lexically scoped _external_ names only.\nDeneen: So this is very helpful, but I think I still have a very basic question: since the output of [CODE] is still [CODE], which syntactic case in the fully expanded racket grammar does that correspond to?\nGonzalo: It’s the [CODE] case. If you write [CODE], it will return [CODE]. You can also print [CODE] in DrRacket and it will show you the same information I showed above. You can also get it programmatically by calling [CODE] on the identifier.\nDeneen: Ah!\nDeneen: Okay!\nGonzalo: [CODE] is just the name [CODE] exports the kernel [CODE] form under (since [CODE] defines its own [CODE]).\nDeneen: Yes, that shores up the difference and helps connect my intuition to what you’ve said here!\nDeneen: So, let’s say I wanted to walk over the result of [CODE] using [CODE]. Given that the identifier could come from any number of places, what is the idiom for doing that?\nDeneen: Nice! This is a good example.\nGonzalo: Well, [CODE] is the binding exported by [CODE] that is guaranteed to refer to the kernel [CODE], so you’d put [CODE] in the literal list and use that in your pattern.\nDeneen: Ah, okay, and then it would match. I Isee.\nDeneen: Right, because syntax-case will identify up to [CODE]?\nGonzalo: Yes, [CODE] literals match by binding, in the [CODE] sense.\nDeneen: Awesome. This is super helpful.\nGonzalo: There’s also the [CODE] module, which exports [CODE], along with a [CODE] form. But you shouldn’t be using either of those things, since you should be using [CODE] anyway, not [CODE], which provides a [CODE] literal set. :)\nGonzalo: See: <[URL]\nDeneen: Right! We are using [CODE], but I often find it’s easier to ask questions using [CODE]\nGonzalo: The Racket documentation follows a convention, which is that whenever an identifier’s _binding_ matters, it is typeset in blue text and is hyperlinked. Whenever an identifier is just used symbolically, it _won’t_ be blue or hyperlinked, it will just be in plain typewriter font. Furthermore, when an identifier in the documentation is hyperlinked, you can be certain that binding is exported (under that symbolic name) from the module associated with the section that documents it (i.e. is the destination of the hyperlink).\nGonzalo: For a good example of this convention in action, compare the grammar for [CODE] and the grammar for [CODE]. In [CODE], [CODE] and [CODE] are blue and hyperlinked. But in [CODE], the identifiers in the pattern grammar (such as [CODE], [CODE], [CODE], etc.) are not hyperlinked.\nGonzalo: You can see this difference for yourself. Write [CODE] at the top of a module, then try to use [CODE] with an [CODE] clause. It won’t behave like [CODE]. Then try to write [CODE] and use [CODE] with a [CODE] pattern. It will do the same thing it always does.\nGonzalo: Dually, you can try [CODE] compared with [CODE].\nGonzalo: (A small disclaimer: this convention is only used within _grammar_ descriptions, not within uses. The mechanism that Scribble uses to typeset codeblocks and examples does not, unfortunately, understand how to distinguish the two kinds of uses, so [CODE] will still color [CODE] in blue text even though its binding is irrelevant.)\nDeneen: Great! This is a really helpful nugget of knowledge.\nDeneen: Yeah, I didn’t mean to not read the documentation. I just saw that and didn’t mentally parse it since I didn’t have this in mind.\nDeneen: Okay, I think this all really helps. Does also give a lot more questions, too (like differences between [CODE] and [CODE]), but is helpful.\nDeneen: To summarize my high-level confusion in all of this is that--in my head--I was identifying “symbolic name” and “binding.”\nDeneen: Within the *implementation* of the macros themselves, what causes this difference?\nDeneen: I think the answer has something to do with literal sets.\nGonzalo: I think it helps to think of the identity of a “binding” as being to “the place where the thing is defined”. Even if you [CODE] something, it still refers to the same exact definition site.\nGonzalo: So [CODE] is a way of asking “are these two identifiers both references to the same definition site?”\nDeneen: Yes, that really helps, since my intuition comes from abstract interpretation and so I can connect well with that..\nGonzalo: In terms of [CODE] features, [CODE] is using [CODE] (which matches by binding) and [CODE] is using [CODE] (which matches by symbolic name). In terms of lower-level concepts, [CODE] is comparing identifiers for equality using [CODE], while [CODE] is comparing them for equality by getting the symbols out of the syntax object wrappers using [CODE] and calling [CODE] on the results.\nDeneen: Okay, that is awesome. I suspected that was the case with [CODE], but I *hadn’t* heard of [CODE]\nDeneen: Is the reason [CODE] *doesn’t* use [CODE], just because the intention is that it is nonsensical to redefine its match patterns?\nGonzalo: The fact that [CODE] using symbolic comparisons instead of binding information is considered a bug, or at least a misfeature, but it’s hard to change now due to backwards compatibility concerns. The simplest answer to your question of “why?” is just “because it’s pretty old.”\nDeneen: Ah, okay! Yeah that’s totally fine, I didn’t know if it was something deep that indicated a design decision I should explore..\nGonzalo: Usually, you don’t want to use [CODE]. In my experience, you usually either want to use [CODE] (for when you’re either looking at fully/partially expanded syntax, or if you’re building an extensible embedded language), or you want to use keywords. It just happens that keywords didn’t always exist in Racket, so some older things that might use keywords in modern Racket use symbols instead.\nDeneen: Okay, that historical note really helps contextualize it.\nGonzalo: As it happens, though, [CODE] _isn’t_ a place where keywords make sense, since the [CODE] pattern language _is_ extensible. And as soon as you need extensibility, you need to distinguish identifiers by binding, since binding is the thing that lets users add _new_ terms to an existing language.\nDeneen: Right!\nGonzalo: A good example of this in practice is [CODE] itself. Its pattern language uses identifiers, such as [CODE], [CODE], [CODE], and [CODE], and those are recognized by their binding. However, its “directive” language uses keywords, such as [CODE], [CODE], and [CODE]. Its pattern language is extensible, but its directive language is not.\nDeneen: Yeah, that’s a great example.\nGonzalo: I believe there’s some relatively recent record of Matthew saying something along the lines of “[CODE] should have used [CODE] instead of [CODE]”, since it isn’t an extensible place, but I don’t remember off the top of my head where it was from. So it’s a good rule of thumb, but note that some forms in Racket don’t follow the rule because they are old and possibly from Scheme. (Keywords are especially good in non-extensible locations because they are in a distinct syntactic category from expressions, unlike in many other languages with keywords, where keywords are “self-quoting”.)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 47,
        "duration_minutes": 90.25,
        "contains_question": true,
        "action_keywords": [
          "action",
          "build",
          "create",
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Gonzalo",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T21:57:29.240700",
          "text": "DrRacket can tell you what it thinks the actual binding of a syntax object is if you print it and click on the little triangle that shows up in the interactions window."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-03T22:00:00.240800",
          "text": "No, it is because it says in <https://docs.racket-lang.org/reference/syntax-model.html#%28part._fully-expanded%29> to \"Beware that the symbolic names of identifiers in a fully expanded program may not match the symbolic names in the grammar. Only the binding (according to `free-identifier=?`) matters.\"  You can demonstrate this with the following program:\n```\n#lang racket\n\n(require syntax/parse/define)\n\n(define-syntax-parser try-local-expand\n  [(_)\n   (define expanded\n     (local-expand #'(lambda (x) x)\n                   (syntax-local-context)\n                   null))\n   (syntax-parse expanded\n     #:literals {#%expression #%plain-lambda}\n     [(#%expression ((~and #%plain-lambda form) (:id) :id))\n      (println #'form)\n      #'#t]\n     [_\n      #'#f])])\n\n(try-local-expand)\n```\nThe program evaluates to `#t`, which means that the expanded identifier is `free-identifier=?` to `#%plain-lambda`, but printing it shows that it is symbolically `lambda`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:04:01.241200",
          "text": "Here’s a screenshot from DrRacket that illustrates what I was talking about. Notice the “Identifier binding” section in the syntax info, which says that `lambda` comes from `racket/private/kw.rkt`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:05:06.241500",
          "text": "…and here’s the `lambda` from the output. Notice that one comes from `'#%core` (exported through `'#%kernel`). Not the same binding! Just the same name."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:13:12.241800",
          "text": "I think that what you’ve said is true, and something I’d overlooked. It seems to me that `(init [x 1])` really is shorthand for `(init [(x x) 1])`. The docs seem pretty clear in that `define-local-member-name` creates lexically scoped _external_ names only."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:19:01.243000",
          "text": "So this is very helpful,  but I think I still have a very basic question: since the output of `local-expand` is still `(lambda (x) x)`, which syntactic case in the fully expanded racket grammar does that correspond to?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:20:42.245800",
          "text": "It’s the `#%plain-lambda` case. If you write `(free-identifier=? #'#%plain-lambda the-lambda-from-the-expansion)`, it will return `#t`. You can also print `#'#%plain-lambda` in DrRacket and it will show you the same information I showed above. You can also get it programmatically by calling `identifier-binding` on the identifier."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:20:54.246100",
          "text": "Ah!"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:20:56.246400",
          "text": "Okay!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:21:13.247000",
          "text": "`#%plain-lambda` is just the name `#lang racket/base` exports the kernel `lambda` form under (since `racket/base` defines its own `lambda`)."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:21:22.247200",
          "text": "Yes, that shores up the difference and helps connect my intuition to what  you’ve said here!"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:22:01.248000",
          "text": "So, let’s say I wanted to walk over the result of `local-expand` using `syntax-case`. Given that the identifier could come from any number of places, what is the idiom for doing that?"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:22:36.248700",
          "text": "Nice! This is a good example."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:22:38.249100",
          "text": "Well, `#%plain-lambda` is the binding exported by `racket/base` that is guaranteed to refer to the kernel `lambda`, so you’d put `#%plain-lambda` in the literal list and use that in your pattern."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:22:53.249800",
          "text": "Ah, okay, and then it would match. I Isee."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:23:07.250500",
          "text": "Right, because syntax-case will  identify up to `free-identifier=?`?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:23:14.250700",
          "text": "Yes, `syntax-case` literals match by binding, in the `free-identifier=?` sense."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:23:24.251100",
          "text": "Awesome. This is super helpful."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:24:05.251800",
          "text": "There’s also the `syntax/kerncase` module, which exports `(kernel-form-identifier-list)`, along with a `kernel-syntax-case` form. But you shouldn’t be using either of those things, since you should be using `syntax-parse` anyway, not `syntax-case`, which provides a `kernel-literals` literal set. :)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:24:33.252400",
          "text": "See: <https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._kernel-literals%29%29>"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:24:34.252500",
          "text": "Right! We are using `syntax-parse`, but I often find it’s easier to ask questions using `syntax-case`"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:27:22.254800",
          "text": "The Racket documentation follows a convention, which is that whenever an identifier’s _binding_ matters, it is typeset in blue text and is hyperlinked. Whenever an identifier is just used symbolically, it _won’t_ be blue or hyperlinked, it will just be in plain typewriter font. Furthermore, when an identifier in the documentation is hyperlinked, you can be certain that binding is exported (under that symbolic name) from the module associated with the section that documents it (i.e. is the destination of the hyperlink)."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:29:32.256100",
          "text": "For a good example of this convention in action, compare the grammar for `cond` and the grammar for `match`. In `cond`, `=&gt;` and `else` are blue and hyperlinked. But in `match`, the identifiers in the pattern grammar (such as `quote`, `list`, `hash-table`, etc.) are not hyperlinked."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:30:41.257400",
          "text": "You can see this difference for yourself. Write `(define else #f)` at the top of a module, then try to use `cond` with an `else` clause. It won’t behave like `else`. Then try to write `(define list #f)` and use `match` with a `list` pattern. It will do the same thing it always does."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:31:20.258100",
          "text": "Dually, you can try `(require (rename-in racket/base [else other-else]))` compared with `(require (rename-in racket/base [list other-list]))`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T22:33:58.260000",
          "text": "(A small disclaimer: this convention is only used within _grammar_ descriptions, not within uses. The mechanism that Scribble uses to typeset codeblocks and examples does not, unfortunately, understand how to distinguish the two kinds of uses, so `(match x [(quote a) #t])` will still color `quote` in blue text even though its binding is irrelevant.)"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:36:21.260400",
          "text": "Great! This is a really helpful nugget of knowledge."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T22:44:15.260500",
          "text": "Yeah, I didn’t mean to not read the documentation. I just saw that and didn’t mentally parse it since I didn’t have this in mind."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:04:43.262300",
          "text": "Okay, I think this all really helps. Does also give a lot more questions, too (like differences between `identifier-binding` and `identifier-transformer-binding`), but is helpful."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:07:31.262400",
          "text": "To summarize my high-level confusion in all of this is that--in my head--I was  identifying “symbolic name” and “binding.”"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:12:27.262700",
          "text": "Within the *implementation* of the macros themselves, what causes this difference?"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:14:15.263000",
          "text": "I  think the answer has something to do with literal sets."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:14:25.263200",
          "text": "I think it helps to think of the identity of a “binding” as being to “the place where the thing is defined”. Even if you `rename-in` something, it still refers to the same exact definition site."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:15:01.263400",
          "text": "So `free-identifier=?` is a way of asking “are these two identifiers both references to the same definition site?”"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:16:48.263600",
          "text": "Yes, that really helps, since my intuition comes from abstract interpretation and so I can connect well with that.."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:17:22.263800",
          "text": "In terms of `syntax-parse` features, `cond` is using `#:literals` (which matches by binding) and `match` is using `#:datum-literals` (which matches by symbolic name). In terms of lower-level concepts, `cond` is comparing identifiers for equality using `free-identifier=?`, while `match` is comparing them for equality by getting the symbols out of the syntax object wrappers using `syntax-e` and calling `eq?` on the results."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:18:24.264000",
          "text": "Okay, that is awesome. I suspected that was the case with `cond`, but I *hadn’t* heard of `#:datum-literals`"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:20:06.264200",
          "text": "Is the  reason `match` *doesn’t* use `#:literals`, just because the intention is that it is nonsensical to redefine its match patterns?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:21:19.264400",
          "text": "The fact that `match` using symbolic comparisons instead of binding information is considered a bug, or at least a misfeature, but it’s hard to change now due to backwards compatibility concerns. The simplest answer to your question of “why?” is just “because it’s pretty old.”"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:21:41.264600",
          "text": "Ah, okay! Yeah that’s totally fine, I didn’t know if it was something deep that indicated a design decision  I should explore.."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:21:55.264800",
          "text": "Usually, you don’t want to use `#:datum-literals`. In my experience, you usually either want to use `#:literals` (for when you’re either looking at fully/partially expanded syntax, or if you’re building an extensible embedded language), or you want to use keywords. It just happens that keywords didn’t always exist in Racket, so some older things that might use keywords in modern Racket use symbols instead."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:22:20.265000",
          "text": "Okay, that historical note really helps contextualize it."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:22:59.265200",
          "text": "As it happens, though, `match` _isn’t_ a place where keywords make sense, since the `match` pattern language _is_ extensible. And as soon as you need extensibility, you need to distinguish identifiers by binding, since binding is the thing that lets users add _new_ terms to an existing language."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:24:55.265500",
          "text": "Right!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:25:08.265700",
          "text": "A good example of this in practice is `syntax-parse` itself. Its pattern language uses identifiers, such as `~and`, `~do`, `~optional`, and `~parse`, and those are recognized by their binding. However, its “directive” language uses keywords, such as `#:and`, `#:do`, and `#:parse`. Its pattern language is extensible, but its directive language is not."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-03T23:27:38.265900",
          "text": "Yeah, that’s a great example."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-03T23:27:44.266100",
          "text": "I believe there’s some relatively recent record of Matthew saying something along the lines of “`cond` should have used `#:else` instead of `else`”, since it isn’t an extensible place, but I don’t remember off the top of my head where it was from. So it’s a good rule of thumb, but note that some forms in Racket don’t follow the rule because they are old and possibly from Scheme. (Keywords are especially good in non-extensible locations because they are in a distinct syntactic category from expressions, unlike in many other languages with keywords, where keywords are “self-quoting”.)"
        }
      ]
    },
    {
      "conversation_id": "438",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jana: wow, thanks!\nJana: (although nw, my server side code is untyped, keeping the bookmark around)\nJana: :bow:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 0.38,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jana"
        ]
      },
      "timeline": [
        {
          "user": "Jana",
          "timestamp": "2019-04-04T05:11:42.266900",
          "text": "wow, thanks!"
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-04T05:12:01.267100",
          "text": "(although nw, my server side code is untyped, keeping the bookmark around)"
        },
        {
          "user": "Jana",
          "timestamp": "2019-04-04T05:12:05.267300",
          "text": ":bow:"
        }
      ]
    },
    {
      "conversation_id": "439",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: Is there a way to add numbered captions (or ‘counters’) with a frame to the source code (using [CODE]) in scribble? (The effects I want is just like the picture shown below)\nKami: I guess you could wrap the codeblock call in your own function with a counter in scope\nShavon: Loma i think what Kami is getting to is that it's possible but you don't get it out of the box.\nLoma: Yes I see. I just thought there might be some high level API that gave me this ability.\nShavon: Loma wish there was. I think everyone has their own features for their scribble documents - some have made it into pkgs but there has not been, afaik, a concerted effort to have a scribble-extras library to do these things.\nKami: Something like this (except I don't remember the exact use for codeblock, this might be wrong but you get the idea): [CODE_BLOCK]\nKami: Obviously, if such feature is really interesting to a lot of people, somebody can make a Pull Request and add it to the standard, but as Shavon said, a [CODE] lib might be a good experimenting ground too!\nLoma: Appreciate for your detailed source!\nKami: You're welcome :slightly_smiling_face: It's obviously going to crash as codeblock is not used like this, but anyways...\nKami: Also, my code is a global state. Using the function in different scribble modules is gonna continue counting up from where it was in the previous document. If one needs a *per-document* counter, we need to make something a bit more complex, I guess with a [CODE].\nKristeen: You should copy this conversation into a blog post\nDeneen: Agreed! I started taking down some notes but there are enough questions I still have at the boundary that it would take some time to absorb.\nKristeen: Really I think just copy-and-paste would make an illuminating post",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 13,
        "duration_minutes": 142.07,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "need to",
          "should"
        ],
        "decision_keywords": [
          "agreed"
        ],
        "participants": [
          "Deneen",
          "Kami",
          "Kristeen",
          "Loma",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-04-04T08:05:21.269200",
          "text": "Is there a way to add numbered captions (or ‘counters’) with a frame to the source code (using `codeblock`) in scribble? (The effects I want is just like the picture shown below)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-04T08:08:21.270100",
          "text": "I guess you could wrap the codeblock call in your own function with a counter in scope"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-04T08:09:37.271400",
          "text": "<@Loma> i think what <@Kami> is getting to is that it's possible but you don't get it out of the box."
        },
        {
          "user": "Loma",
          "timestamp": "2019-04-04T08:10:56.273100",
          "text": "Yes I see. I just thought there might be some high level API that gave me this ability."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-04T08:12:17.274400",
          "text": "<@Loma> wish there was. I think everyone has their own features for their scribble documents - some have made it into pkgs but there has not been, afaik, a concerted effort to have a scribble-extras library to do these things."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-04T08:15:19.275300",
          "text": "Something like this (except I don't remember the exact use for codeblock, this might be wrong but you get the idea):\n```\n(define numbered-codeblock\n  (let ([counter 0])\n    (lambda (title code-text)\n      (set! counter (add1 counter))\n      (codeblock\n        #:title (format \"Listing ~a: ~a\" counter title)\n        code-text))))\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-04T08:17:48.276700",
          "text": "Obviously, if such feature is really interesting to a lot of people, somebody can make a Pull Request and add it to the standard, but as <@Shavon> said, a `scribble-extra` lib might be a good experimenting ground too!"
        },
        {
          "user": "Loma",
          "timestamp": "2019-04-04T08:20:08.277700",
          "text": "Appreciate for your detailed source!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-04T08:23:51.278000",
          "text": "You're welcome :slightly_smiling_face: It's obviously going to crash as codeblock is not used like this, but anyways..."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-04T08:28:35.279900",
          "text": "Also, my code is a global state. Using the function in different scribble modules is gonna continue counting up from where it was in the previous document. If one needs a *per-document* counter, we need to make something a bit more complex, I guess with a `syntax-parameter`."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-04T10:07:35.280200",
          "text": "You should copy this conversation into a blog post"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-04T10:26:57.280400",
          "text": "Agreed! I started taking down some notes  but there  are enough questions I still have at the boundary that it would take some time to absorb."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-04T10:27:25.280600",
          "text": "Really I think just copy-and-paste would make an illuminating post"
        }
      ]
    },
    {
      "conversation_id": "440",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: I realized I never answered this. identifier-transformer-binding is just identifier-binding at phase 1 (rather than phase 0).\nDeneen: Yeah! I saw this last night. I only have vague intuition about phases as “eh, they stratify expansion passes.” As you know (for anyone following along) there’s really readable documentation here: <[URL]\nDeneen: I’m working on this along with annotating it with some more examples\nDeneen: One thing I wish I could assemble would be a systematic history of the development of the Racket macro system (dating back to Scheme, I suppose) with each different feature in boxes and links to the corresponding mailing list posts, papers, blog posts, commits, etc…",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 364.68,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Deneen",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-04T10:48:55.282200",
          "text": "I realized I never answered this. identifier-transformer-binding is just identifier-binding at phase 1 (rather than phase 0)."
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-04T10:50:13.282400",
          "text": "Yeah! I saw this last night. I only have vague intuition about phases as “eh, they stratify expansion  passes.” As you know (for anyone following along) there’s really readable documentation here: <https://docs.racket-lang.org/guide/phases.html>"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-04T11:04:11.282600",
          "text": "I’m working on this along with annotating it with some more examples"
        },
        {
          "user": "Deneen",
          "timestamp": "2019-04-04T16:53:36.285000",
          "text": "One thing I wish I could assemble would be a systematic history of the development of the Racket macro system (dating back to Scheme, I suppose) with each different feature in boxes and links to the corresponding mailing list posts, papers, blog posts, commits, etc…"
        }
      ]
    },
    {
      "conversation_id": "441",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: FYI (with thanks to Amira for bringing the existence of `typed/web-server/[URL] to my attention), some of its types were out-of-date, particularly for cookie-related functions. I've made updates in <[URL]\nMichelina: Madelaine ack, I fell behind with your work in web-server -- I made some changes to the various response-generating functions, too (not the same as your changes) and ran into conflicts\nMichelina: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 678.42,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Madelaine",
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-04-04T13:45:56.282800",
          "text": "FYI (with thanks to <@Amira> for bringing the existence of `typed/web-server/http` to my attention), some of its types were out-of-date, particularly for cookie-related functions. I've made updates in <https://github.com/racket/typed-racket/pull/817>"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-05T01:00:59.288000",
          "text": "<@Madelaine> ack, I fell behind with your work in web-server -- I made some changes to the various response-generating functions, too (not the same as your changes) and ran into conflicts"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-05T01:04:21.288200",
          "text": "<https://github.com/racket/web-server/pull/62>"
        }
      ]
    },
    {
      "conversation_id": "442",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: Also, apparently I didn’t read this: &gt; More specifically, the typesetting of identifiers in the above grammar is significant. For example, the second case for expr is a syntax-object list whose first element is an identifier, where the identifier’s lexical information specifies a binding to the #%plain-lambda of the racket/base language (i.e., the identifier is free-identifier=? to one whose binding is #%plain-lambda).",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Deneen"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-04-04T14:39:55.283600",
          "text": "Also, apparently I didn’t read this:\n&gt;  More specifically, the typesetting of identifiers in the above grammar is significant. For example, the second case for expr is a syntax-object list whose first element is an identifier, where the identifier’s lexical information specifies a binding to the #%plain-lambda of the racket/base language (i.e., the identifier is free-identifier=? to one whose binding is #%plain-lambda)."
        }
      ]
    },
    {
      "conversation_id": "443",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: No teapot? <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-04-05T09:03:10.289200",
          "text": "No teapot? <https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418>"
        }
      ]
    },
    {
      "conversation_id": "444",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Shavon what's the easiest way to replicate the bug in #2018?\nShavon: Unfortunately there's no *easy* way unless you have hardware access. Do you have access to any non intel hardware?\nShavon: Alternatively you can setup a qemu environment. I can help with that.\nShavon: For that you'd probably need access to linux or linux through docker.\nShavon: Kristeen ^^^\nShavon: It's almost dinner time around here so I will soon have to go feed the children but when I come back we get repro this together.\nKristeen: linux is not a problem :slightly_smiling_face:\nKristeen: I don't have any non-intel hardware\nJulia: Also the correct response text is \"OK\" not \"Okay\" and I am willing to die on that hill. :smile:\nJulia: So I like that part.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 35.62,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-04-05T11:15:22.290500",
          "text": "<@Shavon> what's the easiest way to replicate the bug in #2018?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-05T11:16:59.291200",
          "text": "Unfortunately there's no *easy* way unless you have hardware access. Do you have access to any non intel hardware?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-05T11:18:36.291800",
          "text": "Alternatively you can setup a qemu environment. I can help with that."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-05T11:19:22.292400",
          "text": "For that you'd probably need access to linux or linux through docker."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-05T11:20:40.292600",
          "text": "<@Kristeen> ^^^"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-05T11:21:26.293400",
          "text": "It's almost dinner time around here so I will soon have to go feed the children but when I come back we get repro this together."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-05T11:29:31.293600",
          "text": "linux is not a problem :slightly_smiling_face:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-05T11:29:47.293900",
          "text": "I don't have any non-intel hardware"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-05T11:50:27.294000",
          "text": "Also the correct response text is \"OK\" not \"Okay\" and I am willing to die on that hill. :smile:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-05T11:50:59.294200",
          "text": "So I like that part."
        }
      ]
    },
    {
      "conversation_id": "445",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Does anyone know why this program actually works?: [CODE_BLOCK]\nMarcelina: Especially since this one doesn't (which is what I would have expected): [CODE_BLOCK]\nMarcelina: The difference being the second to last line [CODE] vs [CODE].\nMarcelina: About the only thing I was able to come up with was that it was the result of a compiler optimization?\nPriscila: If so have you tried on both normal Racket and on Racket-on-Chez?\nPriscila: Also what expression do I use to see the problem?\nMarcelina: Priscila I don't currently have a racket-on-chez build running on my system. But I _have_ tried it with older versions of racket to the sameresults.\nMarcelina: Umm...in the repl you could run: [CODE]\nMarcelina: Which should run the editor submodule.\nPriscila: Does it help if you give [CODE] an explicit namespace?\nPriscila: Hmm - the evaluated expression is just a reference. How can that go wrong?!?\nPriscila: Does [CODE] mean you are only attaching the module at phase 1 -\nPriscila: and the evaluation takes place at phase 0?\nMarcelina: Priscila So, if you don't give [CODE] a namespace, it defaults to [CODE], which I set explicitly to a new base namespace.\nMarcelina: Also yes, [CODE] only visits the module, not instantiate it. (I might have that backwards...but yes, it only runs the phase 1 stuffs.)\nPriscila: Now I get why you are surprised the first program works.\nMarcelina: Ya, basically. I suspect Clarinda might know something.\nMarcelina: If you have a racket-on-chez build on your current system, wanna see what it does?\nPriscila: Haven't yet - but this is a nice excuse to install it.\nMarcelina: Oh. You can install it these days without compiling it yourself?\nMarcelina: That's pretty cool.\nMarcelina: I mean, its certainly 'related' to compiler optimizations. (Given that [CODE] can be easily compiled to just [CODE]...(at least in this context), but the real question is why are constants run...\nPriscila: (define y (begin 1 2))\nPriscila: works fine\nMarcelina: Yup. Because that get's compiled to [CODE]\nMarcelina: (Which you can test by using [CODE]\nMarcelina: Basically: [CODE_BLOCK]\nMarcelina: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 28,
        "duration_minutes": 32.95,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Marcelina",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T12:53:36.295200",
          "text": "Does anyone know why this program actually works?:\n\n```\n#lang racket\n\n(module* editor racket\n  (require syntax/location)\n  (define this-ns (current-namespace))\n  (define ns (make-base-namespace))\n  (parameterize ([current-namespace ns])\n    (namespace-attach-module-declaration this-ns (quote-module-path \"..\" foo))\n    (namespace-require/expansion-time (quote-module-path \"..\" foo))\n    (eval 'y)))\n\n(module* foo racket\n  (define y (let () 8))\n  (provide y))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T12:53:58.295600",
          "text": "Especially since this one doesn't (which is what I would have expected):\n\n```\n#lang racket\n\n(module* editor racket\n  (require syntax/location)\n  (define this-ns (current-namespace))\n  (define ns (make-base-namespace))\n  (parameterize ([current-namespace ns])\n    (namespace-attach-module-declaration this-ns (quote-module-path \"..\" foo))\n    (namespace-require/expansion-time (quote-module-path \"..\" foo))\n    (eval 'y)))\n\n(module* foo racket\n  (define y (let () (writeln \"running\") 8))\n  (provide y))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T12:55:05.296200",
          "text": "The difference being the second to last line `(define y (let () 8)` vs `(let () (writeln \"running\") 8)`."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T12:55:26.296700",
          "text": "About the only thing I was able to come up with was that it was the result of a compiler optimization?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T12:56:41.297900",
          "text": "If so have you tried on both normal Racket and on Racket-on-Chez?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T12:58:48.298700",
          "text": "Also what expression do I use to see the problem?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:01:13.299700",
          "text": "<@Priscila> I don't currently have a racket-on-chez build running on my system. But I _have_ tried it with older versions of racket to the sameresults."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:01:38.300400",
          "text": "Umm...in the repl you could run: `(require (submod \"&lt;filename.rkt&gt;\" editor))`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:01:51.300800",
          "text": "Which should run the editor submodule."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:04:04.301200",
          "text": "Does it help if you give `eval` an explicit namespace?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:05:33.302100",
          "text": "Hmm - the evaluated expression is just a reference. How can that go wrong?!?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:07:00.303700",
          "text": "Does  `(namespace-require/expansion-time (quote-module-path \"..\" foo))` mean you are only attaching the module at phase 1 -"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:07:09.304000",
          "text": "and the evaluation takes place at phase 0?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:07:30.304200",
          "text": "<@Priscila> So, if you don't give `eval` a namespace, it defaults to `current-namespace`, which I set explicitly to a new base namespace."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:08:25.305000",
          "text": "Also yes, `namespace-require/expansion-time` only visits the module, not instantiate it. (I might have that backwards...but yes, it only runs the phase 1 stuffs.)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:08:42.305500",
          "text": "Now I get why you are surprised the first program works."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:09:05.306100",
          "text": "Ya, basically. I suspect <@Clarinda> might know something."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:09:22.306600",
          "text": "If you have a racket-on-chez build on your current system, wanna see what it does?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:10:14.307100",
          "text": "Haven't yet - but this is a nice excuse to install it."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:13:09.307500",
          "text": "Oh. You can install it these days without compiling it yourself?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:13:12.307700",
          "text": "That's pretty cool."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:19:56.308800",
          "text": "I mean, its certainly 'related' to compiler optimizations. (Given that `(let () 8)` can be easily compiled to just `8`...(at least in this context), but the real question is why are constants run..."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:24:24.309700",
          "text": "(define y (begin 1 2))"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-05T13:24:27.309900",
          "text": "works fine"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:25:24.310300",
          "text": "Yup. Because that get's compiled to `(define-values (x) 2)`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:25:31.310600",
          "text": "(Which you can test by using `raco decompile`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:26:18.311100",
          "text": "Basically:\n\n```\n(module simp racket\n  (#%plain-module-begin\n   (define x (begin 1 2))))\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-05T13:26:33.311300",
          "text": "```\n$ raco make simp.rkt &amp;&amp; raco decompile simp.rkt\n(module simp ....\n  (require (lib \"racket/main.rkt\"))\n  (provide)\n  (define-values (x) '2)\n  (void))\n```"
        }
      ]
    },
    {
      "conversation_id": "446",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I think [URL] doesn't even send the status message\nLillian: Since the Collatz problem is limited to positive integers, another improvement is to avoid [CODE] and [CODE], because you can divide by 2 with [CODE]: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 1212.32,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-04-05T14:27:41.311600",
          "text": "I think http/2 doesn't even send the status message"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-04-06T10:40:00.324800",
          "text": "Since the Collatz problem is limited to positive integers, another improvement is to avoid `/` and `quotient`, because you can divide by 2 with `arithmetic-shift`:\n```\n(define (collatz-faster number)\n  (let loop ([number number][step-count 0])\n    (cond\n      [(= number 1)  step-count]\n      [else (loop (if (even? number)\n                      (arithmetic-shift number -1)\n                      (add1 (* number 3))) (add1 step-count))])))\n```"
        }
      ]
    },
    {
      "conversation_id": "447",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Keturah: I am mentoring the Racket track at <[URL] I am working with a student to solve this problem, described here <[URL] Here is how I'd solve the problem: <[URL] My student first submitted a solution similar to mine, but then thought this is better: [CODE_BLOCK] My initial thought is that this code is less clear (maybe that has more to do with my own lack of familiarity with continuations?). Is this a good solution? My view may also be tainted from this article: <[URL] I understand that [CODE] is not the same as [CODE] or [CODE], but it still seems, to me, that this is overkill for the problem. Am I wrong in thinking this?\nMai: IMO, it’s less clear for sure. It’s also less performant than the straightforward implementation that didn’t use all these fancy features: [CODE_BLOCK] Re: continuation, I would use it only when the alternative solutions require significant code restructuring that I feel it’s not worth making the changes.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 80.25,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Keturah",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Keturah",
          "timestamp": "2019-04-06T07:23:57.317900",
          "text": "I am mentoring the Racket track at <http://exercism.io>. I am working with a student to solve this problem, described here <https://github.com/exercism/racket/tree/master/exercises/collatz-conjecture>. Here is how I'd solve the problem: <https://github.com/timotheosh/exercism-exercises/blob/master/racket/collatz-conjecture/collatz-conjecture.rkt>\n\nMy student first submitted a solution similar to mine, but then thought this is better:\n``` \n(define (collatz n)\n  (let/ec return\n    (for/fold ([num n])\n              ([steps (in-naturals)])     \n      (cond [(= num 1) (return steps)]\n            [(even? num) (quotient num 2)]\n            [else (add1 (* num 3))]))))\n```\nMy initial thought is that this code is less clear (maybe that has more to do with my own lack of familiarity with continuations?). Is this a good solution?\n\nMy view may also be tainted from this article: <http://okmij.org/ftp/continuations/against-callcc.html>\n\nI understand that `call/cc` is not the same as `call/ec` or `let/ec`, but it still seems, to me, that this is overkill for the problem. Am I wrong in thinking this?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-04-06T08:44:12.324700",
          "text": "IMO, it’s less clear for sure. It’s also less performant than the straightforward implementation that didn’t use all these fancy features:\n\n```\n(define (collatz n)\n  (let loop ([n n] [steps 0])\n    (cond\n      [(= n 1) steps]\n      [(even? n) (loop (quotient n 2) (add1 steps))]\n      [else (loop (add1 (* n 3)) (add1 steps))])))\n```\n\nRe: continuation, I would use it only when the alternative solutions require significant code restructuring that I feel it’s not worth making the changes."
        }
      ]
    },
    {
      "conversation_id": "448",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Hello Racketeers! When I want to assign a syntax-class to a syntax identifier, I can use [CODE]. If I want to access an attribute of that class, I can use [CODE]. But is there another way, without using the dot notation? Something like [CODE]? The thing is, I'm constructing a macro from a macro, so I don't know the identifier's exact name, it's inside a syntax variable.\nKami: Right now I'm using [CODE] to artificially create the dot notation, but I feel it's a bit hacky.\nKami: Elin As usual, you're my savior :wink: Thanks for that piece of code! I guess it would make a good PR!\nKami: I never made template metafunctions before. It looks powerful but I guess a bit hard for the brain at times...\nKami: Looks good to me. I don't know why you're checking identifiers this way though. Was there a catch using [CODE] ?\nKami: Makes sense\nKami: I'm generating a macro which has some parts that, sometimes, need to match nothing (it's inside an [CODE] sequence, and I want some of the alternatives to never match). The best way would be to generate no code at all, but it's really difficult to handle syntax attributes with a #f value (need to add [CODE] everywhere), so I decided to take a simpler approach and generate a pattern that will match nothing. I ended up with [CODE], which works like a charm. Any idea about a better way to do this?\nKami: In other words, I'd like to generate a syntax object that has no effect at all and will be ignored (but can still be passed around so that the information that this particular piece of syntax should match nothing is not lost)\nKami: First thing I tried was [CODE], but I'm not in a head-pattern ([CODE] does not work)\nKami: I guess the experimental templates could help me with that, but I didn't try them yet\nKami: What I wanna do: Let's say I have a syntax list with patterns, and sometimes [CODE] values: [CODE] I'd like to do something like [CODE] that would ignore [CODE] values.\nKami: My temporary solution is to replace [CODE] with [CODE]: [CODE]\nKami: Which is not what I would call \"elegant\"\nKami: I guess another way would be to filter out the falsy values, but that's inconvenient\nKami: [CODE] works perfectly! I should have thought about that :slightly_smiling_face:\nGonzalo: Kami I’m not sure I’m totally understanding what you’re trying to do, but [CODE] is a pattern that always backtracks.\nKami: In fact, I don't really want to backtrack, I'm just generating a macro, but some patterns of the macro should be ignored and match nothing. The best way would be to have a non-syntax value (say, [CODE]) that means \"don't generate code here\", but handling syntax attributes with non-syntax values is hard and makes the macro difficult to read, because you need to add [CODE] calls everywhere to protect from those [CODE] values. It becomes especially unhandy when you have ellipsis patterns. I have enough [CODE] in my code already.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 17,
        "duration_minutes": 2452.75,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "create",
          "decide",
          "let's",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Gonzalo",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-04-06T11:45:33.328400",
          "text": "Hello Racketeers! When I want to assign a syntax-class to a syntax identifier, I can use `(~var my-element my-class)`. If I want to access an attribute of that class, I can use `(attribute my-element.my-attr)`. But is there another way, without using the dot notation? Something like `(~attribute my-element my-attr)`? The thing is, I'm constructing a macro from a macro, so I don't know the identifier's exact name, it's inside a syntax variable."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-06T11:46:47.329500",
          "text": "Right now I'm using `(format-id #'my-element \"~a.my-attr\" #'my-element)` to artificially create the dot notation, but I feel it's a bit hacky."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-06T12:58:05.333800",
          "text": "<@Elin> As usual, you're my savior :wink: Thanks for that piece of code! I guess it would make a good PR!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-06T12:59:15.334400",
          "text": "I never made template metafunctions before. It looks powerful but I guess a bit hard for the brain at times..."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-06T14:36:57.336600",
          "text": "Looks good to me. I don't know why you're checking identifiers this way though. Was there a catch using `:id` ?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-06T15:10:25.337700",
          "text": "Makes sense"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:22:46.341400",
          "text": "I'm generating a macro which has some parts that, sometimes, need to match nothing (it's inside an `~alt` sequence, and I want some of the alternatives to never match). The best way would be to generate no code at all, but it's really difficult to handle syntax attributes with a #f value (need to add `~?` everywhere), so I decided to take a simpler approach and generate a pattern that will match nothing. I ended up with `(~not (~or x:expr x:keyword))`, which works like a charm. Any idea about a better way to do this?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:25:48.343200",
          "text": "In other words, I'd like to generate a syntax object that has no effect at all and will be ignored (but can still be passed around so that the information that this particular piece of syntax should match nothing is not lost)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:28:32.344300",
          "text": "First thing I tried was `(~seq)`, but I'm not in a head-pattern (`(~alt (~seq))` does not work)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:31:48.345100",
          "text": "I guess the experimental templates could help me with that, but I didn't try them yet"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:34:51.347900",
          "text": "What I wanna do:\nLet's say I have a syntax list with patterns, and sometimes `#f` values: `(define elements (quote-syntax ((~optional x) (~once y) #f (~once z) #f)))`\nI'd like to do something like `(~alt (~@ . elements))` that would ignore `#f` values."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:37:04.348800",
          "text": "My temporary solution is to replace `#f` with `(~not (~or x:expr x:keyword))`:\n`(define elements (quote-syntax ((~optional x) (~once y) (~not (~or x:expr x:keyword)) (~once z) (~not (~or x:expr x:keyword)))))`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:37:42.349200",
          "text": "Which is not what I would call \"elegant\""
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T08:40:24.350600",
          "text": "I guess another way would be to filter out the falsy values, but that's inconvenient"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-07T09:12:58.352400",
          "text": "`(~not _)` works perfectly! I should have thought about that :slightly_smiling_face:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-07T23:06:04.356500",
          "text": "<@Kami> I’m not sure I’m totally understanding what you’re trying to do, but `{~fail}` is a pattern that always backtracks."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T04:38:18.358600",
          "text": "In fact, I don't really want to backtrack, I'm just generating a macro, but some patterns of the macro should be ignored and match nothing. The best way would be to have a non-syntax value (say, `#f`) that means \"don't generate code here\", but handling syntax attributes with non-syntax values is hard and makes the macro difficult to read, because you need to add `~?` calls everywhere to protect from those `#f` values. It becomes especially unhandy when you have ellipsis patterns. I have enough `(~? (~@ . (element ...)))` in my code already."
        }
      ]
    },
    {
      "conversation_id": "449",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: That’s what I’ve done, but you’re right, it would be much more convenient for macro-generating macros to be able to do something like [CODE].\nElin: Maybe you can define [CODE] as a template-metafunction: [CODE_BLOCK] Using it to generate a nested attribute name: [CODE_BLOCK] Using it with ellipses for multiple nested attributes: [CODE_BLOCK]\nElin: Would this be the best way to do it? <[URL]\nElin: [CODE] wasn’t already imported into [CODE], and I didn’t want to change that",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 138.1,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-06T12:44:45.331300",
          "text": "That’s what I’ve done, but you’re right, it would be much more convenient for macro-generating macros to be able to do something like `(~dot my-element my-attr)`."
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-06T12:53:29.332700",
          "text": "Maybe you can define `~dot` as a template-metafunction:\n```\n#lang racket/base\n(require racket/syntax\n         racket/string\n         syntax/parse\n         syntax/parse/experimental/template)\n\n(define-template-metafunction ~dot\n  (lambda (stx)\n    (syntax-parse stx\n      [(_ x:id y:id ...)\n       (format-id #'x \"~a~a\" #'x\n                  (string-append*\n                   (for/list ([y (in-list (attribute y))])\n                     (format \".~s\" (syntax-e y))))\n                  #:source stx\n                  #:props stx)])))\n```\nUsing it to generate a nested attribute name:\n```\n(syntax-parse #'(m my-element my-attr)\n  [(m elem attr)\n   #'(attribute {~dot elem attr})])\n```\nUsing it with ellipses for multiple nested attributes:\n```\n(syntax-parse #'(m my-element my-attr1 my-attr2 my-attr3)\n  [(m elem attr ...)\n   #'(begin (define {~dot elem attr} 43) ...)])\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-06T14:17:39.335800",
          "text": "Would this be the best way to do it? <https://github.com/AlexKnauth/racket/commit/389aea4eff6b6274c17512db813ed1f664ac3096>"
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-06T15:02:51.337400",
          "text": "`syntax/parse` wasn’t already imported into `syntax/parse/experimental/template`, and I didn’t want to change that"
        }
      ]
    },
    {
      "conversation_id": "450",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: Technically Racket doesn't have undelimited continuations.\nEileen: Using [CODE] is more of an imperative style for sure. I feel in a majority of cases where iteration is occurring you should try and use the [CODE] family of macros. For this specific case where you are returning the number of steps and not something out of the accumulator [CODE] seems to be the cleanest way to write it using [CODE], unless you make a copy of the [CODE] in the accumulator which would add some messiness.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 20.33,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-04-06T15:11:35.337800",
          "text": "Technically Racket doesn't have undelimited continuations."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-06T15:31:55.338000",
          "text": "Using `let/ec` is more of an imperative style for sure.  I feel in a majority of cases where iteration is occurring you should try and use the `for` family of macros.\n\nFor this specific case where you are returning the number of steps and not something out of the accumulator `let/ec` seems to be the cleanest way to write it using `for/fold`, unless you make a copy of the `steps` in the accumulator which would add some messiness."
        }
      ]
    },
    {
      "conversation_id": "451",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Match nothing, like [CODE] or [CODE] or [CODE] or [CODE] in an EH-pat position?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-07T09:08:57.351700",
          "text": "Match nothing, like `{~not _}` or `{~or*}` or  `{~fail #:when #t}` or `{~between _ 0 0}` in an EH-pat position?"
        }
      ]
    },
    {
      "conversation_id": "452",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loma: I thought [CODE] would be interpreted same as [CODE], but it turns out not true: my scribble code [CODE] becomes [CODE] in the generated tex file. Why there is a [CODE] whenever I use a symbol [CODE] or [CODE]?\nPriscila: Loma Not 100% sure, but my guess is that LaTeX might be tempted to insert a line and/or space between [CODE] and [CODE] if the [CODE] is not there.\nLoma: Thanks, I will test them out later",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 637.25,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Loma",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Loma",
          "timestamp": "2019-04-07T21:18:42.355700",
          "text": "I thought `@tt` would be interpreted same as `\\texttt`, but it turns out not true: my scribble code `@tt{set!}` becomes `\\Scribtexttt{set{\\hbox{\\texttt{!}}}}` in the generated tex file. Why there is a `\\hbox` whenever I use a symbol `?` or `!`?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-08T00:47:28.358000",
          "text": "<@Loma> Not 100% sure, but my guess is that LaTeX might be tempted to insert a line and/or space between `set` and `!` if the `hbox` is not there."
        },
        {
          "user": "Loma",
          "timestamp": "2019-04-08T07:55:57.359400",
          "text": "Thanks, I will test them out later"
        }
      ]
    },
    {
      "conversation_id": "453",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Kristeen let me know when you are around. I found a way for you to repro 2018 easily. :slightly_smiling_face:\nKristeen: around now\nShavon: I haven't gotten around to writing all the details of running 2018 under qemu (which is basically what's done with the [CODE] shell script - but for your specific environment). I have however managed to rent an aarch64 machine so I can run this on the real deal. If you want to reproduce it, I can give you access. I need to send you a key. One second.\nKristeen: I see it, but I may try on qemu first",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 388.42,
        "contains_question": false,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-04-08T03:09:39.358500",
          "text": "<@Kristeen> let me know when you are around. I found a way for you to repro 2018 easily. :slightly_smiling_face:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T09:29:13.359900",
          "text": "around now"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-08T09:36:36.360100",
          "text": "I haven't gotten around to writing all the details of running 2018 under qemu (which is basically what's done with the `racket/.gitlab` shell script - but for your specific environment). I have however managed to rent an aarch64 machine so I can run this on the real deal. If you want to reproduce it, I can give you access. I need to send you a  key. One second."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T09:38:04.360300",
          "text": "I see it, but I may try on qemu first"
        }
      ]
    },
    {
      "conversation_id": "454",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Oh, right, the [CODE] is unnecessary just [CODE] is fine\nGonzalo: Kami I’m a little confused. If you want a pattern that matches nothing successfully, you can use [CODE], [CODE], or [CODE]. If you want a pattern that matches nothing unsuccessfully, you can use [CODE]. Your solution, [CODE], is of the latter type, so I would think you’d want something like [CODE].\nKami: I'm using [CODE] which allows me to accept everything that matches the defined alternatives, and reject all the rest.\nGonzalo: You could just use [CODE] there, and it would do the same thing. Both of them will cause the parser to backtrack to the nearest choice point, which in this case will just try the next option in the [CODE].\nKami: Ok, I see!\nKami: I didn't knew exactly how ~alt worked inside.\nKami: Well [CODE] will allow to put an error message, so that's better! Thanks!\nGonzalo: syntax/parse is fully backtracking unless you explicitly cut using [CODE], so every parser that can match in multiple ways (i.e. anything that uses [CODE] or [CODE]) will exhaustively try every option before the parse fails.\nGonzalo: There isn’t any difference between two kinds of failure in syntax/parse, except for error reporting purposes if all branches fail.\nKami: Wow, that clarifies a lot of assumptions I had about syntax/parse.\nGonzalo: The full backtracking by default is very useful, but often it isn’t really what you mean, so putting [CODE] and/or [CODE] in the right places can dramatically improve your macro’s error messages.\nKami: I didn't get to use [CODE] yet, but I guess it'll come handy when I start having explicit error messages everywhere in my macros.\nGonzalo: The [CODE] option for syntax classes is also extremely useful, and I find it is usually what you want.\nKami: I'll check them out, thanks! Also, if you wonder what I'm working on to have such issues, the code is there: <[URL]\nKami: It's only 200 lines long, with the tests, but it's pretty dense, at least for me.\nKami: Gonzalo There's one thing I don't quite get though: When using [CODE], the ellipsis is \"eaten\" by the [CODE] clause. I can refer to [CODE] without using the triple-dots, while [CODE] requires them. Do you know how the ellipsis gets \"assimilated\" like that? I'm just being curious.\nKami: I didn't check the implementation code, but I suppose it eats up the depth of its arguments or something\nElin: I would play around with using [CODE] and use that for a [CODE]-like pattern\nKami: Yeah that's what I'm doing. I understand how it works and what it does. I just wonder what happens under the hood.\nKami: I'd say a construction from primitives like ~or\nKami: But I'm just to lazy to check the code :stuck_out_tongue:\nGonzalo: Kami Ellipsis-head patterns are special. You should think of [CODE] + [CODE]/[CODE]/[CODE] as being sort of a single syntactic form, not two separate patterns nested inside one another.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 22,
        "duration_minutes": 315.6,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Gonzalo",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-08T07:32:04.358800",
          "text": "Oh, right, the `{~fail #:when #t}` is unnecessary just `{~fail}` is fine"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T10:55:02.365300",
          "text": "<@Kami> I’m a little confused. If you want a pattern that matches nothing successfully, you can use `{~and}`, `{~do}`, or `{~bind}`. If you want a pattern that matches nothing unsuccessfully, you can use `{~fail}`. Your solution, `{~not _}`, is of the latter type, so I would think you’d want something like `{~fail}`."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T10:57:07.365500",
          "text": "I'm using `(~alt pattern1 pattern2 (~not _) pattern3 (~not _) ...etc)` which allows me to accept everything that matches the defined alternatives, and reject all the rest."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T10:58:47.367700",
          "text": "You could just use `{~fail}` there, and it would do the same thing. Both of them will cause the parser to backtrack to the nearest choice point, which in this case will just try the next option in the `~alt`."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T10:58:58.367900",
          "text": "Ok, I see!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T10:59:28.368100",
          "text": "I didn't knew exactly how ~alt worked inside."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T10:59:57.369000",
          "text": "Well `(~fail)` will allow to put an error message, so that's better! Thanks!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T11:01:41.371400",
          "text": "syntax/parse is fully backtracking unless you explicitly cut using `~!`, so every parser that can match in multiple ways (i.e. anything that uses `~alt` or `~or*`) will exhaustively try every option before the parse fails."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T11:02:28.372700",
          "text": "There isn’t any difference between two kinds of failure in syntax/parse, except for error reporting purposes if all branches fail."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:02:41.372900",
          "text": "Wow, that clarifies a lot of assumptions I had about syntax/parse."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T11:04:21.375000",
          "text": "The full backtracking by default is very useful, but often it isn’t really what you mean, so putting `~!` and/or `~commit` in the right places can dramatically improve your macro’s error messages."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:05:18.375900",
          "text": "I didn't get to use `~!` yet, but I guess it'll come handy when I start having explicit error messages everywhere in my macros."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T11:05:34.376400",
          "text": "The `#:commit` option for syntax classes is also extremely useful, and I find it is usually what you want."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:10:44.376600",
          "text": "I'll check them out, thanks!\nAlso, if you wonder what I'm working on to have such issues, the code is there: <https://github.com/euhmeuh/rilouworld/blob/master/private/bundle/expander.rkt>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:12:11.377100",
          "text": "It's only 200 lines long, with the tests, but it's pretty dense, at least for me."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:24:52.379800",
          "text": "<@Gonzalo> There's one thing I don't quite get though: When using `(~alt (~optional &lt;foo&gt;) &lt;bar&gt;) ...`, the ellipsis is \"eaten\" by the `~optional` clause. I can refer to `&lt;foo&gt;` without using the triple-dots, while `&lt;bar&gt;` requires them. Do you know how the ellipsis gets \"assimilated\" like that? I'm just being curious."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:42:36.381600",
          "text": "I didn't check the implementation code, but I suppose it eats up the depth of its arguments or something"
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-08T11:44:11.382900",
          "text": "I would play around with using `({~alt {~once pat1} {~once pat2} etc.} ...)` and use that for a `list-no-order`-like pattern"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:47:18.383600",
          "text": "Yeah that's what I'm doing. I understand how it works and what it does. I just wonder what happens under the hood."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:47:49.384100",
          "text": "I'd say a construction from primitives like ~or"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-08T11:48:30.384700",
          "text": "But I'm just to lazy to check the code :stuck_out_tongue:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T12:47:40.386100",
          "text": "<@Kami> Ellipsis-head patterns are special. You should think of `~alt` + `~optional`/`~once`/`~between` as being sort of a single syntactic form, not two separate patterns nested inside one another."
        }
      ]
    },
    {
      "conversation_id": "455",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: A simpler example of this “eating ellipses” behavior also happens with [CODE].",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-08T11:36:53.380600",
          "text": "A simpler example of this “eating ellipses” behavior also happens with `~once`."
        }
      ]
    },
    {
      "conversation_id": "456",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Essentially, ellipsis-head patterns are designed to handle common scenarios of parsing “options” in macros, where certain options may appear at most once, but can appear in any order.\nGonzalo: So when you use [CODE], that is saying to syntax/parse “for this particular [CODE] sequence, this particular pattern needs to parse exactly once, but it can appear anywhere in that sequence”.\nGonzalo: So [CODE] and [CODE] cooperate with one another. They aren’t really separable.\nGonzalo: [CODE] is just like [CODE], but it can also parse zero times.\nGonzalo: By the way, it is possible to make [CODE] not “eat” the ellipsis by putting it into a context where it is parsed as a head pattern instead of an ellipsis-head pattern. So, for example, if you were to write [CODE], then [CODE] would be bound with ellipsis depth 1. But this parser is essentially guaranteed to be a bug, since [CODE] is an ellipsis-head pattern that can match no terms. In theory, such a pattern could cause parsing to never terminate, in the same way that [CODE] will never terminate because it will match the empty term forever. But syntax/parse helpfully makes it a runtime error for an ellipsis-head pattern to match nothing, so at least your program just crashes instead. :)\nGonzalo: (Though I think Racket actually makes [CODE] an error, too, so similar idea.)\nGonzalo: In any case, the [CODE] isn’t actually helpful there, since you could just write [CODE] and get the behavior you probably actually wanted, since the [CODE] already includes the notion that the match might not succeed, and it should try one of the other branches, instead.\nJulia: Kristeen Boris Travis is stuck on a couple build jobs so I tried directly locally and <[URL] seems not able to connect (same w/o TLS)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 222.67,
        "contains_question": false,
        "action_keywords": [
          "build",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T12:48:45.387300",
          "text": "Essentially, ellipsis-head patterns are designed to handle common scenarios of parsing “options” in macros, where certain options may appear at most once, but can appear in any order."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T12:50:02.388200",
          "text": "So when you use `~once`, that is saying to syntax/parse “for this particular `~alt` sequence, this particular pattern needs to parse exactly once, but it can appear anywhere in that sequence”."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T12:51:01.388800",
          "text": "So `~once` and `~alt` cooperate with one another. They aren’t really separable."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T12:51:38.389200",
          "text": "`~optional` is just like `~once`, but it can also parse zero times."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T12:59:32.393600",
          "text": "By the way, it is possible to make `~optional` not “eat” the ellipsis by putting it into a context where it is parsed as a head pattern instead of an ellipsis-head pattern. So, for example, if you were to write `{~alt {~seq {~optional &lt;foo&gt;}}} ...`, then `&lt;foo&gt;` would be bound with ellipsis depth 1. But this parser is essentially guaranteed to be a bug, since `{~seq {~optional &lt;foo&gt;}}` is an ellipsis-head pattern that can match no terms. In theory, such a pattern could cause parsing to never terminate, in the same way that `#px\"()*\"` will never terminate because it will match the empty term forever. But syntax/parse helpfully makes it a runtime error for an ellipsis-head pattern to match nothing, so at least your program just crashes instead. :)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T13:00:24.394300",
          "text": "(Though I think Racket actually makes `#px\"()*\"` an error, too, so similar idea.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-08T13:01:39.395600",
          "text": "In any case, the `~optional` isn’t actually helpful there, since you could just write `{~alt &lt;foo&gt;} ...` and get the behavior you probably actually wanted, since the `{~alt ....}` already includes the notion that the match might not succeed, and it should try one of the other branches, instead."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-08T16:31:25.397900",
          "text": "<@Kristeen> <@Boris> Travis is stuck on a couple build jobs so I tried directly locally and <https://mirror.racket-lang.org/> seems not able to connect (same w/o TLS)"
        }
      ]
    },
    {
      "conversation_id": "457",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Thanks for that complete explanation! In fact, I need the [CODE] in my cases because I want the term to be present only once or never. But I get what you're saying :slightly_smiling_face:\nKristeen: Merna are you around?\nMerna: I'm here, yes. I'm teaching in five minutes, though.\nMerna: I've been waiting for all Hell to break loose on this part of the build process, so I won't be surprised by things going wrong. I'm also unable to ssh to winooski right now, though I thought it might be a fail2ban issue.\nMerna: Julia Greg, are you saying that you're not able to connect to mirror.racket-lang? If so, I agree. Kristeen, is mirror hosted by winooski? Also, happy to take this to DM.\nKristeen: Merna yes, mirror is winooski\nKristeen: and I was assuming based on the date that the build process had crashed it\nMerna: That seems likely to me. I ran the build process under a tmux session, which doesn't seem likely to have crashed it, but it's at least possible. Also, pinging Essie here. In fact, speaking of ping, winooski still responds fine to ping.\nMerna: So: Is it uncommon for winooski to go down on a build? Independently, what's involved in bringing it back up?\nMerna: Sigh. Off to class, back in 2 hours.\nKristeen: Merna winooski should never go down -- currently no one can download racket in the default way\nKristeen: so this is quite bad\nEssie: FWIW, I cannot ssh to winooski.\nEssie: Will ping Stephen + mgmt.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 14,
        "duration_minutes": 59.53,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "complete",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Essie",
          "Kami",
          "Kristeen",
          "Merna"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-04-08T16:27:24.397000",
          "text": "Thanks for that complete explanation! In fact, I need the `(~optional)` in my cases because I want the term to be present only once or never. But I get what you're saying :slightly_smiling_face:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T16:31:53.398100",
          "text": "<@Merna> are you around?"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-08T16:59:07.398400",
          "text": "I'm here, yes. I'm teaching in five minutes, though."
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-08T17:00:35.399800",
          "text": "I've been waiting for all Hell to break loose on this part of the build process, so I won't be surprised by things going wrong. I'm also unable to ssh to winooski right now, though I thought it might be a fail2ban issue."
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-08T17:02:43.401200",
          "text": "<@Julia> Greg, are you saying that you're not able to connect to mirror.racket-lang? If so, I agree. <@Kristeen>, is mirror hosted by winooski? Also, happy to take this to DM."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T17:03:59.401500",
          "text": "<@Merna> yes, mirror is winooski"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T17:04:15.401900",
          "text": "and I was assuming based on the date that the build process had crashed it"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-08T17:05:18.403100",
          "text": "That seems likely to me. I ran the build process under a tmux session, which doesn't seem likely to have crashed it, but it's at least possible. Also, pinging <@Essie> here. In fact, speaking of ping, winooski still responds fine to ping."
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-08T17:05:39.403600",
          "text": "So: Is it uncommon for winooski to go down on a build? Independently, what's involved in bringing it back up?"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-08T17:08:14.403900",
          "text": "Sigh. Off to class, back in 2 hours."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T17:11:00.404400",
          "text": "<@Merna> winooski should never go down -- currently no one can download racket in the default way"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T17:11:14.404600",
          "text": "so this is quite bad"
        },
        {
          "user": "Essie",
          "timestamp": "2019-04-08T17:26:34.404900",
          "text": "FWIW, I cannot ssh to winooski."
        },
        {
          "user": "Essie",
          "timestamp": "2019-04-08T17:26:56.405200",
          "text": "Will ping Stephen + mgmt."
        }
      ]
    },
    {
      "conversation_id": "458",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Do we need another racket mirror? I would be happy to host a racket mirror in Europe - Germany.\nEssie: Shavon: The other mirrors should be up.\nMarcelina: Clarinda or Alden Do either of you know if there is any reason we couldn't break off event% into something like [CODE], and have [CODE] re-export it? (Like with [CODE])?\nEssie: But in general, though, another mirror could maybe be useful, I don't know.\nEssie: Clarinda or Alden would know, though.\nMarcelina: I ask because i seems like its mostly just a container class for...well mostly symbols. And it would be useful to use in places where you can't initialize [CODE] (for the second time).\nClarinda: I don’t remember any particular obstacle.\nJulia: A CDN that knew to try alternate origin servers -- so the one URL still worked somehow -- would be wonderful, but possibly not within PLT budget.\nEileen: I did a naive guesstimate for AWS cloudfront and got about $90/month\nEileen: although within AWS using S3 with cross-site replication is probably a simpler set up.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 10,
        "duration_minutes": 161.5,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Eileen",
          "Essie",
          "Julia",
          "Marcelina",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-04-08T17:39:20.406400",
          "text": "Do we need another racket mirror? I would be happy to host a racket mirror in Europe - Germany."
        },
        {
          "user": "Essie",
          "timestamp": "2019-04-08T17:56:07.407300",
          "text": "<@Shavon>: The other mirrors should be up."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-08T17:56:33.408300",
          "text": "<@Clarinda> or <@Alden> Do either of you know if there is any reason we couldn't break off event% into something like `racket/event`, and have `racket/gui/base` re-export it? (Like with `racket/draw`)?"
        },
        {
          "user": "Essie",
          "timestamp": "2019-04-08T17:56:36.408400",
          "text": "But in general, though, another mirror could maybe be useful, I don't know."
        },
        {
          "user": "Essie",
          "timestamp": "2019-04-08T17:56:49.408900",
          "text": "<@Clarinda> or <@Alden> would know, though."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-08T17:59:27.409000",
          "text": "I ask because i seems like its mostly just a container class for...well mostly symbols. And it would be useful to use in places where you can't initialize `racket/gui/base` (for the second time)."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-08T19:49:29.409500",
          "text": "I don’t remember any particular obstacle."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-08T19:56:31.412000",
          "text": "A CDN that knew to try alternate origin servers -- so the one URL still worked somehow -- would be wonderful, but possibly not within PLT budget."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-08T20:16:26.412800",
          "text": "I did a naive guesstimate for AWS cloudfront and got about $90/month"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-08T20:20:50.413500",
          "text": "although within AWS using S3 with cross-site replication is probably a simpler set up."
        }
      ]
    },
    {
      "conversation_id": "459",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: <[URL] seems to be back up again, thanks to whomever intervened!\nKristeen: Julia the major problem is that CDNs mostly don't like/charge a lot for the size of the downloads\nKristeen: That's why they're not just on S3 like everything else\nKristeen: Another way of putting it is that the free unmetered 10G Ethernet jack in my office is worth a lot of money",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 80.7,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-04-08T19:54:08.410100",
          "text": "<http://mirror.racket-lang.org|mirror.racket-lang.org> seems to be back up again, thanks to whomever intervened!"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T21:08:49.416000",
          "text": "<@Julia> the major problem is that CDNs mostly don't like/charge a lot for the size of the downloads"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T21:09:16.416700",
          "text": "That's why they're not just on S3 like everything else"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-08T21:14:50.418100",
          "text": "Another way of putting it is that the free unmetered 10G Ethernet jack in my office is worth a lot of money"
        }
      ]
    },
    {
      "conversation_id": "460",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Aubrey: Is there a standard technique for encoding eval contexts in redex with a specific nesting depth? (e.g., the kind of thing where [CODE] has [CODE] nesting levels of some pattern, say)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Aubrey"
        ]
      },
      "timeline": [
        {
          "user": "Aubrey",
          "timestamp": "2019-04-08T20:50:31.414800",
          "text": "Is there a standard technique for encoding eval contexts in redex with a specific nesting depth? (e.g., the kind of thing where `E_k` has `k` nesting levels of some pattern, say)"
        }
      ]
    },
    {
      "conversation_id": "461",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Makeda: What is the most popular racket based web framework?\nMakeda: Something like Ruby on Rails?\nKami: Makeda There's none yet, but I'm working on it: <[URL] On the other hand, a static site generator like <[URL] is getting popular, but it's not a \"web framework\" per se.\nKami: I feel like it's so simple to make your own from the basic racket/web-server package that everyone makes its own brew.\nKami: But as a beginner, I felt a bit lost because it doesn't look like a classic web server the first time you try it. There's all those strange concepts of continuations and all... Then you get to understand that continuations are not really necessary, and you start making your own wrapper around the server.\nKami: With web-galaxy, I want to provide an easy access to that technology, without the fuss and the complexity of having to read the documentation *line-by-line* in the right order\nKami: In the end, one usually just wants to define some routes and serve them, keeping the complexity for later\nKami: Then I want to add support for javascript modules and web components\nKami: So that you can write javascript as racket (using the urlang package) and generate your full web application from that\nKami: Maybe I won't have time to do all that in my spare time, but if I can inspire others to try something like that, and create traction, that'd be good enough.\nMakeda: Ok. Will try it out.\nHallie: Kami curious, what are your ideas for html dsl, I remember your talk at fosdem <[URL] are you still planning on something similar to page 34?\nKami: Yep!\nKami: A DSL that would permit to describe the HTML template, the javascript, the database fetching...etc all in one part of the code\nHallie: that would be my dream come true :slightly_smiling_face:\nHallie: one thing I always found annoying about xexp is the nesting of the attributes\nHallie: what I personally like is the approach of laml\nHallie: are you aware of that old library?\nPriscila: I have become fond of the at-expression syntax. Example: <[URL]\nHallie: at-expr is one neat approach\nPriscila: Note that the above doesn't build an s-expression, but represents the html using structs.\nKami: The at-expr approach is nice, but I feel like there's a bit too much [CODE] x) Joke aside, I'm not fixed on the notation yet, but I guess I want to make it as transparent as possible\nPriscila: Yeah - It's tricky to find a good balance.\nPriscila: The more text (non-html) you need the better it gets.\nHallie: in laml [CODE] becomes [CODE]\nHallie: which is also something I like\nKami: laml is great yeah, I had something like that in mind\nKami: What I really want to promote is the \"duality of syntax\" that Doug Hoyte writes about in Let Over Lambda\nKami: make it so that there's no difference between writing code and writing template, and that both can be intertwined seamlessly\nHallie: especially now with web components it seems even more doable\nKami: yep\nKami: I've been waiting for web components to finally be implemented by every browser for a long time now. But some times ago a colleague shared the link to an article explaining how a big banking company used web components for all the website, and only had a polyfill for Internet Explorer, making it possible to actually use web components in production for every browser. And I was like \"OK, now's the time!\"\nHallie: How do you see web-galaxy working with the multiplicity of Javascript MV* frameworks (current and future)\nKami: I guess it could be agnostic. But I'm really trying to push forward vanilla JS, because with ES6 + web components and shadow DOM, a lot of those frameworks have superfluous parts.\nKami: Especially since Racket works exactly as Babel for Javascript : it makes a perfect transpiler through macros.\nKami: My challenge is to try using only standard browser features instead of writing an MVC framework\nKami: I don't know if that's possible, but I wanna try and find out were it goes\nHallie: that would be ideal but seems like a challenge\nHallie: so far every time I wanted to write a web app entirely in Racket after some time I had to move into pure Javascript as it was getting more and more complex to keep it in both worlds\nHallie: So in essence you are thinking more about svelte approach?\nKami: I'm striving for minimalism :slightly_smiling_face:\nHallie: but with Racket as transpiler\nKami: Yep, pretty much something like that\nHallie: great to hear all that, and fingers crossed (as that would be brilliant)!\nKami: I'm glad to hear that :smile: Let's just hope I have enough brain-time for all that :stuck_out_tongue: When I have a full working proof of concept, I'd be glad to share it here.\nHallie: brain-time is an excellent combination - why is that that we either have enough brain and not enough time or enough time and not enough brain? :grin:\nKami: I *so* agree with that :stuck_out_tongue:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 47,
        "duration_minutes": 240.3,
        "contains_question": true,
        "action_keywords": [
          "action",
          "agree",
          "build",
          "create",
          "fix",
          "implement",
          "let's",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Kami",
          "Makeda",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Makeda",
          "timestamp": "2019-04-09T01:34:17.418800",
          "text": "What is the most popular racket based web framework?"
        },
        {
          "user": "Makeda",
          "timestamp": "2019-04-09T02:24:46.419500",
          "text": "Something like Ruby on Rails?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:34:47.421400",
          "text": "<@Makeda> There's none yet, but I'm working on it: <https://github.com/euhmeuh/web-galaxy>\nOn the other hand, a static site generator like <https://github.com/greghendershott/frog> is getting popular, but it's not a \"web framework\" per se."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:36:28.422300",
          "text": "I feel like it's so simple to make your own from the basic racket/web-server package that everyone makes its own brew."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:38:16.424100",
          "text": "But as a beginner, I felt a bit lost because it doesn't look like a classic web server the first time you try it. There's all those strange concepts of continuations and all... Then you get to understand that continuations are not really necessary, and you start making your own wrapper around the server."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:39:42.425100",
          "text": "With web-galaxy, I want to provide an easy access to that technology, without the fuss and the complexity of having to read the documentation *line-by-line* in the right order"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:42:34.426100",
          "text": "In the end, one usually just wants to define some routes and serve them, keeping the complexity for later"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:45:42.426800",
          "text": "Then I want to add support for javascript modules and web components"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:46:42.427800",
          "text": "So that you can write javascript as racket (using the urlang package) and generate your full web application from that"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:49:36.429100",
          "text": "Maybe I won't have time to do all that in my spare time, but if I can inspire others to try something like that, and create traction, that'd be good enough."
        },
        {
          "user": "Makeda",
          "timestamp": "2019-04-09T04:51:18.429300",
          "text": "Ok. Will try it out."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T04:54:46.430700",
          "text": "<@Kami> curious, what are your ideas for html dsl, I remember your talk at fosdem <https://github.com/euhmeuh/fosdem-2019-talk/blob/master/slides.pdf> are you still planning on something similar to page 34?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:55:29.430900",
          "text": "Yep!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T04:55:59.431500",
          "text": "A DSL that would permit to describe the HTML template, the javascript, the database fetching...etc all in one part of the code"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T04:56:23.432100",
          "text": "that would be my dream come true :slightly_smiling_face:"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T04:58:09.433700",
          "text": "one thing I always found annoying about xexp is the nesting of the attributes"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T04:58:32.434200",
          "text": "what I personally like is the approach of laml"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T04:58:51.434500",
          "text": "are you aware of that old library?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-09T04:59:21.435000",
          "text": "I have become fond of the at-expression syntax. Example:\n<https://github.com/soegaard/urlang/blob/master/urlang-examples/parabola/parabola.rkt#L118>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:00:12.435700",
          "text": "at-expr is one neat approach"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-09T05:00:18.435900",
          "text": "Note that the above doesn't build an s-expression, but represents the html using structs."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:02:20.437600",
          "text": "The at-expr approach is nice, but I feel like there's a bit too much `@` x)\nJoke aside, I'm not fixed on the notation yet, but I guess I want to make it as transparent as possible"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-09T05:02:55.438600",
          "text": "Yeah - It's tricky to find a good balance."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-09T05:03:19.439300",
          "text": "The more text (non-html) you need the better it gets."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:03:34.439600",
          "text": "in laml `(div ([class \"pony\"]) (pony-name the-pony))` becomes `(div 'class \"pony\" (pony-name the-pony))`"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:03:43.439800",
          "text": "which is also something I like"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:03:54.440100",
          "text": "laml is great yeah, I had something like that in mind"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:05:52.440800",
          "text": "What I really want to promote is the \"duality of syntax\" that Doug Hoyte writes about in Let Over Lambda"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:06:56.441700",
          "text": "make it so that there's no difference between writing code and writing template, and that both can be intertwined seamlessly"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:09:10.442200",
          "text": "especially now with web components it seems even more doable"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:09:14.442400",
          "text": "yep"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:11:50.444600",
          "text": "I've been waiting for web components to finally be implemented by every browser for a long time now. But some times ago a colleague shared the link to an article explaining how a big banking company used web components for all the website, and only had a polyfill for Internet Explorer, making it possible to actually use web components in production for every browser. And I was like \"OK, now's the time!\""
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:15:37.445700",
          "text": "How do you see web-galaxy working with the multiplicity of Javascript MV* frameworks (current and future)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:17:13.447100",
          "text": "I guess it could be agnostic. But I'm really trying to push forward vanilla JS, because with ES6 + web components and shadow DOM, a lot of those frameworks have superfluous parts."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:18:07.447700",
          "text": "Especially since Racket works exactly as Babel for Javascript : it makes a perfect transpiler through macros."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:19:03.448400",
          "text": "My challenge is to try using only standard browser features instead of writing an MVC framework"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:19:26.448800",
          "text": "I don't know if that's possible, but I wanna try and find out were it goes"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:20:02.449400",
          "text": "that would be ideal but seems like a challenge"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:21:07.450700",
          "text": "so far every time I wanted to write a web app entirely in Racket after some time I had to move into pure Javascript as it was getting more and more complex to keep it in both worlds"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:21:30.451100",
          "text": "So in essence you are thinking more about svelte approach?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:21:49.451600",
          "text": "I'm striving for minimalism :slightly_smiling_face:"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:21:53.451800",
          "text": "but with Racket as transpiler"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:22:33.452100",
          "text": "Yep, pretty much something like that"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:25:01.453100",
          "text": "great to hear all that, and fingers crossed (as that would be brilliant)!"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:27:27.454600",
          "text": "I'm glad to hear that :smile: Let's just hope I have enough brain-time for all that :stuck_out_tongue: When I have a full working proof of concept, I'd be glad to share it here."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T05:32:19.455900",
          "text": "brain-time is an excellent combination - why is that that we either have enough brain and not enough time or enough time and not enough brain? :grin:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T05:34:35.456300",
          "text": "I *so* agree with that :stuck_out_tongue:"
        }
      ]
    },
    {
      "conversation_id": "462",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Clarinda So, after looking at [CODE], it looks like it'd be fairly simple to breate events into something like [CODE].\nMarcelina: If so, would it make sense to move events to the main racket repo (and have the gui-lib one reprovide them), or would it make more sense to add a new package to the distrobution, or something else?\nMarcelina: Or, I guess, it'd also be possible to make a [CODE] collection, and just document that that collection can be instantiated multiple times unlike [CODE].\nClarinda: Yes, [CODE] within [CODE] sounds like the right idea for now.\nMarcelina: Alright, I'll prepare a PR, thanks.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 19.08,
        "contains_question": true,
        "action_keywords": [
          "prepare"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-09T06:28:19.457200",
          "text": "<@Clarinda> So, after looking at `mred/private/wx/common/event`, it looks like it'd be fairly simple to breate events into something like `racket/event`."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-09T06:29:11.458300",
          "text": "If so, would it make sense to move events to the main racket repo (and have the gui-lib one reprovide them), or would it make more sense to add a new package to the distrobution, or something else?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-09T06:30:00.459300",
          "text": "Or, I guess, it'd also be possible to make a `racket/gui/event` collection, and just document that that collection can be instantiated multiple times unlike `racket/gui/base`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-09T06:44:18.460300",
          "text": "Yes, `racket/gui/event` within `gui-lib` sounds like the right idea for now."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-09T06:47:24.460600",
          "text": "Alright, I'll prepare a PR, thanks."
        }
      ]
    },
    {
      "conversation_id": "463",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Merna Kristeen winooski seems downski again?\nKaren: Kami regarding html syntax, what do you think of using keyword arguments for attributes? [CODE]\nKami: Yep, using keyword arguments is definitely the most \"racketty\" to me\nKami: I think I'm gonna go with that\nKaren: nice, then they can be normal functions too\nMerna: Julia right you are, and for exactly the same reason. I believe Stephen Chang is working on bringing it back up. Perhaps this time I won't crash it again.\nJulia: What are you running on winooski, some kind of Elizabeth Barrett Browning AI to compute all possible ways to express HTML using Racket? :smile:\nMerna: just trying to run the branch build, sigh.\nJulia: I'm sorry. It sounds frustrating and my bad humor is probably not helping.\nMerna: on the contrary! A little gallows humor is always appreciated! :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 20.33,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kami",
          "Karen",
          "Merna"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-04-09T11:38:26.462400",
          "text": "<@Merna> <@Kristeen> winooski seems downski again?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-09T11:39:11.463200",
          "text": "<@Kami> regarding html syntax, what do you think of using keyword arguments for attributes? `(div #:class \"pony\" (pony-name the-pony))`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T11:41:33.463600",
          "text": "Yep, using keyword arguments is definitely the most \"racketty\" to me"
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-09T11:42:09.463900",
          "text": "I think I'm gonna go with that"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-09T11:51:08.466000",
          "text": "nice, then they can be normal functions too"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-09T11:52:42.466800",
          "text": "<@Julia> right you are, and for exactly the same reason. I believe Stephen Chang is working on bringing it back up. Perhaps this time I won't crash it again."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T11:54:47.467900",
          "text": "What are you running on winooski, some kind of Elizabeth Barrett Browning AI to compute all possible ways to express HTML using Racket? :smile:"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-09T11:55:19.468200",
          "text": "just trying to run the branch build, sigh."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T11:55:56.468900",
          "text": "I'm sorry. It sounds frustrating and my bad humor is probably not helping."
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-09T11:58:46.469300",
          "text": "on the contrary! A little gallows humor is always appreciated! :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "464",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Merna Has branch day happened? From GitHub, it looks like the answer is “yes”, but I want to make sure. I’m trying to figure out if it’s safe for me to merge something to master _without_ it ending up in v7.3.\nMerna: Gonzalo yes, the catalog is built, the release branch exists, and master is now on 7.3.0.1. so merges to master should not wind up in the release by default.\nGonzalo: Great, thank you!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 11.17,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Merna"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-09T12:28:15.470800",
          "text": "<@Merna> Has branch day happened? From GitHub, it looks like the answer is “yes”, but I want to make sure. I’m trying to figure out if it’s safe for me to merge something to master _without_ it ending up in v7.3."
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-09T12:39:15.472100",
          "text": "<@Gonzalo> yes, the catalog is built, the release branch exists, and master is now on 7.3.0.1. so merges to master should not wind up in the release by default."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-09T12:39:25.472300",
          "text": "Great, thank you!"
        }
      ]
    },
    {
      "conversation_id": "465",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Clarinda Actually, looking at it a bit more, it looks like (afaict anyway) 'most' of [CODE] can be instantiated more than once.\nMarcelina: (Except for stuff like queue.rkt, which I think is because of the use of atomic mode?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.33,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-09T13:17:19.473400",
          "text": "<@Clarinda> Actually, looking at it a bit more, it looks like (afaict anyway) 'most' of `mred/private/wx/common` can be instantiated more than once."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-09T13:17:39.473900",
          "text": "(Except for stuff like queue.rkt, which I think is because of the use of atomic mode?"
        }
      ]
    },
    {
      "conversation_id": "466",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Loise: Hey everyone. I'm still getting into Racket, but I love it so far. In my search for information as to whether Racket supports persistent data structures [1] I came across this article [2] from 2010. I was wondering how many of the Racket criticisms in the article still held true. Don't get me wrong: I'm definitely on Team Racket. :slightly_smiling_face: I'm just curious as to how Racket may have changed since the article was written. But going back to my initial quest, does Racket support any sort of persistent data structure, one that preserves the previous version of itself when it is modified? I guess that's two questions, but perhaps in answering the first, the second may be answered as a side-effect. [1] `<[URL] [2] `<[URL]\nHallie: as to the persistence there are some packages: <[URL]\nLoise: Oh, thank you Hallie! The problem with being new to a space is not even knowing where to look for answers. I appreciate the link.\nKristeen: Loise there are lots of persistent data structures in Racket.\nKristeen: it's still true that by default, Racket come with a few built-in data strucutures, and only one of the default ones is a sophisticated modern persistent data structure (functional hashes)\nLoise: Thanks, Kristeen. I'll look into functional hashes. Great information,\nHallie: it's also worthwhile to use github language:racket for finding some interesting code: <[URL]\nPriscila: Loise <[URL]\nGonzalo: Loise As Sam already said, Racket’s immutable hash datatype is a HAMT, which is the same way Clojure implements its maps. In addition to that, I implemented Clojure’s persistent vector data structure in Racket as the [CODE] package, here: <[URL] And there are other persistent data structures available in various packages, too.\nLoise: This is all great information. I rarely get excited about a language (I've been doing this for longer than most of you have been alive :slightly_smiling_face:) but I must admit, Racket's really taking hold of my brain. I have a _lot_ to learn here, but to paraphrase Tank from The Matrix, it's a very exciting time! Thanks again, everyone.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 10,
        "duration_minutes": 19.12,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Hallie",
          "Kristeen",
          "Loise",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Loise",
          "timestamp": "2019-04-09T13:56:19.481500",
          "text": "Hey everyone. I'm still getting into Racket, but I love it so far. In my search for information as to whether Racket supports persistent data structures [1] I came across this article [2] from 2010. I was wondering how many of the Racket criticisms in the article still held true. Don't get me wrong: I'm definitely on Team Racket. :slightly_smiling_face: I'm just curious as to how Racket may have changed since the article was written.\n\nBut going back to my initial quest, does Racket support any sort of persistent data structure, one that preserves the previous version of itself when it is modified?\n\nI guess that's two questions, but perhaps in answering the first, the second may be answered as a side-effect.\n\n[1] `<https://en.wikipedia.org/wiki/Persistent_data_structure>`\n[2] `<https://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html>`"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T13:59:22.482200",
          "text": "as to the persistence there are some packages: <https://pkgd.racket-lang.org/pkgn/search?q=persistent>"
        },
        {
          "user": "Loise",
          "timestamp": "2019-04-09T14:01:40.483500",
          "text": "Oh, thank you <@Hallie>! The problem with being new to a space is not even knowing where to look for answers. I appreciate the link."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-09T14:01:41.483600",
          "text": "<@Loise> there are lots of persistent data structures in Racket."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-09T14:02:29.484800",
          "text": "it's still true that by default, Racket come with a few built-in data strucutures, and only one of the default ones is a sophisticated modern persistent data structure (functional hashes)"
        },
        {
          "user": "Loise",
          "timestamp": "2019-04-09T14:03:20.485900",
          "text": "Thanks, <@Kristeen>. I'll look into functional hashes. Great information,"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-09T14:03:37.486200",
          "text": "it's also worthwhile to use github language:racket for finding some interesting code: <https://github.com/search?q=language%3Aracket+persistent>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-09T14:05:22.486900",
          "text": "<@Loise> <https://www2.ccs.neu.edu/racket/pubs/sfp10-kth.pdf>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-09T14:07:19.489000",
          "text": "<@Loise> As Sam already said, Racket’s immutable hash datatype is a HAMT, which is the same way Clojure implements its maps. In addition to that, I implemented Clojure’s persistent vector data structure in Racket as the `pvector` package, here: <https://docs.racket-lang.org/pvector/index.html> And there are other persistent data structures available in various packages, too."
        },
        {
          "user": "Loise",
          "timestamp": "2019-04-09T14:15:26.493200",
          "text": "This is all great information. I rarely get excited about a language (I've been doing this for longer than most of you have been alive :slightly_smiling_face:) but I must admit, Racket's really taking hold of my brain. I have a _lot_ to learn here, but to paraphrase Tank from The Matrix, it's a very exciting time! Thanks again, everyone."
        }
      ]
    },
    {
      "conversation_id": "467",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Gonzalo thanks for your email on racket-dev. Currently trying to get kids in bed. I have a solution to the problem, which have been lazily delaying implementing it. Thanks for the nudge. Will get done tomorrow morning - i.e. in the next 12 hours. Will reply to the mailing list as well explaining the mitigation and future plans.\nGonzalo: No worries, it isn’t a big deal!\nShanell: FYI, in racket-on-chez, the immutable hash is a patricia trie\nKristeen: Shanell oh interesting. I thought it was still a HAMT\nShanell: We tried (er, no pun intended) both (and a HAMT is still in the repo, I believe). The HAMT does have better memory usage but it's slower on most operations.\nShanell: My best guess is that this is because creating a new HAMT node involves creating a new vector (which also has to zero out the memory) and then [CODE]-ing the whole thing. So, each slot is written to twice, and each write has to go through a GC write barrier. But this is really just a guess.\nKristeen: I don't think the zeroing would trigger the write barrier, but that's all very interesting\nShanell: No, you're right. Only the second write goes through the barrier.\nShanell: BTW, one of my reasons for suspecting vector writes as the culprit is that a version of the HAMT that stores a cons cell (containing the name/value pair) in each slot performed better than one that uses a flat vector twice the size.\nShanell: I don't think so",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 40.8,
        "contains_question": false,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Kristeen",
          "Shanell",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-04-09T14:36:26.495200",
          "text": "<@Gonzalo> thanks for your email on racket-dev. Currently trying to get kids in bed. I have a solution to the problem, which have been lazily delaying implementing it. Thanks for the nudge. Will get done tomorrow morning - i.e. in the next 12 hours. Will reply to the mailing list as well explaining the mitigation and future plans."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-09T14:36:54.495500",
          "text": "No worries, it isn’t a big deal!"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-09T14:37:59.496200",
          "text": "FYI, in racket-on-chez, the immutable hash is a patricia trie"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-09T14:49:03.496800",
          "text": "<@Shanell> oh interesting. I thought it was still a HAMT"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-09T14:49:53.497600",
          "text": "We tried (er, no pun intended) both (and a HAMT is still in the repo, I believe). The HAMT does have better memory usage but it's slower on most operations."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-09T14:51:42.499700",
          "text": "My best guess is that this is because creating a new HAMT node involves creating a new vector (which also has to zero out the memory) and then `vector-set!`-ing the whole thing. So, each slot is written to twice, and each write has to go through a GC write barrier. But this is really just a guess."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-09T14:55:44.500700",
          "text": "I don't think the zeroing would trigger the write barrier, but that's all very interesting"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-09T14:56:01.501100",
          "text": "No, you're right. Only the second write goes through the barrier."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-09T15:15:22.502800",
          "text": "BTW, one of my reasons for suspecting vector writes as the culprit is that a version of the HAMT that stores a cons cell (containing the name/value pair) in each slot performed better than one that uses a flat vector twice the size."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-09T15:17:14.503500",
          "text": "I don't think so"
        }
      ]
    },
    {
      "conversation_id": "468",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Apropos, did Chez get immutable cons cells?\nPriscila: ok\nClarinda: Many things prevent multiple instantiation. Some of it is that global hooks are installed or global classes (for Objective-C) defined. Some of it is that GUI toolkits do not support running in multiple OS threads.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 181.32,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-04-09T15:16:02.503300",
          "text": "Apropos, did Chez get immutable cons cells?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-09T16:14:23.504300",
          "text": "ok"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-09T18:17:21.510400",
          "text": "Many things prevent multiple instantiation. Some of it is that global hooks are installed or global classes (for Objective-C) defined. Some of it is that GUI toolkits do not support running in multiple OS threads."
        }
      ]
    },
    {
      "conversation_id": "469",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: racket immutable conses are just chez mutable conses\nJulia: It seems like [CODE] is tougher to fix today than yesterday. :disappointed:\nJulia: My own bad luck these two days I had a chunk of time to do/push many commits, and Travis CI decided to CRON build Frog.\nMerna: Sorry should have said Julia on that previous message\nMerna: Julia ... no, catalog seems to be intact. Is it just the main racket download?\nJulia: Merna <[URL] isn't connecting, and that is the main/default download link (also used by stuff like Travis CI tests)\nJulia: (but also by humans who want to download Racket)\nMerna: Shizue yep, working on it...\nJulia: Thanks. Don't mean to nag, just want to make sure you know it's down now. (Like, yesterday it was fixed in a few hours, so, it seems plausible it might have been fixed today, but went back down again w/o anyone noticing yet.)\nClarinda: For now, we’ve made the default download link point to the Utah mirror. That doesn’t help with Travis CI configurations, though.\nJulia: Clarinda OK, I did similar.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 11,
        "duration_minutes": 236.0,
        "contains_question": true,
        "action_keywords": [
          "build",
          "decide",
          "fix",
          "should"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Clarinda",
          "Julia",
          "Kristeen",
          "Merna"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-04-09T16:04:20.504000",
          "text": "racket immutable conses are just chez mutable conses"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T16:51:44.509500",
          "text": "It seems like `mirror` is tougher to fix today than yesterday. :disappointed:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T16:52:43.510300",
          "text": "My own bad luck these two days I had a chunk of time to do/push many commits, and Travis CI decided to CRON build Frog."
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-09T18:25:25.511400",
          "text": "Sorry should have said <@Julia> on that previous message"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-09T18:43:08.512100",
          "text": "<@Julia> ... no, catalog seems to be intact. Is it just the main racket download?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T19:05:32.514800",
          "text": "<@Merna> <https://mirror.racket-lang.org/installers/7.2/racket-7.2-x86_64-linux.sh> isn't connecting, and that is the main/default download link (also used by stuff like Travis CI tests)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T19:05:54.515200",
          "text": "(but also by humans who want to download Racket)"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-09T19:07:33.515500",
          "text": "<@Shizue> yep, working on it..."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T19:09:16.516900",
          "text": "Thanks. Don't mean to nag, just want to make sure you know it's down now. (Like, yesterday it was fixed in a few hours, so, it seems plausible it might have been fixed today, but went back down again w/o anyone noticing yet.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-09T19:31:05.517800",
          "text": "For now, we’ve made the default download link point to the Utah mirror. That doesn’t help with Travis CI configurations, though."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-09T20:00:20.518200",
          "text": "<@Clarinda> OK, I did similar."
        }
      ]
    },
    {
      "conversation_id": "470",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Merna: Can I ask which service it is that you're depending on here? Is it the catalog?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Merna"
        ]
      },
      "timeline": [
        {
          "user": "Merna",
          "timestamp": "2019-04-09T18:25:12.511000",
          "text": "Can I ask which service it is that you're depending on here? Is it the catalog?"
        }
      ]
    },
    {
      "conversation_id": "471",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shizue: in NEU PRL, <[URL] is currently used to download Racket inside Travis, and we can't get to it today",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shizue"
        ]
      },
      "timeline": [
        {
          "user": "Shizue",
          "timestamp": "2019-04-09T18:54:57.513500",
          "text": "in NEU PRL, <http://mirror.racket-lang.org|mirror.racket-lang.org> is currently used to download Racket inside Travis, and we can't get to it today"
        }
      ]
    },
    {
      "conversation_id": "472",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Prince: I was trying to calculate an element-wise sum of a nested list and bumped up against a gap in my (very limited) understanding. Here is a simple example: [CODE_BLOCK] The first results was as I expected. But I thought that I could then pass that new nested list to a similar [CODE] structure and get [CODE]. Is there a simple explanation for what is happening here? Or can someone point me to the relevant section in the docs? Thanks.\nGonzalo: Prince [CODE] ends up producing [CODE]. [CODE] therefore performs [CODE], producing [CODE]. Now, you pass that value to [CODE], leading to the function call [CODE], which produces [CODE], just as before, which eventually reduces to [CODE].\nGonzalo: Put another way, [CODE] “zips” up the lists in [CODE] using [CODE], so the nth element of the result list becomes the result of applying [CODE] to the nth element of each argument lists.\nGonzalo: As it happens, this works out to mean [CODE] “transposes” [CODE], so that if you view it as a two-dimensional list, it flips the axes.\nGonzalo: Anyway, if you wanted to get [CODE], then you don’t want to transpose the original [CODE] value at all: you just want to call [CODE], which does the “zipping” along the appropriate axis, leading to [CODE]. Or, if you wanted to turn the transposed list into [CODE] directly, you could write [CODE], which would produce the same result.\nClarinda: I get the same error.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 806.2,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo",
          "Prince"
        ]
      },
      "timeline": [
        {
          "user": "Prince",
          "timestamp": "2019-04-10T01:26:27.524100",
          "text": "I was trying to calculate an element-wise sum of a nested list and bumped up against a gap in my (very limited) understanding. Here is a simple example:\n```\n&gt; (define x '((1 2 3) (4 5 6) (7 8 9)))\n&gt; (apply map list x)\n'((1 4 7) (2 5 8) (3 6 9))\n&gt; (apply map + (apply map list x))\n'(6 15 24)\n```\nThe first results was as I expected. But I thought that I could then pass that new nested list to a similar `(apply map)` structure and get `'(12 15 18)`. Is there a simple explanation for what is happening here? Or can someone point me to the relevant section in the docs? Thanks."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-10T01:57:07.528300",
          "text": "<@Prince> `(map f as bs cs)` ends up producing `(list (f a_1 b_1 c1_) (f a_2 b_2 c_2) ... (f a_n b_n c_n))`. `(apply map list x)` therefore performs `(map list (list 1 2 3) (list 4 5 6) (list 7 8 9))`, producing `(list (list 1 4 7) (list 2 5 8) (list 3 6 9))`. Now, you pass that value to `(apply map + ....)`, leading to the function call `(map + (list 1 4 7) (list 2 5 8) (list 3 6 9))`, which produces `(list (+ 1 2 3) (+ 4 5 6) (+ 7 8 9))`, just as before, which eventually reduces to `(list 6 15 24)`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-10T01:58:55.529800",
          "text": "Put another way, `(apply map f lsts)` “zips” up the lists in `lsts` using `f`, so the nth element of the result list becomes the result of applying `f` to the nth element of each argument lists."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-10T02:00:17.531000",
          "text": "As it happens, this works out to mean `(apply map list lsts)` “transposes” `lsts`, so that if you view it as a two-dimensional list, it flips the axes."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-10T02:02:54.533700",
          "text": "Anyway, if you wanted to get `(list 12 15 18)`, then you don’t want to transpose the original `x` value at all: you just want to call `(apply map + x)`, which does the “zipping” along the appropriate axis, leading to `(list (+ 1 4 7) (+ 2 5 8) (+ 3 6 9))`. Or, if you wanted to turn the transposed list into `(list 12 15 18)` directly, you could write `(map (lambda (lst) (apply + lst)) (apply map list x))`, which would produce the same result."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-10T14:52:39.535400",
          "text": "I get the same error."
        }
      ]
    },
    {
      "conversation_id": "473",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Hey Kristeen, I'm getting the following package dependency when building typed racket: [CODE_BLOCK]\nMarcelina: Do you think this is right, or maybe my build is wrong?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.5,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-10T13:41:31.534600",
          "text": "Hey <@Kristeen>, I'm getting the following package dependency when building typed racket:\n\n```\nraco setup: found undeclared dependency:\nraco setup:   mode: build (of documentation)\nraco setup:   for package: \"typed-racket-doc\"\nraco setup:   on package: \"web-server-doc\"\nraco setup:   from document: \"ts-reference\"\nraco setup:   to document: \"web-server\"\n```"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-10T13:42:01.535100",
          "text": "Do you think this is right, or maybe my build is wrong?"
        }
      ]
    },
    {
      "conversation_id": "474",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: Is there (or is there a reason I'm missing why there shouldn't be) a lens for hashes that uses a default value? Like a [CODE] ?\nKaren: Eileen I don't remember, but I'm guessing there isn't one because such a lens can violate the lens laws. If you get-then-set, you could change what the original hash was.\nKaren: (it's been a long time since I worked on the lens package)\nEileen: Ok I figured it was related to the lens laws, but wasn't sure which one potentially.\nKaren: Whichever one is [CODE], assuming I remembered the argument order correctly\nEileen: Gotcha\nKaren: There's no way for a ref-with-default to satisfy that, since it can't tell the difference between a hash with no value and a hash with a value equal to the default\nKaren: Honestly it's still a really useful feature so I want _some_ way for optics to deal with that kind of thing. Will have to wait for the next time I work in that area.\nEileen: I noticed it wasn't there one of the last times I used lenses, but need it today. I'm pretty much using lenses to query \"big\" json documents.\nEileen: Fortunately lenses are simple enough to write a usable (for me) ref with default\nKaren: I think another good strategy you could use is to normalize your json docs. So before doing any queries with lenses, first traverse the doc and fill in default values.\nKaren: is the lens-y code you’re writing open source btw? I’d like to add a link to it to my list of use cases\nElin: If there was a [CODE] and [CODE] with signatures: [CODE_BLOCK] Where “set”-ing to [CODE] is like [CODE], would a [CODE] follow the lens laws?\nEileen: Not yet. Right now I'm just writing some hacky automation around a web api. So for the most part I'm just writing lenses for the parts I need.\nEileen: Elin I was wondering that myself. I guess if None was disjoint from V it seems plausible?\nKaren: Elin It would follow the laws, but it wouldn’t make the code using that lens any simpler. Such a lens would require the user explicitly treat “present and equal to the default” differently from “absent”, which isn’t what Sam’s case wants to do.\nKaren: Eileen I think the [CODE] type in alex’s example is always a wrapper, so it’s more like [CODE]\nEileen: Oh yeah. I was thinking of TR (U v #f)\nEileen: except in vanilla Racket\nClarinda: I’m pretty sure that the dependency should just be added, and the dependency mismatch will block snapshot builds if not fixed, so I’ve pushed the addition (and I trust that someone will revert if that wasn’t the right idea)\nEileen: And actually I've given it more than 1 minute to think on it would still be complicated.\nKaren: What I want to do to address this kind of problem is define some notion of normal forms and normalizers, and then allow optics to be either “exact” (which is what lenses are like now) or “inexact” (which are like lenses that _almost_ follow the laws, but they might normalize data when they’re used)\nKaren: there’s a lot of really useful kinds of data conversion / querying / traversal logic that doesn’t promise to leave the source unchanged, it just promises to put it into some normal form and data that’s already in normal form is always left unchanged\nEileen: As purely ergonomics example, if I was doing this in python I would do something like: [CODE_BLOCK]\nKaren: Right and that’s a very reasonable, convenient, and practical interface\nMarcelina: Makes sense. Thanks.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 26,
        "duration_minutes": 31.85,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Eileen",
          "Elin",
          "Karen",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:03:51.536600",
          "text": "Is there (or is there a reason I'm missing why there shouldn't be) a lens for hashes that uses a default value?  Like a `hash-ref-lens/default` ?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:05:22.538400",
          "text": "<@Eileen> I don't remember, but I'm guessing there isn't one because such a lens can violate the lens laws. If you get-then-set, you could change what the original hash was."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:05:46.539000",
          "text": "(it's been a long time since I worked on the lens package)"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:07:00.539600",
          "text": "Ok I figured it was related to the lens laws, but wasn't sure which one potentially."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:08:39.541700",
          "text": "Whichever one is `(lens-set l v (lens-view l v)) == v`, assuming I remembered the argument order correctly"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:09:08.542600",
          "text": "Gotcha"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:09:23.543200",
          "text": "There's no way for a ref-with-default to satisfy that, since it can't tell the difference between a hash with no value and a hash with a value equal to the default"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:12:26.544600",
          "text": "Honestly it's still a really useful feature so I want _some_ way for optics to deal with that kind of thing. Will have to wait for the next time I work in that area."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:14:52.546700",
          "text": "I noticed it wasn't there one of the last times I used lenses, but need it today.  I'm pretty much using lenses to query \"big\" json documents."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:15:18.547200",
          "text": "Fortunately lenses are simple enough to write a usable (for me) ref with default"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:18:03.549100",
          "text": "I think another good strategy you could use is to normalize your json docs. So before doing any queries with lenses, first traverse the doc and fill in default values."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:19:14.550100",
          "text": "is the lens-y code you’re writing open source btw? I’d like to add a link to it to my list of use cases"
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-10T16:23:23.554100",
          "text": "If there was a `hash-ref/maybe` and `hash-set/maybe` with signatures:\n```\nhash-ref/maybe : [Hashof K V] K -&gt; [Maybe V]\nhash-set/maybe : [Hashof K V] K [Maybe V] -&gt; [Hashof K V]\n```\nWhere “set”-ing to `None` is like `hash-remove`, would a `hash-ref-lens/maybe` follow the lens laws?"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:24:13.555100",
          "text": "Not yet.  Right now I'm just writing some hacky automation around a web api.  So for the most part I'm just writing lenses for the parts I need."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:25:35.557100",
          "text": "<@Elin> I was wondering that myself.  I guess if None was disjoint from V it seems plausible?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:25:36.557200",
          "text": "<@Elin> It would follow the laws, but it wouldn’t make the code using that lens any simpler. Such a lens would require the user explicitly treat “present and equal to the default” differently from “absent”, which isn’t what Sam’s case wants to do."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:27:01.558200",
          "text": "<@Eileen> I think the `Maybe` type in alex’s example is always a wrapper, so it’s more like `(or/c none? (some/c V))`"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:27:25.558600",
          "text": "Oh yeah.  I was thinking of TR (U v #f)"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:27:53.558900",
          "text": "except in vanilla Racket"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-10T16:28:14.559300",
          "text": "I’m pretty sure that the dependency should  just be added, and the dependency mismatch will block snapshot builds if not fixed, so I’ve pushed the addition (and I trust that someone will revert if that wasn’t the right idea)"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:29:07.560600",
          "text": "And actually I've given it more than 1 minute to think on it would still be complicated."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:30:38.562100",
          "text": "What I want to do to address this kind of problem is define some notion of normal forms and normalizers, and then allow optics to be either “exact” (which is what lenses are like now) or “inexact” (which are like lenses that _almost_ follow the laws, but they might normalize data when they’re used)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:31:49.563300",
          "text": "there’s a lot of really useful kinds of data conversion / querying / traversal logic that doesn’t promise to leave the source unchanged, it just promises to put it into some normal form and data that’s already in normal form is always left unchanged"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-10T16:33:39.564900",
          "text": "As purely ergonomics example, if I was doing this in python I would do something like:\n```\njson_doc.get('A', {}).get('B', {}).get('C', some_suitable_missing_value)\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-10T16:35:10.566200",
          "text": "Right and that’s a very reasonable, convenient, and practical interface"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-10T16:35:42.566400",
          "text": "Makes sense. Thanks."
        }
      ]
    },
    {
      "conversation_id": "475",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: If you adjust your definition of “equality” to treat the absence of a value equivalent to the presence of the default value, then such a lens can be lawful",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-10T17:37:36.568100",
          "text": "If you adjust your definition of “equality” to treat the absence of a value equivalent to the presence of the default value, then such a lens can be lawful"
        }
      ]
    },
    {
      "conversation_id": "476",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Hey Boris, I have a quick question for you about mode-lambda. I'm looking at the code and trying to understand what happens when a sprite has index 0 (to know if I can reliably use that value as an \"empty missing sprite\". I can see that when building the database, the sprite index starts at 1, which is already a good indication that 0 is a special value. Then when I try assigning 0 as a value, everything runs fine, and sprites with that value are invisible. But then it goes into OpenGL code and I'm lost. Can 0 be used as a default value for a sprite index? (I couldn't find anything in the doc about this)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-04-11T04:55:04.572300",
          "text": "Hey <@Boris>, I have a quick question for you about mode-lambda. I'm looking at the code and trying to understand what happens when a sprite has index 0 (to know if I can reliably use that value as an \"empty missing sprite\".\nI can see that when building the database, the sprite index starts at 1, which is already a good indication that 0 is a special value. Then when I try assigning 0 as a value, everything runs fine, and sprites with that value are invisible.\nBut then it goes into OpenGL code and I'm lost. Can 0 be used as a default value for a sprite index? (I couldn't find anything in the doc about this)"
        }
      ]
    },
    {
      "conversation_id": "477",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Clarinda Whenever I try to add [CODE] to the docs, I keep getting a red underline under the module itself.\nMarcelina: (As shown in this PR: <[URL]\nPrince: When using [CODE], how do you suppress printing of the output of the expression that you are timing? For example... [CODE_BLOCK]\nClarinda: The [CODE] declaration needs to be within a part, which in that case is created by [CODE]. You may have to split out [CODE] and [CODE].\nClarinda: (I don’t remember why [CODE] doesn’t or can’t provide a good error.)\nKristeen: Prince you might want [CODE]\nJulia: Merna Clarinda Sorry to bother you again but Shavon just asked me about <[URL] and <[URL] not working. (Some people use a [CODE] version in their Travis CI build matrix, which points to one of those.) Is this just temporarily not available anywhere because of 7.3 prep? Or is it another [CODE] thing and there's another URL I should use for now?",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 7,
        "duration_minutes": 186.27,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Julia",
          "Kristeen",
          "Marcelina",
          "Prince"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-11T13:48:00.573100",
          "text": "<@Clarinda> Whenever I try to add `racket/gui/event` to the docs, I keep getting a red underline under the module itself."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-11T13:48:19.573500",
          "text": "(As shown in this PR: <https://github.com/racket/gui/pull/127>)"
        },
        {
          "user": "Prince",
          "timestamp": "2019-04-11T14:04:30.576200",
          "text": "When using `time`, how do you suppress printing of the output of the expression that you are timing? For example...\n```\n#lang racket\n(require math)\n(time (flnormal-sample 0.0 1.0 100))\n```"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-11T14:04:53.576300",
          "text": "The `defmodule` declaration needs to be within a part, which in that case is created by `defclass/title`. You may have to split out `title` and `defclass`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-11T14:05:26.576500",
          "text": "(I don’t remember why `defmodule` doesn’t or can’t provide a good error.)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-11T14:06:09.577100",
          "text": "<@Prince> you might want `(time (void (flnormal-sample ...)))`"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-11T16:54:16.580500",
          "text": "<@Merna> <@Clarinda> Sorry to bother you again but <@Shavon> just asked me about <https://pre-release.racket-lang.org/installers/racket-current-x86_64-linux.sh> and <https://pre-release.racket-lang.org/installers/racket-minimal-current-x86_64-linux.sh> not working. (Some people use a `RELEASE` version in their Travis CI build matrix, which points to one of those.)\nIs this just temporarily not available anywhere because of 7.3 prep?\nOr is it another `winooski` thing and there's another URL I should use for now?"
        }
      ]
    },
    {
      "conversation_id": "478",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Amira: winooski's dead. RIP. Stephen Chang recovered the data &amp; is working with the Northeastern sysadmins to set up a new server.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Amira"
        ]
      },
      "timeline": [
        {
          "user": "Amira",
          "timestamp": "2019-04-11T15:49:11.577600",
          "text": "winooski's dead. RIP. Stephen Chang recovered the data &amp; is working with the Northeastern sysadmins to set up a new server."
        }
      ]
    },
    {
      "conversation_id": "479",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: (I tried to figure that myself but plain <[URL] eventually gives a 522 response page from Cloudflare.)\nMerna: Julia It's a winooski thing. We were unable to complete the \"initial build\" that generally kicks off the week between branch day (7th) and the beginning of testing (15th). I'm hoping to make this happen in the next day, but I should be clear that there are definitely some question marks remaining about how exactly this is going to happen.\nJulia: Merna Thanks. If it's temporarily unavailable at any URL, that's fine I'll just let folks know. (If I misunderstood and it's available at some other URL, then please just let me know what URL and I'll update my end.)\nMerna: Julia yes, we do not yet have a candidate build. It sounds like this might come together in the next day or two.\nJulia: Understood. Thank you.\nShavon: Julia Thanks for your time looking into this.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 527.09,
        "contains_question": false,
        "action_keywords": [
          "build",
          "complete",
          "please",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Merna",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-04-11T16:57:31.581300",
          "text": "(I tried to figure that myself but plain <https://pre-release.racket-lang.org/> eventually gives a 522 response page from Cloudflare.)"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-11T17:29:17.582700",
          "text": "<@Julia> It's a winooski thing. We were unable to complete the \"initial build\" that generally kicks off the week between branch day (7th) and the beginning of testing (15th). I'm hoping to make this happen in the next day, but I should be clear that there are definitely some question marks remaining about how exactly this is going to happen."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-11T18:26:36.584100",
          "text": "<@Merna> Thanks. If it's temporarily unavailable at any URL, that's fine I'll just let folks know.\n(If I misunderstood and it's available at some other URL, then please just let me know what URL and I'll update my end.)"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-11T18:41:22.585100",
          "text": "<@Julia> yes, we do not yet have a candidate build. It sounds like this might come together in the next day or two."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-11T18:54:43.585900",
          "text": "Understood. Thank you."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-12T01:44:37.000400",
          "text": "<@Julia> Thanks for your time looking into this."
        }
      ]
    },
    {
      "conversation_id": "480",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeffery: installing Drracket on a new Macbook fails. I have just installed macTex so brew seems to be working: Jimmys-MacBook-Pro:~ jsnielsen$ brew cask install racket ==&gt; Satisfying dependencies ==&gt; Downloading <[URL] curl: (7) Failed to connect to <[URL] port 443: Operation timed out Error: Download failed on Cask 'racket' with message: Download failed: <[URL]\nJeffery: operation has timed out several times including yesterday.\nShavon: Jeffery It seems the mirror has been having a few issues. Maybe Merna or Clarinda can suggest alternatives.\nShavon: Jeffery not sure if there's anything special with that [CODE] thing but you can always download the [CODE] from <[URL]\nShavon: which looks like it's working.\nJeffery: thx Shavon I will get it from utah.\nJeffery: Shavon thanks. All is well now, just had to add the $PATH manually. did so via the instructions on <[URL]\nShavon: Perfect, great to hear. Now, grab an espresso and go Racket! :sunglasses:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 59.7,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeffery",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Jeffery",
          "timestamp": "2019-04-12T05:32:58.001700",
          "text": "installing Drracket on a new Macbook fails. I have just installed macTex so brew seems to be working:\nJimmys-MacBook-Pro:~ jsnielsen$ brew cask install racket\n==&gt; Satisfying dependencies\n==&gt; Downloading <https://mirror.racket-lang.org/installers/7.2/racket-7.2-x86_64-macosx.dmg>\n\ncurl: (7) Failed to connect to <http://mirror.racket-lang.org|mirror.racket-lang.org> port 443: Operation timed out\nError: Download failed on Cask 'racket' with message: Download failed: <https://mirror.racket-lang.org/installers/7.2/racket-7.2-x86_64-macosx.dmg>"
        },
        {
          "user": "Jeffery",
          "timestamp": "2019-04-12T05:33:27.002100",
          "text": "operation has timed out several times including yesterday."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-12T05:46:02.002900",
          "text": "<@Jeffery> It seems the mirror has been having a few issues. Maybe <@Merna> or <@Clarinda> can suggest alternatives."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-12T05:46:56.003600",
          "text": "<@Jeffery> not sure if there's anything special with that `brew` thing but you can always download the `dmg` from <https://www.cs.utah.edu/plt/installers/7.2/racket-7.2-x86_64-macosx.dmg>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-12T05:47:13.003900",
          "text": "which looks like it's working."
        },
        {
          "user": "Jeffery",
          "timestamp": "2019-04-12T05:47:41.004500",
          "text": "thx <@Shavon> I will get it from utah."
        },
        {
          "user": "Jeffery",
          "timestamp": "2019-04-12T06:31:47.006200",
          "text": "<@Shavon> thanks. All is well now, just had to add the $PATH manually. did so via the instructions on <https://beautifulracket.com/setting-the-mac-os-path.html>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-12T06:32:40.006700",
          "text": "Perfect, great to hear. Now, grab an espresso and go Racket! :sunglasses:"
        }
      ]
    },
    {
      "conversation_id": "481",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herman: Is anyone doing anything with racket and webassembly? I saw 3 projects on github but I don't think there is much activity.\nKami: Mine is there: <[URL]\nHerman: Kami Cool, I missed that somehow.\nKami: It was just an experiment, but I got a game working with it\nHerman: I've been playing with web assembly text, but clearly that is going to take a long time to produce anything useful.\nKami: Well, I just had to make a canvas fill correctly with pixel data, and from there everything went smoothly\nHerman: Nice",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 6.73,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Herman",
          "timestamp": "2019-04-12T09:02:15.007900",
          "text": "Is anyone doing anything with racket and webassembly? I saw 3 projects on github but I don't think there is much activity."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-12T09:02:51.008400",
          "text": "Mine is there:\n<https://github.com/euhmeuh/wasm-adventure>"
        },
        {
          "user": "Herman",
          "timestamp": "2019-04-12T09:03:30.009100",
          "text": "<@Kami> Cool, I missed that somehow."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-12T09:03:59.009400",
          "text": "It was just an experiment, but I got a game working with it"
        },
        {
          "user": "Herman",
          "timestamp": "2019-04-12T09:05:25.010300",
          "text": "I've been playing with web assembly text, but clearly that is going to take a long time to produce anything useful."
        },
        {
          "user": "Kami",
          "timestamp": "2019-04-12T09:08:50.011000",
          "text": "Well, I just had to make a canvas fill correctly with pixel data, and from there everything went smoothly"
        },
        {
          "user": "Herman",
          "timestamp": "2019-04-12T09:08:59.011200",
          "text": "Nice"
        }
      ]
    },
    {
      "conversation_id": "482",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Prince: How would I convert a procedure name to a string for use in [CODE]?\nJulia: Prince [CODE] should give you that for procedures (and other values like structs and things made using structs likes ports etc.).\nJulia: Well it gives you a symbol but you can [CODE] or use [CODE].\nJulia: Even anonymous function values from [CODE] get names, they're just not always good names. :slightly_smiling_face: You can [CODE] them. e.g. A few months ago I blogged about doing that with thread thunks for better logging output: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 6.2,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Prince"
        ]
      },
      "timeline": [
        {
          "user": "Prince",
          "timestamp": "2019-04-12T12:58:29.012600",
          "text": "How would I convert a procedure name to a string for use in `string-append`?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-12T13:01:03.013800",
          "text": "<@Prince> `object-name` should give you that for procedures (and other values like structs and things made using structs likes ports etc.)."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-12T13:02:39.014400",
          "text": "Well it gives you a symbol but you can `symbol-&gt;string` or use `~a`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-12T13:04:41.016000",
          "text": "Even anonymous function values from `lambda` get names, they're just not always good names. :slightly_smiling_face:\nYou can `procedure-rename` them.\ne.g. A few months ago I blogged about doing that with thread thunks for better logging output: <https://www.greghendershott.com/2018/11/thread-names.html>"
        }
      ]
    },
    {
      "conversation_id": "483",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: I am getting this strange error from [CODE], inconsistently, some of the many times I call it in a loop: [CODE_BLOCK] I hope the error message could help to track down the problem, because it refers to [CODE] and there is no such predicate: the contract asks for [CODE]. But so far I haven't found [CODE] in the Racket sources. The problem doesn't seem to be actually getting the file size, because, out of context, this works: [CODE_BLOCK] Also, in case it's relevant, I encountered this on Ubuntu, despite what you might guess from the file name in question.\nLoma: Not sure if you are using [CODE] (<[URL] as its [CODE] uses the [CODE] struct provided by this package. Otherwise I could not provide more help.\nKristeen: Madelaine that's indeed odd\nMerna: Are you familiar with the \"file-exists?\" predicate? I would imagine that the intent of this contract violation is to signal that the file fails this predicate. Just a guess, though.\nGonzalo: I think that Loma’s response (in the slack thread) is a compelling theory of how that error message might be generated, but I have no idea how an entirely different [CODE] procedure could get called if it’s really just running in a loop!\nMadelaine: Loma Nope, I'm just using the [CODE] from [CODE]. (Or at least, per Gonzalo's comment, I think I am, and I seem to be on the other iterations of the loop.)\nMadelaine: Merna Yes, my guess was that [CODE] is a mis-typed version of [CODE]—but, of course, the file _does_ exist, and Racket knows that except in this loop. I wondered if the problem might be a system-level error (like, maybe I'm sizing too many files too quickly or something) that a low-level layer like [CODE] is incorrectly assuming to be a file-does-not-exist error: but, as I said, I haven't found anywhere in the source that would put the string [CODE] into an error message.\nMadelaine: The program is very short; here it is: [CODE_BLOCK] (The [CODE] is from a previous attempt at debugging, which wasn't helpful.)\nMadelaine: The issue is that I haven't yet managed to reproduce the error outside of walking these particular directories, which are many hundreds of GB.\nKatharine: do you intend for [CODE] to call the field accessor of your [CODE] at the top there? that looks like what could be happening\nGonzalo: Yes, it seems like that should always fail.\nMadelaine: Ugh. Yes, that would be the problem. I don't know why it seemed to work for some number of iterations into the loop … I guess I must not have been getting to the [CODE] case as early as I expected. Thanks, all.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 12,
        "duration_minutes": 153.35,
        "contains_question": true,
        "action_keywords": [
          "must",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Katharine",
          "Kristeen",
          "Loma",
          "Madelaine",
          "Merna"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-04-12T13:14:47.020400",
          "text": "I am getting this strange error from `file-size`, inconsistently, some of the many times I call it in a loop:\n```\nfile-size: contract violation\n  expected: file?\n  given: #&lt;path:/pond/quick/AppleStoreBackup/Music/.DS_Store&gt;\n```\nI hope the error message could help to track down the problem, because it refers to `file?` and there is no such predicate: the contract asks for `path-string?`. But so far I haven't found `file?` in the Racket sources.\nThe problem doesn't seem to be actually getting the file size, because, out of context, this works:\n```\nphilip@avalon:~$ racket\nWelcome to Racket v7.2.\n&gt; (file-size \"/pond/quick/AppleStoreBackup/Music/.DS_Store\")\n10244\n&gt; (file-size (bytes-&gt;path #\"/pond/quick/AppleStoreBackup/Music/.DS_Store\"))\n10244\n&gt; (bytes-&gt;path #\"/pond/quick/AppleStoreBackup/Music/.DS_Store\")\n#&lt;path:/pond/quick/AppleStoreBackup/Music/.DS_Store&gt;\n```\nAlso, in case it's relevant, I encountered this on Ubuntu, despite what you might guess from the file name in question."
        },
        {
          "user": "Loma",
          "timestamp": "2019-04-12T13:31:41.020500",
          "text": "Not sure if you are using `htdp/dir` (<https://docs.racket-lang.org/teachpack/dir.html?q=htdp%2Fdir>), as its `file-size` uses the `file` struct provided by this package. Otherwise I could not provide more help."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-12T13:33:42.020900",
          "text": "<@Madelaine> that's indeed odd"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-12T13:42:35.021900",
          "text": "Are you familiar with the \"file-exists?\" predicate? I would imagine that the intent of this contract violation is to signal that the file fails this predicate. Just a guess, though."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-12T13:44:45.023000",
          "text": "I think that <@Loma>’s response (in the slack thread) is a compelling theory of how that error message might be generated, but I have no idea how an entirely different `file-size` procedure could get called if it’s really just running in a loop!"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-12T14:33:41.023200",
          "text": "<@Loma> Nope, I'm just using the `file-size` from `racket/base`. (Or at least, per <@Gonzalo>'s comment, I think I am, and I seem to be on the other iterations of the loop.)"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-12T14:39:17.027300",
          "text": "<@Merna> Yes, my guess was that `file?` is a mis-typed version of `file-exists?`—but, of course, the file _does_ exist, and Racket knows that except in this loop. I wondered if the problem might be a system-level error (like, maybe I'm sizing too many files too quickly or something) that a low-level layer like `rktio` is incorrectly assuming to be a file-does-not-exist error: but, as I said, I haven't found anywhere in the source that would put the string `file?` into an error message."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-12T15:22:34.032400",
          "text": "The program is very short; here it is:\n```\n(struct directory (path-bytes) #:prefab)\n(struct file (path-bytes size) #:prefab)\n(struct symlink (path-bytes target) #:prefab)\n\n(define roots\n  '(#\"/pond/quick/AppleStoreBackup/Music/\"\n    #\"/pond/iTunes/\"\n    #\"/pond/aux-storage/2018-02-04-iTunes-pre-purge/\"\n    #\"/pond/aux-storage/iTunes-remote/\"\n    #\"/pond/aux-storage/Sapientia~/philip/Music/\"))\n\n(module+ main\n  (require racket/cmdline racket/file)\n  (command-line\n   #:args (output-file)\n   (call-with-atomic-output-file output-file\n     (λ (out tmp)\n       (for* ([root (in-list roots)]\n              [pth (in-directory (bytes-&gt;path root))])\n         (define bs (path-&gt;bytes pth))\n         (write\n          (cond\n            [(link-exists? pth)\n             (symlink bs (path-&gt;bytes (resolve-path pth)))]\n            [(directory-exists? pth)\n             (directory bs)]\n            [(file-exists? pth)\n             (file bs (with-handlers ([exn:fail? (λ (e)\n                                                   (println e)\n                                                   (println pth)\n                                                   (raise e))])\n                        (file-size pth)))]\n            [else\n             bs])\n          out))))))\n```\n(The `with-handlers` is from a previous attempt at debugging, which wasn't helpful.)"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-12T15:23:37.033300",
          "text": "The issue is that I haven't yet managed to reproduce the error outside of walking these particular directories, which are many hundreds of GB."
        },
        {
          "user": "Katharine",
          "timestamp": "2019-04-12T15:26:35.034700",
          "text": "do you intend for `file-size` to call the field accessor of your `struct file` at the top there? that looks like what could be happening"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-12T15:41:42.035200",
          "text": "Yes, it seems like that should always fail."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-12T15:48:08.037700",
          "text": "Ugh. Yes, that would be the problem. I don't know why it seemed to work for some number of iterations into the loop … I guess I must not have been getting to the `file-exists?` case as early as I expected. Thanks, all."
        }
      ]
    },
    {
      "conversation_id": "484",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: I genuinely looked in the source and can't find a way it could generate that error message\nJulia: Madelaine Not sure it matters, but: What is the loop iterating? Items from an [CODE] sequence? Or from [CODE]? Or elsewhere?\nGonzalo: How big is the program producing the error message? Can you make a smallish program that reproduces it?\nGonzalo: …which DrRacket’s binding arrows would make very clear, I might add. :)\nJulia: Ah. So Loma had the right intuition -- are we sure what what [CODE] is bound to? Gonzalo is right, the DrR binding arrows help with that, if you're using DrR and have background expansion on. Otherwise go-to-definition is another sanity check. (I'm typing this as captain-obvious postmortem notes for my own benefit.)\nJulia: This reminds me, lately I've been experimenting more with capitalizing struct names. At least, I was doing that with some prefab structs used for a light wire format. That might have helped here. But I'm not sure that's a good argument for or against capitalizing struct names.\nJulia: I guess it's really just: Racket lets you redefine _everything_. Which is awesome and usually isn't a problem.. but sometimes it is.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 90.88,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Julia",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-04-12T14:38:25.026500",
          "text": "I genuinely looked in the source and can't find a way it could generate that error message"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-12T15:20:06.030900",
          "text": "<@Madelaine> Not sure it matters, but: What is the loop iterating? Items from an `in-directory` sequence? Or from `directory-list`? Or elsewhere?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-12T15:20:19.031300",
          "text": "How big is the program producing the error message? Can you make a smallish program that reproduces it?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-12T15:43:08.036100",
          "text": "…which DrRacket’s binding arrows would make very clear, I might add. :)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-12T16:06:40.041600",
          "text": "Ah. So <@Loma> had the right intuition -- are we sure what what `file-size` is bound to?\n<@Gonzalo> is right, the DrR binding arrows help with that, if you're using DrR and have background expansion on.\nOtherwise go-to-definition is another sanity check.\n(I'm typing this as captain-obvious postmortem notes for my own benefit.)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-12T16:07:44.042900",
          "text": "This reminds me, lately I've been experimenting more with capitalizing struct names.\nAt least, I was doing that with some prefab structs used for a light wire format.\nThat might have helped here. But I'm not sure that's a good argument for or against capitalizing struct names."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-12T16:09:18.043600",
          "text": "I guess it's really just: Racket lets you redefine _everything_. Which is awesome and usually isn't a problem.. but sometimes it is."
        }
      ]
    },
    {
      "conversation_id": "485",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Clarinda When you use [CODE], what are the module path's resolved relative to?\nMarcelina: (or I guess, does it just produce a syntax object with unresolved module path indexes.)\nClarinda: I think the MPIs should be built on some existing MPI, or they should be non-relative MPIs (i.e., don’t use [CODE] as the base if the path is relative).\nMarcelina: Sure, I just note that you can use the self module path ([CODE]) without any seeming errors.\nMarcelina: LIke with: [CODE_BLOCK]\nPriscila: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 2400.1,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Marcelina",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-12T17:56:28.044300",
          "text": "<@Clarinda> When you use `syntax-binding-set-extent`, what are the module path's resolved relative to?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-12T17:56:48.044700",
          "text": "(or I guess, does it just produce a syntax object with unresolved module path indexes.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-12T18:00:13.046100",
          "text": "I think the MPIs should be built on some existing MPI, or they should be non-relative MPIs (i.e., don’t use `#f` as the base if the path is relative)."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-12T18:04:48.047200",
          "text": "Sure, I just note that you can use the self module path (`(module-path-index-join #f #f)`) without any seeming errors."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-12T18:07:08.047600",
          "text": "LIke with:\n\n```\n(syntax-binding-set-&gt;syntax\n (syntax-binding-set-extend\n  (syntax-binding-set)\n  'blue\n  0\n  (module-path-index-join #f #f))\n  'hello)\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T09:56:34.054100",
          "text": "<https://github.com/scheme-live/library.readscheme.org>"
        }
      ]
    },
    {
      "conversation_id": "486",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Neda: Hi Could anyone help me with the project I'm working on? The project is to implement linear image filters. Could you give some advice that could help me with the project? e.g. Is it OK to read image as bitmap, convert to color-list and work with the colors (pixels) or it is better to use flomap or something else? P.S. I am new to racket\nPriscila: Neda Since a linear filter requires you to use the color values for neighbouring pixels, I think a list-of-lists representation of the data will be slow.\nPriscila: I think, flomaps will be better for your purpose.\nPriscila: module-top-level declarations?\nPriscila: Does (current-namespace) return a namespace containing an instantiation of the module?\nPriscila: Just thinking aloud: If the button callback only gets a reference to the UI object, is it possible to make anew drracket:frame that holds the information you need (so you can get it from the button)?\nPriscila: The repl has a get-user-eventspace\nPriscila: and a get-user-namespace\nPriscila: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 9,
        "duration_minutes": 386.97,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "requires",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Neda",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Neda",
          "timestamp": "2019-04-14T04:54:38.052000",
          "text": "Hi\nCould anyone help me with the project I'm working on?\nThe project is to implement linear image filters. Could you give some advice that could help me with the project?\ne.g. Is it OK to read image as bitmap, convert to color-list and work with the colors (pixels) or it is better to use flomap or something else?\n\nP.S. I am new to racket"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T06:16:45.053500",
          "text": "<@Neda>   Since a linear filter requires you to use the color values for neighbouring pixels, I think a list-of-lists representation of the data will be slow."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T06:17:30.053900",
          "text": "I think, flomaps will be better for your purpose."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T11:09:51.056100",
          "text": "module-top-level declarations?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T11:15:32.058400",
          "text": "Does (current-namespace) return a namespace containing an instantiation of the module?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T11:17:24.059900",
          "text": "Just thinking aloud:  If the button callback only gets a reference to the UI object, is it possible to make anew drracket:frame that holds the information you need (so you can get it from the button)?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T11:21:23.061200",
          "text": "The repl has a get-user-eventspace"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T11:21:32.061400",
          "text": "and a get-user-namespace"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-14T11:21:36.061600",
          "text": "<https://docs.racket-lang.org/tools/drracket_rep.html?q=drracket%3Arep>"
        }
      ]
    },
    {
      "conversation_id": "487",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Is there a clever way to let DrRacket button functions access the top-level bindings in the current module? Or do you just have to pass things around with parameters?\nLillian: And then … :thinking_face: IIUC the only argument a DrRacket button function gets is a reference to the window itself (that is, a UI object).",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 9.15,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-04-14T11:04:34.055500",
          "text": "Is there a clever way to let DrRacket button functions access the top-level bindings in the current module? Or do you just have to pass things around with parameters?"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-04-14T11:13:43.057300",
          "text": "And then … :thinking_face: IIUC the only argument a DrRacket button function gets is a reference to the window itself (that is, a UI object)."
        }
      ]
    },
    {
      "conversation_id": "488",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: OK, that at least proves to me why the parameter approach won’t work (because DrRacket doesn’t reload the button function every time the definitions window is refreshed)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-04-14T11:50:17.063900",
          "text": "OK, that at least proves to me why the parameter approach won’t work (because DrRacket doesn’t reload the button function every time the definitions window is refreshed)"
        }
      ]
    },
    {
      "conversation_id": "489",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: I'm probably being thick, but is there a way to influence the pretty-print depth that rackunit uses when printing test failures? I've tried adjusting pretty-print-depth in the test module, and even calling a failing test with (parameterize ([pretty-print-depth 50)) ...), to no avail.\nGonzalo: I am not certain whether or not this answer is right, but you might try adjusting [CODE], instead: <[URL]\nMichelina: that's a good guess (thanks!), but that doesn't seem to influence what I'm seeing\nMichelina: fwiw, I'm using check-equal? (It's conceivable that other predicates do things differently. I seem to recall that check-match is really verbose when it reports a failure.)\nMichelina: also fwiw, I've trying to print a list whose members are transparent structs. there may be some setting having to do with structs that's getting in my way\nMichelina: that sounds like a good place to dig in -- thanks!\nMichelina: Julia thanks!\nMichelina: turns out it was a boneheaded mistake of mine -- I hadn't consistently defined ALL the structs I'm working with as transparent (just some of them). d'oh.\nMichelina: (oops, I missed this discussion [Slack newb])\nMichelina: yeah, no 418 -- you can do that yourself if you want some easter eggs in your Racket-powered web app ;-&gt;\nMichelina: Karen makes sense -- it seems pretty redundant to me in essentially all cases, though I can imagine apps that might respond differently to the same status code but different messages\nKaren: it's very confusing\nGonzalo: It could be changed to say something along the lines of “cannot be expanded directly, only partially expanded”, but ultimately the confusion of how definitions in general work seems hard to avoid (since the notion of partial expansion is a little non-obvious).\nKaren: I think the underlying source of confusion is that [CODE] looks like it ought to be an identity macro of some sort, but [CODE] doesn't work in places where [CODE] works\nKaren: What I mean is, I think of [CODE] as something that changes when expansion occurs, but not something that changes the _result_ of expansion. So if the only thing a macro does is [CODE], with nothing else going on whatsoever, I would intuit that it’s not doing anything at all and should act like an identity function.\nKaren: Yes. I gather that this intuition does not work here. I’m saying that it’s a shame it doesn’t, and that the fact that it doesn’t is confusing.\nAmira: anyone know how to find the numbers of seconds in a day using [CODE]? I've been looking for a function [CODE] where [CODE] gives the right number\nKaren: Amira I think you can’t, in general\nAmira: No way. I'm not looking for the number of seconds in April 15th 2019. I just to know \"how many seconds in 24 hours\"?\nKaren: but one day is not always equal to 24 hours\nPriscila: Can period-between be used?\nKaren: wait, nevermind I’m confused now: &gt; Gregor assumes that all days have exactly 86,400 seconds. Therefore, it is based fundamentally on mean solar time, or Univeral Time, and not on Coordinated Universal Time (UTC), the civil time scale adopted by most of the world. In the interest of reconciling the SI second to a close approximation of mean solar time, UTC occasionally inserts an extra leap second into a day.\nPriscila: wait, why are you confused now - you found the answer.\nAmira: no! 86400 is not the answer I want\nKaren: I’m confused because I remember opening a github issue asking about this and getting a different answer of some sort\nPriscila: ben I know, so the answer is \"no\" :wink:\nAmira: but that's funny about the docs --- I was thinking Karen was right and I should use a constant instead of going through gregor\nAmira: I don't think period-between works\nKaren: related: <[URL]\nGonzalo: I don’t understand why 86,400 is not the answer you want\nPriscila: leap seconds!\nGonzalo: But if ben is explicitly _not_ looking for the number of seconds on a particular day, then how are leap seconds relevant?\nPriscila: good point!\nKaren: Oh wait, now I know why this is relevant: daylight savings time\nGonzalo: Even then, that would involve a specific day\nGonzalo: Unless Amira is just saying he doesn’t want to write the magic number “86,400” in his code\nGonzalo: In that case, I think Priscila is right, and [CODE] can get you there\nKaren: my assumption is that a function [CODE] from [CODE] to a number of seconds shouldn’t break the invariant that adding the original date period to a moment gives the same answer as adding [CODE] does\nAmira: but [CODE] expects datetimes, not periods\nGonzalo: Yes, you have to indirect through a date, since although days are always 86,400 seconds long, the same does not hold for other time units\nGonzalo: So you couldn’t have an operation that, say, converts [CODE] into seconds without knowing a specific month (since months vary in length)\nGonzalo: But if you’re relying on the assumption that all days have the same length, anyway (which you are, since you’re using a constant instead of recalculating it as-needed), then you can just make two datetimes exactly one day apart and use [CODE] on that.\nAmira: ok thanks everyone\nShanell: Amira Number of seconds in a local day, then?\nShanell: You should be able to get that. Lemme take a look.\nShanell: (Sorry, mentioned the wrong Ben initially.)\nAmira: number of seconds in [CODE] would be ok too\nShanell: But, to be clear: - Gregor does not do proper UTC, so leap seconds won't be counted. - A _local_ date can have a number of seconds different from 86,400.\nShanell: That would always have to be 86,400. (Wow, I keep tagging the wrong Ben. I Slack poorly.)\nShanell: I think time-periods should be able to get you that info. But sometimes I forget what functionality is in gregor and what is in an unreleased successor to gregor. I'll check on all of this.\nShanell: Huh. Looks like that function does not exist in gregor. I was looking for a [CODE], which is a perfectly sensible function (unlike [CODE] which would be nonsense, unless you anchored the period to a particular date in a particular zone).\nShanell: Yeah, [CODE] (again, unreleased) has a [CODE]. I don't see any reason not to add that to [CODE], too.\nShanell: Right now, I think the only way to get this is: [CODE_BLOCK]\nShanell: which others have mentioned\nShanell: (And which is clearly not convenient.)\nKaren: Shanell why would [CODE] be unreasonable, exactly? Since date periods seem unrelated to any fixed point in time and leap seconds are ignored\nShanell: Because I wouldn't want these two things to produce different results: - [CODE] - [CODE]\nShanell: What it comes down to is that a [CODE] does not represent something that can be reduced to a number of seconds, unless you anchor it.\nShanell: How many seconds are there in a month?\nKaren: Shanell Are there ever points in time where [CODE] is not equal to [CODE]? Like, due to daylight savings time or something?\nShanell: Nope\nShanell: All time periods are reducible to nanoseconds, because of the \"we do not care about leap seconds\" rule.\nKaren: I think I’m just confused about what date periods are exactly. They don’t seem to be anchored to any points in time, but they also don’t represent a fixed amount of time because adding [CODE] is not always the same as adding [CODE]\nShanell: Daylight savings time doesn't change the number of seconds in a minute or hour, or anything like that.\nShanell: Karen That's right. They represent abstract quantities which can be added to concrete date-providers.\nShanell: They are also the result of a [CODE], which starts with two concrete items. But this is admittedly more problematic. And [CODE] in fact handles this poorly. Witness: [CODE_BLOCK]\nShanell: The correct response is to reject the question, not to give a baffling answer.\nPriscila: Ok, that answer doesn't make sense.\nKaren: This is so weird to me because it’s not like other cases I think of as similar, like converting between yards and inches, where there’s two different abstract units for the same conceptual dimension. Here’s there’s two _distinct_ dimensions of time, where one is seconds and the other is these weird calendar days. They’re not measuring the same thing at all.\nShanell: That's exactly right.\nKaren: What if we just…. never used date periods?\nShanell: There's no requirement to\nShanell: But I'm not going to get rid of date arithmetic, because that's genuinely useful.\nShanell: Even though it's weird.\nKaren: yeah for things like recurring schedules it does make sense\nKaren: I don’t want “do this every seven days, starting at midnight on this day” to oscillate back and forth between actually doing it at midnight and doing it at 1AM / 11PM based on how daylight savings time works out\nShanell: I should mention that the above example from [CODE] isn't problematic in [CODE], because there are separate [CODE], [CODE], and [CODE] functions, which have contracts limiting their use.\nKaren: I think a period like [CODE] is weird because it’s implying that these units are compatible somehow\nShanell: Yeah, and we could just completely separate date and time periods. That might be better.\nKaren: Calling them date periods and time periods but not unifying them is also kind of confusing, because it makes you wonder why there aren’t generic period operations. Maybe if they were just called completely separate things?\nShanell: Makes sense\nKaren: What do datetime libraries in other languages usually call these things? I think [CODE] is roughly equivalent to [CODE]\nShanell: Yeah, [CODE] has separate notions of Period and Duration, which roughly correspond to date and time periods in gregor.\nKaren: hmmm, and they do have a common [CODE] interface and they specify that [CODE] assumes fixed 24-hour days while [CODE] doesn’t (because it doesn’t represent fractions of days at all)",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 84,
        "duration_minutes": 1624.93,
        "contains_question": true,
        "action_keywords": [
          "action",
          "complete",
          "discuss",
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Gonzalo",
          "Karen",
          "Michelina",
          "Priscila",
          "Shanell"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-04-14T13:57:37.066000",
          "text": "I'm probably being thick, but is there a way to influence the pretty-print depth that rackunit uses when printing test failures? I've tried adjusting pretty-print-depth in the test module, and even calling a failing test with (parameterize ([pretty-print-depth 50)) ...), to no avail."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-14T13:58:30.066400",
          "text": "I am not certain whether or not this answer is right, but you might try adjusting `error-print-width`, instead: <https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error-print-width%29%29>"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-14T14:01:21.067400",
          "text": "that's a good guess (thanks!), but that doesn't seem to influence what I'm seeing"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-14T14:04:30.068400",
          "text": "fwiw, I'm using check-equal? (It's conceivable that other predicates do things differently. I seem to recall that check-match is really verbose when it reports a failure.)"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-14T14:12:01.069700",
          "text": "also fwiw, I've trying to print a list whose members are transparent structs. there may be some setting having to do with structs that's getting in my way"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-14T15:42:48.071000",
          "text": "that sounds like a good place to dig in -- thanks!"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-15T00:02:10.073300",
          "text": "<@Julia> thanks!"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-15T00:02:54.074100",
          "text": "turns out it was a boneheaded mistake of mine -- I hadn't consistently defined ALL the structs I'm working with as transparent (just some of them). d'oh."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-15T01:55:53.074200",
          "text": "(oops, I missed this discussion [Slack newb])"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-15T01:56:30.074400",
          "text": "yeah, no 418 -- you can do that yourself if you want some easter eggs in your Racket-powered web app ;-&gt;"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-15T01:57:55.074600",
          "text": "<@Karen> makes sense -- it seems pretty redundant to me in essentially all cases, though I can imagine apps that might respond differently to the same status code but different messages"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T12:54:47.077400",
          "text": "it's very confusing"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T13:08:59.079100",
          "text": "It could be changed to say something along the lines of “cannot be expanded directly, only partially expanded”, but ultimately the confusion of how definitions in general work seems hard to avoid (since the notion of partial expansion is a little non-obvious)."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T14:36:31.082100",
          "text": "I think the underlying source of confusion is that `m` looks like it ought to be an identity macro of some sort, but `(m (define ...))` doesn't work in places where `(define ...)` works"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T14:56:42.088100",
          "text": "What I mean is, I think of `local-expand` as something that changes when expansion occurs, but not something that changes the _result_ of expansion. So if the only thing a macro does is `local-expand`, with nothing else going on whatsoever, I would intuit that it’s not doing anything at all and should act like an identity function."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:09:32.091200",
          "text": "Yes. I gather that this intuition does not work here. I’m saying that it’s a shame it doesn’t, and that the fact that it doesn’t is confusing."
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:11:39.092200",
          "text": "anyone know how to find the numbers of seconds in a day using `gregor`?\nI've been looking for a function `f` where `(f (days 1))` gives the right number"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:12:01.092600",
          "text": "<@Amira> I think you can’t, in general"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:13:13.093900",
          "text": "No way. I'm not looking for the number of seconds in April 15th 2019. I just to know \"how many seconds in 24 hours\"?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:14:28.095100",
          "text": "but one day is not always equal to 24 hours"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-15T15:15:16.096100",
          "text": "Can period-between be used?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:17:27.097500",
          "text": "wait, nevermind I’m confused now:\n&gt; Gregor assumes that all days have exactly 86,400 seconds. Therefore, it is based fundamentally on mean solar time, or Univeral Time, and not on Coordinated Universal Time (UTC), the civil time scale adopted by most of the world. In the interest of reconciling the SI second to a close approximation of mean solar time, UTC occasionally inserts an extra leap second into a day."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-15T15:18:48.098400",
          "text": "wait, why are you confused now - you found the answer."
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:19:06.099000",
          "text": "no! 86400 is not the answer I want"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:19:12.099200",
          "text": "I’m confused because I remember opening a github issue asking about this and getting a different answer of some sort"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-15T15:19:42.100300",
          "text": "@ben I know, so the answer is \"no\"  :wink:"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:19:43.100400",
          "text": "but that's funny about the docs --- I was thinking <@Karen> was right and I should use a constant instead of going through gregor"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:20:11.101100",
          "text": "I don't think period-between works"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:20:28.101600",
          "text": "related: <https://github.com/97jaz/gregor/issues/19>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:20:44.102000",
          "text": "I don’t understand why 86,400 is not the answer you want"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-15T15:21:03.102300",
          "text": "leap seconds!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:21:27.102800",
          "text": "But if ben is explicitly _not_ looking for the number of seconds on a particular day, then how are leap seconds relevant?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-15T15:21:35.103400",
          "text": "good point!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:21:40.103700",
          "text": "Oh wait, now I know why this is relevant: daylight savings time"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:21:53.104000",
          "text": "Even then, that would involve a specific day"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:22:16.104700",
          "text": "Unless <@Amira> is just saying he doesn’t want to write the magic number “86,400” in his code"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:22:49.105800",
          "text": "In that case, I think <@Priscila> is right, and `period-between` can get you there"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T15:22:52.106000",
          "text": "my assumption is that a function `f` from `date-period?` to a number of seconds shouldn’t break the invariant that adding the original date period to a moment gives the same answer as adding `(seconds (f p))` does"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:23:49.106400",
          "text": "but `period-between` expects datetimes, not periods"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:24:31.107200",
          "text": "Yes, you have to indirect through a date, since although days are always 86,400 seconds long, the same does not hold for other time units"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:25:08.107800",
          "text": "So you couldn’t have an operation that, say, converts `(months 1)` into seconds without knowing a specific month (since months vary in length)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:26:20.109000",
          "text": "But if you’re relying on the assumption that all days have the same length, anyway (which you are, since you’re using a constant instead of recalculating it as-needed), then you can just make two datetimes exactly one day apart and use `period-between` on that."
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:28:27.109200",
          "text": "ok thanks everyone"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:38:29.109700",
          "text": "<@Amira> Number of seconds in a local day, then?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:38:44.110000",
          "text": "You should be able to get that. Lemme take a look."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:39:10.110500",
          "text": "(Sorry, mentioned the wrong Ben initially.)"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-15T15:41:05.111800",
          "text": "number of seconds in `(hours 24)` would be ok too"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:41:08.111900",
          "text": "But, to be clear:\n- Gregor does not do proper UTC, so leap seconds won't be counted.\n- A _local_ date can have a number of seconds different from 86,400."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:41:25.112300",
          "text": "That would always have to be 86,400. (Wow, I keep tagging the wrong Ben. I Slack poorly.)"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:42:24.113400",
          "text": "I think time-periods should be able to get you that info. But sometimes I forget what functionality is in gregor and what is in an unreleased successor to gregor. I'll check on all of this."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:46:09.115000",
          "text": "Huh. Looks like that function does not exist in gregor. I was looking for a `time-period-&gt;seconds`, which is a perfectly sensible function (unlike `date-period-&gt;seconds` which would be nonsense, unless you anchored the period to a particular date in a particular zone)."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:49:45.115800",
          "text": "Yeah, `datetime-lib` (again, unreleased) has a `time-period-&gt;nanoseconds`. I don't see any reason not to add that to `gregor`, too."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:49:58.116100",
          "text": "Right now, I think the only way to get this is:\n```\n&gt; (require gregor/period)\n&gt; (period-between (datetime 2000 1 1) (datetime 2000 1 2) '(seconds))\n#&lt;period of 86400 seconds&gt;\n```"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:50:03.116300",
          "text": "which others have mentioned"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T15:50:28.116600",
          "text": "(And which is clearly not convenient.)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:17:28.119000",
          "text": "<@Shanell> why would `date-period-&gt;seconds` be unreasonable, exactly? Since date periods seem unrelated to any fixed point in time and leap seconds are ignored"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:20:19.120600",
          "text": "Because I wouldn't want these two things to produce different results:\n- `(+date-period date-provider date-period)`\n- `(+ seconds date-provider (date-period-&gt;seconds date-period))`"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:21:01.121600",
          "text": "What it comes down to is that a `date-period` does not represent something that can be reduced to a number of seconds, unless you anchor it."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:21:13.121900",
          "text": "How many seconds are there in a month?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:31:44.123600",
          "text": "<@Shanell> Are there ever points in time where `(+time-period d (hours n))` is not equal to `(+time-period d (seconds (* 60 n)))`? Like, due to daylight savings time or something?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:32:22.124400",
          "text": "Nope"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:33:15.126000",
          "text": "All time periods are reducible to nanoseconds, because of the \"we do not care about leap seconds\" rule."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:33:49.126800",
          "text": "I think I’m just confused about what date periods are exactly. They don’t seem to be anchored to any points in time, but they also don’t represent a fixed amount of time because adding `(days 1)` is not always the same as adding `(hours 24)`"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:33:54.126900",
          "text": "Daylight savings time doesn't change the number of seconds in a minute or hour, or anything like that."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:34:26.127500",
          "text": "<@Karen> That's right. They represent abstract quantities which can be added to concrete date-providers."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:36:59.129500",
          "text": "They are also the result of a `period-between`, which starts with two concrete items. But this is admittedly more problematic. And `gregor` in fact handles this poorly. Witness:\n```\n&gt; (period-between (date 2000 1 1) (date 2000 1 2) '(seconds))\n#&lt;period [empty]&gt;\n```"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:37:20.130000",
          "text": "The correct response is to reject the question, not to give a baffling answer."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-15T16:38:30.130300",
          "text": "Ok, that answer doesn't make sense."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:44:05.132200",
          "text": "This is so weird to me because it’s not like other cases I think of as similar, like converting between yards and inches, where there’s two different abstract units for the same conceptual dimension. Here’s there’s two _distinct_ dimensions of time, where one is seconds and the other is these weird calendar days. They’re not measuring the same thing at all."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:44:27.132400",
          "text": "That's exactly right."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:46:05.132600",
          "text": "What if we just…. never used date periods?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:46:36.133200",
          "text": "There's no requirement to"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:46:57.133700",
          "text": "But I'm not going to get rid of date arithmetic, because that's genuinely useful."
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:47:05.133900",
          "text": "Even though it's weird."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:47:37.134200",
          "text": "yeah for things like recurring schedules it does make sense"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:48:43.136100",
          "text": "I don’t want “do this every seven days, starting at midnight on this day” to oscillate back and forth between actually doing it at midnight and doing it at 1AM / 11PM based on how daylight savings time works out"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:49:05.136600",
          "text": "I should mention that the above example from `gregor` isn't problematic in `datetime-lib`, because there are separate `date-period-between`, `time-period-between`, and `period-between` functions, which have contracts limiting their use."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:50:59.138300",
          "text": "I think a period like `(period [days 11] [seconds 42])` is weird because it’s implying that these units are compatible somehow"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:53:06.139200",
          "text": "Yeah, and we could just completely separate date and time periods. That might be better."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:55:14.141000",
          "text": "Calling them date periods and time periods but not unifying them is also kind of confusing, because it makes you wonder why there aren’t generic period operations. Maybe if they were just called completely separate things?"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T16:56:11.141300",
          "text": "Makes sense"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T16:58:40.142800",
          "text": "What do datetime libraries in other languages usually call these things? I think `time-period` is roughly equivalent to `java.time.Duration`"
        },
        {
          "user": "Shanell",
          "timestamp": "2019-04-15T17:00:59.143400",
          "text": "Yeah, `java.time` has separate notions of Period and Duration, which roughly correspond to date and time periods in gregor."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-15T17:02:33.144800",
          "text": "hmmm, and they do have a common `TemporalAmount` interface and they specify that `Duration` assumes fixed 24-hour days while `Period` doesn’t (because it doesn’t represent fractions of days at all)"
        }
      ]
    },
    {
      "conversation_id": "490",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: IME, RackUnit sets a lot of things up in a way that makes them very awkward to customize. But my bet is that if you want to change that particular piece of behavior, you’ll have to drop down to [CODE]. <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-14T15:22:56.070600",
          "text": "IME, RackUnit sets a lot of things up in a way that makes them very awkward to customize. But my bet is that if you want to change that particular piece of behavior, you’ll have to drop down to `current-check-handler`. <https://docs.racket-lang.org/rackunit/internals.html#%28def._%28%28lib._rackunit%2Fmain..rkt%29._current-check-handler%29%29>"
        }
      ]
    },
    {
      "conversation_id": "491",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Milissa Not exactly what you were asking, at least directly, but I've found <[URL] handy when a [CODE] fails and actual vs. expected are (say) two large-ish x-expressions. Might help for list of transparent structs, too, idk.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-04-14T17:39:29.072800",
          "text": "<@Milissa> Not exactly what you were asking, at least directly, but I've found <https://docs.racket-lang.org/sexp-diff/index.html> handy when a `check-equal?` fails and actual vs. expected are (say) two large-ish x-expressions. Might help for list of transparent structs, too, idk."
        }
      ]
    },
    {
      "conversation_id": "492",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: This program has a surprising-to-me error: [CODE_BLOCK] It says: [CODE]. But where is the expression position?\nGonzalo: Kristeen You can’t expand [CODE], enclosing contexts always partial expand and discover [CODE], then handle the definition themselves (so [CODE] never handles itself). But I imagine you already knew that, so is the point you’re making just that the error message is confusing?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 45.02,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-04-15T11:43:50.075600",
          "text": "This program has a surprising-to-me error:\n```\n#lang racket\n\n(define-syntax (m stx)\n  (syntax-case stx ()\n    [(_ e1 )\n     (local-expand #'e1 'module null)]))\n\n(m (define x 1))\n```\nIt says: `define-values: not allowed in an expression position`. But where is the expression position?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T12:28:51.077100",
          "text": "<@Kristeen> You can’t expand `define-values`, enclosing contexts always partial expand and discover `define-values`, then handle the definition themselves (so `define-values` never handles itself). But I imagine you already knew that, so is the point you’re making just that the error message is confusing?"
        }
      ]
    },
    {
      "conversation_id": "493",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: If [CODE] just expanded to [CODE], it would work fine, so I’m not sure what you mean by that.\nGonzalo: That is what I meant by “the notion of partial expansion is a little non-obvious”.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 12.6,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T14:52:27.085700",
          "text": "If `m` just expanded to `e1`, it would work fine, so I’m not sure what you mean by that."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-15T15:05:03.089100",
          "text": "That is what I meant by “the notion of partial expansion is a little non-obvious”."
        }
      ]
    },
    {
      "conversation_id": "494",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: hm, is there a generic interface to making pict-convertibles? Or are we stuck with structure properties?\nLeticia: Also, are there any good guide or tutorials on using [CODE] to make GUI applications? I’ve been looking around it’s documentation but I’m a little unsure how all these pieces fit together.\nPriscila: Leticia Take a look at Alex' blog: <[URL]\nPriscila: Start here: <[URL]\nTambra: Leticia there is not. (tho i see that you might have opened a PR for one a year or so ago? <[URL] )",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 62.35,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Leticia",
          "Priscila",
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-04-16T16:00:09.149300",
          "text": "hm, is there a generic interface to making pict-convertibles? Or are we stuck with structure properties?"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-04-16T16:05:02.150300",
          "text": "Also, are there any good guide or tutorials on using `framework` to make GUI applications? I’ve been looking around it’s documentation but I’m a little unsure how all these pieces fit together."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-16T16:05:57.150700",
          "text": "<@Leticia> Take a look at Alex' blog: <https://alex-hhh.github.io/tags/racket.html>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-16T16:06:13.151100",
          "text": "Start here: <https://alex-hhh.github.io/2018/10/chess-game-using-racket-s-pasteboard.html>"
        },
        {
          "user": "Tambra",
          "timestamp": "2019-04-16T17:02:30.152900",
          "text": "<@Leticia> there is not. (tho i see that you might have opened a PR for one a year or so ago? <https://github.com/racket/pict/pull/46> )"
        }
      ]
    },
    {
      "conversation_id": "495",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tambra: (FWIW that PR is just missing docs and some tests I think)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tambra"
        ]
      },
      "timeline": [
        {
          "user": "Tambra",
          "timestamp": "2019-04-16T17:07:09.154400",
          "text": "(FWIW that PR is just missing docs and some tests I think)"
        }
      ]
    },
    {
      "conversation_id": "496",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Clarinda Is there any case where the datum in [CODE] does not need to match the symbol in [CODE]? The docs seem to indicate that it just leads to a differently named syntax object (like, say, with [CODE]), but whenever I do that [CODE] just returns that the syntax is unbound.\nMarcelina: For example: [CODE_BLOCK] returns [CODE]\nMarcelina: but replace the second [CODE] with [CODE] results in a [CODE].\nGonzalo: Marcelina It could be relevant if the lexical information of the resulting syntax object is copied onto a different datum using [CODE].\nGonzalo: Otherwise I don’t think it does anything, no.\nMarcelina: Gonzalo Oh, so something like this?: [CODE_BLOCK] Odd, but okay, thanks.\nGonzalo: Yes, that’s right.\nJulia: Got a little more time to whack away at this: <[URL]\nJulia: And so far have this: <[URL]\nJulia: Which seems to work but also I don't really know what I'm doing.\nJulia: I can't seem to show you a URL for the public project that shows you \"it works\". Unlike Travis CI, it seems you need to be logged in to see it?\nKaren: Julia it's not just you, their entire docs site is disorienting and confusing to me too\nLavette: Julia you could reduce the amount of job declarations by making the version a parameter, something like this (untested): [CODE_BLOCK]\nKaren: I hear there's something called \"orbs\" that you can use to publish reusable bits of circleci config but I really have no idea how that works",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 14,
        "duration_minutes": 1358.97,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Julia",
          "Karen",
          "Lavette",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-04-16T18:09:36.157100",
          "text": "<@Clarinda> Is there any case where the datum in `syntax-binding-set-&gt;syntax` does not need to match the symbol in `syntax-binding-set-extend`? The docs seem to indicate that it just leads to a differently named syntax object (like, say, with `rename-in`), but whenever I do that `identifier-binding` just returns that the syntax is unbound."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-16T18:10:21.157600",
          "text": "For example:\n\n```\n(identifier-binding\n  (syntax-binding-set-&gt;syntax\n   (syntax-binding-set-extend\n    (syntax-binding-set)\n    'foo\n    0\n    (module-path-index-join #f #f))\n   'foo))\n```\n\nreturns\n`'(#&lt;module-path-index&gt; foo #&lt;module-path-index&gt; foo 0 0 0)`"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-16T18:10:34.158000",
          "text": "but replace the second `foo` with `bar` results in a `#f`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-16T18:14:30.158500",
          "text": "<@Marcelina> It could be relevant if the lexical information of the resulting syntax object is copied onto a different datum using `datum-&gt;syntax`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-16T18:14:52.158800",
          "text": "Otherwise I don’t think it does anything, no."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-16T18:18:50.159500",
          "text": "<@Gonzalo> Oh, so something like this?:\n\n```\n(datum-&gt;syntax\n (syntax-binding-set-&gt;syntax\n  (syntax-binding-set-extend\n   (syntax-binding-set)\n   'foo\n   0\n   (module-path-index-join #f #f))\n  'bar)\n 'foo)\n```\nOdd, but okay, thanks."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-16T18:19:52.159700",
          "text": "Yes, that’s right."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-17T15:42:08.162300",
          "text": "Got a little more time to whack away at this:\n<https://racket.slack.com/archives/C06V96CKX/p1554125931119100>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-17T15:42:16.162600",
          "text": "And so far have this: <https://github.com/greghendershott/sha/blob/b2965395c761cb271b02d8ce23a60f0f4de7ce69/.circleci/config.yml>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-17T15:42:41.163200",
          "text": "Which seems to work but also I don't really know what I'm doing."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-17T15:43:24.163900",
          "text": "I can't seem to show you a URL for the public project that shows you \"it works\". Unlike Travis CI, it seems you need to be logged in to see it?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-17T16:14:35.166900",
          "text": "<@Julia> it's not just you, their entire docs site is disorienting and confusing to me too"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T16:40:23.171000",
          "text": "<@Julia> you could reduce the amount of job declarations by making the version a parameter, something like this (untested):\n```\njobs:\n  racket:\n    parameters:\n        version:\n            description: Racket version\n            type: string\n    &lt;&lt;: *shared\n    docker:\n      - image: jackfirth/racket:&lt;&lt;parameters.version&gt;&gt;\n```"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-17T16:48:34.174600",
          "text": "I hear there's something called \"orbs\" that you can use to publish reusable bits of circleci config but I really have no idea how that works"
        }
      ]
    },
    {
      "conversation_id": "497",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: oh yeah… I knew this felt familiar. :wink:\nLeticia: I suppose I should get on that…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.08,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-04-16T19:18:31.159900",
          "text": "oh yeah… I knew this felt familiar. :wink:"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-04-16T19:18:36.160100",
          "text": "I suppose I should get on that…"
        }
      ]
    },
    {
      "conversation_id": "498",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Whoa, I did not realize that [CODE] was a thing. That's been around since 7.1 (ish)?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-04-16T19:54:12.161500",
          "text": "Whoa, I did not realize that `syntax-binding-set` was a thing. That's been around since 7.1 (ish)?"
        }
      ]
    },
    {
      "conversation_id": "499",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deneen: Another student asked me this same exact question tonight! Which has then motivated me to take screenshots of this convo so they don’t disappear to history. Saved now and transferring to blog.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Deneen"
        ]
      },
      "timeline": [
        {
          "user": "Deneen",
          "timestamp": "2019-04-17T03:29:10.161600",
          "text": "Another student asked me this same exact question tonight! Which has then motivated me to take screenshots of this convo so they don’t disappear to history. Saved now and transferring to blog."
        }
      ]
    },
    {
      "conversation_id": "500",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Figuring out the very basic config took me a very long time",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-04-17T16:15:11.167900",
          "text": "Figuring out the very basic config took me a very long time"
        }
      ]
    },
    {
      "conversation_id": "501",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lavette: And then the [CODE] section becomes something like this: [CODE_BLOCK]\nLavette: Note that you need to change to [CODE] to enable [CODE] and other \"reusable config\" features - see <[URL]\nLavette: Yes - it's not too bad. I just wrote my first orb: <[URL]\nLavette: (not Racket related I'm afraid)\nLavette: It's basically a config file with [CODE] and [CODE] sections, plus some metadata\nLavette: <[URL]\nMarcelina: Clarinda Just another quick ping, do you know who I responsible for Racket's OpenGL context on windows?\nMarcelina: (Asking you because git blame shows you touched it last.)\nClarinda: I think I implemented it long ago, but I haven’t looked in a while\nMarcelina: Ah, I see.\nMarcelina: Unfortunately it doesn't work for intel graphics chips. :disappointed:\nMarcelina: (On windows)\nMarcelina: Unfortunately, Ben Chung and I, have made relatively little progress in tracking down the problem.\nLavette: Julia I've also had good experiences asking for help in the CircleCI forums (<[URL] I've always received useful answers from CircleCI employees.\nJulia: Lavette Thanks for all the tips!! I'll check it out probably tomorrow. (My brain's API seems to have a daily rate limit for build infrastructure ████ery :smile:)\nLavette: Glad to help. I've been deep in CircleCI-land lately, so I'd be happy to help if I can.\nMarcelina: Julia \"████ery\"....I see your brain is also running low on characters too. :stuck_out_tongue:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 17,
        "duration_minutes": 123.9,
        "contains_question": true,
        "action_keywords": [
          "build",
          "discuss",
          "implement",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Julia",
          "Lavette",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T16:41:47.172200",
          "text": "And then the `workflows` section becomes something like this:\n````\njobs:\n    - racket:\n        version: 6.2\n    - racket:\n        version: 6.4\n...\n```"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T16:45:43.173000",
          "text": "Note that you need to change to `version: 2.1` to enable `parameters` and other \"reusable config\" features - see <https://circleci.com/docs/2.0/reusing-config/#section=configuration>"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T16:52:21.175200",
          "text": "Yes - it's not too bad. I just wrote my first orb: <https://github.com/zzamboni/leanpub-orb>"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T16:52:40.175600",
          "text": "(not Racket related I'm afraid)"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T16:54:09.176100",
          "text": "It's basically a config file with `jobs` and `commands` sections, plus some metadata"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T16:54:20.176300",
          "text": "<https://circleci.com/docs/2.0/creating-orbs/#section=configuration>"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-17T16:58:25.177300",
          "text": "<@Clarinda> Just another quick ping, do you know who I responsible for Racket's OpenGL context on windows?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-17T16:58:53.178100",
          "text": "(Asking you because git blame shows you touched it last.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-17T16:58:54.178200",
          "text": "I think I implemented it long ago, but I haven’t looked in a while"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-17T16:59:00.178400",
          "text": "Ah, I see."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-17T16:59:21.178900",
          "text": "Unfortunately it doesn't work for intel graphics chips. :disappointed:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-17T16:59:31.179200",
          "text": "(On windows)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-17T16:59:53.179700",
          "text": "Unfortunately, Ben Chung and I, have made relatively little progress in tracking down the problem."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T17:21:06.180500",
          "text": "<@Julia> I've also had good experiences asking for help in the CircleCI forums (<https://discuss.circleci.com>), I've always received useful answers from CircleCI employees."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-17T17:28:09.182700",
          "text": "<@Lavette> Thanks for all the tips!! I'll check it out probably tomorrow. (My brain's API seems to have a daily rate limit for build infrastructure ████ery :smile:)"
        },
        {
          "user": "Lavette",
          "timestamp": "2019-04-17T17:31:55.183400",
          "text": "Glad to help. I've been deep in CircleCI-land lately, so I'd be happy to help if I can."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-04-17T18:45:41.184200",
          "text": "<@Julia> \"████ery\"....I see your brain is also running low on characters too. :stuck_out_tongue:"
        }
      ]
    },
    {
      "conversation_id": "502",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clarinda Does the determinism guarantee about [CODE]’s result on [CODE]-able values still hold even if the value _isn’t_ interned? That is, can I rely upon [CODE] always producing the same value for two strings that are composed of the same character sequence, even if they don’t exist at the same time and are _not_ interned? Or would I have to call [CODE] first in order to get the guarantee?\nGonzalo: As far as I can tell, the property holds today for non-interned strings, at least on 3m. But I don’t know if that’s implied to be guaranteed.\nClarinda: Yes, the guarantee is meant to hold\nGonzalo: Okay, thanks!\nClarinda: The hash code sometimes changes across versions, and it changes across VMs.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 114.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-17T19:55:57.186300",
          "text": "<@Clarinda> Does the determinism guarantee about `equal-hash-code`’s result on `read`-able values still hold even if the value _isn’t_ interned? That is, can I rely upon `equal-hash-code` always producing the same value for two strings that are composed of the same character sequence, even if they don’t exist at the same time and are _not_ interned? Or would I have to call `datum-intern-literal` first in order to get the guarantee?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-17T19:56:39.187300",
          "text": "As far as I can tell, the property holds today for non-interned strings, at least on 3m. But I don’t know if that’s implied to be guaranteed."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-17T19:56:41.187400",
          "text": "Yes, the guarantee is meant to hold"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-17T19:56:51.187600",
          "text": "Okay, thanks!"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-17T21:50:15.188400",
          "text": "The hash code sometimes changes across versions, and it changes across VMs."
        }
      ]
    },
    {
      "conversation_id": "503",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: By \"don't exist at the same time\", do you mean within the confines of a single run of the racket VM or do you mean across all eternity?\nGonzalo: I mean “across multiple runs of the Racket VM”, but not across all eternity—I don’t care if they’re different on different machines or with different versions of Racket.\nGonzalo: The documentation is a little vague on how strong the guarantee is with respect to those differences, though.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 5.08,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-04-17T21:07:24.187800",
          "text": "By \"don't exist at the same time\", do you mean within the confines of a single run of the racket VM or do you mean across all eternity?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-17T21:11:29.188000",
          "text": "I mean “across multiple runs of the Racket VM”, but not across all eternity—I don’t care if they’re different on different machines or with different versions of Racket."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-17T21:12:29.188200",
          "text": "The documentation is a little vague on how strong the guarantee is with respect to those differences, though."
        }
      ]
    },
    {
      "conversation_id": "504",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: I remember it changed a few years ago because I'd written a test that assumed an order: <[URL]\nJulia: I don't understand that, either.\nJulia: Also, that's in a REPL at the top-level. In a module, e.g. [CODE_BLOCK] the result is an error: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 183.12,
        "contains_question": false,
        "action_keywords": [
          "finish"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-04-17T23:03:26.188600",
          "text": "I remember it changed a few years ago because I'd written a test that assumed an order: <https://github.com/greghendershott/flexpr/issues/7>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-18T02:05:03.189800",
          "text": "I don't understand that, either."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-18T02:06:33.190900",
          "text": "Also, that's in a REPL at the top-level.\nIn a module, e.g.\n```\n(module m racket/base\n  (define x 42)\n  (let ([x 5]) (#%top . x)))\n```\nthe result is an error:\n```\ntop.rkt:3:24: x: unbound identifier\n  in: x\n  context...:\n   #(536 local) #(537 intdef) #(538 local) #(539 intdef) [common scopes]\n  matching binding...:\n   #(x #&lt;module-path-index='m[1578]&gt; 0)\n   [common scopes]\n  matching binding...:\n   local\n   #(536 local) #(537 intdef) #(538 local) [common scopes]\n  common scopes...:\n   #(9 module) #(411 module m)\n  location...:\n   top.rkt:3:24\n  context...:\n   do-raise-syntax-error\n   for-loop\n   finish-bodys\n   for-loop\n   finish-bodys\n   lambda-clause-expander\n   for-loop\n   loop\n   [repeats 2 more times]\n   module-begin-k\n   expand-module16\n   expand-capturing-lifts\n   temp118_0\n   temp91_0\n   compile15\n   temp85_0\n   ...\n```"
        }
      ]
    },
    {
      "conversation_id": "505",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Enoch: <[URL] I'm confused about the usage of [CODE]. why the result is [CODE] instead of [CODE]?\nAshlea: Looks like a bug, the old documents say it should be 12 <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 159.27,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Ashlea",
          "Enoch"
        ]
      },
      "timeline": [
        {
          "user": "Enoch",
          "timestamp": "2019-04-17T23:48:41.189100",
          "text": "<https://docs.racket-lang.org/reference/__top.html#%28form._%28%28quote._~23~25kernel%29._~23~25top%29%29>\nI'm confused about the usage of `#%top`.\nwhy the result is `5` instead of `12`?"
        },
        {
          "user": "Ashlea",
          "timestamp": "2019-04-18T02:27:57.191800",
          "text": "Looks like a bug, the old documents say it should be 12 <https://download.racket-lang.org/releases/6.12/doc/reference/__top.html>"
        }
      ]
    },
    {
      "conversation_id": "506",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: If it changed then, it was most likely a result of the new expander implementation",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-04-18T08:56:34.192600",
          "text": "If it changed then, it was most likely a result of the new expander implementation"
        }
      ]
    },
    {
      "conversation_id": "507",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: That interaction evaluates to [CODE] in the 7.2 DrRacket repl, the 6.1.1 DrRacket repl, and the 6.0 DrRacket repl\nAmira: Can someone with a clone of typed racket: 1. make a new file [CODE] with the contents below 2. run [CODE] [CODE_BLOCK] ? Today I'm seeing [CODE]. The error goes away if \"utils/utils.rkt\" is changed to [CODE]\nElin: By the way Enoch, if you’re looking at [CODE] because you want to refer to a top-level variable for some reason, you can use a macro for that: [CODE_BLOCK] If [CODE] and [CODE] are defined like this:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 18.87,
        "contains_question": true,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-18T12:05:02.195900",
          "text": "That interaction evaluates to `5` in the 7.2 DrRacket repl, the 6.1.1 DrRacket repl, and the 6.0 DrRacket repl"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-18T12:06:32.197300",
          "text": "Can someone with a clone of typed racket:\n1. make a new file `typed-racket/typed-racket-lib/typed-racket/a.rkt` with the contents below\n2. run `raco make a.rkt`\n```\n#lang racket/base\n(require (rename-in \"utils/utils.rkt\")\n         (utils utils tc-utils arm))\n```\n?\n\nToday I'm seeing `module: identifier already required`. The error goes away if \"utils/utils.rkt\" is changed to `typed-racket/utils/utils`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-18T12:23:54.199100",
          "text": "By the way <@Enoch>, if you’re looking at `#%top` because you want to refer to a top-level variable for some reason, you can use a macro for that:\n```\n&gt; (declare-scope top)\n&gt; (define x 12)\n&gt; (let ([x 5]) (in-scope top x))\n12\n```\nIf `declare-scope` and `in-scope` are defined like this:"
        }
      ]
    },
    {
      "conversation_id": "508",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clarinda Is there any way to create a “weak” log receiver, i.e. a receiver that does not contribute towards whether or not [CODE] returns [CODE]? My first thought was to use [CODE] to listen for when a receiver was destroyed and remove my receiver, but then I realized that isn’t guaranteed to work, since [CODE] might not become ready for synchronization if the receiver is destroyed while I’m also listening to the logger.\nClarinda: I don’t think it’s possible to achieve that goal. The last time I wanted something similar, I was trying to set up forwarding, and that’s where [CODE] and [CODE] came from (although I don’t remember whether [CODE] worked out).\nGonzalo: That’s okay… I think I can emulate it for my particular use case by adding some indirection: I think I can create two loggers instead of one, and I can send messages into the child and listen to the parent. That way, if I add my “weak” listeners to the child, then they won’t contribute to the return value of [CODE] for the parent. Still, I thought I’d ask in case there was a much easier way I was overlooking.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 19.68,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-18T13:27:10.202400",
          "text": "<@Clarinda> Is there any way to create a “weak” log receiver, i.e. a receiver that does not contribute towards whether or not `log-level?` returns `#t`? My first thought was to use `log-level-evt` to listen for when a receiver was destroyed and remove my receiver, but then I realized that isn’t guaranteed to work, since `log-level-evt` might not become ready for synchronization if the receiver is destroyed while I’m also listening to the logger."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-18T13:44:21.203500",
          "text": "I don’t think it’s possible to achieve that goal. The last time I wanted something similar, I was trying to set up forwarding, and that’s where `log-all-levels` and `log-level-evt` came from (although I don’t remember whether `log-level-evt` worked out)."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-18T13:46:51.205400",
          "text": "That’s okay… I think I can emulate it for my particular use case by adding some indirection: I think I can create two loggers instead of one, and I can send messages into the child and listen to the parent. That way, if I add my “weak” listeners to the child, then they won’t contribute to the return value of `log-level?` for the parent. Still, I thought I’d ask in case there was a much easier way I was overlooking."
        }
      ]
    },
    {
      "conversation_id": "509",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Dolly: Hello. I am relatively new to Racket and still learning my way through the different libraries. I am having trouble printing Mayan numerals in the IDE. According to Wikipedia <[URL] mayan numerals were added to Unicode 12 in 2018. When I use the code \"\\u1D2E0\" (mayan numeral for 0) I do not get the correct symbol in REPL. Can anyone direct me on where I should read or how to investigate this? Thanks in advance!\nGonzalo: I think that might just be an issue with the REPL. If I remember correctly, the default line editing library that Racket uses (which isn’t readline, to avoid the GPL) doesn’t handle Unicode very well.\nKristeen: I get \"ᴮ0\" at the repl\nGonzalo: I guess I do, too, which is also what I get not in the REPL. Looking more carefully, I think the issue is that [CODE] doesn’t do what you want—if you look at <[URL] [CODE] escapes only work with up to four digits. So I think you need [CODE], instead.\nGonzalo: If I evaluate [CODE], I get 𝋠 both in the REPL and outside of it (though my computer does not have a font that can actually render that glyph).\nGonzalo: Dolly ^\nJulia: It's interesting that [CODE] is [CODE] but [CODE] is [CODE]. That's not the case for say [CODE] or [CODE].\nDolly: Julia Gonzalo Those are the results that I get too. I did not know about \\U so thanks for that lead. I have generally remained comfortably ignorant of unicode/programming magical implementations (it is on my to learn bucket list). I suspect that there is some place to read what version of Unicode Racket has implemented and how one might go about manually updating it? I am willing to do the \"grunt\" work and contribute it to the community if that would helpful to folks.\nGonzalo: Julia I believe that is because Racket’s unicode database has not been updated in a little while, and it doesn’t know that [CODE] is a graphic character.\nKristeen: see <[URL] among other places",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 32.02,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Dolly",
          "Gonzalo",
          "Julia",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Dolly",
          "timestamp": "2019-04-18T14:31:54.209000",
          "text": "Hello. I am relatively new to Racket and still learning my way through the different libraries. I am having trouble printing Mayan numerals in the IDE. According to Wikipedia <https://en.wikipedia.org/wiki/Maya_numerals#Unicode> mayan numerals were added to Unicode 12 in 2018. When I use the code \"\\u1D2E0\" (mayan numeral for 0)  I do not get the correct symbol in REPL. Can anyone direct me on where I should read or how to investigate this? Thanks in advance!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-18T14:35:43.211400",
          "text": "I think that might just be an issue with the REPL. If I remember correctly, the default line editing library that Racket uses (which isn’t readline, to avoid the GPL) doesn’t handle Unicode very well."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-18T14:35:59.211600",
          "text": "I get \"ᴮ0\" at the repl"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-18T14:40:30.212800",
          "text": "I guess I do, too, which is also what I get not in the REPL. Looking more carefully, I think the issue is that `\\u1D2E0` doesn’t do what you want—if you look at <https://docs.racket-lang.org/reference/reader.html#%28part._parse-string%29>, `\\u` escapes only work with up to four digits. So I think you need `\\U`, instead."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-18T14:41:47.213700",
          "text": "If I evaluate `(displayln \"\\U1D2E0\")`, I get 𝋠 both in the REPL and outside of it (though my computer does not have a font that can actually render that glyph)."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-18T14:41:52.213900",
          "text": "<@Dolly> ^"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-18T14:46:17.215400",
          "text": "It's interesting that `(display \"\\U1D2E0\")` is `𝋠` but `(print \"\\U1D2E0\")` is `\"\\U0001D2E0\"`.\nThat's not the case for say `\"\\u1234\"` or `\"\\U1234\"`."
        },
        {
          "user": "Dolly",
          "timestamp": "2019-04-18T14:57:54.218000",
          "text": "<@Julia> <@Gonzalo> Those are the results that I get too. I did not know about \\U so thanks for that lead. I have generally remained comfortably ignorant of unicode/programming magical implementations (it is on my to learn bucket list). I suspect that there is some place to read what version of Unicode Racket has implemented and how one might go about manually updating it? I am willing to do the \"grunt\" work and contribute it to the community if that would helpful to folks."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-18T14:58:03.218300",
          "text": "<@Julia> I believe that is because Racket’s unicode database has not been updated in a little while, and it doesn’t know that `\\U1D2E0` is a graphic character."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-18T15:03:55.221400",
          "text": "see <https://github.com/racket/racket/blob/master/racket/src/racket/src/mk-uchar.rkt> among other places"
        }
      ]
    },
    {
      "conversation_id": "510",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Dolly: In the interim I still marvel that image is a primitive. That is bananas and I am scratching the surface on how useful that is going to be in teaching and developing. For what I am playing around with now it will be supercool to use to display my Mayan calculator. (Unicode would be cool too)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Dolly"
        ]
      },
      "timeline": [
        {
          "user": "Dolly",
          "timestamp": "2019-04-18T15:02:26.221200",
          "text": "In the interim I still marvel that image is a primitive. That is bananas and I am scratching the surface on how useful that is going to be in teaching and developing. For what I am playing around with now it will be supercool to use to display my Mayan calculator.  (Unicode would be cool too)"
        }
      ]
    },
    {
      "conversation_id": "511",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Hallie: Has anyone heard of newly announced Bosque language from Microsoft: <[URL]\nHallie: <[URL]\nHallie: Can anyone versed in Programming Language Theory explain how is it different from... functional programming?\nKristeen: I was just looking at it\nKristeen: it's really just functional programming\nHallie: thanks, that was my initial impression, but I guess everything coming from tech giants must be hyped because... reasons :slightly_smiling_face:\nKristeen: I think \"coming from tech giants\" is the wrong way to think about that\nKristeen: \"dude at MSR created a language with his ideas about programming\"\nJoseph: the same thing is all over academia\nHallie: you are probably right\nJoseph: sadly, that's just how you rally interest and money\nHallie: I used to work with 2 nobel prize laureates (not in the reasearch capacity) and it frustrated me to no end when I realised how much time they had to spend fighting for grants and \"selling\" themselves and their team's reasearch\nHallie: if they had to do it, what about the rest of academia...\nJoseph: it's definitely a full-time job",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 14,
        "duration_minutes": 54.22,
        "contains_question": true,
        "action_keywords": [
          "create",
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Joseph",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Hallie",
          "timestamp": "2019-04-18T15:28:52.222300",
          "text": "Has anyone heard of newly announced Bosque language from Microsoft: <https://github.com/Microsoft/BosqueLanguage>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-18T15:29:00.222600",
          "text": "<https://www.microsoft.com/en-us/research/uploads/prod/2019/04/beyond_structured_report_v2.pdf>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-18T15:29:55.223500",
          "text": "Can anyone versed in Programming Language Theory explain how is it different from... functional programming?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-18T16:01:11.223700",
          "text": "I was just looking at it"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-18T16:01:32.224000",
          "text": "it's really just functional programming"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-18T16:05:51.225000",
          "text": "thanks, that was my initial impression, but I guess everything coming from tech giants must be hyped because... reasons :slightly_smiling_face:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-18T16:10:41.225400",
          "text": "I think \"coming from tech giants\" is the wrong way to think about that"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-18T16:11:01.225800",
          "text": "\"dude at MSR created a language with his ideas about programming\""
        },
        {
          "user": "Joseph",
          "timestamp": "2019-04-18T16:11:21.226200",
          "text": "the same thing is all over academia"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-18T16:12:34.226800",
          "text": "you are probably right"
        },
        {
          "user": "Joseph",
          "timestamp": "2019-04-18T16:13:54.227600",
          "text": "sadly, that's just how you rally interest and money"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-18T16:16:20.229400",
          "text": "I used to work with 2 nobel prize laureates (not in the reasearch capacity) and it frustrated me to no end when I realised how much time they had to spend fighting for grants and \"selling\" themselves and their team's reasearch"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-04-18T16:17:36.230100",
          "text": "if they had to do it, what about the rest of academia..."
        },
        {
          "user": "Joseph",
          "timestamp": "2019-04-18T16:23:05.230900",
          "text": "it's definitely a full-time job"
        }
      ]
    },
    {
      "conversation_id": "512",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Dolly: thanks for this I will give it a try.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Dolly"
        ]
      },
      "timeline": [
        {
          "user": "Dolly",
          "timestamp": "2019-04-18T17:08:32.231400",
          "text": "thanks for this I will give it a try."
        }
      ]
    },
    {
      "conversation_id": "513",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Laverna: while doing a [CODE], i get a very long error (hundreds of lines?) that starts with this: [CODE]\nLaverna: the only reference to that error is <[URL] but it doesn't really have any info that helps me figure out what's happening.\nLaverna: (i'm using racket 7.2)\nLaverna: my code is relatively short, and maybe there's a better way to do what i'm trying to do:\nLaverna: [CODE_BLOCK]\nLaverna: [CODE] contains the code i want to require. the contents look like this: [CODE_BLOCK]\nLaverna: my goal is to be able to load code over the network that contains definitions my code will use.\nMai: Didn’t see this problem in 7.2.\nLaverna: is there some additional specific info you're looking for? i didn't include the approx. 500 other lines that were output.\nAmira: it sounds like you're seeing the normal output that gets printed at the info level\nAmira: so, I'm suggesting to not listen at the info level in general if you can avoid it",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 11,
        "duration_minutes": 31.58,
        "contains_question": true,
        "action_keywords": [
          "build",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Laverna",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:02:14.232800",
          "text": "while doing a `dynamic-require`, i get a very long error (hundreds of lines?) that starts with this: `racket/contract: no late-neg-projection passed to build-chaperone-contract-property`"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:03:18.233400",
          "text": "the only reference to that error is <https://github.com/racket/drracket/issues/214> but it doesn't really have any info that helps me figure out what's happening."
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:03:36.233700",
          "text": "(i'm using racket 7.2)"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:05:32.234500",
          "text": "my code is relatively short, and maybe there's a better way to do what i'm trying to do:"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:05:46.234700",
          "text": "```\n(define (set-domain domain-str)\n  (let* ([temp-file (make-temporary-file)]\n         [module temp-file])\n    (log-info \"Writing domain to ~A\" temp-file)\n    (display-to-file domain-str temp-file #:exists 'truncate)\n    (let ([initial-state (dynamic-require module 'initial-state)])\n      (log-info \"initial-state: ~S\" initial-state))))\n```"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:06:21.235400",
          "text": "`domain-str` contains the code i want to require.  the contents look like this:\n```\n#lang racket\n(provide initial-state)\n(define initial-state '(it-worked))\n```"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:09:56.235900",
          "text": "my goal is to be able to load code over the network that contains definitions my code will use."
        },
        {
          "user": "Mai",
          "timestamp": "2019-04-18T19:14:34.236000",
          "text": "Didn’t see this problem in 7.2."
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:30:27.237900",
          "text": "is there some additional specific info you're looking for?  i didn't include the approx. 500 other lines that were output."
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-18T19:30:54.238300",
          "text": "it sounds like you're seeing the normal output that gets printed at the info level"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-18T19:33:49.240000",
          "text": "so, I'm suggesting to not listen at the info level in general if you can avoid it"
        }
      ]
    },
    {
      "conversation_id": "514",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Amira: can you set [CODE] for some [CODE]?\nAmira: (and make a new logger with [CODE] instead of using [CODE])\nAmira: if I make an empty file ([CODE]) and compile it with [CODE] then it prints ~180 lines of output\nLaverna: ah, i see.\nLaverna: right, now i see buried in the output... i actually got the results i expected, it wasn't an error at all.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 7.93,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Laverna"
        ]
      },
      "timeline": [
        {
          "user": "Amira",
          "timestamp": "2019-04-18T19:28:43.236800",
          "text": "can you set `PLTSTDERR=\"error info@xxx\"` for some `xxx`?"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-18T19:29:05.237300",
          "text": "(and make a new logger with `define-logger` instead of using `log-info`)"
        },
        {
          "user": "Amira",
          "timestamp": "2019-04-18T19:32:49.239300",
          "text": "if I make an empty file (`#lang racket/base`) and compile it with `PLTSTDERR=\"info\" raco make file.rkt` then it prints ~180 lines of output"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:36:07.240200",
          "text": "ah, i see."
        },
        {
          "user": "Laverna",
          "timestamp": "2019-04-18T19:36:39.240900",
          "text": "right, now i see buried in the output... i actually got the results i expected, it wasn't an error at all."
        }
      ]
    },
    {
      "conversation_id": "515",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: These defaults are used by [CODE], you could do something in DrRacket or the [CODE] env var: <[URL]\nJulia: Some lines down, in the doc str, is the rationale: &gt; The default value sets some known \"noisy\" topics to be one &gt; level quieter. That way you can set the '* topic to a level like &gt; 'debug and not get overhwelmed by these noisy topics.\nJulia: To be clear, what Amira suggested is simpler. What I'm describing is only in case you wanted to see exceptional logger output from these other topics, just not \"noise\".",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 5.85,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-04-18T22:58:43.242300",
          "text": "These defaults are used by `racket-logger-mode`, you could do something in DrRacket or the `PLTSTDERR` env var: <https://github.com/greghendershott/racket-mode/blob/master/racket-custom.el#L293-L299>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-18T23:01:42.243300",
          "text": "Some lines down, in the doc str, is the rationale:\n&gt; The default value sets some known \"noisy\" topics to be one\n&gt; level quieter. That way you can set the '* topic to a level like\n&gt; 'debug and not get overhwelmed by these noisy topics."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-18T23:04:34.244800",
          "text": "To be clear, what <@Amira> suggested is simpler. What I'm describing is only in case you wanted to see exceptional logger output from these other topics, just not \"noise\"."
        }
      ]
    },
    {
      "conversation_id": "516",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Zada: hi all, finally wrote something about my wip language Fairylog, for programming FPGAs <[URL]\nKristeen: Zada very cool!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 128.47,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Zada"
        ]
      },
      "timeline": [
        {
          "user": "Zada",
          "timestamp": "2019-04-19T06:53:39.245400",
          "text": "hi all, finally wrote something about my wip language Fairylog, for programming FPGAs <http://pinksquirrellabs.com/blog/2019/04/17/fairylog/>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-19T09:02:07.246400",
          "text": "<@Zada> very cool!"
        }
      ]
    },
    {
      "conversation_id": "517",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Philosophy and terminology question: if modules can enter contacts with each other, does that mean modules have rights? If there was a \"software module bill of rights\" what would you expect it to contain?\nEileen: Karen have you seen this? <[URL]\nEileen: (maybe related content)\nKaren: Eileen Yes! It's what originally got me thinking about whether or not the term \"bill of rights\" makes sense for more kinds of code than just macro implementations\nEileen: I think that at a base level provides give the right to access a name. And with contracts (and blame) modules have the right that those names will deal with certain values.\nEileen: (or rather \"access a value with a specific name\")\nElin: 1. Free speech: a module has the right to provide bindings with data, print stuff, open gui windows, etc. when run. 3. Soldiers need consent before staying in someone’s house: a module has the right to guard its functions with contracts that say [CODE]. 4. Unreasonable search and seizure: Encapsulation and being able to hide information from inspectors? For this to work no one should be able to get a root-inspector unless they have a warrant with probable cause, so this right isn’t being protected completely. 5. Due-process, no double-jeopordy, no forced self-incrimination, etc: When a contract blames a module, it must have the correct reasons, it can’t just assign blame without a proper trial. A contract can’t blame a module twice for the same contract-value instance. A module can’t be forced to blame itself for a contract it didn’t invoke. This right is violated all the time. The [CODE] form just takes positive and negative blame as arguments and trusts the programer, the module being blamed doesn’t have any say in that. 6. Trial, impartial jury, right to legal counsel and witnesses in your favor: When a contract blames a module it has a right to a trial with legal counsel to defend it? When a contract blames a module there is no trial, the programmer just assumes it’s guilty. This right is also violated all the time. 7,8. um this analogy is starting to break down. 9. Don’t misinterpret enumurations. 10. Powers not delegated to the federal government or prohibited by it, are given to the states or the people: I don’t know how this would apply to modules or contracts.\nKaren: Clarifications: in this context, \"software module\" does not necessarily mean \"Racket module\". Functions can be modules, as well as Java classes, command line programs, web services, virtual machine images, and linkable object code files. Also, a software bill of rights doesn't have to map one-to-one (or at all) to the US bill of rights (and it probably shouldn't).\nElin: But reflection systems that prevent proper encapsulation are still a violation of the module’s rights.\nKaren: I think so, yes. I think \"right to privacy\" is a reasonable demand\nKaren: Meaning the right for a module to hide information from another module if it is not relevant to the contract between them\nJulia: Karen Hobbes might argue that, beneath the veneer of social contracts lurks a state of nature imposed by the generational garbage collector, in which the lifetime of objects ought to be solitary, poor, nasty, brutish, and short.\nKaren: Alas I don't know enough about to Thomas Hobbes to properly appreciate that joke. I just know he was a philosopher and one of the two namesakes of my favorite comic strip.\nKaren: Oh right, you're a lawyer! Perfect!\nJulia: It's a barely coherent joke, anyway. ¯\\_(ツ)_/¯\nKaren: To me (a US-centric non-lawyer) those do sound like separate notions, and it sounds like a useful distinction\nKaren: In the context of software, I'd associate the first with contacts between two parties of similar authority, like module-to-module or server-to-server. The second sounds kind of like agreements between different levels of authority like module-to-programming-language or server-to-hypervisor\nKaren: That's fine, sometimes all you need is a vague direction :p\nKaren: Not saying I'm actually going to, but if I wrote a scribble doc about this would you want to read it?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 19,
        "duration_minutes": 234.73,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "assign",
          "complete",
          "implement",
          "must",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen",
          "Elin",
          "Julia",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-04-19T12:45:29.249200",
          "text": "Philosophy and terminology question: if modules can enter contacts with each other, does that mean modules have rights? If there was a \"software module bill of rights\" what would you expect it to contain?"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-19T13:04:08.250100",
          "text": "<@Karen> have you seen this? <https://www.youtube.com/watch?v=LIEX3tUliHw>"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-19T13:04:23.250600",
          "text": "(maybe related content)"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T13:12:25.257100",
          "text": "<@Eileen> Yes! It's what originally got me thinking about whether or not the term \"bill of rights\" makes sense for more kinds of code than just macro implementations"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-19T13:18:03.263400",
          "text": "I think that at a base level provides give the right to access a name.  And with contracts (and blame) modules have the right that those names will deal with certain values."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-19T13:18:52.264200",
          "text": "(or rather \"access a value with a specific name\")"
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-19T13:27:47.269400",
          "text": "1. Free speech: a module has the right to provide bindings with data, print stuff, open gui windows, etc. when run.\n3. Soldiers need consent before staying in someone’s house: a module has the right to guard its functions with contracts that say `(not/c soldier?)`.\n4. Unreasonable search and seizure: Encapsulation and being able to hide information from inspectors? For this to work no one should be able to get a root-inspector unless they have a warrant with probable cause, so this right isn’t being protected completely.\n5. Due-process, no double-jeopordy, no forced self-incrimination, etc: When a contract blames a module, it must have the correct reasons, it can’t just assign blame without a proper trial. A contract can’t blame a module twice for the same contract-value instance. A module can’t be forced to blame itself for a contract it didn’t invoke. This right is violated all the time. The `contract` form just takes positive and negative blame as arguments and trusts the programer, the module being blamed doesn’t have any say in that.\n6. Trial, impartial jury, right to legal counsel and witnesses in your favor: When a contract blames a module it has a right to a trial with legal counsel to defend it? When a contract blames a module there is no trial, the programmer just assumes it’s guilty. This right is also violated all the time.\n7,8. um this analogy is starting to break down.\n9. Don’t misinterpret enumurations.\n10. Powers not delegated to the federal government or prohibited by it, are given to the states or the people: I don’t know how this would apply to modules or contracts."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T13:36:44.276600",
          "text": "Clarifications: in this context, \"software module\" does not necessarily mean \"Racket module\". Functions can be modules, as well as Java classes, command line programs, web services, virtual machine images, and linkable object code files. Also, a software bill of rights doesn't have to map one-to-one (or at all) to the US bill of rights (and it probably shouldn't)."
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-19T13:37:48.277700",
          "text": "But reflection systems that prevent proper encapsulation are still a violation of the module’s rights."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T13:47:30.279200",
          "text": "I think so, yes. I think \"right to privacy\" is a reasonable demand"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T13:48:33.280200",
          "text": "Meaning the right for a module to hide information from another module if it is not relevant to the contract between them"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-19T15:21:35.285300",
          "text": "<@Karen> Hobbes might argue that, beneath the veneer of social contracts lurks a state of nature imposed by the generational garbage collector, in which the lifetime of objects ought to be solitary, poor, nasty, brutish, and short."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T15:39:37.288000",
          "text": "Alas I don't know enough about to Thomas Hobbes to properly appreciate that joke. I just know he was a philosopher and one of the two namesakes of my favorite comic strip."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T15:40:32.288100",
          "text": "Oh right, you're a lawyer! Perfect!"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-19T15:42:49.288800",
          "text": "It's a barely coherent joke, anyway. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T15:44:03.288900",
          "text": "To me (a US-centric non-lawyer) those do sound like separate notions, and it sounds like a useful distinction"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T15:49:09.289200",
          "text": "In the context of software, I'd associate the first with contacts between two parties of similar authority, like module-to-module or server-to-server. The second sounds kind of like agreements between different levels of authority like module-to-programming-language or server-to-hypervisor"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T15:49:44.289800",
          "text": "That's fine, sometimes all you need is a vague direction :p"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-19T16:40:13.294900",
          "text": "Not saying I'm actually going to, but if I wrote a scribble doc about this would you want to read it?"
        }
      ]
    },
    {
      "conversation_id": "518",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Roughly speaking, the notion of “rights” in contract law pertains to legally enforceable promises between private parties. This is largely separate from rights in the constitutional sense (e.g., Bill of Rights), which refer to protections against certain actions by the government.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-04-19T14:52:48.283000",
          "text": "Roughly speaking, the notion of “rights” in contract law pertains to legally enforceable promises between private parties. This is largely separate from rights in the constitutional sense (e.g., Bill of Rights), which refer to protections against certain actions by the government."
        }
      ]
    },
    {
      "conversation_id": "519",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Laverna: Julia thanks for the logging config pointer, i’ll check that out.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Laverna"
        ]
      },
      "timeline": [
        {
          "user": "Laverna",
          "timestamp": "2019-04-19T15:17:06.283700",
          "text": "<@Julia> thanks for the logging config pointer, i’ll check that out."
        }
      ]
    },
    {
      "conversation_id": "520",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: FWIW constitutional rights incorporate notions of human dignity that don’t really carry over to software, which has no dignity. Use whatever term you like, of course. Legal metaphors can cut both ways, is all (e.g., the FSF’s comparison of the GPL to “free speech”, when it is precisely the opposite)\nLillian: Always happy to share my ignorance with others\nMadelaine: I meant to post this on <#C06V96CKX|general>:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 4311.82,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lillian",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-04-19T16:22:13.294500",
          "text": "FWIW constitutional rights incorporate notions of human dignity that don’t really carry over to software, which has no dignity. Use whatever term you like, of course. Legal metaphors can cut both ways, is all (e.g., the FSF’s comparison of the GPL to “free speech”, when it is precisely the opposite)"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-04-19T18:27:10.295100",
          "text": "Always happy to share my ignorance with others"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-04-22T16:14:02.300600",
          "text": "I meant to post this on <#C06V96CKX|general>:"
        }
      ]
    },
    {
      "conversation_id": "521",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: I can't seem to find a way to attach contracts to parameters. Imagine I'd like a parameter, current-characters, to be such that (current-characters) is either #f or a list of char? values. I'd like (parameterize ([current-characters \"haha!\"]) ...) to raise a contract violation. I don't think parameterize works like that, but I'd imagine that there's something that would. I can write my own thing, but perhaps I'm overseeing something simple here.\nGonzalo: Michelina Is there a reason [CODE] isn’t enough for what you want? <[URL]\nMichelina: oh. d'oh. yes, that's what I have in mind. thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 2.02,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-04-20T02:26:05.299700",
          "text": "I can't seem to find a way to attach contracts to parameters. Imagine I'd like a parameter, current-characters, to be such that (current-characters) is either #f or a list of char? values. I'd like (parameterize ([current-characters \"haha!\"]) ...) to raise a contract violation. I don't think parameterize works like that, but I'd imagine that there's something that would. I can write my own thing, but perhaps I'm overseeing something simple here."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-20T02:27:27.300100",
          "text": "<@Michelina> Is there a reason `parameter/c` isn’t enough for what you want? <https://docs.racket-lang.org/reference/data-structure-contracts.html#%28def._%28%28lib._racket%2Fcontract%2Fprivate%2Fmisc..rkt%29._parameter%2Fc%29%29>"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-04-20T02:28:06.300400",
          "text": "oh. d'oh. yes, that's what I have in mind. thanks!"
        }
      ]
    },
    {
      "conversation_id": "522",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clarinda Why does evaluation of the RHS of a [CODE] / [CODE] disable the JIT in the expander here? <[URL]\nClarinda: There’s always a compilation–interpretation trade-off. On average (based on measuring expansion times), it seems to be better to interpret a RHS during a module’s compilation, but JIT-compile RHSs that are used across module boundaries.\nGonzalo: Makes sense, thanks.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 4.58,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-22T18:13:03.301800",
          "text": "<@Clarinda> Why does evaluation of the RHS of a `define-syntax` / `let-syntax` disable the JIT in the expander here? <https://github.com/racket/racket/blob/55dcdf553878f475fc4c59ba83556482d11499c9/racket/src/expander/expand/main.rkt#L682>"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-22T18:15:12.302000",
          "text": "There’s always a compilation–interpretation trade-off. On average (based on measuring expansion times), it seems to be better to interpret a RHS during a module’s compilation, but JIT-compile RHSs that are used across module boundaries."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-22T18:17:38.302300",
          "text": "Makes sense, thanks."
        }
      ]
    },
    {
      "conversation_id": "523",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeffery: what is the proper way to test a function returning multiple values? The following seems very weird to me.. #lang racket/base (require rackunit) (define (f x) x) (define (g x) (values x (add1 x))) (module+ test (check-equal? 3 (f 3)) (define-values (n1 n2) (g 3)) ; this works but is complicated (check-equal? n1 3) (check-equal? n2 4) (check-equal? (values 3 4) (g 3)) ; fails )\nJulia: Jeffery The few times I've needed to test multiple values, I've done something like what you showed: Use [CODE] (or [CODE]) plus multiple [CODE]s. It's awkward but I've never done it enough, to care enough to detour and figure out something better. Then I always forget about it.\nJulia: If you do this frequently, you could [CODE] something like a \"check-equal-values?\". The following seems to work for me. [CODE_BLOCK]\nJulia: Note, to use this you need to put the first, \"actual\" values-producing expression in a thunk (like how you'd use [CODE]). And, put the expected values in a list. For example: [CODE_BLOCK]\nJulia: So that's still a bit awkward. Maybe someone else has a better idea. (Maybe there's no great non-awkward way? If so, maybe that's why [CODE] doesn't already provide something like this?)\nJulia: p.s. I put actual before expected, because that's the convention rackunit uses for failure messages.\nJeffery: thanks Julia I will keep the thunk in mind. I dont often need to test this so I might just stick with the \"define-values solution\". And thanks also for the little reminder on actual before expected to keep things nice and tidy wrt failure messages.\nEileen: IIRC I think [CODE] has a form to handle multiple values",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 408.3,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen",
          "Jeffery",
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Jeffery",
          "timestamp": "2019-04-23T06:45:40.304000",
          "text": "what is the proper way to test a function returning multiple values? The following seems very weird to me..\n#lang racket/base\n\n(require rackunit)\n\n(define (f x) x)\n(define (g x) (values x (add1 x)))\n\n(module+ test\n  (check-equal? 3 (f 3))\n  (define-values (n1 n2) (g 3))  ; this works but is complicated\n  (check-equal? n1 3)\n  (check-equal? n2 4)\n  (check-equal? (values 3 4) (g 3)) ; fails\n  )"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-23T07:32:12.308600",
          "text": "<@Jeffery> The few times I've needed to test multiple values, I've done something like what you showed: Use `define-values` (or `let-values`) plus multiple `check-equal?`s. It's awkward but I've never done it enough, to care enough to detour and figure out something better. Then I always forget about it."
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-23T07:32:25.308900",
          "text": "If you do this frequently, you could `define-check` something like a \"check-equal-values?\".\nThe following seems to work for me.\n```\n(define-check (check-equal-values? actual-thunk expected-list)\n  (define actual-list (call-with-values actual-thunk list))\n  (with-check-info (['actual   actual-list]\n                    ['expected expected-list])\n   (unless (equal? actual-list\n                   expected-list)\n     (fail-check))))\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-23T07:34:28.310300",
          "text": "Note, to use this you need to put the first, \"actual\" values-producing expression in a thunk (like how you'd use `check-exn`). And, put the expected values in a list. For example:\n```\n(define (f x) (values x (add1 x)))\n\n(check-equal-values? (λ () (f 1)) (list 1 2))    ;succeeds\n(check-equal-values? (λ () (f 1)) (list 42 42))  ;fails with...\n--------------------\n; FAILURE\n; /tmp/chk.rkt:16:0\nname:       check-equal-values?\nlocation:   chk.rkt:16:0\nactual:     (1 2)\nexpected:   (42 42)\n--------------------\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-23T07:35:54.311600",
          "text": "So that's still a bit awkward.\nMaybe someone else has a better idea.\n(Maybe there's no great non-awkward way? If so, maybe that's why `rackunit` doesn't already provide something like this?)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-04-23T07:37:51.312300",
          "text": "p.s. I put actual before expected, because that's the convention rackunit uses for failure messages."
        },
        {
          "user": "Jeffery",
          "timestamp": "2019-04-23T07:43:18.314900",
          "text": "thanks <@Julia> I will keep the thunk in mind. I dont often need to test this so I might just stick with the \"define-values solution\". And thanks also for the little reminder on actual before expected to keep things nice and tidy wrt failure messages."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-04-23T13:33:58.315400",
          "text": "IIRC I think `chk` has a form to handle multiple values"
        }
      ]
    },
    {
      "conversation_id": "524",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Eileen"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-04-23T13:35:39.315600",
          "text": "<https://docs.racket-lang.org/chk/index.html?q=chk#%28part._.Expected_.Value_.Tests%29>"
        }
      ]
    },
    {
      "conversation_id": "525",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: FWIW, there’s a pending PR doing exactly this <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-04-23T15:33:10.317100",
          "text": "FWIW, there’s a pending PR doing exactly this <https://github.com/racket/rackunit/pull/73>"
        }
      ]
    },
    {
      "conversation_id": "526",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: Currently [CODE] is a function-like check form, which means it evaluates its arguments in the same way a function would. The [CODE] form needs to be a full macro, since it evaluates its arguments in a multi-valued context; a function-like form can’t do that. So, should [CODE] be a separate form from [CODE], or can/should they be merged into one?\nKaren: Elin I think making it a separate thing is weird and awkward. But I also think that as long as \"checks are functions\" is rackunit's philosophy, adding more exceptions to that rule is confusing.\nKaren: So really I think we should just ditch that philosophy",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 66.6,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-04-23T21:33:27.321900",
          "text": "Currently `check-equal?` is a function-like check form, which means it evaluates its arguments in the same way a function would. The `check-equal?/values` form needs to be a full macro, since it evaluates its arguments in a multi-valued context; a function-like form can’t do that. So, should `check-equal?/values` be a separate form from `check-equal?`, or can/should they be merged into one?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-23T22:39:39.324800",
          "text": "<@Elin> I think making it a separate thing is weird and awkward. But I also think that as long as \"checks are functions\" is rackunit's philosophy, adding more exceptions to that rule is confusing."
        },
        {
          "user": "Karen",
          "timestamp": "2019-04-23T22:40:03.325400",
          "text": "So really I think we should just ditch that philosophy"
        }
      ]
    },
    {
      "conversation_id": "527",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: IDK about the larger questions, but there could be a function-like [CODE] that takes two thunks and compares their return values, somewhat like [CODE].",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-04-23T22:47:22.327000",
          "text": "IDK about the larger questions, but there could be a function-like `check-equal?/values` that takes two thunks and compares their return values, somewhat like `check-exn`."
        }
      ]
    },
    {
      "conversation_id": "528",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Katharine: I'm interested in whatever is going on here too. I don't know if this is the same thing, while back I think I observed that I could rebind [CODE] to be my own reader macro, but that as long as it appeared *inside a list*, it acted like a comment syntax again. My best guess is that sometimes the reader takes an \"ignore whitespace and comments\" step that isn't followed by reading an s-expression, so it can't be implemented as a recursive call to [CODE] and hence can't take user-defined reader macros into account. Maybe in your examples it's acting differently because it's at the beginning of the stream?\nGonzalo: Is there any way with [CODE] to convert a piece of text to a [CODE], or is that just fundamentally impossible (either due to how Cairo works or because it just isn’t exposed through the Racket API)?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 368.28,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Katharine"
        ]
      },
      "timeline": [
        {
          "user": "Katharine",
          "timestamp": "2019-04-24T05:34:24.327100",
          "text": "I'm interested in whatever is going on here too.\n\nI don't know if this is the same thing, while back I think I observed that I could rebind `#|` to be my own reader macro, but that as long as it appeared *inside a list*, it acted like a comment syntax again.\n\nMy best guess is that sometimes the reader takes an \"ignore whitespace and comments\" step that isn't followed by reading an s-expression, so it can't be implemented as a recursive call to `read` and hence can't take user-defined reader macros into account. Maybe in your examples it's acting differently because it's at the beginning of the stream?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T11:42:41.001200",
          "text": "Is there any way with `racket/draw` to convert a piece of text to a `dc-path%`, or is that just fundamentally impossible (either due to how Cairo works or because it just isn’t exposed through the Racket API)?"
        }
      ]
    },
    {
      "conversation_id": "529",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: [CODE] has a [CODE] method. Is that what you’re looking for?\nGonzalo: Aha, thanks! Not sure how I missed that.\nGonzalo: Clarinda Is it intentional that the [CODE] method of [CODE] aligns its coordinates when drawing the stroke but not when drawing the fill? And if so, why? (If no, I can open a PR to fix it, but based on the way the code is structured, it seems intended.)\nClarinda: Maybe I’m not looking at the same place, but I think it does align for the fill. Both [CODE] calls use [CODE] and [CODE].\nClarinda: Oh, the width and height are not aligned for the fill… I’m not immediately sure\nGonzalo: I’m looking at this line here, which seems to align neither coordinate: <[URL]\nGonzalo: Maybe it gets overridden somewhere else that I’m not looking at, though.\nClarinda: No, I’m misreading the code. Probably because [CODE] is bound outside the first [CODE], I read the [CODE] and [CODE].\nClarinda: It does seem like those should be aligned according to the docs, but it also does look intentional. And I agree about other methods. Just for reference, let me see what the older code did…\nGonzalo: It seems like some of the drawing functions take care not to align the fill coordinates, but others don’t (e.g. [CODE]), and I’m not sure why.\nGonzalo: Looking at the git history, it looks like that code’s been there since it was first added in this commit: <[URL]\nGonzalo: But maybe there’s some other history prior to that that git doesn’t know about, I don’t know.\nElin: The function-like one would display its parameters as [CODE] though, which isn’t very helpful.\nClarinda: I mean the C++ version, and I see that it did apply alignment. So, probably brush alignments just got lost. I worry about what will happen to existing programs when we change things (back), but it seems like we should try it.\nGonzalo: Okay, maybe I’ll give it a try and write some tests, and we can see what happens.\nGonzalo: It’s curious, though, that the code appears to be careful about _not_ aligning the coordinates for the fill, even including the comment. But if you don’t know why, then I don’t imagine anyone does.\nClarinda: In case you haven’t discovered it already, you may want to start with [CODE]\nGonzalo: I saw it, though it looked intimidating, and I didn’t look at it very closely. :) But I’ll take another look.\nGonzalo: Clarinda I am trying to understand this sentence in the documentation for [CODE]: &gt; For line drawing, coordinates are further shifted based on the pen width and the alignment scale, where the shift corresponds to half of the pen width (reduced to a value such that its multiplication times the alignment scale times two produces an integer). After looking at the code that does this and re-reading, I now understand what it does, but I’m not sure it’s actually the right thing to do. IIUC it means it adds [CODE] to the coordinates when drawing a stroke iff [CODE] is an odd number, which at first sounds reasonable: it avoids a line being drawn on a “pixel boundary” when the pen width is odd. The problem is that this doesn’t really do the right thing for the [CODE] smoothing mode, since it adjusts [CODE] _and_ [CODE], which means that when the line is perfectly horizontal, it can cause the [CODE] coordinate to go out of alignment, and vice-versa for the [CODE] coordinate when the line is vertical. For lines that are neither perfectly horizontal nor perfectly vertical, it seems like neither adjustment is really right.\nGonzalo: Here are some visual aids, blown up with a pixel grid overlaid.\nGonzalo: None\nClarinda: Does the output depend on the pen cap?\nGonzalo: Yes, it does. Is the issue that this assumes a [CODE] cap?\nGonzalo: Or, I guess it’s probably actually more relevant for a [CODE] cap.\nClarinda: I think that [CODE] makes only a certain amount of sense. If the current calculation does the right thing for rectangular frames and the broad side of lines, then that’s probably as far as we tried to refine it.\nGonzalo: Alright, I guess that’s fine. Though the docs do recommend it: “For most applications that draw to the screen or bitmaps, [CODE] mode is the best choice.” Are you saying that’s not true, or just that there are caveats?\nClarinda: Well, it’s not that other drawing modes are better. But, in the past, we didn’t figure out how to solve all problems with [CODE].\nGonzalo: I see. So maybe it just needs to do something smarter here? I wasn’t thinking about the pen cap, but now that you’ve mentioned it, that makes sense. Maybe it could avoid applying the adjustment when the cap is [CODE] except in the obviously-correct cases for perfectly horizontal/vertical lines.\nClarinda: That sounds plausible, though complex. The correct adjustment would depend on the slope of the line, right?\nGonzalo: Well, I’m not sure if it makes sense to do any adjustment at all if the line isn’t perfectly horizontal or perfectly vertical (after coordinate alignment), since aliasing will happen, anyway, in those cases. But I guess there could be some way for it to be minimized more generally, which would take into account the slope of the line… but I’d have to think harder about it.\nClarinda: Ok, I agree that it potentially makes sense to special-case horizontal and vertical lines, taking into account the pen cap. To minimize changes, I’d keep the current adjustment in place for other lines.\nGonzalo: Alright, I’ll give that a try for now, and if I come up with something better in the meantime then I’ll try that, instead.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 32,
        "duration_minutes": 229.42,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T12:08:04.001700",
          "text": "`dc-path%` has a `text-outline` method. Is that what you’re looking for?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T12:09:35.001900",
          "text": "Aha, thanks! Not sure how I missed that."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T13:53:28.004000",
          "text": "<@Clarinda> Is it intentional that the `draw-rectangle` method of `dc&lt;%&gt;` aligns its coordinates when drawing the stroke but not when drawing the fill? And if so, why? (If no, I can open a PR to fix it, but based on the way the code is structured, it seems intended.)"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T13:57:22.004700",
          "text": "Maybe I’m not looking at the same place, but I think it does align for the fill. Both `cairo_rectangle` calls use `ax` and `ay`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T13:58:34.005200",
          "text": "Oh, the width and height are not aligned for the fill… I’m not immediately sure"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T13:59:09.005600",
          "text": "I’m looking at this line here, which seems to align neither coordinate: <https://github.com/racket/draw/blob/3d4642cda1e1afb681fda8016a1ae3cea503b026/draw-lib/racket/draw/private/dc.rkt#L1224>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T13:59:28.006100",
          "text": "Maybe it gets overridden somewhere else that I’m not looking at, though."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T14:00:54.007000",
          "text": "No, I’m misreading the code. Probably because `ax` is bound outside the first `draw_rectangle`, I read the `x` and `ax`."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T14:02:25.007700",
          "text": "It does seem like those should be aligned according to the docs, but it also does look intentional. And I agree about other methods. Just for reference, let me see what the older code did…"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T14:02:51.008100",
          "text": "It seems like some of the drawing functions take care not to align the fill coordinates, but others don’t (e.g. `draw-polygon`), and I’m not sure why."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T14:05:39.008700",
          "text": "Looking at the git history, it looks like that code’s been there since it was first added in this commit: <https://github.com/racket/draw/commit/b2f8e97e10dc0e515ce68d63d43c47aa803e1e96>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T14:06:50.009300",
          "text": "But maybe there’s some other history prior to that that git doesn’t know about, I don’t know."
        },
        {
          "user": "Elin",
          "timestamp": "2019-04-24T14:09:36.010500",
          "text": "The function-like one would display its parameters as `#&lt;procedure&gt; #&lt;procedure&gt;` though, which isn’t very helpful."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T14:09:48.010800",
          "text": "I mean the C++ version, and I see that it did apply alignment. So, probably brush alignments just got lost. I worry about what will happen to existing programs when we change things (back), but it seems like we should try it."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T14:10:22.011200",
          "text": "Okay, maybe I’ll give it a try and write some tests, and we can see what happens."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T14:11:51.012900",
          "text": "It’s curious, though, that the code appears to be careful about _not_ aligning the coordinates for the fill, even including the comment. But if you don’t know why, then I don’t imagine anyone does."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T14:11:59.013100",
          "text": "In case you haven’t discovered it already, you may want to start with `tests/racket/draw/draw`"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T14:12:49.014100",
          "text": "I saw it, though it looked intimidating, and I didn’t look at it very closely. :) But I’ll take another look."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:39:42.020800",
          "text": "<@Clarinda> I am trying to understand this sentence in the documentation for `set-smoothing`:\n&gt; For line drawing, coordinates are further shifted based on the pen width and the alignment scale, where the shift corresponds to half of the pen width (reduced to a value such that its multiplication times the alignment scale times two produces an integer).\nAfter looking at the code that does this and re-reading, I now understand what it does, but I’m not sure it’s actually the right thing to do. IIUC it means it adds `(* 0.5 alignment-scale)` to the coordinates when drawing a stroke iff `(quotient pen-width alignment-scale)` is an odd number, which at first sounds reasonable: it avoids a line being drawn on a “pixel boundary” when the pen width is odd. The problem is that this doesn’t really do the right thing for the `'aligned` smoothing mode, since it adjusts `x` _and_ `y`, which means that when the line is perfectly horizontal, it can cause the `x` coordinate to go out of alignment, and vice-versa for the `y` coordinate when the line is vertical. For lines that are neither perfectly horizontal nor perfectly vertical, it seems like neither adjustment is really right."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:40:10.020900",
          "text": "Here are some visual aids, blown up with a pixel grid overlaid."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:40:12.021200",
          "text": "None"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T15:41:04.022500",
          "text": "Does the output depend on the pen cap?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:41:30.023000",
          "text": "Yes, it does. Is the issue that this assumes a `'round` cap?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:43:06.024600",
          "text": "Or, I guess it’s probably actually more relevant for a `'projecting` cap."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T15:43:14.024700",
          "text": "I think that `'aligned` makes only a certain amount of sense. If the current calculation does the right thing for rectangular frames and the broad side of lines, then that’s probably as far as we tried to refine it."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:45:31.025900",
          "text": "Alright, I guess that’s fine. Though the docs do recommend it: “For most applications that draw to the screen or bitmaps, `'aligned` mode is the best choice.” Are you saying that’s not true, or just that there are caveats?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T15:46:51.027100",
          "text": "Well, it’s not that other drawing modes are better. But, in the past, we didn’t figure out how to solve all problems with `'aligned`."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:48:38.028700",
          "text": "I see. So maybe it just needs to do something smarter here? I wasn’t thinking about the pen cap, but now that you’ve mentioned it, that makes sense. Maybe it could avoid applying the adjustment when the cap is `'butt` except in the obviously-correct cases for perfectly horizontal/vertical lines."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T15:51:10.029500",
          "text": "That sounds plausible, though complex. The correct adjustment would depend on the slope of the line, right?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:55:13.032200",
          "text": "Well, I’m not sure if it makes sense to do any adjustment at all if the line isn’t perfectly horizontal or perfectly vertical (after coordinate alignment), since aliasing will happen, anyway, in those cases. But I guess there could be some way for it to be minimized more generally, which would take into account the slope of the line… but I’d have to think harder about it."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-24T15:56:33.033000",
          "text": "Ok, I agree that it potentially makes sense to special-case horizontal and vertical lines, taking into account the pen cap. To minimize changes, I’d keep the current adjustment in place for other lines."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-24T15:57:29.033700",
          "text": "Alright, I’ll give that a try for now, and if I come up with something better in the meantime then I’ll try that, instead."
        }
      ]
    },
    {
      "conversation_id": "530",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Merna: Oh for heaven's sake.... does anyone know what CentOS 7.5 texlive package provides \"relsize.sty\" (for instance)? It looks to me like \"yum whatprovides\" is supposed to do this kind of thing when called with [CODE], but I'm not getting any love.\nPriscila: Merna Guessing here. Is there a package named ltxmisc ?\nPriscila: (Guess based on a footnote in a document describing relsize)\nMerna: Well, there is, and I already have it installed, and it doesn't include relsize.sty, sigh. Many thanks.\nMerna: Priscila forgot to tag you on my reply. Thanks!\nMerna: chugging my way through doc dependencies... anyone happen to know whether modern versions of texlive have out-of-the-box support for CJK (chinese/japanese/korean) characters? The build is failing on the JSON docs which use unicode non-ASCII chars, and pdflatex is curiously *not* complaining about a missing .sty file or package, which makes me think that maybe it's now built-in. Yes, I know, it's hard to imagine what this has to do with Racket... the answer is that it's one more step in provisioning a new machine to be able to build the racket pre-release bundles.\nKristeen: Merna failing in what way? and which aspect of texlive?\nMerna: Ah! okay, nvm, turns out that one is just unusual in that there's no \\include. Yum search came up good on that one, finally, and we're off to the races again. My linode debian vm is catching up, though; we'll see which one wins.\nClarinda: Not in the short term. While Chez Scheme offers more support for OS-managed threads than the current Racket VM, it’s not safe, so Racket won’t expose that directly in safe mode. But besides futures and places, there is [CODE].\nKristeen: One way that RacketCS differs in terms of parallelism is that more operations are \"future-safe\" on RacketCS than on traditional Racket.\nShavon: Clarinda you know those benchmarks and nice graphs you generate to compare Racket and Racket CS? I would like to run those in CI to obtain an history of how Racket's performance changes through time. Are those benchmarks and scripts somewhere public? If there are other benchmarks more appropriate for this use-case feel free to let me know.\nClarinda: The benchmarks are in the “racket-benchmark” package (which is in the main repo). The scripts to generate the graphs are not, but I can clean them up and package them sometime soon.\nShavon: Thanks. The scripts for now are not so important. I will get the benchmarks running first.\nShavon: No idea. I don't touch travis. Maybe Kristeen knows?",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 14,
        "duration_minutes": 6076.62,
        "contains_question": true,
        "action_keywords": [
          "build",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Kristeen",
          "Merna",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Merna",
          "timestamp": "2019-04-26T11:37:20.035700",
          "text": "Oh for heaven's sake.... does anyone know what CentOS 7.5 texlive package provides \"relsize.sty\" (for instance)? It looks to me like \"yum whatprovides\" is supposed to do this kind of thing when called with `*relsize.sty`, but I'm not getting any love."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-26T13:07:10.036500",
          "text": "<@Merna>   Guessing here. Is there a package named ltxmisc ?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-04-26T13:08:10.037300",
          "text": "(Guess based on a footnote in a document describing relsize)"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-26T13:32:25.037800",
          "text": "Well, there is, and I already have it installed, and it doesn't include relsize.sty, sigh. Many thanks."
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-26T13:32:47.038200",
          "text": "<@Priscila> forgot to tag you on my reply. Thanks!"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-26T22:53:59.044400",
          "text": "chugging my way through doc dependencies... anyone happen to know whether modern versions of texlive have out-of-the-box support for CJK (chinese/japanese/korean) characters? The build is failing on the JSON docs which use unicode non-ASCII chars, and pdflatex is curiously *not* complaining about a missing .sty file or package, which makes me think that maybe it's now built-in. Yes, I know, it's hard to imagine what this has to do with Racket... the answer is that it's one more step in provisioning a new machine to be able to build the racket pre-release bundles."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-27T00:04:42.044900",
          "text": "<@Merna> failing in what way? and which aspect of texlive?"
        },
        {
          "user": "Merna",
          "timestamp": "2019-04-27T00:07:35.046600",
          "text": "Ah! okay, nvm, turns out that one is just unusual in that there's no \\include. Yum search came up good on that one, finally, and we're off to the races again. My linode debian vm is catching up, though; we'll see which one wins."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-30T09:24:05.050000",
          "text": "Not in the short term. While Chez Scheme offers more support for OS-managed threads than the current Racket VM, it’s not safe, so Racket won’t expose that directly in safe mode. But besides futures and places, there is `ffi/unsafe/os-thread`."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-30T09:52:08.050200",
          "text": "One way that RacketCS differs in terms of parallelism is that more operations are \"future-safe\" on RacketCS than on traditional Racket."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-30T15:45:29.051800",
          "text": "<@Clarinda> you know those benchmarks and nice graphs you generate to compare Racket and Racket CS? I would like to run those in CI to obtain an history of how Racket's performance changes through time. Are those benchmarks and scripts somewhere public? If there are other benchmarks more appropriate for this use-case feel free to let me know."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-30T15:46:56.051900",
          "text": "The benchmarks are in the “racket-benchmark” package (which is in the main repo). The scripts to generate the graphs are not, but I can clean them up and package them sometime soon."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-30T16:08:48.052200",
          "text": "Thanks. The scripts for now are not so important. I will get the benchmarks running first."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-04-30T16:53:57.053300",
          "text": "No idea. I don't touch travis. Maybe <@Kristeen> knows?"
        }
      ]
    },
    {
      "conversation_id": "531",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: I've grown to really like the [CODE] from from [CODE]. A couple racket-mode features didn't really support it. I recently got a chance to improve this. Should be on MELPA by now. A little blog post about it: <[URL]\nPenni: Lillian Are there any facilities to debug a [CODE] grammar? I've got one that mysteriously isn't recognizing things that I think it should, and after a couple hours of trying stuff without getting anywhere, I'm wondering if there's some way to see what's going on.\nPenni: Lillian Now I'm thinking that it might be a bug in [CODE]. I just submitted an issue here: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 2788.27,
        "contains_question": true,
        "action_keywords": [
          "should",
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Penni"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-04-26T21:16:26.039100",
          "text": "I've grown to really like the `multi-in` from from `racket/require`. A couple racket-mode features didn't really support it. I recently got a chance to improve this. Should be on MELPA by now. A little blog post about it: <https://www.greghendershott.com/2019/04/supporting-multi-in.html>."
        },
        {
          "user": "Penni",
          "timestamp": "2019-04-28T18:40:09.048200",
          "text": "<@Lillian> Are there any facilities to debug a `brag` grammar? I've got one that mysteriously isn't recognizing things that I think it should, and after a couple hours of trying stuff without getting anywhere, I'm wondering if there's some way to see what's going on."
        },
        {
          "user": "Penni",
          "timestamp": "2019-04-28T19:44:42.049000",
          "text": "<@Lillian> Now I'm thinking that it might be a bug in `brag`. I just submitted an issue here: <https://github.com/mbutterick/brag/issues/18>"
        }
      ]
    },
    {
      "conversation_id": "532",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: “When a place is created, its parameter values are generally set to the *initial* values of the parameters in the creating place …” Suppose that instead, you want the current value of a parameter to be used inside the place. What is the nicest pattern? Just pass it as an argument across the place channel, and then use [CODE] within the place? <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-04-26T21:32:58.041500",
          "text": "“When a place is created, its parameter values are generally set to the *initial* values of the parameters in the creating place …” Suppose that instead, you want the current value of a parameter to be used inside the place. What is the nicest pattern? Just pass it as an argument across the place channel, and then use `parameterize` within the place?\n\n<https://docs.racket-lang.org/reference/places.html>"
        }
      ]
    },
    {
      "conversation_id": "533",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: Is this whole chez thing gonna change the racket parallelism and concurrency story much?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-04-29T20:37:06.049800",
          "text": "Is this whole chez thing gonna change the racket parallelism and concurrency story much?"
        }
      ]
    },
    {
      "conversation_id": "534",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Is there a reason Travis is shut off on the racket/racket repo?\nKristeen: Gonzalo really? That seems bad\nGonzalo: I was trying to see if there was some kind of audit log for the Travis CI settings, but I couldn’t find one.\nGonzalo: If neither of you nor Clarinda disabled it, then I guess I’ll just try turning it back on and see if it shuts off again. If it does, and nobody knows why, maybe we should figure out how to tighten the permissions on Travis. I haven’t been able to figure out how exactly that works, but it seems to use something like GH push access?\nClarinda: I didn’t disable it. (At least, not on purpose.)\nGonzalo: Okay, I’ll try re-enabling it then. (I mostly asked since the last commit that was built seemed to have been yours, but that doesn’t really mean anything, and I don’t think the information about how exactly it got disabled exists.)\nGonzalo: No worries—it’s good to know for certain it was just an accident rather than someone malicious, as unlikely as I imagine it would be that anyone would go to the effort of nefariously disabling CI for an open-source programming language project. :)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 75.2,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Gonzalo",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-30T16:28:39.052700",
          "text": "Is there a reason Travis is shut off on the racket/racket repo?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-04-30T16:54:12.053800",
          "text": "<@Gonzalo> really? That seems bad"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-30T16:55:32.054400",
          "text": "I was trying to see if there was some kind of audit log for the Travis CI settings, but I couldn’t find one."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-30T17:08:14.056400",
          "text": "If neither of you nor <@Clarinda> disabled it, then I guess I’ll just try turning it back on and see if it shuts off again. If it does, and nobody knows why, maybe we should figure out how to tighten the permissions on Travis. I haven’t been able to figure out how exactly that works, but it seems to use something like GH push access?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-04-30T17:09:11.057200",
          "text": "I didn’t disable it. (At least, not on purpose.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-30T17:10:40.058700",
          "text": "Okay, I’ll try re-enabling it then. (I mostly asked since the last commit that was built seemed to have been yours, but that doesn’t really mean anything, and I don’t think the information about how exactly it got disabled exists.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-04-30T17:43:51.068200",
          "text": "No worries—it’s good to know for certain it was just an accident rather than someone malicious, as unlikely as I imagine it would be that anyone would go to the effort of nefariously disabling CI for an open-source programming language project. :)"
        }
      ]
    },
    {
      "conversation_id": "535",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Whoops, I think the Travis deactivation may have been my fault — my sincere apologies. I was changing some settings on my Travis dashboard earlier today and thought it was churning away on my fork of Racket. I never would’ve assumed I had admin access to the Travis for the main repo. And although I did reflect on “wait, is this the main repo?” I reasoned that if it were, I would be seeing all the Racket repos, not just the one (because as a member of the GH Racket org I have GH push access to all) and therefore this can’t be the main repo. Am I morally culpable? Or just a victim of bad permissions design? History will judge.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-04-30T17:40:11.066600",
          "text": "Whoops, I think the Travis deactivation may have been my fault — my sincere apologies. I was changing some settings on my Travis dashboard earlier today and thought it was churning away on my fork of Racket. I never would’ve assumed I had admin access to the Travis for the main repo. And although I did reflect on “wait, is this the main repo?” I reasoned that if it were, I would be seeing all the Racket repos, not just the one (because as a member of the GH Racket org I have GH push access to all) and therefore this can’t be the main repo. Am I morally culpable? Or just a victim of bad permissions design? History will judge."
        }
      ]
    },
    {
      "conversation_id": "536",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Angelika: The next bond villain",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Angelika"
        ]
      },
      "timeline": [
        {
          "user": "Angelika",
          "timestamp": "2019-05-01T23:33:57.070700",
          "text": "The next bond villain"
        }
      ]
    },
    {
      "conversation_id": "537",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Giuseppe: How can I incorporate Racket it my day to day life? I mostly work full time on Javascript and I want to look into using other languages as tools for helping me become more productive.\nMichelina: Giuseppe are you looking to use Racket for web devel (I'm taking a guess here about what line of work you're in) or are you thinking about doing other kinds of things (systems programming, games, etc.)?\nTomas: Also a JS dev at work. I use Racket for scripting tasks folks would normally do in JS or Python (ETL, pulling data from APIs to my laptop, etc) and also build small services for my own use such as automatically exporting records from Pinboard to Pocket, etc.\nTomas: I’ve been meaning to play more with <[URL] but the project seems kind of dormant\nTomas: as a JS dev you might be interested in <[URL] | <[URL]\nTomas: and <[URL]\nTomas: ^ written in Racket as well",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 340.68,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Giuseppe",
          "Michelina",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Giuseppe",
          "timestamp": "2019-05-02T02:08:07.073200",
          "text": "How can I incorporate Racket it my day to day life? I mostly work full time on Javascript and I want to look into using other languages as tools for helping me become more productive."
        },
        {
          "user": "Michelina",
          "timestamp": "2019-05-02T04:18:04.074300",
          "text": "<@Giuseppe> are you looking to use Racket for web devel (I'm taking a guess here about what line of work you're in) or are you thinking about doing other kinds of things (systems programming, games, etc.)?"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-02T07:43:34.076500",
          "text": "Also a JS dev at work. I use Racket for scripting tasks folks would normally do in JS or Python (ETL, pulling data from APIs to my laptop, etc) and also build small services for my own use such as automatically exporting records from Pinboard to Pocket, etc."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-02T07:44:55.076700",
          "text": "I’ve been meaning to play more with <https://github.com/vishesh/racketscript> but the project seems kind of dormant"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-02T07:46:59.077000",
          "text": "as a JS dev you might be interested in <https://argojson.com/> | <https://docs.racket-lang.org/argo/index.html>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-02T07:48:29.077300",
          "text": "and <https://riposte.in/>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-02T07:48:48.077600",
          "text": "^ written in Racket as well"
        }
      ]
    },
    {
      "conversation_id": "538",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Priscila thanks for submitting RN to hacker news. Currently in number 2! :tada:\nPriscila: No problem - I saw you forgot it.\nPriscila: It's great to have something about Racket on Hacker News often.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 0.93,
        "contains_question": false,
        "action_keywords": [
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-05-02T04:53:32.075500",
          "text": "<@Priscila> thanks for submitting RN to hacker news. Currently in number 2! :tada:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-02T04:54:00.075800",
          "text": "No problem - I saw you forgot it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-02T04:54:28.076400",
          "text": "It's great to have something about Racket on Hacker News often."
        }
      ]
    },
    {
      "conversation_id": "539",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: I understand the reasoning for splitting a package [CODE] into [CODE] (= to reduce build dependencies). But many packages also have a [CODE] subpackage, so [CODE] installs [CODE] and [CODE]. What is the point of this? Why not make the docs part of the main [CODE] package? Is there some situation where a user would want to install [CODE] but not [CODE]?\nElin: Why not make the docs part of the main [CODE] package? Some packages do do that. That’s what [CODE], [CODE], [CODE], [CODE], and [CODE] do.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 10.27,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-05-02T08:57:17.079700",
          "text": "I understand the reasoning for splitting a package `foo` into `foo-lib` (= to reduce build dependencies). But many packages also have a `foo-doc` subpackage, so `foo` installs `foo-lib` and `foo-doc`. What is the point of this? Why not make the docs part of the main `foo` package? Is there some situation where a user would want to install `foo-doc` but not `foo-lib`?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-02T09:07:33.082200",
          "text": "Why not make the docs part of the main `foo` package? Some packages do do that.\nThat’s what `binaryio`, `gmp`, `scribble-code-examples`, `sweet-exp`, and `zeromq-r` do."
        }
      ]
    },
    {
      "conversation_id": "540",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Shavon the comments about racket news are very nice, and show what a great service it is to the community\nShavon: Kristeen it's very exciting to see that people like it. I am having lots of fun doing it. Have lots of ideas but so much time for RN. There are other Rackety ideas that I want to nurture and I just started a contract on a very different area in compilers so things are busy at the moment. Going from working on compilers for C like languages and Javascript is a world of difference. Feel like a beginner once again. :smile:\nShavon: I can also reveal I received a request to post a listing to a 100% Racket remote job. Coming up in Issue 8.\nKristeen: ooh",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 35.02,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-05-02T09:07:39.082500",
          "text": "<@Shavon> the comments about racket news are very nice, and show what a great service it is to the community"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-02T09:39:07.087600",
          "text": "<@Kristeen> it's very exciting to see that people like it. I am having lots of fun doing it. Have lots of ideas but so much time for RN. There are other Rackety ideas that I want to nurture and I just started a contract on a very different area in compilers so things are busy at the moment. Going from working on compilers for C like languages and Javascript is a world of difference. Feel like a beginner once again. :smile:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-02T09:40:22.088900",
          "text": "I can also reveal I received a request to post a listing to a 100% Racket remote job. Coming up in Issue 8."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-02T09:42:40.089200",
          "text": "ooh"
        }
      ]
    },
    {
      "conversation_id": "541",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Giuseppe: I'm open towards doing other stuff unrelated to web dev as I've worked too much on web dev already!\nGiuseppe: Thanks! I will check them out :3\nGiuseppe: I really like the concept of Riposte but I don't find a lot of documentation for checking etc",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 14.17,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Giuseppe"
        ]
      },
      "timeline": [
        {
          "user": "Giuseppe",
          "timestamp": "2019-05-02T13:20:40.090100",
          "text": "I'm open towards doing other stuff unrelated to web dev as I've worked too much on web dev already!"
        },
        {
          "user": "Giuseppe",
          "timestamp": "2019-05-02T13:21:56.090300",
          "text": "Thanks! I will check them out :3"
        },
        {
          "user": "Giuseppe",
          "timestamp": "2019-05-02T13:34:50.090500",
          "text": "I really like the concept of Riposte but I don't find a lot of documentation for checking etc"
        }
      ]
    },
    {
      "conversation_id": "542",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: Milissa can help you out most likely",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-05-02T15:50:18.090900",
          "text": "<@Milissa> can help you out most likely"
        }
      ]
    },
    {
      "conversation_id": "543",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: What kind of operations will be future safe? That’s something that I’ve had difficulty determining even in the current implementation of racket.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-05-02T18:29:37.091400",
          "text": "What kind of operations will be future safe? That’s something that I’ve had difficulty determining even in the current implementation of racket."
        }
      ]
    },
    {
      "conversation_id": "544",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Jeanine Lillian Elin and tests also go in the main package, it looks like? So main pkg = tests + docs + a dep just one other \"-lib\" pkg.\nJulia: I think I've seen sometimes 4 separate pkgs -- lib, doc, tests, main/meta -- and I'm like, meh, that's more ceremony and busywork than I want to spend time on in my remaining years :slightly_smiling_face: and shouldn't submodules somehow do this for me? This seems more reasonable.\nJulia: Although I guess it means you can't use test or doc submodules. :disappointed:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 1.17,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-02T22:56:07.095500",
          "text": "<@Jeanine> <@Lillian> <@Elin> and tests also go in the main package, it looks like?\nSo main pkg = tests + docs + a dep just one other \"-lib\" pkg."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-02T22:57:00.096300",
          "text": "I think I've seen sometimes 4 separate pkgs -- lib, doc, tests, main/meta -- and I'm like, meh, that's more ceremony and busywork than I want to spend time on in my remaining years :slightly_smiling_face: and shouldn't submodules somehow do this for me?\nThis seems more reasonable."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-02T22:57:17.096800",
          "text": "Although I guess it means you can't use test or doc submodules. :disappointed:"
        }
      ]
    },
    {
      "conversation_id": "545",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clarinda What is the expected C representation for the [CODE] type? My first inclination is to assume that they are expected to be nul-terminated, just like for [CODE]… but then again, I’d also expect [CODE] _wouldn’t_ (necessarily) be nul-terminated, since the documentation says it corresponds to the native Racket string type, which can contain nuls.\nGonzalo: (It would make sense to me if [CODE] is a special, different thing designed to correspond directly with Racket’s internal string representation, and the other types like [CODE], [CODE], [CODE], [CODE], etc. either explicitly mention nul-handling or claim to be “plain [CODE] strings”. But [CODE] says neither, and it seems to have its own representation for the purposes of [CODE], so I am unsure.)\nGonzalo: I did find [CODE] in the C API docs, which I assume is related, but that function requires an explicit length be specified, so it doesn’t really help with my confusion.\nClarinda: All string representations include a NUL terminator. If there’s a NUL in the middle of a Racket string, then a foreign callee that expects a terminator will interpret the middle NUL as a terminator.\nClarinda: I’ll update the docs\nElin: One rationale for separating tests is that the tests can rely on packages that the implementation doesn’t need. For example [CODE] doesn’t need to depend on [CODE] or [CODE]. But to test [CODE], we wanted to use [CODE] and [CODE]. There would be a similar rationale for something like [CODE]. That package is meant to be used to render scribble docs for non-s-expression languages. So to test it, I want to run it on lots of non-s-expression languages, which it would have to depend on as packages. However, the [CODE] version shouldn’t need all that.\nElin: Though you do have a point with submodules. Maybe a good strategy is to have easy unit tests (things that require your library and [CODE], nothing more) in test submodules in the [CODE] package, and only have more complex tests that might use other packages and other languages in the [CODE] package.\nJeanine: I tend to write external tests instead of test submodules, so I generally put the test subdir in the main package. But putting them in the lib package seems fine too, as long as the dependencies are minimal (as Alex just said).\nGonzalo: Thanks, for both those things!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 9,
        "duration_minutes": 665.27,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "requires",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elin",
          "Gonzalo",
          "Jeanine"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-03T00:02:05.099400",
          "text": "<@Clarinda> What is the expected C representation for the `_string/utf-16` type? My first inclination is to assume that they are expected to be nul-terminated, just like for `_bytes`… but then again, I’d also expect `_string/ucs-4` _wouldn’t_ (necessarily) be nul-terminated, since the documentation says it corresponds to the native Racket string type, which can contain nuls."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-03T00:04:45.101400",
          "text": "(It would make sense to me if `_string/ucs-4` is a special, different thing designed to correspond directly with Racket’s internal string representation, and the other types like `_bytes`, `_string/utf-8`, `_path`, `_symbol`, etc. either explicitly mention nul-handling or claim to be “plain `char*` strings”. But `_string/utf-16` says neither, and it seems to have its own representation for the purposes of `ctype-&gt;layout`, so I am unsure.)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-03T00:08:33.102900",
          "text": "I did find `scheme_utf16_to_ucs4` in the C API docs, which I assume is related, but that function requires an explicit length be specified, so it doesn’t really help with my confusion."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-03T10:47:14.104800",
          "text": "All string representations include a NUL terminator. If there’s a NUL in the middle of a Racket string, then a foreign callee that expects a terminator will interpret the middle NUL as a terminator."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-03T10:49:41.105000",
          "text": "I’ll update the docs"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-03T10:55:40.105200",
          "text": "One rationale for separating tests is that the tests can rely on packages that the implementation doesn’t need. For example `sweet-exp-lib` doesn’t need to depend on `lazy` or `typed-racket-lib`. But to test `sweet-exp`, we wanted to use `#lang sweet-exp lazy` and `#lang sweet-exp typed/racket`.\n\nThere would be a similar rationale for something like `scribble-code-examples`. That package is meant to be used to render scribble docs for non-s-expression languages. So to test it, I want to run it on lots of non-s-expression languages, which it would have to depend on as packages. However, the `-lib` version shouldn’t need all that."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-03T10:57:33.105400",
          "text": "Though you do have a point with submodules. Maybe a good strategy is to have easy unit tests (things that require your library and `rackunit-lib`, nothing more) in test submodules in the `-lib` package, and only have more complex tests that might use other packages and other languages in the `-test` package."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-05-03T10:58:30.105600",
          "text": "I tend to write external tests instead of test submodules, so I generally put the test subdir in the main package. But putting them in the lib package seems fine too, as long as the dependencies are minimal (as Alex just said)."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-03T11:07:21.106400",
          "text": "Thanks, for both those things!"
        }
      ]
    },
    {
      "conversation_id": "546",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: &gt; Although I guess it means you can’t use test or doc submodules. Relatedly, how can I [CODE] the submodule [CODE] of a submodule in a file?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-03T01:12:15.104100",
          "text": "&gt; Although I guess it means you can’t use test or doc submodules.\n\nRelatedly, how can I `raco test` the submodule `test` of a submodule in a file?"
        }
      ]
    },
    {
      "conversation_id": "547",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: I don’t understand the rationale for separating tests from the library — how can you be sure it works? Anyhow, for [CODE] I just created a [CODE] with code &amp; tests, and [CODE] that adds the docs, and that seems fine.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-05-03T09:51:59.104600",
          "text": "I don’t understand the rationale for separating tests from the library — how can you be sure it works? Anyhow, for `brag` I just created a `brag-lib` with code &amp; tests, and `brag` that adds the docs, and that seems fine."
        }
      ]
    },
    {
      "conversation_id": "548",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: In traditional Racket, the best way to determine future safety is using the log messages that futures provide.\nKristeen: Unfortunately, the future logging infrastructure is not yet in place for RacketCS. However, you can see that some operations that block in traditional Racket do not block in RacketCS. Consider this interaction: [CODE_BLOCK]\nKristeen: On traditional Racket you get this instead, because futures block on hash operations: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 29.28,
        "contains_question": false,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-05-03T11:07:04.105800",
          "text": "In traditional Racket, the best way to determine future safety is using the log messages that futures provide."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-03T11:35:30.106600",
          "text": "Unfortunately, the future logging infrastructure is not yet in place for RacketCS. However, you can see that some operations that block in traditional Racket do not block in RacketCS. Consider this interaction:\n```\n[samth@huor:/tmp plt] PLTSTDERR=debug@future racketcs\nWelcome to Racket v7.2.0.12 [cs].\n&gt; (define v (vector 1 2 3))\n&gt; (define b #t)\n&gt; (define t (future (lambda () (for/hash ([i v]) (values i i)) (set! b 'done))))\n&gt; b\n'done\n&gt; (touch t)\n&gt; b\n'done\n```"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-03T11:36:21.106800",
          "text": "On traditional Racket you get this instead, because futures block on hash operations:\n```\n[samth@huor:/tmp plt] racket\nWelcome to Racket v7.3.0.1.\n&gt; (define v (vector 1 2 3))\n&gt; (define b #t)\n&gt; (define t (future (lambda () (for/hash ([i v]) (values i i)) (set! b 'done))))\n&gt; b\n#t\n&gt; (touch t)\n&gt; b\n'done\n```"
        }
      ]
    },
    {
      "conversation_id": "549",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: According to `pkgs,<[URL] I have reached a level of Racketing I do not completely understand\nPriscila: Is the new one that fails, and the other one an older that shows a succeeding log?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 2.17,
        "contains_question": true,
        "action_keywords": [
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Lillian",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-05-03T15:01:30.107300",
          "text": "According to `pkgs,<http://racket-lang.org|racket-lang.org>` I have reached a level of Racketing I do not completely understand"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-03T15:03:40.108200",
          "text": "Is the new one that fails, and the other one an older that shows a succeeding log?"
        }
      ]
    },
    {
      "conversation_id": "550",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: I'm in the process of adding Gmail to the same deprecation list as my old Yahoo and Hotmail and Xxx accounts. I want to subscribe to racket-{users dev money} lists with a new, (non-google) email address. Is this possible to do without creating Yet Another Google Account using the new non-google email address? Some things indicate that emailing to `[Group [EMAIL] would work. OTOH other things imply Google @#$%-canned that awhile ago. I guess I can just go ahead and try, but thought I'd ask in case anyone else knows.\nMai: I just uploaded my first package! <[URL] Priscila told me that [CODE] is *not* an ideal name because people have already claimed this name (<[URL] On the other hand, I want a relatively short name. Does anyone have a suggestion?\nJulia: Well \"it worked\" in the sense that it replied, asking me to confirm with a reply email. It says I've \"joined\". It remains to be seen if I'll actually receive emails (no traffic on racket-users yet), and, if it will let me send emails.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 110.63,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-03T15:26:41.111900",
          "text": "I'm in the process of adding Gmail to the same deprecation list as my old Yahoo and Hotmail and Xxx accounts.\nI want to subscribe to racket-{users dev money} lists with a new, (non-google) email address.\nIs this possible to do without creating Yet Another Google Account using the new non-google email address?\n\nSome things indicate that emailing to `[Group Name]+subscribe@googlegroups.com` would work.\nOTOH other things imply Google @#$%-canned that awhile ago.\n\nI guess I can just go ahead and try, but thought I'd ask in case anyone else knows."
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-03T15:52:23.113700",
          "text": "I just uploaded my first package! <https://docs.racket-lang.org/loop/index.html>\n\n<@Priscila> told me that `loop` is *not* an ideal name because people have already claimed this name (<http://www.ccs.neu.edu/home/shivers/papers/loop.pdf>). On the other hand, I want a relatively short name. Does anyone have a suggestion?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-03T17:17:19.114200",
          "text": "Well \"it worked\" in the sense that it replied, asking me to confirm with a reply email. It says I've \"joined\".\nIt remains to be seen if I'll actually receive emails (no traffic on racket-users yet), and, if it will let me send emails."
        }
      ]
    },
    {
      "conversation_id": "551",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I don't think package splitting is a good thing to do. With the submodule and phase systems, we can accurately track which parts of a package depend on what other packages and at which phase(s). Duplicating that information by mechanically splitting packages is busywork that's difficult to maintain.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-03T16:06:16.114000",
          "text": "I don't think package splitting is a good thing to do. With the submodule and phase systems, we can accurately track which parts of a package depend on what other packages and at which phase(s). Duplicating that information by mechanically splitting packages is busywork that's difficult to maintain."
        }
      ]
    },
    {
      "conversation_id": "552",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Hallie: here is another way: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Hallie"
        ]
      },
      "timeline": [
        {
          "user": "Hallie",
          "timestamp": "2019-05-03T17:51:06.114600",
          "text": "here is another way: <https://defn.io/2019/02/05/google-groups/>"
        }
      ]
    },
    {
      "conversation_id": "553",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: hi everyone :slightly_smiling_face:, I took a break after starting a new job\nTerrence: I also found a copy of How to Design Programs Second Edition for .99 at Goodwill. Score!\nRaul: Terrence Welcome back!\nTerrence: hi Bill!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 1.32,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Raul",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-05-03T20:14:53.115100",
          "text": "hi everyone :slightly_smiling_face:, I took a break after starting a new job"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-05-03T20:15:38.115600",
          "text": "I also found a copy of How to Design Programs Second Edition for .99 at Goodwill. Score!"
        },
        {
          "user": "Raul",
          "timestamp": "2019-05-03T20:16:02.115900",
          "text": "<@Terrence> Welcome back!"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-05-03T20:16:12.116100",
          "text": "hi Bill!"
        }
      ]
    },
    {
      "conversation_id": "554",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Oh cool. Good to know.\nJulia: I actually had a little wave of nostalgia, it's been awhile since I sent a subscribe email to a listserve. :older_man:\nMichelina: 99 cents! that's a steal\nMichelina: Lillian <[URL] gives a 404\nJulia: Milissa Someone on IRC mentioned that \"riposte docs\" are a 404. I don't see that. <[URL] is 200 OK for me. However it prompted me to look at <[URL] and I saw something I've never seen before. <[URL] [CODE_BLOCK]\nMichelina: Julia yeah, a GitHub issue was opened about it. I screwed up the deps for the package. Fix coming!\nMichelina: Julia feature for racket-mode that I'd love to see: ability to consistently rename an identifier",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 1620.5,
        "contains_question": false,
        "action_keywords": [
          "fix",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-03T22:04:03.116500",
          "text": "Oh cool. Good to know."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-03T22:05:52.116700",
          "text": "I actually had a little wave of nostalgia, it's been awhile since I sent a subscribe email to a listserve. :older_man:"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-05-03T23:58:34.117000",
          "text": "99 cents! that's a steal"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-05-04T01:02:14.117300",
          "text": "<@Lillian> <https://docs.racket-lang.org/brag/> gives a 404"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-04T20:38:22.119800",
          "text": "<@Milissa> Someone on IRC mentioned that \"riposte docs\" are a 404.\nI don't see that. <https://docs.racket-lang.org/riposte/index.html> is 200 OK for me.\nHowever it prompted me to look at <http://pkgs.r-l.org|pkgs.r-l.org> and I saw something I've never seen before.\n<https://pkgs.racket-lang.org/package/riposte>\n```\nChecksum error An error occurred while updating the package checksum.\n\npkg: invalid `deps' specification\n  specification: '(\"base\" \"brag\" \"beautiful-racket-lib\" \"http\" \"argo\" \"dotenv\" (\"json-pointer\" #:version \"0.6.0\") \"uri-template\" \"ejs\")\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:14:0: extract-pkg-dependencies\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:397:3\n   /home/pkgserver/pkg-index/official/update.rkt:125:4\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-higher-order.rkt:361:33\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content20\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:397:3\n   /home/pkgserver/pkg-index/official/update.rkt:114:0: update-from-content\n   /home/pkgserver/racket/collects/racket/private/more-scheme.rkt:261:28\n   /home/pkgserver/racket/collects/racket/private/list.rkt:264:4: loop\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:138:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:154:22\n```"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-05-05T00:59:23.120700",
          "text": "<@Julia> yeah, a GitHub issue was opened about it. I screwed up the deps for the package. Fix coming!"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-05-05T01:04:33.121700",
          "text": "<@Julia> feature for racket-mode that I'd love to see: ability to consistently rename an identifier"
        }
      ]
    },
    {
      "conversation_id": "555",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Michelina: is that due to the failssucceeds problem?\nMichelina: I hear you! what kinds of stuff interest you (programming-wise)?\nLilli: :wave:lo all... long time no see\nLilli: I've just got a pixelbook (woo), and I'm trying to run drracket in linux. It won't start. Reporting [CODE_BLOCK]\nLilli: Is this a known thing?\nMai: I googled and found <[URL] and <[URL]\nLilli: you know, I'm so out of the loop... I didn't even notice that v6.7 is neolithic.\nLilli: (and I should have mentioned the racket version)\nPriscila: Lilli Probably not. I don't think too many have ChromeBooks.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 9,
        "duration_minutes": 1962.55,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Lilli",
          "Mai",
          "Michelina",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Michelina",
          "timestamp": "2019-05-04T01:02:38.117700",
          "text": "is that due to the failssucceeds problem?"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-05-04T08:24:17.117800",
          "text": "I hear you! what kinds of stuff interest you (programming-wise)?"
        },
        {
          "user": "Lilli",
          "timestamp": "2019-05-05T06:07:38.123200",
          "text": ":wave:lo all... long time no see"
        },
        {
          "user": "Lilli",
          "timestamp": "2019-05-05T06:09:09.124400",
          "text": "I've just got a pixelbook (woo), and I'm trying to run drracket in linux. It won't start. Reporting ```$ drracket\nxkbcommon: ERROR: Key \"&lt;CAPS&gt;\" added to modifier map for multiple modifiers; Using Mod3, ignoring Lock\n\n(drracket:1722): Gdk-WARNING **: /build/gtk+3.0-NmdvYo/gtk+3.0-3.22.11/./gdk/x11/gdkwindow-x11.c:5573 drawable is not a native X11 window\nWindow-&gt;C: argument is not non-null `Window' pointer\n  argument: #f```"
        },
        {
          "user": "Lilli",
          "timestamp": "2019-05-05T06:09:19.124700",
          "text": "Is this a known thing?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-05T06:14:55.125300",
          "text": "I googled and found\n<https://github.com/racket/drracket/issues/87> and\n<https://github.com/racket/racket/issues/1547>"
        },
        {
          "user": "Lilli",
          "timestamp": "2019-05-05T06:17:02.125700",
          "text": "you know, I'm so out of the loop... I didn't even notice that v6.7 is neolithic."
        },
        {
          "user": "Lilli",
          "timestamp": "2019-05-05T06:17:13.125900",
          "text": "(and I should have mentioned the racket version)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-05T09:45:11.126500",
          "text": "<@Lilli> Probably not. I don't think too many have ChromeBooks."
        }
      ]
    },
    {
      "conversation_id": "556",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: I have a ChromeBook Pixel 1 and 2, where I used Crouton to run Linux apps. The new Crostini thing sounds way simpler. Them using Wayland instead of X11 seems a little too bleeding edge, means some apps will have problems, but idk. I can't try b/c Google not supporting that on their own older hardware. Probably I'll wipe ChromeOS and install Ubuntu or whatever directly.\nLilli: I've built a version from source. It works fine for me now!\nJulia: You can [CODE] and [CODE]. But:\nJulia: That only works within one source file at a time.\nJulia: It is a little bit \"buried\" in the UX.\nJulia: Also when I try it now on my local build of racket-mode I see that check-syntax-mode is confused about the position of usages, so, rename won't work. This has worked \"forever\" so I'll figure out what broke when, and fix it.\nJulia: Oh. I think it's simply because the buffer had changed and wasn't saved (I just used some [CODE] buffer I'd had open for something else). The backend check-syntax uses the file. Maybe the bug to fix is a missing [CODE] ....\nJulia: Yeah. TL;DR: I'll push a commit to have [CODE] call [CODE] automatically. Meanwhile, just be sure to save the buffer before running [CODE].",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 38.92,
        "contains_question": false,
        "action_keywords": [
          "build",
          "fix",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Lilli"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-05T10:34:26.129800",
          "text": "I have a ChromeBook Pixel 1 and 2, where I used Crouton to run Linux apps.\nThe new Crostini thing sounds way simpler.\nThem using Wayland instead of X11 seems a little too bleeding edge, means some apps will have problems, but idk.\nI can't try b/c Google not supporting that on their own older hardware. Probably I'll wipe ChromeOS and install Ubuntu or whatever directly."
        },
        {
          "user": "Lilli",
          "timestamp": "2019-05-05T10:34:46.130300",
          "text": "I've built a version from source. It works fine for me now!"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T10:44:27.130700",
          "text": "You can `M-x racket-check-syntax-mode` and `racket-check-syntax-mode-rename`. But:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T10:44:34.130900",
          "text": "That only works within one source file at a time."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T10:44:51.131100",
          "text": "It is a little bit \"buried\" in the UX."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T10:46:00.131300",
          "text": "Also when I try it now on my local build of racket-mode I see that check-syntax-mode is confused about the position of usages, so, rename won't work. This has worked \"forever\" so I'll figure out what broke when, and fix it."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T10:52:21.131500",
          "text": "Oh. I think it's simply because the buffer had changed and wasn't saved  (I just used some `/tmp/foo.rkt` buffer I'd had open for something else).\nThe backend check-syntax uses the file.\nMaybe the bug to fix is a missing `save-if-changed` ...."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T11:13:21.131700",
          "text": "Yeah. TL;DR: I'll push a commit to have `racket-check-syntax-mode` call `save-if-changed` automatically. Meanwhile, just be sure to save the buffer before running `M-x racket-check-syntax-mode`."
        }
      ]
    },
    {
      "conversation_id": "557",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Apropos, are you satisfied with your ChromeBooks?\nMadelaine: I am trying to open a specific locally-installed documentation page programmatically (from a DrRacket toolbar button). On my machine [CODE] works great, but for my collaborators it tries to send them to [CODE]send-main-page` the right place to start? <[URL] (This is for a [CODE] for my collaborators to just give them some editor support for a temporary data file format we’re working with internally.)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 12.48,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Madelaine",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-05-05T12:15:01.133300",
          "text": "Apropos, are you satisfied with your ChromeBooks?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-05-05T12:27:30.137600",
          "text": "I am trying to open a specific locally-installed documentation page programmatically (from a DrRacket toolbar button). On my machine `(send-main-page #:sub \"bib-db-grammar/index.html\")` works great, but for my collaborators it tries to send them to `<http://docs.racket-lang.org|docs.racket-lang.org>`, where this document doesn’t exist. Is there something obvious I’m doing wrong? Is `send-main-page` the right place to start? <https://docs.racket-lang.org/help/index.html#(def._((lib._help%2Fsearch..rkt)._send-main-page))>\n(This is for a `#lang` for my collaborators to just give them some editor support for a temporary data file format we’re working with internally.)"
        }
      ]
    },
    {
      "conversation_id": "558",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Do you have “bib-db-grammer” installed in installation scope or use scope? How about your collaborators?\nMadelaine: I have it in installation scope, but I think my collaborators have it in user scope: I use [CODE], and I doubt they’d have changed theirs.\nClarinda: I think that’s pronbably the reason, since user-scope documentation goes in the package directory instead of a centralized directory. If you can make [CODE] work, that’s probably a better way to go. Or the more primitive functions like [CODE], although it always takes me a while to figure out again how to assemble those parts.\nMadelaine: Thanks, I will look into that!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 4.45,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Madelaine"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-05-05T14:07:01.137800",
          "text": "Do you have “bib-db-grammer” installed in installation scope or use scope? How about your collaborators?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-05-05T14:08:25.138000",
          "text": "I have it in installation scope, but I think my collaborators have it in user scope: I use `(default-pkg-scope)`, and I doubt they’d have changed theirs."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-05T14:10:31.138200",
          "text": "I think that’s pronbably the reason, since user-scope documentation goes in the package directory instead of a centralized directory. If you can make `find-help/lib` work, that’s probably a better way to go. Or the more primitive functions like `xref-tag-&gt;path+anchor`, although it always takes me a while to figure out again how to assemble those parts."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-05-05T14:11:28.138400",
          "text": "Thanks, I will look into that!"
        }
      ]
    },
    {
      "conversation_id": "559",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: <[URL]\nJulia: For awhile I've noticed CI builds of racket-mode fail for HEADCS trying to start the REPL. Today I _finally_ got time to catch up, install HEADCS locally, and investigate. (I've been super busy last N months on a consulting project.) I reproduced the failure. Took a deep breath. Ready for a long, complicated debugging session. Is there some change with [CODE], or something super intricate?\nJulia: Turns out [CODE] is now instead [CODE] -- no leading [CODE]. So a test regexp needs to change from [CODE] to [CODE].\nJulia: Truly, I am operating at the pinnacle of software engineering mastery and sophistication here. :smirk:\nJulia: Insert \"what people think I do what I actually do\" meme here.\nPriscila: No such thing as an innocent change.\nJulia: At least I noticed it within a couple minutes. ¯\\_(ツ)_/¯\nJulia: The longer a debugging mystery continues, the simpler the cause turns out to be. So this should have kept me busy for a few days. I'm sort of disappointed.\nJulia: Clarinda It looks like [CODE] isn't consistent. [CODE_BLOCK]\nJulia: Whereas with 7.2: [CODE_BLOCK]\nJulia: It's fine to ask. I think pollen is awesome but am not using it so I probably won't be able to answer. But someone else probably can, eventually.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 11,
        "duration_minutes": 484.1,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-05T15:31:14.138600",
          "text": "<https://github.com/greghendershott/racket-mode/issues/372>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T16:29:55.142800",
          "text": "For awhile I've noticed CI builds of racket-mode fail for HEADCS trying to start the REPL.\nToday I _finally_ got time to catch up, install HEADCS locally, and investigate. (I've been super busy last N months on a consulting project.)\nI reproduced the failure. Took a deep breath. Ready for a long, complicated debugging session.\nIs there some change with `module-&gt;namespace`, or something super intricate?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T16:30:15.143100",
          "text": "Turns out `\"Welcome to Racket v7.2\"` is now instead `\"Welcome to Racket 7.3.0.3\"` -- no leading `\"v\"`.\nSo a test regexp needs to change from `\"Welcome to Racket [0-9.]+\\n&gt; \"` to `\"Welcome to Racket v?[0-9.]+\\n&gt; \"`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T16:30:47.143700",
          "text": "Truly, I am operating at the pinnacle of software engineering mastery and sophistication here. :smirk:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T16:31:59.144400",
          "text": "Insert \"what people think I do what I actually do\" meme here."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-05T16:33:01.144800",
          "text": "No such thing as an innocent change."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T16:35:02.145200",
          "text": "At least I noticed it within a couple minutes. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T16:35:45.146000",
          "text": "The longer a debugging mystery continues, the simpler the cause turns out to be.\nSo this should have kept me busy for a few days.\nI'm sort of disappointed."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T18:50:37.146600",
          "text": "<@Clarinda> It looks like `banner` isn't consistent.\n```\ngreg@x1c:~$ ~/racket/7.3.0.3-cs/bin/racket --version\nWelcome to Racket v7.3.0.3 [cs].\ngreg@x1c:~$ ~/racket/7.3.0.3-cs/bin/racket\nWelcome to Racket v7.3.0.3 [cs].\n&gt; (banner)\n\"Welcome to Racket 7.3.0.3\\n\"\n&gt; \n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T18:51:39.146800",
          "text": "Whereas with 7.2:\n```\ngreg@x1c:~$ ~/racket/7.2/bin/racket --version\nWelcome to Racket v7.2.\ngreg@x1c:~$ ~/racket/7.2/bin/racket\nWelcome to Racket v7.2.\n&gt; (banner)\n\"Welcome to Racket v7.2.\\n\"\n&gt; \n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-05T23:35:20.150300",
          "text": "It's fine to ask. I think pollen is awesome but am not using it so I probably won't be able to answer. But someone else probably can, eventually."
        }
      ]
    },
    {
      "conversation_id": "560",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: The “v” should still be there for plain Racket. Is this something other than the startup banner from [CODE]?\nClarinda: Will fix. Thanks!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 51.9,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-05-05T18:37:55.146400",
          "text": "The “v” should still be there for plain Racket. Is this something other than the startup banner from `racket`?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-05T19:29:49.147000",
          "text": "Will fix. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "561",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sunni: Hello, I’m new here, so is it appropriate to ask about the pollen language here? Or is this just for the main racket language?\nSunni: Thanks!\nSunni: I’m looking to transition a file from Markdown authoring mode to Pollen markup to support multiple target formats (regular HTML and a different Wiki friendly HTML). Is there a decode-x type function I can add to my pollen.rkt that would allow me to continue rendering the markdown as before? I’ll gradually then change out markdown for pollen markup as I update the pages.\nSunni: Exactly what I was looking for. I’ll take a stab at it later. Thanks for sharing the Google group, I’ll give it a look. Though, I’m in China so it’s not easy (but not impossible) for me to access.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 142.63,
        "contains_question": true,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Sunni",
          "timestamp": "2019-05-05T23:24:23.149200",
          "text": "Hello, I’m new here, so is it appropriate to ask about the pollen language here? Or is this just for the main racket language?"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-06T00:15:02.150800",
          "text": "Thanks!"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-06T00:18:00.154600",
          "text": "I’m looking to transition a file from Markdown authoring mode to Pollen markup to support multiple target formats (regular HTML and a different Wiki friendly HTML). Is there a decode-x type function I can add to my pollen.rkt that would allow me to continue rendering the markdown as before? I’ll gradually then change out markdown for pollen markup as I update the pages. "
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-06T01:47:01.157600",
          "text": "Exactly what I was looking for. I’ll take a stab at it later.  Thanks for sharing the Google group, I’ll give it a look. Though, I’m in China so it’s not easy (but not impossible) for me to access."
        }
      ]
    },
    {
      "conversation_id": "562",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: At the basic level, this should do what you want: [CODE_BLOCK]\nMai: And FWIW, Pollen users usually ask questions at <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 2.47,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-06T00:45:09.154700",
          "text": "At the basic level, this should do what you want:\n\n```\n;; pollen.rkt\n#lang racket\n\n(provide markdown)\n(require markdown/parse)\n\n(define (markdown . xs)\n  (cons '@ (parse-markdown (string-join xs))))\n\n;; <http://my-file.poly.pm|my-file.poly.pm>\n#lang pollen\n\n◊(define hello \"Hello\")\n\n◊markdown{\n  ◊hello _world_!\n  How are you?\n\n  Here's a *new* paragraph.\n}\n```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-06T00:47:37.155000",
          "text": "And FWIW, Pollen users usually ask questions at <https://groups.google.com/forum/#!forum/pollenpub>"
        }
      ]
    },
    {
      "conversation_id": "563",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lilli: i'm getting the odd core dump... but with the new laptop, i've got a billion other things i need to do before geting back to that!\nLilli: good news is, that this will make a good, portable (as in luggable) platform for racketing, so I'm bound to be doing a lot more.\nGiuseppe: I'm interested in building decentralised and peer to peer software. I am into building software that will help achieve my long time goal of building a self-sustainable lifestyle. It can be simple things like how I can automate simple things like managing a garden, monitoring a specific area via cameras + sensors, or it can also be trying to mess with my own personal trackers.\nTomas: can’t find any packages or GH project w a cursory search\nTomas: <[URL] uses a lot of EDN\nTomas: using something like Brag to parse GraphQL’s schema is a thing <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 427.1,
        "contains_question": false,
        "action_keywords": [
          "build",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Giuseppe",
          "Lilli",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Lilli",
          "timestamp": "2019-05-06T06:18:07.158000",
          "text": "i'm getting the odd core dump... but with the new laptop, i've got a billion other things i need to do before geting back to that!"
        },
        {
          "user": "Lilli",
          "timestamp": "2019-05-06T06:18:42.158200",
          "text": "good news is, that this will make a good, portable (as in luggable) platform for racketing, so I'm bound to be doing a lot more."
        },
        {
          "user": "Giuseppe",
          "timestamp": "2019-05-06T06:58:19.158400",
          "text": "I'm interested in building decentralised and peer to peer software. I am into building software that will help achieve my long time goal of building a self-sustainable lifestyle. It can be simple things like how I can automate simple things like managing a garden, monitoring a specific area via cameras + sensors, or it can also be trying to mess with my own personal trackers."
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-06T11:02:05.159100",
          "text": "can’t find any packages or GH project w a cursory search"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-06T13:22:53.160300",
          "text": "<https://github.com/walmartlabs/lacinia> uses a lot of EDN"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-06T13:25:13.160600",
          "text": "using something like Brag to parse GraphQL’s schema is a thing <https://graphql.github.io/graphql-spec/June2018/>"
        }
      ]
    },
    {
      "conversation_id": "564",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Almeda: Is there a way to make graphql queries with Racket?\nAlmeda: same, time to pretend I'm not junior dev and start porting the clojure implementation :joy:\nTomas: would be pretty cool to see that\nAlmeda: im waaay too beginner(in Racket)/intermediate(overall) for that. For example off the bat, it used EDN syntax for its schema. Thats a very clojure-choice right there. Having not used Racket enough to know, what would Racket devs like the schema syntax to be, and since Racket is a DSL-creator, maybe EDN *IS* the right choice. I'd hit a roadblock every. step. of. the. way. ..But if someone starts this I'd try my hardest to contribute.\nJulia: Almeda Is this the one? <[URL]\nAlmeda: Julia I was looking at Lacinia (seemed more active)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 212.6,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Almeda",
          "Julia",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Almeda",
          "timestamp": "2019-05-06T10:51:49.159000",
          "text": "Is there a way to make graphql queries with Racket?"
        },
        {
          "user": "Almeda",
          "timestamp": "2019-05-06T11:03:19.159300",
          "text": "same, time to pretend I'm not junior dev and start porting the clojure implementation :joy:"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-06T11:03:54.159500",
          "text": "would be pretty cool to see that"
        },
        {
          "user": "Almeda",
          "timestamp": "2019-05-06T11:14:12.159700",
          "text": "im waaay too beginner(in Racket)/intermediate(overall) for that. For example off the bat, it used EDN syntax for its schema. Thats a very clojure-choice right there. Having not used Racket enough to know, what would  Racket devs like the schema syntax to be, and since Racket is a DSL-creator, maybe EDN *IS* the right choice. I'd hit a roadblock every. step. of. the. way.\n\n\n..But if someone starts this I'd try my hardest to contribute."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-06T12:33:14.160000",
          "text": "<@Almeda> Is this the one? <https://github.com/tendant/graphql-clj>"
        },
        {
          "user": "Almeda",
          "timestamp": "2019-05-06T14:24:25.160800",
          "text": "<@Julia> I was looking at Lacinia (seemed more active)"
        }
      ]
    },
    {
      "conversation_id": "565",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: That is something that feels like it needs some work, documentation wise, it makes getting started with futures pretty intimidating.\nLeticia: Will/do places in chez just use the native chez OS thread construct?\nKristeen: Places and futures on Racket CS both use Chez threads",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 4.22,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-05-06T21:19:15.161000",
          "text": "That is something that feels like it needs some work, documentation wise, it makes getting started with futures pretty intimidating."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-05-06T21:19:24.161200",
          "text": "Will/do places in chez just use the native chez OS thread construct?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-06T21:23:28.161500",
          "text": "Places and futures on Racket CS both use Chez threads"
        }
      ]
    },
    {
      "conversation_id": "566",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Amira: [CODE]? I think [CODE] is fine, but if you stick with it, add a margin note to say it's not Olin's loop.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Amira"
        ]
      },
      "timeline": [
        {
          "user": "Amira",
          "timestamp": "2019-05-06T21:32:23.161700",
          "text": "`letloop`?\nI think `loop` is fine, but if you stick with it, add a margin note to say it's not Olin's loop."
        }
      ]
    },
    {
      "conversation_id": "567",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeffery: Two questions on using scribble/base. first question. how do I insert a newline in an title{xx}. I want to do something like “Memo - some text here” “By - my initials” The following does not get me what I want: #lang scribble/base title{text 1 text 2} section{text1} xxx section{text2} xxx ---- It renders as “text 1 text 2” *** Second question I tried title{text 1 text 2} section{text1} xxx section{text2} xxx -&gt;with an added line in the title section &lt;- And I got a LOT! of warnings and it didnt render.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jeffery"
        ]
      },
      "timeline": [
        {
          "user": "Jeffery",
          "timestamp": "2019-05-07T04:36:17.164800",
          "text": "Two questions on using scribble/base.\nfirst question. how do I insert a newline in an @title{xx}. I want to do something like\n“Memo - some text here”\n“By - my initials”\nThe following does not get me what I want:\n#lang scribble/base\n@title{text 1\n       text 2}\n@section{text1}\nxxx\n@section{text2}\nxxx\n----\nIt renders as “text 1 text 2”\n***\nSecond question\nI tried\n@title{text 1\n\n       text 2}\n@section{text1}\nxxx\n@section{text2}\nxxx\n\n-&gt;with an added line in the @title section &lt;-\nAnd I got a LOT! of warnings and it didnt render."
        }
      ]
    },
    {
      "conversation_id": "568",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Use [CODE] to create a line break within a title. Or maybe you want to use [CODE] after [CODE]. I see what you mean about the Latex error when you include a blank line, and we should adjust Scribble to avoid that. (Latex is really uncooperative as a back end.)\nMai: I think it’s mostly used to introduce the internal definition context. If you have [CODE], and in [CODE] you want to use [CODE], you might attempt this: [CODE_BLOCK] But this results in an error because [CODE] doesn’t work in the expression context. However, you can do this: [CODE_BLOCK] Because the body of [CODE] allows internal-definition context, this works as expected\nMai: Would it be better if I simply make it completely compatible with [CODE] and call it [CODE]? But otherwise I think I’m gonna stick with [CODE], as it’s only 4 character long.\nJulia: Elizabet I think Mai is right about why that code does that. Also, the Racket style guide suggests using [CODE] instead of [CODE]. Various reasons why. Relevant one, here: You could just write: [CODE_BLOCK]\nJulia: <[URL]\nMai: Yup, I rarely use [CODE] because of this reason. In fact, I think that it’s generally a bad style to write [CODE] _directly_ in your code. The only place I think it makes sense to use is in macros. For example, if you want to define your own [CODE], here’s one possibility (though pretty crappy) [CODE_BLOCK]\nElizabet: great! thank you so much Mai and Julia!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 877.53,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "create",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Elizabet",
          "Julia",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-05-07T09:54:05.167600",
          "text": "Use `@linebreak[]` to create a line break within a title. Or maybe you want to use `@author` after `@title`.\nI see what you mean about the Latex error when you include a blank line, and we should adjust Scribble to avoid that. (Latex is really uncooperative as a back end.)"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-07T21:16:02.169300",
          "text": "I think it’s mostly used to introduce the internal definition context.\n\nIf you have `(if &lt;e1&gt; &lt;e2&gt; &lt;e3&gt;)`, and in `&lt;e2&gt;` you want to use `define`, you might attempt this:\n\n```\n(if #t \n    (begin \n       (define x 1)\n       x)\n    #t)\n```\n\nBut this results in an error because `define` doesn’t work in the expression context. However, you can do this:\n\n```\n(if #t\n    (let ()\n      (define x 1)\n      x)\n    #t)\n\n```\nBecause the body of `let` allows internal-definition context, this works as expected"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-07T21:27:03.170100",
          "text": "Would it be better if I simply make it completely compatible with `let` and call it `let+`? But otherwise I think I’m gonna stick with `loop`, as it’s only 4 character long."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-07T21:33:39.170400",
          "text": "<@Elizabet> I think <@Mai> is right about why that code does that.\nAlso, the Racket style guide suggests using `cond` instead of `if`. Various reasons why. Relevant one, here: You could just write:\n```\n(cond [#t\n       (define x 1)\n       x]\n      [else #t])\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-07T21:35:06.170700",
          "text": "<https://docs.racket-lang.org/style/Choosing_the_Right_Construct.html#%28part._.Conditionals%29>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-07T21:58:40.171200",
          "text": "Yup, I rarely use `if` because of this reason.\n\nIn fact, I think that it’s generally a bad style to write `(let () ...)` _directly_ in your code. The only place I think it makes sense to use is in macros. For example, if you want to define your own `cond`, here’s one possibility (though pretty crappy)\n\n```\n(define-syntax-parser cond*\n  #:literals (else)\n  [(_) #'(void)]\n  [(_ [else . body]) #'(let () . body)]\n  [(_ [test-expr . body] . rest) \n   #'(if test-expr (let () . body) (cond* . rest))])\n```"
        },
        {
          "user": "Elizabet",
          "timestamp": "2019-05-08T00:31:37.171800",
          "text": "great! thank you so much <@Mai> and <@Julia>!"
        }
      ]
    },
    {
      "conversation_id": "569",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: let/defaults\nPriscila: where / is short for \"with\"",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.22,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-05-07T16:27:05.167900",
          "text": "let/defaults"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-07T16:27:18.168100",
          "text": "where / is short for \"with\""
        }
      ]
    },
    {
      "conversation_id": "570",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elizabet: hello, I've been reading through Rash's source code and found something of the following form: [CODE_BLOCK] is there a purpose to a [CODE] that doesn't introduce any bindings? I can't seem to figure this out from the documentation. Thank you!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elizabet"
        ]
      },
      "timeline": [
        {
          "user": "Elizabet",
          "timestamp": "2019-05-07T20:18:08.168900",
          "text": "hello, I've been reading through Rash's source code and found something of the following form:\n```(let ()\n  &lt;body&gt;)```\n\nis there a purpose to a `let` that doesn't introduce any bindings? I can't seem to figure this out from the documentation.\n\nThank you!"
        }
      ]
    },
    {
      "conversation_id": "571",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: I agree. Well. Sometimes that's the least-worst choice I've found when writing certain [CODE] tests.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-07T23:29:03.171600",
          "text": "I agree. Well. Sometimes that's the least-worst choice I've found when writing certain `rackunit` tests."
        }
      ]
    },
    {
      "conversation_id": "572",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeffery: thanks Clarinda about the linebreak[] tip. I do know the author function but could also think of cases where I would need Headtitle linebreak[] Subtitle.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jeffery"
        ]
      },
      "timeline": [
        {
          "user": "Jeffery",
          "timestamp": "2019-05-08T07:11:28.173600",
          "text": "thanks <@Clarinda> about the @linebreak[] tip. I do know the @author function but could also think of cases where I would need Headtitle @linebreak[] Subtitle."
        }
      ]
    },
    {
      "conversation_id": "573",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terrence: Hi everybody. I had a general question. I am getting back to this language but I wondered, what can I do with it in the future?\nShavon: Terrence well, that's a hard question. You can do whatever you want really. What are you interested in? Or do you want to contribute to racket itself? Maybe there are some libraries looking for help.\nMauro: Terrence what Shavon said. Racket can be used for any kind of programming projects, it's a multi-featured Swiss army knife really. Glided with platinum. If you have specific visions of what you'd like to do in the future, feel free to mention that here, we could give you specific examples of how Racket has been used for the cases you're envisioning.\nTerrence: Mauro to be honest, I need to make more money than I am now. I won't get into my story or why I'm not currently a programmer, but I have had 1 interview in 3 years.\nJulia: Terrence Something I like to point out, for people of all ages/experience/backgrounds, who are interested in starting/resuming a programming career, is the Recurse Center (formerly known as Hacker School). It's not for everyone, but, I just to make sure people are aware it's a possible option. <[URL]\nTerrence: I have to work to pay the bills though. This is really nice though, and maybe I will just hippie-fy myself for 12 weeks lol.\nJulia: How they make money is recruiting. You're not obligated to try to find a job with their help. But you can, and they help coach for interviews, and all that. There's a pretty good alumni network and community.\nJulia: They even have 1-week option these days.\nJulia: Anyway it might not be for you, I just wanted to point it out.\nTerrence: Thank you for the info! Strangest thing: I got a call from a Naval contractor and set up an interview for next Wednesday. They loved my resume.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 658.73,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Mauro",
          "Shavon",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Terrence",
          "timestamp": "2019-05-08T08:02:32.174300",
          "text": "Hi everybody. I had a general question. I am getting back to this language but I wondered, what can I do with it in the future?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-08T09:44:57.176400",
          "text": "<@Terrence> well, that's a hard question. You can do whatever you want really. What are you interested in? Or do you want to contribute to racket itself? Maybe there are some libraries looking for help."
        },
        {
          "user": "Mauro",
          "timestamp": "2019-05-08T10:20:44.178700",
          "text": "<@Terrence> what <@Shavon> said. Racket can be used for any kind of programming projects, it's a multi-featured Swiss army knife really. Glided with platinum.\n\nIf you have specific visions of what you'd like to do in the future, feel free to mention that here, we could give you specific examples of how Racket has been used for the cases you're envisioning."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-05-08T13:36:22.180300",
          "text": "<@Mauro> to be honest, I need to make more money than I am now. I won't get into my story or why I'm not currently a programmer, but I have had 1 interview in 3 years."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-08T13:53:49.183800",
          "text": "<@Terrence> Something I like to point out, for people of all ages/experience/backgrounds, who are interested in starting/resuming a programming career, is the Recurse Center (formerly known as Hacker School).\nIt's not for everyone, but, I just to make sure people are aware it's a possible option.\n<https://www.recurse.com/>"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-05-08T13:55:18.185700",
          "text": "I have to work to pay the bills though. This is really nice though, and maybe I will just hippie-fy myself for 12 weeks lol."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-08T13:56:59.186800",
          "text": "How they make money is recruiting. You're not obligated to try to find a job with their help. But you can, and they help coach for interviews, and all that. There's a pretty good alumni network and community."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-08T13:57:12.187200",
          "text": "They even have 1-week option these days."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-08T13:57:21.187500",
          "text": "Anyway it might not be for you, I just wanted to point it out."
        },
        {
          "user": "Terrence",
          "timestamp": "2019-05-08T19:01:16.188800",
          "text": "Thank you for the info! Strangest thing: I got a call from a Naval contractor and set up an interview for next Wednesday. They loved my resume."
        }
      ]
    },
    {
      "conversation_id": "574",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: I have been wanting to see a graphql implementation in racket for awhile. Mainly because the github api now uses graphql and will make creating a github api in racket a breeze.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-05-08T09:43:10.174500",
          "text": "I have been wanting to see a graphql implementation in racket for awhile. Mainly because the github api now uses graphql and will make creating a github api in racket a breeze."
        }
      ]
    },
    {
      "conversation_id": "575",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: It's not one of those paid \"bootcamps\". It's free to attend. (Admittedly, it's not free to live in NYC for 6 or 12 weeks. But there are some financial assistance options.)\nPriscila: Mai There are two names at play. The package name and the name of the construct. You could name your package some like let-with-defaults (or something better) and then have use loop as the name for the construct.\nPriscila: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 764.93,
        "contains_question": false,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-08T13:54:38.185000",
          "text": "It's not one of those paid \"bootcamps\". It's free to attend. (Admittedly, it's not free to live in NYC for 6 or 12 weeks. But there are some financial assistance options.)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-08T17:16:37.187800",
          "text": "<@Mai>  There are two names at play. The package name and the name of the construct. You could name your package some like let-with-defaults (or something better) and then have use loop as the name for the construct."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-09T02:39:34.190100",
          "text": "<https://www.reddit.com/r/programming/comments/bm9p5e/goal_is_a_compiled_lisp_dialect_created_by/>"
        }
      ]
    },
    {
      "conversation_id": "576",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Terrence good luck :simple_smile:\nTerrence: ty",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 5.4,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Terrence"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-08T19:03:19.189600",
          "text": "<@Terrence> good luck :simple_smile:"
        },
        {
          "user": "Terrence",
          "timestamp": "2019-05-08T19:08:43.189800",
          "text": "ty"
        }
      ]
    },
    {
      "conversation_id": "577",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Laverna: i’m looking for code to support colorized logging, but haven’t been able to find any. anyone know of any existing code for that?\nKristeen: Laverna I also don't know of anything that does that\nJulia: Laverna I don't either but I'm curious. Do you mean ANSI color codes for a terminal? Are you thinking different colors for log levels and/or topics (so this could be done by a log receiver), or, fancy color formatting within each logger message?\nLaverna: right, ANSI color codes for terminal, and my desire is for different colors for each topic, though people often do different colors for each level\nJulia: Anyway, quick glance at that screen shot, it looks like a Racket log-receiver could do this.\nJulia: So call sites don't need to know or care, and, this needn't affect log-receivers outputting to files or to JSON on CloudWatch or whatever else.\nJulia: Is [CODE] the preferred way to do ANSI codes in Racket these days, or [CODE]? I'm not sure. Whatever it is, that plus a log-receiver would be the way to go, I think.\nJulia: (Or neither, maybe it's fine to define a few ANSI color escape codes locally for this. idk.)\nLaverna: yes, that part seems straightforward. i’m thinking about some convenience aspects. like, in clojurescript i’ve done something like a [CODE] macro that defines a logger and a [CODE] function that uses that logger. just to avoid the [CODE] etc for each call to logging.\nJulia: Have you seen [CODE] in Racket?\nLaverna: oh, that looks about perfect. i missed that and had been using [CODE]\nJulia: Yep. :slightly_smiling_face:\nLaverna: and the top half of the google results page i was looking at was all about <[URL]\nJulia: It defines 4 functions for you, [CODE]. One tip, if you want to use those outside the module where you have [CODE], you will need to provide all 4 by name. IOW there's no [CODE] macro.\nJulia: Oh, I didn't know about [CODE].\nJulia: There are enough Racket projects these days, it's hard to keep up. Which is a good problem to have, compared to a few years ago.\nLaverna: so it looks like i can make a receiver for a parent logger, and then i can have multiple [CODE] that use that parent without having to make separate receivers for each child.\nJulia: Yes.\nJulia: There's a default log-receiver that prints to stdout or stderr, depending on the PLTSTDERR and PLTSTDERR env vars.\nJulia: You can define as many other log-receivers as you need/want.\nJulia: Each can have its own topics/levels it cares about.\nLaverna: (it is slightly annoying that unless callers take special care, by the time the receiver gets a log message it already has the [CODE] prefix)\nJulia: Yes. Topics were added later.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 23,
        "duration_minutes": 147.23,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kristeen",
          "Laverna"
        ]
      },
      "timeline": [
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T13:30:20.191000",
          "text": "i’m looking for code to support colorized logging, but haven’t been able to find any. anyone know of any existing code for that?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-09T13:35:15.191500",
          "text": "<@Laverna> I also don't know of anything that does that"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:13:16.193700",
          "text": "<@Laverna> I don't either but I'm curious.\nDo you mean ANSI color codes for a terminal?\nAre you thinking different colors for log levels and/or topics (so this could be done by a log receiver), or, fancy color formatting within each logger message?"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T15:46:41.196500",
          "text": "right, ANSI color codes for terminal, and my desire is for different colors for each topic, though people often do different colors for each level"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:46:51.196700",
          "text": "Anyway, quick glance at that screen shot, it looks like a Racket log-receiver could do this."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:47:43.197100",
          "text": "So call sites don't need to know or care, and, this needn't affect log-receivers outputting to files or to JSON on CloudWatch or whatever else."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:48:26.197300",
          "text": "Is `raart` the preferred way to do ANSI codes in Racket these days, or `charterm`? I'm not sure. Whatever it is, that plus a log-receiver would be the way to go, I think."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:49:23.197500",
          "text": "(Or neither, maybe it's fine to define a few ANSI color escape codes locally for this. idk.)"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T15:49:32.197700",
          "text": "yes, that part seems straightforward.  i’m thinking about some convenience aspects. like, in clojurescript i’ve done something like a `deflogger` macro that defines a logger and a `log-info` function that uses that logger. just to avoid the `(log-message logger 'info ...)` etc for each call to logging."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:49:58.197900",
          "text": "Have you seen `define-logger` in Racket?"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T15:50:38.198100",
          "text": "oh, that looks about perfect. i missed that and had been using `make-logger`"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:51:07.198300",
          "text": "Yep. :slightly_smiling_face:"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T15:51:40.198500",
          "text": "and the top half of the google results page i was looking at was all about <https://docs.racket-lang.org/ansi-color/index.html>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:52:20.198700",
          "text": "It defines 4 functions for you, `log-&lt;topic&gt;-&lt;level&gt;`.\nOne tip, if you want to use those outside the module where you have `define-logger`, you will need to provide all 4 by name. IOW there's no `define/provide-logger` macro."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:53:36.198900",
          "text": "Oh, I didn't know about `ansi-color`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:53:58.199100",
          "text": "There are enough Racket projects these days, it's hard to keep up. Which is a good problem to have, compared to a few years ago."
        },
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T15:54:04.199300",
          "text": "so it looks like i can make a receiver for a parent logger, and then i can have multiple `define-loggers` that use that parent without having to make separate receivers for each child."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:54:21.199500",
          "text": "Yes."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:54:59.199700",
          "text": "There's a default log-receiver that prints to stdout or stderr, depending on the PLTSTDERR and PLTSTDERR env vars."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:55:27.199900",
          "text": "You can define as many other log-receivers as you need/want."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:55:36.200100",
          "text": "Each can have its own topics/levels it cares about."
        },
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T15:56:54.200300",
          "text": "(it is slightly annoying that unless callers take special care, by the time the receiver gets a log message it already has the `\"&lt;topic&gt;:\"` prefix)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:57:34.200500",
          "text": "Yes. Topics were added later."
        }
      ]
    },
    {
      "conversation_id": "578",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: tangential opinion: all racket log messages should include a module name (e.g. \"racket/contract: something something chaperones something unsafe\")\nTomas: something like <[URL] ?\nJulia: In case someone is thinking of making a Racket package like this: As a U.S. person I'd suggest a slightly less-uncomfortable name, like \"colorful-logs\" or \"rainbow-logs\"?\nJulia: Like, the one for [CODE] in Emacs does.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 22.8,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Karen",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-09T15:24:20.195900",
          "text": "tangential opinion: all racket log messages should include a module name (e.g. \"racket/contract: something something chaperones something unsafe\")"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-09T15:30:16.196000",
          "text": "something like <https://pypi.org/project/coloredlogs/> ?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:45:24.196300",
          "text": "In case someone is thinking of making a Racket package like this: As a U.S. person I'd suggest a slightly less-uncomfortable name, like \"colorful-logs\" or \"rainbow-logs\"?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-09T15:47:08.196900",
          "text": "Like, the one for `racket-logger-mode` in Emacs does."
        }
      ]
    },
    {
      "conversation_id": "579",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: funny i just wrote something like [CODE] for a json logger",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-05-09T16:13:02.200700",
          "text": "funny i just wrote something like `define/provide-logger` for a json logger"
        }
      ]
    },
    {
      "conversation_id": "580",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Laverna: i kind of like topics because they aren't tied to a specific module, but i've definitely been in the situation where i wish i knew where to start looking for which damn file was logging a particular message.\nKaren: the choice of module name doesn’t have to reflect where the log message happens IMO\nKaren: I think it’s reasonable for a logger defined in [CODE] to log messages with [CODE]\nKaren: If I started seeing log messages prefixed with [CODE] I would go to the scribble docs defining the [CODE] module and look for any text mentioning log messages. That kind of workflow is what I want log message best practices to encourage.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 29.45,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Laverna"
        ]
      },
      "timeline": [
        {
          "user": "Laverna",
          "timestamp": "2019-05-09T16:30:53.200900",
          "text": "i kind of like topics because they aren't tied to a specific module, but i've definitely been in the situation where i wish i knew where to start looking for which damn file was logging a particular message."
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-09T16:57:42.201300",
          "text": "the choice of module name doesn’t have to reflect where the log message happens IMO"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-09T16:58:46.201500",
          "text": "I think it’s reasonable for a logger defined in `foo/bar/private/utility` to log messages with `foo/bar`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-09T17:00:20.201700",
          "text": "If I started seeing log messages prefixed with `foo/bar` I would go to the scribble docs defining the `foo/bar` module and look for any text mentioning log messages. That kind of workflow is what I want log message best practices to encourage."
        }
      ]
    },
    {
      "conversation_id": "581",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: How can I find emoji in a string?\nKami: I think the new emoji for UTF-8 begin at a given unicode point. But the older ones are mixed up\nKami: You have the complete list here (take care, the page is slow to load): <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 3.98,
        "contains_question": true,
        "action_keywords": [
          "complete"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T10:16:12.202800",
          "text": "How can I find emoji in a string?"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-10T10:18:03.204400",
          "text": "I think the new emoji for UTF-8 begin at a given unicode point. But the older ones are mixed up"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-10T10:20:11.205000",
          "text": "You have the complete list here (take care, the page is slow to load): <https://www.unicode.org/emoji/charts/full-emoji-list.html>"
        }
      ]
    },
    {
      "conversation_id": "582",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clearly Racket needs a [CODE] predicate. :grin:\nLillian: I’m unclear how Racket represents emoji in UTF-8 strings. They are preserved correctly, but they’re also not findable by their canonical codepoint. For instance: [CODE]\nLillian: Returns this : [CODE]\nLillian: So in a Racket UTF-8 string, the emoji occupies 4 bytes. And the return trip works: [CODE_BLOCK]\nLillian: (DrRacket doesn’t display emoji, but the result is correct)\nGonzalo: What does [CODE] produce on that character?\nLillian: [CODE_BLOCK]\nGonzalo: I am no expert on UTF-8, so to be clear: are you saying you think that string of UTF-8 bytes isn’t the right UTF-8 encoding of that code point, or that you don’t know how to correlate the UTF-8 encoding with the code point?\nGonzalo: Also: some emojis are multi-codepoint sequences, IIUC.\nGonzalo: Does [CODE] on that string produce a single element? (I’d check, but I’m on my phone.)\nLillian: IIUC emoji are outside UTF-8, so within a UTF-8 string, they are encoded as surrogate pairs. So I think the encoding is correct. But I don’t know how to translate the surrogate encoding into a regexp pattern.\nLillian: [CODE_BLOCK]\nGonzalo: I didn’t think UTF-8 used surrogate pairs (that’s UTF-16), but I could be wrong—again, not an expert.\nLillian: OK, so a UTF-8 character can be represented by four bytes. So we get to this: [CODE_BLOCK]\nLillian: If I change these to byte strings the first works (of course), but the second produces the error [CODE]:grin:[CODE]\nGonzalo: (Sorry, had to step away for a moment.) In any case, whether or not UTF-8 technically uses things called “surrogate pairs” or not is probably not helpful—the point is it’s a variable-length encoding. If you want a regexp pattern, can you use [CODE]?\nClarinda: I think you need “\\U1f601” (capital “U”), because “\\u” only uses 4 characters.\nLillian: Oh! Thanks, that does work [CODE_BLOCK]\nClarinda: [CODE_BLOCK]\nClarinda: I forget what backward-compatibility problem made the u/U distinction necessary.\nLillian: So [CODE] is strictly a superset of [CODE].\nPriscila: <[URL]\nPriscila: I am less scared of refactoring in Racket.\nClarinda: I think this choice has worked out well, and Chez Scheme uses roughly the same representation, except that individual characters are tagged. Symbols are represented in UTF-8 in Racket, but they use strings in Chez Scheme / Racket CS.\nKristeen: I'm curious why you'd pick UTF32 again, as opposed to UTF8. Rust and Go have both chosen UTF8, and Swift also doesn't provide constant-time random access and they seem pretty happy with that.\nEileen: In the case of Chez it could be to support [CODE] more efficiently.\nKristeen: Eileen yes, that's the traditional approach in Scheme-family languages -- provide constant time access to every part of the string\nEileen: Also [CODE] [CODE] don't require as much codec logic.\nEileen: These are all very scheme-y reasons\nKristeen: Right, I think also all of those operations are less sensible than they were in the pre-Unicode era\nEileen: I've wondered about having (in any language) an immutable UTF-8 encoded string type and a mutable rope as standard.\nEileen: (actually not quite mutable for the rope, but at least a way to build up \"changed\" strings)\nJulia: Mainly I'm glad I don't need to know or care what the internal representation is; if some people are surprised it's actually UTF-16 or UCS4 or EBCDIC, and had no idea otherwise, then I think that's a wonderful thing. [Edit: To be clear, I had no idea which, myself.]\nJulia: Kristeen Is the argument in favor of UTF-8 internal rep, mainly space?\nKristeen: Also that you usually want to interact in UTF-8 and that avoiding the conversion is faster. Also iterating over UTF-8 encoded ASCII text (pretty common) is faster.\nGonzalo: IME, UTF-32 _sounds_ like it has some advantages, since you get constant-time access to code points, and a “code point” sounds kind of like something that might mean “single unit of text,” in contrast to things like “surrogate pairs” which are just building blocks. The problem is that this isn’t actually true; lots of things that render as a single glyph are made from multiple code points. IIUC, “grapheme clusters” are the closest thing defined by Unicode to “a single unit of text,” and these are themselves made from variable-width strings of code points (of arbitrary length), so a fixed-width encoding is hopeless from the start.\nGonzalo: I don’t know of any programming language in existence that represents entire grapheme clusters with its [CODE]/character datatype. The only choices I think I’ve ever seen are “a character is a byte,” “a character is a UTF-16 code unit,” and “a character is a Unicode code point/scalar value.”\nKristeen: Gonzalo I think Swift does that\nGonzalo: Really? Fascinating.\nKristeen: <[URL]\nGonzalo: That’s cool! I wonder what problems _that_ choice has. :grimacing: (It seems like all of them have at least some…)\nKristeen: I think \"Swift strings are complicated\" is probably one of them\nGonzalo: Fair, though I think that’s still better than the alternative, which is an API that tricks people into thinking strings are _not_ complicated, followed by doing things that are wrong.\nGonzalo: In any case, I agree with both Sam and Greg: I’m not sure what advantage UTF-32 has over UTF-8 as an internal representation, but I’m glad Racket’s API doesn’t expose that implementation detail (C API notwithstanding).\nGonzalo: (The discussion of what [CODE] means is different, but it seems unlikely that’s ever going to change for Racket!)\nJulia: But but but strings are _simple_, just like dates and time zones and people's names and addresses and ... :smile:\nEileen: Strings would be easy if it wasn't for all of those other pesky non-english languages.\nEileen: Oh and math\nGonzalo: I think naïve and clichéd are perfectly cromulent English words. :grin:\nJulia: Madame, this is a Wendy's. We call them freedom strings.",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 50,
        "duration_minutes": 278.58,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "discuss",
          "fix",
          "implement",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Eileen",
          "Gonzalo",
          "Julia",
          "Kristeen",
          "Lillian",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T11:09:31.206100",
          "text": "Clearly Racket needs a `char-emoji?` predicate. :grin:"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:13:09.207700",
          "text": "I’m unclear how Racket represents emoji in UTF-8 strings. They are preserved correctly, but they’re also not findable by their canonical codepoint. For instance: `(bytes-&gt;list (string-&gt;bytes/utf-8 \"😁\"))`"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:13:23.208000",
          "text": "Returns this : `'(240 159 152 129)`"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:14:26.208900",
          "text": "So in a Racket UTF-8 string, the emoji occupies 4 bytes. And the return trip works:\n```\n(bytes-&gt;string/utf-8 (apply bytes '(240 159 152 129)))\n&gt; \"😁\"\n```"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:14:48.209300",
          "text": "(DrRacket doesn’t display emoji, but the result is correct)"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T11:20:52.210500",
          "text": "What does `char-&gt;integer` produce on that character?"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:22:33.212700",
          "text": "```\n&gt; (char-&gt;integer (car (string-&gt;list \"😁\")))\n128513\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T11:23:14.214100",
          "text": "I am no expert on UTF-8, so to be clear: are you saying you think that string of UTF-8 bytes isn’t the right UTF-8 encoding of that code point, or that you don’t know how to correlate the UTF-8 encoding with the code point?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T11:25:31.216600",
          "text": "Also: some emojis are multi-codepoint sequences, IIUC."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T11:26:51.219200",
          "text": "Does `string-&gt;list` on that string produce a single element? (I’d check, but I’m on my phone.)"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:26:52.219300",
          "text": "IIUC emoji are outside UTF-8, so within a UTF-8 string, they are encoded as surrogate pairs. So I think the encoding is correct. But  I don’t know how to translate the surrogate encoding into a regexp pattern."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:27:27.220000",
          "text": "```\n(length (string-&gt;list \"😁\"))\n&gt; 1\n```"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T11:28:36.221400",
          "text": "I didn’t think UTF-8 used surrogate pairs (that’s UTF-16), but I could be wrong—again, not an expert."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:38:13.224900",
          "text": "OK, so a UTF-8 character can be represented by four bytes. So we get to this:\n```\n(regexp-match #rx\"\\u61\" \"a\") ; '(\"a\")\n(regexp-match #rx\"\\u1f601\" \"😁\") ; #f\n```"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:38:37.226100",
          "text": "If I change these to byte strings the first works (of course), but the second produces the error `read-syntax: character `:grin:` is out of range in byte string`"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T11:38:40.226300",
          "text": "(Sorry, had to step away for a moment.) In any case, whether or not UTF-8 technically uses things called “surrogate pairs” or not is probably not helpful—the point is it’s a variable-length encoding. If you want a regexp pattern, can you use `regexp-quote`?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-10T11:39:20.226700",
          "text": "I think you need “\\U1f601” (capital “U”), because “\\u” only uses 4 characters."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:40:00.226900",
          "text": "Oh! Thanks, that does work\n```\n(regexp-match #rx\"\\U1f601\" \"😁\") ; '(\"😁\")\n```"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-10T11:40:01.227100",
          "text": "```\n&gt; (string-length \"\\u1f601\")\n2\n&gt; (string-length \"\\U1f601\")\n1\n```"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-10T11:40:57.227300",
          "text": "I forget what backward-compatibility problem made the u/U distinction necessary."
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T11:46:54.227500",
          "text": "So `\\U` is strictly a superset of `\\u`."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-10T12:25:23.227800",
          "text": "<https://twitter.com/sperbsen/status/1126866140028968961>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-10T12:26:08.228400",
          "text": "I am less scared of refactoring in Racket."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-10T14:26:13.237200",
          "text": "I think this choice has worked out well, and Chez Scheme uses roughly the same representation, except that individual characters are tagged. Symbols are represented in UTF-8 in Racket, but they use strings in Chez Scheme / Racket CS."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T14:35:06.238700",
          "text": "I'm curious why you'd pick UTF32 again, as opposed to UTF8. Rust and Go have both chosen UTF8, and Swift also doesn't provide constant-time random access and they seem pretty happy with that."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-10T14:37:13.239300",
          "text": "In the case of Chez it could be to support `string-set!` more efficiently."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T14:38:02.240200",
          "text": "<@Eileen> yes, that's the traditional approach in Scheme-family languages -- provide constant time access to every part of the string"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-10T14:44:01.241100",
          "text": "Also `string-&gt;list` `list-&gt;string` don't require as much codec logic."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-10T14:44:31.241500",
          "text": "These are all very scheme-y reasons"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T14:45:39.242000",
          "text": "Right, I think also all of those operations are less sensible than they were in the pre-Unicode era"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-10T14:54:30.243100",
          "text": "I've wondered about having (in any language) an immutable UTF-8 encoded string type and a mutable rope as standard."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-10T14:57:20.244000",
          "text": "(actually not quite mutable for the rope, but at least a way to build up \"changed\" strings)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-10T15:03:04.246600",
          "text": "Mainly I'm glad I don't need to know or care what the internal representation is; if some people are surprised it's actually UTF-16 or UCS4 or EBCDIC, and had no idea otherwise, then I think that's a wonderful thing.  [Edit: To be clear, I had no idea which, myself.]"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-10T15:03:29.247100",
          "text": "<@Kristeen> Is the argument in favor of UTF-8 internal rep, mainly space?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T15:04:48.247900",
          "text": "Also that you usually want to interact in UTF-8 and that avoiding the conversion is faster. Also iterating over UTF-8 encoded ASCII text (pretty common) is faster."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:20:23.255400",
          "text": "IME, UTF-32 _sounds_ like it has some advantages, since you get constant-time access to code points, and a “code point” sounds kind of like something that might mean “single unit of text,” in contrast to things like “surrogate pairs” which are just building blocks. The problem is that this isn’t actually true; lots of things that render as a single glyph are made from multiple code points. IIUC, “grapheme clusters” are the closest thing defined by Unicode to “a single unit of text,” and these are themselves made from variable-width strings of code points (of arbitrary length), so a fixed-width encoding is hopeless from the start."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:22:39.258200",
          "text": "I don’t know of any programming language in existence that represents entire grapheme clusters with its `char`/character datatype. The only choices I think I’ve ever seen are “a character is a byte,” “a character is a UTF-16 code unit,” and “a character is a Unicode code point/scalar value.”"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T15:24:53.260300",
          "text": "<@Gonzalo> I think Swift does that"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:25:03.260600",
          "text": "Really? Fascinating."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T15:25:17.261000",
          "text": "<https://developer.apple.com/documentation/swift/character>"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:26:41.262100",
          "text": "That’s cool! I wonder what problems _that_ choice has. :grimacing: (It seems like all of them have at least some…)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T15:28:16.264600",
          "text": "I think \"Swift strings are complicated\" is probably one of them"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:29:36.266400",
          "text": "Fair, though I think that’s still better than the alternative, which is an API that tricks people into thinking strings are _not_ complicated, followed by doing things that are wrong."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:30:32.267600",
          "text": "In any case, I agree with both Sam and Greg: I’m not sure what advantage UTF-32 has over UTF-8 as an internal representation, but I’m glad Racket’s API doesn’t expose that implementation detail (C API notwithstanding)."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:31:30.269000",
          "text": "(The discussion of what `character?` means is different, but it seems unlikely that’s ever going to change for Racket!)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-10T15:35:27.269900",
          "text": "But but but strings are _simple_, just like dates and time zones and people's names and addresses and ...  :smile:"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-10T15:39:25.270500",
          "text": "Strings would be easy if it wasn't for all of those other pesky non-english languages."
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-10T15:39:30.270700",
          "text": "Oh and math"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-10T15:40:50.272000",
          "text": "I think naïve and clichéd are perfectly cromulent English words. :grin:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-10T15:48:06.272300",
          "text": "Madame, this is a Wendy's. We call them freedom strings."
        }
      ]
    },
    {
      "conversation_id": "583",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Lillian I thought that racket strings are logically sequences of code points, independent of an encoding, and the fact that they're internally represented with UTF8 bytestrings was an implementation detail. So why would surrogate pairs affect regexp matching?\nLillian: What I did so far is grab the official emoji specification from the Unicode consortium and then made a little wrapper [CODE] so this specification file could be treated as the source code for an [CODE] function. This all works fine. The only dangling complication is that certain emojis can be followed by “modifiers”. So an emoji matcher needs to take account of that too. Probably my [CODE] should export a regexp pattern too.\nKristeen: Karen they're internally represented as UTF32 (or maybe UCS4) so that character indexing is constant time. This was probably not the right decision but it was less obvious in 2005(?) when Racket switched to unicode",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 33.78,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Kristeen",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-10T13:43:39.231000",
          "text": "<@Lillian> I thought that racket strings are logically sequences of code points, independent of an encoding, and the fact that they're internally represented with UTF8 bytestrings was an implementation detail. So why would surrogate pairs affect regexp matching?"
        },
        {
          "user": "Lillian",
          "timestamp": "2019-05-10T14:13:50.234400",
          "text": "What I did so far is grab the official emoji specification from the Unicode consortium and then made a little wrapper `#lang` so this specification file could be treated as the source code for an `emoji?` function. This all works fine. The only dangling complication is that certain emojis can be followed by “modifiers”. So an emoji matcher needs to take account of that too. Probably my `#lang` should export a regexp pattern too."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-10T14:17:26.235800",
          "text": "<@Karen> they're internally represented as UTF32 (or maybe UCS4) so that character indexing is constant time. This was probably not the right decision but it was less obvious in 2005(?) when Racket switched to unicode"
        }
      ]
    },
    {
      "conversation_id": "584",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Does emoji characters work in a regexp character range?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-05-10T13:54:33.231700",
          "text": "Does emoji characters work in a regexp character range?"
        }
      ]
    },
    {
      "conversation_id": "585",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: To hell with it, I'm just gonna make a [CODE] type that's a pair of an immutable bytestring and a charset name\nMichelina: Karen why not make the whole pair immutable?\nKaren: Michelina That’s what I mean, yes. Immutable pair of immutable bytes and immutable charset name, where charsets are defined in terms of RFC 2046 (<[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 2197.52,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Michelina"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-10T15:51:21.273800",
          "text": "To hell with it, I'm just gonna make a `text?` type that's a pair of an immutable bytestring and a charset name"
        },
        {
          "user": "Michelina",
          "timestamp": "2019-05-12T03:00:26.276200",
          "text": "<@Karen> why not make the whole pair immutable?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-12T04:28:52.277800",
          "text": "<@Michelina> That’s what I mean, yes. Immutable pair of immutable bytes and immutable charset name, where charsets are defined in terms of RFC 2046 (<https://tools.ietf.org/html/rfc2046#section-4.1.2>)"
        }
      ]
    },
    {
      "conversation_id": "586",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: There’s now a “mini-bar-plot” collection in the “racket-benchmarks” package. (I considered other places, but dumped it there as fairly specific to “racket-benchmarks”, at least for now.) It’s not documented, so let me know if you become interested in trying to use it.\nKami: Once I received a package on which someone had conscientiously hand-written my name as \"JÃ©rÃ´me\". This person may have found my name a bit exotic, or may have thought something like \"ah, those Europeans, they can't pick a name without being fancy\".\nKami: This happens fairly regularly on websites when you happen to feature non-ascii characters in your name, but this was the first time someone had took the time to copy it *by hand* on a piece of paper.\nKami: Nice use of 2dcond :smile: すごい！",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 3619.13,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-05-10T21:59:02.275100",
          "text": "There’s now a “mini-bar-plot” collection in the “racket-benchmarks” package. (I considered other places, but dumped it there as fairly specific to “racket-benchmarks”, at least for now.) It’s not documented, so let me know if you become interested in trying to use it."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-13T03:34:56.279400",
          "text": "Once I received a package on which someone had conscientiously hand-written my name as \"JÃ©rÃ´me\". This person may have found my name a bit exotic, or may have thought something like \"ah, those Europeans, they can't pick a name without being fancy\"."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-13T03:41:51.279600",
          "text": "This happens fairly regularly on websites when you happen to feature non-ascii characters in your name, but this was the first time someone had took the time to copy it *by hand* on a piece of paper."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-13T10:18:10.280800",
          "text": "Nice use of 2dcond :smile: すごい！"
        }
      ]
    },
    {
      "conversation_id": "587",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Robena: Hellohello\nHerman: Robena Hello\nTomas: Cool use of Racket <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 1251.9,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Herman",
          "Robena",
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Robena",
          "timestamp": "2019-05-12T13:07:58.278600",
          "text": "Hellohello"
        },
        {
          "user": "Herman",
          "timestamp": "2019-05-13T03:18:41.279300",
          "text": "<@Robena> Hello"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-13T09:59:52.280300",
          "text": "Cool use of Racket <https://twitter.com/tojoqk/status/1127909058168537089>"
        }
      ]
    },
    {
      "conversation_id": "588",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Has anyone been using [CODE] build? If I use [CODE], it will clone ChezScheme if needed. However with [CODE], I have to manually do it. I am happy with this, but wondering if this is on purpose or an oversight.\nHerb: I'm trying to create a new syntactic forms for use in teaching: a new syntactic form called [CODE]. It takes an identifier, and depending on the identifier, draws an arrow to some part of the next define. For example, if I had [CODE], then an arrow would be drawn between the [CODE] and the outermost cond expression of the next [CODE]. However, to add a syntax arrow, I'd have to have access to the origin of the arrow (which I do), and the destination, which I don't. How should I get the syntax object for the next define after some expression? Is this even the right approach - should I be extending check-syntax itself?\nElin: I’m not sure what you mean Herb. Can you give more context around the [CODE] example?\nHerb: For the following file: [CODE_BLOCK] I would like to draw an arrow between the cond in the [CODE] and the cond in the definition of foo.\nHerb: But, I don't want to draw an arrow to anything after the body of [CODE].\nElin: How would the [CODE] form be able to control the body of [CODE] but not affect everything else after it? Would something different like this make more sense? [CODE_BLOCK]\nHerb: That would make sense, but it is not very comfortable for students to use.\nHerb: If only I had the syntax object for the whole file, I could read through each individual top level expression and add arrow properties.\nHerb: I want to minimise the additional syntax on the student-facing side.\nElin: If you had control of the language they were using you could define a [CODE] to add the arrow properties\nElin: Or you could have it turn sequences of [CODE] into [CODE].\nHerb: I think I'll look into extending the 2htdp languages. Thanks for the advice!\nElin: Or here’s another idea, if you don’t have control over the language but you can re-define [CODE], you could still use mutable-state to communicate between the [CODE] form and the [CODE] form. Not ideal to have to resort to that though\nElin: Herb I’ve looked into this a bit more, and come up with this using mutable state to communicate between a [CODE] macro and a [CODE] macro:\nElin: Using this, the code: [CODE_BLOCK] draws an arrow from the first [CODE] within [CODE] to the second [CODE] within [CODE]\nHerb: Thanks! This looks useful.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 16,
        "duration_minutes": 121.95,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Herb",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-05-13T14:29:54.285600",
          "text": "Has anyone been using `cs-only` build? If I use `make cs`, it will clone ChezScheme if needed. However with `make RACKET=... cs-only`, I have to manually do it. I am happy with this, but wondering if this is on purpose or an oversight."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T14:31:21.286800",
          "text": "I'm trying to create a new syntactic forms for use in teaching: a new syntactic form called `@tag`. It takes an identifier, and depending on the identifier, draws an arrow to some part of the next define. For example, if I had `(@tag cond)`, then an arrow would be drawn between the `cond` and the outermost cond expression of the next `define`. However, to add a syntax arrow, I'd have to have access to the origin of the arrow (which I do), and the destination, which I don't. How should I get the syntax object for the next define after some expression? Is this even the right approach - should I be extending check-syntax itself?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-13T14:53:41.287700",
          "text": "I’m not sure what you mean <@Herb>. Can you give more context around the `(@tag cond)` example?"
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T14:53:58.288000",
          "text": "For the following file:\n```\n(@tag cond)\n(define (foo x)\n  (cond [(number? x) x]\n        [else x]))\n```\nI would like to draw an arrow between the cond in the `(@tag cond)` and the cond in the definition of foo."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T14:55:28.288600",
          "text": "But, I don't want to draw an arrow to anything after the body of `foo`."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-13T14:56:54.290100",
          "text": "How would the `@tag` form be able to control the body of `foo` but not affect everything else after it?\n\nWould something different like this make more sense?\n```\n(with-@tag cond\n  (define (foo x)\n    (cond [(number? x) x]\n          [else x])))\n```"
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T14:57:20.290600",
          "text": "That would make sense, but it is not very comfortable for students to use."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T14:58:28.291400",
          "text": "If only I had the syntax object for the whole file, I could read through each individual top level expression and add arrow properties."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T14:59:10.292200",
          "text": "I want to minimise the additional syntax on the student-facing side."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-13T15:00:31.292900",
          "text": "If you had control of the language they were using you could define a `#%module-begin` to add the arrow properties"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-13T15:01:27.293800",
          "text": "Or you could have it turn sequences of `(@tag ...1...) ...2...` into `(with-@tag ...1... ...2...)`."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T15:02:37.294500",
          "text": "I think I'll look into extending the 2htdp languages. Thanks for the advice!"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-13T15:07:33.295900",
          "text": "Or here’s another idea, if you don’t have control over the language but you can re-define `define`, you could still use mutable-state to communicate between the `@tag` form and the `define` form. Not ideal to have to resort to that though"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-13T16:13:59.296200",
          "text": "<@Herb> I’ve looked into this a bit more, and come up with this using mutable state to communicate between a `@tag` macro and a `define` macro:"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-13T16:15:18.296600",
          "text": "Using this, the code:\n```\n(@tag cond)\n(define (foo x)\n  (cond [(number? x) x]\n        [else x]))\n```\ndraws an arrow from the first `cond` within `@tag` to the second `cond` within `define`"
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-13T16:31:51.296800",
          "text": "Thanks! This looks useful."
        }
      ]
    },
    {
      "conversation_id": "589",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: The [CODE] target isn’t intended to be public. You can use [CODE] with [CODE].\nKristeen: I believe that it's hashes that are all [CODE], and that it avoids storing the [CODE]s, but Clarinda or the source code would know for sure\nKristeen: Julia The 7.3 blog post (<[URL] doesn't generate a hyperlink for the DeinProgramm url. Any idea why?\nAmira: Kristeen change the [CODE] to [CODE]\nAmira: or change to [CODE]\nKristeen: That seems weird, esp since GitHub (click the link) parses it properly\nAmira: is that proper? I don't know. I assumed github did extra parsing to guess whether some characters are a url\nPriscila: Maybe Julia knows?\nGonzalo: Kristeen Seems to be inconsistently handled across implementations: <[URL]\nPriscila: It says a lot that such a page exists!\nGonzalo: Markdown is a format in about the same way Scheme is a language. :)\nKristeen: Priscila I've been paying some attention to that",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 12,
        "duration_minutes": 2901.58,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Clarinda",
          "Gonzalo",
          "Kristeen",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-05-13T15:49:13.296000",
          "text": "The `cs-only` target isn’t intended to be public. You can use `RACKET=...` with `make cs`."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-15T11:34:12.299900",
          "text": "I believe that it's hashes that are all `#t`, and that it avoids storing the `#t`s, but <@Clarinda> or the source code would know for sure"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-15T14:13:39.301000",
          "text": "<@Julia> The 7.3 blog post (<https://github.com/racket/racket-lang-org/blob/master/blog/_src/posts/2019-05-14-racket-v7-3.md>) doesn't generate a hyperlink for the DeinProgramm url. Any idea why?"
        },
        {
          "user": "Amira",
          "timestamp": "2019-05-15T14:30:57.301500",
          "text": "<@Kristeen> change the `()` to `&lt;&gt;`"
        },
        {
          "user": "Amira",
          "timestamp": "2019-05-15T14:31:24.302200",
          "text": "or change to `(&lt;&gt;)`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-15T14:31:32.302400",
          "text": "That seems weird, esp since GitHub (click the link) parses it properly"
        },
        {
          "user": "Amira",
          "timestamp": "2019-05-15T14:32:59.304200",
          "text": "is that proper? I don't know. I assumed github did extra parsing to guess whether some characters are a url"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-15T14:35:16.304500",
          "text": "Maybe <@Julia> knows?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-15T14:47:19.305500",
          "text": "<@Kristeen> Seems to be inconsistently handled across implementations: <https://babelmark.github.io/?text=*+There+is+a+new+set+of+teaching+languages+for+the+upcoming%0A++German-language+textbook+%22Schreibe+Dein+Programm!%22%0A++(https%3A%2F%2Fwww.deinprogramm.de%2F)>."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-15T14:48:15.306000",
          "text": "It says a lot that such a page exists!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-15T14:48:58.306300",
          "text": "Markdown is a format in about the same way Scheme is a language. :)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-15T16:10:48.307800",
          "text": "<@Priscila> I've been paying some attention to that"
        }
      ]
    },
    {
      "conversation_id": "590",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Amira: Do the docs say anything about hashes whose values are all [CODE]? I remember hearing those were special",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Amira"
        ]
      },
      "timeline": [
        {
          "user": "Amira",
          "timestamp": "2019-05-15T11:03:14.299100",
          "text": "Do the docs say anything about hashes whose values are all `#f`? I remember hearing those were special"
        }
      ]
    },
    {
      "conversation_id": "591",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: We need to be aware of the new \"Notarization\" policy.\nPriscila: <[URL]\nKristeen: but it will require some changes to our signinig infrastructure\nPriscila: Yes.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 2.8,
        "contains_question": false,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-05-15T16:08:58.307200",
          "text": "We need to be aware of the new \"Notarization\" policy."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-15T16:09:00.307400",
          "text": "<https://developer.apple.com/news/>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-15T16:11:19.308200",
          "text": "but it will require some changes to our signinig infrastructure"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-15T16:11:46.308700",
          "text": "Yes."
        }
      ]
    },
    {
      "conversation_id": "592",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Maybe the markdown parser could try to be more clever about auto-detecting URLs -- _without_ breaking the use of parens in URLs, as used by a certain documentation system I know about. :wink: Meanwhile I'd suggest the two things Ben did. Or maybe even better, a labelled link: `[\"Schreibe Dein Programm!\"](<[URL]\nJulia: As for Babelmark. Spend enough time there and you'll be crying and writing Morrissey lyrics.\nJulia: Gonzalo I refuse to capitalize markdown because that implies it is a specification.\nKaren: and the one time some folks _tried_ to make a specification, the original designer of markdown disliked it so much he demanded they change the spec name from Common Markdown to Common Mark\nKaren: (this may be a wildly inaccurate interpretation of events, I don't remember it very well)\nAubrey: Racket PPAs for 7.3 are cooking... (just bionic first so I can test it before the others)\nSunni: I have a question on dynamic code evaluation. After some fiddling, I got [CODE] to load a module with a custom [CODE] and extract a variable it provides. I’m using this to test the language on certain known scripts with expected outputs. However most the scripts are a single line (excluding the [CODE] line), so it would be nicer to write something like [CODE]. The calling module would be in [CODE] but the program would be in a custom language. I read up on the sandboxed evaluators and the eval function but couldn’t get it to work for me. If there’s not something obvious that solves this problem, I’ll try to create a minimal example to show what does and doesn’t work for me.\nMauro: Sunni it seems that [CODE] would be appropriate for you, if you could post your minimal example, it would be helpful for us to see more closely what you want to do\nSunni: I just setup an example on GitHub: <[URL]\nSunni: I wanted it to be smaller, but I haven't figured out everything I can trim yet.\nSunni: It's a language implemented using [CODE] following the tutorials on Beautiful Racket: <[URL]\nSunni: The crux of it is from [CODE]: <[URL] [CODE_BLOCK]\nSunni: And to give credit where it's due, I'm just implementing Golfscript as an exercise in learning to use Racket: <[URL]\nPriscila: Sunni Let's forget [CODE] for a moment. What would the ideal test expression look like?\nSunni: Ideally something like [CODE]\nSunni: Then instead of having a separate file [CODE] for each snippet I want to eval, I could include it inline in the test module.\nPriscila: Using [CODE] is definitely one route.\nPriscila: Another idea: Write a temporary file \"test.rkt\" with the context of \"#:lang golfscript 1 2 3\". Then use [CODE] to run the contents of the file.\nSunni: Ahh, so write the scripts to temp files as the tests are running\nPriscila: Maybe [CODE] is better fit here after all.\nElin: Wouldn’t [CODE] fit the same style as the temporary file?\nPriscila: I think so - but if [CODE] is used (either directly or with [CODE]) I think, the custom golfscript reader needs to be invoked manually.\nElin: With [CODE] you can pass it a string that has the [CODE] line at the top, and it will use that lang for the reader\nPriscila: Fits perfectly then!\nSunni: that's so cool! I didn't know you could pass the lang line in directly.\nSunni: I just tried it, and it seemed to work.\nSunni: False alarm, I got an error\nSunni: [CODE]`\nSunni: [CODE_BLOCK]\nSunni: [CODE]\nPriscila: [CODE_BLOCK]\nElin: Does putting a [CODE] around it help?\nSunni: It got rid of the error\nSunni: It worked. [CODE_BLOCK]\nSunni: Prints [CODE] as hoped\nSunni: Now I can wrap that up in a function to make my test scripts inline.\nPriscila: On Reddit bjoli has an interesting question on using Chez from Racket. It is possible, but is there already an chez-ffi (similar to the current C ffi), or is that something to look forward to?\nPriscila: <[URL]\nSunni: Thanks Elin, Priscila!",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 39,
        "duration_minutes": 1055.12,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement",
          "let's",
          "requires",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Aubrey",
          "Elin",
          "Julia",
          "Karen",
          "Mauro",
          "Priscila",
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-15T19:32:45.312300",
          "text": "Maybe the markdown parser could try to be more clever about auto-detecting URLs -- _without_ breaking the use of parens in URLs, as used by a certain documentation system I know about. :wink:\nMeanwhile I'd suggest the two things Ben did.\nOr maybe even better, a labelled link: `[\"Schreibe Dein Programm!\"](<https://www.deinprogramm.de/>)`"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-15T19:36:26.313300",
          "text": "As for Babelmark. Spend enough time there and you'll be crying and writing Morrissey lyrics."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-15T19:37:10.314000",
          "text": "<@Gonzalo> I refuse to capitalize markdown because that implies it is a specification."
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-15T21:37:05.317200",
          "text": "and the one time some folks _tried_ to make a specification, the original designer of markdown disliked it so much he demanded they change the spec name from Common Markdown to Common Mark"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-15T21:37:55.318400",
          "text": "(this may be a wildly inaccurate interpretation of events, I don't remember it very well)"
        },
        {
          "user": "Aubrey",
          "timestamp": "2019-05-15T21:53:55.319100",
          "text": "Racket PPAs for 7.3 are cooking... (just bionic first so I can test it before the others)"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T01:01:08.327700",
          "text": "I have a question on dynamic code evaluation. After some fiddling, I got `dynamic-require` to load a module with a custom `lang` and extract a variable it provides. I’m using this to test the language on certain known scripts with expected outputs. However most the scripts are a single line (excluding the `lang` line), so it would be nicer to write something like `(dynamic-XXX program-string)`. The calling module would be in `racket/base` but the program would be in a custom language. \n\nI read up on the sandboxed evaluators and the eval function but couldn’t get it to work for me. If there’s not something obvious that solves this problem, I’ll try to create a minimal example to show what does and doesn’t work for me. "
        },
        {
          "user": "Mauro",
          "timestamp": "2019-05-16T09:19:54.331000",
          "text": "<@Sunni> it seems that `eval` would be appropriate for you, if you could post your minimal example, it would be helpful for us to see more closely what you want to do"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:26:36.331600",
          "text": "I just setup an example on GitHub: <https://github.com/venuur/minimal-eval-example>"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:26:58.332300",
          "text": "I wanted it to be smaller, but I haven't figured out everything I can trim yet."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:27:58.333100",
          "text": "It's a language implemented using `#lang br` following the tutorials on Beautiful Racket: <https://beautifulracket.com/appendix/master-recipe.html>"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:29:34.333900",
          "text": "The crux of it is from `test-eval.rkt`: <https://github.com/venuur/minimal-eval-example/blob/master/test-eval.rkt>\n```\n#lang racket\n(require rackunit)\n\n; What works but requires a file per small test.\n(check-equal?\n ((dynamic-require \"test-script.rkt\" 'gs-program-result))\n \"123\")\n\n; What I would like to work\n;(check-equal?\n; (with-output-to-string (eval \"lang minimal-eval-example\" \"1 2 3\"))\n; \"123\")\n```"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:32:09.334700",
          "text": "And to give credit where it's due, I'm just implementing Golfscript as an exercise in learning to use Racket: <http://golfscript.com/golfscript/>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T12:33:53.335500",
          "text": "<@Sunni> Let's forget `eval` for a moment. What would the ideal test expression look like?"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:35:11.336700",
          "text": "Ideally something like `(check-equal? (run-with-my-lang \"1 2 3\") \"123\")`"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:36:11.337600",
          "text": "Then instead of having a separate file `test-script.rkt` for each snippet I want to eval, I could include it inline in the test module."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T12:37:33.337900",
          "text": "Using `eval` is definitely one route."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T12:39:04.339200",
          "text": "Another idea: Write a temporary file \"test.rkt\" with the context of \"#:lang golfscript 1 2 3\". Then use `dynamic-require` to run the contents of the file."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:39:51.339900",
          "text": "Ahh, so write the scripts to temp files as the tests are running"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T12:40:10.340400",
          "text": "Maybe `eval` is better fit here after all."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-16T12:40:40.341300",
          "text": "Wouldn’t `make-module-evaluator` fit the same style as the temporary file?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T12:46:21.345100",
          "text": "I think so - but if `eval` is used (either directly or with `make-module-evaluator`) I think, the custom golfscript reader needs to be invoked manually."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-16T12:47:13.345900",
          "text": "With `make-module-evaluator` you can pass it a string that has the `#lang` line at the top, and it will use that lang for the reader"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T12:47:26.346100",
          "text": "Fits perfectly then!"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:51:22.346600",
          "text": "that's so cool! I didn't know you could pass the lang line in directly."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:51:31.347000",
          "text": "I just tried it, and it seemed to work."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:52:52.347500",
          "text": "False alarm, I got an error"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:53:03.347700",
          "text": "```"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:53:12.348000",
          "text": "```\ndynamic-require: name is protected\n  name: 'read-syntax\n  module: #&lt;resolved-module-path:(submod \"C:\\Users\\carlm\\workspace\\golfscript\\minimal-eval-example\\minimal-eval-example\\main.rkt\" re...\n```"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:53:41.348200",
          "text": "`(make-module-evaluator \"#lang minimal-eval-example\\n1 2 3\")`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T12:55:05.348400",
          "text": "```\n(make-module-evaluator\t \tmodule-decl\t \n \t [\t#:language lang\t \n \t \t#:allow-for-require allow-for-require\t \n \t \t#:allow-for-load allow-for-load\t \n \t \t#:allow-read allow-read])\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-16T12:56:59.349400",
          "text": "Does putting a `(call-with-trusted-sandbox-configuration (lambda () ...stuff...))` around it help?"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T12:58:48.349800",
          "text": "It got rid of the error"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T13:00:02.350200",
          "text": "It worked.\n```\n(define x (call-with-trusted-sandbox-configuration\n (λ () (make-module-evaluator \"#lang minimal-eval-example\\n1 2 3\"))))\n(display (x '(gs-program-result)))\n```"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T13:00:09.350500",
          "text": "Prints `123` as hoped"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T13:01:35.350900",
          "text": "Now I can wrap that up in a function to make my test scripts inline."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T13:04:13.352300",
          "text": "On Reddit bjoli has an interesting question on using Chez from Racket. It is possible, but is there already an chez-ffi (similar to the current C ffi), or is that something to look forward to?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-16T13:04:14.352500",
          "text": "<https://www.reddit.com/r/Racket/comments/bp7i7l/racket_73/>"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-16T13:07:52.353000",
          "text": "Thanks <@Elin>, <@Priscila>!"
        }
      ]
    },
    {
      "conversation_id": "593",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: _I put parens on the outside_ / _because parens are how I feel on the inside_\nAubrey: BTW: <[URL] still seems to be on v7.2",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 213.37,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Aubrey",
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-05-15T21:55:03.319200",
          "text": "_I put parens on the outside_ /\n_because parens are how I feel on the inside_"
        },
        {
          "user": "Aubrey",
          "timestamp": "2019-05-16T01:28:25.328000",
          "text": "BTW: <http://docs.racket-lang.org|docs.racket-lang.org> still seems to be on v7.2"
        }
      ]
    },
    {
      "conversation_id": "594",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Katharine: I think the Markdown creator's way of seeing it is that the success of Markdown is specifically due to the fact it has no spec. Once the creator of CommonMark realized there was such a difference of ideology there, I think he asked the Markdown creator if calling the Markdown spec \"Common Markdown\" would be better, since that made it a specific dialect of its own. The Markdown creator said something like, any specification that looked like it specified the term \"markdown\" would give people the wrong idea. So the spec creator went with \"CommonMark\" instead. When I feel like agreeing with the specless point of view, I'd say Markdown is a *natural language* that revolves around what looks good in a plain text file. Standardizing Markdown would keep it from advancing together with advancements to the natural language around it. However, I almost always prefer having a spec. I think *implementations* of a language ossify it already, and specs ameliorate the ossification by helping users understand which behaviors are likely to change and how to avoid relying on them. Meanwhile, another more abstract source of ossification takes the form of developers' ignorance that certain features are even needed (e.g. because all the people who need them are marginalized or across a language barrier); a spec can provide developers with information on why those features are needed and how they need to work.\nClarinda: The update is in progress, but it takes a while because it’s a build of all packages form scratch on an old machine.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 16.9,
        "contains_question": false,
        "action_keywords": [
          "agree",
          "build",
          "implement",
          "need to",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Katharine"
        ]
      },
      "timeline": [
        {
          "user": "Katharine",
          "timestamp": "2019-05-16T07:09:54.328400",
          "text": "I think the Markdown creator's way of seeing it is that the success of Markdown is specifically due to the fact it has no spec.\n\nOnce the creator of CommonMark realized there was such a difference of ideology there, I think he asked the Markdown creator if calling the Markdown spec \"Common Markdown\" would be better, since that made it a specific dialect of its own. The Markdown creator said something like, any specification that looked like it specified the term \"markdown\" would give people the wrong idea. So the spec creator went with \"CommonMark\" instead.\n\nWhen I feel like agreeing with the specless point of view, I'd say Markdown is a *natural language* that revolves around what looks good in a plain text file. Standardizing Markdown would keep it from advancing together with advancements to the natural language around it.\n\nHowever, I almost always prefer having a spec. I think *implementations* of a language ossify it already, and specs ameliorate the ossification by helping users understand which behaviors are likely to change and how to avoid relying on them. Meanwhile, another more abstract source of ossification takes the form of developers' ignorance that certain features are even needed (e.g. because all the people who need them are marginalized or across a language barrier); a spec can provide developers with information on why those features are needed and how they need to work."
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-16T07:26:48.329900",
          "text": "The update is in progress, but it takes a while because it’s a build of all packages form scratch on an old machine."
        }
      ]
    },
    {
      "conversation_id": "595",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: That seems sensible\nClarinda: Answered there.\nAubrey: Just put up a blog post on modeling WebAssembly in Redex: <[URL]\nShavon: <[URL]\nShavon: ^ Aubrey post",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 5,
        "duration_minutes": 29.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Aubrey",
          "Clarinda",
          "Karen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-16T13:30:41.353100",
          "text": "That seems sensible"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-16T13:35:02.353300",
          "text": "Answered there."
        },
        {
          "user": "Aubrey",
          "timestamp": "2019-05-16T13:54:00.353800",
          "text": "Just put up a blog post on modeling WebAssembly in Redex: <https://www.asumu.xyz/blog/2019/04/29/webassembly-in-redex/>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-16T13:59:38.354300",
          "text": "<https://news.ycombinator.com/item?id=19931207>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-16T13:59:59.354700",
          "text": "^ <@Aubrey> post"
        }
      ]
    },
    {
      "conversation_id": "596",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: aha, it was the instance argument I was missing when I wrote that code",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-05-16T15:32:14.355000",
          "text": "aha, it was the instance argument I was missing when I wrote that code"
        }
      ]
    },
    {
      "conversation_id": "597",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Been wondering: Is it well-known, that clicking just to the left of \"Package\" will sort the packages with the newest first?\nPriscila: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.03,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-05-17T15:04:26.356400",
          "text": "Been wondering: Is it well-known, that clicking just to the left of \"Package\" will sort the packages with the newest first?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-17T15:04:28.356600",
          "text": "<https://pkgs.racket-lang.org/>"
        }
      ]
    },
    {
      "conversation_id": "598",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Danny: [CODE] on master seems to be trying to do a unix-style install on my linux system. Anyone else run into this? The relevant part of the output: [CODE_BLOCK]\nDanny: Does it with the v7.2 tag as well, so it's probably the fault of something weird on my system.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 7.13,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Danny"
        ]
      },
      "timeline": [
        {
          "user": "Danny",
          "timestamp": "2019-05-17T16:07:30.358300",
          "text": "`make in-place` on master seems to be trying to do a unix-style install on my linux system. Anyone else run into this? The relevant part of the output:\n\n```\n  \"\" | /*) ;; \\\n  *) echo \"expected an absolute path for DESTDIR; given: \"; exit 1;; \\\n        esac\nmkdir -p \"/usr/local/bin\" \"/usr/local/share/racket/collects\" \"/usr/local/share/doc/racket\" \"/usr/local/lib64\" \"/usr/local/include/racket\" \"/usr/local/lib64/racket\" \"/usr/local/share/racket\" \"/usr/local/etc/racket\" \"/usr/local/share/applications\" \"/usr/local/share/man\"\nmkdir: cannot create directory ‘/usr/local/share/racket’: Permission denied\nmkdir: cannot create directory ‘/usr/local/share/doc’: Permission denied\nmkdir: cannot create directory ‘/usr/local/include/racket’: Permission denied\nmkdir: cannot create directory ‘/usr/local/lib64/racket’: Permission denied\nmkdir: cannot create directory ‘/usr/local/share/racket’: Permission denied\nmkdir: cannot create directory ‘/usr/local/etc’: Permission denied\nmkdir: cannot create directory ‘/usr/local/share/applications’: Permission denied\nmkdir: cannot create directory ‘/usr/local/share/man’: Permission denied\n```"
        },
        {
          "user": "Danny",
          "timestamp": "2019-05-17T16:14:38.358400",
          "text": "Does it with the v7.2 tag as well, so it's probably the fault of something weird on my system."
        }
      ]
    },
    {
      "conversation_id": "599",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: Sunni [CODE] has a secret feature that lets you embed submodules that use different [CODE]s, as shown below. In this case, [CODE] is not necessary (even better, you can mingle any number of [CODE]s within a single module): [CODE_BLOCK] (Boris figured this out for me)\nSunni: That’s pretty cool! I’ll give that a try to see if it provides a cleaner approach to testing. In any case that feature seems useful for embedding a DSL in an otherwise normal racket file. Like your example of embedding a parser could be handy as an alternative to say regular expressions in the right use case.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 129.68,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lillian",
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-05-17T18:15:42.360800",
          "text": "<@Sunni> `#lang br` has a secret feature that lets you embed submodules that use different `#lang`s, as shown below. In this case, `eval` is not necessary (even better, you can mingle any number of `#lang`s within a single module):\n\n```\n#lang br\n\n@module/lang[parser]{\n #lang brag\n top : \"x\"}\n\n(require 'parser rackunit)\n(check-equal? (parse-to-datum \"x\") '(top \"x\"))\n```\n\n(<@Boris> figured this out for me)"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-17T20:25:23.366300",
          "text": "That’s pretty cool! I’ll give that a try to see if it provides a cleaner approach to testing.\n\nIn any case that feature seems useful for embedding a DSL in an otherwise normal racket file. Like your example of embedding a parser could be handy as an alternative to say regular expressions in the right use case. "
        }
      ]
    },
    {
      "conversation_id": "600",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clarinda Is there an easy way to check whether or not the optimizer is doing something I want on Racket-on-Chez? On the Racket VM, I use [CODE] and read the output, but on Chez, I just get back [CODE], which isn’t very helpful.\nGonzalo: Ah, I found [CODE], which seems to do what I want. Nevermind!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 19.28,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-17T19:18:32.363300",
          "text": "<@Clarinda> Is there an easy way to check whether or not the optimizer is doing something I want on Racket-on-Chez? On the Racket VM, I use `raco decompile` and read the output, but on Chez, I just get back `&lt;opaque-compiled-linklet&gt;`, which isn’t very helpful."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-17T19:37:49.363600",
          "text": "Ah, I found `PLT_LINKLET_SHOW_CP0`, which seems to do what I want. Nevermind!"
        }
      ]
    },
    {
      "conversation_id": "601",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Can it somehow cooperate with drracket syntax highlighting and auto indentation?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-17T20:55:03.366600",
          "text": "Can it somehow cooperate with drracket syntax highlighting and auto indentation?"
        }
      ]
    },
    {
      "conversation_id": "602",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Maire: Can someone please show me an example of setting up a mouse motion event to a canvas? I see the high level docs but but not a specific syntax application of the registering methodology. Thanks!\nPriscila: Maire I vaguely remember seeing an example at StackOverflow. I'll see if I can find it.\nPriscila: Close: <[URL]\nPriscila: And here is an example with mouse-events (but it is illustrating something else):\nPriscila: <[URL]\nPriscila: And here: <[URL]\nPriscila: Yet another great blog post from Alex H.: <[URL]\nMaire: So the key is to use (define/override (on-event...) when creating the canvas% object. Great, thanks again!\nPriscila: Yep, that's the key.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 9,
        "duration_minutes": 38.85,
        "contains_question": true,
        "action_keywords": [
          "please"
        ],
        "decision_keywords": [],
        "participants": [
          "Maire",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Maire",
          "timestamp": "2019-05-18T13:56:10.374500",
          "text": "Can someone please show me an example of setting up a mouse motion event to a canvas? I see the high level docs but but not a specific syntax application of the registering methodology.  Thanks!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-18T14:00:15.375100",
          "text": "<@Maire> I vaguely remember seeing an example at StackOverflow. I'll see if I can find it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-18T14:01:16.375300",
          "text": "Close:  <https://stackoverflow.com/questions/7294117/racket-using-events-in-a-frame-window>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-18T14:02:23.376000",
          "text": "And here is an example with mouse-events (but it is illustrating something else):"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-18T14:02:24.376200",
          "text": "<https://stackoverflow.com/questions/10072219/moving-beyond-world-universe>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-18T14:13:01.376500",
          "text": "And here:\n<https://stackoverflow.com/questions/2182298/plt-scheme-catching-mouse-click-event-on-canvas>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-18T14:14:29.377000",
          "text": "Yet another great blog post from Alex H.:  <https://alex-hhh.github.io/2019/05/timezone-visualization.html>"
        },
        {
          "user": "Maire",
          "timestamp": "2019-05-18T14:21:41.379800",
          "text": "So the key is to use (define/override  (on-event...) when creating the canvas% object.   Great, thanks again!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-18T14:35:01.380400",
          "text": "Yep, that's the key."
        }
      ]
    },
    {
      "conversation_id": "603",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: Is there some way to type the “◊” char when working with pollen\nJule: keyboard combo or something’\nGonzalo: Jule See <[URL]\nJule: my heroine\nJule: tyvm\nJule: have you done much with pollen?\nGonzalo: Nope!\nJule: ok\nGonzalo: I’ve only tinkered with it. But MB is in this slack and sometimes answers questions (and some other people have used it more than I have).\nJule: cool\nJule: Matthew’s whole thing is really neat. I love that he, as a non-programmer (IIRC), made this cool thing with Racket\nJule: just checked on Hackett; do you have a plan for the effects system there?\nGonzalo: I think he sells himself considerably short by calling himself a non-programmer. :wink: But yes, Pollen is very neat.\nGonzalo: Re: Hackett, not really, and also Hackett has been on the back burner for a while because I just haven’t had the time to work on it.\nJule: yeah i figured\nPriscila: Jule An alternative to lozenge is to change the character to @.\nJule: TY, i’ve been thinking about changing it\nJule: wanted to at least try it out tho\nPriscila: I have forgotten the details, but there is enough info in the documentation to figure it out.\nJule: yeha i saw it mentioned somewhere you can change it in the pollen.rkt file\nHallie: Jule I wonder if this package: <[URL] would work out of the box for pollen\nHallie: possibly will need some tweaking first but I think a metalanguage like this could be a nice feature for pollen\nJule: interesting\nPriscila: On the front page of Hacker News (again): <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 24,
        "duration_minutes": 998.9,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Hallie",
          "Jule",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-05-18T22:49:04.381300",
          "text": "Is there some way to type the “◊” char when working with pollen"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T22:49:09.381600",
          "text": "keyboard combo or something’"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-18T23:01:25.381800",
          "text": "<@Jule> See <https://docs.racket-lang.org/pollen/pollen-command-syntax.html#%28part._the-lozenge%29>"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:02:35.382100",
          "text": "my heroine"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:02:45.382300",
          "text": "tyvm"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:03:11.382700",
          "text": "have you done much with pollen?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-18T23:03:17.383000",
          "text": "Nope!"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:03:30.383300",
          "text": "ok"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-18T23:06:09.383900",
          "text": "I’ve only tinkered with it. But MB is in this slack and sometimes answers questions (and some other people have used it more than I have)."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:06:46.384300",
          "text": "cool"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:07:32.385400",
          "text": "Matthew’s whole thing is really neat. I love that he, as a non-programmer (IIRC), made this cool thing with Racket"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:08:38.386300",
          "text": "just checked on Hackett; do you have a plan for the effects system there?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-18T23:08:46.386600",
          "text": "I think he sells himself considerably short by calling himself a non-programmer. :wink: But yes, Pollen is very neat."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-18T23:09:17.387200",
          "text": "Re: Hackett, not really, and also Hackett has been on the back burner for a while because I just haven’t had the time to work on it."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-18T23:11:05.387400",
          "text": "yeah i figured"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-19T14:57:08.388500",
          "text": "<@Jule> An alternative to lozenge is to change the character to @."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-19T14:58:14.389200",
          "text": "TY, i’ve been thinking about changing it"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-19T14:58:36.389600",
          "text": "wanted to at least try it out tho"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-19T14:59:17.390500",
          "text": "I have forgotten the details, but there is enough info in the documentation to figure it out."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-19T14:59:39.391000",
          "text": "yeha i saw it mentioned somewhere you can change it in the pollen.rkt file"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-19T15:08:00.391800",
          "text": "<@Jule> I wonder if this package: <https://docs.racket-lang.org/_-exp/index.html> would work out of the box for pollen"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-19T15:08:35.392500",
          "text": "possibly will need some tweaking first but I think a metalanguage like this could be a nice feature for pollen"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-19T15:12:45.392900",
          "text": "interesting"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-19T15:27:58.393400",
          "text": "On the front page of Hacker News (again):\n<https://news.ycombinator.com/item?id=19952714>"
        }
      ]
    },
    {
      "conversation_id": "604",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: <[URL]\nKami: Priscila Thanks for linking my project! :smile:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 707.13,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-05-19T16:13:16.394100",
          "text": "<https://euhmeuh.itch.io/lisp-vs-blub-empire>"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-20T04:00:24.395000",
          "text": "<@Priscila> Thanks for linking my project! :smile:"
        }
      ]
    },
    {
      "conversation_id": "605",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: I didn't expect to see myself on hackernews when I woke up this morning :stuck_out_tongue:\nSunni: Kami , that’s a very cool looking game. I noticed it only has keyboard based control, so I can’t figure out a way to try it via mobile. This is not a criticism by the way. I’m just curious how hard it is to accept mobile friendly inputs in WASM.\nKami: Sunni Thanks :slightly_smiling_face: Well, the input is handled through javascript, then passed to the wasm layer, so it's pretty much the same way as any js-based game. You just need to find the coordinates of the finger tap, and send that down.\nKami: Anyways the game is not that fun and the AI... approximative... So I'm not really planning to improve this further for now. I could make it fit the screen, and accept touch inputs, but, well, I have bigger fish to fry.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 219.12,
        "contains_question": false,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Kami",
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-05-20T04:20:08.395400",
          "text": "I didn't expect to see myself on hackernews when I woke up this morning :stuck_out_tongue:"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-20T07:17:29.395500",
          "text": "<@Kami> , that’s a very cool looking game. I noticed it only has keyboard based control, so I can’t figure out a way to try it via mobile. This is not a criticism by the way. I’m just curious how hard it is to accept mobile friendly inputs in WASM. "
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-20T07:53:22.396800",
          "text": "<@Sunni> Thanks :slightly_smiling_face: Well, the input is handled through javascript, then passed to the wasm layer, so it's pretty much the same way as any js-based game. You just need to find the coordinates of the finger tap, and send that down."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-20T07:59:15.398900",
          "text": "Anyways the game is not that fun and the AI... approximative... So I'm not really planning to improve this further for now. I could make it fit the screen, and accept touch inputs, but, well, I have bigger fish to fry."
        }
      ]
    },
    {
      "conversation_id": "606",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: There's currently no way, afaik to [CODE]. Is there a reason why a [CODE], i.e. please do not scribble docs, is not implemented? It seems like it shouldn't be too hard and extremelly useful as you might not want them - for example during CI.\nKristeen: Shavon I think that would be pretty easy to implement\nShavon: same here - which is why i wondering why it's not done already. I never really bothered looking but just noticed that quite a bit of ci time for racket news is actually scribbling docs for some dependencies.\nShavon: i accept the answer: nobody cared until now. :slightly_smiling_face:\nShavon: i mentioned because i thought it was strange nobody had cared until now. I actually assumed there was some technicality that I was missing.\nKristeen: Shavon often you can avoid that just by not depending on the -docs packages\nKristeen: when I really want to avoid it I use [CODE] and then run [CODE].\nShavon: yes... I can do that for now until we have a [CODE] for [CODE]. thanks.\nJulia: Making sure the docs build _is_ a good thing to test. Maybe it's not necessary to test that on all N jobs in some matrix. Although if the matrix is N versions of Racket, maybe all N should test that. I mean one common doc problem is a bad link, and sometimes things are bad links because some identifier wasn't added until version X of Racket.\nJulia: Sorry I'm just kind of thinking out loud here.\nJulia: I can see situations where skipping doc build for some/all CI builds would be good! I'm just thinking out loud that I probably don't have any such situations, myself.\nShavon: I agree one should test docs build but I only need to test that my docs build. Other packages should test theirs and I shouldn't need to install the docs for all my dependencies in CI. That's the idea. It could speed up my CI tremendously and I am a very impatient person. :wink:\nJulia: Ah. Good point.\nJulia: I mean it's a good point we don't need to test other packages' doc builds. It may also be a good point that you are a very impatient person, but I'm not taking a position on that either way. :smile:\nShavon: :joy:\nJulia: Hmm but seriously, is it even possible to build docs for one package, but not the rest?\nJulia: Something like [CODE] -- will that build docs only for [CODE]? I can't try now but will later.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 17,
        "duration_minutes": 29.17,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "implement",
          "need to",
          "please",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-05-20T11:54:50.400600",
          "text": "There's currently no way, afaik to `raco pkg install --no-docs foo`. Is there a reason why a `--no-docs`, i.e. please do not scribble docs, is not implemented? It seems like it shouldn't be too hard and extremelly useful as you might not want them - for example during CI."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-20T11:55:32.400900",
          "text": "<@Shavon> I think that would be pretty easy to implement"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-20T11:57:04.402100",
          "text": "same here - which is why i wondering why it's not done already. I never really bothered looking but just noticed that quite a bit of ci time for racket news is actually scribbling docs for some dependencies."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-20T11:57:20.402400",
          "text": "i accept the answer: nobody cared until now. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-20T11:57:46.403000",
          "text": "i mentioned because i thought it was strange nobody had cared until now. I actually assumed there was some technicality that I was missing."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-20T12:06:05.403800",
          "text": "<@Shavon> often you can avoid that just by not depending on the -docs packages"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-20T12:06:21.404200",
          "text": "when I really want to avoid it I use `--no-setup` and then run `raco setup -D`."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-20T12:08:03.404900",
          "text": "yes... I can do that for now until we have a `-D --no-docs` for `install`. thanks."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T12:12:00.407500",
          "text": "Making sure the docs build _is_ a good thing to test.\nMaybe it's not necessary to test that on all N jobs in some matrix.\nAlthough if the matrix is N versions of Racket, maybe all N should test that.\nI mean one common doc problem is a bad link, and sometimes things are bad links because some identifier wasn't added until version X of Racket."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T12:12:28.407800",
          "text": "Sorry I'm just kind of thinking out loud here."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T12:12:57.408500",
          "text": "I can see situations where skipping doc build for some/all CI builds would be good!\nI'm just thinking out loud that I probably don't have any such situations, myself."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-20T12:16:53.411000",
          "text": "I agree one should test docs build but I only need to test that my docs build. Other packages should test theirs and I shouldn't need to install the docs for all my dependencies in CI. That's the idea. It could speed up my CI tremendously and I am a very impatient person. :wink:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T12:17:17.411200",
          "text": "Ah. Good point."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T12:18:23.412200",
          "text": "I mean it's a good point we don't need to test other packages' doc builds.\nIt may also be a good point that you are a very impatient person, but I'm not taking a position on that either way. :smile:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-20T12:18:49.412400",
          "text": ":joy:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T12:22:30.414000",
          "text": "Hmm but seriously, is it even possible to build docs for one package, but not the rest?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T12:24:00.415400",
          "text": "Something like `raco pkg install --no-setup my-package &amp;&amp; raco setup my-package &amp;&amp; raco setup -D` -- will that build docs only for `my-package`? I can't try now but will later."
        }
      ]
    },
    {
      "conversation_id": "607",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: I'd like to change my email address on <[URL] but I don't see how in the web site UI?\nJulia: Is this infrequent enough not to need a UI, and I should just email someone like Jay or Tony?\nKristeen: Julia I would genuinely appreciate a [CODE] install for racket-mode\nJulia: Kristeen How about [CODE_BLOCK]\nKristeen: yes\nKristeen: put that in a script on <[URL] and put the [CODE] command at the top and you're a modern software project\nJulia: where \"modern\" = people pipe any old shell commands from teh interwebs ? :smile:\nJulia: (not that trusting MELPA or AUR or whatever is necessarily much better)\nJulia: But seriously: I don't really get the motivation for this? Not that I know \"all Emacs users\". But it seems like most people are in one of two camps. One camp manually [CODE]s things one by one. Another camp adds [CODE] to their [CODE].\nJulia: I hadn't heard of this third camp.\nJulia: (I'm not disputing it exists. I want to learn more.)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 11,
        "duration_minutes": 1510.48,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-20T16:19:30.416500",
          "text": "I'd like to change my email address on <https://pkgs.racket-lang.org> but I don't see how in the web site UI?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-20T16:20:03.417200",
          "text": "Is this infrequent enough not to need a UI, and I should just email someone like Jay or Tony?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-21T17:17:59.421100",
          "text": "<@Julia> I would genuinely appreciate a `curl | sh` install for racket-mode"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T17:22:47.421700",
          "text": "<@Kristeen> How about\n```\nemacs --batch -no-site-file -q  -eval '(progn (add-to-list (quote package-archives) (cons \"melpa\" \"<https://melpa.org/packages/>\")) (package-initialize) (package-refresh-contents) (package-install (quote racket-mode)))'\n```"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-21T17:23:05.422000",
          "text": "yes"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-21T17:23:39.422600",
          "text": "put that in a script on <http://racket-mode.com|racket-mode.com> and put the `curl | sh` command at the top and you're a modern software project"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T17:24:58.423500",
          "text": "where \"modern\" = people pipe any old shell commands from teh interwebs ? :smile:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T17:25:41.424000",
          "text": "(not that trusting MELPA or AUR or whatever is necessarily much better)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T17:28:19.426300",
          "text": "But seriously: I don't really get the motivation for this?\nNot that I know \"all Emacs users\".\nBut it seems like most people are in one of two camps.\nOne camp manually `M-x package-install`s things one by one.\nAnother camp adds `(use-package X :ensure t  :config ___)` to their `init.el`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T17:28:33.426600",
          "text": "I hadn't heard of this third camp."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T17:29:59.427200",
          "text": "(I'm not disputing it exists. I want to learn more.)"
        }
      ]
    },
    {
      "conversation_id": "608",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sunni: Naturally. I was mostly curious because I’d been wanting to try building something interactive on the web using racket and I’m curious about the limitations. Developing html via xexpr was such a pleasant surprise that I’d hoped I could find a way to do dynamic content with racket equally well.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Sunni",
          "timestamp": "2019-05-20T20:03:31.419900",
          "text": "Naturally. I was mostly curious because I’d been wanting to try building something interactive on the web using racket and I’m curious about the limitations. Developing html via xexpr was such a pleasant surprise that I’d hoped I could find a way to do dynamic content with racket equally well. "
        }
      ]
    },
    {
      "conversation_id": "609",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: I'm trying to put together a [CODE] that would allow programmers to write JS as s-expressions (using urlang from soegaard). But it's not there yet and I don't have a lot of time to work on it.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-05-21T03:22:41.420200",
          "text": "I'm trying to put together a `#lang javascript` that would allow programmers to write JS as s-expressions (using urlang from soegaard). But it's not there yet and I don't have a lot of time to work on it."
        }
      ]
    },
    {
      "conversation_id": "610",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lavette: Agree, I'm on the second camp - I'm curious about the use case for [CODE] install for Emacs packages (I understand to a certain degree for other things)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Lavette"
        ]
      },
      "timeline": [
        {
          "user": "Lavette",
          "timestamp": "2019-05-21T17:54:40.427800",
          "text": "Agree, I'm on the second camp - I'm curious about the use case for `curl | sh` install for Emacs packages (I understand to a certain degree for other things)"
        }
      ]
    },
    {
      "conversation_id": "611",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: I just had to do all the steps on the install instructions on a new machine and my personal convenience would have been improved by curl | sh\nJulia: Kristeen I heartily recommend having your [CODE] explicitly install just one package: [CODE]. Then the rest of your init file can be [CODE] forms. When you use [CODE] it will install that package if necessary. That way you can take your [CODE] to another machine, start Emacs, and you're rocking.\nJulia: In fact I hardly ever [CODE] anymore. When I want to try a new package, I add a [CODE] for it to my [CODE], do [CODE] to eval the form, and save the [CODE].\nJulia: (If it turns out I don't want a package anymore, I just delete that [CODE] from my [CODE]. I _might_ [CODE], but space isn't usually a concern so I usually don't even bother.)\nIlda: Just wanted to say thanks Greg for Rackjure and your macro tutorials, wouldn't be the same experience using Racket without! :slightly_smiling_face:\nJulia: Ilda You're welcome.\nLavette: KristeenI can heartily second Julia's approach to Emacs config. Makes it so much easier to maintain. In the worst case, if things go wonky, I can just remove [CODE] completely, check out a clean copy from github, and start Emacs. It will automatically download/install all packages. [CODE] is awesome: <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 381.83,
        "contains_question": false,
        "action_keywords": [
          "complete",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ilda",
          "Julia",
          "Kristeen",
          "Lavette"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-05-21T20:34:16.429700",
          "text": "I just had to do all the steps on the install instructions on a new machine and my personal convenience would have been improved by curl | sh"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T20:50:22.432400",
          "text": "<@Kristeen> I heartily recommend having your `init.el` explicitly install just one package: `use-package`.\nThen the rest of your init file can be `use-package` forms.\nWhen you use `(use-package :ensure t ___)` it will install that package if necessary.\nThat way you can take your `init.el` to another machine, start Emacs, and you're rocking."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T20:51:56.433700",
          "text": "In fact I hardly ever `M-x package-install` anymore.\nWhen I want to try a new package, I add a `use-package` for it to my `init.el`, do `C-M-x` to eval the form, and save the `init.el`."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T20:52:54.434900",
          "text": "(If it turns out I don't want a package anymore, I just delete that `use-package` from my `init.el`.\nI _might_ `M-x package-remove`, but space isn't usually a concern so I usually don't even bother.)"
        },
        {
          "user": "Ilda",
          "timestamp": "2019-05-21T20:57:55.435800",
          "text": "Just wanted to say thanks Greg for Rackjure and your macro tutorials, wouldn't be the same experience using Racket without! :slightly_smiling_face:"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-21T20:59:27.436200",
          "text": "<@Ilda> You're welcome."
        },
        {
          "user": "Lavette",
          "timestamp": "2019-05-22T02:56:06.440000",
          "text": "<@Kristeen>I can heartily second <@Julia>'s approach to Emacs config. Makes it so much easier to maintain. In the worst case, if things go wonky, I can just remove `~/.emacs.d/` completely, check out a clean copy from github, and start Emacs. It will automatically download/install all packages. `use-package` is awesome: <https://github.com/jwiegley/use-package>"
        }
      ]
    },
    {
      "conversation_id": "612",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lavette: If you need some examples, feel free to look at my config: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lavette"
        ]
      },
      "timeline": [
        {
          "user": "Lavette",
          "timestamp": "2019-05-22T02:56:56.440500",
          "text": "If you need some examples, feel free to look at my config: <https://github.com/zzamboni/dot-emacs/blob/master/init.org>"
        }
      ]
    },
    {
      "conversation_id": "613",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: I'm trying to understand how quote, unquote, quasiquote interact with each other. Part of the problem I run into is that if I type in: [CODE_BLOCK] in the repl, it returns [CODE_BLOCK] which is correct, but not as useful when I try to work through things step by step. Is there a way to disable `' in the Racket output, so it writes it out long form (i.e. using quote/quasiquote) ?\nElin: Derick I was curious so I fiddled around with making a printer based on [CODE], and got a printer that does this: [CODE_BLOCK] I’m not sure whether that’s what you’re looking for, or whether you want something else\nDerick: Elin: Thanks! This looks great. Given the request to show quote/quasiquote literrally, I think the literal [CODE] is unavoidable.\nDerick: This is a bit of an x-y problem. Scheme is famous for it's 1-2 page interpreters. Is there a 1-2 page *CODE* implementing quote/quasiquote/unquote somewhere? In the first 2-3 pages of Google I've looked through, I keep on getting simple examples of how quote/quasiquote/unquote work ... but I am trying to implement quote/quasiquote/unquote myself for a toy language, and would really like to see actual impl.\nPriscila: Derick If you are using DrRacket you can change the printing mode in the \"Languages\" menu. Under \"Choose Language\" click the \"Advanced\" button and then change the printing mode (note: this was written by memory, so menu items might have different names).",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 486.82,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Elin",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-22T21:32:55.442100",
          "text": "I'm trying to understand how quote, unquote, quasiquote interact with each other. Part of the problem I run into is that if I type in:\n\n``` (quote x) ```\n\nin the repl, it returns\n\n``` 'x ```\n\nwhich is correct, but not as useful when I try to work through things step by step.\n\nIs there a way to disable `' in the Racket output, so it writes it out long form (i.e. using quote/quasiquote) ?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-22T22:57:14.444500",
          "text": "<@Derick> I was curious so I fiddled around with making a printer based on `mzlib/pconvert`, and got a printer that does this:\n```\n&gt; 'x\n(quote x)\n&gt; '(a b 'c `d ,e ,@f #'g #`h #,i #,@j)\n(list\n (quote a)\n (quote b)\n (list (quote quote) (quote c))\n (list (quote quasiquote) (quote d))\n (list (quote unquote) (quote e))\n (list (quote unquote-splicing) (quote f))\n (list (quote syntax) (quote g))\n (list (quote quasisyntax) (quote h))\n (list (quote unsyntax) (quote i))\n (list (quote unsyntax-splicing) (quote j)))\n```\nI’m not sure whether that’s what you’re looking for, or whether you want something else"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-23T00:44:47.447900",
          "text": "<@Elin>: Thanks! This looks great. Given the request to show quote/quasiquote literrally, I think the literal `list` is unavoidable."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-23T00:46:07.449300",
          "text": "This is a bit of an x-y problem. Scheme is famous for it's 1-2 page interpreters. Is there a 1-2 page *CODE* implementing quote/quasiquote/unquote somewhere? In the first 2-3 pages of Google I've looked through, I keep on getting simple examples of how quote/quasiquote/unquote work ... but I am trying to implement quote/quasiquote/unquote myself for a toy language, and would really like to see actual impl."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-23T05:39:44.450700",
          "text": "<@Derick> If you are using DrRacket you can change the printing mode in the \"Languages\" menu. Under \"Choose Language\" click the \"Advanced\" button and then change the printing mode  (note: this was written by memory, so menu items might have different names)."
        }
      ]
    },
    {
      "conversation_id": "614",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: My only ideas would be to use either [CODE] or [CODE], but those don’t seem to apply for the [CODE] tick in [CODE], so I don’t know what else to do\nElin: Basically if you do [CODE] while [CODE] is true and [CODE] is false, then it will print a symbol like [CODE] as [CODE]. However, it will also print lists with [CODE] instead of [CODE], which might be a good thing or a bad thing depending on how you feel about [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 29.23,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-05-22T22:32:43.443200",
          "text": "My only ideas would be to use either `(print-reader-abbreviations #f)` or `(pretty-print-abbreviate-read-macros #f)`, but those don’t seem to apply for the `'` tick in `'x`, so I don’t know what else to do"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-22T23:01:57.446900",
          "text": "Basically if you do `(pretty-write (print-convert ...some-value...) out)` while `constructor-style-printing` is true and `pretty-print-abbreviate-read-macros` is false, then it will print a symbol like `'x` as `(quote x)`. However, it will also print lists with `list` instead of `quote`, which might be a good thing or a bad thing depending on how you feel about `quote`"
        }
      ]
    },
    {
      "conversation_id": "615",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Ilda: SICP covers regular quoting on this page <[URL]\nIlda: (define (quoted? exp) (tagged-list? exp 'quote)) (define (text-of-quotation exp) (cadr exp))\nIlda: It's not \"much\" but it's code. No quasi or splicing or anything, though, as far as I'm aware.\nKatharine: Derick Generally, [CODE] has just about the least amount of behavior an expression can have, and since few (if any) other features of a language have the ability transport a value from compile time to run time, [CODE] tends to be built in. Maybe think of it this way: How does a variable reference work? It looks up the value by name from the lexical environment. How does a [CODE] expression work? It looks up a value from its own expression. Expressions are a concept that usually makes more sense before macroexpansion than after, and the way [CODE] transports a value from compile time to run time can be nontrivial. A compiled language like Racket will have to implement this transportation by serializing the quoted s-expression as part of the compiled code and then reconstructing it when the code is loaded. On the other hand, if the program isn't compiled, then the transportation can be as simple as running the macroexpander and the resulting program in the same memory space, where they can both refer to the same value.\nKatharine: As for [CODE], it can usually be implemented as a macro that expands into uses of [CODE], [CODE], [CODE], but other than that, it doesn't typically interact with [CODE] at all.\nKatharine: The behavior of [CODE] walks the input, usually translating cons cells into [CODE] calls and symbols [CODE] into [CODE]. It goes into some special cases if it encounters [CODE], [CODE], or [CODE], but [CODE] isn't one of the special cases.\nKatharine: The reason [CODE] goes into a special case if it encounters another [CODE] is out of a motivation similar to balancing parentheses: The second [CODE] is metaphorically another open paren, and the next closing paren ([CODE]) that appears afterward will match up with that nearest [CODE], not the outer one. Since [CODE] doesn't have a matching counterpart like [CODE]'s [CODE], it's not like a paren in this metaphor. It's just another piece of content in between the parens, so [CODE] handles it adequately even without having a special case for it.\nPriscila: Derick Wrt to quotation and quasiquotion: Bawden has a thorough paper on the subject: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 73.1,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ilda",
          "Katharine",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Ilda",
          "timestamp": "2019-05-23T08:34:28.003300",
          "text": "SICP covers regular quoting on this page <https://xuanji.appspot.com/isicp/4-1-metacircular.html>"
        },
        {
          "user": "Ilda",
          "timestamp": "2019-05-23T08:34:59.004200",
          "text": "(define (quoted? exp)\n  (tagged-list? exp 'quote))\n\n(define (text-of-quotation exp) (cadr exp))"
        },
        {
          "user": "Ilda",
          "timestamp": "2019-05-23T08:35:19.005000",
          "text": "It's not \"much\" but it's code. No quasi or splicing or anything, though, as far as I'm aware."
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-23T08:38:17.006700",
          "text": "<@Derick>\n\nGenerally, `quote` has just about the least amount of behavior an expression can have, and since few (if any) other features of a language have the ability transport a value from compile time to run time, `quote` tends to be built in.\n\nMaybe think of it this way: How does a variable reference work? It looks up the value by name from the lexical environment. How does a `quote` expression work? It looks up a value from its own expression.\n\nExpressions are a concept that usually makes more sense before macroexpansion than after, and the way `quote` transports a value from compile time to run time can be nontrivial. A compiled language like Racket will have to implement this transportation by serializing the quoted s-expression as part of the compiled code and then reconstructing it when the code is loaded. On the other hand, if the program isn't compiled, then the transportation can be as simple as running the macroexpander and the resulting program in the same memory space, where they can both refer to the same value."
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-23T08:40:56.006800",
          "text": "As for `quasiquote`, it can usually be implemented as a macro that expands into uses of `cons`, `append`, `quote`, but other than that, it doesn't typically interact with `quote` at all."
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-23T08:45:10.007000",
          "text": "The behavior of `quasiquote` walks the input, usually translating cons cells into `cons` calls and symbols `x` into `(quote x)`. It goes into some special cases if it encounters `(unquote ...)`, `(unquote-splicing ...)`, or `(quasiquote ...)`, but `(quote ...)` isn't one of the special cases."
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-23T08:56:03.007200",
          "text": "The reason `quasiquote` goes into a special case if it encounters another `(quasiquote ...)` is out of a motivation similar to balancing parentheses: The second `quasiquote` is metaphorically another open paren, and the next closing paren (`unquote`) that appears afterward will match up with that nearest `quasiquote`, not the outer one.\n\nSince `quote` doesn't have a matching counterpart like `quasiquote`'s `unquote`, it's not like a paren in this metaphor. It's just another piece of content in between the parens, so `quasiquote` handles it adequately even without having a special case for it."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-23T09:47:34.008500",
          "text": "<@Derick> Wrt to quotation and quasiquotion: Bawden has a thorough paper on the subject:\n<https://3e8.org/pub/scheme/doc/Quasiquotation%20in%20Lisp%20(Bawden).pdf>"
        }
      ]
    },
    {
      "conversation_id": "616",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Gonzalo do you have an example of the poorly-performing code you mentioned?\nGonzalo: Kristeen Not in any form that’s probably very interesting/useful. I am writing a (CPS’d) parser, though, which was one of the things you mentioned that the tracing JIT is less likely to be good at.\nKristeen: well if you have the sequence code you mentioned I'd be interested to try it\nGonzalo: I have put it aside for a moment, but I’ll certainly send it to you if I return to working on it and can get it to a good place where you could easily run it.\nElin: Is that the first-class pattern parser that supports cut and delimit-cut like syntax-parse, or is it something else?\nJulia: I like that the PDF was \"Manufactured in The Netherlands\"\nGonzalo: Yeah, it’s that.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 18.63,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Gonzalo",
          "Julia",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-05-23T16:14:14.009200",
          "text": "<@Gonzalo> do you have an example of the poorly-performing code you mentioned?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-23T16:15:22.010300",
          "text": "<@Kristeen> Not in any form that’s probably very interesting/useful. I am writing a (CPS’d) parser, though, which was one of the things you mentioned that the tracing JIT is less likely to be good at."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-23T16:17:07.010700",
          "text": "well if you have the sequence code you mentioned I'd be interested to try it"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-23T16:20:04.011600",
          "text": "I have put it aside for a moment, but I’ll certainly send it to you if I return to working on it and can get it to a good place where you could easily run it."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-23T16:21:36.012400",
          "text": "Is that the first-class pattern parser that supports cut and delimit-cut like syntax-parse, or is it something else?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-23T16:25:47.012500",
          "text": "I like that the PDF was \"Manufactured in The Netherlands\""
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-23T16:32:52.012800",
          "text": "Yeah, it’s that."
        }
      ]
    },
    {
      "conversation_id": "617",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Updated guide and reference for Racket Mode at its own domain: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-23T23:29:56.013300",
          "text": "Updated guide and reference for Racket Mode at its own domain: <https://www.racket-mode.com/>"
        }
      ]
    },
    {
      "conversation_id": "618",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: It seems a bit strange that if i right click on a symbol, i can jump to prev/next occurrence, and open defining file, but cant jump to the definition\nGonzalo: If the binding is defined by a macro that doesn’t set up source locations in a nice way, sometimes Check Syntax can’t figure out where the original definition is supposed to be\nJule: ah ic\nPok: Jule isn’t “jump to binding occurrence” what you want?\nGonzalo: I think Jule is talking about an identifier defined in another file, in which case jump to binding occurrence will just go to the [CODE], but I could be misinterpreting\nJule: oh *now* it shows “jump to definition”\nJule: huh\nGonzalo: oh, yeah, you also have to wait for the other file to be expanded by background expansion\nJule: (yes, you are right Gonzalo, jump to binding occurrence just jumps to the require line)\nJule: TY good to know\nGonzalo: it would be nice if DrRacket had an option to say “open the defining file and jump to the definition as soon as you’re done expanding it”\nJule: fwiw the fn in question is defined via a [CODE]\nGonzalo: but currently you just have to click “open defining file”, wait for background expansion to finish, then do “jump to definition” once it’s done\nJule: yeah that would\nJule: Is there an easy way to read/write racket data to files (esp symbols, strings, lists, numbers)\nJule: ah nvm i think i found it, read and write\nJule: Is there an easy way to convert the string “My Fancy Friend’s Title” to ’my-fancy-friends-title\nJule: [CODE_BLOCK]\nJule: seems to do the job\nJule: Is there a way to define global variables? I am working with Pollen. I have written a script ([CODE]) which I need to have some state which can be accessed via my tag helpers (e.g. those in [CODE])\nJule: pollen.rkt\nMai: What did you do?\nMai: I’m pretty sure that’s what happened.\nMai: Yeah, that’s definitely what happened. Try [CODE] at the top level of [CODE]. You will see something like [CODE_BLOCK]\nMai: If they are really shared, there should be only one [CODE]\nMai: Yeah",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 26,
        "duration_minutes": 2393.1,
        "contains_question": true,
        "action_keywords": [
          "build",
          "finish",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Jule",
          "Mai",
          "Pok"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:17:55.001600",
          "text": "It seems a bit strange that if i right click on a symbol, i can jump to prev/next occurrence, and open defining file, but cant jump to the definition"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-24T01:18:52.002500",
          "text": "If the binding is defined by a macro that doesn’t set up source locations in a nice way, sometimes Check Syntax can’t figure out where the original definition is supposed to be"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:19:16.002900",
          "text": "ah ic"
        },
        {
          "user": "Pok",
          "timestamp": "2019-05-24T01:19:17.003000",
          "text": "<@Jule> isn’t “jump to binding occurrence” what you want?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-24T01:19:58.003800",
          "text": "I think <@Jule> is talking about an identifier defined in another file, in which case jump to binding occurrence will just go to the `require`, but I could be misinterpreting"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:20:06.004000",
          "text": "oh *now* it shows “jump to definition”"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:20:13.004400",
          "text": "huh"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-24T01:20:21.004800",
          "text": "oh, yeah, you also have to wait for the other file to be expanded by background expansion"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:20:40.005400",
          "text": "(yes, you are right <@Gonzalo>, jump to binding occurrence just jumps to the require line)"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:20:47.005700",
          "text": "TY good to know"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-24T01:21:09.006300",
          "text": "it would be nice if DrRacket had an option to say “open the defining file and jump to the definition as soon as you’re done expanding it”"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:21:20.006800",
          "text": "fwiw the fn in question is defined via a `define+provide`"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-24T01:21:36.007500",
          "text": "but currently you just have to click “open defining file”, wait for background expansion to finish, then do “jump to definition” once it’s done"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T01:21:37.007600",
          "text": "yeah that would"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T21:21:44.013200",
          "text": "Is there an easy way to read/write racket data to files (esp symbols, strings, lists, numbers)"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T21:22:22.013600",
          "text": "ah nvm i think i found it, read and write"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T22:18:03.014400",
          "text": "Is there an easy way to convert the string “My Fancy Friend’s Title” to ’my-fancy-friends-title"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T22:37:39.014900",
          "text": "```\n(string-&gt;symbol (regexp-replaces (string-downcase \"My Friend's. Shoe\")\n                 '([#px\"['\\\"]\" \"\"]\n                   [#px\"\\\\W\" \"-\"]\n                   [#px\"[-]+\" \"-\"]\n                   )\n                 ))\n```"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-24T22:37:42.015200",
          "text": "seems to do the job"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:24:26.019100",
          "text": "Is there a way to define global variables? I am working with Pollen. I have written a script (`build.rkt`) which I need to have some state which can be accessed via my tag helpers (e.g. those in `pollen.rkt`)"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:25:43.020700",
          "text": "pollen.rkt"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:37:56.028600",
          "text": "What did you do?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:45:15.034200",
          "text": "I’m pretty sure that’s what happened."
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:51:49.037900",
          "text": "Yeah, that’s definitely what happened. Try `(displayln \"hello\")` at the top level of `pollen.rkt`. You will see something like\n\n```\ncompiling post entries/fp-jargon.html.pm\nhello\ndone compiling post entries/fp-jargon.html.pm\nhello\ncompiling post entries/haskell-fud.html.pm\nhello\ndone compiling post entries/haskell-fud.html.pm\nhello\n```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:52:24.038500",
          "text": "If they are really shared, there should be only one `hello`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T17:11:01.050900",
          "text": "Yeah"
        }
      ]
    },
    {
      "conversation_id": "619",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: I'm familiar with Scheme (SICP) but not with Racket/DrRacket. Is there any book that focuses on Racket/DrRacket particulars? (Something similar to \"Beautiful Racket\" -- which I am a big fan of, but discusses things besides DSLs).\nHerman: Derick There is Realm of Racket, teaches racket through basic games.\nPriscila: Derick The Guide! <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 24.65,
        "contains_question": true,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Herman",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-24T03:08:50.009000",
          "text": "I'm familiar with Scheme (SICP) but not with Racket/DrRacket. Is there any book that focuses on Racket/DrRacket particulars? (Something similar to \"Beautiful Racket\" -- which I am a big fan of, but discusses things besides DSLs)."
        },
        {
          "user": "Herman",
          "timestamp": "2019-05-24T03:18:38.009600",
          "text": "<@Derick> There is Realm of Racket, teaches racket through basic games."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-24T03:33:29.010000",
          "text": "<@Derick> The Guide!   <https://docs.racket-lang.org/guide/index.html>"
        }
      ]
    },
    {
      "conversation_id": "620",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: See my feature request and discussion: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-24T03:49:20.010200",
          "text": "See my feature request and discussion: <https://github.com/racket/drracket/issues/273>"
        }
      ]
    },
    {
      "conversation_id": "621",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I wish",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-24T22:34:22.014600",
          "text": "I wish"
        }
      ]
    },
    {
      "conversation_id": "622",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: Priscila: The Racket Guide reads like a reference manual ... but is precisely what I asked for. Thanks!\nPriscila: where are your tag helpers defined?\nPriscila: Define them in [CODE] and in [CODE] provide them.\nPriscila: Then require [CODE] in [CODE].\nJule: ah\nJule: and then set them in build.rkt?\nPriscila: yes\nJule: niiice tyvm!\nPriscila: But note that unless you set them to something in pollen.rkt, they are provided as unsettable variables.\nPriscila: So in pollen.rkt do something like:\nJule: make a set-state! function\nPriscila: [CODE]\nJule: awesome ty\nJule: tryin it\nJule: maybe i’m misunderstanding but it doesnt seem to be working\nJule: gonna push my code, one min\nJule: so here I am setting the value: <[URL]\nJule: here is that function which I am using from build.rkt: <[URL]\nJule: and here is where I am trying to retireve the value that i want to set from build: <[URL]\nPriscila: And what was the error?\nJule: well there isn’t an error exactly, just when I am tryign to access the [CODE] at that point it is the original value “YES”, Here is the output:\nJule: [CODE_BLOCK]\nJule: hmm i wonder if render-to-file could be forking a new process or something…?\nJule: ahhhhhh\nPriscila: So how can we get the expected behaviour?\nJule: i just ran [CODE] in both places, and they have the same pid\nJule: its not an issue because I am requiring like [CODE] is it?\nJule: yeah\nJule: well its not a fork, or i dont thin it is, because a fork would have another pid right?\nPriscila: The docs of [CODE] mentions the use of [CODE].\nJule: hmm\nJule: well so i had been going down the path of storing the data in a [CODE] file\nJule: but I then was running into problems where the current-dir is different in different places\nJule: so i was having trouble locating data.rktd\nPriscila: What if made a new file [CODE] and put root-dir in that.\nJule: but maybe i can do it with an environment variable\nJule: oh so i just like hard-code it?\nJule: [CODE]\nPriscila: Then both [CODE] and [CODE] can use that.\nMai: That won’t work\nMai: It’s the same issue\nMai: [CODE] will see fresh [CODE]\nMai: So whatever you mutate to [CODE] will be lost\nMai: Environment variable definitely works, but it feels too hacky\nJule: yeah i just tried the env var and it worked\nPriscila: What if in [CODE] a [CODE] is used?\nJule: trying that ^^\nJule: well tryign the dynamic require thing seems to have froze the program, lol\nMai: Straightforward [CODE] is problematic. Pollen works by evaluating each [CODE] file from its own folder, so if you use [CODE] in [CODE], only [CODE] files at the topmost level will work. For those in subdirectories, it won’t find [CODE]. But I also don’t see why that would help…\nJule: Is there no other facitlity for process-level shared state?\nPriscila: Well, the problem is the use of [CODE] (I think).\nJule: I wonder why it does use every\nMai: OK, so I took a look at my own Pollen project that I abandoned several months ago. I have a similar build script, and yes, I use envvars to workaround this very same problem. <[URL]\nJule: Oh ty\nJule: I’ll just do that then\nJule: If someday I figure out something better then great\nJulia: Jule In general, your program can have global variables in the way that Priscila explained. Put them in some file like [CODE] or [CODE] or whatever, [CODE] them from that file. Then [CODE] that file elsewhere your program. That all works fine when it's _your_ program. But when it's Pollen's program, and it's [CODE]-ing your [CODE] files one by one, this doesn't work.\nJule: gotcha, ty!\nJule: Just checked out your website btw and got a bad cert error in firefox (assuming this is it: <[URL]\nJule: [CODE_BLOCK]\nJule: :thumbsup:\nAmira: What's the shortest way to make a cyclic value in Typed Racket? Right now I have a file with [CODE] and am calling [CODE]",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 62,
        "duration_minutes": 1097.72,
        "contains_question": true,
        "action_keywords": [
          "build",
          "complete",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Derick",
          "Jule",
          "Julia",
          "Mai",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-25T01:31:42.015800",
          "text": "<@Priscila>: The Racket Guide reads like a reference manual ... but is precisely what I asked for. Thanks!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:25:33.020400",
          "text": "where are your tag helpers defined?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:26:29.021900",
          "text": "Define them in `pollen.rkt` and in `pollen.rkt` provide them."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:26:38.022200",
          "text": "Then require `pollen.rkt` in `build.rkt`."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:28:00.022600",
          "text": "ah"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:28:20.023000",
          "text": "and then set them in build.rkt?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:28:31.023300",
          "text": "yes"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:28:42.023800",
          "text": "niiice tyvm!"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:29:11.024700",
          "text": "But note that unless you set them to something in pollen.rkt, they are provided as unsettable variables."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:29:31.025600",
          "text": "So in pollen.rkt do something like:"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:29:43.026100",
          "text": "make a set-state! function"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:29:50.026400",
          "text": "`(define foo 42)   (set! foo 42)`"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:30:22.027300",
          "text": "awesome ty"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:30:24.027500",
          "text": "tryin it"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:37:46.028300",
          "text": "maybe i’m misunderstanding but it doesnt seem to be working"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:38:25.029400",
          "text": "gonna push my code, one min"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:40:37.030200",
          "text": "so here I am setting the value: <https://gitlab.com/JoelMcCracken/joelmccracken.com/blob/master/src/build.rkt#L58>"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:41:02.030600",
          "text": "here is that function which I am using from build.rkt: <https://gitlab.com/JoelMcCracken/joelmccracken.com/blob/master/src/pollen.rkt#L10>"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:41:31.031100",
          "text": "and here is where I am trying to retireve the value that i want to set from build: <https://gitlab.com/JoelMcCracken/joelmccracken.com/blob/master/src/pollen.rkt#L43>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:42:19.031800",
          "text": "And what was the error?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:43:56.032900",
          "text": "well there isn’t an error exactly, just when I am tryign to access the `root-dir` at that point it is the original value “YES”, Here is the output:"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:43:59.033100",
          "text": "```\n ./build.rkt \ntesting: Hi THIERE\ncompiling else about.html.pmd\ndone compiling else about.html.pmd\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\nAM HERE\nYES\ncompiling post entries/fp-jargon.html.pm\ndone compiling post entries/fp-jargon.html.pm\ncompiling post entries/haskell-fud.html.pm\ndone compiling post entries/haskell-fud.html.pm\ncompiling else index.html.pp\ndone compiling else index.html.pp\nComplete\n```"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:44:34.033700",
          "text": "hmm i wonder if render-to-file could be forking a  new process or something…?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:45:30.034600",
          "text": "ahhhhhh"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:49:32.035000",
          "text": "So how can we get the expected behaviour?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:50:45.035600",
          "text": "i just ran `getpid` in both places, and they have the same pid"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:51:38.037600",
          "text": "its not an issue because I am requiring like `(require \"pollen.rkt\")` is it?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:52:27.038700",
          "text": "yeah"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:52:44.039400",
          "text": "well its not a fork, or i dont thin it is, because a fork would have another pid right?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:52:46.039500",
          "text": "The docs of `render` mentions the use of `eval`."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:52:55.039800",
          "text": "hmm"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:53:15.040200",
          "text": "well so i had been going down the path of storing the data in a `data.rktd` file"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:53:30.040700",
          "text": "but I then was running into problems where the current-dir is different in different places"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:53:43.041300",
          "text": "so i was having trouble locating data.rktd"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:53:50.041800",
          "text": "What if made a new file `globals.rkt` and put root-dir in that."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:53:51.042000",
          "text": "but maybe i can do it with an environment variable"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:54:04.042300",
          "text": "oh so i just like hard-code it?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:54:19.042900",
          "text": "`config.rkt`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:54:19.043100",
          "text": "Then both `pollen.rkt` and `build.rkt` can use that."
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:54:24.043200",
          "text": "That won’t work"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:54:36.043600",
          "text": "It’s the same issue"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:54:57.044400",
          "text": "`pollen.rkt` will see fresh `globals.rkt`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:55:10.044700",
          "text": "So whatever you mutate to `globals.rkt` will be lost"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T16:56:54.045100",
          "text": "Environment variable definitely works, but it feels too hacky"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:57:16.045600",
          "text": "yeah i just tried the env var and it worked"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T16:57:33.046500",
          "text": "What if in `pollen.rkt`  a `(dynamic-require \"globals.rkt\")` is used?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T16:58:49.046900",
          "text": "trying that ^^"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T17:01:27.047300",
          "text": "well tryign the dynamic require thing seems to have froze the program, lol"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T17:05:49.049100",
          "text": "Straightforward `dynamic-require` is problematic. Pollen works by evaluating each `.pm` file from its own folder, so if you use `dynamic-require` in `pollen.rkt`, only `.pm` files at the topmost level will work. For those in subdirectories, it won’t find `globals.rkt`.\n\nBut I also don’t see why that would help…"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T17:07:14.049700",
          "text": "Is there no other facitlity for process-level shared state?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-25T17:10:11.050700",
          "text": "Well, the problem is the use of `eval` (I think)."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T17:11:48.052200",
          "text": "I wonder why it does use every"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-25T17:12:03.052400",
          "text": "OK, so I took a look at my own Pollen project that I abandoned several months ago. I have a similar build script, and yes, I use envvars to workaround this very same problem.\n\n<https://github.com/sorawee/my-website/blob/master/run.rkt#L43>"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T17:15:06.052900",
          "text": "Oh ty"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T17:15:17.053300",
          "text": "I’ll just do that then "
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T17:15:35.053900",
          "text": "If someday I figure out something better then great"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-25T17:19:46.056400",
          "text": "<@Jule> In general, your program can have global variables in the way that <@Priscila> explained. Put them in some file like `config.rkt` or `globals.rkt` or whatever, `provide` them from that file. Then `require` that file elsewhere your program.\nThat all works fine when it's _your_ program. But when it's Pollen's program, and it's `eval`-ing your `.pm` files one by one, this doesn't work."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T17:51:43.057100",
          "text": "gotcha, ty!"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T18:04:08.057300",
          "text": "Just checked out your website btw and got a bad cert error in firefox (assuming this is it: <https://sorawee.com/>)"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T18:05:27.057500",
          "text": "```\nWebsites prove their identity via certificates. Firefox Developer Edition does not trust this site because it uses a certificate that is not valid for <http://sorawee.com|sorawee.com>. The certificate is only valid for the following names: *.<http://github.com|github.com>, <http://github.com|github.com>, *.<http://github.io|github.io>, <http://github.io|github.io>\n\nError code: SSL_ERROR_BAD_CERT_DOMAIN\nView Certificate\n```"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-25T18:20:51.057900",
          "text": ":thumbsup:"
        },
        {
          "user": "Amira",
          "timestamp": "2019-05-25T19:49:25.059600",
          "text": "What's the shortest way to make a cyclic value in Typed Racket? Right now I have a file with `#0=(0 . #0#)` and am calling `file-&gt;value`"
        }
      ]
    },
    {
      "conversation_id": "623",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: It’s <[URL]\nMai: What’s the way to customize equality for [CODE]/[CODE], etc.? One possible way that definitely works is to create a wrapper [CODE] with [CODE], but it involves a lot of boilerplate code. Is there any library that automate this process and let me do something like: [CODE_BLOCK] ? If not, I will create one.\nAmira: a regression test\nMadelaine: Mai do [CODE] and [CODE] do what you want? <[URL] <[URL]\nMai: Yeah, that seems to be what I’m looking for. Thanks!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 356.78,
        "contains_question": true,
        "action_keywords": [
          "create",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Madelaine",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-25T18:20:00.057700",
          "text": "It’s <https://homes.cs.washington.edu/~sorawee/>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-26T00:02:24.066000",
          "text": "What’s the way to customize equality for `hash`/`set`, etc.?\n\nOne possible way that definitely works is to create a wrapper `struct` with `gen:equal+hash`, but it involves a lot of boilerplate code. Is there any library that automate this process and let me do something like:\n\n```\n(define h (custom-make-hash #:key car))\n(custom-hash-set! h (cons 1 2) 3)\n(custom-hash-set! h (cons 2 3) 4)\n(custom-hash-set! h (cons 1 3) 5)\n(custom-hash-ref h (cons 1 10)) ;=&gt; should be 5\n```\n\n? If not, I will create one."
        },
        {
          "user": "Amira",
          "timestamp": "2019-05-26T00:15:31.066400",
          "text": "a regression test"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-05-26T00:16:11.067200",
          "text": "<@Mai> do `define-custom-hash-types` and `define-custom-set-types` do what you want? <https://docs.racket-lang.org/reference/dicts.html#(form._((lib._racket%2Fdict..rkt)._define-custom-hash-types))> <https://docs.racket-lang.org/reference/sets.html#(form._((lib._racket%2Fset..rkt)._define-custom-set-types))>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-26T00:16:47.067700",
          "text": "Yeah, that seems to be what I’m looking for. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "624",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Amira what are you using cyclic values for?\nKaren: ah, gotcha",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 224.25,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-25T21:11:03.061100",
          "text": "<@Amira> what are you using cyclic values for?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-26T00:55:18.067800",
          "text": "ah, gotcha"
        }
      ]
    },
    {
      "conversation_id": "625",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: I looked at all the filename/path functions, but cant seem to find a good way to get the basename of a file. any suggestions?\nPriscila: Jule Btw - I think I got an idea about the problem yesterday.\nJule: oh cool\nPriscila: If you add an [CODE] to you pm-file, then you will run the setters at the right time.\nPriscila: Maybe [CODE] ?\nJule: Idk that sounds like it would have the same issue\nJule: beign in a different “environment” from the main script, build.rkt\nPriscila: Could be.\nJulia: Jule By \"basename\" you mean [CODE] or just [CODE] in [CODE]?\nJulia: To get [CODE] see <[URL]\nJulia: To get [CODE] from _that_, I think just do <[URL] with a blank [CODE] extension?\nJulia: p.s. These all will work with [CODE] as well.\nHallie: <[URL]\nHallie: <[URL]\nHallie: <[URL]\nDerick: Hallie: Thanks!",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 16,
        "duration_minutes": 183.78,
        "contains_question": true,
        "action_keywords": [
          "build",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Hallie",
          "Jule",
          "Julia",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-05-26T12:40:18.068900",
          "text": "I looked at all the filename/path functions, but cant seem to find a good way to get the basename of a file. any suggestions?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-26T12:40:53.069400",
          "text": "<@Jule>  Btw - I think I got an idea about the problem yesterday."
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T12:41:02.069800",
          "text": "oh cool"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-26T12:43:08.071600",
          "text": "If you add an   `@(require \"set-globals.rkt\")` to you pm-file, then you will run the setters at the right time."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-26T12:46:22.072800",
          "text": "Maybe `file-name-from-path` ?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T12:46:31.073000",
          "text": "Idk that sounds like it would have the same issue"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T12:46:49.073300",
          "text": "beign in a different “environment” from the main script, build.rkt"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-26T12:47:14.073800",
          "text": "Could be."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-26T15:10:08.076600",
          "text": "<@Jule> By \"basename\" you mean `name.ext` or just `name` in `/path/to/name.ext`?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-26T15:10:23.076800",
          "text": "To get `name.ext` see <https://docs.racket-lang.org/reference/More_Path_Utilities.html#%28def._%28%28lib._racket%2Fpath..rkt%29._file-name-from-path%29%29>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-26T15:11:32.077500",
          "text": "To get `name` from _that_, I think just do <https://docs.racket-lang.org/reference/Manipulating_Paths.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._path-replace-extension%29%29> with a blank `#\"\"` extension?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-26T15:12:28.078000",
          "text": "p.s. These all will work with `C:\\path\\to\\name.ext` as well."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-26T15:24:36.079500",
          "text": "<https://www.greghendershott.com/fear-of-macros/>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-26T15:24:52.079800",
          "text": "<https://beautifulracket.com/>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-26T15:27:32.080000",
          "text": "<https://docs.racket-lang.org/guide/macros.html?q=macro>"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-26T15:44:05.080300",
          "text": "<@Hallie>: Thanks!"
        }
      ]
    },
    {
      "conversation_id": "626",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: I am familiar with Clojure style macros (a macro is a function that takes sexp as input, produces sexp as output, and often uses lots of quasiquote / unquote). I am interested in learning Racket style \"hygienic\" macros. Is there a good resource that focuses on walking me through lots of examples (as opposed to explaining lots of theory) ?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Derick"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-26T15:23:49.079300",
          "text": "I am familiar with Clojure style macros (a macro is a function that takes sexp as input, produces sexp as output, and often uses lots of quasiquote / unquote).\n\nI am interested in learning Racket style \"hygienic\" macros. Is there a good resource that focuses on walking me through lots of examples (as opposed to explaining lots of theory) ?"
        }
      ]
    },
    {
      "conversation_id": "627",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: sorry Julia I was def incorrect, i thought unix [CODE] returned [CODE] out of [CODE], but it actually returns [CODE]\nJule: i *meant* that I just wanted [CODE]. I actually hacked around it by doing [CODE]\nJule: context is that i was hoping to get [CODE] out of `<[URL]\nJule: so using [CODE] i’d have to apply it repeatedly until it comes to a fixed point\nJule: (which sounded worse to me)\nJule: I guess i was thinking that maybe there could be a package out there that I just don’t know about that adds all kinds of niceties to do this kind of thing\nJule: (i’m still pretty new to Racket, so I apologize to everyone for the repeated “how do I do x?” queries, lol)\nJule: just saw the function [CODE], good idea",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 8,
        "duration_minutes": 24.4,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Jule"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:08:11.081800",
          "text": "sorry <@Julia> I was def incorrect, i thought unix `basename` returned `foo` out of `basename baz/foo.tar.gz`, but it actually returns `foo.tar.gz`"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:08:59.082900",
          "text": "i *meant* that I just wanted `foo`. I actually hacked around it by doing `(first (string-split filename \".\"))`"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:09:34.083800",
          "text": "context is that i was hoping to get `my-post` out of `<http://my-post.html.pm|my-post.html.pm>`"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:10:19.084400",
          "text": "so using `replace-extension` i’d have to apply it repeatedly until it comes to a fixed point"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:10:35.084700",
          "text": "(which sounded worse to me)"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:11:19.085800",
          "text": "I guess i was thinking that maybe there could be a package out there that I just don’t know about that adds all kinds of niceties to do this kind of thing"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:11:52.086500",
          "text": "(i’m still pretty new to Racket, so I apologize to everyone for the repeated “how do I do x?” queries, lol)"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-26T19:32:35.087000",
          "text": "just saw the function `~a`, good idea"
        }
      ]
    },
    {
      "conversation_id": "628",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: oh ok, cool",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Leticia"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-05-26T23:07:49.087100",
          "text": "oh ok, cool"
        }
      ]
    },
    {
      "conversation_id": "629",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sunni: I have question about scope of [CODE]. I wanted to [CODE] a quoted sexp inside a [CODE], but it didn’t work. I solved it by moving the syntax definition into a top level [CODE]. The goal was to take the output of a [CODE] parser and expand the resulting quoted sexp using some syntax defined in the [CODE]. The point of using the [CODE] was so that the syntax could be parameterized by the enclosing function’s arguments. Maybe [CODE] was the wrong tool? Or am I trying to do something peculiar?\nSunni: To clarify I had expected [CODE] to add its bindings to [CODE], but it didn’t. I am guessing I don’t quite understand how namespaces work with [CODE] type bindings.\nPriscila: Sunni Sounds like a job for [CODE].\nSunni: Thanks! That looks like it should do the trick.\nSunni: I couldn't figure out how to make [CODE] work. Here's a pared down use case: [CODE_BLOCK]\nSunni: In the end, the [CODE] approach with [CODE] seems like an okay pattern.\nSunni: That sounds like a cool idea. I’d wondered whether such a thing might be possible, but I don’t know any JavaScript. Would the idea be to transpile to JavaScript kinda like ClojureScript?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 1221.17,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila",
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Sunni",
          "timestamp": "2019-05-26T23:29:36.093400",
          "text": "I have question about scope of `let-syntax`. I wanted to `eval` a quoted sexp inside a `let-syntax`, but it didn’t work. I solved it by moving the syntax definition into a top level `define-syntax`. The goal was to take the output of a `lang brag` parser and expand the resulting quoted sexp using some syntax defined in the `let-syntax`. The point of using the `let-syntax` was so that the syntax could be parameterized by the enclosing function’s arguments. Maybe `eval` was the wrong tool? Or am I trying to do something peculiar?"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-26T23:31:42.095800",
          "text": "To clarify I had expected `let-syntax` to add its bindings to `current-namespace`, but it didn’t. I am guessing I don’t quite understand how namespaces work with `let` type bindings. "
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-27T02:48:30.096500",
          "text": "<@Sunni> Sounds like a job for `local-expand`."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-27T07:11:37.096600",
          "text": "Thanks! That looks like it should do the trick."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-27T13:46:00.101300",
          "text": "I couldn't figure out how to make `local-expand` work. Here's a pared down use case:\n\n```\n#lang racket/base\n\n;; Library Code\n(module minimal racket/base\n  (define times-2? (make-parameter #f))\n  (define-namespace-anchor ns)\n  (define-syntax data\n    (syntax-rules ()\n      [(data x ...) (if (times-2?)\n                        (list (* 2 x) ...)\n                        (list x ...))]))\n  (define (read-data my-data #:times-2? [t2? #f])\n    (parameterize ([times-2? t2?])\n      (eval my-data (namespace-anchor-&gt;namespace ns))))\n  (provide read-data))\n\n;; User Code\n(require 'minimal)\n(read-data '(data 1 2 3))\n```"
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-27T13:47:37.101500",
          "text": "In the end, the `eval` approach with `parameterize` seems like an okay pattern."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-27T19:50:46.104500",
          "text": "That sounds like a cool idea. I’d wondered whether such a thing might be possible, but I don’t know any JavaScript. Would the idea be to transpile to JavaScript kinda like ClojureScript?"
        }
      ]
    },
    {
      "conversation_id": "630",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeffery: does Racket have any packages for project planning? Like MS Project - just better :wink:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jeffery"
        ]
      },
      "timeline": [
        {
          "user": "Jeffery",
          "timestamp": "2019-05-27T09:03:06.097800",
          "text": "does Racket have any packages for project planning?\nLike MS Project - just better :wink:"
        }
      ]
    },
    {
      "conversation_id": "631",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Maybe at RacketCon someone could say a word or two about this: <[URL]\nJulia: It occurred to me yesterday, oh, I wonder if this is discouraged by the Software Freedom Conservancy? But I don't know enough to know if that even makes sense.\nJulia: (I don't have any urgent use-case for a new license. Just wondering.)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 2.47,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-27T09:56:00.099000",
          "text": "Maybe at RacketCon someone could say a word or two about this: <https://github.com/racket/racket/issues/1570>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T09:57:53.100600",
          "text": "It occurred to me yesterday, oh, I wonder if this is discouraged by the Software Freedom Conservancy?\nBut I don't know enough to know if that even makes sense."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T09:58:28.101100",
          "text": "(I don't have any urgent use-case for a new license. Just wondering.)"
        }
      ]
    },
    {
      "conversation_id": "632",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Lillian: &gt; Or am I trying to do something peculiar? [CODE] isn’t wrong, if that’s really what you want. But from your description, it sounds like you are perhaps reinventing [CODE] + [CODE]. Moreover the output of [CODE] is designed to cooperate with these functions.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lillian"
        ]
      },
      "timeline": [
        {
          "user": "Lillian",
          "timestamp": "2019-05-27T18:57:48.102300",
          "text": "&gt; Or am I trying to do something peculiar?\n\n`eval` isn’t wrong, if that’s really what you want. But from your description, it sounds like you are perhaps reinventing `read-syntax` + `#%module-begin`. Moreover the output of `brag` is designed to cooperate with these functions."
        }
      ]
    },
    {
      "conversation_id": "633",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: What's the current state of the art for Racket on AWS Lambda? I've managed to do Kotlin/Clojure/Rust on AWS Lambda and am seriously considering trying Racket as well. Can DrRacket provide a musl-libc binary?\nJulia: Derick Although I haven't tried it myself I know about <[URL] described in <[URL] If you know another or better way to do it based on your experience with other langs, I'm sure folks would be interested to learn more.\nDerick: My understanding of AWS is a bit out dated (so what AWS supports should be a super set of what I write here). There used to be support for Python, NodeJS, JVM, Go. The \"Go support\" was just some binary + an RPC -- and some managed to get Rust supported unofficially by mimicking the Go RPC. Currently, there's 'official' support via <[URL] (which has worked great for me), but requires special compilation to link via musl libc instead of glibc for some reason. The question is -- what is the 'runtime' requirement of racket?It's not JS, it's not JVM ... it's chez scheme?\nJulia: It's not chez. It's Racket's own VM.\nJulia: This older/simpler post post by someone else (referenced in the later one) explains it more simply: <[URL]\nJulia: IIUC TL;DR you [CODE] your Racket program, put that and some shim js in a zip file, and upload it to aws lambda.\nJulia: Derick ^\nDerick: lol, looks like they are using the NodeJS FFI to call racket\nJulia: The latter post talks about using node to start a racket process --- then simply pipes to/from it. IIUC one could use python instead of node. I agree both are sort of weird. Ask Amazon why they don't provide a way to pipe directly to a proc in any lang that can use stdin and stdout. But if they did... they'd probably implement it in one of {node python java}, so... I think the important system design principle here is the usual one: Computers suck and programming in the real world is usually stupid. ¯\\_(ツ)_/¯\nMai: In Pollen, there’re decoders that traverse the xexpr tree for you\nMai: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 11,
        "duration_minutes": 176.33,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "implement",
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Julia",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-27T19:59:39.105500",
          "text": "What's the current state of the art for Racket on AWS Lambda? I've managed to do Kotlin/Clojure/Rust on AWS Lambda and am seriously considering trying Racket as well. Can DrRacket provide a musl-libc binary?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T20:30:29.106900",
          "text": "<@Derick> Although I haven't tried it myself I know about <https://github.com/lambrospetrou/aws-lambda-binary> described in <https://www.lambrospetrou.com/articles/aws-lambda-meets-racket/>\nIf you know another or better way to do it based on your experience with other langs, I'm sure folks would be interested to learn more."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-27T20:38:17.109600",
          "text": "My understanding of AWS is a bit out dated (so what AWS supports should be a super set of what I write here). There used to be support for Python, NodeJS, JVM, Go. The \"Go support\" was just some binary + an RPC -- and some managed to get Rust supported unofficially by mimicking the Go RPC.\n\nCurrently, there's 'official' support via <https://aws.amazon.com/blogs/opensource/rust-runtime-for-aws-lambda/> (which has worked great for me), but requires special compilation to link via musl libc instead of glibc for some reason.\n\nThe question is -- what is the 'runtime' requirement of racket?It's not JS, it's not JVM ... it's chez scheme?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T20:50:29.110400",
          "text": "It's not chez. It's Racket's own VM."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T20:50:53.111000",
          "text": "This older/simpler post post by someone else (referenced in the later one) explains it more simply: <http://www.dbrunner.net/2015/08/27/running-racket-on-aws-lambda/>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T20:51:38.112000",
          "text": "IIUC TL;DR you `raco exe` your Racket program, put that and some shim js in a zip file, and upload it to aws lambda."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T20:51:43.112200",
          "text": "<@Derick> ^"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-27T21:07:41.112500",
          "text": "lol, looks like they are using the NodeJS FFI to call racket"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-27T22:25:35.115000",
          "text": "The latter post talks about using node to start a racket process --- then simply pipes to/from it.\nIIUC one could use python instead of node.\nI agree both are sort of weird.\nAsk Amazon why they don't provide a way to pipe directly to a proc in any lang that can use stdin and stdout.\n\nBut if they did... they'd probably implement it in one of {node python java}, so... I think the important system design principle here is the usual one: Computers suck and programming in the real world is usually stupid. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-27T22:55:36.117300",
          "text": "In Pollen, there’re decoders that traverse the xexpr tree for you"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-27T22:55:59.117600",
          "text": "<https://docs.racket-lang.org/pollen/Decode.html>"
        }
      ]
    },
    {
      "conversation_id": "634",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: Does anyone have any advice on how to process an xexpr doc? I’m thinking of recursively calling a function and using match to decompose it, but idk i feel like there should be a better way\nAngelika: Jule I use [CODE] and [CODE] and attach processing functions to the different hooks like [CODE], etc.\nAngelika: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 210.68,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Angelika",
          "Jule"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-05-27T22:32:16.116400",
          "text": "Does anyone have any advice on how to process an xexpr doc? I’m thinking of recursively calling a function and using match to decompose it, but idk i feel like there should be a better way"
        },
        {
          "user": "Angelika",
          "timestamp": "2019-05-28T01:33:37.118500",
          "text": "<@Jule> I use `decode` and `decode-elements` and attach processing functions to the different hooks like `#:txexpr-proc`, etc."
        },
        {
          "user": "Angelika",
          "timestamp": "2019-05-28T02:02:57.120000",
          "text": "<https://plt.eecs.northwestern.edu/snapshots/current/pdf-doc/guide.pdf>"
        }
      ]
    },
    {
      "conversation_id": "635",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: Is there a way to get <[URL] as a pdf? Sometimes, for deep reading, I prefer paper so I can scribble in the margins.\nDerick: Whereas ipad reading = clicking on links = somehow watching funny cats on youtube\nDerick: Can someone briefly explain how define-syntax, syntax-parse, syntax-rules, syntax-case relate to each other?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 211.9,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Derick"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-28T01:57:44.119100",
          "text": "Is there a way to get <https://docs.racket-lang.org/guide/> as a pdf? Sometimes, for deep reading, I prefer paper so I can scribble in the margins."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T01:58:29.119800",
          "text": "Whereas ipad reading = clicking on links = somehow watching funny cats on youtube"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T05:29:38.121000",
          "text": "Can someone briefly explain how define-syntax, syntax-parse, syntax-rules, syntax-case relate to each other?"
        }
      ]
    },
    {
      "conversation_id": "636",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Well I've never used ClojureScript, but I guess yes, it's similar to some kind of \"transpiling\". Bascially it could look like this: [CODE_BLOCK] and this would generate: [CODE_BLOCK]\nKami: So that programmers can have the power of Racket macros at hand when writing javascript. Or even generate javascript on-the-fly in a web server.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 1.63,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-05-28T04:45:55.120400",
          "text": "Well I've never used ClojureScript, but I guess yes, it's similar to some kind of \"transpiling\". Bascially it could look like this:\n```\n(javascript\n  (function (hello who)\n    (console.log (+ \"Hello \" who \"!\")))\n  (hello \"world\"))\n```\nand this would generate:\n```\nfunction hello(who) {\n  console.log(\"Hello \" + who + \"!\");\n}\nhello(\"world\");\n```"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-28T04:47:33.120600",
          "text": "So that programmers can have the power of Racket macros at hand when writing javascript. Or even generate javascript on-the-fly in a web server."
        }
      ]
    },
    {
      "conversation_id": "637",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: <[URL] should cover all of these, but to give you a summary Historically, [CODE] comes before [CODE], and [CODE] comes before [CODE]. Regarding expressiveness, [CODE] is less expressive than [CODE], and [CODE] is less expressive than [CODE]. [CODE] = traditional hygienic syntax matcher in Scheme [CODE] = an extension of [CODE] so that you can manipulate syntax object too, allowing you to break hygiene if you want [CODE] = [CODE] with better error message and with other convenient utilities.\nMai: [CODE] are pretty much a [CODE] working on syntax objects. You can think of it as [CODE]/[CODE]/[CODE]. [CODE] lifts a regular function that consumes a syntax object and returns a syntax object to macro.\nDerick: Yeah, I was reading fear-of-macros, transform! section, but felt I was missing the overall picture.\nDerick: summarizing high levels: by invention date (increasing): rules, case, parse by expressive power (increasing): rules, case, parse jump from rules -&gt; case: 'syntax object', can break hygiene jump from case -&gt; parse: better error msgs Is that correct?\nMai: yes\nDerick: Great, thanks for clarifying!\nDerick: In <[URL] &lt;-- is this rules, case, parse ... or manually writing transforms ?\nMai: That’s a manual transformer\nDerick: [CODE_BLOCK] looks awfully similar to clojure style defmacros\nMai: Yup, that’s correct\nDerick: Is the following intuition correct: define-syntax = write macros as \"sexp -&gt; sexp transforms\" rules / case / parse = \"dsls\" built on top of \"define-syntax\"\nMai: I wouldn’t say “on top of define-syntax”. They are orthogonal\nMai: rules / case / parse are just pattern matchers, just like [CODE]. However, they work on syntax objects instead.\nMai: E.g., [CODE_BLOCK] The above code roughly compiles to: [CODE_BLOCK]\nDerick: sounds like I need to go write some rules/case/parse to even get the right intuition :slightly_smiling_face:\nDerick: If we squint, is syntax-parse basically (1) pattern-match/unification + (2) rewrite rule ?\nDerick: (compiled to ifs/conds)\nMai: Correct\nDerick: Thanks, this is finally starting to make sense, for some reason, syntax-rules/case/parse always seemed like this big pile of black magic.\nDerick: I have an unrelated question: do you use dr racket? Coming from an Emacs/IntelliJ-IDEA background, dr racket feels like notepad right now -- not because of dr racket is limited, but because I'm not familiar with the key bindings / workflow. Any advice on reaching working proficienty in dr racket?\nMai: Let me try this one more time You can use [CODE] on values: [CODE_BLOCK] [CODE] is like [CODE], but it works only on syntax objects. [CODE_BLOCK] The above two computations happen at runtime. ----------- We can lift a function that consumes a syntax object and produce a syntax object to compile time as a macro. [CODE_BLOCK] [CODE_BLOCK]\nDerick: What is the distinction between \"values\" and \"syntax objects\"? I was recently just writing a scheme interpreter, is the following correct: values = some VM object that exists at run time syntax object = refers to some continuous substring (may be multi line) of some buffer, that also happens to be parseable scheme expr ?\nMai: syntax object is a kind of value\nDerick: hmm, let me try this again value = set of all objects the VM can create syntax object = needs a buffer-name, starting column, starting row, length Is that correct? If not, I'm missing something fundamental\nMai: I’m not familiar with the terminology that you are using, but it sounds correct to me. My point was that syntax object is also a regular value.\nMai: But not the other way\nDerick: I'm new to racket, so probably using the wrong terminology. Let's play \"pretend to be the compiler\" -- suppose we want to compile + run main.rkt ... is the following approximately correct: 1. compile main.rkt: 2. racket fires up a racket VM, goes through main.rkt, finds all define-syntax; for each macro, we add a function to the VM 3. we run through file again, for each macro, calling corresponding function to expand the sub expressionN 4. we now have a racket program w/ no macros 5. we compile the code 6. now, at runtime: 7. app fires up a different racket vm 8. interprets out compiled bytecode point being: a racket vm is fired up during the compile time for the macro processing Is the above approximately correct?\nDerick: so macros are racket functions executed on a racket VM -- but a VM that exists only at compile time -- i.e. not the VM run at runtime of the app\nMai: Correct.\nDerick: Thanks, and except in cases where we do [CODE_BLOCK] except in the above cases, syntax-objects exist on the compile-time-macro-expansion-VM, and not the runtime-VM (unless we explicitly create one via [CODE])\nDerick: ^ Is that also correct regarding syntax objects?\nMai: Syntax object can exist in both runtime and compile time\nDerick: Hmm, I phrased that poorly.\nDerick: syntax-objects created via macro-expansion exists only on compile-time-VM syntax-objects created via [CODE] and [CODE] exist at runtime ^-- is this correct? :slightly_smiling_face:\nMai: Almost, but it doesn’t depend on [CODE] or [CODE]. Instead, it depends on [CODE]\nMai: [CODE] will be used in macro expansion (compile time) when it’s in [CODE]. And [CODE] will be a runtime value when it’s not in [CODE]\nDerick: I see, so perhaps it should be stated as: 1. [CODE] and [CODE] create syntax objects 2. they are normal VM objects and created whenever they are executed 3. [CODE] creates a function that is executed on compile-time-VM 4. syntax-objects exist on whatever VM they're created on [tautology, lol]\nMai: Correct!\nMai: Yeah, sorry, I communicated very poorly. Glad that you finally figure it out though.\nDerick: You communicated great; I didn't have the right terms / mental models.\nDerick: I figured out why I'm so unhappy with Dr Racket -- paredit -- does Dr Racket have paredit key bindings?\nMai: I don’t use DrRacket anymore, tbh. Have been using Racket mode in Emacs\nDerick: <[URL]\nDerick: Well, thanks for all your time/patience in explaining the gist of the macro system ot me.\nDerick: I really appreciate it.\nDerick: I'm signing off for now, have a nice day!\nDerick: is a define-syntax-rule basicalyl a define-syntax/syntax-case that only has one 'pattern matching line' ?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 47,
        "duration_minutes": 56.38,
        "contains_question": true,
        "action_keywords": [
          "create",
          "let's",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-28T05:50:10.125100",
          "text": "<https://www.greghendershott.com/fear-of-macros/> should cover all of these, but to give you a summary\n\nHistorically, `syntax-rules` comes before `syntax-case`, and `syntax-case` comes before `syntax-parse`.\nRegarding expressiveness, `syntax-rules` is less expressive than `syntax-case`, and `syntax-case` is less expressive than `syntax-parse`.\n\n`syntax-rules` = traditional hygienic syntax matcher in Scheme\n`syntax-case` = an extension of `syntax-rules` so that you can manipulate syntax object too, allowing you to break hygiene if you want\n`syntax-parse` = `syntax-case` with better error message and with other convenient utilities."
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T05:53:04.128400",
          "text": "`syntax-{rules, case, parse}` are pretty much a `match` working on syntax objects. You can think of it as `match`/`case`/`if`.\n\n`define-syntax` lifts a regular function that consumes a syntax object and returns a syntax object to macro."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T05:53:08.128600",
          "text": "Yeah, I was reading fear-of-macros, transform! section, but felt I was missing the overall picture."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T05:55:01.130000",
          "text": "summarizing high levels:\nby invention date (increasing): rules, case, parse\nby expressive power (increasing): rules, case, parse\njump from rules -&gt; case: 'syntax object', can break hygiene\njump from case -&gt; parse: better error msgs\nIs that correct?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T05:55:23.130300",
          "text": "yes"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T05:55:33.130500",
          "text": "Great, thanks for clarifying!"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T05:56:18.131300",
          "text": "In <https://www.greghendershott.com/fear-of-macros/Transform_.html> &lt;-- is this rules, case, parse ... or manually writing transforms ?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T05:56:45.132100",
          "text": "That’s a manual transformer"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T05:56:53.132400",
          "text": "```\n(define-syntax (say-hi stx)\n    #'(displayln \"hi\"))\n```\nlooks awfully similar to clojure style defmacros"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T05:57:15.132900",
          "text": "Yup, that’s correct"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T05:58:38.135500",
          "text": "Is the following intuition correct:\ndefine-syntax = write macros as \"sexp -&gt; sexp transforms\"\nrules / case / parse = \"dsls\" built on top of \"define-syntax\""
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:00:22.137300",
          "text": "I wouldn’t say “on top of define-syntax”. They are orthogonal"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:00:39.137700",
          "text": "rules / case / parse are just pattern matchers, just like `match`. However, they work on syntax objects instead."
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:01:29.138700",
          "text": "E.g.,\n\n```\n(syntax-parse #'(hello world)\n  [(id1 id2) #'(id2 id1)])\n\n;=&gt; #'(world hello)\n```\n\nThe above code roughly compiles to:\n\n```\n(define stx #'(hello world))\n(define datum (syntax-&gt;datum stx))\n(define new-datum \n  (if (= (length datum) 2)\n           (list (second datum) (first datum))\n           (error 'expect-length-2)))\n(datum-&gt;syntax stx new-datum)\n```"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:02:08.139100",
          "text": "sounds like I need to go write some rules/case/parse to even get the right intuition :slightly_smiling_face:"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:09:25.140500",
          "text": "If we squint, is syntax-parse basically (1) pattern-match/unification + (2) rewrite rule ?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:09:37.140700",
          "text": "(compiled to ifs/conds)"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:09:48.141000",
          "text": "Correct"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:10:21.141500",
          "text": "Thanks, this is finally starting to make sense, for some reason, syntax-rules/case/parse always seemed like this big pile of black magic."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:11:29.143100",
          "text": "I have an unrelated question: do you use dr racket? Coming from an Emacs/IntelliJ-IDEA background, dr racket feels like notepad right now -- not because of dr racket is limited, but because I'm not familiar with the key bindings / workflow. Any advice on reaching working proficienty in dr racket?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:18:01.148000",
          "text": "Let me try this one more time\n\nYou can use `match` on values:\n\n```\n(match (list 1 2)\n  [(list a b) (list b a)]) ;=&gt; (list 2 1)\n```\n\n`syntax-{rules, case, parse}` is like `match`, but it works only on syntax objects.\n\n```\n(syntax-parse #'(1 2)\n  [(a b) #'(b a)]) ;=&gt; #'(2 1)\n```\n\nThe above two computations happen at runtime.\n\n-----------\n\nWe can lift a function that consumes a syntax object and produce a syntax object to compile time as a macro.\n\n```\n(define-syntax (foo stx)\n  (match (syntax-&gt;datum stx)\n    [(list _ x y) (datum-&gt;syntax stx (list y x))]))\n\n(foo 10 add1) ;=&gt; transform to (add1 10) ;=&gt; 11\n```\n\n```\n(define-syntax (bar stx)\n  (syntax-parse stx\n    [(_ x y) #'(y x)]))\n\n(bar 10 add1) ;=&gt; transform to (add1 10) ;=&gt; 11\n```"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:20:17.149700",
          "text": "What is the distinction between \"values\" and \"syntax objects\"? I was recently just writing a scheme interpreter, is the following correct:\n\nvalues = some VM object that exists at run time\nsyntax object = refers to some continuous substring (may be multi line) of some buffer, that also happens to be parseable scheme expr ?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:20:38.150100",
          "text": "syntax object is a kind of value"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:22:03.151100",
          "text": "hmm, let me try this again\nvalue = set of all objects the VM can create\nsyntax object = needs a buffer-name, starting column, starting row, length\nIs that correct? If not, I'm missing something fundamental"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:23:31.152000",
          "text": "I’m not familiar with the terminology that you are using, but it sounds correct to me. My point was that syntax object is also a regular value."
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:23:46.152400",
          "text": "But not the other way"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:25:44.156000",
          "text": "I'm new to racket, so probably using the wrong terminology. Let's play \"pretend to be the compiler\" -- suppose we want to compile + run main.rkt ... is the following approximately correct:\n\n1. compile main.rkt:\n2. racket fires up a racket VM, goes through main.rkt, finds all define-syntax; for each macro, we add a function to the VM\n3. we run through file again, for each macro, calling corresponding function to expand the sub expressionN\n4. we now have a racket program w/ no macros\n5. we compile the code\n6. now, at runtime:\n7. app fires up a different racket vm\n8. interprets out compiled bytecode\npoint being: a racket vm is fired up during the compile time for the macro processing\nIs the above approximately correct?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:26:57.157000",
          "text": "so macros are racket functions executed on a racket VM -- but a VM that exists only at compile time -- i.e. not the VM run at runtime of the app"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:27:05.157200",
          "text": "Correct."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:28:18.158400",
          "text": "Thanks, and except in cases where we do\n\n```\n(define stx_blah #'(....))\n```\n\nexcept in the above cases, syntax-objects exist on the compile-time-macro-expansion-VM, and not the runtime-VM (unless we explicitly create one via `(syntax ...)`)"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:28:38.158700",
          "text": "^ Is that also correct regarding syntax objects?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:29:04.159500",
          "text": "Syntax object can exist in both runtime and compile time"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:29:20.160000",
          "text": "Hmm, I phrased that poorly."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:29:49.160900",
          "text": "syntax-objects created via macro-expansion exists only on compile-time-VM\nsyntax-objects created via `(syntax ...` and `#'(...)` exist at runtime\n^-- is this correct? :slightly_smiling_face:"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:30:28.161500",
          "text": "Almost, but it doesn’t depend on `(syntax ...)` or `#'(...)`. Instead, it depends on `(define-syntax ...)`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:32:04.163600",
          "text": "`#'(a)` will be used in macro expansion (compile time) when it’s in `(define-syntax ...)`. And `#'(a)` will be a runtime value when it’s not in `(define-syntax ...)`"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:32:56.164700",
          "text": "I see, so perhaps it should be stated as:\n\n1. `(syntax ...)` and `#'(...)` create syntax objects\n2. they are normal VM objects and created whenever they are executed\n3. `(define-syntax ...)` creates a function that is executed on compile-time-VM\n4. syntax-objects exist on whatever VM they're created on [tautology, lol]"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:33:10.164900",
          "text": "Correct!"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:34:35.165700",
          "text": "Yeah, sorry, I communicated very poorly. Glad that you finally figure it out though."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:35:25.166200",
          "text": "You communicated great; I didn't have the right terms / mental models."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:35:47.166600",
          "text": "I figured out why I'm so unhappy with Dr Racket -- paredit -- does Dr Racket have paredit key bindings?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T06:36:46.167000",
          "text": "I don’t use DrRacket anymore, tbh. Have been using Racket mode in Emacs"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:36:51.167200",
          "text": "<https://docs.racket-lang.org/drracket/Keyboard_Shortcuts.html>"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:37:32.167700",
          "text": "Well, thanks for all your time/patience in explaining the gist of the macro system ot me."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:37:38.168100",
          "text": "I really appreciate it."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:38:58.168500",
          "text": "I'm signing off for now, have a nice day!"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T06:46:33.169600",
          "text": "is a define-syntax-rule basicalyl a define-syntax/syntax-case that only has one 'pattern matching line' ?"
        }
      ]
    },
    {
      "conversation_id": "638",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: There’s also [CODE] in [CODE]\nMai: But all of these are simply macros themselves. They are not primitives\nMai: <[URL]\nMai: Honestly, I sometimes wish Julia will rewrite his macro tutorial to avoid [CODE] entirely (since it’s simply [CODE] without syntax class), and by the same analogy, replace [CODE] with [CODE].\nSunni: Sounds like a cool idea to me. JavaScript is such a versatile language having a way to tap into its ecosystem would extend Racket’s reach quite a bit.\nDerick: Beautiful Racket is great for DSLs. However, are there any examples of DSL -&gt; other language, i.e. a \"transpiler\" of sorts.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 179.62,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Mai",
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-28T07:18:30.170000",
          "text": "There’s also `define-simple-macro` in `syntax/parse/define`"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T07:18:59.170600",
          "text": "But all of these are simply macros themselves. They are not primitives"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T07:19:32.170800",
          "text": "<https://docs.racket-lang.org/syntax/Defining_Simple_Macros.html>"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T07:21:08.172300",
          "text": "Honestly, I sometimes wish <@Julia> will rewrite his macro tutorial to avoid `syntax-case` entirely (since it’s simply `syntax-parse` without syntax class), and by the same analogy, replace `define-syntax-rule` with `define-simple-macro`."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-05-28T07:27:42.173600",
          "text": "Sounds like a cool idea to me. JavaScript is such a versatile language having a way to tap into its ecosystem would extend Racket’s reach quite a bit. "
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T10:18:07.175400",
          "text": "Beautiful Racket is great for DSLs. However, are there any examples of DSL -&gt; other language, i.e. a \"transpiler\" of sorts."
        }
      ]
    },
    {
      "conversation_id": "639",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Marcelina you're listed as a manager of the racket project in openhub. Do you know why commits haven't been updated since 2017? <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-05-28T08:30:55.174800",
          "text": "<@Marcelina> you're listed as a manager of the racket project in openhub. Do you know why commits haven't been updated since 2017? <https://www.openhub.net/p/racket>"
        }
      ]
    },
    {
      "conversation_id": "640",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Derick yes, people have built some for generating c++ of all things\nHallie: Derick check <[URL]\nHallie: <[URL]\nHallie: <[URL]\nKristeen: <[URL]\nHallie: <[URL]\nDerick: Kristeen Hallie: nice, thanks!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 39.62,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Hallie",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-05-28T10:20:28.175800",
          "text": "<@Derick> yes, people have built some for generating c++ of all things"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-28T10:21:42.176100",
          "text": "<@Derick> check <https://nanopass.org/>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-28T10:21:57.176300",
          "text": "<https://docs.racket-lang.org/nanopass/index.html>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-28T10:22:35.176500",
          "text": "<https://github.com/soegaard/urlang>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-28T10:22:38.176800",
          "text": "<http://matt.might.net/papers/ballantyne2014metameta.pdf>"
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-28T10:32:33.177000",
          "text": "<https://github.com/pedropramos/PyonR>"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T11:00:05.177400",
          "text": "<@Kristeen> <@Hallie>: nice, thanks!"
        }
      ]
    },
    {
      "conversation_id": "641",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Shavon TIL I manage the racket project on openhub...lol.\nMarcelina: (Maybe I signed up for it a few years back?)\nMarcelina: Anyway...\nShavon: You show up as one of the managers. The other one is Eli but I haven't seen him here before.\nMarcelina: Ah, I think I found it.\nMarcelina: Eli used to be very involved. Less so these days.\nShavon: I have no permissions so can't check but it would be great to get the data up to date.\nMarcelina: Yup, it looks like all of the code locations for racket got removed.\nMarcelina: Umm...do you know of a better way to add them (besides going through each repo in <[URL] individually)\nMarcelina: OH wait, you can just tell it to track a github user.\nMarcelina: I've added it now.\nMarcelina: So....hopefully it will update?\nMarcelina: Looks like it should update in the next 24 hours or so. Does that work for you Shavon?\nJule: TY i will try it\nShavon: Will check, not home at the moment.\nMarcelina: Essie Looking at [CODE] in [CODE] (which it looks like you added)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 16,
        "duration_minutes": 58.65,
        "contains_question": true,
        "action_keywords": [
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jule",
          "Marcelina",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:27:43.178000",
          "text": "<@Shavon> TIL I manage the racket project on openhub...lol."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:27:53.178400",
          "text": "(Maybe I signed up for it a few years back?)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:28:03.178700",
          "text": "Anyway..."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-28T13:29:06.179600",
          "text": "You show up as one of the managers. The other one is Eli but I haven't seen him here before."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:29:08.179700",
          "text": "Ah, I think I found it."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:29:20.180300",
          "text": "Eli used to be very involved. Less so these days."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-28T13:29:32.180700",
          "text": "I have no permissions so can't check but it would be great to get the data up to date."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:29:53.181200",
          "text": "Yup, it looks like all of the code locations for racket got removed."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:30:21.181800",
          "text": "Umm...do you know of a better way to add them (besides going through each repo in <http://github.com/racket> individually)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:31:02.182100",
          "text": "OH wait, you can just tell it to track a github user."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:31:05.182300",
          "text": "I've added it now."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:31:11.182500",
          "text": "So....hopefully it will update?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T13:32:36.182900",
          "text": "Looks like it should update in the next 24 hours or so. Does that work for you <@Shavon>?"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-28T13:35:30.183000",
          "text": "TY i will try it"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-05-28T13:41:48.183400",
          "text": "Will check, not home at the moment."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:26:22.184400",
          "text": "<@Essie> Looking at `draw-arrow` in `racket/draw/arrow` (which it looks like you added)"
        }
      ]
    },
    {
      "conversation_id": "642",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Can you tell me why you added a required dx and dy argument? (Especially given that, say, [CODE] doesn't have it.)\nMarcelina: It also looks like the function draws an arrow from ((startx + dx), (starty + dy)) to ((endx + dx), (endy + dy)). If that's correct, maybe it would make sense to reflect that in the docs?\nEssie: Did I add that? I honestly have no memory of that.\nMarcelina: Ah, lol, fair enough.\nEssie: Ah, looking at the git logs, I moved it from unstable/arrow. I just took what was there.\nMarcelina: AH!!! okay\nMarcelina: (I just ran a git blame, and it blamed you.\nMarcelina: But that makes more sense.\nEssie: So you may want to see who wrote it in that repo.\nMarcelina: Will do.\nMarcelina: I take it then that you wouldn't mind if the dx and dy became optional arguments.\nMarcelina: (To bring it more inline with the rest of the racket/draw API, while also not breaking backwards compatibility.)\nEssie: That sounds reasonable to me, but I'm not the right person to ask.\nMarcelina: Ah, okay. Looks like Kristeen Is the only other person to have touched it: <[URL]\nMarcelina: Anyway, thanks.\nMarcelina: Err...or not. I guess sam was only removing directories: <[URL]\nPriscila: Arrows? <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 17,
        "duration_minutes": 22.52,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Essie",
          "Marcelina",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:26:58.185100",
          "text": "Can you tell me why you added a required dx and dy argument? (Especially given that, say, `draw-line` doesn't have it.)"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:28:11.186300",
          "text": "It also looks like the function draws an arrow from ((startx + dx), (starty + dy)) to ((endx + dx), (endy + dy)). If that's correct, maybe it would make sense to reflect that in the docs?"
        },
        {
          "user": "Essie",
          "timestamp": "2019-05-28T14:35:34.186700",
          "text": "Did I add that? I honestly have no memory of that."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:36:56.187600",
          "text": "Ah, lol, fair enough."
        },
        {
          "user": "Essie",
          "timestamp": "2019-05-28T14:36:57.187800",
          "text": "Ah, looking at the git logs, I moved it from unstable/arrow. I just took what was there."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:37:05.188100",
          "text": "AH!!! okay"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:37:13.188500",
          "text": "(I just ran a git blame, and it blamed you."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:37:16.188800",
          "text": "But that makes more sense."
        },
        {
          "user": "Essie",
          "timestamp": "2019-05-28T14:37:17.188900",
          "text": "So you may want to see who wrote it in that repo."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:37:31.189100",
          "text": "Will do."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:37:54.189500",
          "text": "I take it then that you wouldn't mind if the dx and dy became optional arguments."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:38:17.190200",
          "text": "(To bring it more inline with the rest of the racket/draw API, while also not breaking backwards compatibility.)"
        },
        {
          "user": "Essie",
          "timestamp": "2019-05-28T14:38:38.190700",
          "text": "That sounds reasonable to me, but I'm not the right person to ask."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:40:51.191100",
          "text": "Ah, okay. Looks like <@Kristeen> Is the only other person to have touched it: <https://github.com/racket/unstable/blob/master/unstable-lib/arrow.rkt>"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:40:57.191500",
          "text": "Anyway, thanks."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T14:41:48.192000",
          "text": "Err...or not. I guess sam was only removing directories: <https://github.com/racket/unstable/commit/7e1fd09014ab9a52d6ed6c4623438e6dac9e0734#diff-bbb45214b09c8dd88ce47e89fe440d74>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-28T14:49:29.193600",
          "text": "Arrows?  <http://www.ntg.nl/maps/36/19.pdf>"
        }
      ]
    },
    {
      "conversation_id": "643",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: draw-arrow is very old and I think was created by Alden\nKristeen: Created here <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 4.17,
        "contains_question": false,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-05-28T14:43:57.192700",
          "text": "draw-arrow is very old and I think was created by <@Alden>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-28T14:48:07.193100",
          "text": "Created here <https://github.com/samth/old-plt/commit/9b6edc52deaf5eaf61f0b212ce7452f27ee15b6b>"
        }
      ]
    },
    {
      "conversation_id": "644",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Well this got out of hand quickly :smile: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-28T15:13:45.193900",
          "text": "Well this got out of hand quickly :smile: <https://twitter.com/mattmight/status/1132448468994330625>"
        }
      ]
    },
    {
      "conversation_id": "645",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: <[URL] how do I fix: [CODE_BLOCK]\nJulia: Derick Just remove the square brackets.\nJulia: In Racket docs, the square brackets indicate optional arguments. You don't actually supply the square brackets.\nJulia: Also, keyword arguments -- like [CODE] here -- may go anywhere among the positional arguments. So, how you have it above is fine (without the square brackets). Or, for instance, you could also do [CODE_BLOCK]\nJulia: Or [CODE_BLOCK]\nDerick: Julia: got it working, thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 80.97,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-28T15:49:20.194500",
          "text": "<https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-output-to-file%29%29>\nhow do I fix:\n```\n(with-output-to-file \"blah.tex\"\n  (lambda () (printf \"hello world\"))\n  [#:exists 'replace])\n\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-28T16:49:05.195200",
          "text": "<@Derick> Just remove the square brackets."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-28T16:49:35.195800",
          "text": "In Racket docs, the square brackets indicate optional arguments.\nYou don't actually supply the square brackets."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-28T16:51:40.197700",
          "text": "Also, keyword arguments -- like `#:exists 'replace` here -- may go anywhere among the positional arguments.\nSo, how you have it above is fine (without the square brackets).\nOr, for instance, you could also do\n```\n(with-output-to-file \"blah.tex\" #:exists 'replace\n (lambda () (printf \"hello world\")))\n```"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-28T16:52:21.198200",
          "text": "Or\n```\n(with-output-to-file \"blah.tex\"\n #:exists 'replace\n (lambda () (printf \"hello world\")))\n```"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T17:10:18.201300",
          "text": "<@Julia>: got it working, thanks!"
        }
      ]
    },
    {
      "conversation_id": "646",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Alden: Marcelina: what was the actual question? That function draws arrows in check syntax and it was refactored out like that so Philippe could use it in MrFlow\nAlden: More generally many GUI library functions take dx/d'y arguments because other functions pass them. Like the draw method of a snip or of a canvas.\nDerick: Is there a way to run a command FROM A PARTICULAR DIRECTORY? I'm currently using [CODE] from the slatex package. However, it's duping all the intermediate files in cwd instead of the directory where the tex file is located. I am currently looking at <[URL] but I don't see a way to specify the working directory. In particular, what I want to do is to run \"pdflatex blah.tex\" from directory \"/home/foobar/tmp/\"\nMai: Try [CODE]?\nDerick: is \"parameterize\" like \"dynamically scoped vars\", or is it something else?\nDerick: okay, it definitely worked\nMarcelina: Alden Eh, while not super important, the original question was to make the dx/dy arguments optional.\nMarcelina: (defaulting to 0), that way it could be more in line with, say, the [CODE] method.\nAlden: Is there a reason to change the code?\nMarcelina: Not a big one no.\nAlden: Maybe best to leave it alone, then.\nMarcelina: SMall one: it got annoying for me to put [CODE] at the end of several function calls. :wink:\nMarcelina: But that's admittedly small.\nMarcelina: But it might make sense to update the docs to clarify where the line is drawn. :wink:\nMarcelina: I'll do that later.... (famous last words)\nAlden: Docs update would be nice\nHerb: On the subject of arrows, I'm trying to use the check-syntax button to draw arrows. These arrows are being used for metadata annotations, associating an element from a tag with some syntax in the function body. I've tried to read through the code in drracket/private/syncheck/gui.rkt, and I think that it should be possible to create an arrow from an arbitrary location to another arbitrary location. Is it possible to do that without extending the check-syntax tool? An example would be drawing an arrow between [CODE] and the open-paren before [CODE] in the following: [CODE_BLOCK]\nElin: Yes. The way I’ve used to draw arrows between arbitrary locations is to generate a fresh identifier, make copies with different source locations, and use [CODE] with one source location and [CODE] with the other source location\nHerb: Thanks.\nHerb: I'll look into this.\nHerb: I expect an arrow from [CODE] to [CODE] in [CODE], but I'm not getting anything.\nHerb: Thanks. This works nicely.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 22,
        "duration_minutes": 57.33,
        "contains_question": true,
        "action_keywords": [
          "create",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Derick",
          "Elin",
          "Herb",
          "Mai",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Alden",
          "timestamp": "2019-05-28T17:03:01.199700",
          "text": "<@Marcelina>: what was the actual question? That function draws arrows in check syntax and it was refactored out like that so Philippe could use it in MrFlow"
        },
        {
          "user": "Alden",
          "timestamp": "2019-05-28T17:03:45.201100",
          "text": "More generally many GUI library functions take dx/d'y arguments because other functions pass them. Like the draw method of a snip or of a canvas. "
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T17:12:56.202800",
          "text": "Is there a way to run a command FROM A PARTICULAR DIRECTORY?\n\nI'm currently using `pdf-latex` from the slatex package. However, it's duping all the intermediate files in cwd instead of the directory where the tex file is located.\n\nI am currently looking at <https://docs.racket-lang.org/reference/subprocess.html> but I don't see a way to specify the working directory.\n\nIn particular, what I want to do is to\n\nrun \"pdflatex blah.tex\" from directory \"/home/foobar/tmp/\""
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-28T17:14:32.203700",
          "text": "Try `(parameterize ([current-directory PATH-TO-YOUR-DIRECTORY]) (YOUR-COMMAND-HERE))`?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T17:15:39.204100",
          "text": "is \"parameterize\" like \"dynamically scoped vars\", or is it something else?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T17:17:24.204300",
          "text": "okay, it definitely worked"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T17:24:14.205200",
          "text": "<@Alden> Eh, while not super important, the original question was to make the dx/dy arguments optional."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T17:24:39.205900",
          "text": "(defaulting to 0), that way it could be more in line with, say, the `draw-line` method."
        },
        {
          "user": "Alden",
          "timestamp": "2019-05-28T17:24:43.206200",
          "text": "Is there a reason to change the code?"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T17:25:04.206500",
          "text": "Not a big one no."
        },
        {
          "user": "Alden",
          "timestamp": "2019-05-28T17:25:14.206900",
          "text": "Maybe best to leave it alone, then."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T17:25:22.207100",
          "text": "SMall one: it got annoying for me to put `0 0` at the end of several function calls. :wink:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T17:25:35.207400",
          "text": "But that's admittedly small."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T17:25:57.207900",
          "text": "But it might make sense to update the docs to clarify where the line is drawn. :wink:"
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-05-28T17:26:05.208200",
          "text": "I'll do that later.... (famous last words)"
        },
        {
          "user": "Alden",
          "timestamp": "2019-05-28T17:26:18.208400",
          "text": "Docs update would be nice"
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-28T17:30:41.211200",
          "text": "On the subject of arrows, I'm trying to use the check-syntax button to draw arrows. These arrows are being used for metadata annotations, associating an element from a tag with some syntax in the function body. I've tried to read through the code in drracket/private/syncheck/gui.rkt, and I think that it should be possible to create an arrow from an arbitrary location to another arbitrary location. Is it possible to do that without extending the check-syntax tool?\nAn example would be drawing an arrow between `one-of` and the open-paren before `cond` in the following:\n```\n(@dd-template-rules one-of atomic-distinct atomic-distinct)\n(define (fn-for-foo f)\n  (cond [(string=? \"L\" f) (...)]\n        [(string=? \"R\" f) (...)]))\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T17:34:01.212800",
          "text": "Yes. The way I’ve used to draw arrows between arbitrary locations is to generate a fresh identifier, make copies with different source locations, and use `'disappeared-use` with one source location and `'disappeared-binding` with the other source location"
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-28T17:37:20.213200",
          "text": "Thanks."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-28T17:37:32.213400",
          "text": "I'll look into this."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-28T17:43:12.214600",
          "text": "I expect an arrow from `b` to `a` in `tag-it`, but I'm not getting anything."
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-28T18:00:21.216400",
          "text": "Thanks. This works nicely."
        }
      ]
    },
    {
      "conversation_id": "647",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herb: I'm not quite sure how to work that, here's what I have: [CODE_BLOCK]\nElin: Here’s what I mean below. You still need the [CODE] property on the source-location identifiers [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 7.77,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Herb"
        ]
      },
      "timeline": [
        {
          "user": "Herb",
          "timestamp": "2019-05-28T17:42:52.214100",
          "text": "I'm not quite sure how to work that, here's what I have:\n```\n(require (for-syntax racket/syntax))\n\n(define-syntax (tag-it stx)\n  (syntax-case stx ()\n    [(_ a b)\n     (let ([temp (generate-temporary)])\n       (begin (syntax-property #'a 'disappeared-use temp)\n              (syntax-property #'b 'disappeared-binding temp)))]))\n\n(define a 1)\n(define b 2)\n(tag-it a b)\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T17:50:38.215700",
          "text": "Here’s what I mean below. You still need the `'orig-for-check-syntax` property on the source-location identifiers\n```\n#lang racket\n\n(require (for-syntax racket/syntax))\n\n;; from up here\n(begin-for-syntax\n  (define (orig stx)\n    (syntax-property stx 'original-for-check-syntax #t))\n\n  (define (add-arrow stx from to)\n    (define id (orig (generate-temporary)))\n    (define sym (syntax-e id))\n    (syntax-property\n     (syntax-property\n      stx\n      'disappeared-binding (datum-&gt;syntax id sym from id))\n     'disappeared-use (datum-&gt;syntax id sym to id))))\n\n(define-syntax (draw-arrow stx)\n  (add-arrow #'(void)\n             (list (syntax-source stx) #f #f 61 7)\n             (list (syntax-source stx) #f #f 609 14)))\n\n;; to over down here\n\n(draw-arrow)\n```"
        }
      ]
    },
    {
      "conversation_id": "648",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: How do I annotate / export this untyped function so I can call it from typed racket? [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Derick"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-28T17:59:20.216300",
          "text": "How do I annotate / export this untyped function so I can call it from typed racket?\n\n```\n#lang typed/racket\n\n(require slatex/slatex-wrapper)\n\n\n\n\n(define (write-pdf dir-name file-name content)\n    (parameterize ([current-directory dir-name])\n    (with-output-to-file file-name\n      (lambda ()\n        (write-string \"\\\\documentclass{article}\\n\\\\usepackage{fullpage}\\\\begin{document}\\n\")\n        (write-string \"\\\\begin{displaymath}\\n\")\n        (content)\n        (write-string \"\\\\end{displaymath}\\n\")\n        (write-string \"\\\\end{document}\")\n\n        )\n      #:exists 'replace)\n    (pdf-latex file-name)\n    ))\n\n(write-pdf \"/data/ftp/tmp\" \"blah.tex\"\n           (lambda ()\n               \"x = y + 1\"))\n```"
        }
      ]
    },
    {
      "conversation_id": "649",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: What type would you give it in the typed world?\nDerick: String, String, Function -&gt; ()\nElin: wait so [CODE] is a function but what does it return?\nDerick: it doesn't return anything, the key is that the with-output-to-file hijacks stdout\nElin: So when you call it it returns a string?\nDerick: oh sorry, I passed a bad content function, 1 sec\nElin: oh okay\nDerick: [CODE_BLOCK]\nDerick: content doesn't return anything; it writes to stdout, which is then captured by the with-output-to-file\nDerick: (String, String, () -&gt; ()) -&gt; () would be the type sig I want for write-pdf\nElin: So that looks like it would have the type [CODE]\nDerick: Sounds right.\nDerick: So do I need to create a separate file with #lang racket ... or can we, in the middle of a #lang typed/racket file, say: for this next function, it's going to be untyped ?\nElin: In the untyped file, provide it normally. In the typed file, use [CODE] with the type above\nDerick: If this is not too much trouble, can you write the #lang typed/racket file for me? I think it'll be alot easier to understand how all the pieces fit together from a working example.\nDerick: I'm trying [CODE_BLOCK]\nDerick: and getting error: [CODE_BLOCK]\nDerick: it all works now; thanks!\nDerick: For racket exact-num/big-int, is there a O(1) way to get # of bits used? I'm building a http accessible simple calculator and need to avoid DOS by using large nums to consume all memory.\nDerick: integer-length\nDerick: I know about <[URL] Question: where can I find the actual assignments that goes along with this framework?\nDerick: Is it normal in Dr Racket for the following code to take _seconds_ to compile ? [CODE_BLOCK] I expect typed racket to be slightly slower but not this much slower.\nDerick: [CODE_BLOCK] This results in an error of: [CODE_BLOCK] how do I fix this?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 23,
        "duration_minutes": 164.45,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "build",
          "create",
          "fix",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Elin"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-05-28T18:13:59.216800",
          "text": "What type would you give it in the typed world?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:14:25.217300",
          "text": "String, String, Function -&gt; ()"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T18:14:49.217700",
          "text": "wait so `content` is a function but what does it return?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:15:09.218200",
          "text": "it doesn't return anything, the key is that the with-output-to-file hijacks stdout"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T18:15:20.218600",
          "text": "So when you call it it returns a string?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:15:29.219000",
          "text": "oh sorry, I passed a bad content function, 1 sec"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T18:15:34.219200",
          "text": "oh okay"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:15:48.219400",
          "text": "```\n(write-pdf \"/data/ftp/tmp\" \"blah.tex\"\n           (lambda ()\n             (write-string\n               \"x = y + 1\")))\n```"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:16:04.219900",
          "text": "content doesn't return anything; it writes to stdout, which is then captured by the with-output-to-file"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:16:29.220500",
          "text": "(String, String, () -&gt; ()) -&gt; ()\nwould be the type sig I want for write-pdf"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T18:16:51.220700",
          "text": "So that looks like it would have the type `(-&gt; String String (-&gt; Void) Void)`"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:17:40.221400",
          "text": "Sounds right."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:18:16.222200",
          "text": "So do I need to create a separate file with #lang racket ... or can we, in the middle of a #lang typed/racket file, say:\n\nfor this next function, it's going to be untyped ?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T18:18:33.222600",
          "text": "In the untyped file, provide it normally.\nIn the typed file, use `require/typed` with the type above"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:19:22.223200",
          "text": "If this is not too much trouble, can you write the #lang typed/racket file for me? I think it'll be alot easier to understand how all the pieces fit together from a working example."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:25:08.223600",
          "text": "I'm trying\n```\n#lang typed/racket\n\n(require/typed \"util.rkt\"\n               [write-pdf (-&gt; String String (-&gt; Void))])\n\n```"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:25:21.223900",
          "text": "and getting error:\n\n```\n. only-in: identifier `write-pdf' not included in nested require spec in: \"util.rkt\"\n```"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T18:28:40.224100",
          "text": "it all works now; thanks!"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T19:11:21.224900",
          "text": "For racket exact-num/big-int, is there a O(1) way to get # of bits used? I'm building a http accessible simple calculator and need to avoid DOS by using large nums to consume all memory."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T19:25:32.225100",
          "text": "integer-length"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T20:27:00.225800",
          "text": "I know about <https://docs.racket-lang.org/nanopass/index.html>\n\nQuestion: where can I find the actual assignments that goes along with this framework?"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T20:39:15.226400",
          "text": "Is it normal in Dr Racket for the following code to take _seconds_ to compile ?\n\n```\n\n(define-type MathNode (U BigFloat MathNeg))\n\n(struct BigFloat ([base : Number] [exp : Number]))\n(struct MathNeg ([base : MathNode]))\n(struct MathAdd ([base : (Listof MathNode)]))\n(struct MathMul ([base : (Listof MathNode) ]))\n\n```\n\nI expect typed racket to be slightly slower but not this much slower."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T20:58:26.227000",
          "text": "```\n#lang racket\n\n(require Racket-miniKanren/miniKanren/mk)\n\n(define fail\n  (== #t #f))\n\n(define succeed\n  (== #t #t))\n\n\n(current-readtable\n (make-readtable (current-readtable)\n                 #\\s\n                 'dispatch-macro\n                 (lambda (a b c d e f) succeed)))\n\n(current-readtable\n (make-readtable (current-readtable)\n                 #\\u\n                 'dispatch-macro\n                 (lambda (a b c d e f) fail)))\n\n\n(run* (q) #s)\n```\n\nThis results in an error of:\n\n```\n. . read-syntax: expected `(`, `[`, or `{` after `#s`\n```\n\nhow do I fix this?"
        }
      ]
    },
    {
      "conversation_id": "650",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: You need to make a language that defines your extended readtable and then use that lang",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-05-28T21:42:50.227700",
          "text": "You need to make a language that defines your extended readtable and then use that lang"
        }
      ]
    },
    {
      "conversation_id": "651",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: There is an example at <[URL] you want it to provide a parameterized [CODE] and [CODE]\nElin: Parameters like [CODE] set at run time only affect the run-time evaluation of the code, so they don’t affect compile-time things like reading/parsing the program\nElin: However, if you set up a [CODE] and set the [CODE] at “read time” in the lang’s reader module, then it can do that\nDerick: I'm temporarily using ss for #s and ff for #f.\nDerick: <[URL] &lt;-- Does this explain anywhere how repetition, \"*\" and \"...\" works? I'm seeing lots of examples but I can't find an explaination of how these three forms work.\nDerick: So I now have a file called 'reader.rkt' which contains: [CODE_BLOCK]\nFranklin: Derick Try using [CODE] instead of [CODE] See: <[URL] \"In a top-level context or module context, when the expander encounters a define-syntaxes form, the binding that it introduces for the defined identifiers is a transformer binding. The value of the binding exists at expansion time, rather than run time (though the two times can overlap), though *the binding itself is introduced with phase level 0 (i.e., in the base environment)*.\"",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 295.77,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Eileen",
          "Elin",
          "Franklin"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-05-28T21:45:22.228100",
          "text": "There is an example at <https://docs.racket-lang.org/guide/hash-lang_reader.html> you want it to provide a parameterized `read` and `read-syntax`"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T21:52:17.229400",
          "text": "Parameters like `current-readtable` set at run time only affect the run-time evaluation of the code, so they don’t affect compile-time things like reading/parsing the program"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-28T21:52:57.230200",
          "text": "However, if you set up a `#lang` and set the `current-readtable` at “read time” in the lang’s reader module, then it can do that"
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T21:54:35.230600",
          "text": "I'm temporarily using ss for #s and ff for #f."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T21:55:25.231500",
          "text": "<https://docs.racket-lang.org/syntax-parse-example/index.html> &lt;-- Does this explain anywhere how repetition, \"*\" and \"...\" works? I'm seeing lots of examples but I can't find an explaination of how these three forms work."
        },
        {
          "user": "Derick",
          "timestamp": "2019-05-28T21:57:39.232000",
          "text": "So I now have a file called 'reader.rkt' which contains:\n\n```\n#lang racket\n\n(require (for-syntax racket/base syntax/parse))\n\n(define ff\n  (== #t #f))\n\n(define ss\n  (== #t #t))\n\n(current-readtable\n (make-readtable (current-readtable)\n                 #\\s\n                 'dispatch-macro\n                 (lambda (a b c d e f) ss)))\n\n(current-readtable\n (make-readtable (current-readtable)\n                 #\\u\n                 'dispatch-macro\n                 (lambda (a b c d e f) ff)))\n```"
        },
        {
          "user": "Franklin",
          "timestamp": "2019-05-29T02:41:08.234200",
          "text": "<@Derick> Try using `(provide conj disj)` instead of `(provide (for-syntax conj disj))`\nSee: <https://docs.racket-lang.org/reference/syntax-model.html?q=define%2Dsyntax#%28part._transformer-model%29>\n\"In a top-level context or module context, when the expander encounters a define-syntaxes form, the binding that it introduces for the defined identifiers is a transformer binding. The value of the binding exists at expansion time, rather than run time (though the two times can overlap), though *the binding itself is introduced with phase level 0 (i.e., in the base environment)*.\""
        }
      ]
    },
    {
      "conversation_id": "652",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: In this code, why can't I export my macros and how can I fix it: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Derick"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-28T23:48:24.232400",
          "text": "In this code, why can't I export my macros and how can I fix it:\n\n```\n#lang racket\n\n(provide (for-syntax conj disj)\n         ff ss\n         )\n\n(require (for-syntax racket/base syntax/parse))\n\n(require Racket-miniKanren/miniKanren/mk)\n\n\n(define ff\n  (== #t #f))\n\n(define ss\n  (== #t #t))\n\n(define-syntax (disj stx)\n  (syntax-parse stx\n    [(_) #'ff]\n    [(_ clause) #'clause]\n    [(_ clause ...) #'(conde (clause) ...)]\n    ))\n\n(define-syntax (conj stx)\n  (syntax-parse stx\n    [(_) #'ss]\n    [(_ clause) #'clause]\n    [(_ clause ...) #'(conde (clause ...))]))\n```"
        }
      ]
    },
    {
      "conversation_id": "653",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Marcelina thanks for looking at the openhub stuff. I am waiting for it to update. Hasn't happened yet.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-05-29T05:42:26.235000",
          "text": "<@Marcelina> thanks for looking at the openhub stuff. I am waiting for it to update. Hasn't happened yet."
        }
      ]
    },
    {
      "conversation_id": "654",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kami: Hello Racketeers! I'm trying to implement a CSRF check on my web-server. How would one go about coding that using the Racket web-server lib? (I know continuations are really similar, but I'm not using continuations, I disabled them on my server) I was thinking about using a global shared list of valid csrf tokens, but as the web-server responses are multi-threaded, I fear I would get some locks and conflicts. Did anyone tried this before? How do you do this on your own servers?\nJulia: Kami My usual step 0 for things like this would be a mutable hash-table from [CODE]. Safe for multi threads to insert and remove. In some cases I might use the file system as a local key/value store. Either way, usually also need some little worker thread to remove expired items from the cache.\nJulia: Step 1 could be idk use memcached or redis or postgres instead. But the actual real-world utilization might mean really, there's no need fuss with anything like that. Depends.\nJulia: Things like confirm-your-email-address tokens, I put in postgres.\nKami: Julia Thanks for the tips! Yeah I considered using a database or the filesystem, but it feels overengineered for such a simple and ephemeral thing like a token. I guess there's not a lot of choices anyway.\nJulia: I guess the TL;DR is, from <[URL] &gt; Caveats concerning concurrent modification: A mutable hash table can be manipulated with hash-ref, hash-set!, and hash-remove! concurrently by multiple threads, and the operations are protected by a table-specific semaphore as needed. Three caveats apply, however: &gt; &gt; - If a thread is terminated while applying hash-ref, hash-set!, hash-remove!, hash-ref!, or hash-update! to a hash table that uses equal? or eqv? key comparisons, all current and future operations on the hash table may block indefinitely. &gt; &gt; - The hash-map, hash-for-each, and hash-clear! procedures do not use the table’s semaphore to guard the traversal as a whole. Changes by one thread to a hash table can affect the keys and values seen by another thread part-way through its traversal of the same hash table. &gt; &gt; - The hash-update! and hash-ref! functions use a table’s semaphore independently for the hash-ref and hash-set! parts of their functionality, which means that the update as a whole is not “atomic.”\nJulia: So the good news is, you can mutate it safely from different threads. Of the bad news, I think mainly you just need to be aware of the second point, for any thread that culls expired items. On any given cull, it might not see all the items, or see some more than once.\nKami: Maybe I could use a queue instead\nKami: and have one dedicated thread to process it\nJulia: My first reaction is that a queque (if you mean FIFO or LIFO) won't necessarily match the HTTP requests for CSRF.\nKami: yeah, never mind, I was thinking about something else that required a queue in the same time, and got mixed up in my thoughts\nJulia: One thing I've done is, store the expiration time in the hash-table, and, some thread runs every (say) 10 or 60 seconds to cull expired items. If it misses some on one run, it will catch them later. Often that's good-enough.\nKami: yep, I think I'm gonna go with that\nJulia: (When the expiration time isn't strict, it's more just about \"cleaning up eventually\".)\nJulia: Maybe someone will chime in with a better idea. I just happen to be awake semi-early US ET today. ¯\\_(ツ)_/¯\nKami: yeah, I was like \"wait, was greg european again?\"\nJulia: I'm not in the UK if that's what you mean :smile:\nKami: ahah\nJulia: Sorry, sorry. Should avoid geopolitical humor attempts.\nKami: I didn't immediately got it x)\nKami: Well some times ago at Fosdem, I stumbled upon three people speaking British English, talking about UK and awaiting the official results, and I told them \"I hope for the best, maybe you will be able to stay with us a bit longer\". And one of them said \"Oh you know, I don't care, for I'm actually Swedish\".\nKami: He had a really convincing british accent, and a perfectly cut mustache. I was fooled x)\nKami: (the other two were British though)\nKami: They were joking about the possibility that they may not be able to fly back home, with their european identity cards expiring following the decision\nKami: I think they had a plan B using their driver license or something, which is supposedly a valid ID card in UK. Not sure about that, though.\nKami: Anyways, I should get back to work",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 26,
        "duration_minutes": 103.97,
        "contains_question": true,
        "action_keywords": [
          "action",
          "implement",
          "must",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Kami",
          "timestamp": "2019-05-29T06:47:55.238500",
          "text": "Hello Racketeers! I'm trying to implement a CSRF check on my web-server. How would one go about coding that using the Racket web-server lib? (I know continuations are really similar, but I'm not using continuations, I disabled them on my server)\nI was thinking about using a global shared list of valid csrf tokens, but as the web-server responses are multi-threaded, I fear I would get some locks and conflicts.\nDid anyone tried this before? How do you do this on your own servers?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T07:44:49.242600",
          "text": "<@Kami> My usual step 0 for things like this would be a mutable hash-table from `make-hash`. Safe for multi threads to insert and remove.\nIn some cases I might use the file system as a local key/value store.\nEither way, usually also need some little worker thread to remove expired items from the cache."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T07:45:50.243700",
          "text": "Step 1 could be idk use memcached or redis or postgres instead.\nBut the actual real-world utilization might mean really, there's no need fuss with anything like that. Depends."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T07:46:43.244200",
          "text": "Things like confirm-your-email-address tokens, I put in postgres."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T07:56:29.247000",
          "text": "<@Julia> Thanks for the tips! Yeah I considered using a database or the filesystem, but it feels overengineered for such a simple and ephemeral thing like a token. I guess there's not a lot of choices anyway."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:04:35.248000",
          "text": "I guess the TL;DR is, from <https://docs.racket-lang.org/reference/hashtables.html>\n&gt; Caveats concerning concurrent modification: A mutable hash table can be manipulated with hash-ref, hash-set!, and hash-remove! concurrently by multiple threads, and the operations are protected by a table-specific semaphore as needed. Three caveats apply, however:\n&gt;\n&gt;    - If a thread is terminated while applying hash-ref, hash-set!, hash-remove!, hash-ref!, or hash-update! to a hash table that uses equal? or eqv? key comparisons, all current and future operations on the hash table may block indefinitely.\n&gt;\n&gt;    - The hash-map, hash-for-each, and hash-clear! procedures do not use the table’s semaphore to guard the traversal as a whole. Changes by one thread to a hash table can affect the keys and values seen by another thread part-way through its traversal of the same hash table.\n&gt;\n&gt;    - The hash-update! and hash-ref! functions use a table’s semaphore independently for the hash-ref and hash-set! parts of their functionality, which means that the update as a whole is not “atomic.”"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:06:42.249700",
          "text": "So the good news is, you can mutate it safely from different threads.\nOf the bad news, I think mainly you just need to be aware of the second point, for any thread that culls expired items. On any given cull, it might not see all the items, or see some more than once."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:07:06.250000",
          "text": "Maybe I could use a queue instead"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:07:16.250200",
          "text": "and have one dedicated thread to process it"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:08:30.251500",
          "text": "My first reaction is that a queque (if you mean FIFO or LIFO) won't necessarily match the HTTP requests for CSRF."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:09:05.252000",
          "text": "yeah, never mind, I was thinking about something else that required a queue in the same time, and got mixed up in my thoughts"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:10:08.253200",
          "text": "One thing I've done is, store the expiration time in the hash-table, and, some thread runs every (say) 10 or 60 seconds to cull expired items.\nIf it misses some on one run, it will catch them later.\nOften that's good-enough."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:10:30.253700",
          "text": "yep, I think I'm gonna go with that"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:10:37.253900",
          "text": "(When the expiration time isn't strict, it's more just about \"cleaning up eventually\".)"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:11:21.254600",
          "text": "Maybe someone will chime in with a better idea.\nI just happen to be awake semi-early US ET today. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:11:47.255000",
          "text": "yeah, I was like \"wait, was greg european again?\""
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:12:19.255300",
          "text": "I'm not in the UK if that's what you mean :smile:"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:13:04.255900",
          "text": "ahah"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:13:10.256100",
          "text": "Sorry, sorry. Should avoid geopolitical humor attempts."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:13:27.256300",
          "text": "I didn't immediately got it x)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:17:27.259000",
          "text": "Well some times ago at Fosdem, I stumbled upon three people speaking British English, talking about UK and awaiting the official results, and I told them \"I hope for the best, maybe you will be able to stay with us a bit longer\".\nAnd one of them said \"Oh you know, I don't care, for I'm actually Swedish\"."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:18:15.259700",
          "text": "He had a really convincing british accent, and a perfectly cut mustache. I was fooled x)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:18:51.260000",
          "text": "(the other two were British though)"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:25:22.261200",
          "text": "They were joking about the possibility that they may not be able to fly back home, with their european identity cards expiring following the decision"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:31:13.262200",
          "text": "I think they had a plan B using their driver license or something, which is supposedly a valid ID card in UK. Not sure about that, though."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T08:31:53.262400",
          "text": "Anyways, I should get back to work"
        }
      ]
    },
    {
      "conversation_id": "655",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Derick: is syntax parse \"just\" unification + rewrite a way to handle \"...\" repetition patterns a way to handle \"syntax classes\" via \"var_name : type\" ? Are there any other main ideas to syntax-parse ?\nJulia: I don't know if \"remove various syntax-case foot-guns\" qualifies as a main idea but I think that's a main benefit, for me.\nJulia: Also I think a lot of the motivation is help you write macros with better error messages. So syntax classes are a DRY convenience, yes, but as importantly they help syntax-parse automatically tell the user what was expected in an error message.\nJulia: It's kind of two sides of the same coin.\nKami: I don't know if [CODE] has the [CODE] and [CODE] helpers? I find them really useful in syntax-parse",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 13.05,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Derick",
          "Julia",
          "Kami"
        ]
      },
      "timeline": [
        {
          "user": "Derick",
          "timestamp": "2019-05-29T08:47:03.263300",
          "text": "is syntax parse \"just\"\n\nunification + rewrite\na way to handle \"...\" repetition patterns\na way to handle \"syntax classes\" via \"var_name : type\"\n\n?\n\nAre there any other main ideas to syntax-parse ?"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:54:59.263900",
          "text": "I don't know if \"remove various syntax-case foot-guns\" qualifies as a main idea but I think that's a main benefit, for me."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:57:57.265400",
          "text": "Also I think a lot of the motivation is help you write macros with better error messages.\nSo syntax classes are a DRY convenience, yes, but as importantly they help syntax-parse automatically tell the user what was expected in an error message."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T08:58:18.265700",
          "text": "It's kind of two sides of the same coin."
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T09:00:06.266900",
          "text": "I don't know if `syntax-case` has the `~@` and `~?` helpers? I find them really useful in syntax-parse"
        }
      ]
    },
    {
      "conversation_id": "656",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Tomas: would it be possible to put the hash in a box and use box-cas! <[URL]\nTomas: Technomancy wrote a nice [CODE] function that uses box-cas! to create a Clojure style atom in <[URL]\nTomas: might help with your multi-threading situation?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 4.62,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Tomas"
        ]
      },
      "timeline": [
        {
          "user": "Tomas",
          "timestamp": "2019-05-29T10:24:45.267100",
          "text": "would it be possible to put the hash in a box and use box-cas! <https://docs.racket-lang.org/reference/boxes.html#%28def._%28%28quote._~23~25kernel%29._box-cas%21%29%29>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-29T10:29:04.267300",
          "text": "Technomancy wrote a nice `swap!` function that uses box-cas! to create a Clojure style atom in <https://technomancy.us/175>"
        },
        {
          "user": "Tomas",
          "timestamp": "2019-05-29T10:29:22.267500",
          "text": "might help with your multi-threading situation?"
        }
      ]
    },
    {
      "conversation_id": "657",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: The [CODE] and [CODE] forms are tied to the [CODE] form, or [CODE], not to the pattern-matching form, so you should be able to use them with either [CODE] or [CODE]\nKami: Ok! I had doubts because their documentation is in the syntax-parse section\nMaire: Is there a standard practice to put all the shared libraries used in packages which call ffi's on one place in the installed Racket directory tree? I'm using Windows 10. Thanks.\nMaire: ...in one place...\nJeanine: Maire yes, see the [CODE] setup option in the docs. For an example, see the source for <[URL] go to \"Code\" and then \"info.rkt\". When the package is installed, [CODE] copies the listed files to the Racket lib dir, which is searched by [CODE] if you use a relative path.\nMaire: ...get the full binary release from...\nJeanine: Maire In that case, you can manually copy the libraries to one of the paths reported by [CODE]. BTW, I recommend the zeromq-r package instead (I wrote it).",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 69.27,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Jeanine",
          "Kami",
          "Maire"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-05-29T11:23:35.275300",
          "text": "The `~@` and `~?` forms are tied to the `syntax` form, or `#'`, not to the pattern-matching form, so you should be able to use them with either `syntax-parse` or `syntax-case`"
        },
        {
          "user": "Kami",
          "timestamp": "2019-05-29T11:24:19.276900",
          "text": "Ok! I had doubts because their documentation is in the syntax-parse section"
        },
        {
          "user": "Maire",
          "timestamp": "2019-05-29T11:26:37.280400",
          "text": "Is there a standard practice to put all the shared libraries used in packages which call ffi's on one place in the installed Racket directory tree?  I'm using Windows 10.  Thanks."
        },
        {
          "user": "Maire",
          "timestamp": "2019-05-29T11:27:02.280800",
          "text": "...in one place..."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-05-29T11:40:01.283300",
          "text": "<@Maire> yes, see the `copy-foreign-libs` setup option in the docs. For an example, see the source for <https://pkgs.racket-lang.org/package/ffmpeg-i386-win32;> go to \"Code\" and then \"info.rkt\". When the package is installed, `raco` copies the listed files to the Racket lib dir, which is searched by `ffi-lib` if you use a relative path."
        },
        {
          "user": "Maire",
          "timestamp": "2019-05-29T12:08:59.292300",
          "text": "...get the full binary release from..."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-05-29T12:32:51.295000",
          "text": "<@Maire> In that case, you can manually copy the libraries to one of the paths reported by `(begin (require setup/dirs) (get-lib-search-dirs))`. BTW, I recommend the zeromq-r package instead (I wrote it)."
        }
      ]
    },
    {
      "conversation_id": "658",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: For those who are not on the racket-users mailing lists: Does anyone use single-flonums? (See <[URL] for more.)\nMaire: Great. Problem I'm having is that I did \"raco install zeromq\" and need to figure out where the libzmq.dll should go (which isn't part of the package install, had to get the full from the <[URL] site). Setting up PATH to point to where the dll got installed works but was wanting to move it into the Racket tree.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 10.72,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Maire"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-05-29T11:57:38.289000",
          "text": "For those who are not on the racket-users mailing lists: Does anyone use single-flonums? (See <https://groups.google.com/d/msg/racket-users/Di-fTifWyWg/J_GQ2_3hBwAJ> for more.)"
        },
        {
          "user": "Maire",
          "timestamp": "2019-05-29T12:08:21.291700",
          "text": "Great. Problem I'm having is that I did \"raco install zeromq\" and need to figure out where the libzmq.dll should go (which isn't part of the package install, had to get the full from the <http://zeromq.org|zeromq.org> site).  Setting up PATH to point to where the dll got installed works but was wanting to move it into the Racket tree."
        }
      ]
    },
    {
      "conversation_id": "659",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: I have a fairly hard time understanding the docs for [CODE]; is there a good place to see many examples of it?\nElin: Did you look at the Guide section on [CODE], as opposed to the Reference section? <[URL]\nJule: yes; so the basics are pretty clear. I am trying to use match to process an xexpr, so it can be nested etc fairly complicatedly\nJule: the quasiquote syntax seems much nicer, but its even more unlear to me whats possible\nMai: Specifically for xexpr, you might want to use <[URL] instead\nJule: For example, I wrote this to extract the id attribute of an xexpr:\nJule: [CODE_BLOCK]\nMai: (See the [CODE] example below)\nJule: oh ty\nElin: The [CODE] package has both a [CODE] pattern and a [CODE] function\nElin: So [CODE] I guess\nJule: i wonder why there is a specialization of xexprs to txexprs\nJule: but thats a little neither here nor there\nElin: Because “xexpr” contains atom elements such as plain strings, and you can’t get the tag or attributes of those\nJule: ty, y’all gave me some stuff to think about/look at\nKaren: I really wish there was an alternative to xexpr / txexpr that just used keyword arguments for the attributes\nKristeen: Karen there's a relevant xkcd here\nKristeen: there's scribble/html\nAlden: <[URL]",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 19,
        "duration_minutes": 207.87,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Elin",
          "Jule",
          "Karen",
          "Kristeen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-05-29T12:58:08.295400",
          "text": "I have a fairly hard time understanding the docs for `match`; is there a good place to see many examples of it?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-29T13:02:05.296100",
          "text": "Did you look at the Guide section on `match`, as opposed to the Reference section?\n<https://docs.racket-lang.org/guide/match.html>"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:06:27.296900",
          "text": "yes; so the basics are pretty clear. I am trying to use match to process an xexpr, so it can be nested etc fairly complicatedly"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:06:57.297500",
          "text": "the quasiquote syntax seems much nicer, but its even more unlear to me whats possible"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-29T13:07:57.298400",
          "text": "Specifically for xexpr, you might want to use <https://docs.racket-lang.org/txexpr/#%28def._%28%28lib._txexpr%2Fmain..rkt%29._txexpr%29%29> instead"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:08:05.298800",
          "text": "For example, I wrote this to extract the id attribute of an xexpr:"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:08:10.299100",
          "text": "```\n(define (extract-id x)\n  (match x\n      [`(,(? symbol? tag)\n         ,(? list? args)\n         ,body ...)\n\n       (define result (assoc 'id args))\n       (list (second result))\n       ]\n      )\n  )\n```"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-29T13:08:14.299200",
          "text": "(See the `match` example below)"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:09:30.300100",
          "text": "oh ty"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-29T13:09:39.300400",
          "text": "The `txexpr` package has both a `txexpr` pattern and a `attr-ref` function"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-29T13:10:00.300800",
          "text": "So `(define (extract-id x) (attr-ref x 'id))` I guess"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:11:33.301700",
          "text": "i wonder why there is a specialization of xexprs to txexprs"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:11:59.302400",
          "text": "but thats a little neither here nor there"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-29T13:12:16.303000",
          "text": "Because “xexpr” contains atom elements such as plain strings, and you can’t get the tag or attributes of those"
        },
        {
          "user": "Jule",
          "timestamp": "2019-05-29T13:12:17.303100",
          "text": "ty, y’all gave me some stuff to think about/look at"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-29T15:55:01.306200",
          "text": "I really wish there was an alternative to xexpr / txexpr that just used keyword arguments for the attributes"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-29T16:08:45.306500",
          "text": "<@Karen> there's a relevant xkcd here"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-29T16:09:01.306700",
          "text": "there's scribble/html"
        },
        {
          "user": "Alden",
          "timestamp": "2019-05-29T16:26:00.308800",
          "text": "<https://cs.indiana.edu/~dyb/pubs/equal.pdf>"
        }
      ]
    },
    {
      "conversation_id": "660",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jamila: Low-level scribblers: is there a way for me to define [CODE], such that [CODE] gets automatically copied into [CODE] as part of running scribble? I _think_ I want [CODE], but I can't figure out the argument values",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Jamila"
        ]
      },
      "timeline": [
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T15:25:46.305200",
          "text": "Low-level scribblers: is there a way for me to define `(register-file-for-copy \"src/path/to/file.foobar\" \"dest/subdir\")`, such that `file.foobar` gets automatically copied into `builddir/dest/subdir` as part of running scribble?  I _think_ I want `(send my-render install-file ...)`, but I can't figure out the argument values"
        }
      ]
    },
    {
      "conversation_id": "661",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Amira: Alden can you help me find this paper by Ken about cycles &amp; [CODE]? I assume this is Ken Shan, but I haven't found anything yet\nAmira: ohhh Kent. Thanks!\nAlden: sorry, I must have said something wrong\nClarinda: I think you want the the [CODE] or [CODE] property. (I had trouble remembering/finding that myself.)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 18.42,
        "contains_question": true,
        "action_keywords": [
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Alden",
          "Amira",
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Amira",
          "timestamp": "2019-05-29T16:22:24.308500",
          "text": "<@Alden> can you help me find this paper by Ken about cycles &amp; `equal?`? I assume this is Ken Shan, but I haven't found anything yet"
        },
        {
          "user": "Amira",
          "timestamp": "2019-05-29T16:28:56.309100",
          "text": "ohhh Kent. Thanks!"
        },
        {
          "user": "Alden",
          "timestamp": "2019-05-29T16:35:22.309400",
          "text": "sorry, I must have said something wrong"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-29T16:40:49.310500",
          "text": "I think you want the the `link-resource` or `install-resource` property. (I had trouble remembering/finding that myself.)"
        }
      ]
    },
    {
      "conversation_id": "662",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Karen Have you tried scribble/html (or urlang/html for a few extras)?\nPriscila: Example: <[URL]\nKaren: Kristeen Priscila The treatment of attribute names as colon-suffixed strings is hard to read\nPriscila: foo: turns into 'foo\nPriscila: So one can write 'foo instead.\nJulia: Karen re using \"keyword args\", is the motivation to avoid attributes as a list of lists with a bunch of extras parens? instead of [CODE] you could have [CODE]?\nJamila: Thanks. But those resources just turn around and call [CODE] (in html-render.rkt), so those don't let me specify the destination directory...\nJulia: were you even thinking of full-on kw arg pos flexibility like [CODE] :smile: ?\nKaren: Yes, the extra parens are confusing and I'd like that last form\nKaren: That way xml node constructors can just be regular functions\nJamila: In my scenario, I already have a customized render% mixin, so I can add helper methods as needed. I *think* I can co-opt install-file to do what I want by suitably messing with [CODE] and/or [CODE], but I'm reading base-render.rkt#install-file right now, and I can't figure out how it manages to stash files inside a directory, when both [CODE] and [CODE] are both [CODE] so far\nKaren: Which would let me do stuff like use [CODE] with them: [CODE]\nPriscila: I believe the [CODE] version looks like: [CODE]\nJulia: That reminds me, whenever I think about it too much, I get mildly irritated that XML has both child elements, and also this side dict bag o' attributes. And in some XML I can't tell why people choose to use which. ¯\\_(ツ)_/¯\nEileen: Legacy of SGML\nJulia: I guess it's just surface syntax for, \"It's a simple 'flat' dictionary, and one mapping is an implicit \"kids\" to list of more elements.\"\nJulia: And then I get bored thinking about it and do something else instead.\nHallie: LAML was attempting something similar (with symbols instead of keywords): <[URL]",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 18,
        "duration_minutes": 34.23,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen",
          "Hallie",
          "Jamila",
          "Julia",
          "Karen",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-05-29T16:38:12.310000",
          "text": "<@Karen> Have you tried scribble/html (or urlang/html for a few extras)?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-29T16:39:38.310300",
          "text": "Example: <https://github.com/soegaard/urlang/blob/master/urlang-examples/parabola/parabola.rkt>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-29T16:45:31.314300",
          "text": "<@Kristeen> <@Priscila> The treatment of attribute names as colon-suffixed strings is hard to read"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-29T16:47:00.314600",
          "text": "foo:  turns into 'foo"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-29T16:47:07.314900",
          "text": "So one can write  'foo instead."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T16:53:09.317400",
          "text": "<@Karen> re using \"keyword args\", is the motivation to avoid attributes as a list of lists with a bunch of extras parens?\ninstead of `(p ([class \"class\"][id \"id]) \"some\" nbsp \"content\")`\nyou could have `(p #:class \"class\" #:id \"id\" \"some\" nbsp \"content\")`?"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T16:53:47.318200",
          "text": "Thanks.  But those resources just turn around and call `(for ([r (in-list resources)]) (install-file r))` (in html-render.rkt), so those don't let me specify the destination directory..."
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T16:53:58.318500",
          "text": "were you even thinking of full-on kw arg pos flexibility like\n`(p #:class \"class\" \"some\" nbsp \"content\" #:id \"id)` :smile: ?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-29T16:54:50.319300",
          "text": "Yes, the extra parens are confusing and I'd like that last form"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-29T16:55:14.319900",
          "text": "That way xml node constructors can just be regular functions"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T16:55:48.320400",
          "text": "In my scenario, I already have a customized render% mixin, so I can add helper methods as needed.  I *think* I can co-opt install-file to do what I want by suitably messing with `helper-file-prefix` and/or `dest-dir`, but I'm reading base-render.rkt#install-file right now, and I can't figure out how it manages to stash files inside a directory, when both `dest-dir` and `helper-file-prefix` are both `#f` so far"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-29T16:57:06.322700",
          "text": "Which would let me do stuff like use `fancy-app` with them: `(map (p #:class \"class\" _ nbsp) (list \"foo\" \"bar\" \"baz\"))`"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-05-29T16:59:33.326000",
          "text": "I believe the `scribble/html` version looks like:   `(map (p class: \"class\" _ nbsp)  (list \"foo\" \"bar\" \"baz\"))`"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T17:00:05.326100",
          "text": "That reminds me, whenever I think about it too much, I get mildly irritated that XML has both child elements, and also this side dict bag o' attributes.\nAnd in some XML I can't tell why people choose to use which. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Eileen",
          "timestamp": "2019-05-29T17:01:04.327000",
          "text": "Legacy of SGML"
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T17:01:19.327200",
          "text": "I guess it's just surface syntax for, \"It's a simple 'flat' dictionary, and one mapping is an implicit \"kids\" to list of more elements.\""
        },
        {
          "user": "Julia",
          "timestamp": "2019-05-29T17:01:33.327700",
          "text": "And then I get bored thinking about it and do something else instead."
        },
        {
          "user": "Hallie",
          "timestamp": "2019-05-29T17:12:26.328400",
          "text": "LAML was attempting something similar (with symbols instead of keywords): <http://people.cs.aau.dk/~normark/laml-distributions/laml/index.html>"
        }
      ]
    },
    {
      "conversation_id": "663",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Hallie: None\nHerb: This doesn't seem to work correctly when I provide draw-arrow, and use it in a teaching language.\nJamila: there's no documentation/examples of it, unfortunately",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 20.77,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Hallie",
          "Herb",
          "Jamila"
        ]
      },
      "timeline": [
        {
          "user": "Hallie",
          "timestamp": "2019-05-29T17:12:52.328500",
          "text": "None"
        },
        {
          "user": "Herb",
          "timestamp": "2019-05-29T17:15:23.328800",
          "text": "This doesn't seem to work correctly when I provide draw-arrow, and use it in a teaching language."
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T17:33:38.329600",
          "text": "there's no documentation/examples of it, unfortunately"
        }
      ]
    },
    {
      "conversation_id": "664",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jamila: ahhhh, found it -- it's a [CODE] that sets the [CODE] parameter during the render pass. So...now I'm stuck again. It seems that for me to produce a hyperlink to this installed file, I need to call [CODE] during the render pass, which is the only time that the parameter is set. So I think I need to use a [CODE] for this, but according to the [CODE] file, it'll call the render-element-render method only for its side effects, not its content -- and I won't know the correct content until the render phase! So how do I use a render-element properly?\nClarinda: Maybe [CODE], whose callback is also run at render time, but the callback returns replacement content?\nJamila: per the docs, [CODE] is run at resolve time\nJamila: darn! I tried sticking a [CODE] in as the content of a [CODE], but that was foiled :disappointed: the delayed-element function gets run before the render-element one does\nClarinda: Well, clearly I’m getting lost too easily to be much help, either :slightly_smiling_face:\nJamila: so far, I'm stuck trying to copy/paste/modify the bits of render-multi-mixin that affect these parameters",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 39.9,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Jamila"
        ]
      },
      "timeline": [
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T17:33:24.329400",
          "text": "ahhhh, found it -- it's a `parameter` that sets the `current-subdirectory` parameter during the render pass.  So...now I'm stuck again.  It seems that for me to produce a hyperlink to this installed file, I need to call `install-file` during the render pass, which is the only time that the parameter is set.  So I think I need to use a `render-element` for this, but according to the `base-render` file, it'll call the render-element-render method only for its side effects, not its content -- and I won't know the correct content until the render phase!  So how do I use a render-element properly?"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-29T17:35:51.329800",
          "text": "Maybe `delayed-element`, whose callback is also run at render time, but the callback returns replacement content?"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T17:38:05.330000",
          "text": "per the docs, `delayed-element` is run at resolve time"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T17:52:37.330200",
          "text": "darn!  I tried sticking a `delayed-element` in as the content of a `render-element`, but that was foiled :disappointed:  the delayed-element function gets run before the render-element one does"
        },
        {
          "user": "Clarinda",
          "timestamp": "2019-05-29T18:11:13.330400",
          "text": "Well, clearly I’m getting lost too easily to be much help, either :slightly_smiling_face:"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-29T18:13:18.330600",
          "text": "so far, I'm stuck trying to copy/paste/modify the bits of render-multi-mixin that affect these parameters"
        }
      ]
    },
    {
      "conversation_id": "665",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Elin: If I have the program above saved in [CODE], then the program below has an arrow pointing to the [CODE] place in the comments [CODE_BLOCK] Do you mean something else about what’s not working?\nMaire: Jeanine Does your zeromq lib work with 3.2 or 4.0?\nElin: In general, I like Clojure’s approach to “literals” for data structures a lot more than Racket’s. Closure has [CODE] for vectors and [CODE] for dictionaries. While Racket has [CODE] for vectors and [CODE] for dictionaries, where the datums are _not_ expressions for some reason, they’re auto-quoted and I hate the fact that they’re auto-quoted. Clojure allows them to be expressions and that makes it much nicer. Also no superfluous [CODE] in the middle\nElin: Does anyone know why “auto-quoting” ever became a thing?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 174.95,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Maire"
        ]
      },
      "timeline": [
        {
          "user": "Elin",
          "timestamp": "2019-05-29T18:21:31.331700",
          "text": "If I have the program above saved in `\"controlling-drracket-arrows-2.rkt\"`, then the program below has an arrow pointing to the `&lt;&lt;OVER HERE!&gt;&gt;` place in the comments\n```\n#lang htdp/isl+\n\n(require \"controlling-drracket-arrows-2.rkt\")\n\n(draw-arrow)\n\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567 &lt;&lt;OVER HERE!&gt;&gt;\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n```\nDo you mean something else about what’s not working?"
        },
        {
          "user": "Maire",
          "timestamp": "2019-05-29T18:25:10.333600",
          "text": "<@Jeanine> Does your zeromq lib work with 3.2 or 4.0?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-29T21:05:58.343900",
          "text": "In general, I like Clojure’s approach to “literals” for data structures a lot more than Racket’s. Closure has `[expression ...]` for vectors and `{expression expression ... ...}` for dictionaries.\nWhile Racket has `#(datum ...)` for vectors and `#hash((datum . datum) ...)` for dictionaries, where the datums are _not_ expressions for some reason, they’re auto-quoted and I hate the fact that they’re auto-quoted.\n\nClojure allows them to be expressions and that makes it much nicer. Also no superfluous `.` in the middle"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-29T21:16:28.344500",
          "text": "Does anyone know why “auto-quoting” ever became a thing?"
        }
      ]
    },
    {
      "conversation_id": "666",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sunni: I agree it seems like I'm reinventing the wheel. I notice now that [CODE] from a [CODE] returns a syntax object already, but I can't figure out how to use the syntax object to do something: [CODE_BLOCK] Since I've defined the syntax [CODE] I would've expected the syntax resulting from [CODE] to be interpreted somehow. What am I missing?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Sunni",
          "timestamp": "2019-05-29T18:47:35.333700",
          "text": "I agree it seems like I'm reinventing the wheel. I notice now that `parse` from a `#lang brag` returns a syntax object already, but I can't figure out how to use the syntax object to do something:\n```\n#lang br\n(define-syntax record\n  (syntax-rules ()\n    [(record content) (list 'interpreted content)]))\n@module/lang[parser]{\n#lang brag\nrecord: DATA [\",\" DATA]*\n}\n(require 'parser brag/support)\n(parse (list (token 'DATA \"a\")))\n```\nSince I've defined the syntax `record` I would've expected the syntax resulting from `parse` to be interpreted somehow. What am I missing?"
        }
      ]
    },
    {
      "conversation_id": "667",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Laverna: i often wish for a more concise hash literal syntax, that could be used in this scenario along with many others. along the lines of clojure’s [CODE]. it’s funny how in comparison to [CODE], it’s a relatively minor difference but feels very different (to me, at least).",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Laverna"
        ]
      },
      "timeline": [
        {
          "user": "Laverna",
          "timestamp": "2019-05-29T19:40:03.336300",
          "text": "i often wish for a more concise hash literal syntax, that could be used in this scenario along with many others.  along the lines of clojure’s `{:class \"container\" :id \"map\"}`. it’s funny how in comparison to `#hash((#:class . \"container\") (#:id . \"map\"))`, it’s a relatively minor difference but feels very different (to me, at least)."
        }
      ]
    },
    {
      "conversation_id": "668",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: There’s <[URL] FWIW\nMai: Isn’t it from Scheme? E.g., [CODE] creates a vector in Scheme.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 48.25,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-29T20:54:38.337000",
          "text": "There’s <https://docs.racket-lang.org/rackjure/index.html#%28part._dict-init%29>, FWIW"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-29T21:42:53.345200",
          "text": "Isn’t it from Scheme? E.g., `#(1 2 3)` creates a vector in Scheme."
        }
      ]
    },
    {
      "conversation_id": "669",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: There are situations where I write [CODE] and I know it's not as efficient as [CODE] but I rationalize that it doesn't matter in many cases. And/or if it turns out to matter, I can come back and change it later. Does that make me a bad person?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-05-29T21:50:36.347100",
          "text": "There are situations where I write `(hash k v ... ...)` and I know it's not as efficient as `#hash((k . v) ...)` but I rationalize that it doesn't matter in many cases.\nAnd/or if it turns out to matter, I can come back and change it later.\nDoes that make me a bad person?"
        }
      ]
    },
    {
      "conversation_id": "670",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Katharine: If something like [CODE] would be treated as a hash table at read time, that opens up some cans of worms... nothing that can't be ironed out, but a bunch of choices to make: - What order do the expressions evaluate in? Should they go from left to right, like Racket guarantees in most places, or should they go in whatever the hash iteration order is? - What happens if the keys aren't unique at read time? Does [CODE] cause a reader error or silently succeed somehow? How about [CODE], where the keys are the same at read time but would become different at run time? How about quasiquotations like [CODE]? - Do there need to be different syntaxes for different kinds of hashes (different comparators, mutability, etc.)? For people who want this kind of thing, what motivation do you have in mind? I tend to consider [CODE] nicer to work with than [CODE] already, largely because its parens and explicit prefix operator are consistent with most of the rest of the language. And if did at some point discover I needed read-time representations of other data types, is there something special about hashes? Or would hashes fit in better among a whole extensible system of compound read-time data constructors like [CODE], [CODE], [CODE], [CODE], [CODE]?\nElin: There should be a distinction between “value” and “syntax that would evaluate to that value”. For example a list value [CODE] is different from the syntax that would evaluate to it which would be [CODE] with some extra wrappers for syntax objects. In the same way it makes sense for the value [CODE] to be different from the syntax that would evaluate to it. The syntax returned by the reader or manipulated by the compiler should be something other than a hash table, so that it preserves order for evaluation.\nElin: Clojure gets around this by having its “straight-out-of-the-reader” representation of dictionaries remember the order, so it’s not a pure hash-table\nKatharine: if [CODE] would return something other than a hash table, how about having it return the same thing as [CODE]\nKatharine: ?\nElin: I don’t think [CODE] should be the same as [CODE], I think it should be some kind of representation for dictionary expressions that preserved order. It could still implement the “dictionary” interface, but it wouldn’t be a run-of-the-mill hash-table, it would be a representation known to the compiler with an extra operation for determining the order.\nKatharine: this would be an ordered hash that evaluates to an unordered hash?\nElin: yes\nKatharine: for the sake of being explicit, what would you expect to happen with [CODE]?\nKatharine: I mean I asked \"this would be an ordered hash\" just now, but another option you might intend would be for it to be more of an assoc list, since you were talking about dictionaries\nElin: It would get read as a “hash-expression” that implemented the dictionary interface and the “ordered dictionary” interface (isomorphic to an assoc list). It could get evaluated to a normal hash-table which doesn’t care about order\nElin: But to someone who only has access to the dictionary interface and doesn’t have the “ordered dictionary” interface, they wouldn’t be able to tell the difference\nKatharine: what would be the return value of [CODE], with a duplicate key at run time?\nKatharine: (or would it be an error?)\nElin: The expression [CODE] should definitely not be an error\nElin: An “ordered dictionary”, though maybe that’s a bad name, would allow duplicate “ordered-entries” so that [CODE] could work, but the dictionary methods would behave the same as if the other duplicate instances didn’t exist, for example [CODE] would only include one [CODE] key\nKatharine: you saw that I was asking about the expression [CODE] this time, right?\nElin: The expression [CODE] should also be a valid “ordered dictionary” for the same reason. The runtime could redefine [CODE] as a function that called [CODE], and then it would evaluate to a proper non-duplicate-entry dictionary then\nKatharine: Elin What would [CODE] do without the quote around it, or is that just something you don't have an expectation about? (I hope I'm not trying your patience by asking the same thing again. I'm just interested in case I hear the same kinds of answers from multiple people. I think of this as a gnarly system of questions, which is why I've been avoiding it altogether by preferring [CODE]. If it turns out enough people have compatible expectations around this, maybe I'm making a big deal out of nothing.)\nLaverna: “Clojure gets around this by having its “straight-out-of-the-reader” representation of dictionaries remember the order, so it’s not a pure hash-table” — Elin are you referring to clojure’s [CODE] syntax sometimes returning an array-map? (though it can also sometimes return a hash-map)\nKatharine: oh, I didn't know that about Clojure\nElin: Reader behavior vs run-time behavior. For reader behavior it would be valid, represented with an “ordered dictionary” at read-time and compile-time. For run-time behavior, it would be an error, since [CODE] and [CODE] evaluate to the same value at run-time.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 22,
        "duration_minutes": 626.9,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Katharine",
          "Laverna"
        ]
      },
      "timeline": [
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:05:45.026500",
          "text": "If something like `{'a 1 'b 2}` would be treated as a hash table at read time, that opens up some cans of worms... nothing that can't be ironed out, but a bunch of choices to make:\n\n- What order do the expressions evaluate in? Should they go from left to right, like Racket guarantees in most places, or should they go in whatever the hash iteration order is?\n- What happens if the keys aren't unique at read time? Does `{'a 1 'a 2}` cause a reader error or silently succeed somehow? How about `{(gensym) 1 (gensym) 2}`, where the keys are the same at read time but would become different at run time? How about quasiquotations like `(quasiquote {',(gensym) 1 ',(gensym) 2})`?\n- Do there need to be different syntaxes for different kinds of hashes (different comparators, mutability, etc.)?\n\nFor people who want this kind of thing, what motivation do you have in mind? I tend to consider `(hash 'a 1 'b 2)` nicer to work with than `{'a 1 'b 2}` already, largely because its parens and explicit prefix operator are consistent with most of the rest of the language. And if did at some point discover I needed read-time representations of other data types, is there something special about hashes? Or would hashes fit in better among a whole extensible system of compound read-time data constructors like `(##hash ...)`, `(##hasheq ...)`, `(##make-hash ...)`, `(##vector ...)`, `(##vector-immutable ...)`?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T00:30:17.031700",
          "text": "There should be a distinction between “value” and “syntax that would evaluate to that value”. For example a list value `(list 1 2 3)` is different from the syntax that would evaluate to it which would be `(list 'list 1 2 3)` with some extra wrappers for syntax objects. In the same way it makes sense for the value `{'a 1 'b 2}` to be different from the syntax that would evaluate to it. The syntax returned by the reader or manipulated by the compiler should be something other than a hash table, so that it preserves order for evaluation."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T00:41:34.033000",
          "text": "Clojure gets around this by having its “straight-out-of-the-reader” representation of dictionaries remember the order, so it’s not a pure hash-table"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:42:22.033700",
          "text": "if `'{'a 1 'b 2}` would return something other than a hash table, how about having it return the same thing as `'(hash 'a 1 'b 2)`"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:42:23.033900",
          "text": "?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T00:46:21.037100",
          "text": "I don’t think `'{'a 1 'b 2}` should be the same as `(list 'hash ''a 1 ''b 2)`, I think it should be some kind of representation for dictionary expressions that preserved order. It could still implement the “dictionary” interface, but it wouldn’t be a run-of-the-mill hash-table, it would be a representation known to the compiler with an extra operation for determining the order."
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:47:16.037500",
          "text": "this would be an ordered hash that evaluates to an unordered hash?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T00:47:23.037900",
          "text": "yes"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:49:53.038800",
          "text": "for the sake of being explicit, what would you expect to happen with `{(gensym) 1 (gensym) 2}`?"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:51:07.040100",
          "text": "I mean I asked \"this would be an ordered hash\" just now, but another option you might intend would be for it to be more of an assoc list, since you were talking about dictionaries"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T00:52:45.041600",
          "text": "It would get read as a “hash-expression” that implemented the dictionary interface and the “ordered dictionary” interface (isomorphic to an assoc list). It could get evaluated to a normal hash-table which doesn’t care about order"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T00:53:40.042700",
          "text": "But to someone who only has access to the dictionary interface and doesn’t have the “ordered dictionary” interface, they wouldn’t be able to tell the difference"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:55:47.045000",
          "text": "what would be the return value of `{'a 1 'a 2}`, with a duplicate key at run time?"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T00:55:54.045300",
          "text": "(or would it be an error?)"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T00:57:14.046100",
          "text": "The expression `'{(gensym) 1 (gensym) 2}` should definitely not be an error"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T01:04:30.050700",
          "text": "An “ordered dictionary”, though maybe that’s a bad name, would allow duplicate “ordered-entries” so that `'{(gensym) 1 (gensym) 2}` could work, but the dictionary methods would behave the same as if the other duplicate instances didn’t exist, for example `dict-keys` would only include one `(list 'gensym)` key"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T01:07:02.051700",
          "text": "you saw that I was asking about the expression `{'a 1 'a 2}` this time, right?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T01:13:36.058800",
          "text": "The expression `'{'a 1 'a 2}` should also be a valid “ordered dictionary” for the same reason. The runtime could redefine `quote` as a function that called `gensym`, and then it would evaluate to a proper non-duplicate-entry dictionary then"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T01:43:12.059200",
          "text": "<@Elin> What would `{'a 1 'a 2}` do without the quote around it, or is that just something you don't have an expectation about?\n\n(I hope I'm not trying your patience by asking the same thing again. I'm just interested in case I hear the same kinds of answers from multiple people. I think of this as a gnarly system of questions, which is why I've been avoiding it altogether by preferring `(hash ...)`. If it turns out enough people have compatible expectations around this, maybe I'm making a big deal out of nothing.)"
        },
        {
          "user": "Laverna",
          "timestamp": "2019-05-30T02:01:05.064500",
          "text": "“Clojure gets around this by having its “straight-out-of-the-reader” representation of dictionaries remember the order, so it’s not a pure hash-table” — <@Elin> are you referring to clojure’s `{...}` syntax sometimes returning an array-map?  (though it can also sometimes return a hash-map)"
        },
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T02:16:38.065000",
          "text": "oh, I didn't know that about Clojure"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T10:32:39.065100",
          "text": "Reader behavior vs run-time behavior.\n\nFor reader behavior it would be valid, represented with an “ordered dictionary” at read-time and compile-time.\n\nFor run-time behavior, it would be an error, since `'a` and `'a` evaluate to the same value at run-time."
        }
      ]
    },
    {
      "conversation_id": "671",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Katharine: The last time this came up for me was [on Arc Forum](<[URL] where I think a couple of people had expectations based on Clojure. I think at least one of them found it surprising that Arc tables (based on Racket hashes) didn't traverse in insertion order already. I think having insertion-order traversal in the first place gives an obvious resolution to at least the problem of evaluation order, if nothing else.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Katharine"
        ]
      },
      "timeline": [
        {
          "user": "Katharine",
          "timestamp": "2019-05-30T01:51:43.063300",
          "text": "The last time this came up for me was [on Arc Forum](<http://arclanguage.org/item?id=20985>), where I think a couple of people had expectations based on Clojure. I think at least one of them found it surprising that Arc tables (based on Racket hashes) didn't traverse in insertion order already. I think having insertion-order traversal in the first place gives an obvious resolution to at least the problem of evaluation order, if nothing else."
        }
      ]
    },
    {
      "conversation_id": "672",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeanine: Maire yes, the tests run for me on Linux with zeromq versions 4.0.8 and 3.2.5.\nMaire: Is there any reference application project written in Racket, compiled to self-contained executable where someone used either Racket or any other \"#lang defined language to be used as a scripting language within the app? What I was thinking of doing was to create an extensive real-time stock/futures charting program in Racket where I could have scripting with a variety of \"#lang\"'s available to the end-user. Thanks for the pointer.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 17.67,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Jeanine",
          "Maire"
        ]
      },
      "timeline": [
        {
          "user": "Jeanine",
          "timestamp": "2019-05-30T11:23:00.067900",
          "text": "<@Maire> yes, the tests run for me on Linux with zeromq versions 4.0.8 and 3.2.5."
        },
        {
          "user": "Maire",
          "timestamp": "2019-05-30T11:40:40.081200",
          "text": "Is there any reference application project written in Racket, compiled to self-contained executable where someone used either Racket or any other \"#lang defined language to be used as a scripting language within the app?  What I was thinking of doing was to create an extensive real-time stock/futures  charting program in Racket where I could have scripting with a variety of  \"#lang\"'s available to the end-user.   Thanks for the pointer."
        }
      ]
    },
    {
      "conversation_id": "673",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: You’ll want to supply the [CODE] flag to [CODE]. That’s an indirect answer, but the flag exists because others have done what you describe (and without [CODE] it’s tricky to convert [CODE] to preserve the right modules).",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-05-30T11:53:11.081300",
          "text": "You’ll want to supply the `++lang` flag to `raco exe`.\nThat’s an indirect answer, but the flag exists because others have done what you describe (and without `++lang` it’s tricky to convert `raco exe` to preserve the right modules)."
        }
      ]
    },
    {
      "conversation_id": "674",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Boris: Can you tell all your friends about RacketCon? Post on the tweets and Facebooks? <[URL] :poop::poop::poop::poop::poop::poop::poop::poop::poop::poop::poop::spaghetti:\nJamila: Managed to figure it out:\nJamila: [CODE_BLOCK]\nElin: Hm, I just tried that now, and it works for me with setting the language in DrRacket (not “determine from source”) with this file: [CODE_BLOCK] Although with selecting the language in DrRacket instead of the [CODE] line, I have to click the “Check Syntax” button for it to show the arrows",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 282.1,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "fix"
        ],
        "decision_keywords": [
          "works for me"
        ],
        "participants": [
          "Boris",
          "Elin",
          "Jamila"
        ]
      },
      "timeline": [
        {
          "user": "Boris",
          "timestamp": "2019-05-30T14:37:34.082300",
          "text": "Can you tell all your friends about RacketCon? Post on the tweets and Facebooks? <http://con.racket-lang.org> :poop::poop::poop::poop::poop::poop::poop::poop::poop::poop::poop::spaghetti:"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-30T17:18:24.083800",
          "text": "Managed to figure it out:"
        },
        {
          "user": "Jamila",
          "timestamp": "2019-05-30T17:18:27.084000",
          "text": "```\n(define current-subdirectory (make-parameter #f))\n(define (install-files-mixin %)\n  (class %\n    (inherit-field dest-dir)\n    (inherit-field helper-file-prefix)\n    (inherit/super path-&gt;root-relative\n                   root-relative-&gt;path\n                   resolve-part\n                   derive-filename\n                   install-file)\n    ;; COPIED FROM render-multi-mixin, because I can't access\n    ;; the current-directory parameter from there\n    (define/override (get-dest-directory [create? #f])\n      (or (and (current-subdirectory)\n               (let ([d (build-path (or (super get-dest-directory)\n                                        (current-directory))\n                                    (current-subdirectory))])\n                 (when (and create? (not (directory-exists? d)))\n                   (make-directory* d))\n                 d))\n          (super get-dest-directory create?)))\n\n    (define/override (start-resolve ds fns ri)\n      (for ([d (in-list ds)]\n            [fn (in-list fns)])\n        ;; NOTE: Because multi-mixin sets suffix to \"\", fn is already a bare name\n        (parameterize ([current-subdirectory fn])\n          (resolve-part d ri))))\n\n    (define/public (install-file-to src-file dest-prefix)\n      (define cur-dest-dir (get-dest-directory #t))\n      (define cur-helper-file-prefix (get-field helper-file-prefix this))\n      (set-field! helper-file-prefix this dest-prefix)\n      (define wanted-path (build-path (get-dest-directory #t) dest-prefix))\n      (when (not (directory-exists? wanted-path))\n        (make-directory* wanted-path))\n      (define result (install-file (path-&gt;string src-file) #:private-name? #t))\n      (set-field! helper-file-prefix this cur-helper-file-prefix)\n      (path-&gt;string (build-path dest-prefix result))\n      )\n    (super-new)\n    ))\n```"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-30T19:19:40.084600",
          "text": "Hm, I just tried that now, and it works for me with setting the language in DrRacket (not “determine from source”) with this file:\n```\n(require \"controlling-drracket-arrows-2.rkt\")\n\n(draw-arrow)\n\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n; 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\n;  &lt;&lt;OVER HERE!&gt;&gt;\n```\nAlthough with selecting the language in DrRacket instead of the `#lang` line, I have to click the “Check Syntax” button for it to show the arrows"
        }
      ]
    },
    {
      "conversation_id": "675",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Grayce: &gt; Hackathon (multiple tracks) is this known in advance or is it a whatever happens style thing\nKristeen: Grayce the tracks are listed there\nGrayce: oh i thought those were concurrent events rather than the tracks. thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 3.62,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Grayce",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Grayce",
          "timestamp": "2019-05-30T15:44:27.082900",
          "text": "&gt; Hackathon (multiple tracks)\nis this known in advance or is it a whatever happens style thing"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-30T15:47:31.083200",
          "text": "<@Grayce> the tracks are listed there"
        },
        {
          "user": "Grayce",
          "timestamp": "2019-05-30T15:48:04.083500",
          "text": "oh i thought those were concurrent events rather than the tracks. thanks"
        }
      ]
    },
    {
      "conversation_id": "676",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Herb: I don't think that this works if you use ISL+Lambda by selecting it from the DrRacket \"chose language\" menu - I believe there macro somehow doesn't make it into the teaching language. I'm getting the error [CODE].",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Herb"
        ]
      },
      "timeline": [
        {
          "user": "Herb",
          "timestamp": "2019-05-30T18:54:17.084400",
          "text": "I don't think that this works if you use ISL+Lambda by selecting it from the DrRacket \"chose language\" menu - I believe there macro somehow doesn't make it into the teaching language. I'm getting the error `draw-arrow: this function is not defined`."
        }
      ]
    },
    {
      "conversation_id": "677",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I made a module that provides string functions that only accept and return immutable strings <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-05-30T21:29:45.086100",
          "text": "I made a module that provides string functions that only accept and return immutable strings <https://docs.racket-lang.org/rebellion/Immutable_Strings.html>"
        }
      ]
    },
    {
      "conversation_id": "678",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: How do I know what kind of values can be used across namespaces?\nKaren: Mai magic, usually. I recommend avoiding relying on phase crossings. What's your use case?\nMai: I’m running a Racket program several times with different mutations (via [CODE]). I got this to work, but was measuring how good a mutation is solely by running time of the mutated program. Now, I want more information, so I need to communicate between the parent namespace and the child namespace as well.\nKaren: As soon as multiple program instantiations are involved you can't share values between them without sacrificing generativity somewhere, so I recommend doing that communication by explicitly serializing and deserializing values at namespace boundaries.\nKaren: Alternatively you might be able to get away with using [CODE] somewhere\nElin: Hm. Your macro for doing that looks nice. I think it looks nicer than my macro for doing that, I like how you use the [CODE] and [CODE] syntax classes to pack the create-a-function-with-this-parameter and call-a-function-with-this-argument ideas together Your macro: <[URL] My macro: <[URL] Syntax-parse and syntax-classes are awesome. I think the reason I tried to avoid them was that when I wrote my macro I was trying to get it into a state where it could be merged into racket. But for an external library using syntax-classes to do that makes the code so much cleaner.\nKaren: Oh, thank you!\nKaren: I actually ended up duplicating that macro in the [CODE] and [CODE] modules I made too\nElin: If you want to add keyword arguments, you can change the [CODE] syntax class so that instead of the [CODE] attribute, it has an [CODE] attribute which determines how it looks in a function-call. For positional arguments it will be [CODE], but for keyword arguments it needs to have [CODE]. Because of this I would make it an ellipsis-depth 1 attribute, like [CODE] for positional arguments and [CODE] for keyword arguments.\nElin: Then in the [CODE] syntax class in place of [CODE], you would have [CODE]\nKaren: I don't want to add keyword argument support. At least, not in those modules. The tiny number of functions with keyword arguments isn't worth it to add support in each module, and I don't want to factor out the macros because I'll be depending on these modules from a lot of other code. Code that I'd like to use in a public module providing better versions of these macros.\nKaren: That is a good way to implement keyword support though\nKristeen: where [CODE] is the name of the primitive table you create",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 1017.33,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Karen",
          "Kristeen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-05-30T23:41:12.086600",
          "text": "How do I know what kind of values can be used across namespaces?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T00:38:13.089000",
          "text": "<@Mai> magic, usually. I recommend avoiding relying on phase crossings. What's your use case?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-05-31T00:50:00.094100",
          "text": "I’m running a Racket program several times with different mutations (via `current-compile`). I got this to work, but was measuring how good a mutation is solely by running time of the mutated program. Now, I want more information, so I need to communicate between the parent namespace and the child namespace as well."
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T00:53:11.094300",
          "text": "As soon as multiple program instantiations are involved you can't share values between them without sacrificing generativity somewhere, so I recommend doing that communication by explicitly serializing and deserializing values at namespace boundaries."
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T00:55:27.094500",
          "text": "Alternatively you might be able to get away with using `namespace-attach-module` somewhere"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-31T00:58:35.094700",
          "text": "Hm. Your macro for doing that looks nice. I think it looks nicer than my macro for doing that, I like how you use the `positional-argument` and `string-function-header` syntax classes to pack the create-a-function-with-this-parameter and call-a-function-with-this-argument ideas together\n\nYour macro: <https://github.com/jackfirth/rebellion/blob/fb2f73d9dc31a4668f4bbead475450dd9d55f407/private/immutable-string.rkt#L94-L121>\nMy macro: <https://github.com/AlexKnauth/racket-immutable/blob/master/racket-immutable/immutable.rkt#L106-L142>\n\nSyntax-parse and syntax-classes are awesome.\nI think the reason I tried to avoid them was that when I wrote my macro I was trying to get it into a state where it could be merged into racket. But for an external library using syntax-classes to do that makes the code so much cleaner."
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T01:00:37.095100",
          "text": "Oh, thank you!"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T01:01:48.095300",
          "text": "I actually ended up duplicating that macro in the `immutable-bytes` and `immutable-vector` modules I made too"
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-31T01:08:09.095500",
          "text": "If you want to add keyword arguments, you can change the `argument` syntax class so that instead of the `id` attribute, it has an `argument-use` attribute which determines how it looks in a function-call. For positional arguments it will be `id`, but for keyword arguments it needs to have `#:kw id`. Because of this I would make it an ellipsis-depth 1 attribute, like `#:with [argument-use ...] #'[id]` for positional arguments and `#:with [argument-use ...] #'[kw id]` for keyword arguments."
        },
        {
          "user": "Elin",
          "timestamp": "2019-05-31T01:09:16.095800",
          "text": "Then in the `function-header` syntax class in place of `#:with function-call-expression #'(id arg.id ...)`, you would have `#:with function-call-expression #'(id arg.argument-use ... ...)`"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T01:15:46.096100",
          "text": "I don't want to add keyword argument support. At least, not in those modules. The tiny number of functions with keyword arguments isn't worth it to add support in each module, and I don't want to factor out the macros because I'll be depending on these modules from a lot of other code. Code that I'd like to use in a public module providing better versions of these macros."
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T01:16:19.096300",
          "text": "That is a good way to implement keyword support though"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-31T16:38:32.102600",
          "text": "where `js-primitive` is the name of the primitive table you create"
        }
      ]
    },
    {
      "conversation_id": "679",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jeanine: Or use prefab structs, which are non-generative and so cross phases and namespaces freely. They have corresponding limitations, of course, but whether that matters depends on your situation.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jeanine"
        ]
      },
      "timeline": [
        {
          "user": "Jeanine",
          "timestamp": "2019-05-31T08:21:52.096600",
          "text": "Or use prefab structs, which are non-generative and so cross phases and namespaces freely. They have corresponding limitations, of course, but whether that matters depends on your situation."
        }
      ]
    },
    {
      "conversation_id": "680",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: Clarinda Is it currently possible to configure the linklet flattener in such a way that it treats an arbitrary set of bindings as “primitive”, instead of what host Racket considers primitive? For example, if I wanted to use the flattener to compile some Racket code to JS, and I wrote a Racket module that implemented some JS primitive operations in Racket, could I use the flattener in a mode where it would leave references to phase 0 bindings in that module alone so that I could write a linklet-to-JS compiler that handled those operations specially?\nKristeen: Gonzalo one relatively straightforward way to do that is to access all those bindings via a [CODE] and then use [CODE] to treat them as primitive\nKristeen: see uses of [CODE] in the [CODE] for some inspiration\nKaren: Kristeen what's a [CODE]?\nGonzalo: Kristeen Thanks, that makes sense… I’d been looking at some of the primitive table stuff, but I didn’t totally understand how it worked. I think what you said is enough to point me in the right direction, though. It would be nice if I could also make referring to [CODE] bindings an error, but I didn’t see an easy way to do that. I guess I could [CODE] all of them, though I’m not sure if that would work.\nKristeen: Karen it's part of the low level bootstrapping process\nKristeen: Basically just a named hash table\nGonzalo: Kristeen Looking at things again, it looks like [CODE] only works for [CODE] modules that are “wired in”. But I guess I could write my own wrapper around [CODE] that calls [CODE] directly, given my custom primitive table?\nKristeen: Gonzalo for phase 1 vs 0, I would deal with that using different requires\nKristeen: If you want to redirect things that are part of the regular racket implementation, then you'd probably need to do something more like what the actual bootstrapping code does\nGonzalo: Kristeen I want running the program in DrRacket to still work (unless it used truly JS-specific features).\nKristeen: then I think you do need to do more like the bootstrapping stuff\nKristeen: ie, the expander and thread system implementations work in regular racket\nGonzalo: Kristeen Thanks, I think I’m starting to see how things fit together by looking at the thread system implementation.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 14,
        "duration_minutes": 1274.08,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Karen",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-31T15:51:12.100700",
          "text": "<@Clarinda> Is it currently possible to configure the linklet flattener in such a way that it treats an arbitrary set of bindings as “primitive”, instead of what host Racket considers primitive? For example, if I wanted to use the flattener to compile some Racket code to JS, and I wrote a Racket module that implemented some JS primitive operations in Racket, could I use the flattener in a mode where it would leave references to phase 0 bindings in that module alone so that I could write a linklet-to-JS compiler that handled those operations specially?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-31T16:38:16.102200",
          "text": "<@Gonzalo> one relatively straightforward way to do that is to access all those bindings via a `primitive-table` and then use `++knot js-primitive -` to treat them as primitive"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-31T16:38:54.103100",
          "text": "see uses of `++knot` in the `expander/Makefile` for some inspiration"
        },
        {
          "user": "Karen",
          "timestamp": "2019-05-31T18:59:43.104200",
          "text": "<@Kristeen> what's a `primitive-table`?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-31T19:15:36.107900",
          "text": "<@Kristeen> Thanks, that makes sense… I’d been looking at some of the primitive table stuff, but I didn’t totally understand how it worked. I think what you said is enough to point me in the right direction, though. It would be nice if I could also make referring to `%#kernel` bindings an error, but I didn’t see an easy way to do that. I guess I could `++disallow` all of them, though I’m not sure if that would work."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-31T20:05:55.108800",
          "text": "<@Karen> it's part of the low level bootstrapping process"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-05-31T20:06:15.109300",
          "text": "Basically just a named hash table"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-31T22:45:03.110600",
          "text": "<@Kristeen> Looking at things again, it looks like `++knot` only works for `#%` modules that are “wired in”. But I guess I could write my own wrapper around `extract` that calls `declare-hash-based-module!` directly, given my custom primitive table?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-01T11:19:43.114200",
          "text": "<@Gonzalo> for phase 1 vs 0, I would deal with that using different requires"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-01T11:20:47.115500",
          "text": "If you want to redirect things that are part of the regular racket implementation, then you'd probably need to do something more like what the actual bootstrapping code does"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-01T11:36:35.117400",
          "text": "<@Kristeen> I want running the program in DrRacket to still work (unless it used truly JS-specific features)."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-01T11:43:01.117500",
          "text": "then I think you do need to do more like the bootstrapping stuff"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-01T11:43:22.117600",
          "text": "ie, the expander and thread system implementations work in regular racket"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-01T13:05:17.118900",
          "text": "<@Kristeen> Thanks, I think I’m starting to see how things fit together by looking at the thread system implementation."
        }
      ]
    },
    {
      "conversation_id": "681",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: I’m not sure if that’s really quite right, though… I only really want to redirect phase 0 uses in the expanded program, since any phase 1 uses ought to use the Racket implementation. And it would be nice if programs could still import my module using its usual module path instead of having to indirect through some magical [CODE] module.\nGonzalo: ~Though I suppose hash-based modules don’t have to be cross-phase persistent, so maybe the phasing issue isn’t actually a problem.~ Scratch that, I think they do have to be cross-phase persistent (which makes sense, since they’re just hash tables full of values). But I think it might be possible to adjust [CODE] so it can do that knot-tying without needing to be a [CODE] module.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 1.32,
        "contains_question": false,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-31T22:48:15.112200",
          "text": "I’m not sure if that’s really quite right, though… I only really want to redirect phase 0 uses in the expanded program, since any phase 1 uses ought to use the Racket implementation. And it would be nice if programs could still import my module using its usual module path instead of having to indirect through some magical `#%js-primitive` module."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-05-31T22:49:34.112900",
          "text": "~Though I suppose hash-based modules don’t have to be cross-phase persistent, so maybe the phasing issue isn’t actually a problem.~ Scratch that, I think they do have to be cross-phase persistent (which makes sense, since they’re just hash tables full of values). But I think it might be possible to adjust `extract` so it can do that knot-tying without needing to be a `#%` module."
        }
      ]
    },
    {
      "conversation_id": "682",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Marcelina: Shavon Hmmph....Despite updating the sources, open hub still hasn't bothered to update.\nMarcelina: I also don't see any way to get openhub to update itself. We probably will need to contact them.\nMarcelina: (The people who run openhub)\nMai: In the above example: yes, I can use [CODE] instead, but in general, they are not equivalent.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 720.15,
        "contains_question": false,
        "action_keywords": [
          "need to",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Mai",
          "Marcelina"
        ]
      },
      "timeline": [
        {
          "user": "Marcelina",
          "timestamp": "2019-06-01T16:24:44.119400",
          "text": "<@Shavon> Hmmph....Despite updating the sources, open hub still hasn't bothered to update."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-06-01T16:28:12.120200",
          "text": "I also don't see any way to get openhub to update itself. We probably will need to contact them."
        },
        {
          "user": "Marcelina",
          "timestamp": "2019-06-01T16:28:24.120600",
          "text": "(The people who run openhub)"
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-02T04:24:53.128900",
          "text": "In the above example: yes, I can use `set!` instead, but in general, they are not equivalent."
        }
      ]
    },
    {
      "conversation_id": "683",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Are there any libraries that provide a form similar to this [CODE]? [CODE_BLOCK] transforms to [CODE_BLOCK] This magic should only work in the internal definition context. If not, does anyone have an easy way to implement this? My initial idea is to override [CODE] to [CODE] with stop list containing core forms that allow internal definitions. Then, [CODE] children with stop list containing [CODE], and then transform [CODE] away. But this seems really complicated. Is there a better solution?\nKaren: Mai what if you used [CODE]?\nMai: E.g., [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 157.28,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-06-02T01:47:49.127500",
          "text": "Are there any libraries that provide a form similar to this `p-let`?\n\n```\n(define (foo)\n  (p-let x 1)\n  (println x)\n  (p-let x (add1 x))\n  x)\n```\n\ntransforms to\n\n```\n(define (foo)\n  (let ([x 1])\n    (println x)\n    (let ([x (add1 x)])\n      x)))\n```\n\nThis magic should only work in the internal definition context.\n\nIf not, does anyone have an easy way to implement this? My initial idea is to override `#%module-begin` to `local-expand` with stop list containing core forms that allow internal definitions. Then, `local-expand` children with stop list containing `p-let`, and then transform `p-let` away. But this seems really complicated. Is there a better solution?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-02T04:20:02.128300",
          "text": "<@Mai> what if you used `set!`?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-02T04:25:06.129200",
          "text": "E.g.,\n\n```\n(define (test)\n  (define x 1)\n  (define y (thunk x))\n  (set! x 2)\n  (y))\n\n(test) ;=&gt; 2\n\n(define (test-2)\n  (let* ([x 1]\n         [y (thunk x)]\n         [x 2])\n    (y)))\n\n(test-2) ;=&gt; 1\n```"
        }
      ]
    },
    {
      "conversation_id": "684",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: Maybe [CODE] with [CODE] in [CODE].\nTerry: Wow! racket has 3000 stars on github!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 14.2,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda",
          "Terry"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-06-02T12:20:35.130000",
          "text": "Maybe `package-begin` with `define*` in `compatibility/package`."
        },
        {
          "user": "Terry",
          "timestamp": "2019-06-02T12:34:47.130200",
          "text": "Wow!  racket has 3000 stars on github!"
        }
      ]
    },
    {
      "conversation_id": "685",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: I am playing around with MySQL 8.0 and have created a database using the terminal.\nPriscila: Now I am trying to connect to the database from racket.\nPriscila: I get the error:\nPriscila: [CODE_BLOCK]\nPriscila: The MySQL documentation says:\nPriscila: [CODE_BLOCK]\nPriscila: Line 209 of interfaces.rkt is: <[URL]\nPriscila: So only \"mysql_native_password\" is supported.\nJulia: Priscila That seems to be intentional according to the docs: <[URL]\nPriscila: Thanks for looking at this.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 40.32,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:35:34.130800",
          "text": "I am playing around with MySQL 8.0 and have created a database using the terminal."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:35:48.131200",
          "text": "Now I am trying to connect to the database from racket."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:35:53.131500",
          "text": "I get the error:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:36:16.131700",
          "text": "```\n../../../../../Applications/Racket v7.0/collects/db/private/generic/interfaces.rkt:209:0: mysql-connect: back end requested unsupported authentication plugin\n  plugin: \"caching_sha2_password\"\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:36:39.132000",
          "text": "The MySQL documentation says:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:36:44.132200",
          "text": "```\nIn MySQL 8.0, caching_sha2_password is the default authentication plugin rather than mysql_native_password. \n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:38:32.132600",
          "text": "Line 209 of interfaces.rkt is:\n<https://github.com/racket/db/blob/master/db-lib/db/private/mysql/connection.rkt#L188>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T13:39:14.133000",
          "text": "So only \"mysql_native_password\" is supported."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:13:57.133900",
          "text": "<@Priscila> That seems to be intentional according to the docs: <https://docs.racket-lang.org/db/notes.html?q=db#%28part._.My.S.Q.L_.Authentication%29>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:15:53.136300",
          "text": "Thanks for looking at this."
        }
      ]
    },
    {
      "conversation_id": "686",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: Well, not \"intentional\" as in intentionally not supporting the new thing.\nJulia: Just that it knows there are \"auth plugins\" and intentionally only supports two, for now.\nJulia: Sounds like a new feature request for db/mysql\nPriscila: I found this in the mysql docs:\nPriscila: <[URL]\nJulia: I've only ever used postgres and sqlite. I don't know much about mysql, or when I might want to use that.\nPriscila: Maybe I should try postgres instead.\nPriscila: The option file mentioned in the MySQL is simple enough:\nPriscila: [CODE_BLOCK]\nPriscila: they don't mention *where* it is located ...\nJulia: Will the db server and your Racket app using it, both be on the same machine?\nPriscila: or the file name for that matter.\nPriscila: Potentially they can be on different machines - therefore I opted for something else than SQLite.\nJulia: Oh OK. I asked only because postgres and mysql both support connections via a Unix domain socket, instead of TCP. And that's safer when client and server are both on same machine.\nJulia: (And it looks like Ryan spent some time both adding support for domain sockets to Racket, and, using them in db. I think w/in the last year or so. So that's cool. But I guess orthogonal to your current problem.)\nPriscila: That's a great tip. Honestly I don't know whether I ever will need two different machines - so sockets might be the solution in the beginning.\nJulia: That way your dev machine isn't open for db access to the world -- or to Javascript running in your browser ¯\\_(ツ)_/¯\nJulia: Which can access TCP ports, you should assume.\nPriscila: Good point.\nPriscila: Do you have advice on materials on best practices regarding databases? It's been a while since I needed one last.\nJulia: That's an excellent question. I can't think of good materials, right now. Hopefully someone else can suggest something. I'll let you know if something occurs to me later.\nPriscila: Thanks.\nJulia: I think the postgres docs are pretty good, overall? But I don't recall the user's guide or best practices kind of material.\nJulia: Alas I must go, it is time for me to start making my Sunday bolognese sauce...\nPriscila: Yeah, need to make dinner too.\nPriscila: FWIW I found a way to use the legacy authentication: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 26,
        "duration_minutes": 953.0,
        "contains_question": true,
        "action_keywords": [
          "must",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:14:23.134500",
          "text": "Well, not \"intentional\" as in intentionally not supporting the new thing."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:15:00.135300",
          "text": "Just that it knows there are \"auth plugins\" and intentionally only supports two, for now."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:15:53.136400",
          "text": "Sounds like a new feature request for db/mysql"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:16:22.136900",
          "text": "I found this in the mysql docs:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:16:23.137200",
          "text": "<https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatibility-issues>"
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:16:36.137600",
          "text": "I've only ever used postgres and sqlite. I don't know much about mysql, or when I might want to use that."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:17:06.138100",
          "text": "Maybe I should try postgres instead."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:17:25.138500",
          "text": "The option file mentioned in the MySQL is simple enough:"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:17:33.138700",
          "text": "```\n[mysqld]\ndefault_authentication_plugin=mysql_native_password\n```"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:17:45.139200",
          "text": "they don't mention *where* it is located ..."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:17:56.139600",
          "text": "Will the db server and your Racket app using it, both be on the same machine?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:17:58.139700",
          "text": "or the file name for that matter."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:18:27.140300",
          "text": "Potentially they can be on different machines - therefore I opted for something else than SQLite."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:19:17.141300",
          "text": "Oh OK. I asked only because postgres and mysql both support connections via a Unix domain socket, instead of TCP.\nAnd that's safer when client and server are both on same machine."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:20:09.142200",
          "text": "(And it looks like Ryan spent some time both adding support for domain sockets to Racket, and, using them in db. I think w/in the last year or so. So that's cool. But I guess orthogonal to your current problem.)"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:21:24.143400",
          "text": "That's a great tip. Honestly I don't know whether I ever will need two different machines - so sockets might be the solution in the beginning."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:21:55.143900",
          "text": "That way your dev machine isn't open for db access to the world -- or to Javascript running in your browser ¯\\_(ツ)_/¯"
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:22:13.144200",
          "text": "Which can access TCP ports, you should assume."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:23:11.144400",
          "text": "Good point."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:23:58.145300",
          "text": "Do you have advice on materials on best practices regarding databases? It's been a while since I needed one last."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:26:09.146400",
          "text": "That's an excellent question. I can't think of good materials, right now. Hopefully someone else can suggest something.\nI'll let you know if something occurs to me later."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:26:23.146600",
          "text": "Thanks."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:26:56.147300",
          "text": "I think the postgres docs are pretty good, overall?  But I don't recall the user's guide or best practices kind of material."
        },
        {
          "user": "Julia",
          "timestamp": "2019-06-02T14:28:36.148200",
          "text": "Alas I must go, it is time for me to start making my Sunday bolognese sauce..."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-02T14:29:28.148700",
          "text": "Yeah, need to make dinner too."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-03T06:07:23.149400",
          "text": "FWIW I found a way to use the legacy authentication: <https://tableplus.io/blog/2018/07/failed-to-load-caching-sha2-password-authentication-plugin-solved.html>"
        }
      ]
    },
    {
      "conversation_id": "687",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Deeanna: I think I've found a bug in the package server. My new package[1] is marked as having conflicts but the link takes me to <[URL] rather than <[URL] . My package doesn't show up in the latter so I'm not sure what's up. Has anyone run into this before? [1]: <[URL]\nDeeanna: Ah. <[URL] says there are conflicts in a dependency which now makes sense (because it depends on [CODE], which does have conflicts and appears in the conflicts.txt file). Nevermind. :smile:\nDeeanna: Is there a way to declare that a particular folder within a package should be ignored upon install? Currently, I have <[URL] which refers to <[URL] at runtime. This works fine for development if I install koyo-lib as a linked package. It doesn't work when I deploy the package because the location of [CODE] is outside of the package's installation path so I get this error after I install the package: [CODE_BLOCK] If I move blueprints inside [CODE], then that causes problems as well because [CODE] contains racket code (and koyo-lib is declared as a multi-collection package (though I could change it to a single collection package, but I'm not sure that would help)).\nDeeanna: So what I would like to do is move [CODE] into [CODE] but somehow tell [CODE] that it should ignore the [CODE] folder when [CODE] is installed.\nDeeanna: I have read about the [CODE] configuration value but I don't think that'll do what I want. It sounds like if I add [CODE] to [CODE], it'll remove the folder before the package is installed.\nDeeanna: Any ideas?\nJeanine: Deeanna if you want [CODE] to avoid trying to compile that subdirectory, I think you want [CODE]. (I didn't find [CODE])\nDeeanna: Ah. That sounds promising! Thank you!\nDeeanna: [CODE] is described here: <[URL]\nDeeanna: Also, are all of the #info configuration options listed in an index anywhere?\nDeeanna: Jeanine that did the trick. Thanks again!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 11,
        "duration_minutes": 82.13,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Deeanna",
          "Jeanine"
        ]
      },
      "timeline": [
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T12:12:25.151100",
          "text": "I think I've found a bug in the package server.  My new package[1] is marked as having conflicts but the link takes me to <https://pkg-build.racket-lang.org/(indirect%20conflicts.txt)> rather than <https://pkg-build.racket-lang.org/conflicts.txt> . My package doesn't show up in the latter so I'm not sure what's up.  Has anyone run into this before?\n\n[1]: <https://pkgd.racket-lang.org/pkgn/search?q=koyo&amp;tags=author%3Abogdan%40defn.io>"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T12:13:26.152000",
          "text": "Ah. <https://pkg-build.racket-lang.org/> says there are conflicts in a dependency which now makes sense (because it depends on `postmark-client`, which does have conflicts and appears in the conflicts.txt file). Nevermind. :smile:"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:16:17.155700",
          "text": "Is there a way to declare that a particular folder within a package should be ignored upon install?\n\nCurrently, I have <https://github.com/Bogdanp/koyo/tree/master/koyo-lib>, which refers to <https://github.com/Bogdanp/koyo/tree/master/blueprints> at runtime. This works fine for development if I install koyo-lib as a linked package. It doesn't work when I deploy the package because the location of `blueprints` is outside of the package's installation path so I get this error after I install the package:\n\n```\ndirectory-list: could not open directory\n  path: /root/.racket/7.3/pkgs/koyo-lib/koyo/../../blueprints\n```\n\nIf I move blueprints inside `koyo-lib`, then that causes problems as well because `blueprints` contains racket code (and koyo-lib is declared as a multi-collection package (though I could change it to a single collection package, but I'm not sure that would help))."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:16:51.156300",
          "text": "So what I would like to do is move `blueprints` into `koyo-lib` but somehow tell `raco pkg` that it should ignore the `blueprints` folder when `koyo-lib` is installed."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:17:48.157400",
          "text": "I have read about the `source-omit-files` configuration value but I don't think that'll do what I want. It sounds like if I add `blueprints` to `source-omit-files`, it'll remove the folder before the package is installed."
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:17:51.157600",
          "text": "Any ideas?"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-06-03T13:21:35.158700",
          "text": "<@Deeanna> if you want `raco setup` to avoid trying to compile that subdirectory, I think you want `compile-omit-paths`. (I didn't find `source-omit-files`)"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:22:14.159000",
          "text": "Ah. That sounds promising! Thank you!"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:23:05.159300",
          "text": "`source-omit-files` is described here: <https://docs.racket-lang.org/pkg/strip.html#%28tech._binary._package%29>"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:23:58.160100",
          "text": "Also, are all of the #info configuration options listed in an index anywhere?"
        },
        {
          "user": "Deeanna",
          "timestamp": "2019-06-03T13:34:33.160400",
          "text": "<@Jeanine> that did the trick. Thanks again!"
        }
      ]
    },
    {
      "conversation_id": "688",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Madelaine: Sunni Are you still having trouble? If so, I think the concept of *phases* might help: basically, a phase either compile-time or run-time. In Racket, though, the compile-time of some code that uses a macro is the run-time of the macro’s implementation. Since macros can (and usually are) written using other macros, we have a more general notion of phases to be able to talk about the compile-time of the compile-time, which is ultimately the run-time of something.\nMadelaine: In your example, [CODE] returns a run-time value representing a piece of syntax. On the other hand, [CODE] is bound to a macro for use in the implementation of your example. Nothing connects the two pieces.\nMadelaine: The normal way to use [CODE] is in the implementation of a custom reader for a new [CODE] language. The reader implementation would produce the syntax for a Racket module (i.e. [CODE]. The language implementation would then provide the [CODE] implementation for use by programs written in your new language.\nSunni: Thanks for following up. I settled on a solution based on creating a [CODE] language with a [CODE] macro that expands to something like [CODE] then in the user module there’s a function that wraps the CSV in [CODE] to get the value of the [CODE] variable exported by the module. I think this is similar to what you described. Phases is definitely the missing concept for me. I just barely understand that macros expand during a different phase compared to when (most) functions evaluate. I think part of the confusion is that I can write macros on the REPL and everything seems to work and then I seemingly get different results compared to a module. I assume this differences is due to how phases are handled.\nSunni: Alternatively, I’m considering changing to simply use [CODE] and treat the result kinda like an [CODE] that I iterate through, delaying evaluation using quoting instead of macros.\nMadelaine: Your current plan is very reasonable. [CODE] does something very similar, as does [CODE] (for much more complicated values).\nMadelaine: Doing [CODE] and manipulating the raw data could also work. It depends on what your overall goals are. Do you need to accept untrusted input? Do quotable Racket datatypes work well for what you need?\nMadelaine: If you go for a [CODE]-like approach, [CODE] lets you write actions as normal Racket expressions, so you wouldn’t have to build up an s-expression AST as with [CODE].",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 38.15,
        "contains_question": true,
        "action_keywords": [
          "action",
          "build",
          "implement",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Madelaine",
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Madelaine",
          "timestamp": "2019-06-03T17:45:29.160600",
          "text": "<@Sunni> Are you still having trouble? If so, I think the concept of *phases* might help: basically, a phase either compile-time or run-time. In Racket, though, the compile-time of some code that uses a macro is the run-time of the macro’s implementation. Since macros can (and usually are) written using other macros, we have a more general notion of phases to be able to talk about the compile-time of the compile-time, which is ultimately the run-time of something."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-06-03T17:53:57.160800",
          "text": "In your example, `parse` returns a run-time value representing a piece of syntax. On the other hand, `record` is bound to a macro for use in the implementation of your example. Nothing connects the two pieces."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-06-03T17:56:45.161000",
          "text": "The normal way to use `brag` is in the implementation of a custom reader for a new `#lang` language. The reader implementation would produce the syntax for a Racket module (i.e. `(module foo my-new lang \"a\")`. The language implementation would then provide the `record` implementation for use by programs written in your new language."
        },
        {
          "user": "Sunni",
          "timestamp": "2019-06-03T18:07:37.169700",
          "text": "Thanks for following up. I settled on a solution based on creating a `#lang` language with a `#%module-begin` macro that expands to something like `(provide result) (define result ,read-syntax)` then in the user module there’s a function that wraps the CSV in `make-module-evaluator` to get the value of the `result` variable exported by the module. I think this is similar to what you described. \n\nPhases is definitely the missing concept for me. I just barely understand that macros expand during a different phase compared to when (most) functions evaluate. I think part of the confusion is that I can write macros on the REPL and everything seems to work and then I seemingly get different results compared to a module. \n\nI assume this differences is due to how phases are handled. "
        },
        {
          "user": "Sunni",
          "timestamp": "2019-06-03T18:11:10.172100",
          "text": "Alternatively, I’m considering changing to simply use `syntax-&gt;datum` and treat the result kinda like an `xexpr` that I iterate through, delaying evaluation using quoting instead of macros. "
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-06-03T18:19:23.172300",
          "text": "Your current plan is very reasonable. `#lang info` does something very similar, as does `#lang scribble/manual` (for much more complicated values)."
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-06-03T18:21:32.172500",
          "text": "Doing `syntax-&gt;datum` and manipulating the raw data could also work. It depends on what your overall goals are. Do you need to accept untrusted input? Do quotable Racket datatypes work well for what you need?"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-06-03T18:23:38.172700",
          "text": "If you go for a `syntax-&gt;datum`-like approach, `parser-tools/yacc` lets you write actions as normal Racket expressions, so you wouldn’t have to build up an s-expression AST as with `brag`."
        }
      ]
    },
    {
      "conversation_id": "689",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Sunni: I guess you’re right that [CODE] might leave you vulnerable to racket code embedded in the CSV data. I’ll have to take a look at [CODE]. My initial goal was to simply try expressing a CSV as a parameterized [CODE] parser. However as I worked with it, I had the idea to make an executable CSV. The idea is to expand the CSV into a racket form (not sure the exact format) which the user provides definitions for (perhaps through parameterizing some procedures/callbacks).\nSunni: Some of this functionality already exists in the [CODE] module so I may look there next to see if I can implement what I want as a layer on top of that.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 2.9,
        "contains_question": false,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Sunni"
        ]
      },
      "timeline": [
        {
          "user": "Sunni",
          "timestamp": "2019-06-03T20:14:34.178600",
          "text": "I guess you’re right that `syntax-&gt;datum` might leave you vulnerable to racket code embedded in the CSV data. \n\nI’ll have to take a look at `parse-tools/yacc`. My initial goal was to simply try expressing a CSV as a parameterized `#lang brag` parser. However as I worked with it, I had the idea to make an executable CSV. \n\nThe idea is to expand the CSV into a racket form (not sure the exact format) which the user provides definitions for (perhaps through parameterizing some procedures/callbacks). "
        },
        {
          "user": "Sunni",
          "timestamp": "2019-06-03T20:17:28.180500",
          "text": "Some of this functionality already exists in the `csv-reading` module so I may look there next to see if I can implement what I want as a layer on top of that. "
        }
      ]
    },
    {
      "conversation_id": "690",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Priscila: Jeanine Thanks for fixing my MySQL problem!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Priscila"
        ]
      },
      "timeline": [
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T04:06:49.000500",
          "text": "<@Jeanine> Thanks for fixing my MySQL problem!"
        }
      ]
    },
    {
      "conversation_id": "691",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Is there any library in Racket to deal with png/jpg etc ? I can see you can load them using [CODE] from [CODE] but I can't see any transformations library on this like reading pixel color, converting to black-white or grayscale, resizing. Is this something that's missing in the ecosystem or am I missing something?\nShavon: .... hoping it's the latter...\nPriscila: There is bitmap% and bitmap-dc% for working with bitmaps.\nPriscila: I don't think there are transformations builtin.\nPriscila: Except for flomaps (but I don't think that's what you are looking for).\nShavon: Shame... Wanted to create a small utility to clean up my google photos drive by doing some basic recognition of similarity. Might call convert from imagemagik from racket to start with then.\nPriscila: You can read pixel values and resize them though.\nPriscila: Hmm. Maybe it's possible to convert to grey scale too. What happens if you create a gray scale image and then use draw-bitmap to draw a color bitmap on top?\nPriscila: <[URL]\nPriscila: <[URL]\nAngelika: perfect\nPriscila: Haven't tried them.\nPriscila: The first one has some small examples in the tutorials folder.\nPriscila: Angelika Deja vu! <[URL]\nMadelaine: Julia Derick I think these posts may be from before AWS Lambda supported custom runtimes: <[URL] I haven’t tried yet, but it looks like it would be easy to implement a runtime in Racket.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 15,
        "duration_minutes": 1348.53,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Angelika",
          "Madelaine",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-06-04T04:31:42.001900",
          "text": "Is there any library in Racket to deal with png/jpg etc ? I can see you can load them using `bitmap` from `pict` but I can't see any transformations library on this like reading pixel color, converting to black-white or grayscale, resizing. Is this something that's missing in the ecosystem or am I missing something?"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-04T04:32:08.002400",
          "text": ".... hoping it's the latter..."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T04:32:59.002900",
          "text": "There is bitmap% and bitmap-dc% for working with bitmaps."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T04:33:21.003400",
          "text": "I don't think there are transformations builtin."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T04:34:01.004000",
          "text": "Except for flomaps (but I don't think that's what you are looking for)."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-04T04:35:35.004900",
          "text": "Shame... Wanted to create a small utility to clean up my google photos drive by doing some basic recognition of similarity. Might call convert from imagemagik from racket to start with then."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T04:36:50.005700",
          "text": "You can read pixel values and resize them though."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T04:38:03.006800",
          "text": "Hmm. Maybe it's possible to convert to grey scale too. What happens if you create a gray scale image and then use draw-bitmap to draw a color bitmap on top?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T13:52:21.008000",
          "text": "<https://github.com/oetr/racket-opencv>"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T13:52:28.008300",
          "text": "<https://github.com/tonyg/racket-opencv-videocapture>"
        },
        {
          "user": "Angelika",
          "timestamp": "2019-06-04T13:52:32.008600",
          "text": "perfect"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T13:52:40.008800",
          "text": "Haven't tried them."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T13:53:38.009300",
          "text": "The first one has some small examples in the tutorials folder."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T15:03:28.009600",
          "text": "<@Angelika> Deja vu!  <https://stackoverflow.com/questions/38139043/racket-and-opencv>"
        },
        {
          "user": "Madelaine",
          "timestamp": "2019-06-05T03:00:14.000200",
          "text": "<@Julia> <@Derick> I think these posts may be from before AWS Lambda supported custom runtimes: <https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html>\nI haven’t tried yet, but it looks like it would be easy to implement a runtime in Racket."
        }
      ]
    },
    {
      "conversation_id": "692",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: I will take a look.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-06-04T04:50:35.007000",
          "text": "I will take a look."
        }
      ]
    },
    {
      "conversation_id": "693",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Terry: <[URL] is an online IDE that supports a variety of languages. It would be nice if it supported Racket Please upvote here: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "please"
        ],
        "decision_keywords": [],
        "participants": [
          "Terry"
        ]
      },
      "timeline": [
        {
          "user": "Terry",
          "timestamp": "2019-06-04T05:15:40.007100",
          "text": "<http://Repl.it|Repl.it> is an online IDE that supports a variety of languages. \n\nIt would be nice if it supported Racket\n\nPlease upvote here: <https://repl.it/language-requests/p/racket>"
        }
      ]
    },
    {
      "conversation_id": "694",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Angelika: Would be cool to have an opencv interface",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Angelika"
        ]
      },
      "timeline": [
        {
          "user": "Angelika",
          "timestamp": "2019-06-04T13:52:00.007800",
          "text": "Would be cool to have an opencv interface"
        }
      ]
    },
    {
      "conversation_id": "695",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Jule: Are there any packages that make it nicer to use the drawing library? it seems fine, just have noticed that using it involves a lot of manual math, and i’d rather think more abstractly\nPriscila: Do you mean racket/draw or pict ?\nPriscila: Not exactly \"less math\" but there are some pict tools here: <[URL]\nJule: I meant racket/draw\nJule: i forgot about pict\nJule: looking at that\nPriscila: If no-one has an answer here, try asking the same question in the common lisp irc group.\nPriscila: <[URL]\nRosalba: thank you!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 1238.1,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jule",
          "Priscila",
          "Rosalba"
        ]
      },
      "timeline": [
        {
          "user": "Jule",
          "timestamp": "2019-06-04T16:38:37.011000",
          "text": "Are there any packages that make it nicer to use the drawing library? it seems fine, just have noticed that using it involves a lot of manual math, and i’d rather think more abstractly"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T16:39:09.011400",
          "text": "Do you mean racket/draw or pict ?"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-04T16:39:47.011800",
          "text": "Not exactly \"less math\" but there are some pict tools here: <https://docs.racket-lang.org/metapict/index.html?q=metapict>"
        },
        {
          "user": "Jule",
          "timestamp": "2019-06-05T13:03:07.001100",
          "text": "I meant racket/draw"
        },
        {
          "user": "Jule",
          "timestamp": "2019-06-05T13:03:10.001400",
          "text": "i forgot about pict"
        },
        {
          "user": "Jule",
          "timestamp": "2019-06-05T13:05:00.003400",
          "text": "looking at that"
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-05T13:07:35.005000",
          "text": "If no-one has an answer here, try asking the same question in the common lisp irc group."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-05T13:08:03.005200",
          "text": "<https://www.cliki.net/IRC>"
        },
        {
          "user": "Rosalba",
          "timestamp": "2019-06-05T13:16:43.005500",
          "text": "thank you!"
        }
      ]
    },
    {
      "conversation_id": "696",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Rosalba: Hi there... sorry for my stupid question, but I've google'd a lot and I can't find a slack group on common lisp... can anyone of you help me and send me to the registration page (if it exists)? Thank you all in advance, and again, excuse me for the inconvinience of reading such a question in a place like this",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalba"
        ]
      },
      "timeline": [
        {
          "user": "Rosalba",
          "timestamp": "2019-06-05T13:05:31.004100",
          "text": "Hi there... sorry for my stupid question, but I've google'd a lot and I can't find a slack group on common lisp... can anyone of you help me and send me to the registration page (if it exists)? Thank you all in advance, and again, excuse me for the inconvinience of reading such a question in a place like this"
        }
      ]
    },
    {
      "conversation_id": "697",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Eileen: Is there a syntactic abstraction for this already? [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Eileen"
        ]
      },
      "timeline": [
        {
          "user": "Eileen",
          "timestamp": "2019-06-05T13:33:26.007100",
          "text": "Is there a syntactic abstraction for this already?\n```\n(lambda args (send/apply an-object a-message args))\n```"
        }
      ]
    },
    {
      "conversation_id": "698",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: Julia i have started a new blog (not online yet) using frog and interestingly found that my post [CODE] is replaced indented 6 spaces which messes up my code snippets generated using pygments. Do you know where these 6 spaces could come from?\nKristeen: Shavon it might be better to cover this here than over email\nKristeen: First, I would take a look at <[URL]\nKristeen: Unfortunately drdr is not easily replicable (a lot of the configuration is just on the machine), but many more tests could be run\nShavon: ok, let me take a look at drdr. I never really paid much attention as I thought it was something geared towards internal team use and not really for public consumption.\nShavon: wow: [CODE] is this each file in the racket repository or each file in [CODE], [CODE], [CODE]?\nKristeen: it's basically the same as any of the other CI we use\nKristeen: that's every file in every package that gets installed\nKristeen: see <[URL]\nShavon: ah, yes. i think i understand. Thanks - on to do some experimentation.\nKristeen: one drawback of this is that there's basically no list of tests to run more comprehensive than what's on Travis\nKristeen: because nothing needs to be added to test things in DrDr\nKristeen: there is also: <[URL]\nShavon: excellent, was not aware of that the checklist either. It has quite a few more specific tests that might be good to test.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 14,
        "duration_minutes": 118.23,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Kristeen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-06-05T15:12:45.008800",
          "text": "<@Julia> i have started a new blog (not online yet) using frog and interestingly found that my post `@|content|` is replaced indented 6 spaces which messes up my code snippets generated using pygments. Do you know where these 6 spaces could come from?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:33:02.010000",
          "text": "<@Shavon> it might be better to cover this here than over email"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:33:35.010100",
          "text": "First, I would take a look at <http://drdr.racket-lang.org/help>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:34:26.010300",
          "text": "Unfortunately drdr is not easily replicable (a lot of the configuration is just on the machine), but many more tests could be run"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-05T16:38:41.010500",
          "text": "ok, let me take a look at drdr. I never really paid much attention as I thought it was something geared towards internal team use and not really for public consumption."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-05T16:43:05.010700",
          "text": "wow: `Each file is run with raco test ~s is used if the file's suffix is .rkt, .ss, .scm, .sls, or .scrbl.` is this each file in the racket repository or each file in `pkgs/racket-test`, `pkgs/racket-test-core`, `pkgs/racket-test-extra`?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:45:45.010900",
          "text": "it's basically the same as any of the other CI we use"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:46:04.011100",
          "text": "that's every file in every package that gets installed"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:46:22.011300",
          "text": "see <http://drdr.racket-lang.org/52239/pkg-show>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-05T16:54:20.011500",
          "text": "ah, yes. i think i understand. Thanks - on to do some experimentation."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:55:00.011700",
          "text": "one drawback of this is that there's basically no list of tests to run more comprehensive than what's on Travis"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:55:12.011900",
          "text": "because nothing needs to be added to test things in DrDr"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-05T16:55:27.012100",
          "text": "there is also: <https://github.com/racket/racket/wiki/Release-Checklist>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-05T17:10:59.012300",
          "text": "excellent, was not aware of that the checklist either. It has quite a few more specific tests that might be good to test."
        }
      ]
    },
    {
      "conversation_id": "699",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: I think there's a jpeg library made by Andy Wingo. He gave a talk about it at racketcon.\nKaren: There's also the [CODE] system\nShavon: Julia just found out the problem...",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 6.9,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-06-05T15:50:59.008900",
          "text": "I think there's a jpeg library made by Andy Wingo. He gave a talk about it at racketcon."
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-05T15:51:32.009100",
          "text": "There's also the `file/convertible` system"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-05T15:57:53.009600",
          "text": "<@Julia> just found out the problem..."
        }
      ]
    },
    {
      "conversation_id": "700",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Julia: What was it?\nKaren: that reminds me, there's also that repo with some work on dockerizing some of the release checklist tests",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 96.43,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Julia",
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Julia",
          "timestamp": "2019-06-05T18:19:55.012500",
          "text": "What was it?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-05T19:56:21.012700",
          "text": "that reminds me, there's also that repo with some work on dockerizing some of the release checklist tests"
        }
      ]
    },
    {
      "conversation_id": "701",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: Is [CODE] the same as [CODE]?\nMai: (besides the fact that [CODE] generates a more ugly identifier name internally)\nMai: Also, which one is preferable, if they are functionally equivalent?\nElin: [CODE] uses interned symbols, so if you guess right, you could actually end up with conflicting symbols if you replace the scopes. I’ve accidentally created situations where [CODE] produced [CODE] and I took away the scopes so that it actually conflicted with the [CODE] from Racket. However, the scopes being different on generated identifiers helps avoid conflicts if you just don’t remove them.\nGonzalo: Mai To add to what Alex said, [CODE] doesn’t guarantee produced symbols’ names will be unique, only that the symbols themselves will not be [CODE] to any other symbol. However, uninterned symbols get coerced to interned symbols during compilation, using the symbolic name, so [CODE] will not necessarily produce a unique identifier.\nMai: Thanks! Is there a proper way to generate *an* identifier, then? Doing [CODE] on [CODE] just seems so ugly\nGonzalo: Use [CODE] from [CODE].\nMai: Aha!\nGonzalo: One other thing: you can’t even use [CODE] at compile-time to produce symbols that are intended to be unique at _runtime_ because the marshalling/unmarshalling process will still end up destroying the uniqueness guarantee. So you’d have to generate a [CODE] _expression_ instead, since then the symbol itself will be generated in the phase that needs it to be unique.\nGonzalo: I.e. don’t do [CODE], that won’t work; use [CODE], instead.\nMai: Thank you :slightly_smiling_face:\nJeanine: Gonzalo I think (and a test agrees) that marshalling and unmarshalling doesn't make distinct uninterned symbols equal, but it can make equal uninterned symbols unequal. But if the uninterned symbol stays within a single compiled module, it should work as expected.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 12,
        "duration_minutes": 291.72,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "create",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Elin",
          "Gonzalo",
          "Jeanine",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-06-06T00:45:02.013700",
          "text": "Is `(car (generate-temporaries '(whatever)))` the same as `(datum-&gt;syntax #f (gensym 'whatever))`?"
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-06T00:46:46.015300",
          "text": "(besides the fact that `(gensym ...)` generates a more ugly identifier name internally)"
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-06T00:47:22.016000",
          "text": "Also, which one is preferable, if they are functionally equivalent?"
        },
        {
          "user": "Elin",
          "timestamp": "2019-06-06T00:55:12.019600",
          "text": "`generate-temporaries` uses interned symbols, so if you guess right, you could actually end up with conflicting symbols if you replace the scopes. I’ve accidentally created situations where `(generate-temporaries '(add))` produced `add1` and I took away the scopes so that it actually conflicted with the `add1` from Racket. However, the scopes being different on generated identifiers helps avoid conflicts if you just don’t remove them."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T01:44:01.021900",
          "text": "<@Mai> To add to what Alex said, `gensym` doesn’t guarantee produced symbols’ names will be unique, only that the symbols themselves will not be `eq?` to any other symbol. However, uninterned symbols get coerced to interned symbols during compilation, using the symbolic name, so `gensym` will not necessarily produce a unique identifier."
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-06T01:47:04.025600",
          "text": "Thanks! Is there a proper way to generate *an* identifier, then? Doing `car` on `generate-temporaries` just seems so ugly"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T01:47:18.025900",
          "text": "Use `generate-temporary` from `racket/syntax`."
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-06T01:47:28.026300",
          "text": "Aha!"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T01:48:18.027100",
          "text": "One other thing: you can’t even use `gensym` at compile-time to produce symbols that are intended to be unique at _runtime_ because the marshalling/unmarshalling process will still end up destroying the uniqueness guarantee. So you’d have to generate a `gensym` _expression_ instead, since then the symbol itself will be generated in the phase that needs it to be unique."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T01:49:18.028000",
          "text": "I.e. don’t do `(quasisyntax (quote #,(gensym)))`, that won’t work; use `#'(gensym)`, instead."
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-06T01:51:33.028200",
          "text": "Thank you :slightly_smiling_face:"
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-06-06T05:36:45.033600",
          "text": "<@Gonzalo> I think (and a test agrees) that marshalling and unmarshalling doesn't make distinct uninterned symbols equal, but it can make equal uninterned symbols unequal. But if the uninterned symbol stays within a single compiled module, it should work as expected."
        }
      ]
    },
    {
      "conversation_id": "702",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Gonzalo: The practical takeaway: [CODE] is never right for generating unique identifiers because the mechanism that it uses to ensure uniqueness can’t survive the roundtrip to and from bytecode. [CODE] uses a different strategy, namely adding a scope, which can survive that process.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo"
        ]
      },
      "timeline": [
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T01:45:44.023800",
          "text": "The practical takeaway: `gensym` is never right for generating unique identifiers because the mechanism that it uses to ensure uniqueness can’t survive the roundtrip to and from bytecode. `generate-temporaries` uses a different strategy, namely adding a scope, which can survive that process."
        }
      ]
    },
    {
      "conversation_id": "703",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Shavon: which one? Not yours, I assume.\nJeanine: Marshalling compile-time [CODE]-generated symbols is still bad, though, because it breaks deterministic compilation. But that's because the gensym counter doesn't follow the rules for independent compilation of modules, and that affects the symbol names.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 198.37,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jeanine",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T02:23:00.029000",
          "text": "which one? Not yours, I assume."
        },
        {
          "user": "Jeanine",
          "timestamp": "2019-06-06T05:41:22.036200",
          "text": "Marshalling compile-time `gensym`-generated symbols is still bad, though, because it breaks deterministic compilation. But that's because the gensym counter doesn't follow the rules for independent compilation of modules, and that affects the symbol names."
        }
      ]
    },
    {
      "conversation_id": "704",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: I think it was Karen's -- at least, he did all the work",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T10:00:07.036700",
          "text": "I think it was <@Karen>'s -- at least, he did all the work"
        }
      ]
    },
    {
      "conversation_id": "705",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Leticia: Are exceptions future safe?\nLeticia: er no, thinking about it I suppose they couldn’t be in the general case.\nLeticia: I’m asking about the case where the exception is thrown and caught in the future.\nPriscila: From the docs: \"Similarly, work in a future is suspended if it depends in some way on the current continuation, such as raising an exception. A suspended computation for a future is resumed when touch is applied to the future.\"\nPriscila: Can [CODE] be used to make an experiment that tests this?\nKaren: I think [CODE] should never be used\nElin: Should we use [CODE] instead? /s\nKaren: Found it <[URL]\nKaren: Definitely not :p\nAngelika: Looking for any documentation style guide, if one exists.\nAmira: <[URL]\nShavon: Does anybody know if there's an interface to compile a module down to a linklet and obtain that linklet? I can see [CODE] from [CODE]. That should allow me to compile the linklet once I get ahold of it, but I can't seem to find something akin to [CODE] that will take my module and spit out a linklet bundle/directory for it.\nKaren: Shavon don't know, but FYI one module compiles to multiple linklets (because phases, mostly) and one source file can contain multiple modules\nShavon: Karen right, that's the linklet directory. that's what I would like to have. :slightly_smiling_face: trying to find some code already doing that but not being very lucky at that.\nKaren: Shavon I want that too, so if you find something let me know. If you don't find anything, consider opening an issue in rebellion asking for a nice source-to-linklets compilation API :p\nShavon: I will remember that. I heard the maintainer is open to feature requests. :slightly_smiling_face:\nShavon: I am trying just now to run the benchmarks to automate this process in CI. I have attempted the [CODE] script in [CODE] but it breaks due to a missing [CODE]. I was luckier with [CODE] but I assume that using your [CODE] script I can get fancier results. It seems to take a [CODE] as input but I don't quite get what this [CODE] is.\nKristeen: Shavon there isn't something like that, and adding it would require being more specific about what you actually want\nShavon: ok\nShavon: so at a certain point in this presentation: <[URL]\nShavon: ^- by the way, for those who haven't watched it, you should!\nShavon: in any case, Clarinda makes the case that given linklets we currently implement [CODE] and a couple of other functions and get a different backend. Either normal racket or racketcs.\nShavon: So, in principle to compile racket to language [CODE] you should be able to grab a linklet and compile to [CODE].\nShavon: and then you get Racket -&gt; [CODE].\nShavon: I wanted to attempt to do something like this. Implement in Racket, a Racket transpiler to Javascript using the nanopass framework. This would be for my own edification, so I am not concerned about getting all of racket or make it production complete.\nKristeen: That isn't really an accurate summary of how it works\nShavon: That might be a problem indeed. :slightly_smiling_face:\nKristeen: Let me try to phrase it simply\nKristeen: and then I can clarify as needed\nKristeen: To write a racket implementation, you do the following:\nKristeen: 1. write an implementation of [CODE] and [CODE] (ie, write an interpreter for the linklet language)\nKristeen: 2. call [CODE] and [CODE] ~in~ on the linklet extracted from the expander\nKristeen: step 2 gives you a bunch of values in the resulting linklet instance, which are named things like [CODE] and [CODE] and [CODE]\nKristeen: 3. set up some initial state for the expander\nKristeen: 4. call [CODE] (or similar eval-like functions like [CODE]) on things\nKristeen: That's basically it\nShavon: ok. so although i didn't get the details it's not very far from what I expected. However, at the moment you can't actually get step 2. You say [CODE] but the expander gives you a fully expanded program, not a linklet. As far as I understand, they are not the same thing.\nShavon: So back to my initial question, what I really wanted was for a way to extract this linklet in racket. Something like [CODE]\nShavon: or as mentioned earlier it would probably be a [CODE], not just a [CODE]\nShavon: My idea initially was to actually start the transpiling experiment from fully expanded programs. It was only after some research that I though... [CODE]... and my evening is suddenly gone. :slightly_smiling_face:\nShavon: The whole point of this is my own education. I am working at the moment on JavaScript JIT and GC technologies and I thought I should spend some time learning more about JavaScript. And what better way is there than to try to transpile Racket to Javascript...\nKristeen: sorry, step 2 should say \"on\"\nKristeen: The fundamental issue is that [CODE] and [CODE] are designed to be called _inside_ the implementation of the expander (ie, inside the defintions of [CODE] and [CODE])\nKristeen: you basically don't call them yourself at all\nShavon: so for me to use linklets I need to reimplement [CODE]?\nKristeen: no\nShavon: but expand gives me a fully expanded program, not a linklet. I see the definition of [CODE], [CODE] in chez for example but I don't actually understand how the connection is made.\nKristeen: you're getting the direction of calls wrong\nKristeen: it might be helpful to look here: <[URL]\nShavon: ok. Thanks. I will take a look at the code and see if I understand how these things fit together.\nKristeen: but schematically a JS implemenation of racket would look like this: [CODE_BLOCK]\nKristeen: where [CODE] contains a core-racket interpreter + a bunch of primitives\nShavon: yes, that makes sense. I will need to look better at pycket (don't think i had heard about it before!!!)\nKristeen: the other thing to note is that you can turn racket modules into linklets yourself using the various tools that are part of the expander implementation\nKristeen: but that won't give you a linklet directory or really a good way to produce a racket implementation\nKristeen: see for example this entry in [CODE]: [CODE_BLOCK]\nShavon: oh... ok, i definitely didn't know about that. thanks.\nKristeen: one other thing you might be interested in is this code, from the original way Pycket worked: <[URL]\nKristeen: which basically takes a racket source file and produces a JSON file with the fully-expanded result\nKristeen: that, however, doesn't go to the linklet layer at all, so you'd still have to implement the module system\nKristeen: but if you just want to write something quick that doesn't deal with [CODE] or anything else complex, that might be useful\nShavon: That might be a good alternative to start. Thanks for the references.\nShavon: Do you know who is behind pycket and what's used for? Looks quite active.\nShavon: oh wait... you're one of the pycket authors...\nKristeen: me and my students\nShavon: embarassing...\nShavon: ahahah\nKristeen: :wink:\nShavon: doh! :slightly_smiling_face:\nShavon: This project creates a racket implementation in python but doesn't transpile racket to python.\nGonzalo: Thanks, you’re right. I could have sworn there was something related to binding or marshalling uninterned symbols that could cause one to get shot in the foot, but I’m not sure what I was thinking about.\nKristeen: right\nKristeen: fundamentally it's an interpreter for racket written in python\nKristeen: but using a special dialect/tools that generate a JIT along with that interpreter\nShavon: the jit generation would come from rpython.\nKristeen: yes\nShavon: ok, thanks.",
      "analysis_metadata": {
        "user_count": 9,
        "message_count": 77,
        "duration_minutes": 277.83,
        "contains_question": true,
        "action_keywords": [
          "build",
          "complete",
          "create",
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Amira",
          "Angelika",
          "Elin",
          "Gonzalo",
          "Karen",
          "Kristeen",
          "Leticia",
          "Priscila",
          "Shavon"
        ]
      },
      "timeline": [
        {
          "user": "Leticia",
          "timestamp": "2019-06-06T12:28:33.037200",
          "text": "Are exceptions future safe?"
        },
        {
          "user": "Leticia",
          "timestamp": "2019-06-06T12:29:06.037300",
          "text": "er no, thinking about it I suppose they couldn’t be in the general case."
        },
        {
          "user": "Leticia",
          "timestamp": "2019-06-06T12:29:30.037600",
          "text": "I’m asking about the case where the exception is thrown and caught in the future."
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-06T12:32:05.037900",
          "text": "From the docs:\n\"Similarly, work in a future is suspended if it depends in some way on the current continuation, such as raising an exception. A suspended computation for a future is resumed when touch is applied to the future.\""
        },
        {
          "user": "Priscila",
          "timestamp": "2019-06-06T12:34:40.038400",
          "text": "Can `would-be-future` be used to make an experiment that tests this?"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T12:41:36.039200",
          "text": "I think `gensym` should never be used"
        },
        {
          "user": "Elin",
          "timestamp": "2019-06-06T12:42:39.039500",
          "text": "Should we use `(string-&gt;uninterned-symbol \"temp\")` instead? /s"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T12:42:44.039600",
          "text": "Found it <https://github.com/samth/docker-racket-build>"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T12:43:30.040700",
          "text": "Definitely not :p"
        },
        {
          "user": "Angelika",
          "timestamp": "2019-06-06T14:21:29.041700",
          "text": "Looking for any documentation style guide, if one exists."
        },
        {
          "user": "Amira",
          "timestamp": "2019-06-06T14:28:25.041900",
          "text": "<https://docs.racket-lang.org/style/reference-style.html>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T14:40:08.044300",
          "text": "Does anybody know if there's an interface to compile a module down to a linklet and obtain that linklet? I can see `compile-linklet` from `racket/linklet`. That should allow me to compile the linklet once I get ahold of it, but I can't seem to find something akin to `expand` that will take my module and spit out a linklet bundle/directory for it."
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T15:11:13.045900",
          "text": "<@Shavon> don't know, but FYI one module compiles to multiple linklets (because phases, mostly) and one source file can contain multiple modules"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T15:12:27.047000",
          "text": "<@Karen> right, that's the linklet directory. that's what I would like to have. :slightly_smiling_face: trying to find some code already doing that but not being very lucky at that."
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T15:21:45.049900",
          "text": "<@Shavon> I want that too, so if you find something let me know. If you don't find anything, consider opening an issue in rebellion asking for a nice source-to-linklets compilation API :p"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T15:22:31.050300",
          "text": "I will remember that. I heard the maintainer is open to feature requests. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:04:14.050500",
          "text": "I am trying just now to run the benchmarks to automate this process in CI. I have attempted the `run.rkt` script in `shootout` but it breaks due to a missing `current-bm.rkt`. I was luckier with `auto.rkt` but I assume that using your `mini-bar-plot` script I can get fancier results. It seems to take a `file` as input but I don't quite get what this `file` is."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:16:35.051300",
          "text": "<@Shavon> there isn't something like that, and adding it would require being more specific about what you actually want"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:18:42.052300",
          "text": "ok"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:19:19.052700",
          "text": "so at a certain point in this presentation: <https://www.youtube.com/watch?v=t09AJUK6IiM&amp;t=894s>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:19:36.053200",
          "text": "^- by the way, for those who haven't watched it, you should!"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:20:28.054300",
          "text": "in any case, <@Clarinda> makes the case that given linklets we currently implement `compile-linklet` and a couple of other functions and get a different backend. Either normal racket or racketcs."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:21:15.055000",
          "text": "So, in principle to compile racket to language `X` you should be able to grab a linklet and compile to `X`."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:21:43.055600",
          "text": "and then you get Racket -&gt; `X`."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:23:28.057600",
          "text": "I wanted to attempt to do something like this. Implement in Racket, a Racket transpiler to Javascript using the nanopass framework. This would be for my own edification, so I am not concerned about getting all of racket or make it production complete."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:23:44.057900",
          "text": "That isn't really an accurate summary of how it works"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:24:00.058400",
          "text": "That might be a problem indeed. :slightly_smiling_face:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:24:02.058600",
          "text": "Let me try to phrase it simply"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:24:10.058800",
          "text": "and then I can clarify as needed"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:24:23.059100",
          "text": "To write a racket implementation, you do the following:"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:25:22.059900",
          "text": "1. write an implementation of `compile-linklet` and `instantiate-linklet` (ie, write an interpreter for the linklet language)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:25:55.060600",
          "text": "2. call `compile-linklet` and `instantiate-linklet` ~in~ on the linklet extracted from the expander"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:26:34.061400",
          "text": "step 2 gives you a bunch of values in the resulting linklet instance, which are named things like `eval` and `read` and `current-namespace`"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:26:56.061800",
          "text": "3. set up some initial state for the expander"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:27:37.062400",
          "text": "4. call `eval` (or similar eval-like functions like `dynamic-require`) on things"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:27:48.062600",
          "text": "That's basically it"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:29:24.062700",
          "text": "ok. so although i didn't get the details it's not very far from what I expected. However, at the moment you can't actually get step 2. You say `linklet extracted from the expander` but the expander gives you a fully expanded program, not a linklet. As far as I understand, they are not the same thing."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:30:56.062800",
          "text": "So back to my initial question, what I really wanted was for a way to extract this linklet in racket. Something like `extract-linklet (-&gt; path-string? linklet?)`"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:31:43.062900",
          "text": "or as mentioned earlier it would probably be a `linklet-directory?`, not just a `linklet?`"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:32:41.063000",
          "text": "My idea initially was to actually start the transpiling experiment from fully expanded programs. It was only after some research that I though... `ah, maybe I should get fancy and do it using linklets`... and my evening is suddenly gone. :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:35:04.063100",
          "text": "The whole point of this is my own education. I am working at the moment on JavaScript JIT and GC technologies and I thought I should spend some time learning more about JavaScript. And what better way is there than to try to transpile Racket to Javascript..."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:39:19.063800",
          "text": "sorry, step 2 should say \"on\""
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:40:03.064900",
          "text": "The fundamental issue is that `compile-linklet` and `instantiate-linklet` are designed to be called _inside_ the implementation of the expander (ie, inside the defintions of `expand` and `eval`)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:40:20.065200",
          "text": "you basically don't call them yourself at all"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:41:04.065800",
          "text": "so for me to use linklets I need to reimplement `expand`?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:41:50.066700",
          "text": "no"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:42:02.067200",
          "text": "but expand gives me a fully expanded program, not a linklet. I see the definition of `compile-linklet`, `instantiate-linklet` in chez for example but I don't actually understand how the connection is made."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:42:11.067500",
          "text": "you're getting the direction of calls wrong"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:42:24.067900",
          "text": "it might be helpful to look here: <https://github.com/pycket/pycket/blob/master/pycket/racket_entry.py#L427>"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:46:01.072000",
          "text": "ok. Thanks. I will take a look at the code and see if I understand how these things fit together."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:46:12.072300",
          "text": "but schematically a JS implemenation of racket would look like this:\n```\nfunction instantiate_linklet(l, args) { .... }\nlet expander = ... // some ast for the extracted expander linklet\nlet expander_instance = instantiate_linklet(expander, [])\nwhile (1) {\n  console.log(expander_instance.get(\"eval\")(expander_instance.get(\"read\")(get_input_from_user())))\n}\n```"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:47:23.072900",
          "text": "where `instantiate_linklet` contains a core-racket interpreter + a bunch of primitives"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:48:34.073500",
          "text": "yes, that makes sense. I will need to look better at pycket (don't think i had heard about it before!!!)"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:51:52.074200",
          "text": "the other thing to note is that you can turn racket modules into linklets yourself using the various tools that are part of the expander implementation"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:52:22.074700",
          "text": "but that won't give you a linklet directory or really a good way to produce a racket implementation"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:53:14.075500",
          "text": "see for example this entry in `racket/src/expander/README`:\n```\n % racket bootstrap-run.rkt -s -c &lt;dir&gt; --linklets -l &lt;module-path&gt;\n\n   Compiles the given file to a set of linklets in S-expression form,\n   instead of compiling and running it.\n```"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:53:43.076000",
          "text": "oh... ok, i definitely didn't know about that. thanks."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:54:44.076600",
          "text": "one other thing you might be interested in is this code, from the original way Pycket worked: <https://github.com/pycket/pycket/blob/master/pycket/pycket-lang/expand.rkt>"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:55:07.077300",
          "text": "which basically takes a racket source file and produces a JSON file with the fully-expanded result"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:55:31.077800",
          "text": "that, however, doesn't go to the linklet layer at all, so you'd still have to implement the module system"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:56:17.078500",
          "text": "but if you just want to write something quick that doesn't deal with `require` or anything else complex, that might be useful"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:58:35.079000",
          "text": "That might be a good alternative to start. Thanks for the references."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T16:59:02.079500",
          "text": "Do you know who is behind pycket and what's used for? Looks quite active."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T17:02:02.080100",
          "text": "oh wait... you're one of the pycket authors..."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T17:02:03.080300",
          "text": "me and my students"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T17:02:04.080400",
          "text": "embarassing..."
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T17:02:09.080700",
          "text": "ahahah"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T17:02:09.080800",
          "text": ":wink:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T17:02:35.081100",
          "text": "doh! :slightly_smiling_face:"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T17:03:26.081800",
          "text": "This project creates a racket implementation in python but doesn't transpile racket to python."
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T17:04:01.081900",
          "text": "Thanks, you’re right. I could have sworn there was something related to binding or marshalling uninterned symbols that could cause one to get shot in the foot, but I’m not sure what I was thinking about."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T17:04:27.082700",
          "text": "right"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T17:04:45.083100",
          "text": "fundamentally it's an interpreter for racket written in python"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T17:05:02.083700",
          "text": "but using a special dialect/tools that generate a JIT along with that interpreter"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T17:05:43.084200",
          "text": "the jit generation would come from rpython."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T17:05:49.084400",
          "text": "yes"
        },
        {
          "user": "Shavon",
          "timestamp": "2019-06-06T17:06:23.084700",
          "text": "ok, thanks."
        }
      ]
    },
    {
      "conversation_id": "706",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: in particular, what do you want to do with compile-time computation? do you want to get those linklets? or just run them?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T16:17:18.052000",
          "text": "in particular, what do you want to do with compile-time computation? do you want to get those linklets? or just run them?"
        }
      ]
    },
    {
      "conversation_id": "707",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Clarinda: The [CODE] script uses [CODE], if I remember correctly, so use [CODE]. When you use [CODE], the [CODE] flag copies the output to a file. The [CODE] script wants that file.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clarinda"
        ]
      },
      "timeline": [
        {
          "user": "Clarinda",
          "timestamp": "2019-06-06T17:29:59.087100",
          "text": "The `auto.rkt` script uses `run.rkt`, if I remember correctly, so use `auto.rkt`. When you use `auto.rkt`, the `-o` flag copies the output to a file. The `min-bar-plot` script wants that file."
        }
      ]
    },
    {
      "conversation_id": "708",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Kristeen more linklet questions: would sending linklets to a service which instantiates them make sense? would that be a good way to communicate over http with a remote racket runtime?\nKristeen: Karen I think a repl with a sandbox makes more sense\nKristeen: There's no real need for the linklet level\nKristeen: And you'd have to run the expander locally\nKristeen: Which would defeat the purpose\nKaren: linklets are serializable though - I'm wondering if you could store compiled linklets in a database and use that as a reasonable basis for distributed builds\nKaren: it's okay if you run the expander locally for -your- code, as long as you can download precompiled stuff for your dependencies\nKaren: But I don't have a feel for this stuff yet. Hard to tell what's a good idea and what isn't.\nMai: One possible way is to add a dummy [CODE], though I don’t think that’s a great solution.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 24.42,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Kristeen",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-06-06T20:43:07.090800",
          "text": "<@Kristeen> more linklet questions: would sending linklets to a service which instantiates them make sense? would that be a good way to communicate over http with a remote racket runtime?"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T20:43:43.091600",
          "text": "<@Karen> I think a repl with a sandbox makes more sense"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T20:44:18.092700",
          "text": "There's no real need for the linklet level"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T20:44:32.093300",
          "text": "And you'd have to run the expander locally"
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T20:44:39.093700",
          "text": "Which would defeat the purpose"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T20:45:24.094800",
          "text": "linklets are serializable though - I'm wondering if you could store compiled linklets in a database and use that as a reasonable basis for distributed builds"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T20:46:33.096000",
          "text": "it's okay if you run the expander locally for -your- code, as long as you can download precompiled stuff for your dependencies"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T20:48:27.096800",
          "text": "But I don't have a feel for this stuff yet. Hard to tell what's a good idea and what isn't."
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-06T21:07:32.099800",
          "text": "One possible way is to add a dummy `define`, though I don’t think that’s a great solution."
        }
      ]
    },
    {
      "conversation_id": "709",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Mai: I have a macro [CODE] that sometimes expands to [CODE], and sometimes expands to [CODE], depending on the operand. Consequently: [CODE_BLOCK] might or might not result in an error (because function application arguments are supposed to be expressions and not [CODE]). I want to make it always an error when people try to use this macro in an expression context. How could I do that?\nGonzalo: You can check what context you’re in with [CODE].\nMai: Right, forgot about that. Thanks :slightly_smiling_face:\nGonzalo: There’s also [CODE], but to be honest I’ve _never_ seen it used.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 3.48,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Gonzalo",
          "Mai"
        ]
      },
      "timeline": [
        {
          "user": "Mai",
          "timestamp": "2019-06-06T21:06:05.099200",
          "text": "I have a macro `m` that sometimes expands to `(define x 1)`, and sometimes expands to `(void)`, depending on the operand. Consequently:\n\n```\n(println (m foo))\n```\n\nmight or might not result in an error (because function application arguments are supposed to be expressions and not `define`). I want to make it always an error when people try to use this macro in an expression context. How could I do that?"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T21:08:42.100200",
          "text": "You can check what context you’re in with `(syntax-local-context)`."
        },
        {
          "user": "Mai",
          "timestamp": "2019-06-06T21:08:52.100500",
          "text": "Right, forgot about that. Thanks :slightly_smiling_face:"
        },
        {
          "user": "Gonzalo",
          "timestamp": "2019-06-06T21:09:34.101400",
          "text": "There’s also `prop:expansion-contexts`, but to be honest I’ve _never_ seen it used."
        }
      ]
    },
    {
      "conversation_id": "710",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Kristeen: Karen Linklets don't have unique names, though\nKaren: Kristeen That's fine. I was thinking something like a [CODE] collection you POST to and get back a URL, then an [CODE] collection you POST a message to that says \"I want to instantiate the linklet at this url, and here is a list of other instances to use for the linklet's imports\"\nKristeen: That seems potentially interesting but I don't see what linklets buy you over module source code.\nKaren: I'm not sure either. But it seems like a much simpler starting point.\nKristeen: I really think \"sandbox as a service\" will be a simpler starting point.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 50.78,
        "contains_question": false,
        "action_keywords": [
          "let's",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Karen",
          "Kristeen"
        ]
      },
      "timeline": [
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T21:48:59.101800",
          "text": "<@Karen> Linklets don't have unique names, though"
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T22:27:12.109300",
          "text": "<@Kristeen> That's fine. I was thinking something like a `/linklets` collection you POST to and get back a URL, then an `/instances` collection you POST a message to that says \"I want to instantiate the linklet at this url, and here is a list of other instances to use for the linklet's imports\""
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T22:29:01.109800",
          "text": "That seems potentially interesting but I don't see what linklets buy you over module source code."
        },
        {
          "user": "Karen",
          "timestamp": "2019-06-06T22:37:27.111300",
          "text": "I'm not sure either. But it seems like a much simpler starting point."
        },
        {
          "user": "Kristeen",
          "timestamp": "2019-06-06T22:39:46.111900",
          "text": "I really think \"sandbox as a service\" will be a simpler starting point."
        }
      ]
    },
    {
      "conversation_id": "5706",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2018-12-31T00:00:02.058422",
        "end_date": "2019-06-07T01:00:01.660771"
      },
      "processed_text": "Karen: Why's that?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karen"
        ]
      },
      "timeline": [
        {
          "user": "Karen",
          "timestamp": "2019-06-06T22:46:44.112200",
          "text": "Why's that?"
        }
      ]
    }
  ]
}