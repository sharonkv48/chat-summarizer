{
  "processing_date": "2025-09-20T14:24:52.105065",
  "source_file": "C:\\Users\\sharo\\Desktop\\mini-project\\Software-related-Slack-Chats-with-Disentangled-Conversations\\data\\racket\\2017\\merged-racket-general.xml",
  "total_conversations": 565,
  "conversations": [
    {
      "conversation_id": "1",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: [CODE] library doesn't seem to provide support for executing batch statements against a database. I'm trying to initialize and create an in-memory database using a SQL schema file. [CODE] and its friends only support executing single SQL statements. Reading documentation isn't showing me a way to be able to execute more than one statement at once or allow a SQL text file to be read in and executed. Does anyone know a better method?\nMelvina: I read Fortifying Macros by Culpepper and Felleisen, where ports of [CODE] and [CODE] were made using [CODE]. I can't seem to find the code for those, though. Does anybody know where/if they can be found?\nEun: Melvina: I'd email Natosha and ask.\nTheron: Melvina Wait, so there's (already) a Racket implementation of the CL [CODE] hiding somewhere? _Throwing a glance at my early implementation draft which has been bitrotting for the last few weeks…_ Be sure to post back here if you get an answer from Natosha !\nKimbery: Theron: <[URL]\nTheron: Kimbery Sweet, thanks a lot!",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 6,
        "duration_minutes": 1724.66,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Jacob",
          "Kimbery",
          "Melvina",
          "Theron"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-05-11T15:46:08.512661",
          "text": "`db` library doesn't seem to provide support for executing batch statements against a database. I'm trying to initialize and create an in-memory database using a SQL schema file. `query-exec` and its friends only support executing single SQL statements. Reading documentation isn't showing me a way to be able to execute more than one statement at once or allow a SQL text file to be read in and executed. Does anyone know a better method?"
        },
        {
          "user": "Melvina",
          "timestamp": "2017-05-12T14:03:18.960113",
          "text": "I read Fortifying Macros by Culpepper and Felleisen, where ports of `loop` and `parser` were made using `syntax-parse`. I can't seem to find the code for those, though. Does anybody know where/if they can be found?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-12T16:12:57.381337",
          "text": "<@Melvina>: I'd email <@Natosha> and ask."
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-12T19:13:13.647582",
          "text": "<@Melvina> Wait, so there's (already) a Racket implementation of the CL `loop` hiding somewhere?\n_Throwing a glance at my early implementation draft which has been bitrotting for the last few weeks…_\nBe sure to post back here if you get an answer from <@Natosha> !"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-12T19:33:34.790796",
          "text": "<@Theron>: <http://planet.racket-lang.org/display.ss?package=loop.plt&amp;owner=jphelps>"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-12T20:30:48.115167",
          "text": "<@Kimbery> Sweet, thanks a lot!"
        }
      ]
    },
    {
      "conversation_id": "2",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "David: Is there a [CODE] predicate in the standard libraries? Something that means “if this given value matches this given pattern, then return [CODE], else return [CODE].” I keep finding myself writing this in terms of [CODE], and I feel like there should be a better way.\nTheron: David I thought there was one, but cannot find it, so I may have imagined it. There's [CODE] from [CODE] for tests (it does not return a boolean). Otherwise, seems like you will have to roll your own.\nDavid: Theron: Thank you for your answer.\nDavid: Theron: I’m doing something about this: <[URL] :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 85.6,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "David",
          "Theron"
        ]
      },
      "timeline": [
        {
          "user": "David",
          "timestamp": "2017-05-12T10:21:29.214211",
          "text": "Is there a `match` predicate in the standard libraries? Something that means “if this given value matches this given pattern, then return `#t`, else return `#f`.” I keep finding myself writing this in terms of `match`, and I feel like there should be a better way."
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-12T11:21:34.597619",
          "text": "<@David> I thought there was one, but cannot find it, so I may have imagined it. There's `check-match` from `rackunit` for tests (it does not return a boolean). Otherwise, seems like you will have to roll your own."
        },
        {
          "user": "David",
          "timestamp": "2017-05-12T11:39:00.996497",
          "text": "<@Theron>: Thank you for your answer."
        },
        {
          "user": "David",
          "timestamp": "2017-05-12T11:47:05.175228",
          "text": "<@Theron>: I’m doing something about this: <https://github.com/racket/racket/issues/1690> :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "3",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: Answered by Alex Harsanyi on Racket Users listserv.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-05-12T16:09:26.321438",
          "text": "Answered by Alex Harsanyi on Racket Users listserv."
        }
      ]
    },
    {
      "conversation_id": "4",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Has anyone used, from [CODE], any of [CODE], [CODE], or [CODE]? All give me [CODE] errors. Whereas [CODE] works great.\nCorey: For instance [CODE_BLOCK]\nVincenzo: Corey A better error message would have been \"must be used within a [CODE] form\" (and I'm guessing that you've used [CODE] successfully within [CODE])\nCorey: Vincenzo Thanks! I'd wrapped [CODE] in a [CODE] macro, long enough ago, that I forgot it was nested in a [CODE]. Dang.\nCorey: It would be neat if <[URL] showed, in addition to direct dependencies, direct dependents (\"needed by\") as for example <[URL]\nCorey: Meanwhile: <[URL] ¯\\_(ツ)_/¯",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 1017.98,
        "contains_question": true,
        "action_keywords": [
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-05-12T20:52:21.207456",
          "text": "Has anyone used, from `scribble/srcdoc`, any of `parameter-doc`, `thing-doc`, or `struct-doc`? All give me `\"illegal use of syntax\"` errors.  Whereas `proc-doc` works great."
        },
        {
          "user": "Corey",
          "timestamp": "2017-05-12T20:53:18.211125",
          "text": "For instance\n```\n#lang at-exp racket/base\n\n(require scribble/srcdoc\n         (for-doc racket/base\n                  scribble/manual))\n\n(define current-foo (make-parameter \"bar\"))\n\n(parameter-doc current-foo\n               (parameter/c string?)\n               v\n               @{Hi})\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-12T21:33:45.364198",
          "text": "<@Corey> A better error message would have been \"must be used within a `provide` form\" (and I'm guessing that you've used `proc-doc` successfully within `provide`)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-05-12T21:52:33.426666",
          "text": "<@Vincenzo> Thanks! I'd wrapped `proc-doc` in a `define/doc` macro, long enough ago, that I forgot it was nested in a `provide`. Dang."
        },
        {
          "user": "Corey",
          "timestamp": "2017-05-12T22:35:17.559970",
          "text": "It would be neat if <http://pkgs.racket-lang.org|pkgs.racket-lang.org> showed, in addition to direct dependencies, direct dependents (\"needed by\") as for example <https://melpa.org/#/helm>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-05-13T13:50:20.226789",
          "text": "Meanwhile: <https://gist.github.com/greghendershott/b20effb9d9c48211e1c11d9486257918> ¯\\_(ツ)_/¯"
        }
      ]
    },
    {
      "conversation_id": "5",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Theron: Clorinda Thanks for the tip about using [CODE] instead of [CODE]! I'm checking that everything runs fine now, but I have issues with [CODE]. The test [CODE] fails: [CODE_BLOCK] I feel like I should supply one of the [CODE] or [CODE] arguments to [CODE], but their exact meaning is not documented. Any hint?\nClorinda: I don't know there exact meaning either and wish it was documented =( that code is really clever/cute and I always struggle re-parsing what exactly it does\nTheron: Clorinda Seems like this does the trick (as I understand it, [CODE] checks that the return type is correct, even if an error is there, and [CODE] is clever enough to indicate its return type, even when it fails) [CODE_BLOCK]\nTheron: Clorinda Sorry for bothering you once more: in generalize.rkt, should I do [CODE] (to generalize literals which are [CODE] to [CODE]), or should I generalize to [CODE], i.e. [CODE] ? I tried to see if it made any difference in the way the type is printed when entering a literal [CODE] at the REPL, but it makes no difference. I also expected [CODE] to fail in the second case (generalizing to [CODE]), but it still works (so it seems something else is further generalizing [CODE] to [CODE]). Any preference? I feel this will matter only if/when we decide to make the [CODE] type \"public\" (for now it seems to be used internally only).\nClorinda: Theron sorry for the delay -- I'm not super familiar with typing regexps... my gut is to favor the more general Regexp, but like I said I don't have much experience working with those in practice\nTheron: Clorinda Okay, thanks! I'll put Regexp then (I think if we expose Basic-Regexp at some point, the user could always force it with (ann #rx\"abc\" Basic-Regexp).\nTheron: I and others expressed concern in the past about Slack's logs, which are limited to 10K messages. Seems like we could do something about it: <[URL] I don't have time to look into this right now, but it could be at some point a compromise between setting up a full-blown chat server (which some of the regulars rightfully expressed concerns about, since it increases the maintenance burden for the Racket team), and having a free-to-use-but-without-logs service like Slack.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 1220.32,
        "contains_question": true,
        "action_keywords": [
          "decide",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clorinda",
          "Theron"
        ]
      },
      "timeline": [
        {
          "user": "Theron",
          "timestamp": "2017-05-13T15:27:53.590389",
          "text": "<@Clorinda> Thanks for the tip about using `Regexp` instead of `-Regexp`!\nI'm checking that everything runs fine now, but I have issues with `tc-err`.\nThe test `[tc-err (ann (ann #px#\"abc\" Byte-PRegexp) PRegexp)]` fails:\n```\nactual:     (tc-results (list (tc-result PRegexp (Top | Bot) -)) #f)\nexpected:   (tc-results (list (tc-result Nothing (Bot | Bot) -)) #f)\n```\nI feel like I should supply one of the `ret:err-return` or `ex:expected` arguments to `tc-err`, but their exact meaning is not documented. Any hint?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-05-13T15:29:31.595652",
          "text": "I don't know there exact meaning either and wish it was documented =( that code is really clever/cute and I always struggle re-parsing what exactly it does"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-13T15:35:26.616470",
          "text": "<@Clorinda> Seems like this does the trick (as I understand it, `tc-err` checks that the return type is correct, even if an error is there, and `ann` is clever enough to indicate its return type, even when it fails)\n```\n[tc-err (ann (ann #px#\"abc\" Byte-PRegexp) PRegexp) #:ret (tc-ret -PRegexp)]\n```"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-13T15:53:29.679509",
          "text": "<@Clorinda> Sorry for bothering you once more: in generalize.rkt, should I do `[(? (lambda (t) (subtype t -Base-Regexp))) -Base-Regexp]` (to generalize literals which are `regexp?` to `-BaseRegexp`), or should I generalize to `-Regexp`, i.e. `[(? (lambda (t) (subtype t -Base-Regexp))) -Regexp]` ?\nI tried to see if it made any difference in the way the type is printed when entering a literal `#rx\"abc\"` at the REPL, but it makes no difference.\nI also expected `(let ([x #rx\"foo\"]) (set! x #px\"foo\"))` to fail in the second case (generalizing to `-Base-Regexp`), but it still works (so it seems something else is further generalizing `-Base-Regexp` to `-Regexp`).\nAny preference? I feel this will matter only if/when we decide to make the `Base-Regexp` type \"public\" (for now it seems to be used internally only)."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-05-13T18:20:46.159069",
          "text": "<@Theron> sorry for the delay -- I'm not super familiar with typing regexps... my gut is to favor the more general Regexp, but like I said I don't have much experience working with those in practice"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-13T18:22:59.165498",
          "text": "<@Clorinda> Okay, thanks! I'll put Regexp then (I think if we expose Basic-Regexp at some point, the user could always force it with (ann #rx\"abc\" Basic-Regexp)."
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-14T11:48:12.794286",
          "text": "I and others expressed concern in the past about Slack's logs, which are limited to 10K messages.\nSeems like we could do something about it: <https://github.com/mlegy/Slack-logger-bot>\nI don't have time to look into this right now, but it could be at some point a compromise between setting up a full-blown chat server (which some of the regulars rightfully expressed concerns about, since it increases the maintenance burden for the Racket team), and having a free-to-use-but-without-logs service like Slack."
        }
      ]
    },
    {
      "conversation_id": "6",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Helga: isn’t this slack archived in that one public logging service for slack (forget the name)?\nHelga: <[URL]\nHelga: I don’t know if the logs are exportable\nTheron: Helga Hm. I thought the slackarchive log was also limited, but it seems it goes back further in time (the earliest message I can get in <#C06V96CKX|general> is from march 14th, but slackarchive goes back to November 15th). That's cool :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 70.69,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Helga",
          "Theron"
        ]
      },
      "timeline": [
        {
          "user": "Helga",
          "timestamp": "2017-05-14T12:12:25.871842",
          "text": "isn’t this slack archived in that one public logging service for slack (forget the name)?"
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-14T12:19:21.893661",
          "text": "<https://racket.slackarchive.io/>"
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-14T12:19:33.894346",
          "text": "I don’t know if the logs are exportable"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-14T13:23:07.101024",
          "text": "<@Helga> Hm. I thought the slackarchive log was also limited, but it seems it goes back further in time (the earliest message I can get in <#C06V96CKX|general> is from march 14th, but slackarchive goes back to November 15th). That's cool :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "7",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: anyone know how to center a [CODE] in a pdf?\nNelson: (well, renewing the [CODE] environment to [CODE] for the main document --- then back to [CODE] for the bibliography --- works as a LaTeX-level fix)\nNelson: Sharolyn Stefani I just tried to make a new package and am getting \"Save failed.\"\nTheron: Nelson Have a look at [CODE]. You can use that to inject LaTeX code and renew the environment \"by hand\", I suppose.\nVincenzo: Nelson If I remember correctly, using [CODE] has the same effect as switching to [CODE] at the Latex level, so [CODE] plus [CODE] should work\nNelson: I think the problem was my tag [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 1249.56,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Nelson",
          "Theron",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-05-14T18:15:31.022736",
          "text": "anyone know how to center a `tabular` in a pdf?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-05-14T18:42:22.102126",
          "text": "(well, renewing the `bigtabular` environment to `tabular` for the main document --- then back to `pltstabular` for the bibliography --- works as a LaTeX-level fix)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-05-15T00:41:04.781681",
          "text": "<@Sharolyn> <@Stefani>  I just tried to make a new package and am getting \"Save failed.\""
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-15T09:12:44.648389",
          "text": "<@Nelson> Have a look at `tex-addition`. You can use that to inject LaTeX code and renew the environment \"by hand\", I suppose."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-15T11:13:38.406036",
          "text": "<@Nelson> If I remember correctly, using `@tabular[#:style 'block]` has the same effect as switching to `tabular` at the Latex level, so `@centered` plus `@tabular[#:style 'block]` should work"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-05-15T15:05:04.494398",
          "text": "I think the problem was my tag `syntax/parse`"
        }
      ]
    },
    {
      "conversation_id": "8",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I’ve somehow managed to break my DrRacket installation in a confusing way. When I start it up, or when I run any module, the following error message is produced in the interactions window: [CODE_BLOCK] I’ve tried removing [CODE] and [CODE] and re-running [CODE], and I’ve tried running [CODE] and rebuilding everything with [CODE], but the problem is still there, and I’m not sure what’s causing it or how to fix it.\nKimbery: I can’t seem to trigger the error at all in the REPL. Switching off debugging in the DrRacket Language menu also makes the issue go away, so it has _something_ to do with errortrace, but I don’t know what.\nKimbery: Maybe DrRacket’s .zos don’t get cleaned out by [CODE]?\nKimbery: Yeah, it seems like that may have been the problem. I ran [CODE] and that seemed to fix the issue. I still wonder what caused it, though…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 8.53,
        "contains_question": true,
        "action_keywords": [
          "action",
          "build",
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-05-15T20:05:26.115110",
          "text": "I’ve somehow managed to break my DrRacket installation in a confusing way. When I start it up, or when I run any module, the following error message is produced in the interactions window:\n```\nracket/collects/racket/compiled/errortrace/runtime-config_rkt.zo::1: read (compiled): wrong version for compiled code\n  compiled version: 6.8.0.2\n  expected version: 6.9.0.4\n```\nI’ve tried removing `racket/build/` and `racket/racket/src/build/` and re-running `make base`, and I’ve tried running `raco setup --clean` and rebuilding everything with `raco setup`, but the problem is still there, and I’m not sure what’s causing it or how to fix it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-15T20:08:05.137746",
          "text": "I can’t seem to trigger the error at all in the REPL. Switching off debugging in the DrRacket Language menu also makes the issue go away, so it has _something_ to do with errortrace, but I don’t know what."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-15T20:08:56.144789",
          "text": "Maybe DrRacket’s .zos don’t get cleaned out by `raco setup --clean`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-15T20:13:58.186767",
          "text": "Yeah, it seems like that may have been the problem. I ran `find racket/collects -type d -name errortrace -exec rm -rf {} \\;` and that seemed to fix the issue. I still wonder what caused it, though…"
        }
      ]
    },
    {
      "conversation_id": "9",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Roxanne: Hey folks! Our startup <[URL] has partnered with two awesome events for AI, ML and chatbot enthusiasts. One is called Chatbot Summit and will be held in BERLIN on 26th of June. Now can offer you 30% discount. Visit their website at <[URL] and use the promo code STANDUPLYBOTS in order to get it.\nRoxanne: The other one is AL ML World 2017 - in LONDON on 13-15 of June, we offer you 20% discount. Same thing - visit their vebsite at <[URL] and use promocode STANDUPLY\nRoxanne: Hope this information will be helpful for those who might need it :wink:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 0.6,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Roxanne"
        ]
      },
      "timeline": [
        {
          "user": "Roxanne",
          "timestamp": "2017-05-16T01:50:11.521530",
          "text": "Hey folks! Our startup <http://Standuply.com|Standuply.com> has partnered with two awesome events for AI, ML and chatbot enthusiasts. One is called Chatbot Summit and will be held in BERLIN on 26th of June. Now can offer you 30% discount. Visit their website at <http://bit.ly/chatbotsummit|bit.ly/chatbotsummit> and use the promo code STANDUPLYBOTS in order to get it."
        },
        {
          "user": "Roxanne",
          "timestamp": "2017-05-16T01:50:27.523428",
          "text": "The other one is AL ML World 2017 - in LONDON on 13-15 of June, we offer you 20% discount. Same thing - visit their vebsite at <http://bit.ly/aimlworld2017|bit.ly/aimlworld2017> and use promocode STANDUPLY"
        },
        {
          "user": "Roxanne",
          "timestamp": "2017-05-16T01:50:47.525617",
          "text": "Hope this information will be helpful for those who might need it :wink:"
        }
      ]
    },
    {
      "conversation_id": "10",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Latarsha Eun Tina or someone else with admin privileges, gleb seems like a spam bot. (If you are a real person I apologize.)\nLatarsha: Rosalee I don't think we need to do anything unless someone spams multiple times\nRosalee: Latarsha okay\nTina: I don't think I have any admin privileges.\nRosalee: Tina Oops, sorry.\nRosalee: Ya, I don’t know who manages this slack instance, only the #racket irc channel.\nLatarsha: Rosalee I think I'm the person to talk to, or Allen\nRosalee: Alright, good to know for future reference, thanks.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 11.14,
        "contains_question": false,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Rosalee",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-05-16T14:09:58.245475",
          "text": "<@Vincenzo> <@Latarsha> <@Eun> <@Tina> or someone else with admin privileges, gleb seems like a spam bot.  (If you are a real person I apologize.)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T14:10:34.259061",
          "text": "<@Rosalee> I don't think we need to do anything unless someone spams multiple times"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-16T14:10:47.263625",
          "text": "<@Latarsha> okay"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-16T14:11:17.274905",
          "text": "I don't think I have any admin privileges. "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-16T14:11:31.279774",
          "text": "<@Tina> Oops, sorry."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-16T14:11:58.289284",
          "text": "Ya, I don’t know who manages this slack instance, only the #racket irc channel."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T14:18:31.431990",
          "text": "<@Rosalee> I think I'm the person to talk to, or <@Allen>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-16T14:21:06.488306",
          "text": "Alright, good to know for future reference, thanks."
        }
      ]
    },
    {
      "conversation_id": "11",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Martin: does raco test support just running a single test within a module?\nStefani: jamesswaine: It doesn't know anything about the tests in the module. It just runs the test submodule. It might be possible to use the same code that counts the number of tests to quit after a certain number of them\nMartin: ah okay, bummer, i sort of figured\nMartin: yeah i was looking for something like what rspec gives you (ruby testing framework), where you can run a specific test in a suite by giving either a name or source line number on the command line\nTina: Martin that would be super useful, I agree. Right now the pipe of information isn’t very rich, but there is one, so it could probably be extended. This is the current library: <[URL]\nTina: I imagine that someone could add something to say “I am interested only in tests with this name” or “on this line in this file” and then rackunit could look there and [CODE] could initialize it.\nTina: (not that that’d be high on your priority list, of course :wink: )\nMartin: haha, well, i’ve been wanting that forever so\nLatarsha: Martin I've found various command line forms like that very useful in python, so consider this another vote :wink:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 9,
        "duration_minutes": 129.49,
        "contains_question": true,
        "action_keywords": [
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Martin",
          "Stefani",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Martin",
          "timestamp": "2017-05-16T15:08:33.548824",
          "text": "does raco test support just running a single test within a module?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-16T15:36:12.111421",
          "text": "jamesswaine: It doesn't know anything about the tests in the module. It just runs the test submodule. It might be possible to use the same code that counts the number of tests to quit after a certain number of them"
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-16T15:43:32.260042",
          "text": "ah okay, bummer, i sort of figured"
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-16T15:44:20.276463",
          "text": "yeah i was looking for something like what rspec gives you (ruby testing framework), where you can run a specific test in a suite by giving either a name or source line number on the command line"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-16T16:13:40.891517",
          "text": "<@Martin> that would be super useful, I agree. Right now the pipe of information isn’t very rich, but there is one, so it could probably be extended.  This is the current library: <https://github.com/racket/rackunit/blob/master/testing-util-lib/rackunit/log.rkt>"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-16T16:14:40.911781",
          "text": "I imagine that someone could add something to say “I am interested only in tests with this name” or “on this line in this file” and then rackunit could look there and `raco test` could initialize it."
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-16T16:17:25.966631",
          "text": "(not that that’d be high on your priority list, of course :wink: )"
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-16T16:33:05.289955",
          "text": "haha, well, i’ve been wanting that forever so"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T17:18:03.171641",
          "text": "<@Martin> I've found various command line forms like that very useful in python, so consider this another vote :wink:"
        }
      ]
    },
    {
      "conversation_id": "12",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Theron The highlighting change you proposed is super neat and makes me wonder if you could combine [CODE] with cover usefully",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-05-16T16:38:57.410112",
          "text": "<@Theron> The highlighting change you proposed is super neat and makes me wonder if you could combine `scribble/lp` with cover usefully"
        }
      ]
    },
    {
      "conversation_id": "13",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Julianna: raco setup take forever…. and mostly on scribbling docs it seems like? has anyone looked at where the bottlenecks are in that process?\nJulianna: &gt;1GB of RAM for raco setup also seems a bit surprising.\nLatarsha: Julianna a lot of it is typed racket + plot\nLatarsha: see <[URL] for details\nChantelle: Latarsha what specific part of typed racket causes the speed issues? Is it some weird artifact of how typed racket is implemented or is the type checking process itself just that expensive?\nLatarsha: we believe that the type checking process is expensive\nStefani: jamesswainer Latarsha Tina - I think that raco test could do something like \"raco test args files -- more\" and when it ran an individual test submodule, it could make \"more\" be (current-command-line-arguments) then we could change rackunit, chk. eli-tester, and other popular testing libraries to look at those arguments to determine whether to run\nStefani: a test. For example, if it was empty, then they'd run everything, otherwise they'd consider it a set of tags to run, etc",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 8,
        "duration_minutes": 174.6,
        "contains_question": true,
        "action_keywords": [
          "build",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Julianna",
          "Latarsha",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Julianna",
          "timestamp": "2017-05-16T17:25:59.308727",
          "text": "raco setup take forever…. and mostly on scribbling docs it seems like? has anyone looked at where the bottlenecks are in that process?"
        },
        {
          "user": "Julianna",
          "timestamp": "2017-05-16T17:26:46.322194",
          "text": "&gt;1GB of RAM for raco setup also seems a bit surprising."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T17:29:22.366278",
          "text": "<@Julianna> a lot of it is typed racket + plot"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T17:29:34.369463",
          "text": "see <http://build-plot.racket-lang.org|build-plot.racket-lang.org> for details"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-05-16T19:21:14.812199",
          "text": "<@Latarsha> what specific part of typed racket causes the speed issues? Is it some weird artifact of how typed racket is implemented or is the type checking process itself just that expensive?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T19:21:47.817953",
          "text": "we believe that the type checking process is expensive"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-16T20:20:35.356976",
          "text": "@jamesswainer <@Latarsha> <@Tina> - I think that raco test could do something like \"raco test args files -- more\" and when it ran an individual test submodule, it could make \"more\" be (current-command-line-arguments) then we could change rackunit, chk. eli-tester, and other popular testing libraries to look at those arguments to determine whether to run "
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-16T20:20:35.356979",
          "text": "a test. For example, if it was empty, then they'd run everything, otherwise they'd consider it a set of tags to run, etc"
        }
      ]
    },
    {
      "conversation_id": "14",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I eagerly await absolutely abysmal Hackett compile-times",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-05-16T19:22:13.822243",
          "text": "I eagerly await absolutely abysmal Hackett compile-times"
        }
      ]
    },
    {
      "conversation_id": "15",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Theron: Chantelle thanks :slightly_smiling_face: . I added the highlighting stuff to <[URL] (online docs are not up-to-date yet). The highlighting form [CODE] works like [CODE], but also expects a pattern. The pattern indicates which portions of the code should be highlighted as added/removed/dimmed/normal, so e.g. [CODE] will highlight the first two expressions in green and the third in red (patterns can be more complex than that, and I hope to add support for syntax/parse-like syntax [CODE] soon, as it is more readable for complex patterns. So I think it should be reasonably easy to generate the pattern from the coverage information, but we would have to add line numbers to [CODE] first, though — don't hold your breath, it won't happen overnight :slightly_smiling_face:.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Theron"
        ]
      },
      "timeline": [
        {
          "user": "Theron",
          "timestamp": "2017-05-16T20:23:33.382823",
          "text": "<@Chantelle> thanks :slightly_smiling_face: . I added the highlighting stuff to <http://docs.racket-lang.org/hyper-literate/> (online docs are not up-to-date yet).\nThe highlighting form `@hlite[name pat . code]` works like `@chunk[name . code]`, but also expects a pattern. The pattern indicates which portions of the code should be highlighted as added/removed/dimmed/normal, so e.g. `{+ _ _ - _}` will highlight the first two expressions in green and the third in red (patterns can be more complex than that, and I hope to add support for syntax/parse-like syntax `{a:+ b:+ c:-}` soon, as it is more readable for complex patterns.\nSo I think it should be reasonably easy to generate the pattern from the coverage information, but we would have to add line numbers to `hlite` first, though — don't hold your breath, it won't happen overnight :slightly_smiling_face:."
        }
      ]
    },
    {
      "conversation_id": "16",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tina: It seems reasonable to consider a more general solution but there is something to be said (both error messagewise and human convenience wise) for a shorter command line. Maybe we can solve that with some specific shorthands, starting from the ruby experience that Martin enjoyed?\nLatarsha: From my pytest experience, the shorthand I used most was '-k foo' which ran every test whose name included foo\nTina: I am often copying a single test out and running it over and over as I work towards a fix for a bug, and generally in tests suites where I didn't bother to name the tests (like the thousands of tests in the contract system), so an option that took a line number would be great for me.\nLatarsha: Right, I agree that the exact same thing wouldn't be as effective in Racket\nLatarsha: Just documenting my experience\nLatarsha: The other option I used a lot was \"stop on first failure\"\nMartin: i do agree with robby that shorter is preferable, but support in any form is better than nothing\nMartin: in the ruby rspec case, you just have [CODE]\nTina: also, now that I think about it, it would be nice if DrRacket could get in on the fun too, so having the [CODE] command-line be a thin wrapper over a prgorammable interface would be nice\nTina: programmable\nLatarsha: Martin the major issue is that the current way rackunit works/is used is to just run the code, and testing is a side effect\nMartin: right\nLatarsha: whereas rspec/pytest/etc collect tests and then run them\nMartin: would it be better to roll something totally different as opposed to bolting it onto raco test?\nMartin: or worse?\nCorey: robby: In that scenario, I could imagine giving that one test a name, then? (Maybe the name even includes the bug number; maybe handy to commit that edit for posterity, idk.) That _seems_ plausible, to me, because often I'd be mucking in the test file or submodule, anyway. Say to write a comment with the bug number, and/or add more, regression test(s). TL;DR: Maybe tests could be lazily named -- if/as/ever needed. And that would fit with a run-tests-named-x feature.\nTina: good point!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 17,
        "duration_minutes": 1182.16,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Latarsha",
          "Martin",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Tina",
          "timestamp": "2017-05-16T20:27:23.413469",
          "text": "It seems reasonable to consider a more general solution but there is something to be said (both error messagewise and human convenience wise) for a shorter command line. Maybe we can solve that with some specific shorthands, starting from the ruby experience that <@Martin> enjoyed?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T20:33:48.465479",
          "text": "From my pytest experience, the shorthand I used most was '-k foo' which ran every test whose name included foo"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-16T20:45:59.560013",
          "text": "I am often copying a single test out and running it over and over as I work towards a fix for a bug, and generally in tests suites where I didn't bother to name the tests (like the thousands of tests in the contract system), so an option that took a line number would be great for me.  "
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T22:40:00.423935",
          "text": "Right, I agree that the exact same thing wouldn't be as effective in Racket"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T22:40:16.425966",
          "text": "Just documenting my experience"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-16T22:40:42.428789",
          "text": "The other option I used a lot was \"stop on first failure\""
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-17T09:38:26.835594",
          "text": "i do agree with robby that shorter is preferable, but support in any form is better than nothing"
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-17T09:38:54.845609",
          "text": "in the ruby rspec case, you just have `rspec &lt;file&gt;:&lt;line-number&gt;`"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-17T09:39:40.862001",
          "text": "also, now that I think about it, it would be nice if DrRacket could get in on the fun too, so having the `raco test` command-line be a thin wrapper over a prgorammable interface would be nice"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-17T09:39:43.863166",
          "text": "programmable"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-17T09:40:02.870459",
          "text": "<@Martin> the major issue is that the current way rackunit works/is used is to just run the code, and testing is a side effect"
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-17T09:40:14.874746",
          "text": "right"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-17T09:40:22.877822",
          "text": "whereas rspec/pytest/etc collect tests and then run them"
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-17T09:45:04.980804",
          "text": "would it be better to roll something totally different as opposed to bolting it onto raco test?"
        },
        {
          "user": "Martin",
          "timestamp": "2017-05-17T09:45:07.982212",
          "text": "or worse?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-05-17T15:57:08.602331",
          "text": "robby: In that scenario, I could imagine giving that one test a name, then? (Maybe the name even includes the bug number; maybe handy to commit that edit for posterity, idk.)\n\nThat _seems_ plausible, to me, because often I'd be mucking in the test file or submodule, anyway. Say to write a comment with the bug number, and/or add more, regression test(s).\n\nTL;DR: Maybe tests could be lazily named -- if/as/ever needed.  And that would fit with a run-tests-named-x feature."
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-17T16:09:32.862557",
          "text": "good point!"
        }
      ]
    },
    {
      "conversation_id": "17",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Helga: Theron hyper-literate seems pretty interesting\nTheron: Helga Thanks :slightly_smiling_face: For now it's mostly a collection of wishes for the future, though. The features which are actualy implemented and useful are * Choice of the language for [CODE]s * Choice of the at-exp [CODE] character, e.g. change it to [CODE] or [CODE], like with the [CODE] package * Ability to save chunks and show them multiple times (including display (but not definition (yet)) inside list items, whereas with [CODE] you cannot put a chunk in a list item at all) * And very recently, highlighting parts of the code. So there's not much yet, but given infinite time and resources, I would like to add the missing features: * It's not drawing DrRacket-like arrows in the HTML, * It's not showing the contract/type on hover * It's not hyperlinking identifiers to their definition site * It lacks an interactive REPL embedded in the HTML (we'll need a full-blown [CODE] for that :smile: or a running server) * It lacks a step-by-step debugger embedded in the HTML (but well, that would be very interesting for stepping through macro code running at compile-time, and we still don't have that in DrRacket yet!) * It certainly lacks user-driven code navigation in the spirit of Code Bubbles (although that might not be as hard as it seems to actually implement, most of the information is there, and it needs a bit of glue and some HTML+JS UI) * It definitely lacks multi-module capabilities (the HTML page should not be limited to describing a single [CODE] file) * It certainly lacks the possibility to write the literate program as an interactive story. Ideally, the reader would start with a nearly empty file, and choose an action (define foo, define bar, read the overview, …) and gradually build the program that way, with the possibility from the writer's point of view to switch between a couple of more or less in-depth explanations depending on whether an identifier was already defined or not). But that's me daydreaming :slightly_smiling_face: The exciting part is that we can in principle get 90% of the way thanks to the awesomeness of Racket's macros and Scribble, without having to change language's core.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 17.74,
        "contains_question": false,
        "action_keywords": [
          "action",
          "build",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Helga",
          "Theron"
        ]
      },
      "timeline": [
        {
          "user": "Helga",
          "timestamp": "2017-05-17T15:58:19.628001",
          "text": "<@Theron> hyper-literate seems pretty interesting"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-17T16:16:03.994831",
          "text": "<@Helga> Thanks :slightly_smiling_face: For now it's mostly a collection of wishes for the future, though.\nThe features which are actualy implemented and useful are\n* Choice of the language for `@chunk`s\n* Choice of the at-exp `@` character, e.g. change it to `♦` or `꩜`, like with the `_-exp` package\n* Ability to save chunks and show them multiple times (including display (but not definition (yet)) inside list items, whereas with `scribble/lp2` you cannot put a chunk in a list item at all)\n* And very recently, highlighting parts of the code.\nSo there's not much yet, but given infinite time and resources, I would like to add the missing features:\n* It's not drawing DrRacket-like arrows in the HTML,\n* It's not showing the contract/type on hover\n* It's not hyperlinking identifiers to their definition site\n* It lacks an interactive REPL embedded in the HTML (we'll need a full-blown `whalesong` for that :smile: or a running server)\n* It lacks a step-by-step debugger embedded in the HTML (but well, that would be very interesting for stepping through macro code running at compile-time, and we still don't have that in DrRacket yet!)\n* It certainly lacks user-driven code navigation in the spirit of Code Bubbles (although that might not be as hard as it seems to actually implement, most of the information is there, and it needs a bit of glue and some HTML+JS UI)\n* It definitely lacks multi-module capabilities (the HTML page should not be limited to describing a single `.rkt` file)\n* It certainly lacks the possibility to write the literate program as an interactive story. Ideally, the reader would start with a nearly empty file, and choose an action (define foo, define bar, read the overview, …) and gradually build the program that way, with the possibility from the writer's point of view to switch between a couple of more or less in-depth explanations depending on whether an identifier was already defined or not). But that's me daydreaming :slightly_smiling_face:\n\nThe exciting part is that we can in principle get 90% of the way thanks to the awesomeness of Racket's macros and Scribble, without having to change language's core."
        }
      ]
    },
    {
      "conversation_id": "18",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: any good tutorials on using slideshow?\nKa: the documentation is pretty good, but i'm looking for quick helpers to make doing things like background images and font changes quick and easy\nKa: (i assume tutorials would have helpers or something that make that easy...)\nTheron: Ka I vaguely remember some of last year's racketcon presentations were made with [CODE], but the website only hosts the PDFs. And a quick search for [CODE] on github did not return any code results. Maybe try to ask on the mailing list? I'm sure some people have some code lying around.\nAugustine: Here's the code for a talk I gave last year, it's not a good example of well written racket code, but it demonstrates some of the things you can do in slideshow <[URL]\nKa: Theron ok. thanks!\nTina: Ka I turn some of my talks into packages; links here: <[URL]\nLatarsha: Ka also Vincenzo posted the source for all of his slideshow talks here: <[URL]",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 8,
        "duration_minutes": 1099.22,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Augustine",
          "Ka",
          "Latarsha",
          "Theron",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-05-17T16:49:42.668864",
          "text": "any good tutorials on using slideshow?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-05-17T16:50:09.678192",
          "text": "the documentation is pretty good, but i'm looking for quick helpers to make doing things like background images and font changes quick and easy"
        },
        {
          "user": "Ka",
          "timestamp": "2017-05-17T16:52:02.715588",
          "text": "(i assume tutorials would have helpers or something that make that easy...)"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-17T18:16:13.101671",
          "text": "<@Ka> I vaguely remember some of last year's racketcon presentations were made with `#lang slideshow`, but the website only hosts the PDFs. And a quick search for `#lang slideshow` on github did not return any code results. Maybe try to ask on the mailing list? I'm sure some people have some code lying around."
        },
        {
          "user": "Augustine",
          "timestamp": "2017-05-17T18:33:28.314286",
          "text": "Here's the code for a talk I gave last year, it's not a good example of well written racket code, but it demonstrates some of the things you can do in slideshow <https://github.com/dfeltey/lwc2016/blob/master/talk/slides.rkt>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-05-17T20:29:39.443098",
          "text": "<@Theron> ok. thanks!"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-18T09:53:22.203610",
          "text": "<@Ka> I turn some of my talks into packages; links here: <http://www.eecs.northwestern.edu/~robby/talks/>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T11:08:56.106161",
          "text": "<@Ka> also <@Vincenzo> posted the source for all of his slideshow talks here: <https://github.com/mflatt/talks>"
        }
      ]
    },
    {
      "conversation_id": "19",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: Latarsha: I'm about merge TR PR 540 (from georges-duperon). I noticed that the merge button seems to default to \"squash and merge\". Is that a repo setting you set?\nEun: FWIW, it's not what I want here (squash + rebase + merge is what I want), but switching the default to \"rebase + merge\" on the racket repos would be nice.\nLatarsha: Eun yes, that's a setting\nLatarsha: I think \"squash and merge\" means \"squash + rebase + merge\"\nLatarsha: and \"rebase + merge\" doesn't squash, but sqaush + merge without rebase doesn't make sense AFAICT\nEun: Ah, found it.\nEun: Disabling merge commits for racket/racket.\nEun: Doesn't seem to be an org-wide setting. Will write a script to do all of them later.\nRosalee: Vincenzo Is it okay if I merge this: <[URL]\nVincenzo: Rosalee I left a suggestion (version and [CODE]) in the PR",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 79.05,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Latarsha",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-05-18T11:39:15.875493",
          "text": "<@Latarsha>: I'm about merge TR PR 540 (from @georges-duperon). I noticed that the merge button seems to default to \"squash and merge\". Is that a repo setting you set?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T11:39:57.892606",
          "text": "FWIW, it's not what I want here (squash + rebase + merge is what I want), but switching the default to \"rebase + merge\" on the racket repos would be nice."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T11:42:01.944942",
          "text": "<@Eun> yes, that's a setting"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T11:42:25.953331",
          "text": "I think \"squash and merge\" means \"squash + rebase + merge\""
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T11:42:53.965756",
          "text": "and \"rebase + merge\" doesn't squash, but sqaush + merge without rebase doesn't make sense AFAICT"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T11:43:06.971050",
          "text": "Ah, found it."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T11:43:13.973925",
          "text": "Disabling merge commits for racket/racket."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T11:44:44.010858",
          "text": "Doesn't seem to be an org-wide setting. Will write a script to do all of them later."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-18T12:48:58.498459",
          "text": "<@Vincenzo> Is it okay if I merge this: <https://github.com/racket/scribble/pull/111>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-18T12:58:18.700665",
          "text": "<@Rosalee> I left a suggestion (version and `history`) in the PR"
        }
      ]
    },
    {
      "conversation_id": "20",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo: Could I ask you to take a quick look at this PR? It should be brief; the changeset is very small. <[URL]\nKimbery: Someone else would probably also be able to review it, but it looks like you’re the primary maintainer for that repo?\nVincenzo: Kimbery Done. (Does anyone have a guess at why GitHub sends me email alerts only sometimes?)\nKimbery: Thank you!\nKimbery: Vincenzo: I have email notifications turned off for watched repos but turned on for threads I’ve participated in. What do your settings look at for the Notifications section in your GitHub settings?\nEun: Vincenzo: There was a point in time where not all our repos had email integration, but I fixed that a couple (few?) months ago.\nVincenzo: I have everything checked except \"Include your own updates\"\nVincenzo: I haven't yet tried unchecking \"web\"; maybe N browser tabs on GitHub confuse it?\nKimbery: I have no idea what the issue is then. ¯\\_(ツ)_/¯\nEun: Kimbery: From the git history, it looks like you've been involved with the homebrew packaging for Racket. Is that correct?\nKimbery: I think I touched it once to update it\nEun: That's more than I have. :)\nKimbery: but it was a very easy change, IIRC\nEun: Any idea about <[URL]\nEun: ?\nEun: ISTR we've had other reports, possibly about similar things, with homebrew before.\nKimbery: I’m not sure, but I could make guesses. I don’t (and never have) run Racket from a Homebrew installation\nEun: Do you know how the main person behind Racket's homebrew package is?\nKimbery: I’m afraid I have no idea.\nKimbery: Eun: It sounds like Homebrew renamed the formula to [CODE], but whatever the installation is does not properly set the relevant prefix. I’m a bit surprised by this, since the formula appears to pass the right [CODE] option.\nEun: Hmm, that does sound odd.\nKimbery: It looks like David did the initial rename of [CODE] to [CODE], so perhaps he knows more about this issue.\nEun: Kimbery: Talking to florence, it seems like there's a cask for Racket, that uses our installers. So probably best to use that, instead of the recipe.\nEun: So we may be able to just ask for the recipe to be removed. I'll post on the mailing list.\nLatarsha: Eun I think some people have expressed a preference for formulas over casks\nLatarsha: not that I understand this at all\nEun: I think most people also prefer working things to broken ones. :)\nKimbery: I think having the [CODE] installation is a good idea if we can get it working. It mentions in the description to use the cask if you want the full installation.\nEun: Yep, would be nice to get it working. But unless you're volunteering, it may be better to remove it. :)\nKimbery: Latarsha Vincenzo: I can take a look at the broken test\nKimbery: Latarsha, Vincenzo: it seems like the relevant file, [CODE] is generated from [CODE]? is that true? if so, how do I regenerate it?\nLatarsha: I think by running psyntax :wink:\nLatarsha: but we don't want to be breaking that code, do we?\nKimbery: Latarsha: [CODE] has a note that it was modified from the original version, and the offending line is a modified line that uses [CODE] [CODE] instead of parens.\nKimbery: so my guess is that modification was basically a mistake and it should be replaced with parens.\nLatarsha: ah ok\nKimbery: Latarsha: fixing [CODE] makes [CODE] pass, but it doesn’t change [CODE], so I’m not sure if that’s a problem or not.\nLatarsha: I believe the problem (based solely on the change and what I think might happen) is that psyntax.sch calls [CODE] to read in [CODE]\nLatarsha: and your change caused it to fail on the [CODE] there\nLatarsha: so we shouldn't need to change [CODE] at all\nKimbery: Latarsha: what confuses me is that [CODE] is clearly a generated file, and it also has a single pair of square brackets that appear to correspond to the single pair of square brackets in [CODE]\nLatarsha: those are read by the implementation of [CODE] inside [CODE] in [CODE] (see [CODE]) which will accept them\nKimbery: right, but I’m still left wondering how [CODE] was created in the first place\nLatarsha: probably by running psyntax on a system with different treatment of []\nLatarsha: such as racket/r5rs before your change, or chez, or something\nKimbery: what I’m really getting at is that it seems like maybe [CODE] ought to be kept in sync with [CODE] and I don’t know how to do that\nKimbery: but if you are okay with just changing [CODE] so that the test passes, I have a patch I can push\nLatarsha: That's my suggestion\nKimbery: alright, pushed\nDavid: Kimbery, Eun: My involvement with the Racket formula/cask in Homebrew is: (1) I use the cask as my main Racket installation on my development machine; (2) I sometimes update the cask when a new version of Racket is released (other times other people do it before me); and (3) a few months ago the Homebrew team wanted to remove duplicates, so they removed the Racket cask, only giving the Minimal Racket version—I asked them to bring back the Racket cask. In summary, I’m far from being a maintainer :stuck_out_tongue: That said, if there’s anything I can do to help, I’m here :slightly_smiling_face:\nEun: David: That's already more maintenance than the non-cask version gets.\nEun: Thanks for your help!\nDavid: Eun: My pleasure :slightly_smiling_face:\nKimbery: I have a complex situation where I’m stashing an identifier somewhere and then pulling it out somewhere else, and I’m getting an unbound identifier error, but there are too many moving parts for me to figure out what is going on :/\nKimbery: I’ve been trying to use Theron’s [CODE] package, but I’m not totally sure how to read its output\nLatarsha: Kimbery what does the output look like?\nKimbery: Latarsha I ended up managing to fix it, but tbh I’m not sure why it works\nKimbery: typeclasses are real complicated :no_mouth:\nTheron: Kimbery You have to use [CODE], and it indicates the scopes with sub/superscript numbers. Each Racket scope (which normally has a large 7-digit numeric identifier) is given a short and readable number starting with [CODE]. Ranges are indicated with [CODE] (3 till 9). When you are done printing the scopes of one or more ids and stx objects, you'll want to call [CODE], which prints a table associating short numbers with their long counterpart as well as other info (if it is a macro, use-site or module scope, and the module name for module scopes, i.e. the info that you get in DrRacket's macro stepper).\nTheron: I'm not automatically running [CODE], because it would clutter the output. Also, after executing [CODE] the scope counter is reset (and [CODE] therefore starts numbering scopes starting from [CODE] again), so if you want to compare two ids, you have to call [CODE], possibly across several macro invocations (I should probably add a parameter to [CODE] to ask it to not reset the counter).",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 60,
        "duration_minutes": 1754.18,
        "contains_question": true,
        "action_keywords": [
          "create",
          "fix",
          "implement",
          "need to",
          "review",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "David",
          "Eun",
          "Kimbery",
          "Latarsha",
          "Theron",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T13:14:03.041915",
          "text": "<@Vincenzo>: Could I ask you to take a quick look at this PR? It should be brief; the changeset is very small. <https://github.com/racket/r5rs/pull/2>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T13:14:55.059973",
          "text": "Someone else would probably also be able to review it, but it looks like you’re the primary maintainer for that repo?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-18T13:16:25.092004",
          "text": "<@Kimbery> Done. (Does anyone have a guess at why GitHub sends me email alerts only sometimes?)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T13:16:35.095722",
          "text": "Thank you!"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T13:18:00.125624",
          "text": "<@Vincenzo>: I have email notifications turned off for watched repos but turned on for threads I’ve participated in. What do your settings look at for the Notifications section in your GitHub settings?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T13:18:13.130369",
          "text": "<@Vincenzo>: There was a point in time where not all our repos had email integration, but I fixed that a couple (few?) months ago."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-18T13:18:57.145583",
          "text": "I have everything checked except \"Include your own updates\""
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-18T13:19:46.162360",
          "text": "I haven't yet tried unchecking \"web\"; maybe N browser tabs on GitHub confuse it?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T13:20:25.176665",
          "text": "I have no idea what the issue is then. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T15:49:24.356908",
          "text": "<@Kimbery>: From the git history, it looks like you've been involved with the homebrew packaging for Racket. Is that correct?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T15:49:39.362202",
          "text": "I think I touched it once to update it"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T15:49:53.367026",
          "text": "That's more than I have. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T15:49:58.368610",
          "text": "but it was a very easy change, IIRC"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T15:50:00.369005",
          "text": "Any idea about <https://github.com/racket/racket/issues/1680>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T15:50:02.369645",
          "text": "?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T15:50:22.376381",
          "text": "ISTR we've had other reports, possibly about similar things, with homebrew before."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T15:50:47.384653",
          "text": "I’m not sure, but I could make guesses. I don’t (and never have) run Racket from a Homebrew installation"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T15:51:38.400909",
          "text": "Do you know how the main person behind Racket's homebrew package is?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T15:52:46.422465",
          "text": "I’m afraid I have no idea."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T15:55:48.482357",
          "text": "<@Eun>: It sounds like Homebrew renamed the formula to `minimal-racket`, but whatever the installation is does not properly set the relevant prefix. I’m a bit surprised by this, since the formula appears to pass the right `--prefix` option."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T15:57:47.521600",
          "text": "Hmm, that does sound odd."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T16:00:24.574292",
          "text": "It looks like <@David> did the initial rename of `racket` to `minimal-racket`, so perhaps he knows more about this issue."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T16:05:10.670020",
          "text": "<@Kimbery>: Talking to @florence, it seems like there's a cask for Racket, that uses our installers. So probably best to use that, instead of the recipe."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T16:05:26.674671",
          "text": "So we may be able to just ask for the recipe to be removed. I'll post on the mailing list."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T16:07:38.717357",
          "text": "<@Eun> I think some people have expressed a preference for formulas over casks"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T16:07:46.720150",
          "text": "not that I understand this at all"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T16:08:09.727644",
          "text": "I think most people also prefer working things to broken ones. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T16:12:10.802833",
          "text": "I think having the `minimal-racket` installation is a good idea if we can get it working. It mentions in the description to use the cask if you want the full installation."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-18T16:13:00.818166",
          "text": "Yep, would be nice to get it working. But unless you're volunteering, it may be better to remove it. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:08:49.866293",
          "text": "<@Latarsha> <@Vincenzo>: I can take a look at the broken test"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:21:14.072349",
          "text": "<@Latarsha>, <@Vincenzo>: it seems like the relevant file, `psyntax.sch` is generated from `psyntax-input.txt`? is that true? if so, how do I regenerate it?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:26:46.165355",
          "text": "I think by running psyntax :wink:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:27:01.169264",
          "text": "but we don't want to be breaking that code, do we?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:28:14.189133",
          "text": "<@Latarsha>: `psyntax-input.txt` has a note that it was modified from the original version, and the offending line is a modified line that uses `[` `]` instead of parens."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:28:31.193975",
          "text": "so my guess is that modification was basically a mistake and it should be replaced with parens."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:28:45.197791",
          "text": "ah ok"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:41:20.398523",
          "text": "<@Latarsha>: fixing `psyntax-input.txt` makes `raco test -l tests/racket/benchmarks/common/psyntax` pass, but it doesn’t change `psyntax.sch`, so I’m not sure if that’s a problem or not."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:42:08.410486",
          "text": "I believe the problem (based solely on the change and what I think might happen) is that psyntax.sch calls `read` to read in `psyntax-input.sch`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:42:21.413612",
          "text": "and your change caused it to fail on the `[]` there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:42:38.417748",
          "text": "so we shouldn't need to change `psyntax.sch` at all"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:51:33.550757",
          "text": "<@Latarsha>: what confuses me is that `psyntax.sch` is clearly a generated file, and it also has a single pair of square brackets that appear to correspond to the single pair of square brackets in `psyntax-input.txt`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:52:35.566172",
          "text": "those are read by the implementation of `read` inside `include` in `scheme/include` (see `psyntax.rkt`) which will accept them"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:53:03.572995",
          "text": "right, but I’m still left wondering how `psyntax.sch` was created in the first place"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:55:40.609648",
          "text": "probably by running psyntax on a system with different treatment of []"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:55:58.614287",
          "text": "such as racket/r5rs before your change, or chez, or something"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:56:49.626456",
          "text": "what I’m really getting at is that it seems like maybe `psyntax.sch` ought to be kept in sync with `psyntax-input.txt` and I don’t know how to do that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:57:05.630203",
          "text": "but if you are okay with just changing `psyntax-input.txt` so that the test passes, I have a patch I can push"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-18T17:58:11.645926",
          "text": "That's my suggestion"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-18T17:59:01.658241",
          "text": "alright, pushed"
        },
        {
          "user": "David",
          "timestamp": "2017-05-19T12:47:20.160100",
          "text": "<@Kimbery>, <@Eun>: My involvement with the Racket formula/cask in Homebrew is: (1) I use the cask as my main Racket installation on my development machine; (2) I sometimes update the cask when a new version of Racket is released (other times other people do it before me); and (3) a few months ago the Homebrew team wanted to remove duplicates, so they removed the Racket cask, only giving the Minimal Racket version—I asked them to bring back the Racket cask.\n\nIn summary, I’m far from being a maintainer :stuck_out_tongue:\n\nThat said, if there’s anything I can do to help, I’m here :slightly_smiling_face:"
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-19T12:56:58.347164",
          "text": "<@David>: That's already more maintenance than the non-cask version gets."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-19T12:57:02.348443",
          "text": "Thanks for your help!"
        },
        {
          "user": "David",
          "timestamp": "2017-05-19T13:14:55.701087",
          "text": "<@Eun>: My pleasure :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-19T16:19:31.209189",
          "text": "I have a complex situation where I’m stashing an identifier somewhere and then pulling it out somewhere else, and I’m getting an unbound identifier error, but there are too many moving parts for me to figure out what is going on :/"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-19T16:20:17.222280",
          "text": "I’ve been trying to use <@Theron>’s `debug-scopes` package, but I’m not totally sure how to read its output"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-19T16:47:48.672374",
          "text": "<@Kimbery> what does the output look like?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-19T16:48:21.680841",
          "text": "<@Latarsha> I ended up managing to fix it, but tbh I’m not sure why it works"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-19T16:49:45.702330",
          "text": "typeclasses are real complicated :no_mouth:"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-19T18:23:57.884175",
          "text": "<@Kimbery> You have to use `(displayln (+scopes id))`, and it indicates the scopes with sub/superscript numbers. Each Racket scope (which normally has a large 7-digit numeric identifier) is given a short and readable number starting with `0`. Ranges are indicated with `³˙˙⁹` (3 till 9). When you are done printing the scopes of one or more ids and stx objects, you'll want to call `(print-full-scopes)`, which prints a table associating short numbers with their long counterpart as well as other info (if it is a macro, use-site or module scope, and the module name for module scopes, i.e. the info that you get in DrRacket's macro stepper)."
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-19T18:28:13.922833",
          "text": "I'm not automatically running `(print-full-scopes)`, because it would clutter the output. Also, after executing `(print-full-scopes)` the scope counter is reset (and `+scopes` therefore starts numbering scopes starting from `0` again), so if you want to compare two ids, you have to call `(displayln (+scopes id1)) (displayln (+scopes id2)) (print-full-scopes)`, possibly across several macro invocations (I should probably add a parameter to `print-full-scopes` to ask it to not reset the counter)."
        }
      ]
    },
    {
      "conversation_id": "21",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: Tina Latarsha thanks for the links to slideshow talks. I gave a successful talk last night with slideshow (not *on* racket), but wasn't quite happy with the way the slides looked. Was happy with the tool itself though.\nKa: OK, so I guess what I didn't realize about slideshow, but now do, is that it doesn't do much more than create the UI and handle keyboard events, and provide some very naive things. Basically, it gives you the minimal scaffolding in order to build custom slideshows with the whole power of pict.\nKa: now that I have that understanding, it's even better.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 8.63,
        "contains_question": false,
        "action_keywords": [
          "build",
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-05-18T18:51:22.284887",
          "text": "<@Tina> <@Latarsha> thanks for the links to slideshow talks. I gave a successful talk last night with slideshow (not *on* racket), but wasn't quite happy with the way the slides looked. Was happy with the tool itself though."
        },
        {
          "user": "Ka",
          "timestamp": "2017-05-18T18:59:23.369874",
          "text": "OK, so I guess what I didn't realize about slideshow, but now do, is that it doesn't do much more than create the UI and handle keyboard events, and provide some very naive things. Basically, it gives you the minimal scaffolding in order to build custom slideshows with the whole power of pict."
        },
        {
          "user": "Ka",
          "timestamp": "2017-05-18T19:00:00.376308",
          "text": "now that I have that understanding, it's even better."
        }
      ]
    },
    {
      "conversation_id": "22",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: Vincenzo can you look at the \"Last,First parsing\" PR when you have time: <[URL]\nVincenzo: Nelson That's Stefani's code, so he may have an opinion; I have no objections\nNelson: ok thank you",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 26.27,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-05-19T16:14:19.123570",
          "text": "<@Vincenzo> can you look at the \"Last,First parsing\" PR when you have time: <https://github.com/racket/scribble/pull/92>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-19T16:40:08.549551",
          "text": "<@Nelson> That's <@Stefani>'s code, so he may have an opinion; I have no objections"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-05-19T16:40:35.557138",
          "text": "ok thank you"
        }
      ]
    },
    {
      "conversation_id": "23",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tina: Niesha just noticed: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Tina",
          "timestamp": "2017-05-22T12:34:34.026088",
          "text": "<@Niesha> just noticed: <https://plt.eecs.northwestern.edu/pkg-build/server/built/deps/debug.txt>"
        }
      ]
    },
    {
      "conversation_id": "24",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: Natosha hi Ryan, I would like to contribute a pull request in the near future to improve the [CODE] error message being returned from [CODE] package when working with Sqlite3 databases. My changes involve the [CODE] and [CODE] files in [CODE] directory in the main racket repository. Since those files aren't in the [CODE] repository, where would be the appropriate place to put tests in? My guess is the [CODE] repository but wasn't sure.\nEun: Jacob: I'm not ryanc, but I'd assume that would be the place: <[URL]\nJacob: that was my first thought, I'd need to submit separate pull requests against the db repo and the racket repo, is that fine?\nLatarsha: Jacob yes, that's fine\nJacob: ok thank you\nNatosha: Jacob, confirming stamourv's and samth's answers\nLatarsha: Natosha would it be reasonable to disable the 4 failing tests here: <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 56.04,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Jacob",
          "Latarsha",
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-05-23T14:28:55.983452",
          "text": "<@Natosha> hi Ryan, I would like to contribute a pull request in the near future to improve the `'multiple statements given'` error message being returned from `db` package when working with Sqlite3 databases. My changes involve the `connection.rkt` and `ffi.rkt` files in `collects/db/private/sqlite3` directory in the main racket repository. Since those files aren't in the `db` repository, where would be the appropriate place to put tests in? My guess is the `db` repository but wasn't sure."
        },
        {
          "user": "Eun",
          "timestamp": "2017-05-23T14:30:34.023606",
          "text": "<@Jacob>: I'm not ryanc, but I'd assume that would be the place: <https://github.com/racket/db/tree/master/db-test/tests/db>"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-05-23T14:32:21.065446",
          "text": "that was my first thought, I'd need to submit separate pull requests against the db repo and the racket repo, is that fine?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T14:32:49.076379",
          "text": "<@Jacob> yes, that's fine"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-05-23T14:34:41.119037",
          "text": "ok thank you"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-05-23T15:06:55.844908",
          "text": "<@Jacob>, confirming stamourv's and samth's answers"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T15:24:58.215742",
          "text": "<@Natosha> would it be reasonable to disable the 4 failing tests here: <http://drdr.racket-lang.org/40417/racket/share/pkgs/macro-debugger/tests/macro-debugger/all-tests.rkt>"
        }
      ]
    },
    {
      "conversation_id": "25",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stefani: mflatt: I get a really weird error building old versions of Racket on Ubuntu 16.04 --- <[URL] --- I've got it on 5.92, 5.93, 6.0 and 6.3\nStefani: the same error is here --- <[URL]\nStefani: so the problem is that back then we used a different compiler, so there wasn't a problem. very weird!\nVincenzo: Stefani the xform step works by knowing that various functions are predefined and won't trigger a GC; that approach interacts badly with C headers that expand things that look like functions in different ways, since xform is looking at preprocessed input\nStefani: Ya, I think I understand the problem. I'm thinking about how to effectively warn users that old versions are broken because GCC isn't backwards compatible. It's a weird problem.\nVincenzo: probably you just want to annotate the definitions of [CODE] and [CODE] with [CODE], which goes after the argument list and before the function's opening [CODE]\nVincenzo: Oh – you're not just looking for a way to make the compile go through?\nStefani: mflatt: correct, i know how to make it work. i'm thinking about what to do about people that email saying all the old versions are broken because they are trying to build on a modern linux distribution.\nVincenzo: I think we don't get those requests because old software generally doesn't build",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 9,
        "duration_minutes": 106.79,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Stefani",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Stefani",
          "timestamp": "2017-05-23T15:06:39.839037",
          "text": "mflatt: I get a really weird error building old versions of Racket on Ubuntu 16.04 --- <https://gist.github.com/jeapostrophe/b8f7256657d490f83f5a453db049bf5a> --- I've got it on 5.92, 5.93, 6.0 and 6.3"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-23T15:07:29.856797",
          "text": "the same error is here --- <https://github.com/racket/racket/issues/1222>"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-23T15:08:24.876403",
          "text": "so the problem is that back then we used a different compiler, so there wasn't a problem. very weird!"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-23T15:25:52.234582",
          "text": "<@Stefani> the xform step works by knowing that various functions are predefined and won't trigger a GC; that approach interacts badly with C headers that expand things that look like functions in different ways, since xform is looking at preprocessed input"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-23T15:26:53.255549",
          "text": "Ya, I think I understand the problem. I'm thinking about how to effectively warn users that old versions are broken because GCC isn't backwards compatible. It's a weird problem."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-23T15:27:41.272225",
          "text": "probably you just want to annotate the definitions of `mz_long_double_eqv` and `double_eqv` with `XFORM_SKIP_PROC`, which goes after the argument list and before the function's opening `{`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-23T15:28:15.284137",
          "text": "Oh – you're not just looking for a way to make the compile go through?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-23T16:47:20.955041",
          "text": "mflatt: correct, i know how to make it work. i'm thinking about what to do about people that email saying all the old versions are broken because they are trying to build on a modern linux distribution."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-23T16:53:27.081609",
          "text": "I think we don't get those requests because old software generally doesn't build"
        }
      ]
    },
    {
      "conversation_id": "26",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I have a sort of diabolical abuse of the macroexpander that produces an unbound identifier error, and I don’t understand why. Here’s a pasterack link, though pasterack produces a different error: <[URL]\nKimbery: The actual error I get when really running the program is this: [CODE_BLOCK]\nKimbery: I don’t understand why the identifier is unbound, though. I think I must be missing something about how scopes get introduced in this sort of situation, but I don’t know how to debug this problem.\nKimbery: Vincenzo or Latarsha, might either of you be able to help me with this? I realize this program is pretty bizarre, but yes, it is a reduction of a real (admittedly quite evil ;)) thing I am trying to do in Hackett.\nLatarsha: Kimbery you seem to have [CODE] where you mean [CODE]\nKimbery: Yeah, I noticed that, but it doesn’t affect the program.\nKimbery: Here’s a fixed paste: <[URL]\nLatarsha: I don't really understand what's going on there, but it looks like the usual issue where you communicate the identifier behind the back of the macro expander and thus it doesn't have the right scope\nKimbery: Yeah. I’m just not sure in this case how to arrange for the right scope, or even what scope is getting added or removed.\nKimbery: I think that to do this “right” might require some additional cooperation from the macroexpander, so right now it’s pretty hacky. :)\nLatarsha: the problem is that when you expand the [CODE] that [CODE] generates, it adds a scope to the binder and to the body\nLatarsha: but that isn't there on the reference, since the reference is hidden from the expander in a parameter\nKimbery: that makes sense. so I might be able to expand the [CODE], then stash the identifier with the extra scope on it.\nLatarsha: yes\nKimbery: hmm, that gives me an [CODE] error, though I could be doing something else wrong.\nLatarsha: really you want to put the identifier in some macro in the body of the lambda, and arrange for that macro to put it in the parameter\nKimbery: yeah. I should probably explain the actual motivation behind this whole thing, since it’s pretty gross and there might be a better way.\nVincenzo: Kimbery Like this? [CODE_BLOCK]\nKimbery: Vincenzo: Thanks, that works in that case, but it doesn’t seem to work in my real situation. I’ll fiddle with it a bit and see if I can make it work.\nKimbery: All this is actually part of typeclass dictionary elaboration. I need to perform a sort of “delimited expansion” where I leave placeholders in the expansion where typeclass dictionaries will be inserted later. However, I can’t call [CODE] with a stop-list, since that won’t recursively expand.\nLatarsha: right, what Vincenzo said, although I have often wrapped that pattern in a macro called something like [CODE]\nKimbery: Yep, that seems to have worked. Thanks Latarsha and Vincenzo. I think this [CODE] abuse is probably not the best solution to what I’m doing, but I admit I am not 100% sure what I’m doing, and it seems to sort of work so far. :stuck_out_tongue:\nKimbery: I think, with those changes, I have working typeclasses in Racket. :)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 23,
        "duration_minutes": 36.03,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "must",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:25:06.706282",
          "text": "I have a sort of diabolical abuse of the macroexpander that produces an unbound identifier error, and I don’t understand why. Here’s a pasterack link, though pasterack produces a different error: <http://pasterack.org/pastes/92495>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:25:24.711808",
          "text": "The actual error I get when really running the program is this:\n```\nthe-binding2: unbound identifier;\n also, no #%top syntax transformer is bound\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:26:23.729071",
          "text": "I don’t understand why the identifier is unbound, though. I think I must be missing something about how scopes get introduced in this sort of situation, but I don’t know how to debug this problem."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:27:55.756077",
          "text": "<@Vincenzo> or <@Latarsha>, might either of you be able to help me with this? I realize this program is pretty bizarre, but yes, it is a reduction of a real (admittedly quite evil ;)) thing I am trying to do in Hackett."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T17:28:08.759945",
          "text": "<@Kimbery> you seem to have `#@plain-app` where you mean `#%plain-app`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:28:20.763593",
          "text": "Yeah, I noticed that, but it doesn’t affect the program."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:28:49.772161",
          "text": "Here’s a fixed paste: <http://pasterack.org/pastes/48560>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T17:30:46.808338",
          "text": "I don't really understand what's going on there, but it looks like the usual issue where you communicate the identifier behind the back of the macro expander and thus it doesn't have the right scope"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:31:45.825786",
          "text": "Yeah. I’m just not sure in this case how to arrange for the right scope, or even what scope is getting added or removed."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:32:47.843513",
          "text": "I think that to do this “right” might require some additional cooperation from the macroexpander, so right now it’s pretty hacky. :)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T17:34:42.876091",
          "text": "the problem is that when you expand the `lambda` that `bind` generates, it adds a scope to the binder and to the body"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T17:35:02.881669",
          "text": "but that isn't there on the reference, since the reference is hidden from the expander in a parameter"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:35:46.893947",
          "text": "that makes sense. so I might be able to expand the `lambda`, then stash the identifier with the extra scope on it."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T17:36:09.900450",
          "text": "yes"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:37:26.921598",
          "text": "hmm, that gives me an `identifier used out of context` error, though I could be doing something else wrong."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T17:38:07.932565",
          "text": "really you want to put the identifier in some macro in the body of the lambda, and arrange for that macro to put it in the parameter"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:38:50.944411",
          "text": "yeah. I should probably explain the actual motivation behind this whole thing, since it’s pretty gross and there might be a better way."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-23T17:39:36.956906",
          "text": "<@Kimbery> Like this?\n```\n      [(#%plain-app @%bind-id ~! e:expr)\n       (let ([id-to-bind (generate-temporary 'the-binding)])\n         (exp #`(λ (#,id-to-bind)\n                  (let-syntax ([result-transformer\n                                (make-variable-like-transformer\n                                 (parameterize ([current-id #'#,id-to-bind])\n                                   (exp (walk+expand #'e))))])\n                    result-transformer))))]\n\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:43:32.021834",
          "text": "<@Vincenzo>: Thanks, that works in that case, but it doesn’t seem to work in my real situation. I’ll fiddle with it a bit and see if I can make it work."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:43:52.027075",
          "text": "All this is actually part of typeclass dictionary elaboration. I need to perform a sort of “delimited expansion” where I leave placeholders in the expansion where typeclass dictionaries will be inserted later. However, I can’t call `local-expand` with a stop-list, since that won’t recursively expand."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-23T17:44:03.029870",
          "text": "right, what <@Vincenzo> said, although I have often wrapped that pattern in a macro called something like `(put-in-parameter id-to-bind expr)`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T17:48:30.102690",
          "text": "Yep, that seems to have worked. Thanks <@Latarsha> and <@Vincenzo>. I think this `local-expand` abuse is probably not the best solution to what I’m doing, but I admit I am not 100% sure what I’m doing, and it seems to sort of work so far. :stuck_out_tongue:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-23T18:01:08.305054",
          "text": "I think, with those changes, I have working typeclasses in Racket. :)"
        }
      ]
    },
    {
      "conversation_id": "27",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stefani: mflatt: I have a process that uses a lot of memory (more than system has) and I would expect it to give me an out of memory error. Instead, I get [CODE]`unmap failed: 7fda46834000, 16384, 12 [x100]\nStefani: mprotect failed: 7fdb09ea0000, 16384, 1, 12\nStefani: Seg fault (internal error during gc) at 0x7fdb09ea16c0\nStefani: SIGSEGV SEGV_ACCERR SI_CODE 2 fault on 0x7fdb09ea16c0[CODE]`\nStefani: Why does racket not just abort when the unmap/mprotect fail? (As an aside, when I run without JIT, I don't get the segfault, but it appears to run forever.)\nStefani: If I increase the number of mmaps, with: \"sysctl -w vm.max_map_count=131060\", then I run out of memory (as I would otherwise expect). [Reading the manual suggest that when you unmap in the middle of a region, then it has to make two, so munmap consumes resources.]\nVincenzo: Stefani It would make sense to abort if [CODE] or [CODE] fails; I guess the current behavior is misguided optimism\nStefani: mflatt: k, i'll submit a pull request. I think the mprotect can be particular bad because it can cause the write barrier to not install.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 165.21,
        "contains_question": true,
        "action_keywords": [
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Stefani",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Stefani",
          "timestamp": "2017-05-24T14:03:52.029529",
          "text": "mflatt: I have a process that uses a lot of memory (more than system has) and I would expect it to give me an out of memory error. Instead, I get ```unmap failed: 7fda46834000, 16384, 12 [x100]"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-24T14:03:52.029537",
          "text": "mprotect failed: 7fdb09ea0000, 16384, 1, 12"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-24T14:03:52.029541",
          "text": "Seg fault (internal error during gc) at 0x7fdb09ea16c0"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-24T14:03:52.029542",
          "text": "SIGSEGV SEGV_ACCERR SI_CODE 2 fault on 0x7fdb09ea16c0```"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-24T14:09:27.157988",
          "text": "Why does racket not just abort when the unmap/mprotect fail? (As an aside, when I run without JIT, I don't get the segfault, but it appears to run forever.)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-24T14:10:41.185267",
          "text": "If I increase the number of mmaps, with: \"sysctl -w vm.max_map_count=131060\", then I run out of memory (as I would otherwise expect). [Reading the manual suggest that when you unmap in the middle of a region, then it has to make two, so munmap consumes resources.]"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-24T14:38:23.816388",
          "text": "<@Stefani> It would make sense to abort if `munmap` or `mprotect` fails; I guess the current behavior is misguided optimism"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-05-24T16:49:04.585230",
          "text": "mflatt: k, i'll submit a pull request. I think the mprotect can be particular bad because it can cause the write barrier to not install."
        }
      ]
    },
    {
      "conversation_id": "28",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo, Latarsha, Tina: Is there a recommended way to include a piece of syntax in the expansion of a macro for the purposes of letting DrRacket pick up origin and disappeared-use/binding properties without actually impacting the program in any other way?\nKimbery: Right now I am producing a bunch of pieces of syntax that are basically nested invocations of [CODE], so I end up with something silly like [CODE].\nKimbery: But I am not sure if Racket guarantees that those will get optimized away or not.\nTina: I think they'll be gone. You can use raco decompile to check.\nLatarsha: Kimbery usually I use [CODE] but I'm confident [CODE] works too\nKimbery: ok, thanks. checking with decompile is a good idea.\nTina: Kimbery racket subscribes to the macro writers bill of rights iiuc, so you can consider not eliminating things like that to be bugs, I believe.\nChantelle: Tina what do you mean \"macro writers bill of rights\"? are you using that phrase as a metaphor or is there some document somewhere that says what macro writers can expect racket to handle gracefully when it comes to macro expansion?\nTina: It is by Kent Dybvig\nKimbery: there’s a talk somewhere on youtube about it IIRC\nKimbery: though tbh I remember finding that talk a little vague\nCorey: Somewhat specific starting at 13:00 <[URL]\nKimbery: I’m doing a lot of really weird things with syntax, and I have run into a [CODE] error, which unfortunately lists [CODE] as its source location. Is there any good way to debug these sorts of errors?\nKimbery: I remember running into them a while back, and I had no idea how to figure out where they were coming from in a large program.\nKimbery: Okay, now I’m even more confused. The error goes away if I replace a use of [CODE] with [CODE]. Does [CODE] do something special I don’t know about related to taints/dye packs/other cute names?",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 15,
        "duration_minutes": 1430.85,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Kimbery",
          "Latarsha",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-05-25T00:56:58.513223",
          "text": "<@Vincenzo>, <@Latarsha>, <@Tina>: Is there a recommended way to include a piece of syntax in the expansion of a macro for the purposes of letting DrRacket pick up origin and disappeared-use/binding properties without actually impacting the program in any other way?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-25T00:58:14.521755",
          "text": "Right now I am producing a bunch of pieces of syntax that are basically nested invocations of `void`, so I end up with something silly like `(let () (void (void) (void (void) (void)))) my-real-expression)`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-25T00:58:50.525656",
          "text": "But I am not sure if Racket guarantees that those will get optimized away or not."
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-25T06:46:15.950439",
          "text": "I think they'll be gone. You can use raco decompile to check. "
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-25T09:38:29.201770",
          "text": "<@Kimbery> usually I use `(quote blah)` but I'm confident `void` works too"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-25T11:27:54.727730",
          "text": "ok, thanks. checking with decompile is a good idea."
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-25T16:10:28.025759",
          "text": "<@Kimbery> racket subscribes to the macro writers bill of rights iiuc, so you can consider not eliminating things like that to be bugs, I believe."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-05-25T19:23:17.079090",
          "text": "<@Tina> what do you mean \"macro writers bill of rights\"? are you using that phrase as a metaphor or is there some document somewhere that says what macro writers can expect racket to handle gracefully when it comes to macro expansion?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-05-25T19:23:43.083234",
          "text": "It is by Kent Dybvig"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-25T19:23:54.085196",
          "text": "there’s a talk somewhere on youtube about it IIRC"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-25T19:24:07.087301",
          "text": "though tbh I remember finding that talk a little vague"
        },
        {
          "user": "Corey",
          "timestamp": "2017-05-25T21:46:12.259520",
          "text": "Somewhat specific starting at 13:00 <https://youtu.be/LIEX3tUliHw?t=13m>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-26T00:34:54.412179",
          "text": "I’m doing a lot of really weird things with syntax, and I have run into a `quote-syntax: cannot use identifier tainted by macro transformation` error, which unfortunately lists `racket/private/stxcase` as its source location. Is there any good way to debug these sorts of errors?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-26T00:35:12.414151",
          "text": "I remember running into them a while back, and I had no idea how to figure out where they were coming from in a large program."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-26T00:47:49.491324",
          "text": "Okay, now I’m even more confused. The error goes away if I replace a use of `syntax` with `quote-syntax`. Does `syntax` do something special I don’t know about related to taints/dye packs/other cute names?"
        }
      ]
    },
    {
      "conversation_id": "29",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Theron: Vincenzo user mrm on IRC asked yesterday if there were any explanation of how linklets work. Do you have something within hyperlink's reach ? I had a quick look at your racket7 repo, but didn't see any obvious pointers.\nVincenzo: Theron I guess this is as close as it gets to web-accessible: <[URL]\nTheron: Vincenzo Thanks! I had explicitly searched for files containing \"linklet\" in the repo, and somehow managed to miss that one :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 32.85,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Theron",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Theron",
          "timestamp": "2017-05-28T11:46:58.498445",
          "text": "<@Vincenzo> user mrm on IRC asked yesterday if there were any explanation of how linklets work. Do you have something within hyperlink's reach ? I had a quick look at your racket7 repo, but didn't see any obvious pointers."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-28T12:18:16.591690",
          "text": "<@Theron> I guess this is as close as it gets to web-accessible: <https://github.com/racket/racket7/blob/master/pkgs/racket-doc/scribblings/reference/linklet.scrbl>"
        },
        {
          "user": "Theron",
          "timestamp": "2017-05-28T12:19:49.596113",
          "text": "<@Vincenzo> Thanks! I had explicitly searched for files containing \"linklet\" in the repo, and somehow managed to miss that one :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "30",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Does anyone know how to ‘collapse’ the padding in two cstructs in the FFI?\nRosalee: Like, I have a struct with a lot of fields, and in the middle, I have for a list size, followed by a pointer to that list.\nRosalee: I want to make a ctype that will give me a safe list given those two values.\nRosalee: And I can do that in another cstruct, but because the padding is now larger, it messes up the offsets for the rest of the struct.\nRosalee: So, is there any way I can insert a cstruct into another cstruct such that it takes the paddings of the element in the inner cstruct?\nRosalee: Either way, thank you.\nVincenzo: Rosalee You be able to achieve the effect you want by declaring [CODE]\nRosalee: Okay cool. In which cstruct?\nRosalee: Like, it seems like I’d need to set it in the outer one, and then manually calculate the allignment for the rest of the struct, is tht correct Vincenzo ?\nVincenzo: I was thinking that you'd set it for the inner one\nRosalee: Oh, okay. In that case the docs kind of confused me what it does. As I thought you attached it to specific fields?\nRosalee: (I mean, I know you can attach it to the whole struct, but in this case, I only want one field to be alligned differently.)\nRosalee: Oh, I see what you mean, [CODE] worked, thank you Vincenzo\nRosalee: Vincenzo Actually, after thinking about it a bit more, I don’t think [CODE] would work, or any ‘alignment’ on the inside struct would be good enough.\nRosalee: Because this is going to be context sensitive on the placement of the outside struct and its alignment.\nRosalee: Like, if I had: [CODE_BLOCK], I would want it to be compacted (on 32-bit x86 for simplicity) as: [CODE_BLOCK]\nRosalee: (Where I have specified each byte in [CODE])\nRosalee: But when I do [CODE] on the inner struct, the layout is going to be: [CODE_BLOCK] which removes the padding.\nRosalee: Any thoughts Vincenzo ?\nVincenzo: Rosalee I think you'd have to add the padding back manually in that case. There's not much in between \"do the default thing\" and \"let me control layout completely\".\nRosalee: Vincenzo Ah fair. Well thank you.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 21,
        "duration_minutes": 333.78,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "fix",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:24:17.608939",
          "text": "Does anyone know how to ‘collapse’ the padding in two cstructs in the FFI?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:24:59.610954",
          "text": "Like, I have a struct with a lot of fields, and in the middle, I have for a list size, followed by a pointer to that list."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:25:24.612171",
          "text": "I want to make a ctype that will give me a safe list given those two values."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:26:02.613857",
          "text": "And I can do that in another cstruct, but because the padding is now larger, it messes up the offsets for the rest of the struct."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:26:30.615100",
          "text": "So, is there any way I can insert a cstruct into another cstruct such that it takes the paddings of the element in the inner cstruct?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:26:37.615441",
          "text": "Either way, thank you."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-28T12:36:35.643595",
          "text": "<@Rosalee> You be able to achieve the effect you want by declaring `#:alignment`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:37:00.644658",
          "text": "Okay cool. In which cstruct?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:38:17.648289",
          "text": "Like, it seems like I’d need to set it in the outer one, and then manually calculate the allignment for the rest of the struct, is tht correct <@Vincenzo> ?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-28T12:39:38.652149",
          "text": "I was thinking that you'd set it for the inner one"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:47:42.674049",
          "text": "Oh, okay. In that case the docs kind of confused me what it does. As I thought you attached it to specific fields?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:48:16.675601",
          "text": "(I mean, I know you can attach it to the whole struct, but in this case, I only want one field to be alligned differently.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T12:49:10.678081",
          "text": "Oh, I see what you mean, `#:alignment 1` worked, thank you <@Vincenzo>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T17:33:04.463167",
          "text": "<@Vincenzo> Actually, after thinking about it a bit more, I don’t think `#:alignment 1` would work, or any ‘alignment’ on the inside struct would be good enough."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T17:33:28.464261",
          "text": "Because this is going to be context sensitive on the placement of the outside struct and its alignment."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T17:35:27.469491",
          "text": "Like, if I had:\n```\nstruct{\nchar prefix,\nchar count,\nvoid *data\n}\n```,\nI would want it to be compacted (on 32-bit x86 for simplicity) as:\n```\n[prefix][count][padding][padding][padding][data][data][data][data]\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T17:35:56.470651",
          "text": "(Where I have specified each byte in `[...]`)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T17:37:04.473474",
          "text": "But when I do `#:alignment 1` on the inner struct, the layout is going to be:\n\n```\n[prefix][count][data][data][data][data]\n```\n\nwhich removes the padding."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T17:37:09.473663",
          "text": "Any thoughts <@Vincenzo> ?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-05-28T17:55:29.519362",
          "text": "<@Rosalee> I think you'd have to add the padding back manually in that case. There's not much in between \"do the default thing\" and \"let me control layout completely\"."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-05-28T17:58:04.525656",
          "text": "<@Vincenzo> Ah fair. Well thank you."
        }
      ]
    },
    {
      "conversation_id": "31",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: It looks like the slack irc bridge is down again\nLatarsha: Stefani pkgd appears to be down\nKimbery: Aracely: ping\nLatarsha: hi Whitney",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 1395.4,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-05-29T18:16:18.295135",
          "text": "It looks like the slack irc bridge is down again"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-30T11:17:29.655179",
          "text": "<@Stefani> pkgd appears to be down"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T16:50:22.505898",
          "text": "<@Aracely>: ping"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-30T17:31:42.225890",
          "text": "hi <@Whitney>"
        }
      ]
    },
    {
      "conversation_id": "32",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: ,doc fails with (in a plain repl in OSX’s terminal.app): 0:131: execution error: “file:///MyApplications/dev/lisp/Racket/doc/reference/strings.html#(def._((lib._racket%2Fstring..rkt)._string-trim))” doesn’t understand the “open location” message. (-1708)\nGeorgeanna: running [CODE] opens just fine\nGeorgeanna: (except that it ignores the anchor, but that’s separate)\nGeorgeanna: any hints? or suggestions where to poke?\nKimbery: Georgeanna: what version of racket is this on?\nGeorgeanna: sorry. 6.9 and latest osx too\nKimbery: stable, right? not a snapshot?\nKimbery: I ask because I know that code recently changed, but I don’t think it made it into the release\nGeorgeanna: correct. I’m not leet :stuck_out_tongue:\nKimbery: maybe try a snapshot and see if you get the same error? the answer would be informative, at least.\nCorey: Georgeanna I see you switched here from [CODE] on this so I will, too. :slightly_smiling_face: Found the thing this reminded me of: <[URL]\nGeorgeanna: hrm… left side of nightlies (6.9.0.4) or right side (current)?\nGeorgeanna: and wow… can I check this with minimal? 90% smaller and I’m in a cafe\nKimbery: Georgeanna: you can probably check it with minimal, but you’ll want to use [CODE] instead of [CODE], since the latter is not shipped with minimal racket, and it ends up pulling in a lot of dependencies\nKimbery: (see <[URL] )\nKimbery: also, 6.9.0.4 and current are the same version, the latter is just a stable alias for things like CI scripts\nGeorgeanna: is there a way to isolate this? in ruby we can set GEM_HOME to create a temporary repository that you can later throw away\nGeorgeanna: moot point: [CODE_BLOCK]\nKimbery: I mean the module [CODE]. it’s in the [CODE] package; you won’t have to install it.\nKimbery: also, the snapshot should maintain its own set of packages.\nGeorgeanna: I can’t figure this out… ¯\\_(ツ)_/¯\nGeorgeanna: [CODE_BLOCK]\nKimbery: oh, right. apparently that requires the [CODE] package to be installed, which admittedly makes sense.\nKimbery: (since it’s opening the docs)\nGeorgeanna: yeah. as far as I can tell, minimal is too minimal for this :slightly_smiling_face:\nKimbery: but it’s [CODE] that will bring in the whole universe of dependencies. :stuck_out_tongue:\nKimbery: since [CODE] currently links to other docs, including the web server docs… which means you’ll end up installing the web server (and a whole bunch of other packages) if you “just” install the docs.\nGeorgeanna: yeah… I’ll just download the minimal+gui+docs package. it’s 80mb (instead of 9!)… it’ll just be slower on this cafe network\nKimbery: that’s probably the safest bet, yes\nGeorgeanna: maybe it should have a more descriptive name than “gui-6.9.0.4-x86_64-macosx.dmg” … maybe “racket” should be in there somewhere. :stuck_out_tongue:\nGeorgeanna: compared to: min-racket-6.9.0.4-x86_64-macosx.dmg\nGeorgeanna: ok. confirmed that on 6.9.0.4 that [CODE] is fixed. I wonder if I should steal the patch and try to compile it into my current version\nKimbery: Georgeanna: Make sure you try running the snapshot from outside of your home directory (that is, the snapshot distribution itself should be placed outside your home directory). IIUC, the issues around that feature stem from very odd macOS behavior around opening file URLs in/outside of your home directory.\nKimbery: If you had the snapshot in your home directory and the release outside of it, you might get false positives.\nGeorgeanna: I ran it straight out of the disk image\nKimbery: that’s probably safe then\nGeorgeanna: is there a bar-chart plot type somewhere? I’m trying to hack it into discrete-histogram and it’s screwing up w/ my x-axis.\nGeorgeanna: ah. it ignores negative values even if you set [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 38,
        "duration_minutes": 62.19,
        "contains_question": true,
        "action_keywords": [
          "create",
          "fix",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Georgeanna",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:26:50.890918",
          "text": ",doc fails with (in a plain repl in OSX’s terminal.app): 0:131: execution error: “file:///MyApplications/dev/lisp/Racket/doc/reference/strings.html#(def._((lib._racket%2Fstring..rkt)._string-trim))” doesn’t understand the “open location” message. (-1708)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:27:01.892530",
          "text": "running `open $ABOVE_URL` opens just fine"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:27:13.894493",
          "text": "(except that it ignores the anchor, but that’s separate)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:27:24.896119",
          "text": "any hints? or suggestions where to poke?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:29:24.914515",
          "text": "<@Georgeanna>: what version of racket is this on?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:29:38.916629",
          "text": "sorry. 6.9 and latest osx too"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:30:08.921598",
          "text": "stable, right? not a snapshot?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:30:18.923209",
          "text": "I ask because I know that code recently changed, but I don’t think it made it into the release"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:30:23.923948",
          "text": "correct. I’m not leet :stuck_out_tongue:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:30:46.927589",
          "text": "maybe try a snapshot and see if you get the same error? the answer would be informative, at least."
        },
        {
          "user": "Corey",
          "timestamp": "2017-05-30T19:34:22.961244",
          "text": "<@Georgeanna> I see you switched here from `#racket` on this so I will, too. :slightly_smiling_face:  Found the thing this reminded me of: <https://groups.google.com/d/msg/racket-users/Jw3jMB2viCk/ggJbXHu5BQAJ>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:35:47.973967",
          "text": "hrm… left side of nightlies (6.9.0.4) or right side (current)?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:36:35.981095",
          "text": "and wow… can I check this with minimal? 90% smaller and I’m in a cafe"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:38:57.002067",
          "text": "<@Georgeanna>: you can probably check it with minimal, but you’ll want to use `racket/help` instead of `xrepl`, since the latter is not shipped with minimal racket, and it ends up pulling in a lot of dependencies"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:39:13.004478",
          "text": "(see <https://github.com/racket/racket/issues/1465> )"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:40:32.016227",
          "text": "also, 6.9.0.4 and current are the same version, the latter is just a stable alias for things like CI scripts"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:57:51.165626",
          "text": "is there a way to isolate this? in ruby we can set GEM_HOME to create a temporary repository that you can later throw away"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T19:58:27.170753",
          "text": "moot point:\n\n```\n10058 % ./bin/raco pkg install --dry-run racket-help\nResolving \"racket-help\" via <https://www.cs.utah.edu/plt/snapshots/20170527-7f1ab90/catalog/>\ntcp-connect: connection failed\n  detail: host not found\n  address: <http://www.cs.utah.edu|www.cs.utah.edu>\n  port number: 443\n  step: 1\n  system error: nodename nor servname provided, or not known; errno=8\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:58:49.173902",
          "text": "I mean the module `racket/help`. it’s in the `base` package; you won’t have to install it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T19:58:59.175297",
          "text": "also, the snapshot should maintain its own set of packages."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:01:57.203961",
          "text": "I can’t figure this out… ¯\\_(ツ)_/¯"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:02:01.204549",
          "text": "```\n&gt; (help string-trim)\nstandard-module-name-resolver: collection not found\n  for module path: help/help-utils\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:02:40.210543",
          "text": "oh, right. apparently that requires the `racket-doc` package to be installed, which admittedly makes sense."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:02:46.211376",
          "text": "(since it’s opening the docs)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:02:52.212219",
          "text": "yeah. as far as I can tell, minimal is too minimal for this :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:02:59.213338",
          "text": "but it’s `racket-doc` that will bring in the whole universe of dependencies. :stuck_out_tongue:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:03:43.219818",
          "text": "since `racket-doc` currently links to other docs, including the web server docs… which means you’ll end up installing the web server (and a whole bunch of other packages) if you “just” install the docs."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:05:52.238255",
          "text": "yeah… I’ll just download the minimal+gui+docs package. it’s 80mb (instead of 9!)… it’ll just be slower on this cafe network"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:06:47.246104",
          "text": "that’s probably the safest bet, yes"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:10:38.278129",
          "text": "maybe it should have a more descriptive name than “gui-6.9.0.4-x86_64-macosx.dmg” … maybe “racket” should be in there somewhere. :stuck_out_tongue:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:10:58.280906",
          "text": "compared to: min-racket-6.9.0.4-x86_64-macosx.dmg"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:15:07.314363",
          "text": "ok. confirmed that on 6.9.0.4 that `,doc` is fixed. I wonder if I should steal the patch and try to compile it into my current version"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:17:22.332532",
          "text": "<@Georgeanna>: Make sure you try running the snapshot from outside of your home directory (that is, the snapshot distribution itself should be placed outside your home directory). IIUC, the issues around that feature stem from very odd macOS behavior around opening file URLs in/outside of your home directory."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:17:47.335919",
          "text": "If you had the snapshot in your home directory and the release outside of it, you might get false positives."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:17:54.336776",
          "text": "I ran it straight out of the disk image"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T20:19:01.345593",
          "text": "that’s probably safe then"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:27:07.410922",
          "text": "is there a bar-chart plot type somewhere? I’m trying to hack it into discrete-histogram and it’s screwing up w/ my x-axis."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-05-30T20:29:02.426285",
          "text": "ah. it ignores negative values even if you set `y-min`"
        }
      ]
    },
    {
      "conversation_id": "33",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Helga: considering the irc bridge is down, I’ll ask here\nHelga: how can I custom print objects? the reference says printable&lt;%&gt; should be implemented, and that it seems to be a wrapper around prop:custom-write\nHelga: <[URL]\nHelga: but the docs for prop:custom-write say it’s deprecated in favor of gen:custom-write\nKimbery: Helga: [CODE] is for structs; it still uses [CODE] under the hood. if you’re using [CODE], I’m pretty sure [CODE] is the right thing to implement.\nHelga: the docs are confusing then\nKimbery: my guess is that the [CODE] docs weren’t updated when [CODE] was added, since the latter is (I believe) a relatively recent addition.\nHelga: yes, I see [CODE] is still defined in terms of [CODE]\nKimbery: as it probably ought to be. I somewhat doubt [CODE] itself is really deprecated; I think using it directly with [CODE] via a [CODE] clause probably is.\nLatarsha: Kimbery I think it really is deprecated in the sense that there's no need to ever use it yourself directly\nHelga: My first thought was that the documentation is outdated, so maybe a different wording would be better",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 11,
        "duration_minutes": 907.05,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Helga",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Helga",
          "timestamp": "2017-05-30T22:40:02.398868",
          "text": "considering the irc bridge is down, I’ll ask here"
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-30T22:40:32.402507",
          "text": "how can I custom print objects? the reference says printable&lt;%&gt; should be implemented, and that it seems to be a wrapper around prop:custom-write"
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-30T22:40:44.403841",
          "text": "<https://docs.racket-lang.org/reference/objectprinting.html>"
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-30T22:41:04.406060",
          "text": "but the docs for prop:custom-write say it’s deprecated in favor of gen:custom-write"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T22:42:39.416713",
          "text": "<@Helga>: `gen:custom-write` is for structs; it still uses `prop:custom-write` under the hood. if you’re using `racket/class`, I’m pretty sure `printable&lt;%&gt;` is the right thing to implement."
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-30T22:43:18.420828",
          "text": "the docs are confusing then"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T22:43:55.424774",
          "text": "my guess is that the `printable&lt;%&gt;` docs weren’t updated when `gen:custom-write` was added, since the latter is (I believe) a relatively recent addition."
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-30T22:57:29.514785",
          "text": "yes, I see `printable&lt;%&gt;` is still defined in terms of `prop:custom-write`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-05-30T23:00:41.537707",
          "text": "as it probably ought to be. I somewhat doubt `prop:custom-write` itself is really deprecated; I think using it directly with `struct` via a `#:property` clause probably is."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-05-31T09:53:50.938054",
          "text": "<@Kimbery> I think it really is deprecated in the sense that there's no need to ever use it yourself directly"
        },
        {
          "user": "Helga",
          "timestamp": "2017-05-31T13:47:05.295844",
          "text": "My first thought was that the documentation is outdated, so maybe a different wording would be better"
        }
      ]
    },
    {
      "conversation_id": "34",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stefani: mflatt: can you take a look at this and tell me if there's a work-around of if I need to make [CODE] different? <[URL]\nStefani: mflatt: looks like the kernel error is that resolve-module-path-index returns [CODE] rather than [CODE]\nStefani: but that violates the return contract\nVincenzo: Stefani [CODE] seems like a fit for the contract of [CODE], which promises to return a path or a symbol or an encoding of a submodule reference; possibly, you want [CODE], or maybe you want to use [CODE]\nStefani: mflatt: [CODE] solves the #%kernel problem, but not the way to figure out what [CODE] is\nVincenzo: Normally, you'd do that with [CODE], but I don't see a way to use that for a require transfomer\nVincenzo: Or does the single-argument form of [CODE] work in this case?\nVincenzo: Or maybe you're looking for [CODE] as the \"self\" index\nStefani: I just updated the example and I get collapse-m-p-i to violate its own contract --- <[URL]\nStefani: i'll try the self idea\nStefani: ya, i don't know how to make variable-reference-&gt;module-path-index useful\nVincenzo: I think the contract of [CODE] with a single argument will have to be changed to allow a [CODE] result if the given module path index is a \"self\" index. You can work around the bug by checking specifically for that before calling [CODE]\nStefani: it turns out that I can also pass in the thunk to lookup self and throw an error there\nStefani: no idea on how to get self though? (thinking ahead: suppose I could, I assume that [CODE] will fail if it tries to import from itself?)\nStefani: I assume it's clear what this transformer does? I'm pretty happy with it generally\nVincenzo: Right - it makes no sense for a module to import from itself, and it's not expressible as an [CODE] struct\nVincenzo: No, I haven't yet tried to figure out what the transformer does\nStefani: Ah, if you look down at the example, [CODE] imports [CODE] from [CODE] if [CODE] provides it OR it binds [CODE] to [CODE]\nStefani: right now it works assuming that [CODE] is actually imported from somewhere\nStefani: but it would be nice if it didn't have to be and could be locally defined\nStefani: (remix makes its so that when you require a module [CODE], you automatically put [CODE] in your module, so it can mess with your environment)\nVincenzo: You can use [CODE] during a require transformer, if that helps\nStefani: I just tried that :) for some reason I thought that wasn't allowed\nStefani: Thanks!\nStefani: I'll just change [CODE]'s contract to allow #f\nVincenzo: I'll push a repair soon\nStefani: Ok, I'll wait\nVincenzo: (will need to rebuild, since I'm days behind)\nStefani: np",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 29,
        "duration_minutes": 1475.35,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Stefani",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Stefani",
          "timestamp": "2017-05-31T21:00:55.111812",
          "text": "mflatt: can you take a look at this and tell me if there's a work-around of if I need to make `make-import` different? <https://gist.github.com/jeapostrophe/ab3e1837bf6c7627fe3b07555ba49bea>"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T12:00:15.437988",
          "text": "mflatt: looks like the kernel error is that resolve-module-path-index returns `'#%kernel` rather than `''#%kernel`"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T12:01:07.460067",
          "text": "but that violates the return contract"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T19:15:46.837463",
          "text": "<@Stefani> `'#%kernel` seems like a fit for the contract of `resolve-module-path-index`, which promises to return a path or a symbol or an encoding of a submodule reference; possibly, you want `module-path-index-resolve`, or maybe you want to use `collapse-module-path-index`"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T20:59:32.698418",
          "text": "mflatt: `collapse-module-path-index` solves the #%kernel problem, but not the way to figure out what `self` is"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:02:30.724191",
          "text": "Normally, you'd do that with `variable-reference-&gt;module-path-index`, but I don't see a way to use that for a require transfomer"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:03:47.734178",
          "text": "Or does the single-argument form of `collapse-module-path-index` work in this case?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:04:18.738184",
          "text": "Or maybe you're looking for `(module-path-index-join #f #f)` as the \"self\" index"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:06:40.756943",
          "text": "I just updated the example and I get collapse-m-p-i to violate its own contract --- <https://gist.github.com/jeapostrophe/ab3e1837bf6c7627fe3b07555ba49bea>"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:06:52.758389",
          "text": "i'll try the self idea"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:09:55.780568",
          "text": "ya, i don't know how to make variable-reference-&gt;module-path-index useful"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:20:27.857324",
          "text": "I think the contract of `collapse-module-path-index` with a single argument will have to be changed to allow a `#f` result if the given module path index is a \"self\" index. You can work around the bug by checking specifically for that before calling `collapse-module-path-index`"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:22:59.875995",
          "text": "it turns out that I can also pass in the thunk to lookup self and throw an error there"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:23:31.879780",
          "text": "no idea on how to get self though? (thinking ahead: suppose I could, I assume that `make-import` will fail if it tries to import from itself?)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:24:33.887016",
          "text": "I assume it's clear what this transformer does? I'm pretty happy with it generally"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:24:38.887604",
          "text": "Right - it makes no sense for a module to import from itself, and it's not expressible as an `import` struct"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:25:00.890134",
          "text": "No, I haven't yet tried to figure out what the transformer does"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:25:35.894457",
          "text": "Ah, if you look down at the example, `(default-in m [id def])` imports `id` from `m` if `m` provides it OR it binds `id` to `def`"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:25:55.896698",
          "text": "right now it works assuming that `def` is actually imported from somewhere"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:26:11.898539",
          "text": "but it would be nice if it didn't have to be and could be locally defined"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:29:14.920343",
          "text": "(remix makes its so that when you require a module `m`, you automatically put `(m:#%required)` in your module, so it can mess with your environment)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:32:31.945094",
          "text": "You can use `syntax-local-lift-module-end-declaration` during a require transformer, if that helps"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:33:09.949801",
          "text": "I just tried that :) for some reason I thought that wasn't allowed"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:33:14.950440",
          "text": "Thanks!"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:35:11.964659",
          "text": "I'll just change `collapse-...`'s contract to allow #f"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:35:50.969336",
          "text": "I'll push a repair soon"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:36:04.970914",
          "text": "Ok, I'll wait"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-01T21:36:06.971219",
          "text": "(will need to rebuild, since I'm days behind)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-01T21:36:15.972268",
          "text": "np"
        }
      ]
    },
    {
      "conversation_id": "35",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: IRC bridge is down again",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-01T14:19:28.640007",
          "text": "IRC bridge is down again"
        }
      ]
    },
    {
      "conversation_id": "36",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Carson: PLaneT seems to be down - index page works fine but browsing to any package results in proxy error",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Carson"
        ]
      },
      "timeline": [
        {
          "user": "Carson",
          "timestamp": "2017-06-02T06:14:25.558766",
          "text": "PLaneT seems to be down - index page works fine but browsing to any package results in proxy error"
        }
      ]
    },
    {
      "conversation_id": "37",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Do you have any thoughts about: <[URL]\nVincenzo: Rosalee I vaguely remembered there are issues with calling [CODE] directly, and I found the relevant code. See the PR comment. Although no one is likely to try to compile Racket on SunOS 4 where [CODE] is unavailable, the potential indirection through [CODE] is important for Windows due to libc sharing (or not) in DLLs.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 559.8,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-06-03T20:49:56.904131",
          "text": "<@Vincenzo> Do you have any thoughts about: <https://github.com/racket/racket/pull/1713>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-04T06:09:45.121765",
          "text": "<@Rosalee> I vaguely remembered there are issues with calling `atexit()` directly, and I found the relevant code. See the PR comment.\nAlthough no one is likely to try to compile Racket on SunOS 4 where `atexit()` is unavailable, the potential indirection through `replacement_at_exit` is important for Windows due to libc sharing (or not) in DLLs."
        }
      ]
    },
    {
      "conversation_id": "38",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: anyone available to review <[URL]\nEun: Chantelle: I'd ping ryanc.\nChantelle: Eun here, email, or github?\nEun: Github, I'd say.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 16.32,
        "contains_question": true,
        "action_keywords": [
          "review"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-05T17:21:42.517624",
          "text": "anyone available to review <https://github.com/racket/rackunit/pull/27>?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-06-05T17:32:54.708687",
          "text": "<@Chantelle>: I'd ping ryanc."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-05T17:37:15.779353",
          "text": "<@Eun> here, email, or github?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-06-05T17:38:01.790793",
          "text": "Github, I'd say."
        }
      ]
    },
    {
      "conversation_id": "39",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: does [CODE] have a direct analog to Typed Racket's [CODE]? (seems like [CODE] has to be used with a [CODE])\nNelson: I want something like [CODE] ... but this is just an example, my actual contract isn't just [CODE]\nNelson: WHOA. I did not realize you could do [CODE]\nKimbery: contract expressions are just that—expressions :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 39.79,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-06-05T19:20:29.057706",
          "text": "does `racket/contract` have a direct analog to Typed Racket's `Rec`?\n(seems like `recursive-contract` has to be used with a `define`)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-05T19:20:57.062124",
          "text": "I want something like `(rec/c sexp (or/c symbol? (listof sexp)))` ... but this is just an example, my actual contract isn't just `(treeof symbol?)`"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-05T19:47:43.308696",
          "text": "WHOA. I did not realize you could do `(contract-out (f (let ([x ....]) ....)))`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-05T20:00:16.419810",
          "text": "contract expressions are just that—expressions :)"
        }
      ]
    },
    {
      "conversation_id": "40",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Julianna: (define-syntax (rec/c stx) (syntax-parse stx [(_ name:id ctc) #‘(let ([name (let-syntax ([name (recursive-contract name)])]) name)]))\nJulianna: or there-abouts?\nJulianna: not sure if my shadowing works on not… my need to make a transformer…\nLatarsha: You probably need a letrec there\nTina: Nelson check out section 2.4 of the 2002 icfp contracts paper",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 831.85,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Julianna",
          "Latarsha",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Julianna",
          "timestamp": "2017-06-05T19:40:50.248551",
          "text": "(define-syntax (rec/c stx) (syntax-parse stx [(_ name:id ctc) #‘(let ([name (let-syntax ([name (recursive-contract name)])]) name)]))"
        },
        {
          "user": "Julianna",
          "timestamp": "2017-06-05T19:40:52.248990",
          "text": "or there-abouts?"
        },
        {
          "user": "Julianna",
          "timestamp": "2017-06-05T19:41:08.251118",
          "text": "not sure if my shadowing works on not… my need to make a transformer…"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-05T21:41:53.199560",
          "text": "You probably need a letrec there"
        },
        {
          "user": "Tina",
          "timestamp": "2017-06-06T09:32:41.395154",
          "text": "<@Nelson> check out section 2.4 of the 2002 icfp contracts paper"
        }
      ]
    },
    {
      "conversation_id": "41",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: is there a danger of the con selling out?\nLatarsha: no\nCorey: but people should register early to ensure a seat in the main auditorium instead of getting bumped to the overflow venue\nKa: thanks, Corey :slightly_smiling_face:\nKa: Latarsha that was my thinking. likely have to wait until august to see if i'm making the trip from my new home in pdx.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 16.99,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Ka",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-06-08T17:38:11.017641",
          "text": "is there a danger of the con selling out?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-08T17:39:55.044165",
          "text": "no"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-08T17:50:01.197685",
          "text": "but people should register early to ensure a seat in the main auditorium instead of getting bumped to the overflow venue"
        },
        {
          "user": "Ka",
          "timestamp": "2017-06-08T17:54:39.265698",
          "text": "thanks, <@Corey> :slightly_smiling_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-06-08T17:55:10.273166",
          "text": "<@Latarsha> that was my thinking. likely have to wait until august to see if i'm making the trip from my new home in pdx."
        }
      ]
    },
    {
      "conversation_id": "42",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: anyone know how the <#C3PCSK2DN|mailing-lists> channel works? I ‘d like to set up a similar channel in our group for our mailing list",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-10T20:44:55.391237",
          "text": "anyone know how the <#C3PCSK2DN|mailing-lists> channel works? I ‘d like to set up a similar channel in our group for our mailing list"
        }
      ]
    },
    {
      "conversation_id": "43",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Nelson What do you think of adding a [CODE] check to rackunit? So [CODE] would be a failing test and [CODE] would be a passing one.\nNelson: hmm\nNelson: I think it makes more sense to change [CODE]\nChantelle: in what way?\nChantelle: suppose I have a custom check [CODE], how should I test it ideally?\nChantelle: [CODE] plus just using [CODE] directly seems like it'd cover testing that the check passes and fails at the right times, but it wouldn't let you test that the check adds the right check-info\nNelson: I thought you just wanted this for [CODE], and the trouble with [CODE] is that when it raises an exception it always says 1 test failed\nNelson: so changing [CODE] to get rid of the \"1 failure\" would fix that issue\nNelson: I don't really understand the second thing you last said ---\nNelson: is that a problem with [CODE] ?\nChantelle: yes, I meant it's a problem with the hypothetical [CODE] idea\nChantelle: the high level thing I want is a way to test custom checks so I know they pass when I expect, fail when I expect, and add whatever specialized check-info I expect\nNelson: ok, yes\nChantelle: it's easy enough to test that a custom check passes when you expect; just write some tests using it\nChantelle: the other two things I have no idea how to do reasonably and I think it would be useful for rackunit to provide ways to do that\nChantelle: a neat side effect might be that rackunit can simplify its own test suite\nNelson: haha yeah, I was just wondering what rackunit does\nChantelle: some of the tests rely on calling a module with failing tests in a separate namespace and checking the stderr output\nChantelle: that... I would like to avoid :p\nNelson: Latarsha Clorinda I'm trying to work on types for immutable data and I have a problem\nNelson: I just added some cases to [CODE] and am getting \"unbound identifier [CODE]\"\nNelson: I'm trying to read the source, but I haven't found where the [CODE] is supposed to get defined\nNelson: (I have a [CODE]with its own mask)\nNelson: oh\nNelson: I had written [CODE]\nNelson: but it should be [CODE]\nChantelle: Nelson I've got an experimental change to rackunit that extracts the [CODE] code into a separate package, do you think that's a reasonable idea?\nNelson: I'm not sure\nNelson: I think that should be OK to do ... but I also think that shouldn't be necessary\nNelson: because (I hope) nothing in rackunit depends on [CODE]\nNelson: why do you want the separate package?\nNelson: (I'm guessing its to make rackunit more testable, I just don't see how, yet)\nChantelle: I'm trying to figure out what parts of [CODE] need to be changed to make it easier for me to implement things like <[URL]\nChantelle: because it currently uses a lot of internal details of the error message format and duplicates a bunch of logic in [CODE] but with slight variations\nChantelle: so the separate package is an attempt to figure out what the hard boundary between [CODE] and the core of rackunit is\nNelson: ok I like all of this\nChantelle: from reading the commit history I think Robby wanted to move towards making [CODE] behave a lot more like [CODE]\nChantelle: <[URL] is slightly related as well\nNelson: Latarsha Clorinda another question, I'm having trouble with [CODE]\nNelson: I'm able to do things like [CODE], then apply T like a function in [CODE] (I mean, I can write [CODE])\nNelson: but\nNelson: I want to define [CODE] as a name for [CODE] (for some [CODE] [CODE])\nNelson: so I tried [CODE] and then I can't write [CODE] later in [CODE]\nNelson: I guess the question is, how do I define a polymorphic type?\nLatarsha: Nelson you seem to be confusing polymorphic types and functions\nNelson: should I do [CODE] ?\nLatarsha: TR makes them seem like the same thing in the surface syntax\nLatarsha: But the first thing you wrote was a polymorphic type, and the second is a function\nLatarsha: It depends what you want\nNelson: [CODE] is a polymorphic type, [CODE] is a function? ok that makes sense\nLatarsha: Yes\nLatarsha: -poly is just a shorthand for a type constructor\nNelson: so I guess I have to read [CODE] to see what its making?\nLatarsha: It's making types and type constructors\nNelson: is there a type constructor for [CODE]?\nLatarsha: There's several levels of abstraction there to manage the binding\nLatarsha: But -Poly is the function\nLatarsha: I don't recommend using it directly though\nTina: Chantelle I found that rackunit’s output when tests aren’t in a test suite to be hard to read and so I tried to clean things up to make that usecase a little bit nicer.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 59,
        "duration_minutes": 1114.79,
        "contains_question": true,
        "action_keywords": [
          "action",
          "fix",
          "implement",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Nelson",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T02:36:25.119618",
          "text": "<@Nelson> What do you think of adding a `(check-fail &lt;some-check-expr&gt;)` check to rackunit? So `(check-fail (check-equal? 1 1))` would be a failing test and `(check-fail (check-equal? 1 2))` would be a passing one."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T02:47:34.140873",
          "text": "hmm"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T02:47:52.141370",
          "text": "I think it makes more sense to change `fail-check`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T02:48:35.142596",
          "text": "in what way?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T02:49:47.144807",
          "text": "suppose I have a custom check `check-foo`, how should I test it ideally?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T02:50:38.146566",
          "text": "`check-fail` plus just using `check-foo` directly seems like it'd cover testing that the check passes and fails at the right times, but it wouldn't let you test that the check adds the right check-info"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T03:07:04.180535",
          "text": "I thought you just wanted this for `define-check`, and the trouble with `define-check` is that when it raises an exception it always says 1 test failed"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T03:07:31.181330",
          "text": "so changing `fail-check` to get rid of the \"1 failure\" would fix that issue"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T03:08:07.182429",
          "text": "I don't really understand the second thing you last said ---"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T03:08:22.182896",
          "text": "is that a problem with `(check-fail (my-check ....))` ?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T03:08:59.184134",
          "text": "yes, I meant it's a problem with the hypothetical `(check-fail (my-check ....))` idea"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T03:09:10.184487",
          "text": "the high level thing I want is a way to test custom checks so I know they pass when I expect, fail when I expect, and add whatever specialized check-info I expect"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T03:09:47.185797",
          "text": "ok, yes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T03:09:49.185850",
          "text": "it's easy enough to test that a custom check passes when you expect; just write some tests using it"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T03:10:13.186944",
          "text": "the other two things I have no idea how to do reasonably and I think it would be useful for rackunit to provide ways to do that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T03:20:06.208510",
          "text": "a neat side effect might be that rackunit can simplify its own test suite"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T03:20:30.209469",
          "text": "haha yeah, I was just wondering what rackunit does"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T03:21:07.210788",
          "text": "some of the tests rely on calling a module with failing tests in a separate namespace and checking the stderr output"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T03:21:26.211521",
          "text": "that... I would like to avoid :p"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T17:40:04.644982",
          "text": "<@Latarsha> <@Clorinda>  I'm trying to work on types for immutable data and I have a problem"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T17:40:43.646995",
          "text": "I just added some cases to `types/subtype.rkt` and am getting \"unbound identifier `uid:Immutable-Hashtable:`\""
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T17:41:16.648699",
          "text": "I'm trying to read the source, but I haven't found where the `uid:` is supposed to get defined"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T17:42:07.651272",
          "text": "(I have a `def-structural Immutable-Hashtable ....`with its own mask)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T17:48:51.672785",
          "text": "oh"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T17:49:10.673701",
          "text": "I had written `(case: Immutable-Hashtable: (Immutable-Hashtable: k v))`"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T17:49:23.674398",
          "text": "but it should be `(case: Immutable-Hashtable (Immutable-Hashtable: k v))`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T18:15:10.756218",
          "text": "<@Nelson> I've got an experimental change to rackunit that extracts the `rackunit/text-ui` code into a separate package, do you think that's a reasonable idea?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T18:17:45.764249",
          "text": "I'm not sure"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T18:18:07.765510",
          "text": "I think that should be OK to do ... but I also think that shouldn't be necessary"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T18:18:22.766315",
          "text": "because (I hope) nothing in rackunit depends on `rackunit/text-ui`"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T18:18:29.766638",
          "text": "why do you want the separate package?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T18:18:50.767711",
          "text": "(I'm guessing its to make rackunit more testable, I just don't see how, yet)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T18:19:22.769387",
          "text": "I'm trying to figure out what parts of `run-tests` need to be changed to make it easier for me to implement things like <https://github.com/racket/rackunit/issues/10>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T18:20:02.771386",
          "text": "because it currently uses a lot of internal details of the error message format and duplicates a bunch of logic in `display-test-failure/error` but with slight variations"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T18:20:33.773118",
          "text": "so the separate package is an attempt to figure out what the hard boundary between `run-tests` and the core of rackunit is"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T18:20:57.774403",
          "text": "ok I like all of this"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T18:21:12.775158",
          "text": "from reading the commit history I think Robby wanted to move towards making `run-tests` behave a lot more like `display-test-failure/error`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-11T18:22:53.780019",
          "text": "<https://github.com/racket/rackunit/pull/34> is slightly related as well"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:46:48.221287",
          "text": "<@Latarsha> <@Clorinda>  another question, I'm having trouble with `base-env/base-types.rkt`"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:48:11.226217",
          "text": "I'm able to do things like `(def-structural T (args ....))`, then apply T like a function in `base-env/base-types.rkt` (I mean, I can write `(T arg ...)`)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:48:13.226356",
          "text": "but"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:48:57.228972",
          "text": "I want to define `-HT` as a name for `(-poly (a b) (Un (T1 a b) (T2 a b)))` (for some `T1` `T2`)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:49:30.230858",
          "text": "so I tried `(define -HT (-poly ....))` and then I can't write `(-HT a b)` later in `base-env/base-types.rkt`"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:49:51.232183",
          "text": "I guess the question is, how do I define a polymorphic type?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:49:58.232551",
          "text": "<@Nelson> you seem to be confusing polymorphic types and functions"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:50:18.233903",
          "text": "should I do `(define -HT (lambda (a b) (-poly ....)))` ?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:50:20.234016",
          "text": "TR makes them seem like the same thing in the surface syntax"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:50:44.235656",
          "text": "But the first thing you wrote was a polymorphic type, and the second is a function"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:51:04.237066",
          "text": "It depends what you want"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:51:14.237670",
          "text": "`(-poly ...)` is a polymorphic type, `(lambda (a b) ...` is a function? ok that makes sense"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:51:21.238085",
          "text": "Yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:51:48.239709",
          "text": "-poly is just a shorthand for a type constructor"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:52:18.241529",
          "text": "so I guess I have to read `def-structural` to see what its making?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:52:40.242882",
          "text": "It's making types and type constructors"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-11T20:56:41.258531",
          "text": "is there a type constructor for `-poly`?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:59:13.268583",
          "text": "There's several levels of abstraction there to manage the binding"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:59:33.270039",
          "text": "But -Poly is the function"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-11T20:59:53.271553",
          "text": "I don't recommend using it directly though"
        },
        {
          "user": "Tina",
          "timestamp": "2017-06-11T21:11:12.320310",
          "text": "<@Chantelle> I found that rackunit’s output when tests aren’t in a test suite to be hard to read and so I tried to clean things up to make that usecase a little bit nicer."
        }
      ]
    },
    {
      "conversation_id": "44",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: what was yesterday’s drracket logo about?\nLatarsha: Georgeanna what did it look like?\nChantelle: Turtle with red and blue shell\nLatarsha: <[URL]\nGeorgeanna: nice\nGeorgeanna: thanks\nNelson: lol, I thought June 11 was just an important day for [CODE] <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 42.65,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-12T15:57:11.393890",
          "text": "what was yesterday’s drracket logo about?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-12T15:58:15.415697",
          "text": "<@Georgeanna> what did it look like?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-12T15:58:31.421119",
          "text": "Turtle with red and blue shell"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-12T15:59:07.433059",
          "text": "<https://en.wikipedia.org/wiki/Kamehameha_Day>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-12T16:00:10.455279",
          "text": "nice"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-12T16:00:11.455734",
          "text": "thanks"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-12T16:39:50.250764",
          "text": "lol, I thought June 11 was just an important day for `#lang honu` <https://www.cs.utah.edu/~rafkind/papers/honu-2012.pdf>"
        }
      ]
    },
    {
      "conversation_id": "45",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tova: I'm not quite understanding the documentation on this <[URL]\nTova: How do I set individual pixels to be a certain color in a bitmap?\nKimbery: Tova: [CODE], I think\nTova: What's the 'pixels' argument?\nKimbery: it’s documented here: <[URL]\nTova: I saw the documentation for it. I don't understand what it's saying.\nMarlin: four consecutive bytes represent a single pixel: (alpha, red, green, blue)\nKimbery: if you want to set a single pixel, pass [CODE] for [CODE] and [CODE], and provide a 4-byte byte array\nTova: Ah good, width and height you color a grid of pixels at the same time?\nTova: Marlin Thanks\nMarlin: you can set a block of pixels all at once, yes, starting at [CODE]\nTova: The coordinates are from the upper left corner, right?\nKimbery: yes\nMarlin: says \"The pixels are in row-major order, left to right then top to bottom.\"\nMarlin: so yep\nTova: Thanks.\nTova: I wrote a quick and dirty thing with pict a couple weeks ago to provide visualizations of some experimental math thing for some colleges, and now they kind of are depending on them a bit more regularly, so I'm trying to make it more efficient. I haven't done much with graphics or pictures prior to this, so all the stuff about alphas and back-channels and whatnot was making it kind of hard to parse.\nTova: (context)\nTova: Anyways, thanks for the help :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 19,
        "duration_minutes": 20.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Marlin",
          "Tova"
        ]
      },
      "timeline": [
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:37:15.098527",
          "text": "I'm not quite understanding the documentation on this <http://docs.racket-lang.org/draw/bitmap_.html>"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:37:45.104093",
          "text": "How do I set individual pixels to be a certain color in a bitmap?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-12T18:40:11.130287",
          "text": "<@Tova>: `set-argb-pixels`, I think"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:41:48.147710",
          "text": "What's the 'pixels' argument?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-12T18:44:03.172206",
          "text": "it’s documented here: <http://docs.racket-lang.org/draw/bitmap-dc_.html#%28meth._%28%28%28lib._racket%2Fdraw..rkt%29._bitmap-dc~25%29._set-argb-pixels%29%29>"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:45:43.190299",
          "text": "I saw the documentation for it. I don't understand what it's saying."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-06-12T18:46:44.201036",
          "text": "four consecutive bytes represent a single pixel: (alpha, red, green, blue)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-12T18:46:50.201926",
          "text": "if you want to set a single pixel, pass `1` for `width` and `height`, and provide a 4-byte byte array"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:47:58.214245",
          "text": "Ah good, width and height you color a grid of pixels at the same time?"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:48:11.216512",
          "text": "<@Marlin> Thanks"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-06-12T18:48:45.222670",
          "text": "you can set a block of pixels all at once, yes, starting at `(x, y)`"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:49:29.230680",
          "text": "The coordinates are from the upper left corner, right?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-12T18:49:57.235684",
          "text": "yes"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-06-12T18:49:58.235837",
          "text": "says \"The pixels are in row-major order, left to right then top to bottom.\""
        },
        {
          "user": "Marlin",
          "timestamp": "2017-06-12T18:50:01.236265",
          "text": "so yep"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:50:44.244475",
          "text": "Thanks."
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:56:16.302877",
          "text": "I wrote a quick and dirty thing with pict a couple weeks ago to provide visualizations of some experimental math thing for some colleges, and now they kind of are depending on them a bit more regularly, so I'm trying to make it more efficient. I haven't done much with graphics or pictures prior to this, so all the stuff about alphas and back-channels and whatnot was making it kind of hard to parse."
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:57:13.313350",
          "text": "(context)"
        },
        {
          "user": "Tova",
          "timestamp": "2017-06-12T18:57:33.316886",
          "text": "Anyways, thanks for the help :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "46",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: Georgeanna is there a place to view all of the custom logos? I didn't know Dr Racket logos on different days was a thing. Though I don't spin it up all that often.\nGeorgeanna: no clue\nGeorgeanna: search for the-bitmap-spec in the racket source\nGeorgeanna: drracket/drracket/private/honu-logo.rkt etc\nKa: Ah. Of course it wouldn't just be a set of png files... :upside_down_face:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 415.5,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-06-12T19:25:49.598882",
          "text": "<@Georgeanna> is there a place to view all of the custom logos? I didn't know Dr Racket logos on different days was a thing. Though I don't spin it up all that often."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-12T19:58:28.888556",
          "text": "no clue"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-12T20:01:38.917957",
          "text": "search for the-bitmap-spec in the racket source"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-12T20:02:48.927945",
          "text": "drracket/drracket/private/honu-logo.rkt etc"
        },
        {
          "user": "Ka",
          "timestamp": "2017-06-13T02:21:19.490845",
          "text": "Ah. Of course it wouldn't just be a set of png files... :upside_down_face:"
        }
      ]
    },
    {
      "conversation_id": "47",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lavenia: The bridge to IRC seems to be down?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lavenia"
        ]
      },
      "timeline": [
        {
          "user": "Lavenia",
          "timestamp": "2017-06-13T06:41:58.781533",
          "text": "The bridge to IRC seems to be down?"
        }
      ]
    },
    {
      "conversation_id": "48",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Latarsha How many contributors are left in the Great Relicensing?\nLatarsha: Chantelle I haven't gone through every repo yet searching for contributors, but my spreadsheet has 92 people left\nLatarsha: many of them may not have seen any of the prior requests\nChantelle: what about contributors to only the racket/racket repo?\nLatarsha: that's from racket/racket, racket/typed-racket, racket/htdp, racket/drracket, racket/racket-lang-org\nLatarsha: but racket/racket is the majority\nLatarsha: Only about ~20 have more than 1 commit\nChantelle: in theory could you undo the commits of those contributors in order to skip them for relicensing?\nLatarsha: some of those remaining people are major past contributors who we just have to work harder to contact\nLatarsha: no need to worry so far\nGeorgeanna: are any of them pre-github/git?\nLatarsha: Yes\nLatarsha: Fortunately I have the revision history back to 1995\nChantelle: Nelson I opened <[URL] would like your feedback when you have a moment\nLatarsha: I think someone is volunteering to be the new rackunit maintainer ... ;)\nKarine: Latarsha am i one of those 92 people left?\nLatarsha: Karine You aren't on my current list, which I assume means I have something from you\nLatarsha: Karine should you be on my list? if so, just comment on <[URL]\nLatarsha: Aracely You have some graph test failures: <[URL]\nLatarsha: also the turnstile tests time out: <[URL]\nKarine: Latarsha great, thanks.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 21,
        "duration_minutes": 1083.05,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Karine",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-13T16:40:12.826243",
          "text": "<@Latarsha> How many contributors are left in the Great Relicensing?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T16:41:02.842698",
          "text": "<@Chantelle> I haven't gone through every repo yet searching for contributors, but my spreadsheet has 92 people left"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T16:41:24.849986",
          "text": "many of them may not have seen any of the prior requests"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-13T16:41:48.857972",
          "text": "what about contributors to only the racket/racket repo?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T16:43:04.882261",
          "text": "that's from racket/racket, racket/typed-racket, racket/htdp, racket/drracket, racket/racket-lang-org"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T16:43:11.884373",
          "text": "but racket/racket is the majority"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T16:43:40.893809",
          "text": "Only about ~20 have more than 1 commit"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-13T16:44:30.909854",
          "text": "in theory could you undo the commits of those contributors in order to skip them for relicensing?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T16:45:15.925304",
          "text": "some of those remaining people are major past contributors who we just have to work harder to contact"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T16:45:25.928729",
          "text": "no need to worry so far"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-13T17:41:37.945296",
          "text": "are any of them pre-github/git?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T22:35:02.759665",
          "text": "Yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-13T22:35:38.764021",
          "text": "Fortunately I have the revision history back to 1995"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-13T22:42:20.809521",
          "text": "<@Nelson> I opened <https://github.com/racket/rackunit/issues/35>, would like your feedback when you have a moment"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T07:57:40.458378",
          "text": "I think someone is volunteering to be the new rackunit maintainer ... ;)"
        },
        {
          "user": "Karine",
          "timestamp": "2017-06-14T10:32:50.398990",
          "text": "<@Latarsha> am i one of those 92 people left?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T10:36:37.495457",
          "text": "<@Karine> You aren't on my current list, which I assume means I have something from you"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T10:37:05.507136",
          "text": "<@Karine> should you be on my list? if so, just comment on <https://github.com/racket/racket/issues/1570>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T10:40:12.586236",
          "text": "<@Aracely> You have some graph test failures: <https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/graph.txt>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T10:40:39.597131",
          "text": "also the turnstile tests time out: <https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/turnstile.txt>"
        },
        {
          "user": "Karine",
          "timestamp": "2017-06-14T10:43:15.660577",
          "text": "<@Latarsha> great, thanks."
        }
      ]
    },
    {
      "conversation_id": "49",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Corey your markdown pkg also has a test failure <[URL]\nCorey: Latarsha That perf test should be disabled in CI. It is on Travis by checking for env var. Remind me the DrDr env var to check, if any?\nLatarsha: Corey <[URL]\nCorey: Thanks!!\nCorey: I feel like I've asked this before (sorry!), but, never seem to be able to find that searching from <[URL] (like I did before I asked you again just now :smile:)\nLatarsha: I don't know that it's there (maybe it should be)\nCorey: Might be handy if [CODE] env var were defined -- as does Travis CI, Circle CI, AppVeyor <[URL] <[URL] <[URL] Meanwhile I'll push a commit that checks for [CODE].\nLatarsha: Corey I bet mflatt would take that pull request\nCorey: Latarsha Point. Done: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 9,
        "duration_minutes": 211.28,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T10:43:43.671851",
          "text": "<@Corey> your markdown pkg also has a test failure <https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/markdown.txt>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-14T10:46:50.747857",
          "text": "<@Latarsha> That perf test should be disabled in CI. It is on Travis by checking for env var. Remind me the DrDr env var to check, if any?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T10:47:58.775671",
          "text": "<@Corey> <http://pkg-build.racket-lang.org/about.html>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-14T10:48:10.780447",
          "text": "Thanks!!"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-14T10:50:31.838490",
          "text": "I feel like I've asked this before (sorry!), but, never seem to be able to find that searching from <https://docs.racket-lang.org/> (like I did before I asked you again just now :smile:)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T10:51:32.863817",
          "text": "I don't know that it's there (maybe it should be)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-14T11:29:39.822771",
          "text": "Might be handy if `CI=true` env var were defined -- as does Travis CI, Circle CI, AppVeyor\n\n<https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables>\n<https://circleci.com/docs/1.0/environment-variables/>\n<https://www.appveyor.com/docs/environment-variables/>\n\nMeanwhile I'll push a commit that checks for `(ormap getenv '(\"CI\" \"TRAVIS\" \"PLT_PKG_BUILD_SERVICE\"))`."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T11:45:43.216931",
          "text": "<@Corey> I bet mflatt would take that pull request"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-14T14:15:00.502450",
          "text": "<@Latarsha> Point. Done: <https://github.com/racket/pkg-build/pull/2>"
        }
      ]
    },
    {
      "conversation_id": "50",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Patrice can you respond to the relicensing request? <[URL]\nPatrice: reponded! sorry for that\nLatarsha: thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 19.91,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T13:43:36.821040",
          "text": "<@Patrice> can you respond to the relicensing request? <https://github.com/racket/racket/issues/1570>"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-06-14T14:03:06.248410",
          "text": "reponded! sorry for that"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-14T14:03:31.257538",
          "text": "thanks!"
        }
      ]
    },
    {
      "conversation_id": "51",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Latarsha Somebody's gotta do it ;)\nChantelle: Latarsha what are some of the things you wish [CODE] did better in the Typed Racket tests?\nLatarsha: Chantelle mostly I wish that it was simpler to put together test suites\nLatarsha: in TR, we can do pretty much what we need, but it's complicated\nGeorgeanna: Latarsha I’m curious: why is it complicated?\nLatarsha: Georgeanna why is which complicated? TR or rackunit?\nGeorgeanna: I assume both at the same time? rackunit is pretty straightforward. I don’t do TR but I suspect that *you* don’t find it that complicated. :wink:\nLatarsha: the TR test suite code is complicated because it does a lot of different stuff (load a lot of files dynamically as tests, run in parallel, etc)\nLatarsha: rackunit is complicated to use when you want to do more than just use [CODE] etc at the top-level of your [CODE] module\nLatarsha: that use case is very simple (which is great)\nGeorgeanna: can you point me at any of the rackunit complication so I can wrap my head around it? I might be able to help out there a bit.\nLatarsha: for example, the distinction between a test case and a test suite\nLatarsha: I think this paragraph describes my unhappiness well:\nLatarsha: \"Test cases can themselves be grouped into test suites. A test suite can contain both test cases and test suites. Unlike a check or test case, a test suite is not immediately run. Instead use one of the functions described in User Interfaces or Programmatically Running Tests and Inspecting Results.\"\nGeorgeanna: yeah. I’m not entirely thrilled with that myself. IMHO any time you need to do anything more than just require something to run your tests you’ve failed.\nGeorgeanna: I’m not sure how to fix that in a way that would make “normal” racket devs happy tho. I know how to do it to make *me* happy but that’s different. :slightly_smiling_face:\nLatarsha: something that makes one person happy is better than making 0 people happy\nKimbery: In my opinion, the things I find the most frustrating about rackunit is that test failures are often remarkably useless and “checks” don’t compose at all.\nKimbery: I have spent more time than I would like trying to understand why two things rackunit claims aren’t equal actually aren’t equal.\nKimbery: And writing custom checks that produce decent error messages is a huge chore, mostly because you can’t really implement a new check in terms of an existing one and still produce good check failure messages.\nKimbery: My understanding is that rackunit was just schemeunit, rolled into the main distribution, but I am not sure it’s really the same quality and adheres to the same principles as other libraries that get distributed with racket. :/\nChantelle: Kimbery I'm working on a library to improve rackunit error messages, especially when two data structures are \"almost\" the same: <[URL]\nChantelle: It's not ready for a 0.1 release yet though (mainly due to needing some rackunit features implemented so the check info doesn't look awful)\nGeorgeanna: Kimbery I published check-sexp-equal for that reason… but since I can’t define any formatting it is still kinda hard to read\nGeorgeanna: minitest (in ruby) does diffing on [CODE] failures and provides [CODE] to ensure that big things get printed structurally. makes finding the problems a breeze in comparison\nGeorgeanna: It does it that way specifically to find inequalities deep in a nested sexp and it is really really quick to hone in on where the problem is. [CODE] has to embed [CODE] and [CODE] tags to show you where the differences are but the whole sexp is printed flat\nGeorgeanna: just doing a pretty-print of the output would make it much better\nChantelle: Georgeanna check-sexp-equal is very nice and was part of the inspiration for [CODE] :)\nGeorgeanna: Chantelle I’m not a fan of expectations (at least from the BDD perspective). I imagine that your RHS blows up really quickly on anything non-trivial\nGeorgeanna: thanks! if you have any insight on how to improve its output I’m all ears\nChantelle: there's \"expectation conversion\" so that you can write something like [CODE] and it will convert it to an expectation that structurally matches things and reports errors in contexts\nChantelle: the above example I had didn't do that because [CODE] does not yet convert its expectation argument automatically\nChantelle: [CODE] will do it though\nChantelle: They're more like junit/hamcrest \"matchers\" than anything else, but I wanted a more noun-y name\nDelmy: I'm currently working on a test filtering feature for chk and rackunit. The idea is to be able to call [CODE] and the test lib interprets [CODE] as filters for test names, files, lines to run. I'm looking for feedback/feature requests based on the WIP documentation: <[URL]\nChantelle: Delmy instead of relying on command line arguments, would it be cleaner for [CODE] to define some sort of \"filters\" concept and pass it along to test submodules? module-level filtering could work with a config submod in the test module",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 36,
        "duration_minutes": 1815.56,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Delmy",
          "Georgeanna",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-14T14:14:45.497254",
          "text": "<@Latarsha> Somebody's gotta do it ;)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-14T19:15:14.691223",
          "text": "<@Latarsha> what are some of the things you wish `test-case` did better in the Typed Racket tests?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T10:57:37.750430",
          "text": "<@Chantelle> mostly I wish that it was simpler to put together test suites"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T10:57:50.756082",
          "text": "in TR, we can do pretty much what we need, but it's complicated"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T16:03:55.292103",
          "text": "<@Latarsha> I’m curious: why is it complicated?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:05:37.325327",
          "text": "<@Georgeanna> why is which complicated? TR or rackunit?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T16:06:20.339172",
          "text": "I assume both at the same time? rackunit is pretty straightforward. I don’t do TR but I suspect that *you* don’t find it that complicated. :wink:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:07:16.356894",
          "text": "the TR test suite code is complicated because it does a lot of different stuff (load a lot of files dynamically as tests, run in parallel, etc)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:07:46.366718",
          "text": "rackunit is complicated to use when you want to do more than just use `check-equal?` etc at the top-level of your `test` module"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:07:56.369899",
          "text": "that use case is very simple (which is great)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T16:18:43.573744",
          "text": "can you point me at any of the rackunit complication so I can wrap my head around it? I might be able to help out there a bit."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:19:41.591592",
          "text": "for example, the distinction between a test case and a test suite"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:20:48.612981",
          "text": "I think this paragraph describes my unhappiness well:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:20:50.613661",
          "text": "\"Test cases can themselves be grouped into test suites. A test suite can contain both test cases and test suites. Unlike a check or test case, a test suite is not immediately run. Instead use one of the functions described in User Interfaces or Programmatically Running Tests and Inspecting Results.\""
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T16:35:21.896443",
          "text": "yeah. I’m not entirely thrilled with that myself. IMHO any time you need to do anything more than just require something to run your tests you’ve failed."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T16:36:28.918553",
          "text": "I’m not sure how to fix that in a way that would make “normal” racket devs happy tho. I know how to do it to make *me* happy but that’s different. :slightly_smiling_face:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-15T16:36:59.928583",
          "text": "something that makes one person happy is better than making 0 people happy"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-15T16:42:29.030936",
          "text": "In my opinion, the things I find the most frustrating about rackunit is that test failures are often remarkably useless and “checks” don’t compose at all."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-15T16:43:35.051437",
          "text": "I have spent more time than I would like trying to understand why two things rackunit claims aren’t equal actually aren’t equal."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-15T16:44:21.065111",
          "text": "And writing custom checks that produce decent error messages is a huge chore, mostly because you can’t really implement a new check in terms of an existing one and still produce good check failure messages."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-15T16:45:39.089363",
          "text": "My understanding is that rackunit was just schemeunit, rolled into the main distribution, but I am not sure it’s really the same quality and adheres to the same principles as other libraries that get distributed with racket. :/"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T16:59:27.345927",
          "text": "<@Kimbery> I'm working on a library to improve rackunit error messages, especially when two data structures are \"almost\" the same: <http://docs.racket-lang.org/expect/index.html?q=expect>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T17:00:12.361309",
          "text": "It's not ready for a 0.1 release yet though (mainly due to needing some rackunit features implemented so the check info doesn't look awful)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T17:02:26.405144",
          "text": "<@Kimbery> I published check-sexp-equal for that reason… but since I can’t define any formatting it is still kinda hard to read"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T17:03:06.417883",
          "text": "minitest (in ruby) does diffing on `assert_equal` failures and provides `make_my_diffs_pretty` to ensure that big things get printed structurally. makes finding the problems a breeze in comparison"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T17:05:10.456146",
          "text": "It does it that way specifically to find inequalities deep in a nested sexp and it is really really quick to hone in on where the problem is. `check-sexp-equal?` has to embed `#:new` and `#:old` tags to show you where the differences are but the whole sexp is printed flat"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T17:05:30.462264",
          "text": "just doing a pretty-print of the output would make it much better"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T17:06:04.472437",
          "text": "<@Georgeanna> check-sexp-equal is very nice and was part of the inspiration for `expect` :)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T17:06:09.473874",
          "text": "<@Chantelle> I’m not a fan of expectations (at least from the BDD perspective). I imagine that your RHS blows up really quickly on anything non-trivial"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-15T17:06:27.479598",
          "text": "thanks! if you have any insight on how to improve its output I’m all ears"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T17:07:09.492956",
          "text": "there's \"expectation conversion\" so that you can write something like `(hash 'foo (list 1 2 (vector 'a 'b (expect-pred? number?))))` and it will convert it to an expectation that structurally matches things and reports errors in contexts"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T17:07:42.503161",
          "text": "the above example I had didn't do that because `expect!` does not yet convert its expectation argument automatically"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T17:08:02.509083",
          "text": "`(expect-equal? some-complex-data-with-hashes-and-lists-and-stuff)` will do it though"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T17:08:32.518330",
          "text": "They're more like junit/hamcrest \"matchers\" than anything else, but I wanted a more noun-y name"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-06-15T18:34:21.752702",
          "text": "I'm currently working on a test filtering feature for chk and rackunit. The idea is to be able to call `raco test my/module -- args to forward` and the test lib interprets `args to forward` as filters for test names, files, lines to run. I'm looking for feedback/feature requests based on the WIP documentation: <https://cfinegan.github.io/chk-docs/chk.html#(part._.Filtering_.Tests_with_.Command-line_.Arguments)>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T20:30:18.820748",
          "text": "<@Delmy> instead of relying on command line arguments, would it be cleaner for `raco test` to define some sort of \"filters\" concept and pass it along to test submodules? module-level filtering could work with a config submod in the test module"
        }
      ]
    },
    {
      "conversation_id": "52",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: here's an example: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T17:02:32.407161",
          "text": "here's an example:\n```\n&gt; (expect! '(10 12) (expect-list (expect-pred number?) (expect-pred string?)))\n\nexpected a different kind of value\n  subject: '(10 12)\n  in: item at position 1\n  expected: value satisfying string?\n  actual: 12\n```"
        }
      ]
    },
    {
      "conversation_id": "53",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: Please let me know what you think. Rackunit docs are coming after I figure out what features are the most popular.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "please"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-06-15T18:35:04.760748",
          "text": "Please let me know what you think. Rackunit docs are coming after I figure out what features are the most popular."
        }
      ]
    },
    {
      "conversation_id": "54",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: There's always [CODE] plus the ability to define an env var on the command-line ¯\\_(ツ)_/¯\nCorey: [CODE_BLOCK]\nCorey: Just from the POV of \"simplest thing that could possibly work\".\nCorey: Could still use some macros the sweeten the raw [CODE] stuff I suppose.\nChantelle: I always imagined doing that kind of thing with a separate submodule\nChantelle: [CODE]\nCorey: Actually yes I think I've done that way, too.\nChantelle: I'm not sure how to write the \"run these submods by default unless you're in the CI environment\" logic though\nDelmy: Chantelle [CODE] already allows you specify command-line arguments to forward in [CODE] so we could implement a better interface for specifying these filters (i.e. using data structures instead of raw strings) and allow users to do it either way, if that makes sense. What kind of interface would you like to see for something like this? I'm thinking along the lines of [CODE]. Corey Part of the idea is that users can drill down to pretty much any individual test without altering the test file itself, so you could do things like [CODE] and get just that one test result. I'm not sure that environment variables can offer the same flexibility.\nChantelle: Delmy the interface I'd ideally like is two part, where there's a way to filter \"kinds\" of tests (each test has exactly 1 kind) and there's a way to filter specific named tests\nChantelle: the \"kinds\" part requires a programmer declare what kinds of tests they have. I think different submodules like [CODE], [CODE], [CODE], etc. would be fine for that. Then [CODE] could declare what submodule names to look for by default (does [CODE] already support that?)\nCorey: There is a [CODE] command like flag e.g. [CODE] run the [CODE] submodule in [CODE]\nCorey: You can specify [CODE] multiple times, too.\nCorey: Per command line.\nChantelle: the flag is definitely useful when you're in control of the test command, like when setting up Travis\nChantelle: but I'm specifically wondering how to say \"these are tests that shouldn't run locally but should run in DrDr\"\nCorey: I think there a variety of usage scenarios, plus people have different kinds of projects with tests of varying number and speed, and also have seen different approaches in various languages.\nCorey: So for instance I'm thinking, \"why would I want to run only a test at line 20?\", but, that's just because I haven't been in that situation so far.\nCorey: I think it's probably good to lay out, \"What are some situations where we want to run some but not all tests?\"\nChantelle: I think we need to write the test frameworks that would actually need filtering before figuring out filtering :)\nCorey: And maybe also, \"What are some existing ways you can run some but not all code?\"\nChantelle: Corey what do you typically do for tests that make network calls?\nCorey: And maybe think about economical but convenient ways to compose all those? idk\nLatarsha: Chantelle Corey: TR has a [CODE] flag for its test suite\nChantelle: Latarsha what's that do?\nLatarsha: runs a single integration test\nCorey: Chantelle That's a good example where, e.g. the AWS package, I just run the tests locally with my AWS creds and there are $$ involved, so I don't run those on Travis CI or on the pkg build server. Also I run specific tests in the REPL, usually. In racket-mode if point is inside a [CODE] form, then when you \"run\" you \"enter\" that (sub)module. That includes test submods, of course. So I sometimes use that to run individual tests.\nCorey: btw I know you can feed creds securely to Travis CI, so I _could_ have it run tests against real AWS. I just mean that I don't want to have Travis run those tests on 10 different Racket versions, and on every little commit, on my nickel :wink:\nChantelle: Latarsha how large is an integration test? is it typically a couple of lines that does something heavyweight, or something module sized, or something with multiple sizable modules?\nChantelle: Corey that's definitely a good use case to keep in mind\nLatarsha: Chantelle Integration tests are by definition modules that we run to see if they typecheck/run (or if they error in the right way)\nChantelle: Latarsha out of curiosity, could you do that as a regular [CODE] that takes a syntax object and evals it?\nLatarsha: you might be interested in the code here: <[URL]\nLatarsha: Chantelle the code is really a lot more complicated than that\nChantelle: Latarsha oh wow it's spinning up multiple places and parallelizing too\nLatarsha: yeah there's a lot there\nChantelle: _and_ conditionally doing text output or gui output\nChantelle: dang\nLatarsha: you might also be interested in the much simpler match tests: <[URL]\nLatarsha: the gui code is never used and probably doesn't work\nChantelle: heh\nVincenzo: I'm preparing a substantial refactoring of Racket's I/O layer just above the OS: <[URL] The Windows part isn't ready. It's supposed to work on other platforms – but the 10k lines of code that shifted around are heavily [CODE]ed, and I also tried to clean up [CODE]s, so I expect configuration and compilation problems. If you build Racket on anything other than the most common OS distributions, I'd appreciate reports (a reply there here would be good) on whether it builds and/or has build/test errors.\nVincenzo: andreiformiga: Thanks for checking! I should have been clearer that it's the [CODE] branch of the repo; I haven't used the main branch in a while, which (based on the version number) seems to be what you built. Also, I'm going to count Windows 10 as a common OS distribution, and I'm checking that one directly. :slightly_smiling_face:\nVincenzo: I've run out of immediately available test failures for the rtkio refactoring, so I'm going to push it to the main repo's master branch. I'm still interested in build reports, though.\nLatarsha: Vincenzo here's a build failure: <[URL]\nVincenzo: Eun It looks like the [CODE] commits on June 1 caused the documentation build for [CODE] to take substantially more memory. At over 1GB, it's now the two peak memory-use points during a build (at \"running\" and \"rendering\") as shown on the graph <[URL] . Do you know offhand what might have triggered the memory use and whether it would be easily avoidable?\nEun: Vincenzo: Yes, I increased the size of the examples in the docs. The original input sizes were too small to show anything.\nEun: But I should find a better solution; that kind of memory use is not good.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 48,
        "duration_minutes": 5511.61,
        "contains_question": true,
        "action_keywords": [
          "build",
          "implement",
          "need to",
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Delmy",
          "Eun",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-06-15T20:37:15.872705",
          "text": "There's always `getenv` plus the ability to define an env var on the command-line ¯\\_(ツ)_/¯"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-15T20:37:22.873475",
          "text": "```\n$ cat example.rkt \n#lang racket/base\n\n(module test racket/base\n  (if (getenv \"BIG_TEST\")\n      (println \"Running big tests\")\n      (println \"Skipping big tests\")))\n\n$ raco test example.rkt \nraco test: (submod \"example.rkt\" test)\n\"Skipping big tests\"\n\n$ BIG_TEST=1 raco test example.rkt \nraco test: (submod \"example.rkt\" test)\n\"Running big tests\"\n```"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-15T20:38:04.878350",
          "text": "Just from the POV of \"simplest thing that could possibly work\"."
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-15T20:39:07.885699",
          "text": "Could still use some macros the sweeten the raw `getenv` stuff I suppose."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T20:39:43.889874",
          "text": "I always imagined doing that kind of thing with a separate submodule"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T20:39:56.891395",
          "text": "`(module+ integration-test ...)`"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-15T20:40:46.897451",
          "text": "Actually yes I think I've done that way, too."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-15T20:41:14.900803",
          "text": "I'm not sure how to write the \"run these submods by default unless you're in the CI environment\" logic though"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-06-16T13:35:11.218264",
          "text": "<@Chantelle> `raco test` already allows you specify command-line arguments to forward in `info.rkt` so we could implement a better interface for specifying these filters (i.e. using data structures instead of raw strings) and allow users to do it either way, if that makes sense. What kind of interface would you like to see for something like this? I'm thinking along the lines of `(struct test-filters (names-to-run k/v-filters files-to-run lines-to-run))`.\n<@Corey> Part of the idea is that users can drill down to pretty much any individual test without altering the test file itself, so you could do things like `raco test my/module -- file=foo.rkt line=20` and get just that one test result. I'm not sure that environment variables can offer the same flexibility."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T14:48:16.652782",
          "text": "<@Delmy> the interface I'd ideally like is two part, where there's a way to filter \"kinds\" of tests (each test has exactly 1 kind) and there's a way to filter specific named tests"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T14:49:27.674833",
          "text": "the \"kinds\" part requires a programmer declare what kinds of tests they have. I think different submodules like `test`, `integration-test`,  `perf-test`, etc. would be fine for that. Then `info.rkt` could declare what submodule names to look for by default (does `raco test` already support that?)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:00:17.878829",
          "text": "There is a `-s` command like flag e.g. `raco test -s slow-test file.rkt` run the `slow-test` submodule in `file.rkt`"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:01:07.895531",
          "text": "You can specify `-s mod` multiple times, too."
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:01:18.899621",
          "text": "Per command line."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:01:33.904651",
          "text": "the flag is definitely useful when you're in control of the test command, like when setting up Travis"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:01:51.910120",
          "text": "but I'm specifically wondering how to say \"these are tests that shouldn't run locally but should run in DrDr\""
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:03:37.944029",
          "text": "I think there a variety of usage scenarios, plus people have different kinds of projects with tests of varying number and speed, and also have seen different approaches in various languages."
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:04:29.959952",
          "text": "So for instance I'm thinking, \"why would I want to run only a test at line 20?\", but, that's just because I haven't been in that situation so far."
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:04:56.968027",
          "text": "I think it's probably good to lay out, \"What are some situations where we want to run some but not all tests?\""
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:05:10.972453",
          "text": "I think we need to write the test frameworks that would actually need filtering before figuring out filtering :)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:05:12.973218",
          "text": "And maybe also, \"What are some existing ways you can run some but not all code?\""
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:05:33.979674",
          "text": "<@Corey> what do you typically do for tests that make network calls?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:05:44.982621",
          "text": "And maybe think about economical but convenient ways to compose all those? idk"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:06:19.993465",
          "text": "<@Chantelle> <@Corey>: TR has a `--just` flag for its test suite"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:06:34.998063",
          "text": "<@Latarsha> what's that do?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:06:49.002832",
          "text": "runs a single integration test"
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:08:39.035232",
          "text": "<@Chantelle> That's a good example where, e.g. the AWS package, I just run the tests locally with my AWS creds and there are $$ involved, so I don't run those on Travis CI or on the pkg build server.\nAlso I run specific tests in the REPL, usually. In racket-mode if point is inside a `module` form, then when you \"run\" you \"enter\" that (sub)module. That includes test submods, of course. So I sometimes use that to run individual tests."
        },
        {
          "user": "Corey",
          "timestamp": "2017-06-16T15:12:58.108679",
          "text": "btw I know you can feed creds securely to Travis CI, so I _could_ have it run tests against real AWS. I just mean that I don't want to have Travis run those tests on 10 different Racket versions, and on every little commit, on my nickel :wink:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:13:32.117912",
          "text": "<@Latarsha> how large is an integration test? is it typically a couple of lines that does something heavyweight, or something module sized, or something with multiple sizable modules?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:13:41.120472",
          "text": "<@Corey> that's definitely a good use case to keep in mind"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:14:05.126996",
          "text": "<@Chantelle> Integration tests are by definition modules that we run to see if they typecheck/run (or if they error in the right way)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:14:48.138614",
          "text": "<@Latarsha> out of curiosity, could you do that as a regular `check` that takes a syntax object and evals it?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:14:50.139238",
          "text": "you might be interested in the code here: <https://github.com/racket/typed-racket/blob/master/typed-racket-test/main.rkt>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:15:09.144299",
          "text": "<@Chantelle> the code is really a lot more complicated than that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:16:54.174038",
          "text": "<@Latarsha> oh wow it's spinning up multiple places and parallelizing too"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:17:07.177558",
          "text": "yeah there's a lot there"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:17:53.190561",
          "text": "_and_ conditionally doing text output or gui output"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:17:55.191189",
          "text": "dang"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:18:03.193513",
          "text": "you might also be interested in the much simpler match tests: <https://github.com/racket/racket/blob/master/pkgs/racket-test/tests/match/main.rkt>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T15:18:21.198455",
          "text": "the gui code is never used and probably doesn't work"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T15:18:31.201572",
          "text": "heh"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-17T10:31:01.099593",
          "text": "I'm preparing a substantial refactoring of Racket's I/O layer just above the OS: <https://github.com/mflatt/racket/tree/rktio>\nThe Windows part isn't ready. It's supposed to work on other platforms – but the 10k lines of code that shifted around are heavily `#ifdef`ed, and I also tried to clean up `#ifdef`s, so I expect configuration and compilation problems.\nIf you build Racket on anything other than the most common OS distributions, I'd appreciate reports (a reply there here would be good) on whether it builds and/or has build/test errors."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-18T19:54:08.781874",
          "text": "andreiformiga: Thanks for checking! I should have been clearer that it's the `rktio` branch of the repo; I haven't used the main branch in a while, which (based on the version number) seems to be what you built.\nAlso, I'm going to count Windows 10 as a common OS distribution, and I'm checking that one directly. :slightly_smiling_face:"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-19T09:23:55.265274",
          "text": "I've run out of immediately available test failures for the rtkio refactoring, so I'm going to push it to the main repo's master branch. I'm still interested in build reports, though."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-19T09:47:12.739573",
          "text": "<@Vincenzo> here's a build failure: <https://travis-ci.org/racket/racket/jobs/244521015>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-19T16:00:17.949862",
          "text": "<@Eun> It looks like the `contract-profile` commits on June 1 caused the documentation build for `contract-profile.scrbl` to take substantially more memory. At over 1GB, it's now the two peak memory-use points during a build (at \"running\" and \"rendering\") as shown on the graph <http://build-plot.racket-lang.org/> .\nDo you know offhand what might have triggered the memory use and whether it would be easily avoidable?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-06-19T16:28:21.498739",
          "text": "<@Vincenzo>: Yes, I increased the size of the examples in the docs. The original input sizes were too small to show anything."
        },
        {
          "user": "Eun",
          "timestamp": "2017-06-19T16:28:52.508742",
          "text": "But I should find a better solution; that kind of memory use is not good."
        }
      ]
    },
    {
      "conversation_id": "55",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Nelson progress is a new info type <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-16T01:12:13.670945",
          "text": "<@Nelson> progress is a new info type <https://github.com/racket/rackunit/pull/40>"
        }
      ]
    },
    {
      "conversation_id": "56",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: I'm getting the impression that it's more popular to organize tests into modules than to name individual tests (or groups of tests) using the testing libraries' info tracking features. What about the ability to supply [CODE] a set of regular expressions that would be used to match against module names? Or would people be more likely to separate tests within the same module into named groups if there was better support for filtering upon that predicate?\nLatarsha: cfinegan I bet better support would make it more used\nDelmy: I agree, although it would have to be compatible with the way people organize their tests. Right now for example rackunit \"names\" tests after the type of test being invoked ([CODE], [CODE], etc.), which isn't a super useful thing to filter upon\nHelga: I'm not too familiar with the racket build process, but I think it built the base/minimal racket, failed building packages:\nHelga: &gt; raco pkg install: version mismatch for dependency &gt; for package: 2d-lib &gt; mismatch packages: &gt; base (have 6.5.0.7, need 6.6.0.3)\nHelga: Windows 10, Visual Studio 2015\nGeorgeanna: I’m still working through BR so this is a bit ahead of myself. Concrete examples (that are understandable) would be nice",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 3554.87,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Georgeanna",
          "Helga",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-06-16T16:16:50.173010",
          "text": "I'm getting the impression that it's more popular to organize tests into modules than to name individual tests (or groups of tests) using the testing libraries' info tracking features. What about the ability to supply `raco test` a set of regular expressions that would be used to match against module names? Or would people be more likely to separate tests within the same module into named groups if there was better support for filtering upon that predicate?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-16T16:17:20.181224",
          "text": "cfinegan I bet better support would make it more used"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-06-16T16:23:47.284139",
          "text": "I agree, although it would have to be compatible with the way people organize their tests. Right now for example rackunit \"names\" tests after the type of test being invoked (`check-equal?`, `check-not-false`, etc.), which isn't a super useful thing to filter upon"
        },
        {
          "user": "Helga",
          "timestamp": "2017-06-18T14:55:38.844789",
          "text": "I'm not too familiar with the racket build process, but I think it built the base/minimal racket, failed building packages:"
        },
        {
          "user": "Helga",
          "timestamp": "2017-06-18T14:56:10.846589",
          "text": "&gt; raco pkg install: version mismatch for dependency\n&gt; for package: 2d-lib\n&gt; mismatch packages:\n&gt; base (have 6.5.0.7, need 6.6.0.3)"
        },
        {
          "user": "Helga",
          "timestamp": "2017-06-18T14:57:11.850095",
          "text": "Windows 10, Visual Studio 2015"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-19T03:31:42.538244",
          "text": "I’m still working through BR so this is a bit ahead of myself. Concrete examples (that are understandable) would be nice"
        }
      ]
    },
    {
      "conversation_id": "57",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: this is a bit premature where I’m at, but can someone point me towards any code that racket provides to do free-variable analysis at macro expansion or run time? I’m wanting to expand a system I have to allow for free variables to be treated symbolically (a la Mathmatica) instead of erroring out as undefined.\nChantelle: Georgeanna if you _only_ wish to change the behavior of undefined variables, might I recommend looking at the [CODE] macro? it's inserted as a wrapper around all unbound identifiers and you can override it to change what happens when an unbound identifier occurs.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 12.42,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-19T03:30:02.517785",
          "text": "this is a bit premature where I’m at, but can someone point me towards any code that racket provides to do free-variable analysis at macro expansion or run time? I’m wanting to expand a system I have to allow for free variables to be treated symbolically (a la Mathmatica) instead of erroring out as undefined."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-19T03:42:27.660117",
          "text": "<@Georgeanna> if you _only_ wish to change the behavior of undefined variables, might I recommend looking at the `#%top` macro? it's inserted as a wrapper around all unbound identifiers and you can override it to change what happens when an unbound identifier occurs."
        }
      ]
    },
    {
      "conversation_id": "58",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stefani: zenspider: (require syntax/free-vars)\nStefani: mflatt: I like the log message :)\nChantelle: IRC-slack bridge is malfunctioning again\nChantelle: Nelson I'd like to be a contributor to [CODE] in order to label / organize issues and not deal with keeping my own fork in sync, who hath the authority to bestow this power upon me?\nNelson: Latarsha can you give jack push/issue-labeling access to [CODE]?\nLatarsha: Nelson Chantelle Done\nLatarsha: Delmy it's not clear to me what's going on with those build failures\nLatarsha: I think that something's wrong with subprocess handling on linux on master, based on Vincenzo's recent changes\nDelmy: Okay, I wanted to confirm that it wasn't an issue with the changes in my fork.\nVincenzo: Delmy It's probably not an issue with your changes, but I think your branch doesn't include the rktio changes that samth has in mind\nLatarsha: Vincenzo while Delmy's branch doesn't have those changes, Travis tests the merge of that with master\nLatarsha: the revision tested is here: <[URL]\nVincenzo: Ok, that's good to know. I'm not seeing that particular failure elsewhere, but I'll watch for it.\nLatarsha: Vincenzo the errors I see in Delmy's PR tests are the same ones I see in the tests for master -- timeouts either in git-related pkg tests, or in the regular subprocess tests\nLatarsha: I don't know if that's related to your most recent change though\nVincenzo: I'm seeing the pkg-test failures, and I hope the most recent change addresses those. I'm probably not looking at the right variant to see the subprocess example; can you point me to one?\nLatarsha: here's an example: <[URL]\nVincenzo: Oh – it's the ones with places &amp; futures disabled. Now I know how to find the bug.\nLatarsha: Great\nVincenzo: Chantelle It wouldn't be supported well by tools like [CODE], which can't deal with a dependency on a directory\nChantelle: Vincenzo what would it take to make [CODE] aware of unusual dependencies like that?\nVincenzo: I'm not sure. One complication is assigning a hash code to the directory. Another is that creating a \"compiled\" subdirectory would change the enclosing directory, which would be interpreted as a need to recompile. I bet there are more complications that I won't think of offhand.\nChantelle: How does the planet require form work with [CODE]?\nVincenzo: The default module name resolver calls out to [CODE] when it sees [CODE]\nVincenzo: Other tools similarly have hard-wired support for [CODE], which helps explain a class of problems that PLaneT has\nChantelle: huh, never would have guessed that but it makes sense\nLatarsha: yeah, when splitting the old code into pkgs, I tried to remove planet from \"base\" but was unsuccessful\nLatarsha: Vincenzo with your latest changes, only the [CODE] tests failed, and that may just be the tests in general taking too long; I'm rerunning it (<[URL]\nLatarsha: more generally our tests have gotten to the point where we have lots of intermittent failures from hitting the time limit; we should probably either speed some up or run fewer tests\nGeorgeanna: Latarsha Is it *just* a pure timeout or are these performance tests? If the former, you might want to dynamically pick the timeout based on the machine &amp; load. If the latter, my test framework has a benchmark test type that does curve fitting and asserts the R^2 value instead of the time. Makes it much more CI/VM proof.\nLatarsha: Georgeanna It's the former, and it's the Travis timeout, not ours\nLatarsha: see <[URL] for an example\nLatarsha: the major problem is that the pkg tests take about 20 minutes\nGeorgeanna: I didn't realize that travis had a global timeout. I've worked on many projects that take a really long time on CI\nLatarsha: yeah, it's about 45 minutes\nGeorgeanna: I think that's configurable… definitely had projects that went over that before I got to them (I *hate* long test times)\nGeorgeanna: oh… but maybe those projects were on circleci…\nGeorgeanna: easy parallelization options there too\nLatarsha: this doesn't parallelize well either, because you have to build racket to start with\nGeorgeanna: Latarsha: you're not parallelizing the make phase: [CODE]\nGeorgeanna: IIRC, racket does build well with [CODE]\nLatarsha: [CODE] does that\nLatarsha: but also parallelizes [CODE]\nGeorgeanna: I don't think so… I think you still need [CODE]… checking.\nLatarsha: I promise, that does it\nLatarsha: [CODE] exists because you can't get the value passed to [CODE] to use with [CODE]\nChantelle: cfinegan: No rush\nGeorgeanna: I get the [CODE] side of it wrt ENV… [CODE] is not described at all throughout the gnu make doco. It's really obtuse doco, but seems thorough.\nLatarsha: no, [CODE] is part of the racket makefile\nChantelle: My first impression is that the filtering logic seems complex and out of place, but I agree filtering is useful and thank you for working on it.\nLatarsha: see this code: <[URL]\nGeorgeanna: I'm post workout, so I'm probably not explaining myself well…\nChantelle: how specifically do you intend to use the filtering? in DrRacket with test submodules and without test suites and only checks? in CI with test suites? some other combination?\nGeorgeanna: gotcha… kk. Could also tune it. I've found for GCC being mostly IO bound that nproc*2 often works quite well.\nLatarsha: that's true for the C build step, but not for the [CODE] build step\nLatarsha: but the C build on Travis takes very little time\nGeorgeanna: thank you for having such a clean makefile…\nLatarsha: Really we just need to make some of the tests faster\nGeorgeanna: I can't see how long just the C side takes… but that whole thing is 15 minutes. That's 1/3rd the total timeout.\nGeorgeanna: you could break up the raco vs gcc side and scale accordingly… but… I'll shut up now. you obviously have this in hand and I'm just making noise at this point\nLatarsha: sadly we don't have it in hand\nGeorgeanna: hah. well… let me know if i can help\nLatarsha: well, if you can make the pkg tests faster ... :slightly_smiling_face:\nLatarsha: or even figure out which ones are particularly slow\nLatarsha: that would be a big help\nGeorgeanna: I was curious… Vincenzo was working on nuking C for chez… but then I saw a 10kloc diff for revamping IO in C. Is that a precursor to make porting easier?\nLatarsha: yes\nLatarsha: the [CODE] library is intended to be usable from other places (such as Chez)\nGeorgeanna: I'm excited about the chez port, even if it is initially slower, I suspect it'll help in the medium+ term a lot\nLatarsha: I'm also excited\nGeorgeanna: I was blown away by a recently published table of scheme benchmarks… chez was fairly consistently 1st-2nd place. Racket often in the top 5. I had no fucking idea… chicken always FELT faster because startup costs were zero, but overall perf was shite\nGeorgeanna: I should have dug in on those benchmarks to see if they were using /base\nLatarsha: Chez is very good, although those benchmarks somewhat overstate the advantage over Racket\nLatarsha: Chez is best on old-school Scheme code -- lots of plain functions and s-expressions\nGeorgeanna: basically.. the same problems all benchmarks have :stuck_out_tongue:\nLatarsha: more user-defined data structures and tricky indirections reduce the advantage\nLatarsha: which isn't to say that it isn't still there\nGeorgeanna: you(? I think) helped me make a CPU simulation fast for advent of code… really nice thing to study. Then I saw a chez impl that used [CODE] and… fuck. it was soo fast\nGeorgeanna: I didn't _understand_ it… but FAST\nChantelle: Latarsha in general, what effect do functions-stored-in-structs have on Chez's optimizations?\nChantelle: is that sort of thing tricky to handle?\nLatarsha: Chantelle I don't think I could give a useful answer there\nLatarsha: that's certainly trickier\nLatarsha: Vincenzo I don't know if you saw this failing test, but it seems rktio-related: <[URL]\nLatarsha: similarly this looks like a rktio failure: <[URL]\nLatarsha: If it would be helpful to track these elsewhere, I can do that\nLatarsha: and <[URL]\nVincenzo: Thanks – I've been looking at those, but I haven't yet fixed them",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 88,
        "duration_minutes": 3281.54,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "assign",
          "build",
          "fix",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Delmy",
          "Georgeanna",
          "Latarsha",
          "Nelson",
          "Stefani",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Stefani",
          "timestamp": "2017-06-19T07:54:50.908923",
          "text": "zenspider: (require syntax/free-vars)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-06-19T10:12:17.310853",
          "text": "mflatt: I like the log message :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-19T13:23:34.691983",
          "text": "IRC-slack bridge is malfunctioning again"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-19T18:47:16.663505",
          "text": "<@Nelson> I'd like to be a contributor to `racket/rackunit` in order to label / organize issues and not deal with keeping my own fork in sync, who hath the authority to bestow this power upon me?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-19T18:56:15.761814",
          "text": "<@Latarsha> can you give jack push/issue-labeling access to `racket/rackunit`?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T08:56:03.304889",
          "text": "<@Nelson> <@Chantelle> Done"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T11:47:30.374446",
          "text": "<@Delmy> it's not clear to me what's going on with those build failures"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T11:49:01.411587",
          "text": "I think that something's wrong with subprocess handling on linux on master, based on <@Vincenzo>'s recent changes"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-06-20T11:50:41.453206",
          "text": "Okay, I wanted to confirm that it wasn't an issue with the changes in my fork."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T11:54:32.548456",
          "text": "<@Delmy> It's probably not an issue with your changes, but I think your branch doesn't include the rktio changes that samth has in mind"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T11:56:23.594152",
          "text": "<@Vincenzo> while <@Delmy>'s branch doesn't have those changes, Travis tests the merge of that with master"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T11:56:28.596082",
          "text": "the revision tested is here: <https://github.com/racket/racket/commit/4da654e8fdeee6d196979af760f98bd4bba15732>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T12:03:33.776610",
          "text": "Ok, that's good to know. I'm not seeing that particular failure elsewhere, but I'll watch for it."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T12:06:07.839747",
          "text": "<@Vincenzo> the errors I see in <@Delmy>'s PR tests are the same ones I see in the tests for master -- timeouts either in git-related pkg tests, or in the regular subprocess tests"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T12:06:29.848583",
          "text": "I don't know if that's related to your most recent change though"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T12:06:59.860462",
          "text": "I'm seeing the pkg-test failures, and I hope the most recent change addresses those. I'm probably not looking at the right variant to see the subprocess example; can you point me to one?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T12:07:41.877859",
          "text": "here's an example: <https://travis-ci.org/racket/racket/jobs/244965444>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T12:07:48.880503",
          "text": "Oh – it's the ones with places &amp; futures disabled. Now I know how to find the bug."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T12:08:05.887188",
          "text": "Great"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T15:05:44.840421",
          "text": "<@Chantelle> It wouldn't be supported well by tools like `raco make`, which can't deal with a dependency on a directory"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T15:12:41.985018",
          "text": "<@Vincenzo> what would it take to make `raco make` aware of unusual dependencies like that?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T15:14:14.016230",
          "text": "I'm not sure. One complication is assigning a hash code to the directory. Another is that creating a \"compiled\" subdirectory would change the enclosing directory, which would be interpreted as a need to recompile. I bet there are more complications that I won't think of offhand."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T15:15:35.043662",
          "text": "How does the planet require form work with `raco make`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T15:17:21.079913",
          "text": "The default module name resolver calls out to `planet-module-name-resolver` when it sees `planet`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-20T15:18:01.093067",
          "text": "Other tools similarly have hard-wired support for `planet`, which helps explain a class of problems that PLaneT has"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T15:23:18.200632",
          "text": "huh, never would have guessed that but it makes sense"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T15:24:06.216891",
          "text": "yeah, when splitting the old code into pkgs, I tried to remove planet from \"base\" but was unsuccessful"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T15:35:41.456130",
          "text": "<@Vincenzo> with your latest changes, only the `--disable-jit` tests failed, and that may just be the tests in general taking too long; I'm rerunning it (<https://travis-ci.org/racket/racket/builds/245045634?utm_source=slack&amp;utm_medium=notification>)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T15:36:40.475860",
          "text": "more generally our tests have gotten to the point where we have lots of intermittent failures from hitting the time limit; we should probably either speed some up or run fewer tests"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:27:54.690347",
          "text": "<@Latarsha> Is it *just* a pure timeout or are these performance tests? If the former, you might want to dynamically pick the timeout based on the machine &amp; load. If the latter, my test framework has a benchmark test type that does curve fitting and asserts the R^2 value instead of the time. Makes it much more CI/VM proof."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:28:24.698620",
          "text": "<@Georgeanna> It's the former, and it's the Travis timeout, not ours"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:29:50.722424",
          "text": "see <https://travis-ci.org/racket/racket/jobs/245059751> for an example"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:30:01.725685",
          "text": "the major problem is that the pkg tests take about 20 minutes"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:30:15.729803",
          "text": "I didn't realize that travis had a global timeout. I've worked on many projects that take a really long time on CI"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:31:06.744891",
          "text": "yeah, it's about 45 minutes"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:32:20.765576",
          "text": "I think that's configurable… definitely had projects that went over that before I got to them (I *hate* long test times)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:33:34.786319",
          "text": "oh… but maybe those projects were on circleci…"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:33:46.789659",
          "text": "easy parallelization options there too"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:34:30.801644",
          "text": "this doesn't parallelize well either, because you have to build racket to start with"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:34:52.807813",
          "text": "<@Latarsha>: you're not parallelizing the make phase: `make CPUS=\"2\" PKGS=\"racket-test db-test unstable-flonum-lib net-test\" CONFIGURE_ARGS_qq=\"$RACKET_CONFIGURE_ARGS\"`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:35:02.810543",
          "text": "IIRC, racket does build well with `-j N`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:35:10.812821",
          "text": "`CPUS=2` does that"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:35:23.816609",
          "text": "but also parallelizes `raco setup`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:36:48.839803",
          "text": "I don't think so… I think you still need `-j`… checking."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:37:24.848947",
          "text": "I promise, that does it"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:38:03.859074",
          "text": "`CPUS=N` exists because you can't get the value passed to `-j` to use with `raco setup`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T17:38:37.868007",
          "text": "cfinegan: No rush"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:39:46.886518",
          "text": "I get the `raco` side of it wrt ENV… `CPUS` is not described at all throughout the gnu make doco. It's really obtuse doco, but seems thorough."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:40:12.893428",
          "text": "no, `CPUS` is part of the racket makefile"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T17:40:15.894155",
          "text": "My first impression is that the filtering logic seems complex and out of place, but I agree filtering is useful and thank you for working on it."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:40:38.900388",
          "text": "see this code: <https://github.com/racket/racket/blob/master/Makefile#L45-L53>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:40:39.900485",
          "text": "I'm post workout, so I'm probably not explaining myself well…"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T17:40:52.904092",
          "text": "how specifically do you intend to use the filtering? in DrRacket with test submodules and without test suites and only checks? in CI with test suites? some other combination?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:41:51.919524",
          "text": "gotcha… kk. Could also tune it. I've found for GCC being mostly IO bound that nproc*2 often works quite well."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:42:22.927856",
          "text": "that's true for the C build step, but not for the `raco setup` build step"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:42:39.932226",
          "text": "but the C build on Travis takes very little time"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:42:41.932750",
          "text": "thank you for having such a clean makefile…"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:43:05.939148",
          "text": "Really we just need to make some of the tests faster"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:43:43.949109",
          "text": "I can't see how long just the C side takes… but that whole thing is 15 minutes. That's 1/3rd the total timeout."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:44:13.957184",
          "text": "you could break up the raco vs gcc side and scale accordingly… but… I'll shut up now. you obviously have this in hand and I'm just making noise at this point"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:44:27.961015",
          "text": "sadly we don't have it in hand"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:44:36.963212",
          "text": "hah. well… let me know if i can help"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:44:49.966739",
          "text": "well, if you can make the pkg tests faster ... :slightly_smiling_face:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:44:57.968851",
          "text": "or even figure out which ones are particularly slow"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:45:02.970225",
          "text": "that would be a big help"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:45:04.970767",
          "text": "I was curious… <@Vincenzo> was working on nuking C for chez… but then I saw a 10kloc diff for revamping IO in C. Is that a precursor to make porting easier?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:45:09.972209",
          "text": "yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:45:28.977368",
          "text": "the `rktio` library is intended to be usable from other places (such as Chez)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:45:42.981123",
          "text": "I'm excited about the chez port, even if it is initially slower, I suspect it'll help in the medium+ term a lot"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:46:27.993047",
          "text": "I'm also excited"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:46:49.999036",
          "text": "I was blown away by a recently published table of scheme benchmarks… chez was fairly consistently 1st-2nd place. Racket often in the top 5. I had no fucking idea… chicken always FELT faster because startup costs were zero, but overall perf was shite"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:47:15.005871",
          "text": "I should have dug in on those benchmarks to see if they were using /base"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:47:38.011728",
          "text": "Chez is very good, although those benchmarks somewhat overstate the advantage over Racket"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:48:00.017389",
          "text": "Chez is best on old-school Scheme code -- lots of plain functions and s-expressions"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:48:29.025069",
          "text": "basically.. the same problems all benchmarks have :stuck_out_tongue:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:48:34.026187",
          "text": "more user-defined data structures and tricky indirections reduce the advantage"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:48:44.028718",
          "text": "which isn't to say that it isn't still there"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:49:29.040698",
          "text": "you(? I think) helped me make a CPU simulation fast for advent of code… really nice thing to study. Then I saw a chez impl that used `define-register` and… fuck. it was soo fast"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-20T17:49:39.043289",
          "text": "I didn't _understand_ it… but FAST"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T17:49:50.046085",
          "text": "<@Latarsha> in general, what effect do functions-stored-in-structs have on Chez's optimizations?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T17:50:14.052191",
          "text": "is that sort of thing tricky to handle?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:50:19.053520",
          "text": "<@Chantelle> I don't think I could give a useful answer there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-20T17:50:24.054850",
          "text": "that's certainly trickier"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-21T13:52:09.346562",
          "text": "<@Vincenzo> I don't know if you saw this failing test, but it seems rktio-related: <http://drdr.racket-lang.org/40902/racket/share/pkgs/unix-socket-test/tests/unix-socket/unix-socket.rkt>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-21T13:56:50.454622",
          "text": "similarly this looks like a rktio failure: <http://drdr.racket-lang.org/40902/racket/collects/file/private/glob.rkt>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-21T13:57:05.460532",
          "text": "If it would be helpful to track these elsewhere, I can do that"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-21T14:00:22.537312",
          "text": "and <http://drdr.racket-lang.org/40902/pkgs/racket-test/tests/file/cache.rkt>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-21T14:36:23.344321",
          "text": "Thanks – I've been looking at those, but I haven't yet fixed them"
        }
      ]
    },
    {
      "conversation_id": "59",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Chantelle that might actually be perfect. thank you.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-19T16:52:14.965415",
          "text": "<@Chantelle> that might actually be perfect. thank you."
        }
      ]
    },
    {
      "conversation_id": "60",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: What does it mean when the Travis CI build fails? I submitted a pull request that's causing the travis build to fail with GCC errors even though I didn't touch any of the C code. <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "build",
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-06-20T10:39:26.639709",
          "text": "What does it mean when the Travis CI build fails? I submitted a pull request that's causing the travis build to fail with GCC errors even though I didn't touch any of the C code. <https://github.com/racket/racket/pull/1726>"
        }
      ]
    },
    {
      "conversation_id": "61",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Is \"require all modules in directory X\" a reasonable thing to do? or does it have subtle problems with when exactly the directory is read based on when modules are compiled?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T14:57:36.658269",
          "text": "Is \"require all modules in directory X\" a reasonable thing to do? or does it have subtle problems with when exactly the directory is read based on when modules are compiled?"
        }
      ]
    },
    {
      "conversation_id": "62",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Delmy got time for some questions about racket/rackunit#44?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-20T17:07:07.319705",
          "text": "<@Delmy> got time for some questions about racket/rackunit#44?"
        }
      ]
    },
    {
      "conversation_id": "63",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: Chantelle might not be able to get to everything until tomorrow morning, but I'm happy to take questions",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Delmy"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-06-20T17:36:22.832725",
          "text": "<@Chantelle> might not be able to get to everything until tomorrow morning, but I'm happy to take questions"
        }
      ]
    },
    {
      "conversation_id": "64",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: I agree that the filtering logic is complex. However, I'm not sure that it can be improved through simplification. Using a strict [CODE] relationship would result in behaviors that, I think would be unintuitive to users. An argument [CODE], for example, would result in all test that are in file [CODE] *or* line 20 being run, when the user probably meant \"run the test in foo.rkt on line 20.\" Similarly with names, under a strict [CODE] relationship, an argument of [CODE] would result in all tests with the name \"mytest\" *or* the file name [CODE] being run. The user in this circumstance probably meant \"Run all the tests named 'mytest' in foo.rkt.\" The [CODE] relationship allows users to make more specific queries, which in my opinion is more valuable than simplicity of implemenation, since a user who wishes to cast a wider net can simply run [CODE] multiple times.\nDelmy: I think the primary use case is for users who want to avoid running tests which are computationally expensive or which clutter standard output. It's intended to be used in combination with racket pull request 1726 (<[URL] which allows users of [CODE] to forward arguments to the test modules being invoked. This was inspired in part by the testing frameworks of other popular languages like Ruby and Python, which allow users to specify from the command line sets of names to run.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 6.89,
        "contains_question": false,
        "action_keywords": [
          "agree"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-06-21T10:28:01.487786",
          "text": "I agree that the filtering logic is complex. However, I'm not sure that it can be improved through simplification. Using a strict `or` relationship would result in behaviors that, I think would be unintuitive to users. An argument `file:foo.rkt line:20`, for example, would result in all test that are in file `foo.rkt` *or* line 20 being run, when the user probably meant \"run the test in foo.rkt on line 20.\" Similarly with names, under a strict `or` relationship, an argument of `mytest file:foo.rkt` would result in all tests with the name \"mytest\" *or* the file name `foo.rkt` being run. The user in this circumstance probably meant \"Run all the tests named 'mytest' in foo.rkt.\" The `and` relationship allows users to make more specific queries, which in my opinion is more valuable than simplicity of implemenation, since a user who wishes to cast a wider net can simply run `raco test` multiple times."
        },
        {
          "user": "Delmy",
          "timestamp": "2017-06-21T10:34:54.665204",
          "text": "I think the primary use case is for users who want to avoid running tests which are computationally expensive or which clutter standard output. It's intended to be used in combination with racket pull request 1726 (<https://github.com/racket/racket/pull/1726>), which allows users of `raco test` to forward arguments to the test modules being invoked. This was inspired in part by the testing frameworks of other popular languages like Ruby and Python, which allow users to specify from the command line sets of names to run."
        }
      ]
    },
    {
      "conversation_id": "65",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Natosha I think the test failure with \"unix-socket.rkt\" is a bug in \"unix-socket.rkt\". When the custodian-shutdown callback is triggered for a listener, the listerner struct still has a value for [CODE] – so the [CODE] callback can recreate the semaphore for [CODE] even though that's not a valid file descriptor anymore. Adding a poll of [CODE] before creating the semaphore makes the test to pass on my machine, but if I'm diagnosing the problem correctly, maybe there's a better repair.\nNatosha: Vincenzo, yes, that makes sense. But now I can't understand why it ever worked in the past. Any idea what changed?\nVincenzo: The way the fd-semaphore table interacts with the scheduler is probably slightly different than before\nNatosha: I think maybe that code is trying too hard to compose a pretty solution out of nice pieces like custodian-boxes-acting-as-evts. It might be cleaner with another custodian shutdown procedure specialized to listeners. I'll try that.\nNatosha: Vincenzo, just pushed a fix\nVincenzo: Latarsha On Travis tests: It looks like we spend about 15 minutes on [CODE], about 8 minutes on [CODE], about 20 minutes on [CODE] tests, and a little while for the rest. What if we drop the [CODE] tests? Has that set of test ever exposed a problem via Travis that wasn't discovered otherwise (either through DrDr or other tests)?\nLatarsha: Vincenzo I think we probably have at some point, but maybe not enough to be worth it (or worth trying to make the [CODE] tests faster)\nLatarsha: let me look at the history for the pkg code\nLatarsha: Vincenzo Travis exposed some problems in the [CODE] tests themselves, and it's possible that <[URL] was motivated by Travis tests (but hard to tell now)\nLatarsha: that seems to be it that I can find\nLatarsha: Not sure that's enough of a positive record to be worth running 80 min of tests on every commit\nVincenzo: Latarsha I don't recall the immediate motivation there, either. Turning off the [CODE] test for Travis seems right to me.\nVincenzo: zenspider: I'm not clear what code you're running. Do you mean that you're using \"basic-2-tutorial.zip\" unmodified?\nGeorgeanna: sorry, no. I have implemented all of basic up to the point of implementing the completed colorer, so [CODE] w/ my own main and basic/colorer. Lemme see if I’m fully pushed\nGeorgeanna: OK. I am: <[URL]\nVincenzo: Ok, I guess I'm actually unclear on how to get into the state you showed. But I also notice that keywords are given the style [CODE], which seems to mean \"don't change the color\" – that is, if \"prin\" was formerly red to show an error then it won't be changed to a different color if it becomes part of \"print\"\nGeorgeanna: that’s exactly the scenario. I can make a video to show it… but put `print” up there, it’ll turn a proper color, backspace once and wait until “prin” goes red, and then type “t”. Only the “t” is black at that point.\nGeorgeanna: sorry to bother you with this. mbutterick isn’t on anything online and doesn’t respond much to my MANY reports against his content\nGeorgeanna: well… damn. I can’t reproduce the red color right now either… I’m gonna have to back up to figure out why/how\nGeorgeanna: OK. Yes, I can reproduce. I had an extra commit from halfway through the next section which adds variables to the lexer. If I roll that out, then the 80% red 20% black thing sticks. If I change the no-color line to symbol, then it does redraw properly. Is there a “normal-but-not-no-color” value? I don’t see where drracket’s color semantics are documented\nGeorgeanna: OK. I used [CODE] and dug up [CODE] module and decided a fair default was [CODE] and it seems to have fixed it… I’ll send that as feedback to BR",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 21,
        "duration_minutes": 2196.35,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "create",
          "decide",
          "fix",
          "implement"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Georgeanna",
          "Latarsha",
          "Natosha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-21T16:27:13.680512",
          "text": "<@Natosha> I think the test failure with \"unix-socket.rkt\" is a bug in \"unix-socket.rkt\". When the custodian-shutdown callback is triggered for a listener, the listerner struct still has a value for `fd` – so the `prop:evt` callback can recreate the semaphore for `fd` even though that's not a valid file descriptor anymore. Adding a poll of `reg-box` before creating the semaphore makes the test to pass on my machine, but if I'm diagnosing the problem correctly, maybe there's a better repair."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-06-21T17:37:17.016663",
          "text": "<@Vincenzo>, yes, that makes sense. But now I can't understand why it ever worked in the past. Any idea what changed?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-21T17:38:24.034956",
          "text": "The way the fd-semaphore table interacts with the scheduler is probably slightly different than before"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-06-21T17:40:16.065237",
          "text": "I think maybe that code is trying too hard to compose a pretty solution out of nice pieces like custodian-boxes-acting-as-evts. It might be cleaner with another custodian shutdown procedure specialized to listeners. I'll try that."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-06-21T18:36:33.843043",
          "text": "<@Vincenzo>, just pushed a fix"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-22T11:53:36.583114",
          "text": "<@Latarsha> On Travis tests: It looks like we spend about 15 minutes on `make`, about 8 minutes on `racket-test-core`, about 20 minutes on `raco pkg` tests, and a little while for the rest.\nWhat if we drop the `raco pkg` tests? Has that set of test ever exposed a problem via Travis that wasn't discovered otherwise (either through DrDr or other tests)?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-22T11:54:48.611199",
          "text": "<@Vincenzo> I think we probably have at some point, but maybe not enough to be worth it (or worth trying to make the `raco pkg` tests faster)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-22T11:54:59.615999",
          "text": "let me look at the history for the pkg code"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-22T12:12:19.035792",
          "text": "<@Vincenzo> Travis exposed some problems in the `raco pkg` tests themselves, and it's possible that <https://github.com/racket/racket/commit/a5f6bf34dc75e33dd8a09d6ee7c9ea509395feb2> was motivated by Travis tests (but hard to tell now)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-22T12:12:30.039842",
          "text": "that seems to be it that I can find"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-22T12:13:47.068258",
          "text": "Not sure that's enough of a positive record to be worth running 80 min of tests on every commit"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-22T12:51:25.898384",
          "text": "<@Latarsha> I don't recall the immediate motivation there, either. Turning off the `raco pkg` test for Travis seems right to me."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-22T16:08:15.124427",
          "text": "zenspider: I'm not clear what code you're running. Do you mean that you're using \"basic-2-tutorial.zip\" unmodified?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-22T16:16:06.277703",
          "text": "sorry, no. I have implemented all of basic up to the point of implementing the completed colorer, so `#lang basic` w/ my own main and basic/colorer. Lemme see if I’m fully pushed"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-22T16:16:57.294763",
          "text": "OK. I am: <https://github.com/zenspider/schemers/tree/master/br/basic>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-22T16:43:23.820688",
          "text": "Ok, I guess I'm actually unclear on how to get into the state you showed. But I also notice that keywords are given the style `'no-color`, which seems to mean \"don't change the color\" – that is, if \"prin\" was formerly red to show an error then it won't be changed to a different color if it becomes part of \"print\""
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-22T17:44:19.903115",
          "text": "that’s exactly the scenario. I can make a video to show it… but put `print” up there, it’ll turn a proper color, backspace once and wait until “prin” goes red, and then type “t”. Only the “t” is black at that point."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-22T17:44:42.909336",
          "text": "sorry to bother you with this. mbutterick isn’t on anything online and doesn’t respond much to my MANY reports against his content"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-22T17:50:20.994746",
          "text": "well… damn. I can’t reproduce the red color right now either… I’m gonna have to back up to figure out why/how"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-23T04:21:37.231520",
          "text": "OK. Yes, I can reproduce. I had an extra commit from halfway through the next section which adds variables to the lexer. If I roll that out, then the 80% red 20% black thing sticks. If I change the no-color line to symbol, then it does redraw properly. Is there a “normal-but-not-no-color” value? I don’t see where drracket’s color semantics are documented"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-23T05:03:34.785433",
          "text": "OK. I used `ag` and dug up `syntax-color` module and decided a fair default was `other` and it seems to have fixed it… I’ll send that as feedback to BR"
        }
      ]
    },
    {
      "conversation_id": "66",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: my get-info function for my #lang is buggy… is there a lighter weight way to test it w/o reloading drracket left and right?\nGeorgeanna: [CODE_BLOCK]\nGeorgeanna: ok… I have that fixed… tho I have to say I have no idea how / why the lexer coloring function works the way it does. Also seems buggy. If I type [CODE] it in red. It should go black when I add the final [CODE] for [CODE] but then I have a word that is 80% red and 20% black. DrRacket doesn’t seem to re-lex &amp; color the whole word as it changes?\nVincenzo: Georgeanna DrRacket's colorer depends on the lexer giving it information to back up just enough to recolor. I'm guessing that something about the lexer prevented the colorer from going pack to the \"p\" to re-lex from there. Exactly what went wrong is difficult to guess, although I recall implementing error tokens wrong once or twice, maybe because it's easy to have the wrong backup or not have the error range covered by a single token.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 622.85,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-21T23:15:50.187291",
          "text": "my get-info function for my #lang is buggy… is there a lighter weight way to test it w/o reloading drracket left and right?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-21T23:16:28.191431",
          "text": "```\nexception raised by exception handler: result arity mismatch;\n expected number of values not received\n  expected: 1\n  received: 7\n  values...:\n   \"\\n\"\n   'white-space\n   #f\n   12\n   13\n   0\n   #f; original exception raised: colorer.rkt:11:5: srcloc-token: unbound identifier in module\n  in: srcloc-token\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-21T23:36:28.318345",
          "text": "ok… I have that fixed… tho I have to say I have no idea how / why the lexer coloring function works the way it does. Also seems buggy. If I type `prin` it in red. It should go black when I add the final `t` for `print` but then I have a word that is 80% red and 20% black. DrRacket doesn’t seem to re-lex &amp; color the whole word as it changes?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-22T09:38:41.280940",
          "text": "<@Georgeanna> DrRacket's colorer depends on the lexer giving it information to back up just enough to recolor. I'm guessing that something about the lexer prevented the colorer from going pack to the \"p\" to re-lex from there. Exactly what went wrong is difficult to guess, although I recall implementing error tokens wrong once or twice, maybe because it's easy to have the wrong backup or not have the error range covered by a single token."
        }
      ]
    },
    {
      "conversation_id": "67",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Vincenzo this is what I’m working from: <[URL] — seems straightforward to me. I would have thought it would always be going back some to do coloring… I do find it rather odd that it is creating a [CODE] on each call. What if the language needed stateful info to tell?\nVincenzo: I'll look a little more, but to answer your last question, the coloring API supports an extended mode to let you thread through state (i.e., store-passing), so the colorer can keep track of which state to send back if it needs to resume from a particular point",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 6.9,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-22T15:24:15.231393",
          "text": "<@Vincenzo> this is what I’m working from: <http://beautifulracket.com/basic-2/the-syntax-colorer.html> — seems straightforward to me. I would have thought it would always be going back some to do coloring… I do find it rather odd that it is creating a `basic-lexer` on each call. What if the language needed stateful info to tell?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-22T15:31:09.369684",
          "text": "I'll look a little more, but to answer your last question, the coloring API supports an extended mode to let you thread through state (i.e., store-passing), so the colorer can keep track of which state to send back if it needs to resume from a particular point"
        }
      ]
    },
    {
      "conversation_id": "68",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: hi Natosha, may I ask how you were able to configure the build you used to test <[URL] changes? I tried doing a local merge with the master branch but the build keeps failing with Racket aborting in middle of [CODE] so I'm currently unable to replicate the errors you got. I do totally believe you :slightly_smiling_face: and I understand that my code caused SQL_BUSY status codes to be converted into raised exceptions, breaking automatic retry. I'm just concerned that I'm effectively blind to seeing that at my end.\nNatosha: Jacob I started with the current master branch and used [CODE] ([CODE] is a github-enhanced version of the [CODE] command) to add your changes. The effect should be the same as starting with your PR branch and rebasing with the current master branch. (And probably the same as just doing a merge, except without the merge commit.) How is the build failing? Out of memory, or something else?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 35.15,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob",
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-06-22T15:56:10.873291",
          "text": "hi <@Natosha>, may I ask how you were able to configure the build you used to test <https://github.com/racket/racket/pull/1704> changes? I tried doing a local merge with the master branch but the build keeps failing with Racket aborting in middle of `raco setup` so I'm currently unable to replicate the errors you got.\n\nI do totally believe you :slightly_smiling_face: and I understand that my code caused SQL_BUSY status codes to be converted into raised exceptions, breaking automatic retry. I'm just concerned that I'm effectively blind to seeing that at my end."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-06-22T16:31:19.582453",
          "text": "<@Jacob> I started with the current master branch and used `hub am` (`hub` is a github-enhanced version of the `git` command) to add your changes. The effect should be the same as starting with your PR branch and rebasing with the current master branch. (And probably the same as just doing a merge, except without the merge commit.) How is the build failing? Out of memory, or something else?"
        }
      ]
    },
    {
      "conversation_id": "69",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: So far when I'm building a fresh [CODE] binary on my Windows machine using [CODE] it fails with either error [CODE] or [CODE] Googling those error codes tell me that it appears to be a memory corruption issue. I tried doing build based off just the [CODE] branch without my changes merged and also a fresh build after doing a checkout of the v6.9 tag. I still get failing builds so I think this is something specific to my machine. I don't know yet what's wrong, I was able to build from the v6.9 codebase without issues at least a month ago. I'll give this another try when I have access to a different Windows machine. Are you satisfied with the most recent PR commit push?\nNatosha: Jacob yes, I'll push them, thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 495.41,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob",
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-06-23T11:55:22.265052",
          "text": "So far when I'm building a fresh `amd64` binary on my Windows machine using `nmake win32-in-place` it fails with either error `nmake : fatal error U1077: 'racket/racket.EXE' : return code '0xc0000005'` or `nmake : fatal error U1077: 'racket/racket.EXE' : return code '0xc0000374'` Googling those error codes tell me that it appears to be a memory corruption issue. \n\nI tried doing build based off just the `master` branch without my changes merged and also a fresh build after doing a checkout of the v6.9 tag. I still get failing builds so I think this is something specific to my machine. I don't know yet what's wrong, I was able to build from the v6.9 codebase without issues at least a month ago.\n\nI'll give this another try when I have access to a different Windows machine. Are you satisfied with the most recent PR commit push?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-06-23T20:10:46.801683",
          "text": "<@Jacob> yes, I'll push them, thanks!"
        }
      ]
    },
    {
      "conversation_id": "70",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Nelson did you have more comments on <[URL] or shall I merge?\nNelson: go merge!\nChantelle: huzzah!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 47.92,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T11:43:22.701180",
          "text": "<@Nelson> did you have more comments on <https://github.com/racket/rackunit/pull/41> or shall I merge?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-26T12:30:57.767575",
          "text": "go merge!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T12:31:17.774855",
          "text": "huzzah!"
        }
      ]
    },
    {
      "conversation_id": "71",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Vincenzo since the rktio changes, this test and a few like it have been failing on and off: <[URL]\nLatarsha: I realize that's not the most helpful diagnostic information\nLatarsha: It's also not clear if this is a concurrency bug in the tests that just started happening because of your changes, or if it's a real bug in Racket\nVincenzo: Latarsha Is port number 8888 reserved in DrDr for that test?\nLatarsha: It's the only occurrence of 8888 in [CODE]\nVincenzo: I guess non-registration would be a [CODE] error anyway\nLatarsha: is there a reservation mechanism in DrDr that I've forgotten about?\nVincenzo: There's some list of ports somewhere. Maybe it's not actually registered other than being in the list.\nVincenzo: Looking at that test, though, isn't there a race between the client starting and the server listening?\nLatarsha: it does look like a race\nLatarsha: looks like the race was there from the beginning, in <[URL]\nLatarsha: I'll add some synchronization\nGeorgeanna: Latarsha what’s the racket’y way of doing that? I don’t find an equivalent to C/unix [CODE], which is what I’d normally reach for…\nLatarsha: Georgeanna [CODE] is the equivalent of [CODE]\nLatarsha: but in this case I think I can just start the client later\nLatarsha: no, that's wrong too\nGeorgeanna: heh. sure.\nGeorgeanna: hrm. sync is on _any_ data you send through the channel?\nGeorgeanna: that’s nice\nLatarsha: [CODE] is very nice\nLatarsha: and more composable than select\nGeorgeanna: but [CODE] is an exception, not some sort of event you send through?\nGeorgeanna: hrm… I can’t tell how the break stuff gets fired\nGeorgeanna: is it more idiomatic to send off a [CODE] to all your child threads or to send through some sort of [CODE] datum/event to all of them?\nLatarsha: Georgeanna why would you need to do that?\nGeorgeanna: thinking of the worker model… fire off a pool of threads to do work, throw them things to work on via [CODE], then when you’re done shut them down by telling them to stop somehow\nGeorgeanna: might be backwards thinking in racket land\nLatarsha: mostly you do [CODE]-per-connection\nChantelle: worker thread pools are more useful when stopping and starting threads is expensive and the resource overhead per-thread is significant\nChantelle: for green thread systems like racket's that's typically not the case\nLatarsha: right, I use pools of Racket places in some situations\nLatarsha: since those are expensive\nChantelle: a package providing a nice place-pool abstraction might be useful\nChantelle: Latarsha out of curiosity, do you know of any multicore webservers written in racket with places?\nLatarsha: I think I've seen examples, but not that I recall offhand\nChantelle: Marlin how'd it work out? my first impression is that it seems like individual places should be responsible for binding to OS ports, but I haven't really done more than idly daydream about the problem\nMarlin: Chantelle I never took the idea very far :slightly_smiling_face: You definitely could have different places bind to different ports, but then you'd need a proxy layer in front of that, right? You can also leave a single place in charge of accepting connections and handing them off to workers (which is what I was toying around with), but that seems like a bit lightweight of a task for a place.\nChantelle: specifically I was thinking of how to make a Racket web service with the SEDA architecture <[URL]\nChantelle: Nelson :party: :party: :party: <[URL]\nChantelle: Nelson responded to #48, assuming your approval means it's good to merge\nChantelle: death to the monads :tada:\nNelson: yep! I just had those little questions\nChantelle: thanks for all the reviews :)\nNelson: of course, I'm just a concerned user of Rackunit. Thanks for all the improvements",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 44,
        "duration_minutes": 1461.54,
        "contains_question": true,
        "action_keywords": [
          "action",
          "need to",
          "review",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Latarsha",
          "Marlin",
          "Nelson",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:06:53.444660",
          "text": "<@Vincenzo> since the rktio changes, this test and a few like it have been failing on and off: <http://drdr.racket-lang.org/41014/pkgs/racket-benchmarks/tests/racket/benchmarks/shootout/typed/echo-non-optimizing.rkt>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:07:08.449020",
          "text": "I realize that's not the most helpful diagnostic information"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:09:45.495072",
          "text": "It's also not clear if this is a concurrency bug in the tests that just started happening because of your changes, or if it's a real bug in Racket"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-26T17:11:09.520486",
          "text": "<@Latarsha> Is port number 8888 reserved in DrDr for that test?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:12:02.535826",
          "text": "It's the only occurrence of 8888 in `racket/racket`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-26T17:12:11.538483",
          "text": "I guess non-registration would be a `listen` error anyway"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:12:18.540211",
          "text": "is there a reservation mechanism in DrDr that I've forgotten about?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-26T17:12:50.549967",
          "text": "There's some list of ports somewhere. Maybe it's not actually registered other than being in the list."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-26T17:13:12.556320",
          "text": "Looking at that test, though, isn't there a race between the client starting and the server listening?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:16:33.614686",
          "text": "it does look like a race"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:18:35.648829",
          "text": "looks like the race was there from the beginning, in <https://github.com/racket/racket/blob/d615bccb08274398f347b78a1dd746fe40eb3671/collects/tests/mzscheme/benchmarks/shootout/echo.ss>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:18:43.651144",
          "text": "I'll add some synchronization"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:34:53.916921",
          "text": "<@Latarsha> what’s the racket’y way of doing that? I don’t find an equivalent to C/unix `select`, which is what I’d normally reach for…"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:35:15.922509",
          "text": "<@Georgeanna> `sync` is the equivalent of `select`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:35:28.926122",
          "text": "but in this case I think I can just start the client later"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:36:10.936463",
          "text": "no, that's wrong too"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:36:29.941640",
          "text": "heh. sure."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:36:58.948997",
          "text": "hrm. sync is on _any_ data you send through the channel?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:37:10.952408",
          "text": "that’s nice"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:37:30.957456",
          "text": "`sync` is very nice"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:37:39.959628",
          "text": "and more composable than select"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:38:12.967988",
          "text": "but `break` is an exception, not some sort of event you send through?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:38:28.972080",
          "text": "hrm… I can’t tell how the break stuff gets fired"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:41:26.017247",
          "text": "is it more idiomatic to send off a `break-thread` to all your child threads or to send through some sort of `stop` datum/event to all of them?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:43:06.042681",
          "text": "<@Georgeanna> why would you need to do that?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:43:57.055640",
          "text": "thinking of the worker model… fire off a pool of threads to do work, throw them things to work on via `sync`, then when you’re done shut them down by telling them to stop somehow"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-26T17:44:07.058037",
          "text": "might be backwards thinking in racket land"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:44:35.065411",
          "text": "mostly you do `thread`-per-connection"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T17:52:21.181971",
          "text": "worker thread pools are more useful when stopping and starting threads is expensive and the resource overhead per-thread is significant"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T17:52:56.190549",
          "text": "for green thread systems like racket's that's typically not the case"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:53:20.196308",
          "text": "right, I use pools of Racket places in some situations"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:53:24.197278",
          "text": "since those are expensive"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T17:53:55.204826",
          "text": "a package providing a nice place-pool abstraction might be useful"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T17:55:19.225491",
          "text": "<@Latarsha> out of curiosity, do you know of any multicore webservers written in racket with places?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T17:55:53.233657",
          "text": "I think I've seen examples, but not that I recall offhand"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T18:03:08.338884",
          "text": "<@Marlin> how'd it work out? my first impression is that it seems like individual places should be responsible for binding to OS ports, but I haven't really done more than idly daydream about the problem"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-06-26T18:05:54.377426",
          "text": "<@Chantelle> I never took the idea very far :slightly_smiling_face:\n\nYou definitely could have different places bind to different ports, but then you'd need a proxy layer in front of that, right? You can also leave a single place in charge of accepting connections and handing them off to workers (which is what I was toying around with), but that seems like a bit lightweight of a task for a place."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T18:07:10.394280",
          "text": "specifically I was thinking of how to make a Racket web service with the SEDA architecture <https://en.wikipedia.org/wiki/Staged_event-driven_architecture>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T21:23:02.249685",
          "text": "<@Nelson> :party: :party: :party: <https://github.com/racket/rackunit/pull/48>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-27T17:11:48.420307",
          "text": "<@Nelson> responded to #48, assuming your approval means it's good to merge"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-27T17:12:58.440984",
          "text": "death to the monads :tada:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-27T17:24:10.642788",
          "text": "yep! I just had those little questions"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-27T17:27:17.698440",
          "text": "thanks for all the reviews :)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-06-27T17:28:25.718344",
          "text": "of course, I'm just a concerned user of Rackunit. Thanks for all the improvements"
        }
      ]
    },
    {
      "conversation_id": "72",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Marlin: Chantelle I've played around with that idea in the past. I think it would be a bit more straightforward if a tcp listener could be sent over a place channel.\nChantelle: proxy layer would definitely be needed, yes",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 7.9,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Marlin",
          "timestamp": "2017-06-26T17:59:03.279019",
          "text": "<@Chantelle> I've played around with that idea in the past. I think it would be a bit more straightforward if a tcp listener could be sent over a place channel."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-26T18:06:57.391388",
          "text": "proxy layer would definitely be needed, yes"
        }
      ]
    },
    {
      "conversation_id": "73",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Nelson <[URL] looks like it's caused by your changes",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-06-26T21:46:21.423778",
          "text": "<@Nelson> <http://drdr.racket-lang.org/41016/racket/share/pkgs/redex-test/redex/tests/run-tests.rkt> looks like it's caused by your changes"
        }
      ]
    },
    {
      "conversation_id": "74",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: would it be inappropriate for rackunit to depend on [CODE]?\nKimbery: I doubt it would be a problem, given that [CODE] is in [CODE]\nChantelle: I'm less worried about package dependencies and more worried about test execution speed slowing down if loading [CODE] is expensive\nKimbery: I guess that’s a valid concern, yeah\nChantelle: but I have no idea how expensive loading [CODE] is",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 3.93,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-06-27T19:54:34.546247",
          "text": "would it be inappropriate for rackunit to depend on `syntax/parse`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-27T19:55:28.554953",
          "text": "I doubt it would be a problem, given that `syntax/parse` is in `base`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-27T19:56:21.562866",
          "text": "I'm less worried about package dependencies and more worried about test execution speed slowing down if loading `syntax/parse` is expensive"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-06-27T19:57:27.573133",
          "text": "I guess that’s a valid concern, yeah"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-06-27T19:58:30.582336",
          "text": "but I have no idea how expensive loading `syntax/parse` is"
        }
      ]
    },
    {
      "conversation_id": "75",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: It should be fine\nLavenia: Is the order of the marks of continuation-mark-set-&gt;list specified? <[URL]\nLatarsha: Lavenia the innermost mark is first, I think\nLavenia: Makes sense.\nLatarsha: discussion about 2d syntax on Hacker News: <[URL] (cc Tina)\nTina: whee!\nLatarsha: it's actually pretty positive",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 3933.63,
        "contains_question": true,
        "action_keywords": [
          "discuss",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Lavenia",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-06-27T20:28:51.849913",
          "text": "It should be fine"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-06-29T12:57:31.134607",
          "text": "Is the order of the marks of continuation-mark-set-&gt;list specified?  <http://docs.racket-lang.org/reference/contmarks.html>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-29T13:14:35.510839",
          "text": "<@Lavenia> the innermost mark is first, I think"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-06-29T13:14:54.517418",
          "text": "Makes sense."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-30T14:00:57.580946",
          "text": "discussion about 2d syntax on Hacker News: <https://news.ycombinator.com/item?id=14657857> (cc <@Tina>)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-06-30T14:02:18.609785",
          "text": "whee!"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-06-30T14:02:29.613605",
          "text": "it's actually pretty positive"
        }
      ]
    },
    {
      "conversation_id": "76",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Is there a way to “run” an input file as if it had a [CODE] line at the front… basically say eval this port/file/whatever with xxx lang?\nGeorgeanna: I want to write a more “traditional” style of tool, then have that slurp into racket as if it were a [CODE] file with a proper [CODE]\nJulianna: Georgeanna if its a module language (and doesn’t have a special reader), you can read the file in, construct a module with the language xxx and the read in stuff as the body, and eval that. might be an easier way though\nVincenzo: Georgeanna If the module language does have a reader, you can call it directory, but another option is to use [CODE] to add the [CODE] line. In any case, to handle relative paths, you'll want to set [CODE] while reading; to get the module declaration associated with the original path, set [CODE] during [CODE].",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 615.07,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Julianna",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-27T23:37:19.233141",
          "text": "Is there a way to “run” an input file as if it had a `#lang xxx` line at the front… basically say eval this port/file/whatever with xxx lang?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-06-27T23:38:02.237234",
          "text": "I want to write a more “traditional” style of tool, then have that slurp into racket as if it were a `.rkt` file with a proper `#lang`"
        },
        {
          "user": "Julianna",
          "timestamp": "2017-06-28T07:35:17.241479",
          "text": "<@Georgeanna> if its a module language (and doesn’t have a special reader), you can read the file in, construct a module with the language xxx and the read in stuff as the body, and eval that. might be an easier way though"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-06-28T09:52:23.498947",
          "text": "<@Georgeanna> If the module language does have a reader, you can call it directory, but another option is to use `input-port-append` to add the `#lang` line. In any case, to handle relative paths,  you'll want to set `current-load-relative-directory` while reading; to get the module declaration associated with the original path, set `current-module-declare-name` during `eval`."
        }
      ]
    },
    {
      "conversation_id": "77",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lavenia: There has been some Racket talk on HN lately. <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Lavenia"
        ]
      },
      "timeline": [
        {
          "user": "Lavenia",
          "timestamp": "2017-06-30T15:14:52.015781",
          "text": "There has been some Racket talk on HN lately.   <https://hn.algolia.com/?query=racket&amp;sort=byDate&amp;prefix&amp;page=0&amp;dateRange=pastWeek&amp;type=all>"
        }
      ]
    },
    {
      "conversation_id": "78",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: are there macro forms of IO that don’t take thunks? (iow, use [CODE]) just feels klunky\nGeorgeanna: also, I’m trying to do Vincenzo’s suggestion of using [CODE] to prepend a [CODE] line … Will location info be for the concatenation or for each port being used? IE, will error info be off-by-one?\nGeorgeanna: Hrm… actually: [CODE_BLOCK]\nGeorgeanna: … that must be from C? I can’t find it in the racket source\nWillian: Georgeanna [CODE] usually means you want [CODE]\nGeorgeanna: looking… I used [CODE] and feel like I’m going down a rabbit hole\nGeorgeanna: same rabbit hole: [CODE_BLOCK] the only dynamic-require I use anywhere is for the colorer, which shouldn’t be invoked at this point\nGeorgeanna: also, [CODE] vs [CODE]? :confused:\nGeorgeanna: ok. Stole some code from <[URL] and have it reading in correctly. Don’t understand why [CODE] is the wrong approach but [CODE] works just fine\nGeorgeanna: can somebody help me with this last bit? I clearly don’t understand something in the glue of racket’s [CODE] handling: <[URL] outputs: [CODE_BLOCK]\nGeorgeanna: but if I declare the module in current-namespace then it blows up because [CODE] and [CODE] aren’t defined",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 11,
        "duration_minutes": 102.07,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "must",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Willian"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:13:41.061803",
          "text": "are there macro forms of IO that don’t take thunks? (iow, use `expr ...`) just feels klunky"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:15:01.066821",
          "text": "also, I’m trying to do <@Vincenzo>’s suggestion of using `input-port-append` to prepend a `#lang` line … Will location info be for the concatenation or for each port being used? IE, will error info be off-by-one?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:16:57.073900",
          "text": "Hrm… actually:\n\n```\nUNKNOWN::0: read: #lang not enabled in the current context\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:17:38.076465",
          "text": "… that must be from C? I can’t find it in the racket source"
        },
        {
          "user": "Willian",
          "timestamp": "2017-07-01T17:41:53.168949",
          "text": "<@Georgeanna>  `#lang not enabled in the current context` usually means you want `with-module-reading-parameterization`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:45:43.182552",
          "text": "looking… I used `(read-accept-reader #t)` and feel like I’m going down a rabbit hole"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:48:31.193241",
          "text": "same rabbit hole:\n\n```\ndynamic-require: name is not provided\nname: 'read\nmodule: #&lt;resolved-module-path:(submod \"/Users/ryan/Work/git/zenspider/schemers/br/basic/main.rkt\" reader)&gt;\n```\n\nthe only dynamic-require I use anywhere is for the colorer, which shouldn’t be invoked at this point"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:48:59.194803",
          "text": "also, `syntax/modred` vs `syntax/module-reader`? :confused:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T17:57:15.225582",
          "text": "ok. Stole some code from <https://github.com/AlexKnauth/postfix-dot-notation/blob/master/postfix-dot-notation/lang/reader.rkt> and have it reading in correctly. Don’t understand why `read` is the wrong approach but `read-syntax` works just fine"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T18:31:28.357277",
          "text": "can somebody help me with this last bit? I clearly don’t understand something in the glue of racket’s `#lang` handling:\n\n<https://gist.github.com/6c4e50cdea9925f706ac1ff0019e3105>\n\noutputs:\n\n```\ncode:\n(module basic-mod basic/expander\n  (b-program\n   (b-line ...lots of stuff...)))\ndefine:\nrun:\ndynamic-require: unknown module\n  module name: #&lt;resolved-module-path:'basic-mod&gt;\n  context...:\n   /Users/ryan/Work/git/zenspider/schemers/br/basic/basic: [running body]\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T18:55:45.443831",
          "text": "but if  I declare the module in current-namespace then it blows up because `module` and `#%app` aren’t defined"
        }
      ]
    },
    {
      "conversation_id": "79",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: The module is declared in [CODE], but [CODE] isn't the current namespace when [CODE] looks for a module.\nVincenzo: I recommend using [CODE] with [CODE]: [CODE_BLOCK]\nGeorgeanna: and not using [CODE] ?\nGeorgeanna: that was it…\nGeorgeanna: how could I have figured that out??\nLatarsha: Georgeanna what led you to use [CODE] originally? was that described in Beautiful Racket?\nVincenzo: Using [CODE] in place of [CODE] (uncommenting out the two earlier lines that set it up) is a fine idea. Usually the goal is to use a path instead of a symbol, though.\nVincenzo: Latarsha I think I earlier recommended using [CODE], which needs a resolved module path\nGeorgeanna: wow! [CODE] go me!\nGeorgeanna: should my reader be doing a gensym for the module name? If I add multiple basic files on the cmdline the second one blows up because it’s the same name\nGeorgeanna: Vincenzo thank you… that was 2 hours in the making and I wouldn’t have come up with that diagnosis or that 2 line block of code\nGeorgeanna: is there a way to tell that I’m running in the repl vs not?\nGeorgeanna: right now I’m testing [CODE] being empty, but that isn’t right\nChantelle: The REPL wraps forms in [CODE], so you could customize that form to set a parameter that you inspect\nGeorgeanna: Chantelle … idgi… how would it know that it is in the repl? by being used? that implies I won’t know until it’s eval’d something and displayed it?\nChantelle: Racket wraps all REPL expressions in [CODE] for you. So you define your lang's [CODE] to be a macro that sets a parameter like [CODE] to true, then you can dynamically do something different in the repl.\nChantelle: The [CODE] language doesn't do this so it would only work in a custom language where you redefined [CODE]\nGeorgeanna: ok. [CODE] with [CODE] seems to be a happy combo\nGeorgeanna: here’s my latest version: <[URL]\nGeorgeanna: I’m now trying to take it one step further and get it so I can shebang the basic files and run them directly\nLatarsha: Chantelle can I suggest that you do development on your fork, rather than in [CODE]?\nLatarsha: I ask mostly because commits to [CODE] send a bunch of people mail\nChantelle: Latarsha is it possible to change the mail settings? working on the fork is slightly irritating\nLatarsha: Sadly there's no option to only send mail for [CODE]\nChantelle: is it github mail or travis mail?\nLatarsha: it's github mail\nGeorgeanna: Chantelle I think if you worked in a branch it wouldn’t send email\nLatarsha: Georgeanna that's not correct, sadly -- Chantelle is working on a branch\nChantelle: I am working in branches - checking <[URL] for more details\nGeorgeanna: at least… that’s how we work on some of our projects and we don’t get inundated by my crazy commit storms\nLatarsha: Chantelle it's a hook, that sends mail to a mailing list\nLatarsha: it's not notification email\nChantelle: ohhh, so it's not coming directly from github?\nChantelle: wait what list\nLatarsha: github has an \"email\" service, and that's set up to email [EMAIL] which is basically all the people who got email before we moved the canonical repo to github\nGeorgeanna: ah. gotcha\nChantelle: this thing? <[URL]\nLatarsha: perhaps we should just get rid of it, but for the moment it's easier to just keep it\nLatarsha: Chantelle yes\nGeorgeanna: final version… <[URL] … is something like [CODE] of general use?\nChantelle: Latarsha I'll work on the fork, sorry about the noise\nLatarsha: Chantelle thanks\nChantelle: shame it can't distinguish master from non-master though\nLatarsha: This is in reality not a great system since it's really reliant on the not-true idea that there's a general \"committers\" set for all of Racket\nChantelle: was it created pre-package-split?\nLatarsha: no it was created to emulate the old behavior when we split the old repository\nLatarsha: because the old repo of course had a single set of committers\nChantelle: gotcha\nChantelle: Latarsha the incomplete PRs I've got open already would be difficult to move, is it alright if I just do new dev on the fork?\nLatarsha: yes that's certainly fine",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 50,
        "duration_minutes": 64.49,
        "contains_question": true,
        "action_keywords": [
          "action",
          "complete",
          "create",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-01T18:49:22.421178",
          "text": "The module is declared in `ns`, but `ns` isn't the current namespace when `dynamic-require` looks for a module."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-01T18:56:16.445680",
          "text": "I recommend using `dynamic-wind` with `ns`:\n```\n(parameterize ([current-namespace ns])\n    (dynamic-require ''basic-mod #f))\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T18:57:01.448046",
          "text": "and not using `make-resolved-module-path` ?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T18:57:20.449300",
          "text": "that was it…"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T18:57:32.449980",
          "text": "how could I have figured that out??"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T18:59:37.457078",
          "text": "<@Georgeanna> what led you to use `make-resolved-module-path` originally? was that described in Beautiful Racket?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-01T19:00:12.459518",
          "text": "Using `woot` in place of `''basic-mod` (uncommenting out the two earlier lines that set it up) is a fine idea. Usually the goal is to use a path instead of a symbol, though."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-01T19:00:44.461934",
          "text": "<@Latarsha> I think I earlier recommended using `current-module-declare-name`, which needs a resolved module path"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:04:17.475386",
          "text": "wow! `Process Racket REPL abort trap: 6` go me!"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:05:00.477783",
          "text": "should my reader be doing a gensym for the module name? If I add multiple basic files on the cmdline the second one blows up because it’s the same name"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:05:41.480417",
          "text": "<@Vincenzo> thank you… that was 2 hours in the making and I wouldn’t have come up with that diagnosis or that 2 line block of code"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:06:16.482465",
          "text": "is there a way to tell that I’m running in the repl vs not?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:06:36.483596",
          "text": "right now I’m testing `(current-command-line-arguments)` being empty, but that isn’t right"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:07:19.486182",
          "text": "The REPL wraps forms in `#%top-interaction`, so you could customize that form to set a parameter that you inspect"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:09:57.495544",
          "text": "<@Chantelle> … idgi… how would it know that it is in the repl? by being used? that implies I won’t know until it’s eval’d something and displayed it?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:11:20.500715",
          "text": "Racket wraps all REPL expressions in `#%top-interaction` for you. So you define your lang's `#%top-interaction` to be a macro that sets a parameter like `(current-eval-is-repl?)` to true, then you can dynamically do something different in the repl."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:12:27.504509",
          "text": "The `#lang racket` language doesn't do this so it would only work in a custom language where you redefined `#%top-interaction`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:35:19.583454",
          "text": "ok. `make-resolved-module-path` with `gensym` seems to be a happy combo"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:35:29.584073",
          "text": "here’s my latest version: <https://gist.github.com/zenspider/6c4e50cdea9925f706ac1ff0019e3105>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:35:51.585290",
          "text": "I’m now trying to take it one step further and get it so I can shebang the basic files and run them directly"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:37:07.589854",
          "text": "<@Chantelle> can I suggest that you do development on your fork, rather than in `racket/rackunit`?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:37:19.590547",
          "text": "I ask mostly because commits to `racket/rackunit` send a bunch of people mail"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:38:52.595687",
          "text": "<@Latarsha> is it possible to change the mail settings? working on the fork is slightly irritating"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:39:43.598697",
          "text": "Sadly there's no option to only send mail for `master`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:39:54.599551",
          "text": "is it github mail or travis mail?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:40:50.602923",
          "text": "it's github mail"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:42:07.607184",
          "text": "<@Chantelle> I think if you worked in a branch it wouldn’t send email"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:42:40.609011",
          "text": "<@Georgeanna> that's not correct, sadly -- <@Chantelle> is working on a branch"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:42:44.609254",
          "text": "I am working in branches - checking <https://help.github.com/articles/about-notification-emails/> for more details"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:42:58.610053",
          "text": "at least… that’s how we work on some of our projects and we don’t get inundated by my crazy commit storms"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:43:14.611013",
          "text": "<@Chantelle> it's a hook, that sends mail to a mailing list"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:43:19.611301",
          "text": "it's not notification email"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:43:26.611703",
          "text": "ohhh, so it's not coming directly from github?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:43:37.612265",
          "text": "wait what list"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:44:09.614083",
          "text": "github has an \"email\" service, and that's set up to email `<mailto:committers@racket-lang.org|committers@racket-lang.org>` which is basically all the people who got email before we moved the canonical repo to github"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:44:16.614490",
          "text": "ah. gotcha"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:44:43.616207",
          "text": "this thing? <https://help.github.com/articles/managing-notifications-for-pushes-to-a-repository/#enabling-email-service-notifications-for-pushes-to-your-repository>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:44:59.617128",
          "text": "perhaps we should just get rid of it, but for the moment it's easier to just keep it"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:45:15.618218",
          "text": "<@Chantelle> yes"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-01T19:45:45.619997",
          "text": "final version… <https://gist.github.com/zenspider/6c4e50cdea9925f706ac1ff0019e3105> … is something like `run-with-lang` of general use?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:48:25.629611",
          "text": "<@Latarsha> I'll work on the fork, sorry about the noise"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:48:32.629966",
          "text": "<@Chantelle> thanks"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:48:39.630352",
          "text": "shame it can't distinguish master from non-master though"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:49:07.631868",
          "text": "This is in reality not a great system since it's really reliant on the not-true idea that there's a general \"committers\" set for all of Racket"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:49:25.632874",
          "text": "was it created pre-package-split?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:50:16.635800",
          "text": "no it was created to emulate the old behavior when we split the old repository"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:50:35.636883",
          "text": "because the old repo of course had a single set of committers"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:50:47.637526",
          "text": "gotcha"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-01T19:53:21.645456",
          "text": "<@Latarsha> the incomplete PRs I've got open already would be difficult to move, is it alright if I just do new dev on the fork?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-01T19:53:51.647116",
          "text": "yes that's certainly fine"
        }
      ]
    },
    {
      "conversation_id": "80",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: is it possible to profile / report where startup time is being spent? cost of requires and #langs I guess?\nVincenzo: Georgeanna You could try [CODE]\nGeorgeanna: Vincenzo are those milliseconds?\nVincenzo: Yes, CPU milliseconds since startup\nGeorgeanna: huh… it hits my lexer and loads rackunit, even tho the require is in a submodule that isn’t being activated\nGeorgeanna: [CODE_BLOCK]\nKimbery: it looks like it isn’t loading [CODE] from a [CODE], so it would need to load rackunit to compile [CODE]\nKimbery: try precompiling the lexer?\nGeorgeanna: ah\nGeorgeanna: compiling the lexer and expander count for .6-.7s… but it’s still a lot more than it feels like it should be\nGeorgeanna: nice to see just how much is loading… I’ll write a post-processor for that tracer output to report the expensive bits nicely\nGeorgeanna: Rozella ? can you explain?\nRozella: for example, I have a function [CODE] and it takes one argument, when applying [CODE] to [CODE], I would like to use [CODE] as a single variable inside of [CODE]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 2151.7,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Kimbery",
          "Rozella",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-03T06:27:48.540598",
          "text": "is it possible to profile / report where startup time is being spent? cost of requires and #langs I guess?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-03T11:59:24.861468",
          "text": "<@Georgeanna> You could try `racket -l mzlib/traceld -t &lt;your-module&gt;`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-03T17:14:41.175465",
          "text": "<@Vincenzo> are those milliseconds?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-03T17:15:03.179803",
          "text": "Yes, CPU milliseconds since startup"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-03T17:16:23.196266",
          "text": "huh… it hits my lexer and loads rackunit, even tho the require is in a submodule that isn’t being activated"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-03T17:16:28.197360",
          "text": "```\n  loading /Users/ryan/Work/git/zenspider/schemers/br/basic/lexer.rkt at 1063\n   loading /MyApplications/dev/lisp/Racket/share/pkgs/rackunit-lib/rackunit/compiled/main_rkt.zo at 1243\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-03T17:18:26.221158",
          "text": "it looks like it isn’t loading `lexer.rkt` from a `.zo`, so it would need to load rackunit to compile `lexer.rkt`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-03T17:18:42.224116",
          "text": "try precompiling the lexer?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-03T17:18:49.225558",
          "text": "ah"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-03T17:20:06.240269",
          "text": "compiling the lexer and expander count for .6-.7s… but it’s still a lot more than it feels like it should be"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-03T17:20:32.245365",
          "text": "nice to see just how much is loading… I’ll write a post-processor for that tracer output to report the expensive bits nicely"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:16:32.770800",
          "text": "<@Rozella> ? can you explain?"
        },
        {
          "user": "Rozella",
          "timestamp": "2017-07-04T18:19:30.788161",
          "text": "for example, I have a function `f` and it takes one argument, when applying `(values ...)` to `f`, I would like to use `(values ...)` as a single variable inside of `f`"
        }
      ]
    },
    {
      "conversation_id": "81",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: hey. I made a thing to make profiling load times easier to figure out: <[URL]\nGeorgeanna: I’ll port to racket later\nRozella: is there anyway to catch a [CODE] as a whole when passing it to a function?\nDavid: Something like <[URL] , or maybe <[URL] ?\nGeorgeanna: (call-with-values (thunk (values 1 2 3)) list) ; ‘(1 2 3)\nGeorgeanna: but… I don’t think you can make a function that takes a variable number of values… hence the thunk\nRozella: I do found [CODE] but it restricts me to put values inside of lambda, I’m just looking for a more elegant way to do this\nGeorgeanna: Rozella why do you want to apply [CODE] as an arg? can you explain what you’re trying to do?\nGeorgeanna: &gt; It is impossible to bind the evaluated result of values expression to a single variable unlike other Scheme expressions <[URL] Might want to check out mu/nu from 86\nGeorgeanna: they look interesting\nRozella: Well, I have a function that returns [CODE], I would like to compare the results of two applications of that function. Probably macro could do that?\nGeorgeanna: [CODE_BLOCK]\nGeorgeanna: so for testing? yeah… you could do that with a macro. wrap up LHS and RHS with call-with-values … list\nGeorgeanna: then use check-equal?\nRozella: yeah, for testing, right, for now I just put [CODE] into a lambda and use nested call-with-values, then I could compare the equality of two lists\nRozella: Georgeanna anyway, SRFI-86 looks helpful, thank you!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 16,
        "duration_minutes": 32.62,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "David",
          "Georgeanna",
          "Rozella"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T17:54:59.626650",
          "text": "hey. I made a thing to make profiling load times easier to figure out: <https://gist.github.com/d31e7d54e8350370b141393f4afc24d6>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T17:55:17.628752",
          "text": "I’ll port to racket later"
        },
        {
          "user": "Rozella",
          "timestamp": "2017-07-04T18:04:26.691821",
          "text": "is there anyway to catch a `(values x y ...)` as a whole when passing it to a function?"
        },
        {
          "user": "David",
          "timestamp": "2017-07-04T18:19:34.788567",
          "text": "Something like <https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._call-with-values%29%29> , or maybe <https://docs.racket-lang.org/sugar/index.html?q=values-%3E#(form._((lib._sugar%2Flist..rkt)._values-~3elist))> ?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:20:23.793640",
          "text": "(call-with-values (thunk (values 1 2 3)) list) ; ‘(1 2 3)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:20:55.797095",
          "text": "but… I don’t think you can make a function that takes a variable number of values… hence the thunk"
        },
        {
          "user": "Rozella",
          "timestamp": "2017-07-04T18:20:57.797347",
          "text": "I do found `call-with-values` but it restricts me to put values inside of lambda, I’m just looking for a more elegant way to do this"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:21:35.801309",
          "text": "<@Rozella> why do you want to apply `values` as an arg? can you explain what you’re trying to do?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:23:47.815077",
          "text": "&gt; It is impossible to bind the evaluated result of values expression to a single variable unlike other Scheme expressions\n\n<http://docs.racket-lang.org/srfi/srfi-86.html>\n\nMight want to check out mu/nu from 86"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:23:52.815632",
          "text": "they look interesting"
        },
        {
          "user": "Rozella",
          "timestamp": "2017-07-04T18:24:04.816775",
          "text": "Well, I have a function that returns `values`, I would like to compare the results of two applications of that function. Probably macro could do that?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:24:40.820857",
          "text": "```\n(define v (values 1 2 3))\t\t=&gt; error\n(define v (lambda () (values 1 2 3)))\t=&gt; (lambda () (values 1 2 3))\n(define m (mu 1 2 3))\t\t\t=&gt; (lambda (f) (f 1 2 3))\n(define a (apply values 1 '(2 3)))\t=&gt; error\n(define a\n  (lambda () (apply values 1 '(2 3))))\t=&gt; (lambda () (apply values 1 '(2 3)))\n(define n (nu 1 '(2 3)))\t\t=&gt; (lambda (f) (apply f 1 '(2 3)))\n\n(call-with-values v list)\t=&gt; (1 2 3)\n(m list)\t\t\t=&gt; (1 2 3)\n(call-with-values a list)\t=&gt; (1 2 3)\n(n list)\t\t\t=&gt; (1 2 3)\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:25:36.826735",
          "text": "so for testing? yeah… you could do that with a macro. wrap up LHS and RHS with call-with-values … list"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-04T18:25:48.828186",
          "text": "then use check-equal?"
        },
        {
          "user": "Rozella",
          "timestamp": "2017-07-04T18:26:42.834146",
          "text": "yeah, for testing, right, for now I just put `values` into a lambda and use nested call-with-values, then I could compare the equality of two lists"
        },
        {
          "user": "Rozella",
          "timestamp": "2017-07-04T18:27:36.839791",
          "text": "<@Georgeanna> anyway, SRFI-86 looks helpful, thank you!"
        }
      ]
    },
    {
      "conversation_id": "82",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: <U0702F2CE|samth> set the channel topic: Racket — <[URL] — <[URL] - Slack invite link: <[URL] - Archives: <[URL]\nNelson: notjack: extending [CODE] would be cool\nChantelle: Nelson do you use it often?\nEun: We have a number of experiments that use it, so not breaking it is important, but improvements would be welcome!\nChantelle: Eun do you have links to some of the experiments?\nEun: Not directly, but I think some of our research artifacts may have some, lemme check.\nNelson: never\nNelson: but yeah I had put some benchmarks here: <[URL]\nNelson: and then I put some others here: <[URL]\nNelson: and this is getting silly. Usually I want some tooling around these benchmarks (to reproduce data in a paper), but the code should all be in 1 place\nNelson: like the larceny benchmarks <[URL]\nEun: Chantelle: Here's one artifact: <[URL]\nEun: It's a large VM, that has a benchmark suite (and other stuff) inside.\nChantelle: thanks Nelson and Eun for links :)\nChantelle: really the main thing I want is something like [CODE]\nEun: Oh, sure. That should be easy to do with the results data structure.\nEun: Beware of the case where the confidence intervals overlap, though. Can't conclude that either is faster.\nChantelle: memory consumption benchmarks instead of timing benchmarks would also be useful\nGeorgeanna: Chantelle I have benchmark-ips… it might help normalize some of the error\nChantelle: Georgeanna I definitely want curve-fitting perf tests for racket. The lens library in particular could benefit from perf testing.\nGeorgeanna: basically looks like: [CODE_BLOCK] And asserts against the R^2 of the fit instead of actual measurements\nGeorgeanna: <[URL]\nGeorgeanna: benchmark-ips is my port of a ruby tool. Similar to racket’s benchmark, but it doesn’t graph and it is focused on iterations per second instead of some fixed number of iterations… I mostly use it when experimenting with N different implementations of something",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 23,
        "duration_minutes": 48.64,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Georgeanna",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-07-06T17:14:12.614563",
          "text": "<@U0702F2CE|samth> set the channel topic: Racket — <http://racket-lang.org> — <http://pasterack.org> - Slack invite link: <http://racket-slack.herokuapp.com> - Archives: <http://racket.slackarchive.io/>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-06T17:26:50.932734",
          "text": "notjack: extending `racket-benchmark` would be cool"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-06T17:27:49.956857",
          "text": "<@Nelson> do you use it often?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-06T17:28:31.973815",
          "text": "We have a number of experiments that use it, so not breaking it is important, but improvements would be welcome!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-06T17:29:26.996674",
          "text": "<@Eun> do you have links to some of the experiments?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-06T17:30:21.019787",
          "text": "Not directly, but I think some of our research artifacts may have some, lemme check."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-06T17:31:39.052635",
          "text": "never"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-06T17:32:13.066211",
          "text": "but yeah I had put some benchmarks here: <https://github.com/nuprl/gradual-typing-performance/tree/master/benchmarks>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-06T17:32:34.074986",
          "text": "and then I put some others here: <https://github.com/bennn/eidetic/tree/master/benchmarks/rkt>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-06T17:33:11.089712",
          "text": "and this is getting silly. Usually I want some tooling around these benchmarks (to reproduce data in a paper), but the code should all be in 1 place"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-06T17:33:40.101264",
          "text": "like the larceny benchmarks <http://www.larcenists.org/benchmarksAboutR7.html>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-06T17:33:41.101785",
          "text": "<@Chantelle>: Here's one artifact: <http://drops.dagstuhl.de/opus/frontdoor.php?source_opus=5514>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-06T17:33:58.108793",
          "text": "It's a large VM, that has a benchmark suite (and other stuff) inside."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-06T17:34:26.119777",
          "text": "thanks <@Nelson> and <@Eun>  for links :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-06T17:34:48.128476",
          "text": "really the main thing I want is something like `(check-faster (foo-benchmark foo-impl1) (foo-benchmark foo-impl2))`"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-06T17:37:13.185709",
          "text": "Oh, sure. That should be easy to do with the results data structure."
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-06T17:37:34.194115",
          "text": "Beware of the case where the confidence intervals overlap, though. Can't conclude that either is faster."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-06T17:40:57.271814",
          "text": "memory consumption benchmarks instead of timing benchmarks would also be useful"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-06T17:52:40.537643",
          "text": "<@Chantelle> I have benchmark-ips… it might help normalize some of the error"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-06T17:59:12.681687",
          "text": "<@Georgeanna> I definitely want curve-fitting perf tests for racket. The lens library in particular could benefit from perf testing."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-06T18:00:38.715110",
          "text": "basically looks like:\n\n```\n    def bench_my_algorithm\n      assert_performance_linear 0.9999 do |n| # n is a range value\n        @obj.my_algorithm(n)\n      end\n    end\n```\n\nAnd asserts against the R^2 of the fit instead of actual measurements"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-06T18:01:30.734656",
          "text": "<https://github.com/seattlerb/minitest/blob/master/lib/minitest/benchmark.rb>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-06T18:02:50.763522",
          "text": "benchmark-ips is my port of a ruby tool. Similar to racket’s benchmark, but it doesn’t graph and it is focused on iterations per second instead of some fixed number of iterations… I mostly use it when experimenting with N different implementations of something"
        }
      ]
    },
    {
      "conversation_id": "83",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Eun if I wanted to write benchmarks for a package that are part of a test suite and don't produce pretty plots, should I extend <[URL] or would I be better off making my own package for that?\nEun: Chantelle: Sure, I'm all for making racket-benchmark better!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 6.04,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-07-06T17:21:59.810353",
          "text": "<@Eun> if I wanted to write benchmarks for a package that are part of a test suite and don't produce pretty plots, should I extend <https://github.com/stamourv/racket-benchmark> or would I be better off making my own package for that?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-06T17:28:01.961553",
          "text": "<@Chantelle>: Sure, I'm all for making racket-benchmark better!"
        }
      ]
    },
    {
      "conversation_id": "84",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: and in minitest, I have minitest/benchmark which allows you to assert that the performance of a block of code fits well to a particular curve. Allows tests to pass regardless of the hardware you run on.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-06T17:53:30.557274",
          "text": "and in minitest, I have minitest/benchmark which allows you to assert that the performance of a block of code fits well to a particular curve. Allows tests to pass regardless of the hardware you run on."
        }
      ]
    },
    {
      "conversation_id": "85",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Happy branch day! :party:\nEun: Chantelle: Haven't gotten to starting the festivities yet. ;)\nLatarsha: Eun I don't know if you get this email, but the stxparse tests failed on windows on the release branch <[URL] cc Natosha\nEun: FWIW, fails on master as well: <[URL]\nLatarsha: Eun that link is to the release branch build\nLatarsha: you can see the history here; it's passing on master: <[URL]\nEun: Oh, you're right. I can't read appveyor's page.\nEun: I guess I wasn't expecting it to test back from the tip of the branch?\nLatarsha: looks like it failed similarly for the tip of the [CODE] branch (see <#C3P4M37H7|notifications>)\nNatosha: Eun, it \"fails\" under [CODE] but not when run directly by [CODE]. I suspect a bug in one of the recent rackunit changes, but I won't really be inclined to spend time debugging it until tomorrow at 8:01am EDT :slightly_smiling_face:\nEun: Heh. :)\nEun: Chantelle: ^\nNatosha: If anyone else wants to investigate, I did narrow it down to the test case in [CODE] labelled [CODE]\nChantelle: this expression in that test looks funky: [CODE]\nChantelle: did that used to syntax error, which was expected, and now it runtime errors?\nNatosha: Chantelle: it's a misbehavior in that [CODE] shows no failure output, but [CODE] prints \"1/3 test failures\"\nChantelle: Natosha looking at [CODE], I think that test was never run before\nNatosha: Chantelle: ah, good point, I missed that...\nChantelle: old implementation of [CODE] would syntax error when given one argument instead of two, new version makes it a runtime error\nChantelle: and tcerr would catch the syntax error and try to match it against error message patterns, of which there are none for that test\nLatarsha: Chantelle that seems potentially worrying\nChantelle: Latarsha I agree. The docs for rackunit never mentioned that checks test their arity during macro expansion though, so it's at least not a break in documented behavior. But rackunit has a lot of odd undocumented internal behavior.\nLatarsha: Chantelle since it actually broke something, it seems like maybe that behavior needs to be kept\nNatosha: Latarsha well, the code in the test case is definitely wrong too, so I don't think we should hold rackunit to the old behaviour\nKimbery: it’d be cool if we had a versioning system that made it possible to break backwards compatibility\nChantelle: Kimbery don't get too radical :P\nChantelle: Georgeanna checking arity wouldn't need to be documented. checking arity at compile time using macros probably should be, I'd be really surprised if a library provided \"functions\" that did that without mentioning it\nNatosha: Thanks Chantelle, that explains the rackunit issue; I'll change the test case. Unfortunately, fixing the test case made me realize literal sets with [CODE] aren't working the way I expected, so I've got to think harder about that before I commit a fix.\nChantelle: glad to help, and happy to hear the rackunit changes didn't explode everything",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 29,
        "duration_minutes": 106.05,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "fix",
          "implement",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Kimbery",
          "Latarsha",
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T14:40:23.988120",
          "text": "Happy branch day! :party: "
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-07T14:57:33.484317",
          "text": "<@Chantelle>: Haven't gotten to starting the festivities yet. ;)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-07T15:36:21.523572",
          "text": "<@Eun> I don't know if you get this email, but the stxparse tests failed on windows on the release branch <https://ci.appveyor.com/project/plt/racket/build/1.0.2619> cc <@Natosha>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-07T15:38:12.571483",
          "text": "FWIW, fails on master as well: <https://ci.appveyor.com/project/plt/racket/build/1.0.2619>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-07T15:39:21.600634",
          "text": "<@Eun> that link is to the release branch build"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-07T15:39:50.613180",
          "text": "you can see the history here; it's passing on master: <https://ci.appveyor.com/project/plt/racket/history>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-07T15:40:18.624996",
          "text": "Oh, you're right. I can't read appveyor's page."
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-07T15:40:45.636754",
          "text": "I guess I wasn't expecting it to test back from the tip of the branch?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-07T15:49:53.873144",
          "text": "looks like it failed similarly for the tip of the `release` branch (see <#C3P4M37H7|notifications>)"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-07-07T15:54:10.983925",
          "text": "<@Eun>, it \"fails\" under `raco test` but not when run directly by `racket`. I suspect a bug in one of the recent rackunit changes, but I won't really be inclined to spend time debugging it until tomorrow at 8:01am EDT :slightly_smiling_face:"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-07T15:54:50.000520",
          "text": "Heh. :)"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-07T15:54:59.004367",
          "text": "<@Chantelle>: ^"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-07-07T15:56:01.031681",
          "text": "If anyone else wants to investigate, I did narrow it down to the test case in `test-litset.rkt` labelled `\"litset, #:at\"`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T15:59:05.111244",
          "text": "this expression in that test looks funky: `(check-equal? (syntax-&gt;datum (getvar lambda #'(lambda b c))))`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T15:59:56.133451",
          "text": "did that used to syntax error, which was expected, and now it runtime errors?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-07-07T16:01:19.173013",
          "text": "<@Chantelle>: it's a misbehavior in that `racket test-litset.rkt` shows no failure output, but `raco test test-litset.rkt` prints \"1/3 test failures\""
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T16:02:26.202610",
          "text": "<@Natosha> looking at `tcerr`, I think that test was never run before"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-07-07T16:02:40.208653",
          "text": "<@Chantelle>: ah, good point, I missed that..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T16:02:50.213363",
          "text": "old implementation of `check-equal?` would syntax error when given one argument instead of two, new version makes it a runtime error"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T16:03:10.221900",
          "text": "and tcerr would catch the syntax error and try to match it against error message patterns, of which there are none for that test"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-07T16:03:12.222554",
          "text": "<@Chantelle> that seems potentially worrying"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T16:04:30.256155",
          "text": "<@Latarsha> I agree. The docs for rackunit never mentioned that checks test their arity during macro expansion though, so it's at least not a break in documented behavior. But rackunit has a lot of odd undocumented internal behavior."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-07T16:04:58.268109",
          "text": "<@Chantelle> since it actually broke something, it seems like maybe that behavior needs to be kept"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-07-07T16:06:23.304913",
          "text": "<@Latarsha> well, the code in the test case is definitely wrong too, so I don't think we should hold rackunit to the old behaviour"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-07T16:07:08.324051",
          "text": "it’d be cool if we had a versioning system that made it possible to break backwards compatibility"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T16:07:30.333306",
          "text": "<@Kimbery> don't get too radical :P"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T16:15:19.530648",
          "text": "<@Georgeanna> checking arity wouldn't need to be documented. checking arity at compile time using macros probably should be, I'd be really surprised if a library provided \"functions\" that did that without mentioning it"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-07-07T16:23:56.749016",
          "text": "Thanks <@Chantelle>, that explains the rackunit issue; I'll change the test case. Unfortunately, fixing the test case made me realize literal sets with `#:at` aren't working the way I expected, so I've got to think harder about that before I commit a fix."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T16:26:26.811911",
          "text": "glad to help, and happy to hear the rackunit changes didn't explode everything"
        }
      ]
    },
    {
      "conversation_id": "86",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Natosha is it a failure in the sense of a rackunit check failing, or an error of some sort? I recently started using syntax parse in rackunit, maybe there's a circular dependency somewhere?\nGeorgeanna: Does the doco really need to explicitly mention checking arity tho? Seems a safe assumption to me unless it says otherwise.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 16.82,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-07-07T15:57:27.069459",
          "text": "<@Natosha> is it a failure in the sense of a rackunit check failing,  or an error of some sort? I recently started using syntax parse in rackunit, maybe there's a circular dependency somewhere?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-07T16:14:16.503747",
          "text": "Does the doco really need to explicitly mention checking arity tho? Seems a safe assumption to me unless it says otherwise."
        }
      ]
    },
    {
      "conversation_id": "87",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Nelson you might be interested in [CODE]\nLatarsha: as well as this line from the docs for [CODE]: \"Mutable vectors and boxes are replaced by immutable vectors and boxes.\"\nRosalee: Latarsha That makes sense for one direction. But then it doesn’t make sense why when its done at phase 1 the vector becomes mutable.\nLatarsha: Rosalee I agree, I don't understand what's going on there\nLatarsha: but that should be investigated without using 3 layers of quoting\nRosalee: Latarsha Ha, ya, I do agree with that.\nLatarsha: and is unrelated to the typing issue\nRosalee: I also agree with that.\nRosalee: (I forgot that this originated from a typed/racket thing. Nelson and I were discussing it (outside of slack) without the context of TR.)\nRosalee: Vincenzo (Or anyone else familiar enough with the FFI to answer), I have the following program that uses ffi/unsafe/alloc: <[URL]\nRosalee: In a loop, it allocates a frame, relying on the GC to clean up.\nRosalee: However, it leaks memory very quickly.\nNelson: yes Latarsha thanks for pointing out [CODE]. Here's another phase 1 example (still returns the weird result) [CODE_BLOCK]\nRosalee: BUT, if I remove line 15 (the deallocator wrapper), it stops leaking memory.\nRosalee: Does anyone have any suggestions?\nLatarsha: Nelson here's the bug:\nRosalee: (For the record, if I remove both alloc and dealloc, and just call the [CODE] function by hand everything works fine.)\nLatarsha: [CODE_BLOCK]\nLatarsha: note that [CODE] does the right thing\nRosalee: Latarsha and Nelson FWIW, I ran this test on Racket7, and got: [CODE_BLOCK]\nNelson: ^ this test = <[URL]\nNelson: (point is, now the failures are consistent)\nRosalee: Ah, okay, thanks makes a lot of sense. Thank you.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 23,
        "duration_minutes": 180.28,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "discuss",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:24:45.326242",
          "text": "<@Nelson> you might be interested in `datum-&gt;syntax`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:25:17.346995",
          "text": "as well as this line from the docs for `datum-&gt;syntax`: \"Mutable vectors and boxes are replaced by immutable vectors and boxes.\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:28:16.461995",
          "text": "<@Latarsha> That makes sense for one direction. But then it doesn’t make sense why when its done at phase 1 the vector becomes mutable."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:29:24.504253",
          "text": "<@Rosalee> I agree, I don't understand what's going on there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:29:37.512243",
          "text": "but that should be investigated without using 3 layers of quoting"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:29:48.518838",
          "text": "<@Latarsha> Ha, ya, I do agree with that."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:29:48.519120",
          "text": "and is unrelated to the typing issue"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:30:02.527793",
          "text": "I also agree with that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:30:45.555559",
          "text": "(I forgot that this originated from a typed/racket thing. <@Nelson> and I were discussing it (outside of slack) without the context of TR.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:31:45.594217",
          "text": "<@Vincenzo> (Or anyone else familiar enough with the FFI to answer), I have the following program that uses ffi/unsafe/alloc: <https://gist.github.com/LeifAndersen/353e0da21d9213dcd6a79cbd9b8c94ee>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:32:15.613341",
          "text": "In a loop, it allocates a frame, relying on the GC to clean up."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:32:22.617961",
          "text": "However, it leaks memory very quickly."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-12T10:32:24.618867",
          "text": "yes <@Latarsha> thanks for pointing out `datum-&gt;syntax`. Here's another phase 1 example (still returns the weird result)\n```\n#lang racket/base\n(require (for-syntax racket/base))\n\n(define-syntax (foo stx)\n  (with-syntax ((x (datum-&gt;syntax stx (vector-immutable 1))))\n   (syntax (syntax x))))\n\n(immutable? (syntax-e (foo)))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:32:36.626688",
          "text": "BUT, if I remove line 15 (the deallocator wrapper), it stops leaking memory."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:32:41.630027",
          "text": "Does anyone have any suggestions?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:33:58.677476",
          "text": "<@Nelson> here's the bug:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T10:33:58.677646",
          "text": "(For the record, if I remove both alloc and dealloc, and just call the `av-frame-free` function by hand everything works fine.)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:34:05.682117",
          "text": "```\n&gt; (immutable? (syntax-e (quote-syntax #(1))))\n#f\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-12T10:34:40.703492",
          "text": "note that `syntax-&gt;datum` does the right thing"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T11:25:48.683637",
          "text": "<@Latarsha> and <@Nelson> FWIW, I ran this test on Racket7, and got:\n```\nleif@FATT ~/src/racket7/racket/bin (master) $ ./racket test.rkt\n--------------------\nFAILURE\nname:       check-false\nlocation:   test.rkt:4:0\nparams:     '(#t)\nmessage:    \"(syntax-e (syntax (vector))) made immutable vector\"\n--------------------\n--------------------\nFAILURE\nname:       check-false\nlocation:   test.rkt:19:0\nparams:     '(#t)\nmessage:    \"(syntax-e (syntax (vector))) made immutable vector\"\n--------------------\n```"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-12T11:27:03.732454",
          "text": "^ this test = <http://pasterack.org/pastes/86496>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-12T11:27:17.741509",
          "text": "(point is, now the failures are consistent)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T13:25:01.912261",
          "text": "Ah, okay, thanks makes a lot of sense. Thank you."
        }
      ]
    },
    {
      "conversation_id": "88",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: leif: The short answer is that the finalization system used by [CODE] is not good enough (and wouldn't be good enough in most runtimes). Finalizers via [CODE] are run in a separate thread, so the program requires a combination of a GC and a context switch and another GC before some relevant memory can be reclaimed. Some solutions might involve limiting the allocator via [CODE] or forcing an occasional GC via [CODE].\nVincenzo: I now see the rest of your original message, and I'm puzzled offhand that removing [CODE] helps, so I'll investigate a little more.\nVincenzo: As far as I can tell, adding [CODE] slows down [CODE] enough that the finalization thread moves more slowly than the allocation thread, so my original answer is still what I think is happening. Removing [CODE] might be a reasonable solution if [CODE] is not to be called directly.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 44.71,
        "contains_question": false,
        "action_keywords": [
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-12T10:59:39.664089",
          "text": "leif: The short answer is that the finalization system used by `allocator` is not good enough (and wouldn't be good enough in most runtimes). Finalizers via `allocator` are run in a separate thread, so the program requires a combination of a GC and a context switch and another GC before some relevant memory can be reclaimed. Some solutions might involve limiting the allocator via `(sleep)` or forcing an occasional GC via `(collect-garbage)`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-12T11:17:10.348840",
          "text": "I now see the rest of your original message, and I'm puzzled offhand that removing `#:wrap (deallocator)` helps, so I'll investigate a little more."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-12T11:44:22.399419",
          "text": "As far as I can tell, adding `#:wrap (deallocator)` slows down `av-frame-free` enough that the finalization thread moves more slowly than the allocation thread, so my original answer is still what I think is happening. Removing `#:wrap (deallocator)` might be a reasonable solution if `av-frame-free` is not to be called directly."
        }
      ]
    },
    {
      "conversation_id": "89",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: So I’m pretty sure there is a bug here.\nRosalee: That would also explain why writing my own finalizer (and a single thread that calls the will executors in a loop), doesn’t have the same problem.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 121.84,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T11:26:04.694412",
          "text": "So I’m pretty sure there is a bug here."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-12T13:27:55.011655",
          "text": "That would also explain why writing my own finalizer (and a single thread that calls the will executors in a loop), doesn’t have the same problem."
        }
      ]
    },
    {
      "conversation_id": "90",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: If I register a will for a value exported by a module, can that will ever be executed?\nChantelle: use case is a value used by test modules, wondering if it can be automatically cleaned up after the tests finish by relying on [CODE] somehow\nVincenzo: Chantelle The namespace where the module is instantiated would have to become inaccessible, including not being [CODE]\nChantelle: Vincenzo if I [CODE], which contains some test submodules that require a module providing a value with an attached will, would [CODE]'s shutdown process trigger the will execution? would running the tests in parallel with [CODE] affect that?\nVincenzo: Chantelle No, I don't think [CODE] will trigger the will execution. Either you're in [CODE] mode and it's all done in one namespace or the relevant place/process exits still holding its namespace\nChantelle: drat",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 57.23,
        "contains_question": true,
        "action_keywords": [
          "finish",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-07-12T14:48:26.761040",
          "text": "If I register a will for a value exported by a module, can that will ever be executed?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-12T14:49:21.791620",
          "text": "use case is a value used by test modules, wondering if it can be automatically cleaned up after the tests finish by relying on `raco test` somehow"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-12T15:04:59.319938",
          "text": "<@Chantelle> The namespace where the module is instantiated would have to become inaccessible, including not being `current-namespace`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-12T15:28:43.050463",
          "text": "<@Vincenzo> if I `raco test -p mypackage`, which contains some test submodules that require a module providing a value with an attached will, would `raco test`'s shutdown process trigger the will execution? would running the tests in parallel with `-j` affect that?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-12T15:44:54.551223",
          "text": "<@Chantelle> No, I don't think `raco test` will trigger the will execution. Either you're in `--direct` mode and it's all done in one namespace or the relevant place/process exits still holding its namespace"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-12T15:45:40.576921",
          "text": "drat"
        }
      ]
    },
    {
      "conversation_id": "91",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Keisha: leif: Hi Leif!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Keisha"
        ]
      },
      "timeline": [
        {
          "user": "Keisha",
          "timestamp": "2017-07-12T19:33:31.239905",
          "text": "leif: Hi Leif!"
        }
      ]
    },
    {
      "conversation_id": "92",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Awwww\nGeorgeanna: is there an addendum for the redex book anywhere? the syntax in the book is a bit crufty. not sure what else changed",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 62.14,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-13T00:14:40.596134",
          "text": "Awwww"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-13T01:16:49.154057",
          "text": "is there an addendum for the redex book anywhere? the syntax in the book is a bit crufty. not sure what else changed"
        }
      ]
    },
    {
      "conversation_id": "93",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Hello",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-07-13T10:17:05.768802",
          "text": "Hello"
        }
      ]
    },
    {
      "conversation_id": "94",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Eun JFYI:\nLatarsha: [CODE_BLOCK]\nLatarsha: those are the current build regressions\nLatarsha: I believe that [CODE] and [CODE] are <[URL]\nLatarsha: [CODE] is <[URL]\nLatarsha: [CODE] is <[URL]\nLatarsha: [CODE] is a timeout in the test suite\nLatarsha: [CODE] I don't understand the test failure\nLatarsha: also, [CODE] passes on Travis on HEAD so we probably don't need to worry about it\nChantelle: Latarsha the rackunit issue is caused by one of my changes to the typed rackunit code in [CODE]. On a semi-related note, what would you think of moving the typed rackunit wrapper into the [CODE] repo?\nLatarsha: Chantelle I'm not sure what you're suggesting. I don't think that [CODE] should depend on [CODE]\nLatarsha: also, what needs to change to fix that regression?\nChantelle: Not positive on the fix yet, haven't had to time for more than a glance.\nLatarsha: ok\nRosalee: Does anyone know if [CODE] can be called in atomic mode?\nChantelle: About the suggestion, I mean making a [CODE] package in the rackunit repo and having [CODE] imply that package\nLatarsha: Chantelle that seems reasonable to me\nRosalee: Actually, never mind. I can probably just use [CODE]\nVincenzo: Rosalee: Neither [CODE] nor [CODE] seem like a good idea in atomic mode, since they can block. If [CODE] can can't block in your use and you're already in atomic mode, then would the semaphore serve a purpose? I guess you could have a function where you know the [CODE] won't block in cases where the function is called in atomic mode, but that sounds unusual.\nChantelle: Latarsha I think <[URL] isolates and fixes the rackunit issue. As an aside, rackunit's test suite code is probably due for quite a bit of housekeeping..\nRosalee: Vincenzo Woops, I meant, I can get away with using [CODE], instead of [CODE] in this case.\nRosalee: I absolutely agree that [CODE]is a bad idea to do in a [CODE].\nRosalee: Although the [CODE] I was thinking of using had an unbounded buffer size.\nVincenzo: Oh, that makes sense!\nRosalee: Okay cool, thanks.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 25,
        "duration_minutes": 501.67,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "fix",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:27:20.629834",
          "text": "<@Eun> JFYI:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:27:24.632064",
          "text": "```\n#hash((\"semver\" . (success test-fail))\n        (\"racketscript-extras\" . (no-docs build-fail))\n        (\"wrap\" . (install-conflict build-fail))\n        (\"css\" . (success test-fail))\n        (\"racketscript\" . (no-docs build-fail))\n        (\"turnstile\" . (success test-fail))\n        (\"racketscript-compiler\" . (no-docs build-fail)))\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:27:31.636535",
          "text": "those are the current build regressions"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:28:09.660337",
          "text": "I believe that `racketscript` and `racketscript-compiler` are <https://github.com/racket/typed-racket/issues/579>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:29:50.723779",
          "text": "`wrap` is <https://github.com/racket/typed-racket/issues/581>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:31:42.796189",
          "text": "`semver` is <https://github.com/racket/rackunit/issues/60>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:32:10.814027",
          "text": "`turnstile` is a timeout in the test suite"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:32:21.821394",
          "text": "`css` I don't understand the test failure"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T11:39:11.074437",
          "text": "also, `turnstile` passes on Travis on HEAD so we probably don't need to worry about it"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-13T13:55:49.691809",
          "text": "<@Latarsha> the rackunit issue is caused by one of my changes to the typed rackunit code in `typed-racket-more`. On a semi-related note, what would you think of moving the typed rackunit wrapper into the `racket/rackunit` repo?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T17:51:45.687911",
          "text": "<@Chantelle> I'm not sure what you're suggesting. I don't think that `rackunit` should depend on `typed-racket`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T17:52:04.695396",
          "text": "also, what needs to change to fix that regression?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-13T17:52:47.712567",
          "text": "Not positive on the fix yet, haven't had to time for more than a glance."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T17:53:41.733307",
          "text": "ok"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-13T17:54:08.743048",
          "text": "Does anyone know if `async-channel-put` can be called in atomic mode?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-13T17:54:13.744752",
          "text": "About the suggestion, I mean making a `rackunit-typed` package in the rackunit repo and having `typed-racket-more` imply that package"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-13T17:56:09.788481",
          "text": "<@Chantelle> that seems reasonable to me"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-13T17:57:13.812695",
          "text": "Actually, never mind. I can probably just use `call-with-semaphore`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-13T19:14:56.207311",
          "text": "<@Rosalee>: Neither `async-channel-put` nor `call-with-semaphore` seem like a good idea in atomic mode, since they can block. If `call-with-semaphore` can can't block in your use and you're already in atomic mode, then would the semaphore serve a purpose? I guess you could have a function where you know the `call-with-semaphore` won't block in cases where the function is called in atomic mode, but that sounds unusual."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-13T19:26:34.376955",
          "text": "<@Latarsha> I think <https://github.com/racket/typed-racket/pull/583> isolates and fixes the rackunit issue. As an aside, rackunit's test suite code is probably due for quite a bit of housekeeping.."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-13T19:37:39.534987",
          "text": "<@Vincenzo> Woops, I meant, I can get away with using `call-with-semaphore`, instead of `call-as-atomic` in this case."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-13T19:37:59.539663",
          "text": "I absolutely agree that `call-with-semaphore`is a bad idea to do in a `call-as-atomic`."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-13T19:38:23.545120",
          "text": "Although the `async-channel-put` I was thinking of using had an unbounded buffer size."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-13T19:46:21.653733",
          "text": "Oh, that makes sense!"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-13T19:49:00.688727",
          "text": "Okay cool, thanks."
        }
      ]
    },
    {
      "conversation_id": "95",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: zenspider: no I don't think there's any \"readers guide\" that connects the book to \"modern day redex\" :slightly_smiling_face:\nNelson: but I don't remember the syntax being confusingly-different --- I think using the book you just miss out on new things like [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.72,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-07-13T14:19:49.480183",
          "text": "zenspider: no I don't think there's any \"readers guide\" that connects the book to \"modern day redex\" :slightly_smiling_face:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-07-13T14:20:32.503862",
          "text": "but I don't remember the syntax being confusingly-different --- I think using the book you just miss out on new things like `#;binding-forms`"
        }
      ]
    },
    {
      "conversation_id": "96",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: Ahh interesting I wasn't aware that the current version of Redex had diverged from the book version. Good to know so I'll be sure to pay attention carefully when I'm tackling the book.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-07-13T18:43:08.696116",
          "text": "Ahh interesting I wasn't aware that the current version of Redex had diverged from the book version. Good to know so I'll be sure to pay attention carefully when I'm tackling the book."
        }
      ]
    },
    {
      "conversation_id": "97",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Keisha you should repost these in <#C5T5RQ546|summer-school> … I think you can do that in the [CODE] menu",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-14T00:02:24.416932",
          "text": "<@Keisha> you should repost these in <#C5T5RQ546|summer-school> … I think you can do that in the `...` menu"
        }
      ]
    },
    {
      "conversation_id": "98",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Natosha Is it possible to fix the stxparse tests soon? currently all of our CI except DrDr is failing because of that, which limits our test coverage as a whole and makes it hard to tell if we regress things\nNatosha: Latarsha should be fixed now\nLatarsha: Natosha great",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 231.96,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-07-14T10:01:05.201012",
          "text": "<@Natosha> Is it possible to fix the stxparse tests soon? currently all of our CI except DrDr is failing because of that, which limits our test coverage as a whole and makes it hard to tell if we regress things"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-07-14T13:29:46.808681",
          "text": "<@Latarsha> should be fixed now"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-14T13:53:02.508107",
          "text": "<@Natosha> great"
        }
      ]
    },
    {
      "conversation_id": "99",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: why does a plumber flush callback receive its flush handle as an argument? the docs say it's so it can conveniently unregister itself, but why would it need to do that? is it to guard against the plumber being flushed more than once, or to deal with the case where flushing is unsuccessful and should be retried?\nVincenzo: Yes, helping to avoid another flush was the intent. But I'm often unsure whether it's better to make a callback receive a relevant argument or have the callback be a closure as needed.\nChantelle: is there a reason flushing the callbacks doesn't automatically unregister them?\nGeorgeanna: [CODE] is documented as displaying by default, but that’s not the case. I need to use [CODE] to get actual output. cc/ Chantelle (since you’re in there a lot of late)\nChantelle: Georgeanna I think the docs are just wrong there. Based on the git history those two arguments have always defaulted to [CODE] and been documented as defaulting to [CODE]\nChantelle: doc patches welcome :)\nGeorgeanna: Chantelle <[URL]\nVincenzo: Chantelle For things like flushing output ports, the callback should be preserved for future flushes\nChantelle: Vincenzo I think I'm missing an understanding of when plumbers are flushed then. Wouldn't an output port's flush callback only be called just as a racket process was exiting or if someone manually called [CODE]? Are there times other than exiting that plumbers are flushed automatically?\nVincenzo: Chantelle There are no other times that plumbers are flushed automatically, but the intent is that [CODE] can be called at any time (in much the same way that a C program might call [CODE]).\nChantelle: What's the best way to take a thunk and make it run after the current thread dies?\nKimbery: Chantelle I have no idea if this would work, but would [CODE] do something useful?\nKimbery: I realize I don’t actually know what happens if a thread waits on the thread that spawned it\nLatarsha: that should work\nChantelle: hmms. what about if the thread exits abnormally? e.g. an exception or escape continuation jump?\nChantelle: I've seen [CODE] in the docs which might help\nKimbery: I think a continuation jump couldn’t change a thread’s liveness, since that would just change the continuation of the current thread\nKimbery: and an unhandled exception would still just kill the thread",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 18,
        "duration_minutes": 4449.02,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Kimbery",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-07-14T18:54:07.578716",
          "text": "why does a plumber flush callback receive its flush handle as an argument? the docs say it's so it can conveniently unregister itself, but why would it need to do that? is it to guard against the plumber being flushed more than once, or to deal with the case where flushing is unsuccessful and should be retried?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-14T19:06:24.732350",
          "text": "Yes, helping to avoid another flush was the intent. But I'm often unsure whether it's better to make a callback receive a relevant argument or have the callback be a closure as needed."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-14T19:07:13.741877",
          "text": "is there a reason flushing the callbacks doesn't automatically unregister them?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-14T21:45:00.913947",
          "text": "`test-log` is documented as displaying by default, but that’s not the case. I need to use `(void (test-log #:display? #t))` to get actual output. cc/ <@Chantelle> (since you’re in there a lot of late)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-14T21:59:47.986154",
          "text": "<@Georgeanna> I think the docs are just wrong there. Based on the git history those two arguments have always defaulted to `#f` and been documented as defaulting to `#t`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-14T21:59:57.986818",
          "text": "doc patches welcome :)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-15T00:12:37.502245",
          "text": "<@Chantelle> <https://github.com/racket/rackunit/pull/62>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-15T07:39:50.960025",
          "text": "<@Chantelle> For things like flushing output ports, the callback should be preserved for future flushes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-15T23:08:27.768303",
          "text": "<@Vincenzo> I think I'm missing an understanding of when plumbers are flushed then. Wouldn't an output port's flush callback only be called just as a racket process was exiting or if someone manually called `plumber-flush-all`? Are there times other than exiting that plumbers are flushed automatically?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-16T08:36:40.448692",
          "text": "<@Chantelle> There are no other times that plumbers are flushed automatically, but the intent is that `plumber-flush-all` can be called at any time (in much the same way that a C program might call `fflush(NULL)`)."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-17T20:50:37.780040",
          "text": "What's the best way to take a thunk and make it run after the current thread dies?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-17T20:51:51.794194",
          "text": "<@Chantelle> I have no idea if this would work, but would `(let ([t (current-thread)]) (thread (lambda () (sync t) (thunk))))` do something useful?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-17T20:52:15.798885",
          "text": "I realize I don’t actually know what happens if a thread waits on the thread that spawned it"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-17T20:53:40.815175",
          "text": "that should work"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-17T20:54:26.823542",
          "text": "hmms. what about if the thread exits abnormally? e.g. an exception or escape continuation jump?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-17T20:55:13.832835",
          "text": "I've seen `thread-dead-evt` in the docs which might help"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-17T21:02:34.920411",
          "text": "I think a continuation jump couldn’t change a thread’s liveness, since that would just change the continuation of the current thread"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-17T21:03:08.927205",
          "text": "and an unhandled exception would still just kill the thread"
        }
      ]
    },
    {
      "conversation_id": "100",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: How am I supposed to write this? [CODE_BLOCK]\nGeorgeanna: aaaaah… I push the [CODE] down to the true and false results…\nGeorgeanna: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 198.79,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-15T18:05:23.784089",
          "text": "How am I supposed to write this?\n\n```\n(define-syntax (function stx)\n  (syntax-parse stx\n    [(_ id:id)\n    #'(if (identifier-binding #'id)\n          (if (procedure? id)           ; blows up here for missing\n              id\n              (or 'ERROR (error 'function \"~v is not a function\" id)))\n          `(function ,'id)\n        )]))\n\n(define x 42)\n(define y (fn 'y (lambda (x) 42)))\n\n(function x)                            ; 'ERROR\n(function y)                            ; (function y)\n(function missing)                      ; missing: unbound identifier in module\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-15T18:09:31.799353",
          "text": "aaaaah… I push the `#'` down to the true and false results…"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-15T21:24:11.454007",
          "text": "```\nredex-check: /Users/ryan/Work/git/zenspider/schemers/racket-summerschool/driver.rkt:70\nno counterexamples in 1000 attempts\n```"
        }
      ]
    },
    {
      "conversation_id": "101",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Eun we're now down to one pkg regression, in the [CODE] pkg tests\nLatarsha: (after the next build with the TR changes)\nEun: Latarsha: Thanks, good to know.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 58.52,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-07-16T20:17:08.626890",
          "text": "<@Eun> we're now down to one pkg regression, in the `css` pkg tests"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-16T20:20:32.645508",
          "text": "(after the next build with the TR changes)"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-16T21:15:39.969442",
          "text": "<@Latarsha>: Thanks, good to know."
        }
      ]
    },
    {
      "conversation_id": "102",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Any idea what I’m missing here? ^\nRosalee: Namely, it looks like [CODE] is not searching where [CODE] says it will, despite what the docs says?\nVincenzo: You're definitely using a 32/64-bit DLL with a 32/64-bit Racket?\nIva: 55 vs 57?\nRosalee: Woops, wrong image\nRosalee: Iva I get the same issue with 57.\nVincenzo: Does the DLL have any dependencies?\nRosalee: I get this issue with both 32 and 64 bit varients of windows.\nRosalee: I downloaded them from the ffmpeg website. So honestly, I don’t know if they have any deps.\nRosalee: I can check.\nRosalee: Hmm…the website lets you pick. And I’m pretty sure I picked the right one. I’ll see if there is anyway to tell on Windows.\nRosalee: Also, here is the website: <[URL]\nVincenzo: I recommend \"depends.exe\"\nRosalee: Specifically 3.3.2 &gt; 32/64 (in this case 32) &gt; Shared\nRosalee: Oh cool, thanks.\nRosalee: Hmm…that very likely could be the problem:\nRosalee: They look like standard libraries, but apparently they’re not there.\nVincenzo: I think those are VC++ redistributable DLLs, which means that they don't come with the OS, but applications can redistribute and install them. They're a pain.\nRosalee: OH\nRosalee: Yup, that’s what I just found out too. (Although its not clear what version of the packages they are).\nRosalee: Anyway…ugg…thanks.\nVincenzo: Also keep in mind that just putting the dependencies in Racket's \"lib\" won't make them found. The strategy that works best is to manually load every dependency before anything that needs it.\nRosalee: Welp…ugg… I see.\nRosalee: Would you happen to have a good tutorial on the proper use of them?\nRosalee: (I’m going to assume no, but its worth asking anyway. :slightly_smiling_face: )\nRosalee: Vincenzo Oh interesting, it looks like the library was compiled on Ubuntu with the MinGW-w64 toolchain.\nVincenzo: I have managed to avoid all VC redistributables – mostly by using MinGW-w64, but maybe there are modes that involve them even with MinGW-w64\nVincenzo: So, other than avoiding them, I don't have good advice for dealing with redistributables\nRosalee: Ha, fair, thanks.\nRosalee: Interesting. I am not finding a mode where mingw-w64 uses VC++ libraries. I wonder if one of the DLLs that build used linked to those libraries.\nRosalee: Oh, here’s a thought. Maybe GCC has its own runtime that tries to mimic the VC++ one.\nRosalee: Vincenzo Hmm…apparently this post seems to indeicate that this might not be the case: <[URL]\nRosalee: Err…that dependency walker is misleading here.\nVincenzo: Ok – now I understand the part of the screen shown by your image. For this purpose, you should pay attention only to the top-left panel of \"depends.exe\"\nRosalee: But wasn’t that screenshot from the top panel?\nRosalee: Like, here is the whole window.\nRosalee: Ah, okay, I see what you mean now\nRosalee: (I needed a reboot apparently)\nRosalee: Vincenzo Ya, it doesn’t seem to have any extra libs.\nRosalee: (AVUtil and SWResample are also part of ffmpeg and in the same directory as AVcocec)\nVincenzo: So, does it work to explicitly load \"AVUTIL-55.DLL\" and \"SWRESAMPLE-2.DLL\" first?\nVincenzo: (since they won't be found by just being in \"lib\")\nRosalee: Oh yes they are.\nRosalee: err…yes it does work.\nRosalee: Odd. I wonder why that worked on OS X. :confused:\nRosalee: (I used the loader_path symbol when compiling it for os x, that might be why.)\nRosalee: Anyway, thanks. :smile:\nVincenzo: Yes, [CODE] avoids the problem\nRosalee: Anyway, this seems to work, if I just reorder the way I load the libraries. Thanks. :slightly_smiling_face:\nRosalee: So, question I should probably know the answer to; does this mean that if I have some lib [CODE], that links to [CODE] (but the link has an absolute path), if the program dynamically loads [CODE] first, and then [CODE], it doesn’t matter what directories the two libraries are in?\nVincenzo: Rosalee Possibly. Probably it depends on the OS, and it may depend on whether the shared library is opened in \"global\" mode versus \"local\" mode (where racket uses the latter by default, at least on most platforms)\nRosalee: That makes sense.\nRosalee: Well at least it seems to work on Windows. So thanks. :slightly_smiling_face:\nLavenia: Rosalee If you haven't seen it already: <[URL]\nRosalee: Lavenia Oh cool, thanks.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 55,
        "duration_minutes": 151.38,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Iva",
          "Lavenia",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:07:58.975679",
          "text": "<@Vincenzo> Any idea what I’m missing here? ^"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:08:24.991336",
          "text": "Namely, it looks like `ffi-lib` is not searching where `get-lib-search-dirs` says it will, despite what the docs says?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T10:09:21.025016",
          "text": "You're definitely using a 32/64-bit DLL with a 32/64-bit Racket?"
        },
        {
          "user": "Iva",
          "timestamp": "2017-07-18T10:09:37.034295",
          "text": "55 vs 57?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:09:45.038764",
          "text": "Woops, wrong image"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:09:57.045512",
          "text": "<@Iva> I get the same issue with 57."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T10:10:02.048672",
          "text": "Does the DLL have any dependencies?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:10:26.062784",
          "text": "I get this issue with both 32 and 64 bit varients of windows."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:10:44.073979",
          "text": "I downloaded them from the ffmpeg website. So honestly, I don’t know if they have any deps."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:10:49.077057",
          "text": "I can check."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:12:33.137974",
          "text": "Hmm…the website lets you pick. And I’m pretty sure I picked the right one. I’ll see if there is anyway to tell on Windows."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:12:43.143344",
          "text": "Also, here is the website: <https://ffmpeg.zeranoe.com/builds/>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T10:12:57.151569",
          "text": "I recommend \"depends.exe\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:13:11.160013",
          "text": "Specifically 3.3.2 &gt; 32/64 (in this case 32) &gt; Shared"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:13:15.163077",
          "text": "Oh cool, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:17:04.302389",
          "text": "Hmm…that very likely could be the problem:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:17:37.323091",
          "text": "They look like standard libraries, but apparently they’re not there."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T10:20:18.421427",
          "text": "I think those are VC++ redistributable DLLs, which means that they don't come with the OS, but applications can redistribute and install them. They're a pain."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:20:18.422002",
          "text": "OH"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:20:52.442960",
          "text": "Yup, that’s what I just found out too. (Although its not clear what version of the packages they are)."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:20:55.445164",
          "text": "Anyway…ugg…thanks."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T10:21:44.474535",
          "text": "Also keep in mind that just putting the dependencies in Racket's \"lib\" won't make them found. The strategy that works best is to manually load every dependency before anything that needs it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:23:42.547763",
          "text": "Welp…ugg… I see."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:23:55.555827",
          "text": "Would you happen to have a good tutorial on the proper use of them?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:24:07.563403",
          "text": "(I’m going to assume no, but its worth asking anyway. :slightly_smiling_face: )"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:29:35.769845",
          "text": "<@Vincenzo> Oh interesting, it looks like the library was compiled on Ubuntu with the MinGW-w64 toolchain."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T10:31:30.845775",
          "text": "I have managed to avoid all VC redistributables – mostly by using MinGW-w64, but maybe there are modes that involve them even with MinGW-w64"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T10:31:58.863567",
          "text": "So, other than avoiding them, I don't have good advice for dealing with redistributables"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:36:14.024242",
          "text": "Ha, fair, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:47:29.446140",
          "text": "Interesting. I am not finding a mode where mingw-w64 uses VC++ libraries. I wonder if one of the DLLs that build used linked to those libraries."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:51:21.597378",
          "text": "Oh, here’s a thought. Maybe GCC has its own runtime that tries to mimic the VC++ one."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:58:31.880475",
          "text": "<@Vincenzo> Hmm…apparently this post seems to indeicate that this might not be the case: <https://www.windowsforum.org/topic/51273-mingw-c11-app-compiles-cant-run-outside-ide-0xc000007b/>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T10:58:43.887969",
          "text": "Err…that dependency walker is misleading here."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T11:01:48.012605",
          "text": "Ok – now I understand the part of the screen shown by your image. For this purpose, you should pay attention only to the top-left panel of \"depends.exe\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:11:12.379236",
          "text": "But wasn’t that screenshot from the top panel?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:12:06.414166",
          "text": "Like, here is the whole window."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:28:39.051449",
          "text": "Ah, okay, I see what you mean now"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:28:43.054195",
          "text": "(I needed a reboot apparently)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:30:59.145439",
          "text": "<@Vincenzo> Ya, it doesn’t seem to have any extra libs."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:31:42.173262",
          "text": "(AVUtil and SWResample are also part of ffmpeg and in the same directory as AVcocec)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T11:32:07.189192",
          "text": "So, does it work to explicitly load \"AVUTIL-55.DLL\" and \"SWRESAMPLE-2.DLL\" first?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T11:32:19.197015",
          "text": "(since they won't be found by just being in \"lib\")"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:33:53.255506",
          "text": "Oh yes they are."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:33:57.258266",
          "text": "err…yes it does work."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:34:03.262046",
          "text": "Odd. I wonder why that worked on OS X. :confused:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:34:32.280234",
          "text": "(I used the @loader_path symbol when compiling it for os x, that might be why.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:34:34.281817",
          "text": "Anyway, thanks. :smile:"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T11:35:07.301843",
          "text": "Yes, `@loader_path` avoids the problem"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:36:05.338138",
          "text": "Anyway, this seems to work, if I just reorder the way I load the libraries. Thanks. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T11:42:36.583502",
          "text": "So, question I should probably know the answer to; does this mean that if I have some lib `a.so`, that links to `b.so` (but the link has an absolute path), if the program dynamically loads `b.so` first, and then `a.so`, it doesn’t matter what directories the two libraries are in?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-18T12:10:56.650558",
          "text": "<@Rosalee> Possibly. Probably it depends on the OS, and it may depend on whether the shared library is opened in \"global\" mode versus \"local\" mode (where racket uses the latter by default, at least on most platforms)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T12:13:24.738318",
          "text": "That makes sense."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T12:13:31.742806",
          "text": "Well at least it seems to work on Windows. So thanks. :slightly_smiling_face:"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-18T12:15:44.820470",
          "text": "<@Rosalee> If you haven't seen it already:  <https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-18T12:39:21.646039",
          "text": "<@Lavenia> Oh cool, thanks."
        }
      ]
    },
    {
      "conversation_id": "103",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Eun a new weird difference: <[URL] is only happening on the release build\nLatarsha: also, [CODE] passed on HEAD, still failed on the release\nEun: Latarsha: Re dssl2: I see that Coral made changes to the deps between the pre-release pkg-build run and the HEAD pkg-build run. Let's see what the next pre-release pkg-build says.\nLatarsha: ah ok\nEun: Latarsha: Re css: Wargrey got back to me, looking more into it is on my to-do list.\nLatarsha: also, I also ran the turnstile tests, they passed, I took it off the checklist\nEun: If you'd like to investigate too, I can forward you the info.\nLatarsha: I won't have time\nLatarsha: But I ran some tests and checked them off\nCoral: Eun indeed I added deps yesterday. Did I do something wrong?\nEun: Coral: I don't think so? A pre-release pkg-build (see link from samth above) that happened before your changes had some deps errors. Your changes may have fixed them.\nEun: But we'll have to wait for the next pre-release pkg-build to know for sure.\nCoral: Oh, okay, I think I fixed them. Cheers!\nEun: :)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 14,
        "duration_minutes": 127.16,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "let's"
        ],
        "decision_keywords": [],
        "participants": [
          "Coral",
          "Eun",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-07-19T10:18:35.071340",
          "text": "<@Eun> a new weird difference: <https://plt.eecs.northwestern.edu/release-pkg-build/server/built/deps/dssl2.txt> is only happening on the release build"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-19T10:18:50.080191",
          "text": "also, `css` passed on HEAD, still failed on the release"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-19T12:19:54.670699",
          "text": "<@Latarsha>: Re dssl2: I see that <@Coral> made changes to the deps between the pre-release pkg-build run and the HEAD pkg-build run. Let's see what the next pre-release pkg-build says."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-19T12:20:05.677060",
          "text": "ah ok"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-19T12:20:35.694574",
          "text": "<@Latarsha>: Re css: Wargrey got back to me, looking more into it is on my to-do list."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-19T12:20:59.708789",
          "text": "also, I also ran the turnstile tests, they passed, I took it off the checklist"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-19T12:20:59.709326",
          "text": "If you'd like to investigate too, I can forward you the info."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-19T12:21:07.713938",
          "text": "I won't have time"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-07-19T12:22:22.756801",
          "text": "But I ran some tests and checked them off"
        },
        {
          "user": "Coral",
          "timestamp": "2017-07-19T12:22:25.758227",
          "text": "<@Eun> indeed I added deps yesterday. Did I do something wrong?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-19T12:24:17.822266",
          "text": "<@Coral>: I don't think so? A pre-release pkg-build (see link from samth above) that happened before your changes had some deps errors. Your changes may have fixed them."
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-19T12:24:39.834694",
          "text": "But we'll have to wait for the next pre-release pkg-build to know for sure."
        },
        {
          "user": "Coral",
          "timestamp": "2017-07-19T12:25:12.853904",
          "text": "Oh, okay, I think I fixed them. Cheers!"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-19T12:25:44.871876",
          "text": ":)"
        }
      ]
    },
    {
      "conversation_id": "104",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Would it be bad to spawn a thread in a plumber flush callback that frees some resource and not wait on the thread before removing the flush callback registration? Could racket exit after the plumber is flushed but before the background thread finishes?\nVincenzo: Chantelle Yes, Racket could exit before the thread finishes",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 416.29,
        "contains_question": true,
        "action_keywords": [
          "finish"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-07-20T01:40:18.047672",
          "text": "Would it be bad to spawn a thread in a plumber flush callback that frees some resource and not wait on the thread before removing the flush callback registration? Could racket exit after the plumber is flushed but before the background thread finishes?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-20T08:36:35.400841",
          "text": "<@Chantelle> Yes, Racket could exit before the thread finishes"
        }
      ]
    },
    {
      "conversation_id": "105",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chau: is there a way to define something once and have it be available in both the for-syntax and the top-level without copying and pasting? [CODE] is the dumb first thought that comes to mind, and obviously that doesn't work. (If it did, I would be surprised.) (edit: where my-fn is already defined, of course)\nCorey: Chau You can define the thing in a module, then [CODE] the module both for runtime and [CODE]. For instance using [CODE] in the same file: [CODE_BLOCK]\nCorey: Or you could define [CODE] in a module that is another file like [CODE], and [CODE]. Same difference.\nChau: gotcha, thanks Corey\nCorey: Chau You're welcome. The TL;DR is define things once in a module. Then, how/when they're available is a function of how you [CODE] their module.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 21.23,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chau",
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Chau",
          "timestamp": "2017-07-20T13:13:58.815273",
          "text": "is there a way to define something once and have it be available in both the for-syntax and the top-level without copying and pasting?\n`(begin-for-syntax (define my-fn my-fn))`\nis the dumb first thought that comes to mind, and obviously that doesn't work. (If it did, I would be surprised.)\n(edit: where my-fn is already defined, of course)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-20T13:31:34.394424",
          "text": "<@Chau> You can define the thing in a module, then `require` the module both for runtime and `for-syntax`.\n\nFor instance using `module` in the same file:\n```\n#lang racket\n\n(module m racket/base\n  (provide f)\n  (define (f)\n    (println \"f\")\n    42))\n\n(require (for-syntax 'm)\n         'm)\n```"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-20T13:32:42.432902",
          "text": "Or you could define `f` in a module that is another  file like `f.rkt`, and `(require \"f.rkt\" (for-syntax \"f.rkt\"))`. Same difference."
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T13:34:07.479866",
          "text": "gotcha, thanks <@Corey>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-20T13:35:12.516615",
          "text": "<@Chau> You're welcome.  The TL;DR is define things once in a module. Then, how/when they're available is a function of how you `require` their module."
        }
      ]
    },
    {
      "conversation_id": "106",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo How often do we update the versions of various native packages?\nRosalee: As listed here: <[URL]\nRosalee: I ask because I would like to know if I can rely on Racket coming with libpng16. (Except on Linux obviously.)\nVincenzo: Rarely, and on no particular schedule\nRosalee: That makes sense. Do we have any announcement when we do?\nRosalee: I mean, I would be happy to have racket install libpng16 when its needed. But I’m worried about that conflicting with the one Racket comes with.\nRosalee: I guess, since its not going to update in the middle of a Racket version, I can just make a libpng16 package, and have an exception to not install libpng16 for versions that already have it installed.\nVincenzo: We provide libpng16 right now on Windows and Mac OS, right?\nRosalee: That is correct.\nRosalee: And on linux it needs to be installed (which it is on basically every distro….)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 10.34,
        "contains_question": true,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:32:41.205883",
          "text": "<@Vincenzo> How often do we update the versions of various native packages?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:32:47.208762",
          "text": "As listed here: <https://github.com/racket/racket/tree/master/racket/src/native-libs>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:33:09.219705",
          "text": "I ask because I would like to know if I can rely on Racket coming with libpng16. (Except on Linux obviously.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-20T16:33:23.226968",
          "text": "Rarely, and on no particular schedule"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:33:39.235110",
          "text": "That makes sense. Do we have any announcement when we do?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:34:57.273560",
          "text": "I mean, I would be happy to have racket install libpng16 when its needed. But I’m worried about that conflicting with the one Racket comes with."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:36:00.304993",
          "text": "I guess, since its not going to update in the middle of a Racket version, I can just make a libpng16 package, and have an exception to not install libpng16 for versions that already have it installed."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-20T16:37:40.354445",
          "text": "We provide libpng16 right now on Windows and Mac OS, right?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:42:40.500818",
          "text": "That is correct."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-20T16:43:01.510747",
          "text": "And on linux it needs to be installed (which it is on basically every distro….)"
        }
      ]
    },
    {
      "conversation_id": "107",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chau: I've having trouble with the [CODE] syntax class (or, at least I think I am...?): I have a custom syntax class that uses [CODE] in its pattern, but when I give it a str in the correct location it fails to match, even though the output of [CODE] is #t. I made a gist of the issue in an effort to make up a minimal reproduction: <[URL] Any help would be much appreciated! I have absolutely no idea why this is happening.\nKimbery: Chau It looks like the [CODE] class matches a string, but the last subform provided to select is a list containing a string.\nChau: Right; I explain that I still think the error is unexpected... Can you explain why it does what it does?\nChau: In the gist, rather, I explain in a comment (on the gist, not in the code)\nKimbery: I think you’ll get the behavior you expect if you add the [CODE] option to the [CODE] syntax class.\nKimbery: Unfortunately, I have to run—maybe someone else can explain in more detail (or I can once I get back).\nChau: that works -- thanks Kimbery\nChau: I don't know why, but it works\nKimbery: I have another minute or two… basically, without [CODE], syntax-parse can backtrack back _into_ a syntax class even if the syntax class originally succeeded if a later parse fails.\nKimbery: So your [CODE] pattern successfully matches [CODE] against the first pattern, then continues matching the top-level pattern, and that fails. So it backtracks into [CODE] and tries to match [CODE] against the second pattern, which always fails.\nKimbery: And specifically, it fails by throwing an exception, not by using [CODE] or something like that, so that failure is unrecoverable, and parsing halts.\nChau: oh, interesting -- so if the first syntax class pattern matches, but then after moving on, the next form in the overall syntax object doesn't match, it'll go back to the most recently tested syntax class and try other patterns?\nChau: Why is that?\nKimbery: You probably want to use [CODE] instead of [CODE]. Of course, in this case, you probably don’t want the second case at all, and instead might just want to add [CODE] to [CODE] and just let syntax-parse generate its own error message.\nKimbery: But yes, generally, syntax-parse tries _everything_. It backtracks to try every possible solution unless you explicitly add cuts/commits.\nKimbery: It’s possible to construct a situation in which that backtracking behavior is desirable, but it often isn’t, so [CODE] is a useful option for a lot of syntax classes.\nKimbery: Unfortunately, I don’t have time to construct such an example, though.\nChau: No, you've been plenty helpful even without! Thanks Kimbery\nChantelle: Chau The \"try everything\" approach is also paired with a notion of \"progress\" - syntax-parse orders possible parses based on how early they fail. When parsing fails, this lets syntax-parse choose the parse that failed the latest and uses that parse for an error message, since that's likely what you want. The \"Introduction\" section of the syntax parse docs describes this and other aspects of syntax-parse in a friendly manner, I recommend reading it: <[URL]\nKimbery: Not only is there not an easy way, there is no way at all.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 20,
        "duration_minutes": 1398.43,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Chau",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Chau",
          "timestamp": "2017-07-20T16:59:41.002857",
          "text": "I've having trouble with the `str` syntax class (or, at least I think I am...?): I have a custom syntax class that uses `str` in its pattern, but when I give it a str in the correct location it fails to match, even though the output of `(string? (syntax-e stx))` is #t.\n\nI made a gist of the issue in an effort to make up a minimal reproduction: <https://gist.github.com/fluffywaffles/e616df5399d5e7140b76229af94b30d0>\n\nAny help would be much appreciated! I have absolutely no idea why this is happening."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:00:49.037385",
          "text": "<@Chau> It looks like the `q` class matches a string, but the last subform provided to select is a list containing a string."
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T17:01:08.047092",
          "text": "Right; I explain that I still think the error is unexpected... Can you explain why it does what it does?"
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T17:01:23.054515",
          "text": "In the gist, rather, I explain in a comment (on the gist, not in the code)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:03:01.102396",
          "text": "I think you’ll get the behavior you expect if you add the `#:commit` option to the `q` syntax class."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:03:18.110170",
          "text": "Unfortunately, I have to run—maybe someone else can explain in more detail (or I can once I get back)."
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T17:03:35.118446",
          "text": "that works -- thanks <@Kimbery>"
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T17:03:51.126205",
          "text": "I don't know why, but it works"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:04:49.153252",
          "text": "I have another minute or two… basically, without `#:commit`, syntax-parse can backtrack back _into_ a syntax class even if the syntax class originally succeeded if a later parse fails."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:05:31.172918",
          "text": "So your `q` pattern successfully matches `\"hello\"` against the first pattern, then continues matching the top-level pattern, and that fails. So it backtracks into `q` and tries to match `\"hello\"` against the second pattern, which always fails."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:05:56.184378",
          "text": "And specifically, it fails by throwing an exception, not by using `~fail` or something like that, so that failure is unrecoverable, and parsing halts."
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T17:07:33.228441",
          "text": "oh, interesting -- so if the first syntax class pattern matches, but then after moving on, the next form in the overall syntax object doesn't match, it'll go back to the most recently tested syntax class and try other patterns?"
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T17:07:34.229249",
          "text": "Why is that?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:07:36.230157",
          "text": "You probably want to use `~fail` instead of `(~do (raise-syntax-error ...))`. Of course, in this case, you probably don’t want the second case at all, and instead might just want to add `#:description \"question\"` to `q` and just let syntax-parse generate its own error message."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:08:17.247811",
          "text": "But yes, generally, syntax-parse tries _everything_. It backtracks to try every possible solution unless you explicitly add cuts/commits."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:08:59.266123",
          "text": "It’s possible to construct a situation in which that backtracking behavior is desirable, but it often isn’t, so `#:commit` is a useful option for a lot of syntax classes."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-20T17:09:15.273111",
          "text": "Unfortunately, I don’t have time to construct such an example, though."
        },
        {
          "user": "Chau",
          "timestamp": "2017-07-20T17:12:44.366117",
          "text": "No, you've been plenty helpful even without! Thanks <@Kimbery>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-20T17:30:53.825327",
          "text": "<@Chau> The \"try everything\" approach is also paired with a notion of \"progress\" - syntax-parse orders possible parses based on how early they fail. When parsing fails, this lets syntax-parse choose the parse that failed the latest and uses that parse for an error message, since that's likely what you want. The \"Introduction\" section of the syntax parse docs describes this and other aspects of syntax-parse in a friendly manner, I recommend reading it: <http://docs.racket-lang.org/syntax/stxparse-intro.html?q=syntax%20parse>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-21T16:18:07.068771",
          "text": "Not only is there not an easy way, there is no way at all."
        }
      ]
    },
    {
      "conversation_id": "108",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: You can use the #:version keyword to specify a min version. Is there any easy way to specify a max version?\nRosalee: Kimbery Hmm…welp lol\nRosalee: Looks like I’ll have to catch that at runtime instead then. That sucs.\nRosalee: sucks*\nRosalee: (And is also _really_ bad. :confused: )\nKimbery: The correct policy, according to the current package system policies, is to never break backwards compatibility. That way, there’s never any reason to have a max version.\nKimbery: I make no comment on whether or not I find that policy reasonable.\nRosalee: Ya….that’s not ganna fly.\nRosalee: FFmpeg, for example, WILL break backwards compatibility, on major version updates.\nRosalee: (Minor ones will only add functionality, not breaking anything.)\nRosalee: As such, the only thing I can think of is to make a ffmpeg package for every version.\nKimbery: Then, according to the current package system policy, you should make a new (Racket) package for each breaking version of FFmpeg.\nRosalee: Well fun.\nKimbery: See section 10.5 of the package documentation. <[URL]\nRosalee: Welp great.\nRosalee: So basically the official policy is to flood the package server with slightly different versions of ffmpeg.\nRosalee: (whenever they break compatibility anyway.)\nRosalee: I guess at worst, it’ll be ~200 packages.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 18,
        "duration_minutes": 31.16,
        "contains_question": true,
        "action_keywords": [
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:15:34.005978",
          "text": "You can use the #:version keyword to specify a min version. Is there any easy way to specify a max version?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:34:38.467182",
          "text": "<@Kimbery> Hmm…welp lol"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:35:16.481782",
          "text": "Looks like I’ll have to catch that at runtime instead then. That sucs."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:35:19.482861",
          "text": "sucks*"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:35:28.486640",
          "text": "(And is also _really_ bad. :confused: )"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-21T16:37:13.528862",
          "text": "The correct policy, according to the current package system policies, is to never break backwards compatibility. That way, there’s never any reason to have a max version."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-21T16:37:26.534209",
          "text": "I make no comment on whether or not I find that policy reasonable."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:41:58.643002",
          "text": "Ya….that’s not ganna fly."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:42:16.649987",
          "text": "FFmpeg, for example, WILL break backwards compatibility, on major version updates."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:42:32.656317",
          "text": "(Minor ones will only add functionality, not breaking anything.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:42:46.661864",
          "text": "As such, the only thing I can think of is to make a ffmpeg package for every version."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-21T16:42:46.662008",
          "text": "Then, according to the current package system policy, you should make a new (Racket) package for each breaking version of FFmpeg."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:43:01.667805",
          "text": "Well fun."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-21T16:44:00.691031",
          "text": "See section 10.5 of the package documentation. <http://docs.racket-lang.org/pkg/FAQ.html#%28part._.How_can_.I_specify_which_version_of_a_package_.I_depend_on_if_its_interface_has_changed_and_.I_need_an_old_version_%29>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:45:40.730786",
          "text": "Welp great."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:46:09.742001",
          "text": "So basically the official policy is to flood the package server with slightly different versions of ffmpeg."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:46:19.746125",
          "text": "(whenever they break compatibility anyway.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-21T16:46:43.755519",
          "text": "I guess at worst, it’ll be ~200 packages."
        }
      ]
    },
    {
      "conversation_id": "109",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: I'd been thinking about the current package policy, I was wondering if it would be feasible to layer a protocol on top of the current package system. Create a package of packages, a \"meta-package\", give it a canonical name, and each package in the meta-package would represent a major version with minor versions being kept within each package.\nJacob: I'm not sure how feasible that idea would be and whether the current system can be hacked in that fashion.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.58,
        "contains_question": false,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:01:58.868141",
          "text": "I'd been thinking about the current package policy, I was wondering if it would be feasible to layer a protocol on top of the current package system. Create a package of packages, a \"meta-package\", give it a canonical name, and each package in the meta-package would represent a major version with minor versions being kept within each package."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:02:33.889879",
          "text": "I'm not sure how feasible that idea would be and whether the current system can be hacked in that fashion."
        }
      ]
    },
    {
      "conversation_id": "110",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: I mean, as _users_ of packages I think everyone agrees we want them to act like persistent data structures -- only add new capabilities, never take away old ones?\nCorey: As _developers_ of packages: There's no shame in saying, well, after making Thing, I realize it should have had a whole other design -- and going on to make Other Thing.\nCorey: I think there's some shame in saying, Thing is now a shadow of its former self, and will suddenly break things. And transitively break things.\nCorey: I'd love to see us stick with this idea(l) as long as we can?\nCorey: But I don't know what to do about situations like Rosalee trying to wrap or use something that is rampantly mutating its interface with contract-busting major versions.\nLavenia: Have thing1, thing2, ..., thingN and then have a bonus package named thing that just reexports thingN ?\nJacob: Corey, I'm sympathetic to that idea, it is frustrating to manage compatibility breaking issues and I'm interested in seeing how far we can go with one package per compatibility-respecting code , but on the other hand, it would be nice to have some notion of namespace management to handle various versions\nKimbery: I strongly believe that Racket would benefit from a more ordinary language package management solution, with version bounds and a constraint solver.\nJacob: Lavenia yeah that pretty much sums up what I am talking about.\nKimbery: But it’s been a little while.\nJacob: Would that be possible to reexport packages through one package?\nLavenia: Jacob If I recall correctly, there were a discussion on the mailing list (about the time the new package system arrived)\nJacob: yes, I do recall that as well, I read all of correspondence that got generated when the new system was released, I'd have to go back and review to see if any viable ideas were proposed\nKimbery: FWIW, I thought about adding a metaprotocol of sorts on top of the existing package system, but since then I’ve realized it would probably be easier to just extend the package system to add more metadata to packages and features to [CODE].\nJacob: yeah, I'm in agreement, it seems it'd be easier to just extend the system, most of the ideas to date can be categorized as \"adding more metadata\" and have better metadata aware tools.\nKimbery: So, my current understanding is that there would need to be four changes to get the package system to where I want it to be. (1) Packages need to become a mapping from package name *+* version to package sources, instead of just package name. This can be added by adding more metadata to the existing package protocol. (2) Packages need to be able to specify version ranges in their [CODE] files. (3) [CODE] needs to be extended to do constraint solving when installing packages. (4) Racket needs support for package “sandboxes” a la Cabal sandboxes, Bundler environments, or Python virtualenv, so that multiple versions of a package can be installed on the same machine without breaking everything.\nKimbery: None of those things are anywhere near new research, but they are still a lot of work.\nCorey: Should there also be Scribble enhancements -- so that as well as \"added in version x\" you can say \"taken away in version x\" or \"gratuitously changed in version x\"? I am mostly but not entirely joking. :slightly_smiling_face:\nKimbery: I think so! Having better tooling support for deprecations would be good, too.\nJacob: or available in #lang version4.5\nJacob: though that probably would be an abuse of the lang system!\nKimbery: Well, to be clear, my vision does _not_ involve installing multiple versions of a package at the same time, or specifying versions in imports a la PLaneT. There are various reasons why you want to decouple version specification from module imports.\nCorey: Are these versions a new dimension by which we multiply the [CODE] packages, too?\nJacob: Kimbery your understanding seems spot-on and is what I was thinking too. The package sources are already uniquely identified by the package checksum so it would be a simple mapping from name to the checksum.\nKimbery: Corey No, not in the sense that they would take up multiple spots in the package index. Think closer to a generalization of version exceptions.\nJacob: Corey I would consider those packages to be \"satellite packages\" and grouped together\nKimbery: There are a lot of other changes I would ideally make to Racket’s package system if we could start from scratch, including a way to subsume the lib/doc/test split, but those things are far harder than anything I mentioned so far, since they would involve more fundamental changes to how Racket internally treats modules and module loading.\nKimbery: The package system is currently designed in such a way that the core of Racket knows effectively nothing about packages. Packages just extend collections, and Racket only knows about collections.\nKimbery: There are downsides to this, though, such as the fact that it’s impossible to resolve conflicts in the case where multiple packages provide modules at the same path.\nKimbery: (And that includes multiple versions of the same package, in the proposed system.)\nCorey: If the pkg mgr could handle modules (for the lib/doc/test purpose), it could handle modules like api1, api2 ... and _that_ feels better to me than arbitrary version numbers and disappearing interfaces.\nKimbery: I don’t think you want multiple versions to be distinct packages because you really want to be able to depend on version ranges.\nCorey: But I don't care about version ranges. Those are a proxy for capabilities, which I do care about. :slightly_smiling_face:\nCorey: I'd rather say, \"I need api-that-gives-me-foo, and the docs, but not the tests\", for example..\nJacob: I'm not sure if changing module treatment and loading would be good idea, at the end of the day, the packages are being combined to create a set of collections that are available for Racket to load. lib/tests/docs don't necessarily need to be handled specially at the module level.\nJacob: Indeed, I feel would rather have a capability that points to specified set of interfaces and dependencies, instead of harder to understand version numbers.\nJacob: hmmm, that does seem like a potentially fruitful direction, but I fear it likely need a lot more research before it'd be viable for general community use.\nKimbery: Corey You could certainly try and design something much more elaborate than version numbers, but generally some notion of semantic versioning tends to be a good set of compromises to solve that problem.\nKimbery: Especially since often you want to break compatibility in a small way, and you want some dependent packages to use conditional compilation to pave over the differences.\nCorey: I guess I've logged some time with things like [CODE] in COM, [CODE] in Emacs Lisp, and [CODE] in Racket. And I've found it preferable (to me) to ask directly for the thing I actually care about. Than to have a level of indirection looking at hopefully correct docs and change logs.\nCorey: If the desired function turns out not to exist, and the pkg versioning theory is \"only add\", then I can give the user an error message like \"Please update to the latest ___\", and that's it. [Edit: Or, maybe gracefully downgrade something.]\nCorey: Maybe that's impractical but I stubbornly want to live in a world like that :slightly_smiling_face:\nKimbery: For what it’s worth, I abandoned the idea of using Racket at work because of the lack of versioning. And I’ve sort of drifted away from Racket development _in general_ because of it. The burden on package authors to divine a perfect architecture in the first version is far, far too much in a field that strongly benefits from rapid iteration on incremental changes.\nKimbery: The strategy of adding an entirely new package for breaking changes isn’t good enough, since often the change in question is actually quite small, and you don’t want to completely fragment your own ecosystem just to change a small thing that likely won’t impact 90% of users.\nCorey: Those are great points. And to be clear, I'm definitely in favor of a boolean \"I'm ready/willing for other packages to depend on mine\" flag, and having the option not to set that until you're ready!\nKimbery: The current package policy works okay with very small teams, but I now work in a large organization that needs the ability to move asynchronously and update at their own pace.\nKimbery: JS’s and Haskell’s package systems have supported our needs there quite nicely.\nChantelle: for open source racket the problem is somewhat mitigated by the package-wide continuous build system\nChantelle: but if you're not using that and you write a lot of packages the pain will magnify\nKimbery: We have a number of internal packages that break compatibility on a monthly basis, and that’s okay, because we publish detailed changelogs and let people upgrade whenever they get the chance.\nKimbery: CI can’t change the fundamental problem of backwards incompatible changes retroactively breaking code that worked before without changing anything, which is unacceptable.\nChantelle: I didn't say it changed the fundamental problem, I said it somewhat mitigated it\nKimbery: I didn’t claim you did, but I’m mostly just expressing that these problems are not imaginary, since _I_ have basically ditched Racket for anything “real” because the tooling doesn’t support my needs.\nJacob: Kimbery it's concerning that you weren't able to accommodate the current package system to your organization's needs, that says to me the system needs at least a review. It's been in use for how long as it been? 3-4 years? That's long enough to reassess how successful the system has been and what improvements would be needed.\nKimbery: I don’t think the changes I mentioned would be terribly controversial; they were formed in a discussion between me and a few other people. Someone just needs to implement them.\nKimbery: But that takes time and effort, and currently nobody has enough of that to spare.\nJacob: I'm in a position where I'm using Racket at work for small-scale projects, I've yet had the opportunity to seriously use the package system to manage my needs, so it'll be interesting to see how far I'm able to go.\nKimbery: One example of something we’ve done at my organization that has been extremely successful is a Haskell DSL we use for writing deployment scripts. We use Haskell’s package versioning system to write self-executing scripts in Haskell (with a relevant shebang), which is pretty cool. Since the scripts express the version they depend on, we can judiciously break backwards compatibility whenever it makes sense, which has let us rapidly iterate without feeling a need for BDUF.\nKimbery: I couldn’t really do that in Racket, even if it would be a good tool for the job.\nChantelle: How well would a two stage solution work that first added everything except the ability to install multiple versions at the same time? The other three pieces are much easier to implement and might work as a temporary solution.\nKimbery: They’re mostly independent, but the sandboxing is pretty necessary to avoid inventing Cabal Hell in the Racket ecosystem. Sandboxing is actually mostly implemented, too, so it’s actually probably not that much effort to add.\nKimbery: If it were a huge amount of work, I would agree with you, but I don’t think it makes a ton of sense to skip if you’re also going to do the comparatively monumental amount of work to implement the other parts.\nJacob: may you point me to where the sandbox environment has been implemented? Is it a raco feature?\nKimbery: There isn’t really user-facing tooling for it, so the work would basically just be to integrate it with raco, but the infrastructure exists. I can’t remember exactly where the relevant features are documented, but the feature is called “tethering”.\nJacob: ooh I do remember coming across that term\nKimbery: It’s alluded to here: <[URL]\nChantelle: An important question is whether implementing it would require help from mflatt, since he likely won't have time to focus on stuff other than racket7\nKimbery: I think it could be done with minimal knowledge of Racket internals. A few questions here and there maybe, but I don’t see why much of it would involve anything complicated.\nKimbery: I would bet the majority of the work would be extending [CODE] to do constraint solving and handle the notion of version conflicts.\nJacob: Suppose the four main items are designed and made available in a side-branch of the racket mainline. Would it be able to accommodate the current style of additive changes. Suppose one package favors the additive style and other one takes the version numbering approach. How do we manage users experience so they don't get confused by two different styles?\nKimbery: A package could easily just only make additive changes by only ever bumping the minor version.\nKimbery: But there would certainly be some tricky migration/compat issues to work out.\nKimbery: I don’t think any of them are super hard, though.\nJacob: and by setting max version to #f indefinitely really\nKimbery: IIRC, the proposed compatibility solution was to basically (for now) treat packages specified without bounds as [CODE].\nChantelle: The version constraint solving doesn't sound like the hard part, especially if it's implemented with the aid of a logic programming dsl\nKimbery: I don’t really mean the constraint solving algorithm itself, but I mean plumbing the inputs and outputs of that algorithm through the rest of the system.\nKimbery: You need to set up the infrastructure to make the version information available to the solver and configurable by users. You need to handle all the corner cases of version conflicts and solver failures. You need to present meaningful error messages when the solver doesn’t come up with a solution. And you need to implement all of this while maintaining backwards compatibility with the old system.\nJacob: indeed oof that sums up the problem.\nKimbery: Doing package management right is really hard! I don’t know of any programming language that got it right from the beginning, most added it on only after it became obvious how necessary it was. :p\nKimbery: (And many langs still have awful package management. Go comes to mind…)\nJacob: we just need to find that magic wand everybody keeps talking about.\nRosalee: I agree with Kimbery Saying ‘make a new package’ whenever you make a breaking change seems fine, until you realize that what is going to happen is that your going to get a package catalog with hundreds of packages per actual package.\nRosalee: Jacob Oh, its in the cellar, let me go grab it.\nChantelle: Plus different users have different ideas of what a breaking change is\nJacob: and the current package index is not easy to parse so your own study case is only going to exacerbate it.\nRosalee: Chantelle That too. So….this is why I make a new package for every git commit.\nRosalee: (Or at least every commit I push.)\nChantelle: _Plus_ you can't even tell ahead of time whether a change is going to break any dependents with perfect accuracy!\nChantelle: in a large enough ecosystem someone's always using your thing in a way you never could have anticipated\nKimbery: Tbh that’s one of the reasons why I think Hackage’s ability to edit constraints after publishing a package is a good feature.\nKimbery: A lot of tools get unhappy with the notion that releases are not immutable. But otherwise, if you don’t have that option, those bad constraints stick around and mess up the solver forever.\nChantelle: a release's content being immutable while its declared relationships to other releases being mutable doesn't sound so bad to me either\nKimbery: But yeah. All of Maven, Bundler, NPM/Yarn, Cabal, etc. are tools added long after the lang was invented to solve this problem.\nKimbery: I guess maybe Cargo gets this right from the beginning? But Rust is unique in a lot of different ways. :)\nJacob: so we have several notions at work here, some set of release source files, versions, canonical names, bundling variants with or without docs, constraints. Need to figure out how to stir all of them into a workable backwards compatible solution.\nJacob: the idea of dependency relationships being modified after the release doesn't sound too bad to me either.\nKimbery: Racket’s package model is more mutable than many, anyway, since the package system doesn’t even host the package sources.\nJacob: The obvious next step for me is to study other package solutions, see what ideas they overlap in and what work and doesn't work.\nKimbery: So a bad actor could just nuke a git repo or push a change to a release tag and cause a lot of problems. But I would not recommend addressing that problem with all of this.\nChantelle: there's a really good blog post about package systems that's helpful for this\nChantelle: <[URL]\nJacob: That reminds me of that time when someone blew away their npm contributions and crashed the npm network which had been depending on one small packages released by that author departing with all of his toys.\nChantelle: wasn't that the \"leftpad\" package?\nJacob: yeah that sounds right\nKimbery: IMO, the Bundler/Cabal models are a really good set of tools to study. Yarn is good, too, but its model is different from Racket’s, so it’s not really relevant.\nJacob: thanks Chantelle and Kimbery it's probably foolish of me to contemplate coming up with something that makes an impact but this is definitely a problem area that deserves a closer look.\nChantelle: at the very least a tracking issue in the racket repo with some sort of plan and a breakdown of the work to do would be a big step forward\nJacob: ha, <#C06V96CKX|general> anybody wants to join in?\nChantelle: maybe after I finish working on stuff for racketcon :p\nJacob: and a few other projects, or next year...\nKimbery: I’d be interested in working on it if I had about 40 more hours per week. ;)\nJacob: more seriously, is the general management interested in entertaining a significant update to the package system? Or would we need to do some lobbying?\nJacob: I do realize this likely may need changes to be made to DrRacket's package manager, and the package index site, so that'll be nontrivial to coordinate.\nChantelle: the package site probably wouldn't _have_ to change to support this\nKimbery: The package server would. But not necessarily the frontend, I suppose.\nKimbery: I found the email thread from a little over a year ago between me, Vincenzo, and Latarsha. Here’s the bulk of what we concluded, as outlined by Matthew: [CODE_BLOCK]\nKimbery: There was a little more discussion after that, but that’s close to what we generally ended up agreeing on. I don’t think any of those changes would be especially controversial if someone went and implemented them, but that’s no small feat.\nJacob: that was very helpful, good to know how the others stand on it.\nJacob: one relevant question here, are the current package tools designed to help end-users or developers? Should the tools attempt to help both audiences?\nVincenzo: As long as someone follows that kind of plan – one that doesn't involve changing the way that module-name resolution works – then I think anyone could implement the changes. It's mostly a matter of updating the package client in \"collects/pkg\" (and tests and docs), the package-catalog server's implementation at <[URL] , possibly the pkg-build service's implementation at <[URL] , and the GUI package manager at <[URL] . Anything that changes the way module-name resolution works, in contrast, is almost certainly more trouble than you expect, even after I tell you that it's trouble.\nJacob: Vincenzo thank you for the references to the repositories. I believe at this time the module-name resolution should be left alone. Modifying it in anyway would open a too big can of worms. I think the sensible approach at this time is to extend the current system in consecutive ways.\nCorey: Kimbery I had to step away, and I'm catching up, and I think this thing you said is interesting for me: &gt; We have a number of internal packages that break compatibility on a monthly basis, and that’s okay, because we publish detailed changelogs and let people upgrade whenever they get the chance. This is using the package manager in a way that hadn't really occurred to me. Here, \"breaking changes\" not only isn't bad, it's good -- because it means \"people are making progress\". Whereas I've been thinking about the public package manager as a way for people/orgs to provide code for others to use. In which case, breaking changes is something I don't want to do to other people. If I do it accidentally, I'll try to fix it quickly. And I'd like to depend on packages with a similar attitude. So that's why I'm feeling, geez, this seems like a lot of work to support breaking changes, and instead why not try to encourage and help people not do that in the first place. However, you're looking at it also from the point of view of using the package manager as part of in-house configuration management?\nJacob: This gets at the distinction between regular end-users and developer users. The link referred to by Chantelle goes into the distinction in depth and is insightful about that difference.\nCorey: Ah OK ... will catch up more! :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 125,
        "duration_minutes": 154.65,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "complete",
          "create",
          "discuss",
          "finish",
          "fix",
          "implement",
          "need to",
          "please",
          "review",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Jacob",
          "Kimbery",
          "Lavenia",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:24:58.653393",
          "text": "I mean, as _users_ of packages I think everyone agrees we want them to act like persistent data structures -- only add new capabilities, never take away old ones?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:25:47.680947",
          "text": "As _developers_ of packages: There's no shame in saying, well, after making Thing, I realize it should have had a whole other design -- and going on to make Other Thing."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:26:52.716953",
          "text": "I think there's some shame in saying, Thing is now a shadow of its former self, and will suddenly break things. And transitively break things."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:27:35.740200",
          "text": "I'd love to see us stick with this idea(l) as long as we can?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:28:35.773765",
          "text": "But I don't know what to do about situations like <@Rosalee> trying to wrap or use something that is rampantly mutating its interface with contract-busting major versions."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T12:31:21.866622",
          "text": "Have thing1, thing2, ..., thingN  and then have a bonus package named thing that just reexports  thingN ?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:35:10.991226",
          "text": "<@Corey>, I'm sympathetic to that idea, it is frustrating to manage compatibility breaking issues and I'm interested in seeing how far we can go with one package per compatibility-respecting code , but on the other hand, it would be nice to have some notion of namespace management to handle various versions"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:35:24.998691",
          "text": "I strongly believe that Racket would benefit from a more ordinary language package management solution, with version bounds and a constraint solver."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:35:27.000437",
          "text": "<@Lavenia> yeah that pretty much sums up what I am talking about."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:35:52.013715",
          "text": "But it’s been a little while."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:36:04.020133",
          "text": "Would that be possible to reexport packages through one package?"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T12:36:27.032166",
          "text": "<@Jacob>  If I recall correctly, there were a discussion on the mailing list (about the time the new package system arrived)"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:37:19.059947",
          "text": "yes, I do recall that as well, I read all of correspondence that got generated when the new system was released, I'd have to go back and review to see if any viable ideas were proposed"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:37:37.069436",
          "text": "FWIW, I thought about adding a metaprotocol of sorts on top of the existing package system, but since then I’ve realized it would probably be easier to just extend the package system to add more metadata to packages and features to `raco pkg`."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:38:42.103752",
          "text": "yeah, I'm in agreement, it seems it'd be easier to just extend the system, most of the ideas to date can be categorized as \"adding more metadata\" and have better metadata aware tools."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:41:26.190952",
          "text": "So, my current understanding is that there would need to be four changes to get the package system to where I want it to be. (1) Packages need to become a mapping from package name *+* version to package sources, instead of just package name. This can be added by adding more metadata to the existing package protocol. (2) Packages need to be able to specify version ranges in their `info.rkt` files. (3) `raco pkg` needs to be extended to do constraint solving when installing packages. (4) Racket needs support for package “sandboxes” a la Cabal sandboxes, Bundler environments, or Python virtualenv, so that multiple versions of a package can be installed on the same machine without breaking everything."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:42:09.213908",
          "text": "None of those things are anywhere near new research, but they are still a lot of work."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:42:21.220540",
          "text": "Should there also be Scribble enhancements -- so that as well as \"added in version x\" you can say \"taken away in version x\" or \"gratuitously changed in version x\"?  I am mostly but not entirely joking. :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:43:02.242381",
          "text": "I think so! Having better tooling support for deprecations would be good, too."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:43:11.247165",
          "text": "or available in #lang version4.5"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:43:28.256445",
          "text": "though that probably would be an abuse of the lang system!"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:44:19.283961",
          "text": "Well, to be clear, my vision does _not_ involve installing multiple versions of a package at the same time, or specifying versions in imports a la PLaneT. There are various reasons why you want to decouple version specification from module imports."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:44:31.290366",
          "text": "Are these versions a new dimension by which we multiply the `{-lib -doc -test}` packages, too?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:44:39.294877",
          "text": "<@Kimbery> your understanding seems spot-on and is what I was thinking too. The package sources are already uniquely identified by the package checksum so it would be a simple mapping from name to the checksum."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:45:19.316126",
          "text": "<@Corey> No, not in the sense that they would take up multiple spots in the package index. Think closer to a generalization of version exceptions."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:45:21.317523",
          "text": "<@Corey> I would consider those packages to be \"satellite packages\" and grouped together"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:46:44.363507",
          "text": "There are a lot of other changes I would ideally make to Racket’s package system if we could start from scratch, including a way to subsume the lib/doc/test split, but those things are far harder than anything I mentioned so far, since they would involve more fundamental changes to how Racket internally treats modules and module loading."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:47:18.382106",
          "text": "The package system is currently designed in such a way that the core of Racket knows effectively nothing about packages. Packages just extend collections, and Racket only knows about collections."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:47:50.399877",
          "text": "There are downsides to this, though, such as the fact that it’s impossible to resolve conflicts in the case where multiple packages provide modules at the same path."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:48:05.408342",
          "text": "(And that includes multiple versions of the same package, in the proposed system.)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:48:36.425024",
          "text": "If the pkg mgr could handle modules (for the lib/doc/test purpose), it could handle modules like api1, api2 ... and _that_ feels better to me than arbitrary version numbers and disappearing interfaces."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:49:08.442836",
          "text": "I don’t think you want multiple versions to be distinct packages because you really want to be able to depend on version ranges."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:49:43.461767",
          "text": "But I don't care about version ranges. Those are a proxy for capabilities, which I do care about. :slightly_smiling_face:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:50:21.482688",
          "text": "I'd rather say, \"I need api-that-gives-me-foo, and the docs, but not the tests\", for example.."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:50:22.483559",
          "text": "I'm not sure if changing module treatment and loading would be good idea, at the end of the day, the packages are being combined to create a set of collections that are available for Racket to load.\nlib/tests/docs don't necessarily need to be handled specially at the module level."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:51:24.517858",
          "text": "Indeed, I feel would rather have a capability that points to specified set of interfaces and dependencies, instead of harder to understand version numbers."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T12:52:03.539219",
          "text": "hmmm, that does seem like a potentially fruitful direction, but I fear it likely need a lot more research before it'd be viable for general community use."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:52:04.539621",
          "text": "<@Corey> You could certainly try and design something much more elaborate than version numbers, but generally some notion of semantic versioning tends to be a good set of compromises to solve that problem."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:53:17.580148",
          "text": "Especially since often you want to break compatibility in a small way, and you want some dependent packages to use conditional compilation to pave over the differences."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:54:57.635062",
          "text": "I guess I've logged some time with things like `QueryInterface` in COM, `fboundp` in Emacs Lisp, and `dynamic-require` in Racket.\nAnd I've found it preferable (to me) to ask directly for the thing I actually care about.\nThan to have a level of indirection looking at hopefully correct docs and change logs."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:55:53.665821",
          "text": "If the desired function turns out not to exist, and the pkg versioning theory is \"only add\", then I can give the user an error message like \"Please update to the latest ___\", and that's it.  [Edit: Or, maybe gracefully downgrade something.]"
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T12:57:16.710536",
          "text": "Maybe that's impractical but I stubbornly want to live in a world like that :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:58:07.735161",
          "text": "For what it’s worth, I abandoned the idea of using Racket at work because of the lack of versioning. And I’ve sort of drifted away from Racket development _in general_ because of it. The burden on package authors to divine a perfect architecture in the first version is far, far too much in a field that strongly benefits from rapid iteration on incremental changes."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:59:26.781265",
          "text": "The strategy of adding an entirely new package for breaking changes isn’t good enough, since often the change in question is actually quite small, and you don’t want to completely fragment your own ecosystem just to change a small thing that likely won’t impact 90% of users."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T13:00:17.811137",
          "text": "Those are great points. And to be clear, I'm definitely in favor of a boolean \"I'm ready/willing for other packages to depend on mine\" flag, and having the option not to set that until you're ready!"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:00:21.813190",
          "text": "The current package policy works okay with very small teams, but I now work in a large organization that needs the ability to move asynchronously and update at their own pace."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:00:46.828425",
          "text": "JS’s and Haskell’s package systems have supported our needs there quite nicely."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:00:55.834279",
          "text": "for open source racket the problem is somewhat mitigated by the package-wide continuous build system"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:01:13.844274",
          "text": "but if you're not using that and you write a lot of packages the pain will magnify"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:01:20.849120",
          "text": "We have a number of internal packages that break compatibility on a monthly basis, and that’s okay, because we publish detailed changelogs and let people upgrade whenever they get the chance."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:01:46.864109",
          "text": "CI can’t change the fundamental problem of backwards incompatible changes retroactively breaking code that worked before without changing anything, which is unacceptable."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:02:08.876555",
          "text": "I didn't say it changed the fundamental problem, I said it somewhat mitigated it"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:03:17.916803",
          "text": "I didn’t claim you did, but I’m mostly just expressing that these problems are not imaginary, since _I_ have basically ditched Racket for anything “real” because the tooling doesn’t support my needs."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:03:51.935357",
          "text": "<@Kimbery> it's concerning that you weren't able to accommodate the current package system to your organization's needs, that says to me the system needs at least a review. It's been in use for how long as it been? 3-4 years? That's long enough to reassess how successful the system has been and what improvements would be needed."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:04:43.964424",
          "text": "I don’t think the changes I mentioned would be terribly controversial; they were formed in a discussion between me and a few other people. Someone just needs to implement them."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:05:01.974245",
          "text": "But that takes time and effort, and currently nobody has enough of that to spare."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:05:14.981369",
          "text": "I'm in a position where I'm using Racket at work for small-scale projects, I've yet had the opportunity to seriously use the package system to manage my needs, so it'll be interesting to see how far I'm able to go."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:07:11.044222",
          "text": "One example of something we’ve done at my organization that has been extremely successful is a Haskell DSL we use for writing deployment scripts. We use Haskell’s package versioning system to write self-executing scripts in Haskell (with a relevant shebang), which is pretty cool. Since the scripts express the version they depend on, we can judiciously break backwards compatibility whenever it makes sense, which has let us rapidly iterate without feeling a need for BDUF."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:07:40.059351",
          "text": "I couldn’t really do that in Racket, even if it would be a good tool for the job."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:08:52.097277",
          "text": "How well would a two stage solution work that first added everything except the ability to install multiple versions at the same time? The other three pieces are much easier to implement and might work as a temporary solution."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:10:02.135086",
          "text": "They’re mostly independent, but the sandboxing is pretty necessary to avoid inventing Cabal Hell in the Racket ecosystem. Sandboxing is actually mostly implemented, too, so it’s actually probably not that much effort to add."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:10:50.161173",
          "text": "If it were a huge amount of work, I would agree with you, but I don’t think it makes a ton of sense to skip if you’re also going to do the comparatively monumental amount of work to implement the other parts."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:10:56.164329",
          "text": "may you point me to where the sandbox environment has been implemented? Is it a raco feature?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:12:26.211495",
          "text": "There isn’t really user-facing tooling for it, so the work would basically just be to integrate it with raco, but the infrastructure exists. I can’t remember exactly where the relevant features are documented, but the feature is called “tethering”."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:12:45.221720",
          "text": "ooh I do remember coming across that term"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:12:50.224321",
          "text": "It’s alluded to here: <http://docs.racket-lang.org/raco/dirs.html#%28def._%28%28lib._setup%2Fdirs..rkt%29._find-addon-tethered-console-bin-dir%29%29>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:14:27.277034",
          "text": "An important question is whether implementing it would require help from mflatt, since he likely won't have time to focus on stuff other than racket7"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:15:17.304981",
          "text": "I think it could be done with minimal knowledge of Racket internals. A few questions here and there maybe, but I don’t see why much of it would involve anything complicated."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:15:58.326976",
          "text": "I would bet the majority of the work would be extending `raco pkg install` to do constraint solving and handle the notion of version conflicts."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:16:11.333523",
          "text": "Suppose the four main items are designed and made available in a side-branch of the racket mainline. Would it be able to accommodate the current style of additive changes. Suppose one package favors the additive style and other one takes the version numbering approach. How do we manage users experience so they don't get confused by two different styles?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:16:55.357135",
          "text": "A package could easily just only make additive changes by only ever bumping the minor version."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:17:07.363744",
          "text": "But there would certainly be some tricky migration/compat issues to work out."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:17:13.367260",
          "text": "I don’t think any of them are super hard, though."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:17:17.369162",
          "text": "and by setting max version to #f indefinitely really"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:18:31.408670",
          "text": "IIRC, the proposed compatibility solution was to basically (for now) treat packages specified without bounds as `&gt;=1 &amp;&amp; &lt;2`."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:18:47.417500",
          "text": "The version constraint solving doesn't sound like the hard part, especially if it's implemented with the aid of a logic programming dsl"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:19:25.437452",
          "text": "I don’t really mean the constraint solving algorithm itself, but I mean plumbing the inputs and outputs of that algorithm through the rest of the system."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:20:46.480769",
          "text": "You need to set up the infrastructure to make the version information available to the solver and configurable by users. You need to handle all the corner cases of version conflicts and solver failures. You need to present meaningful error messages when the solver doesn’t come up with a solution. And you need to implement all of this while maintaining backwards compatibility with the old system."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:21:43.511361",
          "text": "indeed oof that sums up the problem."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:23:44.576274",
          "text": "Doing package management right is really hard! I don’t know of any programming language that got it right from the beginning, most added it on only after it became obvious how necessary it was. :p"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:24:14.592476",
          "text": "(And many langs still have awful package management. Go comes to mind…)"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:24:32.602176",
          "text": "we just need to find that magic wand everybody keeps talking about."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T13:24:45.609110",
          "text": "I agree with <@Kimbery> Saying ‘make a new package’ whenever you make a breaking change seems fine, until you realize that what is going to happen is that your going to get a package catalog with hundreds of packages per actual package."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T13:25:02.618407",
          "text": "<@Jacob>  Oh, its in the cellar, let me go grab it."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:25:11.623188",
          "text": "Plus different users have different ideas of what a breaking change is"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:25:21.629034",
          "text": "and the current package index is not easy to parse so your own study case is only going to exacerbate it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T13:26:03.652098",
          "text": "<@Chantelle> That too. So….this is why I make a new package for every git commit."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T13:26:12.657043",
          "text": "(Or at least every commit I push.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:27:29.699632",
          "text": "_Plus_ you can't even tell ahead of time whether a change is going to break any dependents with perfect accuracy!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:27:56.714250",
          "text": "in a large enough ecosystem someone's always using your thing in a way you never could have anticipated"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:28:02.717592",
          "text": "Tbh that’s one of the reasons why I think Hackage’s ability to edit constraints after publishing a package is a good feature."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:28:35.736152",
          "text": "A lot of tools get unhappy with the notion that releases are not immutable. But otherwise, if you don’t have that option, those bad constraints stick around and mess up the solver forever."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:29:22.762285",
          "text": "a release's content being immutable while its declared relationships to other releases being mutable doesn't sound so bad to me either"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:29:25.764356",
          "text": "But yeah. All of Maven, Bundler, NPM/Yarn, Cabal, etc. are tools added long after the lang was invented to solve this problem."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:29:54.780659",
          "text": "I guess maybe Cargo gets this right from the beginning? But Rust is unique in a lot of different ways. :)"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:30:47.811198",
          "text": "so we have several notions at work here, some set of release source files, versions, canonical names, bundling variants with or without docs, constraints. Need to figure out how to stir all of them into a workable backwards compatible solution."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:31:59.851582",
          "text": "the idea of dependency relationships being modified after the release doesn't sound too bad to me either."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:32:24.865806",
          "text": "Racket’s package model is more mutable than many, anyway, since the package system doesn’t even host the package sources."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:33:07.889742",
          "text": "The obvious next step for me is to study other package solutions, see what ideas they overlap in and what work and doesn't work."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:33:16.894554",
          "text": "So a bad actor could just nuke a git repo or push a change to a release tag and cause a lot of problems. But I would not recommend addressing that problem with all of this."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:33:38.906477",
          "text": "there's a really good blog post about package systems that's helpful for this"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:33:49.912525",
          "text": "<https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527>"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:34:06.921494",
          "text": "That reminds me of that time when someone blew away their npm contributions and crashed the npm network which had been depending on one small packages released by that author departing with all of his toys."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:34:21.929921",
          "text": "wasn't that the \"leftpad\" package?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:34:26.932805",
          "text": "yeah that sounds right"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:34:35.937613",
          "text": "IMO, the Bundler/Cabal models are a really good set of tools to study. Yarn is good, too, but its model is different from Racket’s, so it’s not really relevant."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:35:53.979135",
          "text": "thanks <@Chantelle> and <@Kimbery> it's probably foolish of me to contemplate coming up with something that makes an impact but this is definitely a problem area that deserves a closer look."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:36:47.007788",
          "text": "at the very least a tracking issue in the racket repo with some sort of plan and a breakdown of the work to do would be a big step forward"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:37:26.028930",
          "text": "ha, <#C06V96CKX|general> anybody wants to join in?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:37:42.037636",
          "text": "maybe after I finish working on stuff for racketcon :p"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:38:03.048939",
          "text": "and a few other projects, or next year..."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:39:17.088798",
          "text": "I’d be interested in working on it if I had about 40 more hours per week. ;)"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:39:21.090661",
          "text": "more seriously, is the general management interested in entertaining a significant update to the package system? Or would we need to do some lobbying?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:40:22.123466",
          "text": "I do realize this likely may need changes to be made to DrRacket's package manager, and the package index site, so that'll be nontrivial to coordinate."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T13:40:53.139784",
          "text": "the package site probably wouldn't _have_ to change to support this"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:41:13.150796",
          "text": "The package server would. But not necessarily the frontend, I suppose."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:43:49.236277",
          "text": "I found the email thread from a little over a year ago between me, <@Vincenzo>, and <@Latarsha>. Here’s the bulk of what we concluded, as outlined by Matthew:\n```\n* Change the information for a package in a catalog to include a\n  version -&gt; source mapping.\n\n  Concretely, this mapping could go under a `pkg-versions` key added\n  to the current table. So, for backward compatibility, we still have\n  the current information (for the latest version) as it's reported\n  now. Also, package clients could continue to deal with catalogs that\n  don;t include a `pkg-versions` entry.\n\n  The version listed for a given source and checksum would be checked\n  against the `version` declaration in a package's \"info.rkt\" file.\n  The package manager would still only allow the installation of one\n  checksum (as selected by version number, typically) per package.\n\n* Change the catalog at <http://pkgs.racket-lang.org|pkgs.racket-lang.org> to accumulate a\n  version-keyed mapping by noticing when, in the case of a Git-based\n  source, a new checksum has a new version. When the version changes,\n  the server can keep the previous version mapped to the previous\n  checksum.\n\n  For sources not based on Git, package authors would have to use some\n  extra interface or tool to set a mapping. We'd want a `raco` tool\n  for tasks like that. (It's strange to me that such a tool doesn't\n  exist already.) The tool could also help authors using a Git repo\n  update the package version number appropriately.\n\n  If <http://pkgs.racket-lang.org|pkgs.racket-lang.org> missed a version due to a rapid sequence of\n  version updates, if broken versions need to be removed, if a new\n  revision for an old version needs to be introduced on a branch, etc.\n  --- all of those would be possible manually. The automatic\n  construction of the version table by <http://pkgs.racket-lang.org|pkgs.racket-lang.org> would just\n  be a convenience for the common case and make it behave similar to\n  the current system in those simple cases.\n\n* Change the package-manager client to support the usual constraints\n  on dependency versions. The package installation and update tools\n  would have to solve those dependencies.\n\n  The current `#:version` field in a dependency would be interpreted\n  as allow &gt;= version and &lt;= the next major version (non-inclusive). A\n  new keyword for a dependency would support more general constraints.\n\n  [The \"graphs\" package declares a dependency on \"base\" version\n   \"5.3.2\". That looks like the only package whose version dependency\n   would need to be adjusted to fix this rule.]\n\n  I imagine that `raco pkg update` should by default only update to a\n  checksum for a version whose major number matches the current\n  installation. Also, it should downgrade a package to solve\n  constraints only if the user says that downgrades are ok.\n\n  Right now, most dependency specifications are unversioned. I don't\n  think it will work to assume \"1.x\", unless we add a special case for\n  \"base\" to default to \"6.x\" and figure out something for \"0.x\".\n  Unless we find something better, we'll end up allowing dependency\n  specifications without a compatibility level, which is too bad.\n\n  The dependency information currently provided by\n  <http://pkgs.racket-lang.org|pkgs.racket-lang.org> is not precise enough to resolve dependencies\n  --- it merges `deps` and `build-deps` --- but that should be easy\n  to fix.\n\n* A stack-like sequence of catalogs could provide a suitable set of\n  default versions/checksums of packages (but, as always, that catalog\n  can be overridden for a given package by specifying a non-catalog\n  source) and serve as an archive of available packages.\n\n* Tools like `raco pkg catalog-archive` could take a version\n  constraint, which would typically be specified on \"base\", and solve\n  constraints in the same way as installation.\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T13:44:43.265675",
          "text": "There was a little more discussion after that, but that’s close to what we generally ended up agreeing on. I don’t think any of those changes would be especially controversial if someone went and implemented them, but that’s no small feat."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T13:45:24.288180",
          "text": "that was very helpful, good to know how the others stand on it."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T14:00:17.783512",
          "text": "one relevant question here, are the current package tools designed to help end-users or developers? Should the tools attempt to help both audiences?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-24T14:39:46.088770",
          "text": "As long as someone follows that kind of plan – one that doesn't involve changing the way that module-name resolution works – then I think anyone could implement the changes. It's mostly a matter of updating the package client in \"collects/pkg\" (and tests and docs), the package-catalog server's implementation at <https://github.com/racket/pkg-index> , possibly the pkg-build service's implementation at <https://github.com/racket/pkg-build> , and the GUI package manager at <https://github.com/racket/gui-pkg-manager> .\n\nAnything that changes the way module-name resolution works, in contrast, is almost certainly more trouble than you expect, even after I tell you that it's trouble."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T14:53:44.549579",
          "text": "<@Vincenzo> thank you for the references to the repositories. I believe at this time the module-name resolution should be left alone. Modifying it in anyway would open a too big can of worms. I think the sensible approach at this time is to extend the current system in consecutive ways."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T14:56:37.644694",
          "text": "<@Kimbery> I had to step away, and I'm catching up, and I think this thing you said is interesting for me:\n\n&gt; We have a number of internal packages that break compatibility on a monthly basis, and that’s okay, because we publish detailed changelogs and let people upgrade whenever they get the chance.\n\nThis is using the package manager in a way that hadn't really occurred to me. Here, \"breaking changes\" not only isn't bad, it's good -- because it means \"people are making progress\".\n\nWhereas I've been thinking about the public package manager as a way for people/orgs to provide code for others to use. In which case, breaking changes is something I don't want to do to other people.  If I do it accidentally, I'll try to fix it quickly. And I'd like to depend on packages with a similar attitude.\n\nSo that's why I'm feeling, geez, this seems like a lot of work to support breaking changes, and instead why not try to encourage and help people not do that in the first place.  However, you're looking at it also from the point of view of using the package manager as part of in-house configuration management?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T14:58:31.708583",
          "text": "This gets at the distinction between regular end-users and developer users. The link referred to by <@Chantelle> goes into the distinction in depth and is insightful about that difference."
        },
        {
          "user": "Corey",
          "timestamp": "2017-07-24T14:59:37.744982",
          "text": "Ah OK ... will catch up more! :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "111",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I’ve discussed a little bit about what that would take to do right with… Vincenzo and Latarsha, IIRC?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T12:35:47.011114",
          "text": "I’ve discussed a little bit about what that would take to do right with… <@Vincenzo> and <@Latarsha>, IIRC?"
        }
      ]
    },
    {
      "conversation_id": "112",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: lexi.lambda. abmclin, leif, Corey: I'm a bit late to the discussion, but this looks like it may lead to a good Racketeer Office Hours project in Seattle! :)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-07-24T16:05:07.735618",
          "text": "@lexi.lambda. @abmclin, @leif, <@Corey>: I'm a bit late to the discussion, but this looks like it may lead to a good Racketeer Office Hours project in Seattle! :)"
        }
      ]
    },
    {
      "conversation_id": "113",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: FWIW, Kimbery I don’t think any ‘lobbying’ to management, so to speak, is required to improve the package manager. Its more about not having the resources…..\nKimbery: That’s what I was saying, I think you want to direct that comment at Jacob.\nRosalee: Like, if someone where to do it, I don’t think anyone would reject the idea, just….its a lot of work.\nRosalee: Ah, okay\nRosalee: Thanks\nRosalee: In that case… Jacob ^\nKimbery: Corey It’s not really configuration management. It’s that we have an internal tool that starts as the most minimal thing that could _possibly_ work, since we want to move quickly and do agile, incremental software design. The thing is, the tool is naturally going to grow in scope as our needs grow and we develop it further, and that means we could either (a) slot all the new features into the existing model, or (b) continuously refactor the architecture to meet new needs. We need the ability to break changes as our software evolves in order to be able to add new features without things turning into a big ball of mud. That’s true whether or not it’s an internal tool or not, really. Moving fast sometimes means continuously rethinking the interface to keep it clean even in the face of new scope.\nGeorgeanna: yay! I’m gonna meet even more of you in Seattle\nKimbery: I would prefer to use a library that kept a clean, consistent interface and kept migration to a new version *well-documented* over one that infinitely preserved backwards compatibility but ended up with an awful API.\nLavenia: Other features on the wish list: A daily / weekly email with new packages with links to documentation (and/or info on updated packages)\nGeorgeanna: I agree… this is also why I spawn off new projects from old so that they can age/version at their own natural rates\nGeorgeanna: Lavenia that would be lovely… “This week in Racket” type of thing would be awesome to keep up (for the time being)\nRosalee: Kimbery Or one like…cough…ffmpeg…cough….where the API just keeps getting more and more things tacked onto it (sometimes in api breaking ways. :disappointed: ), and now there’s 50 billion ways to do the same thing, and only one of them is right. But because all of the tutorial (intentionally singular) was written 10 years ago so it uses an old api…..) sigh. :disappointed:\nKimbery: yeah, dynamic libs tend to suffer from API rot because C has no ability to ever break compatibility.\nLavenia: Rosalee luckily C is known to give friendly error messages, when things go wrong :wink:\nJacob: I won't pretend it'd be easy, I understand it's a lot of work. This is something I'd only be able to work on the nights and other periods of free time so I have to be realistic, but I won't mind making an attempt. I think there's enough information to be able to construct a viable roadmap draft at the minimum as suggested by Chantelle\nRosalee: Lavenia lol……… Although I do have to say that is actually one area i was pleasantly surprised. Despite the shitty language, FFmpeg’s error messages are actually quite nice.\nRosalee: And the code itself was quite nice. The only problem is the documentation, also known as the code. :disappointed:\nRosalee: Is it just me, or are the latest nightlies of DrRacket kind of slow?\nRosalee: Georgeanna ya\nRosalee: Well…technically I’m using ones I’ve compiled from source, but they’re pretty similar.\nGeorgeanna: I was (poorly) trying to imply that DrRacket is just slow.\nRosalee: oh, I see…lol.\nRosalee: Well yes it is. But even more slow than usual….\nRosalee: Like, usually I can type without a second of lag…. :confused:\nLavenia: That doesn't sound right?\nRosalee: Okay, so its not just me then.\nRosalee: I’m going to blow everything away then and see if that helps.\nRosalee: Vincenzo Are there any examples of using the FFI for C functions that have callbacks?\nRosalee: (And I want to pass in a racket function)\nRosalee: I’ve never gotten it to work anyway.\nVincenzo: Rosalee There are examples in the draw and GUI libraries; I see [CODE] in [CODE] is passed [CODE] as a callback\nRosalee: okay thanks.\nRosalee: Would this work if the last argument to the callback was a va_list?\nRosalee: I ask because the function I am trying to call is: <[URL]\nVincenzo: Rosalee Taking a [CODE] argument is tricky, because the representation depends on the system. If you can ignore the [CODE] argument, then just have your callback take the first two\nRosalee: Vincenzo I see. I thought a [CODE] arg was just a pointer to the actual list structure. (Where the list structure is platform dependent.)\nRosalee: Compared to [CODE], which just puts it inlined.\nRosalee: Although I have to admit that my knowledge in this particular area of C is a bit…er…limited. (I can’t find many good resources on it anyway.)\nLavenia: Rosalee <[URL]\nRosalee: Lavenia Thanks. while a good callback example, it doesn’t seem to handle a va_list.\nLavenia: Ok. I look in that repo for examples. A shame he never got to write the tutorial.\nLavenia: A strange thing about the FFI: The paper on the FFI is easier to grasp than the documentation.\nRosalee: Ha…ya.\nRosalee: IMO, that’s because the paper actually has a rational for why they designed it the way they did.\nRosalee: Which makes it a lot easier to predict.\nRosalee: Anyway, I sadly don’t see anything about va_list in that repo. Oh well. :disappointed:\nRosalee: Vincenzo okay, here is an alternative that might work. Is there any way to intercept what an FFI call prints to stdout?\nVincenzo: Rosalee no\nRosalee: rats. :disappointed:\nRosalee: So basically I would have to have my whole program run in an environment that captures the stdout….that’s unfortunate.\nRosalee: Thanks anyway though.\nRosalee: Vincenzo Since different architectures implement va_list differently, but still follow a common C interface, would it then be reasonable to add a primitive to internal racket to convert a va_list to a vector? Something like [CODE] or something like that?\nRosalee: Then we could add that functionality to the FFI library.\nRosalee: (Since at the moment it seems like there is no way to handle a va_list in our ffi)\nVincenzo: I don't think [CODE] would work well, and probably the C interface would need to be followed more closely with something like [CODE], and it needs to be in the FFI to work right with types. Also, we'd need a new primitive type for [CODE] itself.\nRosalee: Sorry, but I couldn’t parse ‘would need to be followed more closely with something like [CODE]‘, could you clarify what you mean by that?\nRosalee: Ah, I think I know what you are saying.\nRosalee: Because we wouldn’t know what the types are, it would be hard to grab the resulting types of data out of the vector.\nRosalee: Adding a [CODE] type to our FFI ‘seems’ doable.\nVincenzo: It looks like [CODE] is pointer-sized in practice. So, if you're trying to call [CODE] or something like that to format a log message, probably using [CODE] will work. Or do you really need access to the individual arguments referenced by the [CODE]?\nRosalee: Nah, in this case using [CODE] should work.\nRosalee: I have a format string, and I need expand it.\nRosalee: But that’s about it.\nRosalee: So I’ll give that a shot, thanks.\nRosalee: Vincenzo Wouldn’t we actually want [CODE]?\nRosalee: Since I won’t know how much buffer space I’ll need?\nVincenzo: (I don't know at the variants. I just know to throw in [CODE] for \"string\", [CODE] for [CODE], and [CODE] at an attempt to be safe.)\nRosalee: Yup\nRosalee: I had to read the man page to get it.\nRosalee: But [CODE] is for allocate.\nRosalee: Which means it will eventually need to be freed.\nRosalee: But that one is easy enough to do.\nRosalee: Ideally I would rather use [CODE], but there doesn’t seem to be a good api for determining if your buffer was big enough.\nRosalee: And, as far as I can tell, for stuff like that, most c programmers seem to take a ‘good enough’ approach to this.\nRosalee: Vincenzo If I have a [CODE] in my FFI call, with the Racket GC collect the output pointer, or will I have to free it by hand?\nRosalee: Anyway, modulo that possible memory leaked, your suggestion worked. So thanks. :slightly_smiling_face:\nRosalee: Ah, fair. It has an argument for a char**, which fills the pointer with a char*.\nRosalee: So you’re saying it would be better to just use a [CODE], copy it into a _string`, and then free the _pointer then?\nRosalee: (As I understand it anyway)\nVincenzo: Yes. You can use [CODE], but do the [CODE] to [CODE] cast (which will allocate a string) yourself, and then you can free the [CODE] value\nRosalee: Cool, thanks.\nRosalee: BTW, I have been meaning to ask, do you have any idea how the Racket7 codebase will effect the FFI?\nRosalee: err…affect*\nVincenzo: So far, I think it will mostly work. Finalization will be different, but most finalization patterns will work in both.\nRosalee: Okay, that’s good. Thanks.\nRosalee: (I’ve obviously been making heavy use of it. :slightly_smiling_face: )\nRosalee: Vincenzo Is there any good way to specify to the Racket FFI that I would like version 6.69.100 and up?)\nRosalee: Or rather, 6.69.100 and up, up to 7.x, and then its incompatible again.\nRosalee: It seems like passing in a whole list of strings to [CODE] would be massively too long.\nRosalee: I guess I could just do the string processing myself.\nRosalee: hmm…actually, no that won’t work. Because I have to give it an absolute path in that case. :confused:\nVincenzo: Rosalee I don't know how to do that generally, whether using the Racket FFI or anything else\nRosalee: Ya, I ended up just opening it up, and checking the version after the fact.\nRosalee: I would imagine dlopen has something it does, but that’s more work than I think its worth at the moment.\nVincenzo: Jacob Racket-on-Chez doesn't yet build on Windows mostly because I haven't sorted out how a build will work there – not using Unix tools – but also because Windows path parsing is not yet implemented\nGeorgeanna: heh. I think I did once back in the day. probably wasn’t SUPPOSED to. :slightly_smiling_face:\nRosalee: Vincenzo Hmm…functions like vasprintf don’t seem to be loaded in Racket’s windows build.\nRosalee: Ah, that specific one is a gnu extension according to SO. oh well. <[URL]\nRosalee: Vincenzo So for what its worth, treeting the va_list like a pointer seems to cause erratic behavior.\nRosalee: I mean, the bug _could_ be somewhere else, and I’m seeing if I can reduce it down.\nRosalee: But…a.\nRosalee: ya*\nVincenzo: Rosalee What platform are you on?\nVincenzo: Nevermind – I see that [CODE] is 24 bytes on Mac OS, so it must vary more than I thought, and I must have mangled my experiment before\nVincenzo: Thinking about it more, a portable solution seems hopeless without [CODE] support in libffi, because the specific representation of a [CODE] can affect the way that it's passed in registers or on the stack. The only idea I have is to define [CODE] in [CODE] based on the result of [CODE] – so it would work only for platforms where we've specifically tracked down and hard-coded the representation.\nRosalee: Vincenzo ya, that sounds about right.\nRosalee: Also I’m on OS X.\nRosalee: I’ll look at the system V ABI specs, if they are at least consistent among different instruction sets we probably do have a chance\nRosalee: Looking at the c99 spec, it requires that va_list be a type.\nRosalee: And if that is the case, it seems like if we make a _va-list type, while we won’t be able to do anything with it in Racket code, it could be passed to C code.\nRosalee: (I’m looking at section 7.15 of the latest draft of the c99 spec.)\nRosalee: (As I don’t have a copy of the actual release.)\nLavenia: Rosalee Supporting va_list seems painful. Just found the section \"Variable Length Arguments\" in the SWIG manual. It has the subtitle \"The horror. The horror.\"\nLavenia: <[URL]\nRosalee: Lavenia Not trying support varargs…That would be really hard. :confused:\nRosalee: Just va_list.\nRosalee: Which is doable, as its just another value.\nRosalee: As long as it stays an opaque value to Racket, that is fine.\nRosalee: Trying to mimick va_arg, va_first, etc. or the [CODE] protocol, that sounds scary.\nRosalee: At least based on what I’ve ascertained at the moment.\nLavenia: Iam clearly conflating those. Aren't va_list used to deal with variable arguments?\nRosalee: You are correct.\nRosalee: va_list however, can also be passed to another function as a type.\nRosalee: This is used if you, say, want to make a helper function.\nLavenia: Ok. So va_list is also useful in other situations.\nRosalee: [CODE_BLOCK]\nRosalee: Yup\nRosalee: in this case, I want to write [CODE]\nRosalee: In particular…\nRosalee: I want to write [CODE] that just passes the [CODE] to another (C) function.\nRosalee: Because I’m hooking up two libraries.\nRosalee: Through Racket….\nRosalee: Of course, this still isn’t enough to duplicate va_copy, as that’s macro. To do that, we would need to make scheme_va_copy, or something like that.\nRosalee: Which does nothing but call the macro.\nRosalee: Of course, if we do that, it would make sense to do that for va_arg as well.\nRosalee: We couldn’t do [CODE] and [CODE] though, because that would require supporting vaargs, and [CODE], which, as you rightly pointed out, is terrifying.\nRosalee: At least, what it looks like anyway. Perhaps I’m wrong.\nLavenia: Thanks for the example.\nRosalee: Any time. :slightly_smiling_face:\nRosalee: Vincenzo worksp/librktio/… vs librktio/… these two directories seem pretty similar. Is one of them deprecated?",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 141,
        "duration_minutes": 2864.9,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "create",
          "implement",
          "must",
          "need to",
          "requires",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Jacob",
          "Kimbery",
          "Lavenia",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:06:57.790659",
          "text": "FWIW, <@Kimbery> I don’t think any ‘lobbying’ to management, so to speak, is required to improve the package manager. Its more about not having the resources….."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T16:07:18.801010",
          "text": "That’s what I was saying, I think you want to direct that comment at <@Jacob>."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:07:26.805010",
          "text": "Like, if someone where to do it, I don’t think anyone would reject the idea, just….its a lot of work."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:07:34.809155",
          "text": "Ah, okay"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:07:36.810008",
          "text": "Thanks"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:07:45.814566",
          "text": "In that case… <@Jacob> ^"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T16:08:22.833290",
          "text": "<@Corey> It’s not really configuration management. It’s that we have an internal tool that starts as the most minimal thing that could _possibly_ work, since we want to move quickly and do agile, incremental software design. The thing is, the tool is naturally going to grow in scope as our needs grow and we develop it further, and that means we could either (a) slot all the new features into the existing model, or (b) continuously refactor the architecture to meet new needs.\n\nWe need the ability to break changes as our software evolves in order to be able to add new features without things turning into a big ball of mud. That’s true whether or not it’s an internal tool or not, really. Moving fast sometimes means continuously rethinking the interface to keep it clean even in the face of new scope."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-24T16:09:08.855345",
          "text": "yay! I’m gonna meet even more of you in Seattle"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T16:09:12.857450",
          "text": "I would prefer to use a library that kept a clean, consistent interface and kept migration to a new version *well-documented* over one that infinitely preserved backwards compatibility but ended up with an awful API."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T16:09:48.875255",
          "text": "Other features on the wish list:  A daily / weekly email with new packages with links to documentation (and/or info on updated packages)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-24T16:09:54.878252",
          "text": "I agree… this is also why I spawn off new projects from old so that they can age/version at their own natural rates"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-24T16:10:27.895154",
          "text": "<@Lavenia> that would be lovely… “This week in Racket” type of thing would be awesome to keep up (for the time being)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:12:41.961110",
          "text": "<@Kimbery> Or one like…cough…ffmpeg…cough….where the API just keeps getting more and more things tacked onto it (sometimes in api breaking ways. :disappointed: ), and now there’s 50 billion ways to do the same thing, and only one of them is right. But because all of the tutorial (intentionally singular) was written 10 years ago so it uses an old api…..) sigh. :disappointed:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-07-24T16:13:23.981421",
          "text": "yeah, dynamic libs tend to suffer from API rot because C has no ability to ever break compatibility."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T16:16:52.082825",
          "text": "<@Rosalee> luckily C is known to give friendly error messages, when things go wrong :wink:"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-07-24T16:17:53.112796",
          "text": "I won't pretend it'd be easy, I understand it's a lot of work. This is something I'd only be able to work on the nights and other periods of free time so I have to be realistic, but I won't mind making an attempt. I think there's enough information to be able to construct a viable roadmap draft at the minimum as suggested by <@Chantelle>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:24:46.315798",
          "text": "<@Lavenia> lol………  Although I do have to say that is actually one area i was pleasantly surprised. Despite the shitty language, FFmpeg’s error messages are actually quite nice."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T16:25:04.325029",
          "text": "And the code itself was quite nice. The only problem is the documentation, also known as the code. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:10:45.682257",
          "text": "Is it just me, or are the latest nightlies of DrRacket kind of slow?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:14:26.780971",
          "text": "<@Georgeanna> ya"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:14:56.793834",
          "text": "Well…technically I’m using ones I’ve compiled from source, but they’re pretty similar."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-24T17:14:59.795128",
          "text": "I was (poorly) trying to imply that DrRacket is just slow."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:15:19.803668",
          "text": "oh, I see…lol."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:15:27.807543",
          "text": "Well yes it is. But even more slow than usual…."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:15:36.811183",
          "text": "Like, usually I can type without a second of lag…. :confused:"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T17:16:31.834841",
          "text": "That doesn't sound right?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:17:11.852260",
          "text": "Okay, so its not just me then."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:17:25.858573",
          "text": "I’m going to blow everything away then and see if that helps."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:26:28.089313",
          "text": "<@Vincenzo> Are there any examples of using the FFI for C functions that have callbacks?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:26:37.093218",
          "text": "(And I want to pass in a racket function)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:26:46.096974",
          "text": "I’ve never gotten it to work anyway."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-24T17:30:40.192532",
          "text": "<@Rosalee> There are examples in the draw and GUI libraries; I see `png_create_read_struct` in `racket/draw/unsafe/png` is passed `error-esc` as a callback"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:30:56.199393",
          "text": "okay thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:31:53.223169",
          "text": "Would this work if the last argument to the callback was a va_list?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:32:26.236177",
          "text": "I ask because the function I am trying to call is: <http://ffmpeg.org/doxygen/3.2/group__lavu__log.html#ga14034761faf581a8b9ed6ef19b313708>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-24T17:44:33.525928",
          "text": "<@Rosalee> Taking a `va_list` argument is tricky, because the representation depends on the system. If you can ignore the `va_list` argument, then just have your callback take the first two"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:46:39.574749",
          "text": "<@Vincenzo> I see. I thought a `va_list` arg was just a pointer to the actual list structure. (Where the list structure is platform dependent.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:46:49.578468",
          "text": "Compared to `...`, which just puts it inlined."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:47:18.590037",
          "text": "Although I have to admit that my knowledge in this particular area of C is a bit…er…limited. (I can’t find many good resources on it anyway.)"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T17:52:45.715727",
          "text": "<@Rosalee> <https://github.com/dyoo/ffi-tutorial/tree/master/ffi/tutorial/examples/struct-with-callbacks>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T17:56:37.804190",
          "text": "<@Lavenia> Thanks. while a good callback example, it doesn’t seem to handle a va_list."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T17:57:29.823638",
          "text": "Ok. I look in that repo for examples. A shame he never got to write the tutorial."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-24T17:58:32.847432",
          "text": "A strange thing about the FFI:  The paper on the FFI is easier to grasp than the documentation."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:00:05.881163",
          "text": "Ha…ya."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:00:21.888225",
          "text": "IMO, that’s because the paper actually has a rational for why they designed it the way they did."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:00:34.893244",
          "text": "Which makes it a lot easier to predict."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:01:05.905151",
          "text": "Anyway, I sadly don’t see anything about va_list in that repo. Oh well. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:02:03.926534",
          "text": "<@Vincenzo> okay, here is an alternative that might work. Is there any way to intercept what an FFI call prints to stdout?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-24T18:02:41.940125",
          "text": "<@Rosalee> no"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:03:11.950408",
          "text": "rats. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:03:51.964926",
          "text": "So basically I would have to have my whole program run in an environment that captures the stdout….that’s unfortunate."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-24T18:03:55.966092",
          "text": "Thanks anyway though."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:29:11.409657",
          "text": "<@Vincenzo> Since different architectures implement va_list differently, but still follow a common C interface, would it then be reasonable to add a primitive to internal racket to convert a va_list to a vector? Something like `va_list_to_vector()` or something like that?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:29:22.415527",
          "text": "Then we could add that functionality to the FFI library."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:29:45.427190",
          "text": "(Since at the moment it seems like there is no way to handle a va_list in our ffi)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T09:33:10.535581",
          "text": "I don't think `va_list_to_vector()` would work well, and probably the C interface would need to be followed more closely with something like `va_arg()`, and it needs to be in the FFI to work right with types. Also, we'd need a new primitive type for `va_list` itself."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:36:14.632119",
          "text": "Sorry, but I couldn’t parse ‘would need to be followed more closely with something like `va_arg()`‘, could you clarify what you mean by that?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:37:49.681920",
          "text": "Ah, I think I know what you are saying."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:38:17.696838",
          "text": "Because we wouldn’t know what the types are, it would be hard to grab the resulting types of data out of the vector."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:39:43.742349",
          "text": "Adding a `(_va-list …)` type to our FFI ‘seems’ doable."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T09:50:32.093596",
          "text": "It looks like `va_list` is pointer-sized in practice. So, if you're trying to call `vsnprintf` or something like that to format a log message, probably using `_pointer` will work. Or do you really need access to the individual arguments referenced by the `va_list`?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:51:25.123107",
          "text": "Nah, in this case using `vsnprintf` should work."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:51:48.135635",
          "text": "I have a format string, and I need expand it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:51:55.139046",
          "text": "But that’s about it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T09:52:02.142674",
          "text": "So I’ll give that a shot, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:17:14.035156",
          "text": "<@Vincenzo> Wouldn’t we actually want `vasnprintf`?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:17:30.045501",
          "text": "Since I won’t know how much buffer space I’ll need?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T10:19:52.134133",
          "text": "(I don't know at the variants. I just know to throw in `s` for \"string\", `v` for `va_list`, and `n` at an attempt to be safe.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:25:48.353689",
          "text": "Yup"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:25:57.359233",
          "text": "I had to read the man page to get it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:26:05.364423",
          "text": "But `a` is for allocate."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:26:16.370698",
          "text": "Which means it will eventually need to be freed."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:26:24.376292",
          "text": "But that one is easy enough to do."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:27:09.404600",
          "text": "Ideally I would rather use `vsnprintf`, but there doesn’t seem to be a good api for determining if your buffer was big enough."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T10:27:31.419089",
          "text": "And, as far as I can tell, for stuff like that, most c programmers seem to take a ‘good enough’ approach to this."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:23:57.567928",
          "text": "<@Vincenzo> If I have a `(_ptr o _string)` in my FFI call, with the Racket GC collect the output pointer, or will I have to free it by hand?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:31:55.878364",
          "text": "Anyway, modulo that possible memory leaked, your suggestion worked. So thanks. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:49:28.564370",
          "text": "Ah, fair. It has an argument for a char**, which fills the pointer with a char*."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:50:12.593478",
          "text": "So you’re saying it would be better to just use a `_pointer`, copy it into a _string`, and then free the _pointer then?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:50:20.598894",
          "text": "(As I understand it anyway)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T11:51:44.654093",
          "text": "Yes. You can use `(_ptr o _pointer)`, but do the `_pointer` to `_string` cast (which will allocate a string) yourself, and then you can free the `_pointer` value"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:52:00.664589",
          "text": "Cool, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:52:20.677632",
          "text": "BTW, I have been meaning to ask, do you have any idea how the Racket7 codebase will effect the FFI?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:52:33.685872",
          "text": "err…affect*"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T11:54:23.757058",
          "text": "So far, I think it will mostly work. Finalization will be different, but most finalization patterns will work in both."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:55:50.812846",
          "text": "Okay, that’s good. Thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T11:56:09.825016",
          "text": "(I’ve obviously been making heavy use of it. :slightly_smiling_face: )"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T14:26:31.068099",
          "text": "<@Vincenzo> Is there any good way to specify to the Racket FFI that I would like version 6.69.100 and up?)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T14:26:55.082017",
          "text": "Or rather, 6.69.100 and up, up to 7.x, and then its incompatible again."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T14:27:20.096646",
          "text": "It seems like passing in a whole list of strings to `ffi-lib` would be massively too long."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T14:28:47.147816",
          "text": "I guess I could just do the string processing myself."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T14:43:27.655633",
          "text": "hmm…actually, no that won’t work. Because I have to give it an absolute path in that case. :confused:"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T15:56:22.987679",
          "text": "<@Rosalee> I don't know how to do that generally, whether using the Racket FFI or anything else"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T15:57:57.038792",
          "text": "Ya, I ended up just opening it up, and checking the version after the fact."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T15:58:17.050270",
          "text": "I would imagine dlopen has something it does, but that’s more work than I think its worth at the moment."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T15:58:42.064045",
          "text": "<@Jacob> Racket-on-Chez doesn't yet build on Windows mostly because I haven't sorted out how a build will work there – not using Unix tools – but also because Windows path parsing is not yet implemented"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-25T18:39:17.384736",
          "text": "heh. I think I did once back in the day. probably wasn’t SUPPOSED to. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T22:58:32.763256",
          "text": "<@Vincenzo> Hmm…functions like vasprintf don’t seem to be loaded in Racket’s windows build."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-25T23:00:14.781994",
          "text": "Ah, that specific one is a gnu extension according to SO. oh well. <https://stackoverflow.com/questions/40159892/using-asprintf-on-windows>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T11:36:03.023353",
          "text": "<@Vincenzo> So for what its worth, treeting the va_list like a pointer seems to cause erratic behavior."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T11:36:30.041287",
          "text": "I mean, the bug _could_ be somewhere else, and I’m seeing if I can reduce it down."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T11:36:33.043077",
          "text": "But…a."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T11:36:34.044012",
          "text": "ya*"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T11:38:00.097679",
          "text": "<@Rosalee> What platform are you on?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T11:40:16.183400",
          "text": "Nevermind – I see that `sizeof(va_list)` is 24 bytes on Mac OS, so it must vary more than I thought, and I must have mangled my experiment before"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T11:45:35.391452",
          "text": "Thinking about it more, a portable solution seems hopeless without `va_list` support in libffi, because the specific representation of a `va_list` can affect the way that it's passed in registers or on the stack. The only idea I have is to define `_va_list` in `ffi/unsafe` based on the result of `(system-library-subpath #f)` – so it would work only for platforms where we've specifically tracked down and hard-coded the representation."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T12:23:24.801877",
          "text": "<@Vincenzo> ya, that sounds about right."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T12:23:31.805739",
          "text": "Also I’m on OS X."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T12:24:30.840985",
          "text": "I’ll look at the system V ABI specs, if they are at least consistent among different instruction sets we probably do have a chance"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T12:37:24.300075",
          "text": "Looking at the c99 spec, it requires that va_list be a type."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T12:38:04.322932",
          "text": "And if that is the case, it seems like if we make a _va-list type, while we won’t be able to do anything with it in Racket code, it could be passed to C code."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T12:38:34.340445",
          "text": "(I’m looking at section 7.15 of the latest draft of the c99 spec.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T12:38:45.346949",
          "text": "(As I don’t have a copy of the actual release.)"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-26T14:42:17.603691",
          "text": "<@Rosalee> Supporting va_list seems painful. Just found the section \"Variable Length Arguments\" in the SWIG manual. It has the subtitle \"The horror. The horror.\""
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-26T14:42:24.607282",
          "text": "<http://www.swig.org/Doc1.3/Varargs.html>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:49:45.854793",
          "text": "<@Lavenia> Not trying support varargs…That would be really hard. :confused:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:49:49.856976",
          "text": "Just va_list."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:49:58.862323",
          "text": "Which is doable, as its just another value."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:50:28.879899",
          "text": "As long as it stays an opaque value to Racket, that is fine."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:50:54.894992",
          "text": "Trying to mimick va_arg, va_first, etc. or the `...` protocol, that sounds scary."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:51:11.905010",
          "text": "At least based on what I’ve ascertained at the moment."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-26T14:52:16.941841",
          "text": "Iam clearly conflating those. Aren't va_list used to deal with variable arguments?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:54:38.021906",
          "text": "You are correct."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:54:50.028750",
          "text": "va_list however, can also be passed to another function as a type."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:55:06.038438",
          "text": "This is used if you, say, want to make a helper function."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-26T14:56:47.097239",
          "text": "Ok. So va_list is also useful in other situations."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:57:15.112775",
          "text": "```\nint myfunc(const char *str, ...) {\n    va_list ag;\n    va_start(ag);\n    helper(ag);\n    va_end(ag);\n}\n\nint helper(va_list ag) {\n    ...\n    va_arg(ag);\n    ...\n}\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:57:21.116719",
          "text": "Yup"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:57:27.120169",
          "text": "in this case, I want to write `helper`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:57:30.121583",
          "text": "In particular…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:57:43.129517",
          "text": "I want to write `helper` that just passes the `va_list` to another (C) function."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:57:49.132988",
          "text": "Because I’m hooking up two libraries."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:57:53.135319",
          "text": "Through Racket…."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:58:50.167487",
          "text": "Of course, this still isn’t enough to duplicate va_copy, as that’s  macro. To do that, we would need to make scheme_va_copy, or something like that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T14:58:54.170072",
          "text": "Which does nothing but call the macro."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T15:01:25.258431",
          "text": "Of course, if we do that, it would make sense to do that for va_arg as well."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T15:01:56.276357",
          "text": "We couldn’t do `va_start` and `va_end` though, because that would require supporting vaargs, and `...`, which, as you rightly pointed out, is terrifying."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T15:02:12.284906",
          "text": "At least, what it looks like anyway. Perhaps I’m wrong."
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-26T15:11:10.576959",
          "text": "Thanks for the example."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T15:16:46.754786",
          "text": "Any time. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T15:51:51.852433",
          "text": "<@Vincenzo> worksp/librktio/… vs librktio/… these two directories seem pretty similar. Is one of them deprecated?"
        }
      ]
    },
    {
      "conversation_id": "114",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: nightlies?\nEun: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 0.62,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-24T17:13:22.752627",
          "text": "nightlies?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-07-24T17:13:59.769243",
          "text": "<http://pre.racket-lang.org/>"
        }
      ]
    },
    {
      "conversation_id": "115",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: is there a way to lookup reverse dependencies in the package catalog? e.g. find all packages that use my packages?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-07-24T17:36:02.324761",
          "text": "is there a way to lookup reverse dependencies in the package catalog? e.g. find all packages that use my packages?"
        }
      ]
    },
    {
      "conversation_id": "116",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Chantelle I've done that this way: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-07-24T19:34:02.529702",
          "text": "<@Chantelle> I've done that this way: <https://gist.github.com/greghendershott/b20effb9d9c48211e1c11d9486257918>"
        }
      ]
    },
    {
      "conversation_id": "117",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Sounds right",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T10:18:49.094877",
          "text": "Sounds right"
        }
      ]
    },
    {
      "conversation_id": "118",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: [CODE] allocates GCable memory to receive the [CODE] pointer as well as the string content, so you don't have to free either. If the called function was returning a [CODE] that needs to be freed, though, then [CODE] is not a good choice, because you never get to see the returned pointer to free it",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-25T11:42:15.285189",
          "text": "`(_ptr o _string)` allocates GCable memory to receive the `_string` pointer as well as the string content, so you don't have to free either. If the called function was returning a `char*` that needs to be freed, though, then `(_ptr o _string)` is not a good choice, because you never get to see the returned pointer to free it"
        }
      ]
    },
    {
      "conversation_id": "119",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo The racket7 progress is exciting, and your detailed transparency is, as always, much appreciated. :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-07-25T13:03:08.204489",
          "text": "<@Vincenzo> The racket7 progress is exciting, and your detailed transparency is, as always, much appreciated. :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "120",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: ditto what Alexis said. The reason Racket-on-Chez-Scheme doesn't yet work on Windows is simply because Windows specific functions haven't been implemented yet?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-07-25T14:10:42.521073",
          "text": "ditto what Alexis said. The reason Racket-on-Chez-Scheme doesn't yet work on Windows is simply because Windows specific functions haven't been implemented yet?"
        }
      ]
    },
    {
      "conversation_id": "121",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: has anyone here tried sleeping in Mary Gates Hall at the University of Washington? (Niesha do you know anyone to ask?)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-07-25T18:26:36.142182",
          "text": "has anyone here tried sleeping in Mary Gates Hall at the University of Washington? (<@Niesha> do you know anyone to ask?)"
        }
      ]
    },
    {
      "conversation_id": "122",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: There should be a \"rktio\" directory with the rktio implementation and a \"worksp/librktio\" directory with MSVC projects\nVincenzo: I'm not seeing multiple \"librktio\" directories\nRosalee: err…ya, I mean worksp/rktio. That makes sense that one is for windows. Thanks.\nRosalee: Vincenzo oh wait, no\nRosalee: I do see a worksp/librktio.\nRosalee: racket/racket/src/worksp/librktio\nVincenzo: Just to be sure: there should only be one \"rktio\" and one \"librktio\" directory; the \"librktio\" directory should be in \"worksp\", and the \"rktio\" directory should not be in \"worksp\"\nRosalee: Although that one does look like a visual studio project.\nRosalee: Ah, okay.\nRosalee: That is correct.\nRosalee: So, since windows has [CODE], does that mean it doesn’t use [CODE]?\nRosalee: OH….\nRosalee: src/worksp/libffi probably is in pace of src/foreign/libffi.\nVincenzo: The [CODE] part of [CODE] is included directly in [CODE], while [CODE] is the project for [CODE]\nRosalee: Okay\nRosalee: Also, I realized, adding a primitive for va_list is silly, since per the spec, its just an (undefined) struct type.\nRosalee: So it would make a lot more sense to just add a function to the core that calls [CODE] (which I suspect already exists), and then define _va-list in racket.\nVincenzo: Rosalee Is even [CODE] useful, since the calling convention can depend on more than the size? For example, [CODE] and [CODE] are often passed differently – though I'll grant that [CODE] is unlikely to be represented as a [CODE]. I still think it's best to use [CODE] and hardwire a representation in [CODE] for various known results.\nRosalee: Ah, fair.\nRosalee: Vincenzo Actually, no. Since [CODE] is NOT a primitive in C (per the spec), it’ll be handled just like any other struct will.\nRosalee: (Like, the size and field order of the struct is undefined, but the fact that it is a struct is.)\nRosalee: “The type declared is va_list which is an object type suitable for holding information needed by the macros va_start, va_arg, va_end, and va_copy”\nVincenzo: \"object type\" =&gt; \"struct\"?\nVincenzo: Even so, I thought the way a struct is passed could depend on its content beyond just its size, but I forget these details\nRosalee: That is how I interpret it. Although I admit I didn’t make the spec so I’m not 100% sure.\nVincenzo: Ok. FWIW, I don't think \"object\" means \"struct\" in the C standard\nRosalee: Also ya, it certainly is true that structs are passed differently based on what is in them.\nRosalee: Hmm…okay.\nRosalee: I’ll see if I can find an answer to that. Thanks. :slightly_smiling_face:\nRosalee: Vincenzo “object: region of data storage in the execution environment, the contents of which can represent values”\nRosalee: So I guess it _could_ be a primitive.\nRosalee: Just not a macro.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 32,
        "duration_minutes": 85.19,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T15:53:48.914235",
          "text": "There should be a \"rktio\" directory with the rktio implementation and a \"worksp/librktio\" directory with MSVC projects"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T15:54:05.923155",
          "text": "I'm not seeing multiple \"librktio\" directories"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T15:57:49.041781",
          "text": "err…ya, I mean worksp/rktio. That makes sense that one is for windows. Thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:02:58.210911",
          "text": "<@Vincenzo> oh wait, no"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:03:05.214583",
          "text": "I do see a worksp/librktio."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:03:22.224095",
          "text": "racket/racket/src/worksp/librktio"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T16:03:51.239970",
          "text": "Just to be sure: there should only be one \"rktio\" and one \"librktio\" directory; the \"librktio\" directory should be in \"worksp\", and the \"rktio\" directory should not be in \"worksp\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:03:53.241242",
          "text": "Although that one does look like a visual studio project."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:04:21.256330",
          "text": "Ah, okay."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:04:30.261141",
          "text": "That is correct."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:11:45.490081",
          "text": "So, since windows has `src/worksp/libffi`, does that mean it doesn’t use `src/foreign`?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:12:23.509754",
          "text": "OH…."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:12:40.518088",
          "text": "src/worksp/libffi probably is in pace of src/foreign/libffi."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T16:19:44.736755",
          "text": "The `foreign.c` part of `src/foreign` is included directly in `libracket`, while `src/worksp/libffi` is the project for `src/foreign/libffi`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:24:44.894282",
          "text": "Okay"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:25:10.907831",
          "text": "Also, I realized, adding a primitive for va_list is silly, since per the spec, its just an (undefined) struct type."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:26:32.951142",
          "text": "So it would make a lot more sense to just add a function to the core that calls `sizeof` (which I suspect already exists), and then define _va-list in racket."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T16:31:07.100463",
          "text": "<@Rosalee> Is even `sizeof(va_list)` useful, since the calling convention can depend on more than the size? For example, `long` and `double` are often passed differently – though I'll grant that `va_list` is unlikely to be represented as a `double`. I still think it's best to use `(system-library-subpath #f)` and hardwire a representation in `ffi/unsafe` for various known results."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:34:46.219150",
          "text": "Ah, fair."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:47:15.611982",
          "text": "<@Vincenzo> Actually, no. Since `va_list` is NOT a primitive in C (per the spec), it’ll be handled just like any other struct will."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:47:40.625065",
          "text": "(Like, the size and field order of the struct is undefined, but the fact that it is a struct is.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:48:26.649131",
          "text": "“The type declared is va_list which is an object type suitable for holding information needed by the macros va_start, va_arg, va_end, and va_copy”"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T16:50:02.699712",
          "text": "\"object type\" =&gt; \"struct\"?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T16:50:53.727262",
          "text": "Even so, I thought the way a struct is passed could depend on its content beyond just its size, but I forget these details"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:53:34.811066",
          "text": "That is how I interpret it. Although I admit I didn’t make the spec so I’m not 100% sure."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-26T16:54:37.844205",
          "text": "Ok. FWIW, I don't think \"object\" means \"struct\" in the C standard"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:55:17.865641",
          "text": "Also ya, it certainly is true that structs are passed differently based on what is in them."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:55:23.868773",
          "text": "Hmm…okay."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T16:55:39.876664",
          "text": "I’ll see if I can find an answer to that. Thanks. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T17:18:40.559050",
          "text": "<@Vincenzo> “object: region of data storage in the execution environment, the contents of which can represent values”"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T17:18:48.562635",
          "text": "So I guess it _could_ be a primitive."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-26T17:19:00.568088",
          "text": "Just not a macro."
        }
      ]
    },
    {
      "conversation_id": "123",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Carson: According to <[URL] the last commit to Racket happened about a year ago - what happened a year ago that it doesn't include anything since then?\nLavenia: Carson <[URL]\nLavenia: Oh! You are asking why OpenHub does update. No idea.\nCarson: yes, that's what I was wondering about\nLavenia: Do other projects show updates?\nCarson: yes\nCarson: maybe it doesn't redirect from plt/racket to racket/racket: <[URL]\nCarson: I tried but got this: \"You can view, but not change this data. Only managers may change this data. \"\nLavenia: who are the managers?\nCarson: <[URL]\nCarson: Is he on Slack, can't find him?\nLavenia: send him a mail\nLavenia: <[URL]\nCarson: will do, thanks\nCarson: done\nLavenia: Ivory Here would be ok. Use <[URL] then post url here.\nRosalee: Carson Alternatively, he probably is on the <#C088CK7J6|irc> channel.\nCarson: thanks Rosalee\nRosalee: Vincenzo The FFI docs have the following pseudocode for malloc: [CODE_BLOCK]\nRosalee: Errr….cast, they have the pseudocode for cast.\nRosalee: But in this example, shouldn’t the [CODE] be apointer, given tht [CODE] and [CODE] are happening to it?\nRosalee: As shown here:\nRosalee: <[URL]\nRosalee: If so I’d be happy to fix that.\nVincenzo: Rosalee I'm not sure what you mean, and I think that code is right. (It's the actual implementation in the simple case, as reflected by the [CODE] helper function.) [CODE] does return a pointer, but the pointer refers to [CODE] content, where [CODE] isn't isn't necessarily a pointer type. Similarly, [CODE] and [CODE] want a pointer to a [CODE]/[CODE] to cast between those.\nRosalee: Vincenzo Ah, right, okay, that makes sense. Thanks.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 26,
        "duration_minutes": 5547.44,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Carson",
          "Lavenia",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:08:16.168477",
          "text": "According to <https://www.openhub.net/p/racket> the last commit to Racket happened about a year ago - what happened a year ago that it doesn't include anything since then?"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-27T18:11:15.228630",
          "text": "<@Carson>   <https://github.com/racket/racket/commits/master>"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-27T18:11:47.239119",
          "text": "Oh! You are asking why OpenHub does update. No idea."
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:12:36.255370",
          "text": "yes, that's what I was wondering about"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-27T18:13:31.273478",
          "text": "Do other projects show updates?"
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:14:18.288808",
          "text": "yes"
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:16:55.339399",
          "text": "maybe it doesn't redirect from plt/racket to racket/racket: <https://www.openhub.net/p/racket/enlistments>"
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:44:43.840029",
          "text": "I tried but got this: \"You can view, but not change this data. Only managers may change this data. \""
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-27T18:45:38.856093",
          "text": "who are the managers?"
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:46:11.865559",
          "text": "<https://www.openhub.net/accounts/elibarzilay>"
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:46:30.870838",
          "text": "Is he on Slack, can't find him?"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-27T18:47:29.887455",
          "text": "send him a mail"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-27T18:47:49.892854",
          "text": "<http://www.barzilay.org/contact.html>"
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:48:06.897333",
          "text": "will do, thanks"
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-27T18:56:00.030547",
          "text": "done"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-07-28T06:26:37.216909",
          "text": "<@Ivory> Here would be ok. Use <http://pasterack.org|pasterack.org> then post url here."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-28T10:27:03.459293",
          "text": "<@Carson> Alternatively, he probably is on the <#C088CK7J6|irc> channel."
        },
        {
          "user": "Carson",
          "timestamp": "2017-07-28T10:29:28.542648",
          "text": "thanks <@Rosalee>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-31T13:21:18.132226",
          "text": "<@Vincenzo> The FFI docs have the following pseudocode for malloc:\n```\n(let ([p (malloc from-type)])\n  (ptr-set! p from-type v)\n  (ptr-ref p to-type))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-31T13:21:33.140550",
          "text": "Errr….cast, they have the pseudocode for cast."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-31T13:21:59.154392",
          "text": "But in this example, shouldn’t the `malloc` be apointer, given tht `ptr-set!` and `ptr-ref` are happening to it?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-31T13:22:28.170335",
          "text": "As shown here:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-31T13:22:31.172196",
          "text": "<http://docs.racket-lang.org/foreign/Miscellaneous_Support.html?q=cast#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cast%29%29>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-31T13:22:36.175163",
          "text": "If so I’d be happy to fix that."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-07-31T14:25:38.292385",
          "text": "<@Rosalee> I'm not sure what you mean, and I think that code is right. (It's the actual implementation in the simple case, as reflected by the `convert` helper function.) `malloc` does return a pointer, but the pointer refers to `from-type` content, where `from-type` isn't isn't necessarily a pointer type. Similarly, `pre-set!` and `ptr-ref` want a pointer to a `from-type`/`to-type` to cast between those."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-07-31T14:35:42.633342",
          "text": "<@Vincenzo> Ah, right, okay, that makes sense. Thanks."
        }
      ]
    },
    {
      "conversation_id": "124",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lavenia: yep - that's it - can you change it?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lavenia"
        ]
      },
      "timeline": [
        {
          "user": "Lavenia",
          "timestamp": "2017-07-27T18:34:45.667098",
          "text": "yep - that's it - can you change it?"
        }
      ]
    },
    {
      "conversation_id": "125",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ivory: Hi I'd like to improve my Racket programming and abstraction/algorithm design in general. Can anyone suggest a good place to post Racket scripts and discuss how to improve it, other than Code Review on StackExchange? Thanks\nIvory: Lavenia thanks\nIvory: Lavenia pasted my code into paste <[URL] The url is: <[URL] Thanks. Your feedback would be great.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 1344.13,
        "contains_question": true,
        "action_keywords": [
          "action",
          "discuss",
          "review"
        ],
        "decision_keywords": [],
        "participants": [
          "Ivory"
        ]
      },
      "timeline": [
        {
          "user": "Ivory",
          "timestamp": "2017-07-28T06:19:10.089072",
          "text": "Hi I'd like to improve my Racket programming and abstraction/algorithm design in general. Can anyone suggest a good place to post Racket scripts and discuss how to improve it, other than Code Review on StackExchange? Thanks"
        },
        {
          "user": "Ivory",
          "timestamp": "2017-07-29T04:36:41.116513",
          "text": "<@Lavenia> thanks"
        },
        {
          "user": "Ivory",
          "timestamp": "2017-07-29T04:43:18.138394",
          "text": "<@Lavenia> pasted my code into paste <http://rack.org|rack.org>. The url is:  <http://pasterack.org/pastes/72152>. Thanks. Your feedback would be great."
        }
      ]
    },
    {
      "conversation_id": "126",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: I just had to rebuild a machine and things seem a bit wonky with my packages… is [CODE] sufficient to sanitize and sanity check everything?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-07-29T01:25:45.458617",
          "text": "I just had to rebuild a machine and things seem a bit wonky with my packages… is `raco setup --clean` sufficient to sanitize and sanity check everything?"
        }
      ]
    },
    {
      "conversation_id": "127",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: hi, here's a few comments: - [CODE] can be [CODE], saves an indentation - [CODE] is the same as [CODE] - I'd use a helper function for the [CODE] - I'd also put all the defines \"within\" the define for dialog, so overall structure is: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-07-29T17:18:28.424238",
          "text": "hi, here's a few comments:\n- `(let (....) (define ....))` can be `(define ....) (define ....)`, saves an indentation\n- `(eq? b #f)` is the same as `(not b)`\n- I'd use a helper function for the `(number-&gt;string ....)` \n- I'd also put all the defines \"within\" the define for dialog, so overall structure is:\n```\n(define dialog\n  (let ()\n    (define ....)\n    ....))\n(send dialog show #t)\n```"
        }
      ]
    },
    {
      "conversation_id": "128",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Cecile: Which package provides [CODE]?\nCecile: Answering my own question: [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 2.82,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Cecile"
        ]
      },
      "timeline": [
        {
          "user": "Cecile",
          "timestamp": "2017-07-31T20:34:48.281499",
          "text": "Which package provides `raco exe`?"
        },
        {
          "user": "Cecile",
          "timestamp": "2017-07-31T20:37:37.317430",
          "text": "Answering my own question: `compiler-lib`"
        }
      ]
    },
    {
      "conversation_id": "129",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Genna: trying to make my Racket macro-writing experience a bit saner. I'm defining a simple module lang and was hoping [CODE] would let me expand modules that use DSLs, but getting an error, e.g. test.rkt [CODE_BLOCK] scratch.rkt [CODE_BLOCK] Produces: &gt;derivation-parser: error on token #2: &lt;local-value, #&lt;syntax:/Users/ze/Code/racket/racket/share/pkgs/gui-lib/framework/private/sig.rkt:8:20 number-snip-class^&gt;&gt;\nGenna: A more general question is how do I debug my #lang DSLs? Say, I prepare a file in such a language as in [CODE_BLOCK] Language is defined using syntax/module-reader and the collection is properly linked with [CODE], so Rogue script runs fine. How would go about stepping through its expansions steps? I'm trying to figure if I my transformations use bindings i expect, e.g. the redefined #%app etc. Sadly, the above-mentioned [CODE] didn't work for me out of the box. How do people debug such things?\nGenna: One more question is about redefining kernel forms like [CODE] and friends in my #lang implementation, something like this rogue/main.rkt has [CODE_BLOCK]\nGenna: omg Macro Debugger tools are awesome!\nGenna: re the above #%app binding question syntax object browser in the stepper shows the binding comes from racket/base and not from my [CODE], which is a bit confusing. I suspect I misunderstand scoping rules here, i.e. I expect #%app to be dynamically scope inside a file that uses my DSL [CODE] when really macros defined in [CODE] end up expanding into forms that use lexically bound #%app, that is inside the module defining [CODE] the language. Could you guys correct my thinking here please?\nGenna: ah I think I get it. I'm beginning to wonder how we ever managed to redefine kernel forms like #%app and #%module-begin then. I've seen things like this being used [CODE_BLOCK]\nGenna: thank you Matthew! that really helps\nGenna: ok, now i need to think a bit harder about what I'm trying to do here\nGenna: fwiw I'm just amazed at how much introspection macro-debugger/stepper offers. Like I'm no longer blind",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 9,
        "duration_minutes": 203.1,
        "contains_question": true,
        "action_keywords": [
          "action",
          "implement",
          "need to",
          "please",
          "prepare",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Genna"
        ]
      },
      "timeline": [
        {
          "user": "Genna",
          "timestamp": "2017-08-01T05:47:26.919968",
          "text": "trying to make my Racket macro-writing experience a bit saner. I'm defining a simple module lang and was hoping `(expand-module/step mod)` would let me expand modules that use DSLs, but getting an error, e.g.\n\ntest.rkt\n```\n#lang racket\n(require macro-debugger/stepper)\n(expand-module/step \"./scratch.rkt\")\n```\n\nscratch.rkt\n```\n#lang racket\n(module test racket\n  (let ([x 1] [y 2]) (or (even? x) (even? y))))\n\n```\nProduces:\n&gt;derivation-parser: error on token #2: &lt;local-value, #&lt;syntax:/Users/ze/Code/racket/racket/share/pkgs/gui-lib/framework/private/sig.rkt:8:20 number-snip-class^&gt;&gt;"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T06:07:07.338935",
          "text": "A more general question is how do I debug my #lang DSLs? Say, I prepare a file in such a language as in \n```\n#lang rogue\n(some rogue forms defined in ~/rogue/main.rkt)\n```\n\nLanguage is defined using syntax/module-reader and the collection is properly linked with `raco link rogue`, so Rogue script runs fine. How would go about stepping through its expansions steps? I'm trying to figure if I my transformations use bindings  i expect, e.g. the redefined #%app etc. Sadly, the above-mentioned `(expand-module/step mod)` didn't work for me out of the box. How do people debug such things?"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T06:21:04.605369",
          "text": "One more question is about redefining kernel forms like `#%app` and friends in my #lang implementation, something like this\n\nrogue/main.rkt has\n```\n(provide #%datum\n         #%top-interaction\n         #%top\n         (all-defined-out)\n         (rename-out [app #%app]\n                               [module-begin #%module-begin]))\n\n(define-syntax (app stx)\n      ... my implentation of #%app)\n\n(define-simple-macro (some-rogue-form pattern)\n    (f a)) ;; &lt;-- which binding of #%app will be used when this form is expanded inside a file written in #lang rogue? How do I confirm this using Racket tools?\n\n(racket-module reader syntax/module-reader\n  rogue)\n```"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T07:37:49.951423",
          "text": "omg Macro Debugger tools are awesome!"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T07:44:46.068604",
          "text": "re the above #%app binding question syntax object browser in the stepper shows the binding comes from racket/base and not from my `(rename-out [app #%app])`, which is a bit confusing. I suspect I misunderstand scoping rules here, i.e. I expect #%app to be dynamically scope inside a file that uses my DSL `#lang rogue` when really macros defined in `rogue` end up expanding into forms that use lexically bound #%app, that is inside the module defining `rogue` the language. Could you guys correct my thinking here please?"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T08:03:03.407076",
          "text": "ah I think I get it. I'm beginning to wonder how we ever managed to redefine kernel forms like #%app and #%module-begin then. I've seen things like this being used\n\n```\n(provide (except-out (all-from-out racket)\n                     lambda\n                     λ\n                     define\n                     eval\n                     require\n                     modulo\n                     remainder\n                     /\n                     #%app)\n         (rename-out [new-lambda lambda]\n                     [new-lambda λ]\n                     [new-define define]\n                     [divide /]\n                     [myapp #%app]\n                     ))\n```"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T09:08:34.920462",
          "text": "thank you Matthew! that really helps"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T09:08:58.931382",
          "text": "ok, now  i need to think a bit harder about what I'm trying to do here"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-01T09:10:32.976298",
          "text": "fwiw I'm just amazed at how much introspection macro-debugger/stepper offers. Like I'm no longer blind"
        }
      ]
    },
    {
      "conversation_id": "130",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: The implicit [CODE] form in [CODE] takes its context from the open parenthesis. (More precisely, [CODE] is a syntax list and there's a context attached to the list as a whole, in addition to contexts on the individual [CODE] and [CODE] tokens.) Since the [CODE] in the environment of [CODE] is the one from [CODE], that's the one used when [CODE] is treated as [CODE].\nVincenzo: When [CODE] is used as [CODE] in some importing module, the expressions written inside that [CODE] will also be from the importing module – and so an open parentheses there will see [CODE] instead of [CODE] from [CODE]. You may be thinking that the body of a[CODE] use is treated as being from the [CODE] place, but it's not; the body is treated as being from wherever it is written (i.e., lexical scope).\nRosalee: Vincenzo Just a sanity check, environment variables that are set using [CODE] are also going to be set in FFI calls, correct?\nRosalee: Oh wait, no, it uses current-environment-variables, never mind.\nVincenzo: If [CODE] returns its original value, then [CODE] affects OS-level environment variables\nRosalee: That makes sense. Thanks.\nRosalee: So basically don’t change the parameter and it works. Thanks. :slightly_smiling_face:\nRosalee: Does anyone know how to be more specific when requesting an opengl context than just core/compatibility?\nRosalee: Namely, I want core3.3\nRosalee: If I can get it anyway.\nRosalee: <[URL]\nRosalee: Stefani You might now?\nRosalee: hmm…looks like not. At least not yet. :slightly_smiling_face:\nRosalee: It looks like when you request core, it starts at 4.x and goes down to 3.0\nRosalee: WAIT!!! No. Grr….despite asking for a core context, its still giving me a legacy one. That absolutely should be in the docs.\nRosalee: That, and you should absolutely be able to find out what kind of context you got after the fact.\nRosalee: Hmm…I guess in get-legacy? it says that it is only supported on mac 10.7+ and _some_ linux variants.\nRosalee: But there still doesn’t seem to be a way to check which version you ended up getting once you go it.\nVincenzo: Rosalee I'm no GL expert, but I thought there were GL-level functions that will tell you\nRosalee: There are some.\nRosalee: Namely, glGetString\nRosalee: Vincenzo Btw, its the line [CODE] that is causing it to create a compatibility context.\nRosalee: When I comment out that line a compatibility context gets created. (Version 3.3)\nVincenzo: You get a *non-*compatibility context when it's commented out? Neil wrote that code, and I don't know the right answer in this case, but I'm happy to accept patches from people who do.\nRosalee: I mean, newer versions _do_ remove deprecated stuff. Although the only instance I can think of this happening in a major way was 3.0 to 3.1\nRosalee: I have a GLSL shader, it is not doing anything fancy, just drawing a quad to the screen, and drawing a texture to that quad.\nRosalee: (aka, its a media player)\nRosalee: The shader is written in GLSL 330\nRosalee: On my mac, I get 3.3 when I ask for the core profile.\nRosalee: But on linux, despite asking for core, I got compatibility. Which corresponded to version OpenGL 3.0, so GLSL 130.\nRosalee: Stefani ^\nRosalee: Oh, also, glx (which is what the linux opengl bindings use), does let you request a specific version. Of course you are limited to what your hardware can support. :slightly_smiling_face:\nRosalee: Vincenzo Kind of. When you request a core profile, Racket’s opengl library tries a few tests to see if its compatible. If it is, and you requested a core profile, it gives you a context using the core profile. However, if it can’t, it ignores what you requested and silently gives you a compatibility context.\nRosalee: The only real way to test after the fact (as far as I can tell), which one you got is using the glGetString function and checking your opengl version.\nRosalee: Anyway, I commented out one of the checks that was failing, to see what would happen, and the opengl context worked just fine. Which makes me think we are potentially checking more stuff than we need to.\nRosalee: (Obviously I haven’t tested that thoroughly yet.)\nRosalee: Anyway, thanks.\nStefani: leif: 3.0 to later is basically a totally new API, which what the whole core vs compatibility thing is about\nStefani: it sounds like either something wrong with Racket checking of the version (which you said) or your driver doesn't really support new stuff, which is common on Linux software implementations\nRosalee: Stefani yup. Or at least thats when they dropped the fixed pipeline in favor of the shaders from opengl 2. But how would I test if it doesn’t ‘really’ support newer stuff?\nRosalee: Like, I’m able to open up a window, and build and run a GLSL 330 program.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 41,
        "duration_minutes": 842.92,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "fix",
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Stefani",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-01T07:52:26.204282",
          "text": "The implicit `#%app` form in `(f a)` takes its context from the open parenthesis. (More precisely, `(f a)` is a syntax list and there's a context attached to the list as a whole, in addition to contexts on the individual `f` and `a` tokens.) Since the `#%app` in the environment of `(f a)` is the one from `racket/base`, that's the one used when `(f a)` is treated as `(#%app f a)`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-01T09:00:04.680590",
          "text": "When `new-lambda` is used as `lambda` in some importing module, the expressions written inside that `lambda` will also be from the importing module – and so an open parentheses there will see `myapp` instead of `#%app` from `racket/base`. You may be thinking that the body of a`new-lambda` use is treated as being from the `new-lambda` place, but it's not; the body is treated as being from wherever it is written (i.e., lexical scope)."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T11:28:24.971336",
          "text": "<@Vincenzo> Just a sanity check, environment variables that are set using `putenv` are also going to be set in FFI calls, correct?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T11:28:45.985567",
          "text": "Oh wait, no, it uses current-environment-variables, never mind."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-01T11:29:33.016962",
          "text": "If `(current-environment-variables)` returns its original value, then `putenv` affects OS-level environment variables"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T11:32:07.119738",
          "text": "That makes sense. Thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T11:32:24.130296",
          "text": "So basically don’t change the parameter and it works. Thanks. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T17:34:15.245586",
          "text": "Does anyone know how to be more specific when requesting an opengl context than just core/compatibility?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T17:34:24.249745",
          "text": "Namely, I want core3.3"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T17:34:29.251714",
          "text": "If I can get it anyway."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T17:35:13.271156",
          "text": "<http://docs.racket-lang.org/draw/gl-config_.html?q=gl-config>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T17:42:58.472060",
          "text": "<@Stefani> You might now?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:02:47.953539",
          "text": "hmm…looks like not. At least not yet. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:03:06.960761",
          "text": "It looks like when you request core, it starts at 4.x and goes down to 3.0"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:20:33.328125",
          "text": "WAIT!!! No. Grr….despite asking for a core context, its still giving me a legacy one. That absolutely should be in the docs."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:22:17.362394",
          "text": "That, and you should absolutely be able to find out what kind of context you got after the fact."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:24:19.402365",
          "text": "Hmm…I guess in get-legacy? it says that it is only supported on mac 10.7+ and _some_ linux variants."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:24:53.413845",
          "text": "But there still doesn’t seem to be a way to check which version you ended up getting once you go it."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-01T18:26:09.438554",
          "text": "<@Rosalee> I'm no GL expert, but I thought there were GL-level functions that will tell you"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:27:32.465891",
          "text": "There are some."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:27:42.469065",
          "text": "Namely, glGetString"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:32:15.559765",
          "text": "<@Vincenzo> Btw, its the line `(force lazy-GLX_ARB_create_context?)` that is causing it to create a compatibility context."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T18:32:40.567766",
          "text": "When I comment out that line a compatibility context gets created. (Version 3.3)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-01T18:40:13.708733",
          "text": "You get a *non-*compatibility context when it's commented out? Neil wrote that code, and I don't know the right answer in this case, but I'm happy to accept patches from people who do."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:35:52.221192",
          "text": "I mean, newer versions _do_ remove deprecated stuff. Although the only instance I can think of this happening in a major way was 3.0 to 3.1"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:36:28.228328",
          "text": "I have a GLSL shader, it is not doing anything fancy, just drawing a quad to the screen, and drawing a texture to that quad."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:36:32.229139",
          "text": "(aka, its a media player)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:36:51.232859",
          "text": "The shader is written in GLSL 330"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:37:30.240513",
          "text": "On my mac, I get 3.3 when I ask for the core profile."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:38:15.249351",
          "text": "But on linux, despite asking for core, I got compatibility. Which corresponded to version OpenGL 3.0, so GLSL 130."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:38:52.256547",
          "text": "<@Stefani> ^"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:39:41.266097",
          "text": "Oh, also, glx (which is what the linux opengl bindings use), does let you request a specific version. Of course you are limited to what your hardware can support. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:41:10.283684",
          "text": "<@Vincenzo> Kind of. When you request a core profile, Racket’s opengl library tries a few tests to see if its compatible. If it is, and you requested a core profile, it gives you a context using the core profile. However, if it can’t, it ignores what you requested and silently gives you  a compatibility context."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:41:42.289638",
          "text": "The only real way to test after the fact (as far as I can tell), which one you got is using the glGetString function and checking your opengl version."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:42:34.299879",
          "text": "Anyway, I commented out one of the checks that was failing, to see what would happen, and the opengl context worked just fine. Which makes me think we are potentially checking more stuff than we need to."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:43:39.312367",
          "text": "(Obviously I haven’t tested that thoroughly yet.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:43:49.314218",
          "text": "Anyway, thanks."
        },
        {
          "user": "Stefani",
          "timestamp": "2017-08-01T21:51:11.401077",
          "text": "leif: 3.0 to later is basically a totally new API, which what the whole core vs compatibility thing is about"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-08-01T21:51:55.409641",
          "text": "it sounds like either something wrong with Racket checking of the version (which you said) or your driver doesn't really support new stuff, which is common on Linux software implementations"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:55:02.446835",
          "text": "<@Stefani> yup. Or at least thats when they dropped the fixed pipeline in favor of the shaders from opengl 2. But how would I test if it doesn’t ‘really’ support newer stuff?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-01T21:55:21.450571",
          "text": "Like, I’m able to open up a window, and build and run a GLSL 330 program."
        }
      ]
    },
    {
      "conversation_id": "131",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Natosha Nelson do either of you have more comments on <[URL] ?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-01T15:04:47.623507",
          "text": "<@Natosha> <@Nelson> do either of you have more comments on <https://github.com/racket/rackunit/pull/59> ?"
        }
      ]
    },
    {
      "conversation_id": "132",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stefani: leif: it is not common for OpenGL apis to give you the ability to ask for a specific version, because drivers typically don't support multiple options anyways. OpenGL versions never change the meaning of old stuff (i.e. it is forward compatible) and when you write GLSL you have to specify the version always... so what exactly is the problem that yo\nStefani: u are trying to solve?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Stefani",
          "timestamp": "2017-08-01T21:04:31.847331",
          "text": "leif: it is not common for OpenGL apis to give you the ability to ask for a specific version, because drivers typically don't support multiple options anyways. OpenGL versions never change the meaning of old stuff (i.e. it is forward compatible) and when you write GLSL you have to specify the version always... so what exactly is the problem that yo"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-08-01T21:04:31.847336",
          "text": "u are trying to solve?"
        }
      ]
    },
    {
      "conversation_id": "133",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lavenia: Apropos OpenGL and shaders: Is it possible to get GLSL version 130 version on mac? If not, how do I get a newer version?\nLavenia: (I can't get Ruckus to run mac)\nLavenia: To see which versions of GLSL that were supported I tried different values for the version in: <[URL]\nLavenia: Version 120 seems to exist - but the preamble uses more recent features.\nGenna: Got an interesting project which I think could make really good use of context + hole matching a-la [CODE]. So, naturally curious if I could leverage or maybe just rip off what redex does. Could people familiar with redex codebase and matching algos it uses maybe give me some pointers or context so I can make sense of [CODE]. There's no language to compile, no semantics to analyze, just structurally match parts of the tree as context and a subtree in that context. So redex proper would be a massive overkill. Tina maybe?\nGenna: [CODE]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 4922.91,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Genna",
          "Lavenia"
        ]
      },
      "timeline": [
        {
          "user": "Lavenia",
          "timestamp": "2017-08-02T04:39:35.578509",
          "text": "Apropos OpenGL and shaders: Is it possible to get GLSL version 130 version on mac? If not, how do I get a newer version?"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-08-02T04:39:57.585998",
          "text": "(I can't get Ruckus to run mac)"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-08-02T04:40:26.596823",
          "text": "To see which versions of GLSL that were supported I tried different values for the version in: <https://github.com/cbiffle/ruckus/blob/master/viz/preamble.glsl>"
        },
        {
          "user": "Lavenia",
          "timestamp": "2017-08-02T04:41:01.608911",
          "text": "Version 120 seems to exist - but the preamble uses more recent features."
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-05T14:37:45.448327",
          "text": "Got an interesting project which I think could make really good use of context + hole matching a-la `redex`. So, naturally curious if I could leverage or maybe just rip off what redex does. Could people familiar with redex codebase and matching algos it uses maybe give me some pointers or context so I can make sense of `redex-lib/private/(matcher.rkt|match-a-pattern.rkt)`. There's no language to compile, no semantics to analyze, just structurally match parts of the tree as context and a subtree in that context. So redex proper would be a massive overkill. <@Tina> maybe?"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-05T14:42:30.470830",
          "text": "`reduce: (-&gt; tree reduction-rules tree)`"
        }
      ]
    },
    {
      "conversation_id": "134",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Genna: I expect the pipeline will be pretty much what redex does: match lhs of reduction rule → reduce, repeat\nGenna: oh, boy. I don't think I'll make much sense of that code, certainly not without substantial effort :joy:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 12.25,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Genna"
        ]
      },
      "timeline": [
        {
          "user": "Genna",
          "timestamp": "2017-08-05T14:40:57.463510",
          "text": "I expect the pipeline will be pretty much what redex does: match lhs of reduction rule → reduce, repeat"
        },
        {
          "user": "Genna",
          "timestamp": "2017-08-05T14:53:12.521892",
          "text": "oh, boy. I don't think I'll make much sense of that code, certainly not without substantial effort :joy:"
        }
      ]
    },
    {
      "conversation_id": "135",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: did the installer script for the current snapshot change in any way recently? context: <[URL]\nLatarsha: when did it change? and did it affect any other travis jobs (such as TR)?\nChantelle: I'm guessing it changed yesterday, as it was last night's nightly travis run that broke\nChantelle: rerunning the build does not fix the issue, it fails in the same way\nChantelle: haven't checked any other repos yet",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 2.15,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-08T15:57:55.095302",
          "text": "did the installer script for the current snapshot change in any way recently? context: <https://github.com/racket/rackunit/issues/68>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-08T15:58:44.122380",
          "text": "when did it change? and did it affect any other travis jobs (such as TR)?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-08T15:59:18.140859",
          "text": "I'm guessing it changed yesterday, as it was last night's nightly travis run that broke"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-08T15:59:35.150190",
          "text": "rerunning the build does not fix the issue, it fails in the same way"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-08T16:00:04.166613",
          "text": "haven't checked any other repos yet"
        }
      ]
    },
    {
      "conversation_id": "136",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I want to write a [CODE] scribble form for documenting Hackett algebraic datatypes. I’ve peeked at the source for [CODE], but it is pretty complicated! Is there any simpler way to define a custom documentation form? If not, is there something that could help me understand how to write one myself?\nKimbery: I’ll also want to do the same thing for typeclasses.\nEun: lexi.lambda: <[URL]\nEun: Or defthing.\nKimbery: Eun Thanks, that’s helpful. I guess copying all that stuff out of [CODE] is currently the only way to do that? :/\nEun: I think that's the best way Tina found. ;)\nTina: its just work! :slightly_smiling_face:\nTina: “just a small matter of programming” is the phrase that comes to mind.\nKimbery: I’ll be the first to admit I find the scribble internals a little scary :)\nKimbery: Tina what is the purpose of the use of [CODE] in [CODE]?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 78.42,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Kimbery",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T16:27:44.048897",
          "text": "I want to write a `defdata` scribble form for documenting Hackett algebraic datatypes. I’ve peeked at the source for `defstruct`, but it is pretty complicated! Is there any simpler way to define a custom documentation form? If not, is there something that could help me understand how to write one myself?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T16:28:17.066404",
          "text": "I’ll also want to do the same thing for typeclasses."
        },
        {
          "user": "Eun",
          "timestamp": "2017-08-08T16:29:10.094432",
          "text": "lexi.lambda: <https://github.com/rfindler/lindenmayer/blob/master/scribblings/deflsymbol.rkt>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-08-08T16:29:16.097552",
          "text": "Or defthing."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T16:32:21.198487",
          "text": "<@Eun> Thanks, that’s helpful. I guess copying all that stuff out of `scribble/private` is currently the only way to do that? :/"
        },
        {
          "user": "Eun",
          "timestamp": "2017-08-08T16:33:48.245228",
          "text": "I think that's the best way <@Tina> found. ;)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-08T16:34:29.266868",
          "text": "its just work! :slightly_smiling_face:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-08T16:34:49.277574",
          "text": "“just a small matter of programming” is the phrase that comes to mind."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T16:36:35.335016",
          "text": "I’ll be the first to admit I find the scribble internals a little scary :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T17:46:09.349302",
          "text": "<@Tina> what is the purpose of the use of `datum-intern-literal` in `*defls`?"
        }
      ]
    },
    {
      "conversation_id": "137",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: typesetting examples in my documentation is making me realize that some Hackett forms are totally broken at the top level :(\nKimbery: when evaluating something at the top level with the shape [CODE], is it possible to arrange for [CODE] to have been bound by the time [CODE] is expanded?\nKimbery: though, actually, it seems like maybe that _does_ normally happen. so I’m not sure why my tangled macro code is seeing otherwise. :(\nKimbery: Ah… the real issue is that I’m expanding to something like this: [CODE_BLOCK] …and when [CODE] is expanded, [CODE]’s use produces a use-before-definition error for some reason.\nKimbery: I have no idea why this is the case, much less how to work around it. Vincenzo or Latarsha, can either of you give me some advice here?\nKimbery: This program reproduces the error: [CODE_BLOCK] [CODE_BLOCK]\nLatarsha: Short answer: the top level is hopeless\nKimbery: I know that, but I would like users to be able to define datatypes in the REPL. :)\nLatarsha: I think one of Matthew's posts in my gist on that topic discussed this issue but I'm not certain\nKimbery: lemme dig that gist up, then…\nVincenzo: I think the long answer is to use the [CODE] hack - in this case under [CODE]\nVincenzo: But only when expanding in a top-level context\nKimbery: I see that hack is alluded to here… <[URL] …but I don’t really understand what it does.\nKimbery: I guess it’s documented in the reference under “Macro-Introduced Bindings”, but some of this makes my head spin.\nKimbery: Hmm… that hack doesn’t actually work here, though, anyway, unless I’m doing it wrong. This program produces the same error: [CODE_BLOCK]\nKimbery: The thing that makes me think this is something different is that the issue is _not_ an unbound identifier error, merely a use-before-definition error.\nKimbery: The empty-[CODE] trick seems to be for a forward declaration, but I don’t need a forward declaration here.\nKimbery: I realized I _was_ doing the forward declaration wrong, but doing it right doesn’t change anything, as far as I can tell. :p\nTina: Kimbery just looked at that code and I have no idea!\nTina: I guess there must an eq or an eq hash somewhere. sorry I’m of no use\nKimbery: That’s fine! I removed it and it seems to work okay, so I’m just hoping there isn’t some important reason that I’ll find out about later.\nTina: I think it was only performance. This appears to be the commit where it was introduced:\nTina: <[URL]\nTina: Of course, something somewhere may accidentally depend on eq-ness. (One of the reasons I don’t like eq!)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 24,
        "duration_minutes": 189.61,
        "contains_question": true,
        "action_keywords": [
          "discuss",
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Tina",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T19:36:51.467103",
          "text": "typesetting examples in my documentation is making me realize that some Hackett forms are totally broken at the top level :("
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T19:39:25.507122",
          "text": "when evaluating something at the top level with the shape `(begin (define-syntax foo ....) (some-macro ....))`, is it possible to arrange for `foo` to have been bound by the time `some-macro` is expanded?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T19:41:43.542845",
          "text": "though, actually, it seems like maybe that _does_ normally happen. so I’m not sure why my tangled macro code is seeing otherwise. :("
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T19:58:34.794239",
          "text": "Ah… the real issue is that I’m expanding to something like this:\n```\n(begin\n  (define-for-syntax a ....)\n  (define-syntax (b stx)\n    .... a ....))\n```\n…and when `b` is expanded, `a`’s use produces a use-before-definition error for some reason."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T19:59:49.812164",
          "text": "I have no idea why this is the case, much less how to work around it. <@Vincenzo> or <@Latarsha>, can either of you give me some advice here?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:00:39.826386",
          "text": "This program reproduces the error:\n```\n#lang racket\n\n(require syntax/parse/define)\n\n(define-simple-macro (f m:id)\n  (begin\n    (define-for-syntax x \"prop value\")\n    (define-syntax (m stx) x #'(void))))\n```\n```\n&gt; (f m)\n&gt; (m)\nx: undefined;\n cannot reference an identifier before its definition\n  phase: 1\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-08T20:03:19.865555",
          "text": "Short answer: the top level is hopeless"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:03:42.871015",
          "text": "I know that, but I would like users to be able to define datatypes in the REPL. :)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-08T20:04:38.884322",
          "text": "I think one of Matthew's posts in my gist on that topic discussed this issue but I'm not certain"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:04:49.886686",
          "text": "lemme dig that gist up, then…"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T20:05:52.901864",
          "text": "I think the long answer is to use the `(define-syntaxes (x) (values))` hack - in this case under `begin-for-syntax`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T20:06:15.907082",
          "text": "But only when expanding in a top-level context"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:07:23.923419",
          "text": "I see that hack is alluded to here… <http://lists.racket-lang.org/dev/archive/2009-October/001381.html> …but I don’t really understand what it does."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:09:27.951103",
          "text": "I guess it’s documented in the reference under “Macro-Introduced Bindings”, but some of this makes my head spin."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:12:09.988234",
          "text": "Hmm… that hack doesn’t actually work here, though, anyway, unless I’m doing it wrong. This program produces the same error:\n```\n(define-simple-macro (f m:id)\n  (begin\n    (define-for-syntax x \"prop value\")\n    (define-syntaxes [x] (values))\n    (define-syntax (m stx) x #'(void))))\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:13:36.007469",
          "text": "The thing that makes me think this is something different is that the issue is _not_ an unbound identifier error, merely a use-before-definition error."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:14:06.014169",
          "text": "The empty-`(values)` trick seems to be for a forward declaration, but I don’t need a forward declaration here."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T20:22:19.122081",
          "text": "I realized I _was_ doing the forward declaration wrong, but doing it right doesn’t change anything, as far as I can tell. :p"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-08T22:37:26.706983",
          "text": "<@Kimbery> just looked at that code and I have no idea!"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-08T22:39:22.727495",
          "text": "I guess there must an eq or an eq hash somewhere. sorry I’m of no use"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T22:41:48.754209",
          "text": "That’s fine! I removed it and it seems to work okay, so I’m just hoping there isn’t some important reason that I’ll find out about later."
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-08T22:46:02.798925",
          "text": "I think it was only performance. This appears to be the commit where it was introduced:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-08T22:46:03.799179",
          "text": "<https://github.com/racket/scribble/commit/f1a593d3a3337478db7381290316fdc0f7e6246f>"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-08T22:46:27.803456",
          "text": "Of course, something somewhere may accidentally depend on eq-ness. (One of the reasons I don’t like eq!)"
        }
      ]
    },
    {
      "conversation_id": "138",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Kimbery I think you're seeing something different than the problem that can be solved with [CODE]. Your example only fails for me in DrRacket if I haven't saved the module to a file, which maybe has to do with how DrRacket treats the module; more importantly, I don't see the problem when using the new expander implementation. I think it's yet another bug in the old expander's implementation of [CODE].\nKimbery: Ah, hmm, perhaps a DrRacket issue then. That means the actual issue in my code is probably something else, and that test case was oversimplified.\nKimbery: Thank you for looking into it. I’ll try digging into it some more.\nVincenzo: My guess is that DrRacket is sometimes masking the bug, and the problem you're seeing is in [CODE]\nKimbery: How would the old expander be relevant here? I’m running a very new version of Racket.\nVincenzo: I guess there are too many \"old\" expanders now. To me, the current release and main Racket development branch are an old expander (i.e,. the one in C); the new expander (in Racket) is in the racket7 repo\nKimbery: Oh, I see. I am evidently not keeping up with the pace of innovation in the Racket ecosystem. :)\nVincenzo: I'll look into fixing the problem tomorrow\nKimbery: It’s not a big deal if that is, in fact, a red herring. I’ll try and do some more diligent testing to see if it’s actually related to the problem in my real code or not.\nVincenzo: Does your real problem involve top-level evaluation?\nKimbery: It does—I’m trying to get something working in the REPL, mostly so that I can use it with [CODE].\nVincenzo: Likely related, then; it seems clearly to be a bug to fix, in any case\nKimbery: Alright, well, if you get around to fixing it before I figure out what’s wrong with my code, I can let you know if it was the culprit or not.\nKimbery: Vincenzo I’m seeing behavior I don’t understand, but I am also having trouble reproducing it in a self-contained test case. I’ve inserted some [CODE]s in my code, and I’m seeing [CODE] return [CODE] unchanged, where [CODE] is some identifier. However, [CODE] returns [CODE]. This only happens at the top level; when the same code is encountered while expanding a module, [CODE] is non-[CODE], and [CODE] actually expands to something. I’m very confused by this behavior. Is there some situation in which [CODE] can pass an identifier through unchanged even though [CODE] seems to claim it is unbound? I would expect an unbound identifier error in that scenario, but I also don’t know how the top level treats [CODE].\nVincenzo: Kimbery I don't know if that last example can work at all. The [CODE] form can't generally deal with a mixture of top-level or module-level evaluation and expansion. For example, I struggle with the question: What would it mean to define [CODE] when the definition can be discarded after [CODE]?\nVincenzo: So, your comment about delaying expansion seems like potentially the right idea, but I'm unclear on what part can be delayed. You might need to expand with a non-empty stop list and recognize sequences the way forms with internal-definition positions often do.\nKimbery: Vincenzo That makes sense. This is probably an XY problem. I want to expand forms entered into the REPL to see if they end in a definition or expression, so I can print the expression’s type as well as its result. However, I’m not completely sure what the right way to do that is with partial expansion.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 17,
        "duration_minutes": 833.64,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "fix",
          "implement",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T23:11:57.073608",
          "text": "<@Kimbery> I think you're seeing something different than the problem that can be solved with `(define-syntaxes [x] (values))`. Your example only fails for me in DrRacket if I haven't saved the module to a file, which maybe has to do with how DrRacket treats the module; more importantly, I don't see the problem when using the new expander implementation. I think it's yet another bug in the old expander's implementation of `module-&gt;namespace`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T23:13:28.088186",
          "text": "Ah, hmm, perhaps a DrRacket issue then. That means the actual issue in my code is probably something else, and that test case was oversimplified."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T23:14:33.098536",
          "text": "Thank you for looking into it. I’ll try digging into it some more."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T23:22:14.174683",
          "text": "My guess is that DrRacket is sometimes masking the bug, and the problem you're seeing is in `module-&gt;namespace`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T23:22:48.180020",
          "text": "How would the old expander be relevant here? I’m running a very new version of Racket."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T23:25:24.206980",
          "text": "I guess there are too many \"old\" expanders now. To me, the current release and main Racket development branch are an old expander (i.e,. the one in C); the new expander (in Racket) is in the racket7 repo"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T23:27:27.227791",
          "text": "Oh, I see. I am evidently not keeping up with the pace of innovation in the Racket ecosystem. :)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T23:28:37.239767",
          "text": "I'll look into fixing the problem tomorrow"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T23:29:51.252120",
          "text": "It’s not a big deal if that is, in fact, a red herring. I’ll try and do some more diligent testing to see if it’s actually related to the problem in my real code or not."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T23:30:21.257669",
          "text": "Does your real problem involve top-level evaluation?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T23:31:12.266753",
          "text": "It does—I’m trying to get something working in the REPL, mostly so that I can use it with `scribble/example`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-08T23:34:32.299456",
          "text": "Likely related, then; it seems clearly to be a bug to fix, in any case"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-08T23:36:09.315714",
          "text": "Alright, well, if you get around to fixing it before I figure out what’s wrong with my code, I can let you know if it was the culprit or not."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T00:35:28.333661",
          "text": "<@Vincenzo> I’m seeing behavior I don’t understand, but I am also having trouble reproducing it in a self-contained test case. I’ve inserted some `printf`s in my code, and I’m seeing `(local-expand stx 'expression '())` return `stx` unchanged, where `stx` is some identifier. However, `(identifier-binding stx (syntax-local-context) #t)` returns `#f`. This only happens at the top level; when the same code is encountered while expanding a module, `(identifier-binding stx)` is non-`#f`, and `local-expand` actually expands to something.\n\nI’m very confused by this behavior. Is there some situation in which `local-expand` can pass an identifier through unchanged even though `identifier-binding` seems to claim it is unbound? I would expect an unbound identifier error in that scenario, but I also don’t know how the top level treats `local-expand`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-09T09:02:24.962273",
          "text": "<@Kimbery> I don't know if that last example can work at all. The `local-expand` form can't generally deal with a mixture of top-level or module-level evaluation and expansion. For example, I struggle with the question: What would it mean to define `val` when the definition can be discarded after `local-expand`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-09T09:03:55.003028",
          "text": "So, your comment about delaying expansion seems like potentially the right idea, but I'm unclear on what part can be delayed. You might need to expand with a non-empty stop list and recognize sequences the way forms with internal-definition positions often do."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T13:05:35.628270",
          "text": "<@Vincenzo> That makes sense. This is probably an XY problem. I want to expand forms entered into the REPL to see if they end in a definition or expression, so I can print the expression’s type as well as its result. However, I’m not completely sure what the right way to do that is with partial expansion."
        }
      ]
    },
    {
      "conversation_id": "139",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Alright, I think I hunted down what was causing that strange error. I think, ultimately, it was user error, though I still don’t understand why [CODE] was behaving that way. Anyway, I’ve run into a different issue, and this program is even smaller. Unfortunately, this fails to compile: [CODE_BLOCK] This produces this error: [CODE_BLOCK] I tried the [CODE] hack, but it doesn’t seem to help here.\nKimbery: I also tried splitting up the definitions in [CODE] into multiple macros to try and delay expansion, but that didn’t accomplish anything. I’m pretty lost about how to make this sort of macro cooperate with the top level.\nLatarsha: Kimbery the TR repl does that\nKimbery: I thought TR might have some prior art. What is its technique?\nLatarsha: see <[URL]\nKimbery: Latarsha I’m not entirely sure what I’m looking at\nLatarsha: You probably have to look at the functions that calls\nKimbery: Latarsha does it basically just recursively call [CODE] with kernel forms as the stop list?\nKimbery: I’m following the code as best as I can but TR is big\nKimbery: Latarsha Vincenzo Unless I’m overlooking something, given what you said, I think doing partial expansion might still expand too much, since it would still require expanding the form that needs that [CODE] binding.\nKimbery: I don’t feel like I understand how expansion at the top level works, though.\nKimbery: Hmm… even after trying to simplify my macro to play nicer with the top level, I’ve discovered even something as simple as this still doesn’t work: [CODE_BLOCK]\nKimbery: Partial expansion wouldn’t help here, because in order to determine if [CODE] is an expression, we’d need to expand [CODE], which fails.\nVincenzo: Kimbery I can't offer a long answer right now, but have you seen [CODE] from [CODE]?\nKimbery: No, I hadn’t! I wasn’t aware of [CODE]; that looks helpful.\nKimbery: Vincenzo [CODE] looks very close to what I’m looking for, but I can’t figure out how to use it correctly—if I use it at the top level or in the runtime body of a module, it does what I’d expect, but if I call it at phase 1 or during expansion of [CODE], [CODE] produces [CODE] for some reason. It seems like maybe that happens because it treats the syntax object as a phase 1 expression? But I need to be able to expand it as a runtime expression.\nKimbery: But now I need to drive for an hour, so I’ll be away from the keyboard as well.\nKimbery: …hours later, my understanding is that I’d need access to the REPL’s namespace in order to properly use [CODE], but it doesn’t seem like [CODE] is set to the right thing during the expansion of [CODE], and I’m not sure if there’s any way to get ahold of it.\nKimbery: I suppose I can do something like this: [CODE_BLOCK] …but I’m not sure if that’s a recommended approach or not!\nVincenzo: Kimbery That might work, but I think the best approach would be to do something like [CODE], but using [CODE] with a non-empty stop list)to replace [CODE], and using a trampoline to replace [CODE]. By \"trampoline\", I mean that the macro would return [CODE]. That would be similar to the way that internal-definition forms like [CODE] work (see [CODE]), except that you don't have the hassle of an explicit definition context at the top level.\nKimbery: Vincenzo Hmm, would that work? If I only expand to [CODE], won’t the use of [CODE] be expanded _before_ [CODE] is evaluated, ended up at the same place we started?\nVincenzo: No, [CODE] splices [CODE] into the top-level sequence, evaluating [CODE] before continuing the expansion of [CODE]\nVincenzo: I've pushed a repair for the other problem, in case that helps with some part of the puzzle\nKimbery: I see, that makes sense. I ended up getting something working using the hack I wrote above, but your solution sounds better. I will try switching to something like what you describe at some point.\nKimbery: Is this a utility that would be useful in [CODE]?\nVincenzo: It sounds useful in a library – maybe not in [CODE], but maybe cross-referenced with it, so that eval-time and expand-time functionality is not unnecessarily bundled together",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 26,
        "duration_minutes": 2590.83,
        "contains_question": true,
        "action_keywords": [
          "action",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T01:56:32.123119",
          "text": "Alright, I think I hunted down what was causing that strange error. I think, ultimately, it was user error, though I still don’t understand why `local-expand` was behaving that way. Anyway, I’ve run into a different issue, and this program is even smaller. Unfortunately, this fails to compile:\n```\n#lang racket\n\n(require (for-syntax (for-syntax racket/base)\n                     racket/syntax\n                     syntax/transformer)\n         syntax/parse/define)\n\n(define-simple-macro (mac id:id)\n  #:with val (generate-temporary #'id)\n  (begin\n    (begin-for-syntax\n      (define-syntaxes [val] (values))\n      (define val #'\"something\"))\n    (define-syntax id (make-variable-like-transformer val))))\n\n(begin-for-syntax\n  (local-expand #'(mac foo) 'top-level '()))\n```\nThis produces this error:\n```\nfoo1: unbound identifier in the transformer environment;\n also, no #%top syntax transformer is bound\n  in: foo1\n```\nI tried the `define-syntaxes` hack, but it doesn’t seem to help here."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T01:59:04.149041",
          "text": "I also tried splitting up the definitions in `mac` into multiple macros to try and delay expansion, but that didn’t accomplish anything. I’m pretty lost about how to make this sort of macro cooperate with the top level."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-09T13:06:16.651538",
          "text": "<@Kimbery> the TR repl does that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T13:06:38.663828",
          "text": "I thought TR might have some prior art. What is its technique?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-09T13:07:44.700864",
          "text": "see <https://github.com/racket/typed-racket/blob/81b134cbb92e51073d9354f8095da79a68aae824/typed-racket-lib/typed-racket/core.rkt#L63>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T13:18:31.059148",
          "text": "<@Latarsha> I’m not entirely sure what I’m looking at"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-09T13:18:58.074491",
          "text": "You probably have to look at the functions that calls"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T14:10:26.881913",
          "text": "<@Latarsha> does it basically just recursively call `local-expand` with kernel forms as the stop list?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T14:10:43.890926",
          "text": "I’m following the code as best as I can but TR is big"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T16:15:18.959815",
          "text": "<@Latarsha> <@Vincenzo> Unless I’m overlooking something, given what you said, I think doing partial expansion might still expand too much, since it would still require expanding the form that needs that `define-for-syntax` binding."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T16:15:45.973979",
          "text": "I don’t feel like I understand how expansion at the top level works, though."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T18:18:11.353230",
          "text": "Hmm… even after trying to simplify my macro to play nicer with the top level, I’ve discovered even something as simple as this still doesn’t work:\n```\n#lang racket\n\n(require (for-syntax racket/syntax\n                     syntax/transformer)\n         syntax/parse/define)\n\n(define-simple-macro (m1 id:id)\n  (begin\n    (define-syntax id (make-variable-like-transformer #'\"something\"))\n    (m2 id)))\n\n(define-simple-macro (m2 x)\n  #:with result (local-expand #'x 'expression '())\n  'result)\n\n(begin-for-syntax\n  (println (local-expand #'(m1 foo) 'top-level '())))\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T18:18:45.364527",
          "text": "Partial expansion wouldn’t help here, because in order to determine if `(m1 foo)` is an expression, we’d need to expand `(m2 id)`, which fails."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-09T18:25:09.492004",
          "text": "<@Kimbery> I can't offer a long answer right now, but have you seen `expand-syntax-top-level-with-compile-time-evals` from `syntax/toplevel`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T18:26:16.514295",
          "text": "No, I hadn’t! I wasn’t aware of `syntax/toplevel`; that looks helpful."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T18:43:55.849899",
          "text": "<@Vincenzo> `syntax/toplevel` looks very close to what I’m looking for, but I can’t figure out how to use it correctly—if I use it at the top level or in the runtime body of a module, it does what I’d expect, but if I call it at phase 1 or during expansion of `#%top-interaction`, `(expand-syntax-top-level-with-compile-time-evals #'(m1 foo))` produces `(#%app m1 foo)` for some reason. It seems like maybe that happens because it treats the syntax object as a phase 1 expression? But I need to be able to expand it as a runtime expression."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-09T18:47:14.910554",
          "text": "But now I need to drive for an hour, so I’ll be away from the keyboard as well."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-10T00:18:20.966003",
          "text": "…hours later, my understanding is that I’d need access to the REPL’s namespace in order to properly use `expand-syntax-top-level-with-compile-time-evals`, but it doesn’t seem like `current-namespace` is set to the right thing during the expansion of `#%top-interaction`, and I’m not sure if there’s any way to get ahold of it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-10T00:30:36.081639",
          "text": "I suppose I can do something like this:\n```\n(define-simple-macro (#%top-interaction . form)\n  (#%top-interaction*\n   (expand-syntax-top-level-with-compile-time-evals/flatten\n    (quote-syntax form))))\n\n(define (#%top-interaction* forms)\n  (for/last ([form (in-list forms)])\n    (syntax-parse form\n      #:literal-sets [kernel-literals]\n      [(define-syntaxes . _) (void)]\n      [_ (eval-syntax form)])))\n```\n…but I’m not sure if that’s a recommended approach or not!"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-10T20:25:48.722823",
          "text": "<@Kimbery> That might work, but I think the best approach would be to do something like `expand-syntax-top-level-with-compile-time-evals`, but using `local-expand` with a non-empty stop list)to replace `expand-syntax-to-top-form`, and using a trampoline to replace `eval`. By \"trampoline\", I mean that the macro would return `(begin &lt;form-to-eval&gt; (#%top-interaction &lt;rest-to-continue-with&gt;))`. That would be similar to the way that internal-definition forms like `block` work (see `racket/block`), except that you don't have the hassle of an explicit definition context at the top level."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-10T20:33:44.816041",
          "text": "<@Vincenzo> Hmm, would that work? If I only expand to `(begin &lt;form&gt; (#%top-interaction &lt;more&gt;))`, won’t the use of `#%top-interaction` be expanded _before_ `&lt;form&gt;` is evaluated, ended up at the same place we started?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-10T20:34:53.829272",
          "text": "No, `eval` splices `begin` into the top-level sequence, evaluating `&lt;form&gt;` before continuing the expansion of `(#%top-interaction &lt;more&gt;))`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-10T20:35:58.841219",
          "text": "I've pushed a repair for the other problem, in case that helps with some part of the puzzle"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-10T20:37:07.853841",
          "text": "I see, that makes sense. I ended up getting something working using the hack I wrote above, but your solution sounds better. I will try switching to something like what you describe at some point."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-10T20:37:46.860941",
          "text": "Is this a utility that would be useful in `syntax/toplevel`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-10T21:07:22.175818",
          "text": "It sounds useful in a library – maybe not in `syntax/toplevel`, but maybe cross-referenced with it, so that eval-time and expand-time functionality is not unnecessarily bundled together"
        }
      ]
    },
    {
      "conversation_id": "140",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Helga: if I just require a module in the REPL and run a function from it, will the function be JIT compiled?\nLatarsha: Helga yes\nHelga: Latarsha thank you, that’s good to know",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 2.55,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Helga",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Helga",
          "timestamp": "2017-08-10T17:07:46.106568",
          "text": "if I just require a module in the REPL and run a function from it, will the function be JIT compiled?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-10T17:09:49.161664",
          "text": "<@Helga> yes"
        },
        {
          "user": "Helga",
          "timestamp": "2017-08-10T17:10:19.175437",
          "text": "<@Latarsha> thank you, that’s good to know"
        }
      ]
    },
    {
      "conversation_id": "141",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: I think Racket's REPL is more like a \"RECEPL\": Read Expand Compile Eval Loop. Plus, Compile is really both (a) compile fully-expanded Racket to bytecode and (b) JIT compile bytecode to machine code.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-08-10T19:56:08.351014",
          "text": "I think Racket's REPL is more like a \"RECEPL\": Read Expand Compile Eval Loop.\n\nPlus, Compile is really both (a) compile fully-expanded Racket to bytecode and (b) JIT compile bytecode to machine code."
        }
      ]
    },
    {
      "conversation_id": "142",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Carolyne: Hello, is there any way to use the return value from a [CODE] statement?\nCarolyne: I'm trying to make a generator that can change its state when passed values, but doesn't necessarily need to be passed values\nKimbery: Carolyne the docs for [CODE] show an example of using the return value from a [CODE] expression. is there something else you’re asking about? <[URL]\nCarolyne: The problem is it that it demands you use the value\nKimbery: ah, you might want to look at [CODE].\nCarolyne: if you try to NOT use a value, it has arity error\nKimbery: the issue here is the same as the error produced by this code: [CODE_BLOCK]\nKimbery: essentially, [CODE] returns a varying number of values depend on the number of arguments passed to the generator. [CODE] can handle an arbitrary number of values, whereas [CODE]/[CODE]/[CODE]/[CODE] only handle a statically-known number of values.\nKimbery: you can, for example, write [CODE], and the values passed to the generator will be collected into a list.\nCarolyne: I feel like I need a phd to use this language\nKimbery: there’s a [CODE] form provided by various utility libraries, perhaps that would be more palatable?\nCarolyne: call with values works pretty well\nCarolyne: because then I don't have to unpack the list\nCarolyne: I can use a case-lambda with ([() ()'] [(x) ( _do something with the value_)])\nCarolyne: I'm probably misusing this language\nCarolyne: Too used to procedural languages\nCarolyne: I think it would be cool if [CODE] returned [CODE] when nothing is passed to the generator\nKimbery: that would make the zero-args case impossible to distinguish from passing a single argument, which is [CODE].\nKimbery: and it also wouldn’t help at all distinguish between other numbers of arguments.\nKimbery: I think a more pleasant interface would probably be to just produce a list, not multiple values, but some people find multi-valued return “elegant”. I will not comment on that. :)\nKimbery: Carolyne after expansion, there is no difference between internal definitions and an equivalent [CODE]. in that code, [CODE] is called in tail position, so there is no memory cost to the recursion.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 21,
        "duration_minutes": 256.88,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Carolyne",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T18:53:03.799433",
          "text": "Hello, is there any way to use the return value from a `yield` statement?"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T18:54:49.821342",
          "text": "I'm trying to make a generator that can change its state when passed values, but doesn't necessarily need to be passed values"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T18:56:16.839796",
          "text": "<@Carolyne> the docs for `yield` show an example of using the return value from a `yield` expression. is there something else you’re asking about? <http://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29>"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T18:57:50.859907",
          "text": "The problem is it that it demands you use the value"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T18:57:58.861369",
          "text": "ah, you might want to look at `call-with-values`."
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T18:57:59.861599",
          "text": "if you try to NOT use a value, it has arity error"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T18:58:19.865942",
          "text": "the issue here is the same as the error produced by this code:\n```\n(define x (values 1 2))\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T18:59:14.877675",
          "text": "essentially, `yield` returns a varying number of values depend on the number of arguments passed to the generator. `call-with-values` can handle an arbitrary number of values, whereas `define`/`define-values`/`let`/`let-values` only handle a statically-known number of values."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T19:00:26.894553",
          "text": "you can, for example, write `(call-with-values (lambda () (yield 2)) list)`, and the values passed to the generator will be collected into a list."
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T19:01:22.907400",
          "text": "I feel like I need a phd to use this language"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T19:03:24.933607",
          "text": "there’s a `values-&gt;list` form provided by various utility libraries, perhaps that would be more palatable?"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T19:03:45.938025",
          "text": "call with values works pretty well"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T19:03:51.939185",
          "text": "because then I don't have to unpack the list"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T19:04:28.946699",
          "text": "I can  use a case-lambda with ([() ()'] [(x) ( _do something with the value_)])"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T19:05:22.957658",
          "text": "I'm probably misusing this language"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T19:06:01.965694",
          "text": "Too used to procedural languages"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T19:06:53.976266",
          "text": "I think it would be cool if `yield` returned `void` when nothing is passed to the generator"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T19:07:49.986921",
          "text": "that would make the zero-args case impossible to distinguish from passing a single argument, which is `#&lt;void&gt;`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T19:08:08.990447",
          "text": "and it also wouldn’t help at all distinguish between other numbers of arguments."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T19:08:58.000162",
          "text": "I think a more pleasant interface would probably be to just produce a list, not multiple values, but some people find multi-valued return “elegant”. I will not comment on that. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T23:09:56.570028",
          "text": "<@Carolyne> after expansion, there is no difference between internal definitions and an equivalent `letrec`. in that code, `loop` is called in tail position, so there is no memory cost to the recursion."
        }
      ]
    },
    {
      "conversation_id": "143",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Carolyne: Does having a let in a named loop have some undesirable interaction over define?\nCarolyne: Does the 2nd let cause massive memory growth? If a define was used instead, would it be different?\nCarolyne: so its like\nCarolyne: internally converted to a let* or a letrec\nCarolyne: not _converted_ but in the actual implementation it's equivalent\nKimbery: no, it actually _is_ converted; my phrasing was a little misleading. see the grammar for fully-expanded programs: <[URL]\nKimbery: most notably, [CODE] and [CODE] are only [CODE]s. neither appears in the grammar for [CODE].\nCarolyne: I feel like I need a PHD to use this language\nKimbery: to be fair, if you ask a low-level question, you will get a low-level answer. :)\nCarolyne: and I'm thankful for it\nCarolyne: I just can't understand it\nKimbery: well, “non-top-level definitions get turned into [CODE] internally” is probably a good enough, simpler explanation.\nCarolyne: \"A reference to a local binding in a fully expanded program has a scope set that matches its binding identifier exactly. \"\nCarolyne: this was a line in the thing you linked me\nCarolyne: which I believe answers what I asked\nCarolyne: :sweat_smile:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 16,
        "duration_minutes": 46.5,
        "contains_question": true,
        "action_keywords": [
          "action",
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Carolyne",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T22:40:51.451698",
          "text": "Does having a let in a named loop have some undesirable interaction over define?"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:07:18.559540",
          "text": "Does the 2nd let cause massive memory growth? If a define was used instead, would it be different?"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:12:05.578641",
          "text": "so its like"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:12:16.579359",
          "text": "internally converted to a let* or a letrec"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:12:48.581429",
          "text": "not _converted_ but in the actual implementation it's equivalent"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T23:13:35.584306",
          "text": "no, it actually _is_ converted; my phrasing was a little misleading. see the grammar for fully-expanded programs: <http://docs.racket-lang.org/reference/syntax-model.html#%28part._fully-expanded%29>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T23:14:28.587560",
          "text": "most notably, `define-values` and `define-syntaxes` are only `general-top-level-form`s. neither appears in the grammar for `expr`."
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:15:52.592997",
          "text": "I feel like I need a PHD to use this language"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T23:18:40.603318",
          "text": "to be fair, if you ask a low-level question, you will get a low-level answer. :)"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:21:03.612362",
          "text": "and I'm thankful for it"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:21:06.612565",
          "text": "I just can't understand it"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-11T23:26:22.633055",
          "text": "well, “non-top-level definitions get turned into `letrec` internally” is probably a good enough, simpler explanation."
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:26:38.634005",
          "text": "\"A reference to a local binding in a fully expanded program has a scope set that matches its binding identifier exactly. \""
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:26:45.634472",
          "text": "this was a line in the thing you linked me"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:27:03.635601",
          "text": "which I believe answers what I asked"
        },
        {
          "user": "Carolyne",
          "timestamp": "2017-08-11T23:27:21.636658",
          "text": ":sweat_smile:"
        }
      ]
    },
    {
      "conversation_id": "144",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo To bother you some more… my rendered interactions in my Hackett docs sometimes have stdout duplicated for reasons I don’t understand, such as in the second interaction on this page: <[URL]\nKimbery: I cannot reproduce that with [CODE] directly, but it happens consistently (and, as far as I can tell, deterministically) with [CODE]. Do you have any idea why that might be happening?\nKimbery: The weird thing is that it only happens for some examples, but they always appear to be the same ones.\nVincenzo: Kimbery When you have something like [CODE], the [CODE] part is evaluated by itself and rendered, with the side-effect of the [CODE] output that you expect. Then, [CODE] is evaluated, so its result can be compared to the result of (+ 1 2)[CODE]3`, another \": Integer\" is printed, but that printout stays in the output buffer until a later rendering reads from it.\nVincenzo: Possible changes to [CODE] include (1) waiting until after the second expression is evaluated to gather output; (2) discarding any output from the second expression. Either of those options would be less confusing than the current behavior, and I lean toward option (1), but that would mean you need to wrap expected-result expressions in some way so that they don't produce output.\nKimbery: Vincenzo Oh, of course. I should have realize what was going on there. Thanks.\nKimbery: Vincenzo Finally got around to implementing your [CODE] + trampolining solution, and it looks like it works well. Thanks for your help. :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 1573.65,
        "contains_question": true,
        "action_keywords": [
          "action",
          "implement",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-12T18:11:55.242934",
          "text": "<@Vincenzo> To bother you some more… my rendered interactions in my Hackett docs sometimes have stdout duplicated for reasons I don’t understand, such as in the second interaction on this page: <http://docs.racket-lang.org/hackett/guide-quick-start.html>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-12T18:12:32.245192",
          "text": "I cannot reproduce that with `racket/sandbox` directly, but it happens consistently (and, as far as I can tell, deterministically) with `scribble/example`. Do you have any idea why that might be happening?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-12T18:12:45.246049",
          "text": "The weird thing is that it only happens for some examples, but they always appear to be the same ones."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-13T11:38:48.768796",
          "text": "<@Kimbery> When you have something like `(eval:check (+ 1 2) 3)`, the `(+ 1 2)` part is evaluated by itself and rendered, with the side-effect of the `: Integer` output that you expect. Then, `3` is evaluated, so its result can be compared to the result of (+ 1 2)`; in the process of evaluating `3`, another \": Integer\" is printed, but that printout stays in the output buffer until a later rendering reads from it."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-13T11:44:41.795524",
          "text": "Possible changes to `eval:check` include (1) waiting until after the second expression is evaluated to gather output; (2) discarding any output from the second expression. Either of those options would be less confusing than the current behavior, and I lean toward option (1), but that would mean you need to wrap expected-result expressions in some way so that they don't produce output."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-13T12:56:19.133205",
          "text": "<@Vincenzo> Oh, of course. I should have realize what was going on there. Thanks."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-13T20:25:34.280618",
          "text": "<@Vincenzo> Finally got around to implementing your `local-expand` + trampolining solution, and it looks like it works well. Thanks for your help. :)"
        }
      ]
    },
    {
      "conversation_id": "145",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: I seem to be hitting an exception on the package web site? When I visit <[URL] I get: [CODE_BLOCK]\nRosalee: Is there any way to prevent [CODE] from installing a package? Like, (pre-)install-collection for an [CODE] files, but can also fail.\nRosalee: The best I can think of is to have my package’s (pre)-install-collection function throw an error. But the collection will still end up installed, even after the error is thrown.\nChantelle: There's a way to turn off raco setup when installing, is that close to what you want?\nRosalee: Chantelle Can I do it programatically from within a package?\nRosalee: Like, I made package A. But package A requires some system dependency not provided.\nRosalee: I have code that can check to see if the dependency is met, but if it isn’t met, I can’t really fix it.\nRosalee: As such, I just want to bail, and don’t install the package.\nRosalee: (Rather than letting raco finish installing a broken package.)\nChantelle: Ah yeah, no idea how to do that\nChantelle: That seems like a reasonable thing to want to do though\nRosalee: Sad day. Well if it’s not possible, I’ll see if its possible to add it.\nVincenzo: Rosalee That doesn't sound like a good idea. There can be all sorts of reasons to install a package that can't currently run, including installing to build documentation or a distribution. It's much better to have the library report a run-time error for unavailable functionality.\nRosalee: Vincenzo Ya, that makes sense, except for when the dep you need is specifically for building. Although I guess in that case an error is just fine.\nRosalee: Thanks. :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 15,
        "duration_minutes": 2426.3,
        "contains_question": true,
        "action_keywords": [
          "build",
          "finish",
          "fix",
          "requires",
          "todo",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-08-12T22:22:43.139314",
          "text": "I seem to be hitting an exception on the package web site?\n\nWhen I visit <https://pkgd.racket-lang.org/pkgn/search?q=trace> I get:\n\n```\nException\nThe application raised an exception with the message:\n\nget-implied-docs: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\nStack trace:\n\nfor-loop at:\n  line 628, column 4, in file /home/pkgserver/racket-pkg-website/src/site.rkt\nbuild-pkg-rows/num-todos at:\n  line 621, column 0, in file /home/pkgserver/racket-pkg-website/src/site.rkt\npackage-summary-table at:\n  line 597, column 0, in file /home/pkgserver/racket-pkg-website/src/site.rkt\n&lt;unknown procedure&gt; at:\n  line 127, column 35, in file /home/pkgserver/racket-pkg-website/src/site.rkt\n&lt;unknown procedure&gt; at:\n  line 340, column 33, in file /home/pkgserver/racket/collects/racket/contract/private/arrow-higher-order.rkt\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:41:17.639557",
          "text": "Is there any way to prevent `raco pkg` from installing a package? Like, (pre-)install-collection for an `info.rkt` files, but can also fail."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:42:04.665371",
          "text": "The best I can think of is to have my package’s (pre)-install-collection function throw an error. But the collection will still end up installed, even after the error is thrown."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T14:42:25.677250",
          "text": "There's a way to turn off raco setup when installing, is that close to what you want?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:42:49.690363",
          "text": "<@Chantelle> Can I do it programatically from within a package?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:43:08.700595",
          "text": "Like, I made package A. But package A requires some system dependency not provided."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:43:36.715488",
          "text": "I have code that can check to see if the dependency is met, but if it isn’t met, I can’t really fix it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:43:46.721233",
          "text": "As such, I just want to bail, and don’t install the package."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:44:00.728400",
          "text": "(Rather than letting raco finish installing a broken package.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T14:44:23.741181",
          "text": "Ah yeah, no idea how to do that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T14:44:36.748768",
          "text": "That seems like a reasonable thing to want to do though"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:45:11.768882",
          "text": "Sad day. Well if it’s not possible, I’ll see if its possible to add it."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-14T14:47:25.844888",
          "text": "<@Rosalee> That doesn't sound like a good idea. There can be all sorts of reasons to install a package that can't currently run, including installing to build documentation or a distribution. It's much better to have the library report a run-time error for unavailable functionality."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:48:56.894395",
          "text": "<@Vincenzo> Ya, that makes sense, except for when the dep you need is specifically for building. Although I guess in that case an error is just fine."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-14T14:49:00.896664",
          "text": "Thanks. :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "146",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Corey seems back up/fixed\nGeorgeanna: I’m trying to clean up my package status… it is listing as having test errors. If I run tests in racket-mode, I get zero output. If I run with [CODE] I get: [CODE_BLOCK] which is entirely not helpful… the package status shows an error, but why am I not getting output with either method? Am I forgetting a flag?\nCorey: Georgeanna These? <[URL]\nGeorgeanna: yes… I’m starting to think that we’re running different things tho… I also have NO IDEA why [CODE] thinks I have 14 tests\nGeorgeanna: If I add a [CODE] at the end of my test module, it prints and then I get the “test failures” line… I have no idea what’s running at this point\nLatarsha: Georgeanna which package are you looking at?\nKimbery: fwiw, the “_n_ test failures” line is printed by [CODE]\nGeorgeanna: I did test coverage in drracket and I only have 2 expressions not covered… and exception and a failure case\nGeorgeanna: but I only have 3 calls to [CODE]\nCorey: <[URL]\nGeorgeanna: nope… the sha’s match… we’re running the same thing\nCorey: Georgeanna Is that the source?\nGeorgeanna: yup!\nLatarsha: it's probably all the different calls to [CODE] in loops that adds up to 14\nGeorgeanna: and I only have that displayln diff locally\nKimbery: one of the big flaws of rackunit, imo, is that there is basically no possibility for reuse: you generally cannot define a check in terms of another one without things leaking through\nGeorgeanna: haha\nGeorgeanna: Kimbery agreed. I do a number of [CODE] or whatever it is… but I don’t pay much attention to the numbers… but in this case, since I’m testing a test function… I’m a bit confused.\nGeorgeanna: still… I don’t know how to reproduce the error that the pkg system is reporting\nGeorgeanna: Chantelle ^^^ composable assertions would be really really useful\nGeorgeanna: Latarsha by my reasoning, the number should be 7, not 14\nGeorgeanna: it’s also running my scribble file? I’m not doing that…\nLatarsha: the pkg build server runs all your files\nGeorgeanna: does anyone know what the flags are?\nLatarsha: see <[URL]\nGeorgeanna: [CODE] did it! thanks\nGeorgeanna: [CODE]… wtf does that mean?\nKimbery: drdr is the Racket CI server <[URL]\nGeorgeanna: wait. no. oops… that didn’t do it. that was the stderr output from the scribble doco checker I stole from somewhere\nKimbery: what command are you running?\nGeorgeanna: Latarsha looks like the internal links on that page are broken. Try “Dealing with Test Failures”… should I file a bug?\nGeorgeanna: Kimbery [CODE]\nKimbery: try [CODE]\nGeorgeanna: hrm: [CODE_BLOCK]\nGeorgeanna: I don’t want to port minitest to racket… but I’m close. :stuck_out_tongue:\nLatarsha: just some [CODE] attributes that should be [CODE] attributes -- I'll fix it\nKimbery: I think [CODE] is okay… it’s mostly agnostic to testing lib. [CODE] is eh.\nGeorgeanna: so it COULD work with another testing library? good to know…\nKimbery: [CODE] just runs your files, basically\nGeorgeanna: can you expand on what you’re “eh” about?\nKimbery: not atm, I’m in a meeting :p\nGeorgeanna: heh. kk. later\nKimbery: but if you’re interested in writing another framework, you can report test results to [CODE] with [CODE] <[URL]\nLatarsha: Georgeanna that's now fixed\nKimbery: it’s documented in the rackunit manual but it’s actually not in the rackunit package\nGeorgeanna: Latarsha cool! thanks!\nLatarsha: although that page won't be fixed until 6.11\nGeorgeanna: sure\nLatarsha: but they're just internal links so it's not so bad\nGeorgeanna: “Adds a test result to the running log. If result is false, then the test is considered a failure.” … that’s… pretty opaque\nKimbery: it basically just means call [CODE] if the test passes and [CODE] if it fails\nKimbery: [CODE] uses those calls to display the “n/m test failures” message\nGeorgeanna: OK. so I’m still responsible for my own failure/error reporting… gotcha\nGeorgeanna: grr… I need to STOP thinking about porting minitest. no no no … I don’t need another project\nGeorgeanna: looks like i should poke at [CODE] to make inner failures opaque to the test runner\nGeorgeanna: heh. I *DO* use that already… so no…\nGeorgeanna: ok…. so [CODE] is called inside of functions like [CODE] and the like… THEN they raise exceptions for things like [CODE] to deal with… which doesn’t make much sense to me. I should be allowed to use [CODE] to completely override how a test gets run/accounted-for.\nGeorgeanna: it’s a bit of a tangle… I need to wrap my head around it but at least I have a simple test case to reproduce it\nGeorgeanna: or … parameterize [CODE] ?\nGeorgeanna: that seems easier for sure… but… maybe less correct?\nGeorgeanna: Chantelle ^^^ opinions?\nChantelle: Georgeanna oh jeez I missed all of this conversation and it's so useful. Will respond when back at desk\nChantelle: Georgeanna re composable assertions: yes! those would be very useful. so useful, that I've been working on a package that provides them: <[URL]\nChantelle: as for the [CODE] weirdness: yes, ideally, [CODE] would only occur in [CODE]. That's something I'd like to fix in rackunit but it might break things in strange places. I'm particularly concerned about how that interacts with the [CODE] / [CODE] macros, since they parameterize [CODE]. Personally I think that in a test case or suite the entire case or suite should count as a single test.\nChantelle: oh, and I've been looking at minitest's features for inspiration on perf testing too so thanks :)\nChantelle: Georgeanna <[URL]\nGeorgeanna: saw that! cool thanks!\nGeorgeanna: Chantelle what’s your opinion on parameterizing test-log! ?\nChantelle: Georgeanna it's provided as a simple low-level workaround to unblock people who need to extend rackunit or reflect over checks without all their legacy weirdness breaking them\nChantelle: so if it works feel no shame in using it, but if there's no other option that's probably because something isn't designed well and a bug to fix that would be welcome\nGeorgeanna: ??? I’m not tracking… are you saying it already IS parameterized?\nChantelle: oh! yeah I added a parameter to disable the log in the most recent racket release\nChantelle: [CODE]\nChantelle: <[URL]\nGeorgeanna: oh shit… I missed the last release. :stuck_out_tongue:\nGeorgeanna: this should fix me right up then…\nChantelle: glad to help :)\nChantelle: Are [CODE] structs supposed to be allowed as place messages? The docs for places in general say \"To a first approximation, place channels support only immutable, transparent values as messages\" but the docs for [CODE] say \"pairs, lists, vectors, and immutable prefab structures containing message-allowed values, where a mutable vector is automatically replaced by an immutable vector\" are allowed and make no mention of transparent structures. Attempting to send a transparent struct raises an error.\nKimbery: My guess is that the meaning of “transparent” there is not intended to mean “transparent structure”, but I think the wording could be improved.\nVincenzo: Chantelle [CODE] structs are not meant to be allowed as place messages\nChantelle: ah, a doc improvement would be welcome then\nGeorgeanna: Chantelle are there differences in the failure message output in the new release?\nChantelle: Georgeanna slight differences, yes\nChantelle: why do you ask?\nGeorgeanna: I have new failures in my test suite… just making sure. I’d rather update my expected to match the latest version rather than trying to find some way to normalize it at this point\nChantelle: Georgeanna you might be interested in <[URL] which attempts to add some helpers for testing custom checks without everything breaking every time the message format changes slightly\nGeorgeanna: cool. thanks\nGeorgeanna: that’s slated for 6.11 I assume?\nChantelle: ya, although I haven't gotten around to resolving the API issues yet\nGeorgeanna: Chantelle is pretty-info (or accessors) exported? seems like not\nGeorgeanna: I’m failing because (pretty-info x) vs x\nChantelle: It's not. [CODE], [CODE] and [CODE] were created when refactoring some internal rackunit code implementing [CODE]. If you need them (or your test is failing because you're calling [CODE] on the info struct) they can be exported.\nChantelle: you could also use [CODE] / [CODE], since those add [CODE] under the hood\nGeorgeanna: I just required [CODE] and am back on track\nChantelle: that works, although I think using [CODE] or [CODE] might also work without you needing to require any private modules\nGeorgeanna: one thing at a time :slightly_smiling_face:\nGeorgeanna: Chantelle hrm… maybe I’ll need to do that sooner rather than later: [CODE_BLOCK]\nChantelle: Georgeanna do what?\nGeorgeanna: hrm… actually I’m confused by 2 things… 1) the above snippet doesn’t result in [CODE]\nGeorgeanna: 2) [CODE] and [CODE] wrap up in structs that can’t be compared\nGeorgeanna: [CODE_BLOCK]\nGeorgeanna: totally open to changing my code around to fit a better strategy…\nChantelle: The message you pass to a check is stored as a check info with key [CODE] unfortunately, it doesn't control the message of the exception directly\nChantelle: (personally I think the message argument just shouldn't be used)\nGeorgeanna: hrm… ok. It used to be “Check failure” ? … those are two different messages tho?\nChantelle: Yeah there's two. The default message used to be \"check failure\" but now it's nothing. Unless the check passes a string to fail-check there won't be a message on its own line. The message argument at check use sites always added an info, it's unrelated to the \"Check failure\" line\nGeorgeanna: yeah. I was testing that because my previous version relayed everything via fail-check\nGeorgeanna: and now uses check-info\nChantelle: fail-check is the preferred way for a textual message for the user, info is best for structured values\nGeorgeanna: well… this is both :slightly_smiling_face:\nGeorgeanna: ok. I think I have things fixed in a way I like…\nGeorgeanna: do I need to bump the package system or will it pick it up automatically?\nChantelle: I don't think you need to bump it, the catalog points to your git head and the build server will build the latest every night\nGeorgeanna: I updated the description anyways…. maybe that’ll trigger something\nGeorgeanna: and apparently I never released benchmark-ips… I should get on that\nGeorgeanna: <[URL]\nGeorgeanna: I love this package… use it all the time to compare approaches",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 117,
        "duration_minutes": 296.49,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "complete",
          "create",
          "fix",
          "implement",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [
          "agreed"
        ],
        "participants": [
          "Chantelle",
          "Corey",
          "Georgeanna",
          "Kimbery",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T15:45:05.652040",
          "text": "<@Corey> seems back up/fixed"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:01:51.177164",
          "text": "I’m trying to clean up my package status… it is listing as having test errors. If I run tests in racket-mode, I get zero output. If I run with `raco test` I get:\n\n```\n% raco test --process -t main.rkt \nraco test: (submod \"main.rkt\" test)\n3 14 main.rkt\n3/14 test failures\n```\n\nwhich is entirely not helpful… the package status shows an error, but why am I not getting output with either method? Am I forgetting a flag?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-14T16:05:59.305851",
          "text": "<@Georgeanna> These? <http://pkg-build.racket-lang.org/server/built/test-fail/check-sexp-equal.txt>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:07:46.362616",
          "text": "yes… I’m starting to think that we’re running different things tho… I also have NO IDEA why `raco test` thinks I have 14 tests"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:08:29.385043",
          "text": "If I add a `(displayln 'done)` at the end of my test module, it prints and then I get the “test failures” line… I have no idea what’s running at this point"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:09:02.400763",
          "text": "<@Georgeanna> which package are you looking at?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:09:21.409843",
          "text": "fwiw, the “_n_ test failures” line is printed by `raco test`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:09:30.414158",
          "text": "I did test coverage in drracket and I only have 2 expressions not covered… and exception and a failure case"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:09:46.422653",
          "text": "but I only have 3 calls to `check-exn-info?`"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-14T16:09:53.426817",
          "text": "<https://github.com/zenspider/check-sexp-equal/blob/master/main.rkt>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:10:36.448460",
          "text": "nope… the sha’s match… we’re running the same thing"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-14T16:10:53.456036",
          "text": "<@Georgeanna> Is that the source?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:10:58.458151",
          "text": "yup!"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:11:10.464297",
          "text": "it's probably all the different calls to `check-equal?` in loops that adds up to 14"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:11:24.471365",
          "text": "and I only have that displayln diff locally"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:12:48.513841",
          "text": "one of the big flaws of rackunit, imo, is that there is basically no possibility for reuse: you generally cannot define a check in terms of another one without things leaking through"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:12:49.514130",
          "text": "haha"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:13:33.536537",
          "text": "<@Kimbery> agreed. I do a number of `define-simple-check` or whatever it is… but I don’t pay much attention to the numbers… but in this case, since I’m testing a test function… I’m a bit confused."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:13:52.545978",
          "text": "still… I don’t know how to reproduce the error that the pkg system is reporting"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:14:28.563551",
          "text": "<@Chantelle> ^^^ composable assertions would be really really useful"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:14:55.577271",
          "text": "<@Latarsha> by my reasoning, the number should be 7, not 14"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:16:49.633908",
          "text": "it’s also running my scribble file? I’m not doing that…"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:17:34.656570",
          "text": "the pkg build server runs all your files"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:17:39.659219",
          "text": "does anyone know what the flags are?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:18:41.689966",
          "text": "see <http://pkg-build.racket-lang.org/about.html>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:20:32.746757",
          "text": "`--drdr` did it! thanks"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:21:00.761193",
          "text": "`--drdr Configure defaults to imitate DrDr`… wtf does that mean?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:21:21.771765",
          "text": "drdr is the Racket CI server <http://drdr.racket-lang.org>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:21:53.788097",
          "text": "wait. no. oops… that didn’t do it. that was the stderr output from the scribble doco checker I stole from somewhere"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:22:33.808268",
          "text": "what command are you running?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:22:57.820740",
          "text": "<@Latarsha> looks like the internal links on that page are broken. Try “Dealing with Test Failures”… should I file a bug?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:23:09.826929",
          "text": "<@Kimbery> `raco test --drdr  info.rkt main.rkt check-sexp-equal.scrbl`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:23:22.833808",
          "text": "try `raco test --drdr -p check-sexp-equal`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:24:20.861508",
          "text": "hrm:\n\n```\n% raco test --drdr -p check-sexp-equal\nraco test: 0 \"/Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/check-sexp-equal.scrbl\"\nraco test: 1 \"/Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/info.rkt\"\nraco test: 2 (submod \"/Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/main.rkt\" test)\n   0 /Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/check-sexp-equal.scrbl\n   0 /Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/info.rkt\n3 14 /Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/main.rkt\n3/14 test failures\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:25:08.887126",
          "text": "I don’t want to port minitest to racket… but I’m close. :stuck_out_tongue:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:25:40.904833",
          "text": "just some `name` attributes that should be `id` attributes -- I'll fix it"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:26:22.926824",
          "text": "I think `raco test` is okay… it’s mostly agnostic to testing lib. `rackunit` is eh."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:27:08.949817",
          "text": "so it COULD work with another testing library? good to know…"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:27:23.957618",
          "text": "`raco test` just runs your files, basically"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:28:02.977553",
          "text": "can you expand on what you’re “eh” about?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:28:13.982961",
          "text": "not atm, I’m in a meeting :p"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:28:18.985851",
          "text": "heh. kk. later"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:28:39.996590",
          "text": "but if you’re interested in writing another framework, you can report test results to `raco test` with `test-log!` <http://docs.racket-lang.org/rackunit/Testing_Utilities.html#%28def._%28%28lib._rackunit%2Flog..rkt%29._test-log%21%29%29>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:28:49.001981",
          "text": "<@Georgeanna> that's now fixed"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:29:01.008370",
          "text": "it’s documented in the rackunit manual but it’s actually not in the rackunit package"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:29:15.015406",
          "text": "<@Latarsha> cool! thanks!"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:29:19.017005",
          "text": "although that page won't be fixed until 6.11"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:29:27.021574",
          "text": "sure"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-14T16:29:30.022742",
          "text": "but they're just internal links so it's not so bad"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:30:38.058976",
          "text": "“Adds a test result to the running log. If result is false, then the test is considered a failure.” … that’s… pretty opaque"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:31:10.075463",
          "text": "it basically just means call `(test-log! #t)` if the test passes and `(test-log! #f)` if it fails"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T16:31:25.082966",
          "text": "`raco test` uses those calls to display the “n/m test failures” message"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:34:03.164103",
          "text": "OK. so I’m still responsible for my own failure/error reporting… gotcha"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:34:19.172397",
          "text": "grr… I need to STOP thinking about porting minitest. no no no … I don’t need another project"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:41:32.389193",
          "text": "looks like i should poke at `current-check-around` to make inner failures opaque to the test runner"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T16:45:22.502733",
          "text": "heh. I *DO* use that already… so no…"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:11:57.282900",
          "text": "ok…. so `check-log!` is called inside of functions like `fail-check` and the like… THEN they raise exceptions for things like `current-check-around` to deal with… which doesn’t make much sense to me. I should be allowed to use `parameterize` to completely override how a test gets run/accounted-for."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:14:11.342838",
          "text": "it’s a bit of a tangle… I need to wrap my head around it but at least I have a simple test case to reproduce it"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:15:25.377167",
          "text": "or … parameterize `test-log!` ?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:15:48.387713",
          "text": "that seems easier for sure… but… maybe less correct?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:16:20.402202",
          "text": "<@Chantelle> ^^^ opinions?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:33:53.861870",
          "text": "<@Georgeanna> oh jeez I missed all of this conversation and it's so useful. Will respond when back at desk"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:37:30.952729",
          "text": "<@Georgeanna> re composable assertions: yes! those would be very useful. so useful, that I've been working on a package that provides them: <http://docs.racket-lang.org/expect/>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:39:38.005724",
          "text": "as for the `test-log!` weirdness: yes, ideally, `test-log!` would only occur in `current-check-around`. That's something I'd like to fix in rackunit but it might break things in strange places. I'm particularly concerned about how that interacts with the `test-case` / `test-suite` macros, since they parameterize `current-check-around`. Personally I think that in a test case or suite the entire case or suite should count as a single test."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:40:08.017458",
          "text": "oh, and I've been looking at minitest's features for inspiration on perf testing too so thanks :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:53:16.327742",
          "text": "<@Georgeanna> <https://github.com/racket/rackunit/issues/70>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:55:33.380372",
          "text": "saw that! cool thanks!"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:55:46.385373",
          "text": "<@Chantelle> what’s your opinion on parameterizing test-log! ?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:56:55.411677",
          "text": "<@Georgeanna> it's provided as a simple low-level workaround to unblock people who need to extend rackunit or reflect over checks without all their legacy weirdness breaking them"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:57:35.426786",
          "text": "so if it works feel no shame in using it, but if there's no other option that's probably because something isn't designed well and a bug to fix that would be welcome"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:57:59.436033",
          "text": "??? I’m not tracking… are you saying it already IS parameterized?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:58:22.444553",
          "text": "oh! yeah I added a parameter to disable the log in the most recent racket release"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:58:34.449405",
          "text": "`test-log-enabled?`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:58:43.452734",
          "text": "<http://docs.racket-lang.org/rackunit/Testing_Utilities.html?q=test-log!#%28def._%28%28lib._rackunit%2Flog..rkt%29._test-log-enabled~3f%29%29>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:59:06.461487",
          "text": "oh shit… I missed the last release. :stuck_out_tongue:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T17:59:17.465778",
          "text": "this should fix me right up then…"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T18:01:32.519170",
          "text": "glad to help :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T19:36:28.172341",
          "text": "Are `#:transparent` structs supposed to be allowed as place messages? The docs for places in general say \"To a first approximation, place channels support only immutable, transparent values as messages\" but the docs for `place-message-allowed?` say \"pairs, lists, vectors, and immutable prefab structures containing message-allowed values, where a mutable vector is automatically replaced by an immutable vector\" are allowed and make no mention of transparent structures. Attempting to send a transparent struct raises an error."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T19:40:18.227063",
          "text": "My guess is that the meaning of “transparent” there is not intended to mean “transparent structure”, but I think the wording could be improved."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-14T19:40:58.236377",
          "text": "<@Chantelle> `#:transparent` structs are not meant to be allowed as place messages"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T19:41:30.243935",
          "text": "ah, a doc improvement would be welcome then"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T19:54:34.431305",
          "text": "<@Chantelle> are there differences in the failure message output in the new release?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T19:55:02.438338",
          "text": "<@Georgeanna> slight differences, yes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T19:55:05.438895",
          "text": "why do you ask?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T19:55:47.449195",
          "text": "I have new failures in my test suite… just making sure. I’d rather update my expected to match the latest version rather than trying to find some way to normalize it at this point"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T19:57:03.467043",
          "text": "<@Georgeanna> you might be interested in <https://github.com/racket/rackunit/pull/59> which attempts to add some helpers for testing custom checks without everything breaking every time the message format changes slightly"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T19:57:17.470369",
          "text": "cool. thanks"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T19:58:38.489397",
          "text": "that’s slated for 6.11 I assume?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T19:59:22.500034",
          "text": "ya, although I haven't gotten around to resolving the API issues yet"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:09:13.636042",
          "text": "<@Chantelle> is pretty-info (or accessors) exported? seems like not"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:09:25.638540",
          "text": "I’m failing because (pretty-info x) vs x"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:11:03.659956",
          "text": "It's not. `pretty-info`, `verbose-info` and `location-info` were created when refactoring some internal rackunit code implementing `run-tests`. If you need them (or your test is failing because you're calling `check-equal?` on the info struct) they can be exported."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:11:25.664762",
          "text": "you could also use `make-check-expected` / `make-check-actual`, since those add `pretty-info` under the hood"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:11:35.666814",
          "text": "I just required `rackunit/private/check-info` and am back on track"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:12:20.676454",
          "text": "that works, although I think using `make-check-expected` or `make-check-actual` might also work without you needing to require any private modules"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:13:50.695296",
          "text": "one thing at a time :slightly_smiling_face:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:22:50.806911",
          "text": "<@Chantelle> hrm… maybe I’ll need to do that sooner rather than later:\n\n```\n(exn-message (with-handlers ([exn:test:check? identity])\n               (parameterize ([current-check-around (λ (f) (f))])\n                 (check-equal? 1 2 \"a message\"))))\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:24:39.829154",
          "text": "<@Georgeanna> do what?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:25:50.843924",
          "text": "hrm… actually I’m confused by 2 things… 1) the above snippet doesn’t result in `\"a message\"`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:26:11.848275",
          "text": "2) `make-check-expected` and `make-check-actual` wrap up in structs that can’t be compared"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:26:29.852047",
          "text": "```\n(check-equal? (make-check-expected 42) (make-check-actual 42))\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:27:58.869513",
          "text": "totally open to changing my code around to fit a better strategy…"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:28:57.880955",
          "text": "The message you pass to a check is stored as a check info with key `'message` unfortunately, it doesn't control the message of the exception directly"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:29:21.885655",
          "text": "(personally I think the message argument just shouldn't be used)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:30:08.894932",
          "text": "hrm… ok. It used to be “Check failure” ? … those are two different messages tho?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:31:35.912775",
          "text": "Yeah there's two. The default message used to be \"check failure\" but now it's nothing. Unless the check passes a string to fail-check there won't be a message on its own line. The message argument at check use sites always added an info, it's unrelated to the \"Check failure\" line"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:32:02.918034",
          "text": "yeah. I was testing that because my previous version relayed everything via fail-check"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:32:12.920021",
          "text": "and now uses check-info"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:32:59.928910",
          "text": "fail-check is the preferred way for a textual message for the user, info is best for structured values"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:35:16.954882",
          "text": "well… this is both :slightly_smiling_face:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:35:31.957783",
          "text": "ok. I think I have things fixed in a way I like…"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:35:44.960182",
          "text": "do I need to bump the package system or will it pick it up automatically?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T20:36:33.969280",
          "text": "I don't think you need to bump it, the catalog points to your git head and the build server will build the latest every night"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:36:56.973623",
          "text": "I updated the description anyways…. maybe that’ll trigger something"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:37:30.980070",
          "text": "and apparently I never released benchmark-ips… I should get on that"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:40:44.017462",
          "text": "<https://pkgd.racket-lang.org/pkgn/package/benchmark-ips>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-14T20:41:35.027185",
          "text": "I love this package… use it all the time to compare approaches"
        }
      ]
    },
    {
      "conversation_id": "147",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: that sounds like probably the wrong thing, yes\nKimbery: I imagine you could submit a PR to fix that and it would be accepted",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.13,
        "contains_question": false,
        "action_keywords": [
          "fix",
          "submit"
        ],
        "decision_keywords": [
          "accepted"
        ],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T17:13:06.313442",
          "text": "that sounds like probably the wrong thing, yes"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-14T17:13:14.317285",
          "text": "I imagine you could submit a PR to fix that and it would be accepted"
        }
      ]
    },
    {
      "conversation_id": "148",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: they're not yet ready for prime time, but if you'd like to help it'd be very appreciated. the github repo has a lot of open issues documenting stuff I plan to add: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-14T17:38:08.968418",
          "text": "they're not yet ready for prime time, but if you'd like to help it'd be very appreciated. the github repo has a lot of open issues documenting stuff I plan to add: <https://github.com/jackfirth/racket-expect/issues>"
        }
      ]
    },
    {
      "conversation_id": "149",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Nelson Do you have a final opinion on meta checks? I'd like to get that resolved so your fix for the check-exn message can be tested.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-15T11:35:44.000178",
          "text": "<@Nelson> Do you have a final opinion on meta checks? I'd like to get that resolved so your fix for the check-exn message can be tested."
        }
      ]
    },
    {
      "conversation_id": "150",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Is there any way to alter the controls of the slideshow viewer?\nRosalee: I need to make it use up/down, rather than left/right.\nVincenzo: Rosalee There's not a straightforward way to do that. We could just add up &amp; down as aliases for left &amp; right, though.\nRosalee: Vincenzo that would be super helpful\nRosalee: Otherwise I’ll see if I can just remap it in os x.\nVincenzo: Done\nRosalee: Cool, thanks.\nLatarsha: Vincenzo running the handin server for our course causes racket to segfault consistently; this didn't happen previously (ie a year ago)\nLatarsha: this happens both with 6.6 and 6.10",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 1279.05,
        "contains_question": true,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-15T19:51:57.000033",
          "text": "Is there any way to alter the controls of the slideshow viewer?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-15T19:52:16.000114",
          "text": "I need to make it use up/down, rather than left/right."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-15T20:05:58.000138",
          "text": "<@Rosalee> There's not a straightforward way to do that. We could just add up &amp; down as aliases for left &amp; right, though."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-15T20:13:05.000062",
          "text": "<@Vincenzo> that would be super helpful"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-15T20:13:13.000142",
          "text": "Otherwise I’ll see if I can just remap it in os x."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-15T20:24:50.000082",
          "text": "Done"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-15T20:43:54.000002",
          "text": "Cool, thanks."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:10:50.000424",
          "text": "<@Vincenzo> running the handin server for our course causes racket to segfault consistently; this didn't happen previously (ie a year ago)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:11:00.000507",
          "text": "this happens both with 6.6 and 6.10"
        }
      ]
    },
    {
      "conversation_id": "151",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: stacktrace looks like:\nLatarsha: [CODE_BLOCK]\nVincenzo: Does running just [CODE] crash in the same way?\nLatarsha: it goes away with [CODE], which I just tested\nLatarsha: and yes, [CODE] crashes the same way\nLatarsha: I don't think [CODE] was needed a year ago (although that may have been an older Racket)\nLatarsha: (older than 6.6, that is)\nVincenzo: And other Gtk+ 3 apps work? I ask because the crash appears to be in [CODE].\nLatarsha: no, they don't -- same segfault with xvfb\nLatarsha: so probably not racket's fault\nLatarsha: I will report this to other people, then -- thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 11,
        "duration_minutes": 5.45,
        "contains_question": true,
        "action_keywords": [
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:11:05.000198",
          "text": "stacktrace looks like:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:11:09.000130",
          "text": "```\n#2  0x00000000006c2019 in fault_handler ()                                                                                [0/1442]\n#3  0x00007ffff76c85e0 in &lt;signal handler called&gt; () at /lib64/libpthread.so.0\n#4  0x00007ffff738601f in __rawmemchr_sse2 () at /lib64/libc.so.6\n#5  0x00007ffff736ffa2 in _IO_str_init_static_internal () at /lib64/libc.so.6\n#6  0x00007ffff735f1b7 in __isoc99_vsscanf () at /lib64/libc.so.6\n#7  0x00007ffff735f157 in __isoc99_sscanf () at /lib64/libc.so.6\n#8  0x00007fffe62a7862 in epoxy_glx_version () at /lib64/libepoxy.so.0\n#9  0x00007fffe7754757 in gdk_x11_screen_init_gl () at /lib64/libgdk-3.so.0\n#10 0x00007fffe7754cd8 in _gdk_x11_screen_update_visuals_for_gl () at /lib64/libgdk-3.so.0\n#11 0x00007fffe775da95 in _gdk_x11_screen_init_visuals () at /lib64/libgdk-3.so.0\n#12 0x00007fffe775a910 in _gdk_x11_screen_new () at /lib64/libgdk-3.so.0\n#13 0x00007fffe774a278 in _gdk_x11_display_open () at /lib64/libgdk-3.so.0\n#14 0x00007fffe771e389 in gdk_display_manager_open_display () at /lib64/libgdk-3.so.0\n#15 0x00007fffe54af0da in gtk_init_check () at /lib64/libgtk-3.so.0\n#16 0x00000000006be858 in ffi_call_unix64 ()\n#17 0x00000000006be21f in ffi_call ()\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-16T17:12:05.000028",
          "text": "Does running just `gracket` crash in the same way?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:12:12.000256",
          "text": "it goes away with `PLT_GTK2=1`, which I just tested"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:12:36.000227",
          "text": "and yes, `gracket` crashes the same way"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:12:59.000155",
          "text": "I don't think `PLT_GTK2` was needed a year ago (although that may have been an older Racket)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:13:06.000018",
          "text": "(older than 6.6, that is)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-16T17:13:56.000509",
          "text": "And other Gtk+ 3 apps work? I ask because the crash appears to be in `gtk_init_check`."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:16:12.000066",
          "text": "no, they don't -- same segfault with xvfb"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:16:21.000099",
          "text": "so probably not racket's fault"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-16T17:16:32.000176",
          "text": "I will report this to other people, then -- thanks"
        }
      ]
    },
    {
      "conversation_id": "152",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: A DrRacket question is there a way to mark certain positions in an open file so I can jump back to them from anywhere else in the file? For example, when working on a large file, I often need to navigate to a different part to read code there while I'm actively working on a different part. It would be nice to be able to mark the active site and jump back to it after rather than tediously scrolling back and searching around for a few moments to reorient myself. I looked around and didn't see such a feature. It probably doesn't exist but thought I'd ask and hope I'm lucky.\nCorey: Jacob If you have Emacs-style keybindings enabled in DrRacket, does [CODE] work (like [CODE] in Emacs)?\nJacob: Corey that keybinding doesn't seem to work, I also looked at the list of active keybindings but don't see it listed on there either.\nJacob: I might switch back to Emacs, I hadn't realized there was such a thing as [CODE]\nCorey: I just upgraded Racket for something, jumping from 6.7 to 6.10. Suddenly the logger is quite noisy with e.g.: [CODE_BLOCK] 1. What is the warning trying to tell me, and how can I fix it? 2. Note: This seems to be using [CODE]. It would be nicer if it defined its own logger e.g. [CODE] and used [CODE]? (That way, it could be silenced without silencing all other [CODE]s?)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 253.43,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-08-17T11:11:30.000121",
          "text": "A DrRacket question is there a way to mark certain positions in an open file so I can jump back to them from anywhere else in the file? For example, when working on a large file, I often need to navigate to a different part to read code there while I'm actively working on a different part. It would be nice to be able to mark the active site and jump back to it after rather than tediously scrolling back and searching around for a few moments to reorient myself.\n\nI looked around and didn't see such a feature. It probably doesn't exist but thought I'd ask and hope I'm lucky."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T14:17:12.000665",
          "text": "<@Jacob> If you have Emacs-style keybindings enabled in DrRacket, does `C-x C-x` work (like `exchange-point-and-mark` in Emacs)?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-17T14:49:46.000229",
          "text": "<@Corey> that keybinding doesn't seem to work, I also looked at the list of active keybindings but don't see it listed on there either."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-17T14:50:20.000153",
          "text": "I might switch back to Emacs, I hadn't realized there was such a thing as `exchange-point-and-mark`"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T15:24:56.000492",
          "text": "I just upgraded Racket for something, jumping from 6.7 to 6.10.\nSuddenly the logger is quite noisy with e.g.:\n\n```\n[warning] building projection of contract #&lt;flat-contract: xexpr/c&gt; for\n  (build-context . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/prop.rkt&gt; 319 0 10714 195))\n  (get/build-projection . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/guts.rkt&gt; 812 0 28280 301))\n  (.../more-scheme.rkt:261:28 . #f)\n  (mk-call . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-val-first.rkt&gt; 400 5 17828 2114))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-val-first.rkt&gt; 397 3 17564 3019))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (#f . #(struct:srcloc #&lt;path:/Users/greg/src/deals/web/main.rkt&gt; 725 0 28187 355))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 346 33 19012 147))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/share/pkgs/web-server-lib/web-server/dispatchers/dispatch-servlets.rkt&gt; 63 2 2495 1974))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (select-handler/no-breaks . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/private/more-scheme.rkt&gt; 163 2 5402 511))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&gt; 342 33 18779 125))\n  (#f . #(struct:srcloc #&lt;path:/Applications/Racket_v6.10/share/pkgs/web-server-lib/web-server/private/dispatch-server-with-connect-unit.rkt&gt; 131 8 5179 445))\n```\n\n1. What is the warning trying to tell me, and how can I fix it?\n\n2. Note: This seems to be using `log-warning`. It would be nicer if it defined its own logger e.g. `contract` and used `log-contract-warning`?  (That way, it could be silenced without silencing all other `log-warning`s?)"
        }
      ]
    },
    {
      "conversation_id": "153",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tina: that was my passive-aggressive attempt to get people to update their contract combinators to use the more recent interface\nTina: I should move it over to [CODE]\nTina: oh, wait: it seems to already be that way?\nTina: [CODE_BLOCK]\nTina: in racket/contract/private/prop, line 298?\nTina: (in 6.10)\nCorey: Tina Just to confirm, the [CODE] contract would need to change (not something in my code using it)?\nTina: Right\nTina: (well, the logger isn’t using [CODE] as far as I can tell, so maybe something needs to change elsewhere too?)\nCorey: I'll see if I can figure out part of it.\nCorey: (I recently added a [CODE] mode/window to racket-mode, and want to make sure it's not some issue on that end (although atm I don't see how it could be; just make sure); and will share whatever I learn)\nTina: Thanks!!\nTina: oh, and I see that was the wrong log call. This is the right one, I think?\nTina: [CODE_BLOCK]\nTina: line 816 of racket/contract/private/gut\nTina: s\nCorey: I think what's confusing me is that [CODE] normally prepends the text [CODE] -- the logger name -- to the message.\nCorey: But I don't see [CODE] starting the message.\nCorey: So I assumed it was the generic logger.\nCorey: It's _not_ some silly bug wrt the [CODE] in the logger name. This works: [CODE_BLOCK]\nCorey: Huh.\nCorey: OK so 1. I'm totally stumped why [CODE] doesn't start the log output and identify the logger. It would be good to figure that out. 2. Meanwhile, knowing that the logger name is [CODE], I can crank the log receiver up from [CODE] to [CODE] for that logger, to silence that output (in situations where that information isn't relevant).\nCorey: Tina thanks!\nCorey: Sorry, what? Do you mean should the logger topic (a.k.a. logger name) be relevant in some situations, or, do you mean our discussion here on Slack :slightly_smiling_face:, or something else?\nTina: Corey I mean that I would have thought you could filter based on the topic and not based on the characters that appear before the [CODE] in the logged message.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 25,
        "duration_minutes": 141.08,
        "contains_question": true,
        "action_keywords": [
          "build",
          "discuss",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Tina",
          "timestamp": "2017-08-17T15:37:05.000393",
          "text": "that was my passive-aggressive attempt to get people to update their contract combinators to use the more recent interface"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T15:37:21.000337",
          "text": "I should move it over to `log-contract-warning`"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T15:39:55.000204",
          "text": "oh, wait: it seems to already be that way?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T15:41:20.000533",
          "text": "```\n      (log-racket/contract-info\n       \"no late-neg-projection passed to ~s~a\"\n       proc-name\n       (build-context))\n```"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T15:41:35.000351",
          "text": "in racket/contract/private/prop, line 298?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T15:41:38.000594",
          "text": "(in 6.10)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:01:37.000169",
          "text": "<@Tina> Just to confirm, the `xexpr/c` contract would need to change (not something in my code using it)?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:02:01.000378",
          "text": "Right"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:02:24.000047",
          "text": "(well, the logger isn’t using `log-warning` as far as I can tell, so maybe something needs to change elsewhere too?)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:02:49.000628",
          "text": "I'll see if I can figure out part of it."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:03:59.000029",
          "text": "(I recently added a `*Racket Logger*` mode/window to racket-mode, and want to make sure it's not some issue on that end (although atm I don't see how it could be; just make sure); and will share whatever I learn)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:10:34.000591",
          "text": "Thanks!!"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:11:30.000522",
          "text": "oh, and I see that was the wrong log call. This is the right one, I think?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:11:32.000372",
          "text": "```\n     (log-racket/contract-warning\n      \"building projection of contract ~s for~a\"\n      ctc\n      (build-context))\n```"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:11:44.000029",
          "text": "line 816 of racket/contract/private/gut"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:11:44.000373",
          "text": "s"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:20:31.000137",
          "text": "I think what's confusing me is that `(define-logger foo)` normally prepends the text `foo:` -- the logger name -- to the message."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:20:40.000316",
          "text": "But I don't see `\"racket/contract:\"` starting the message."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:20:48.000522",
          "text": "So I assumed it was the generic logger."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:23:33.000171",
          "text": "It's _not_ some silly bug wrt the `/` in the logger name. This works:\n```\n#lang racket/base\n\n(define-logger foo)\n(define-logger foo/bar)\n\n(log-foo-fatal \"hi I'm foo\")\n(log-foo/bar-fatal \"hi I'm foo/bar\")\n\n;; Logger output\n;;  [  fatal] foo: hi I'm foo\n;;  [  fatal] foo/bar: hi I'm foo/bar\n```"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:23:53.000060",
          "text": "Huh."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:40:18.000293",
          "text": "OK so\n1. I'm totally stumped why `\"racket/contract:\"` doesn't start the log output and identify the logger. It would be good to figure that out.\n2. Meanwhile, knowing that the logger name is `racket/contract`, I can crank the log receiver up from `warning` to `fatal` for that logger, to silence that output (in situations where that information isn't relevant)."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:40:54.000195",
          "text": "<@Tina> thanks!"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-17T16:58:11.000322",
          "text": "Sorry, what? Do you mean should the logger topic (a.k.a. logger name) be relevant in some situations, or, do you mean our discussion here on Slack :slightly_smiling_face:, or something else?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-17T17:58:10.000357",
          "text": "<@Corey> I mean that I would have thought you could filter based on the topic and not based on the characters that appear before the `:` in the logged message."
        }
      ]
    },
    {
      "conversation_id": "154",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tina: Should the topic be relevant here?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Tina",
          "timestamp": "2017-08-17T16:41:56.000307",
          "text": "Should the topic be relevant here?"
        }
      ]
    },
    {
      "conversation_id": "155",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Rosalee This seems relevant to your interests: <[URL]\nRosalee: Latarsha Oh cool, thanks.\nRosalee: Would it make sense to have a [CODE] field in [CODE], like [CODE], but for testing.\nRosalee: Since there are some packages I want to instll, but they’re only really needed for testing.\nChantelle: Rosalee Test only packages are already build deps, or did you mean you want something to not be a build dep?\nRosalee: Chantelle Fair. It just seems to me that having a separate test-dep list and doc-dep would make sense.\nRosalee: Because I could be installing in a context where I don’t care about installing the tests. And right now (as far as I can tell), the only way to do that is to make multiple packages.\nRosalee: The whole foo foo-lib foo-doc foo-test foo-extra thing.\nRosalee: (Which I guess makes sense for some dependency resolution, but still feels clunky to me in this simple case.)\nJacob: Thank you for the technical terms I can now look up!\nClorinda: Stephan match is the most commonly used pattern matcher in Racket -- unfortunately Typed Racket cannot reason about its coverage, since it can expand into quite complex core forms. there was recently a discussion (<[URL] about getting some straightforward coverage checking working. if you're interested in tinkering with your own approach solution, I threw together something along that line a while ago (<[URL] but it's definitely not a polished, drop in solution (i.e. it works but is limited and does not work with arbitrary types, you have to define them similar to defining an algebraic datatype in a standard statically typed functional language)",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 11,
        "duration_minutes": 1022.27,
        "contains_question": true,
        "action_keywords": [
          "build",
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Clorinda",
          "Jacob",
          "Latarsha",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-17T17:17:18.000431",
          "text": "<@Rosalee> This seems relevant to your interests: <https://internals.rust-lang.org/t/pre-rfc-support-declaring-varargs-functions-and-processing-a-va-list/5772>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-17T17:18:55.000220",
          "text": "<@Latarsha> Oh cool, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-17T23:53:46.000014",
          "text": "Would it make sense to have a `test-deps` field in `#lang info`, like `build-deps`, but for testing."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-17T23:54:07.000187",
          "text": "Since there are some packages I want to instll, but they’re only really needed for testing."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T00:39:33.000071",
          "text": "<@Rosalee> Test only packages are already build deps, or did you mean you want something to not be a build dep?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T09:17:36.000043",
          "text": "<@Chantelle> Fair. It just seems to me that having a separate test-dep list and doc-dep would make sense."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T09:18:22.000301",
          "text": "Because I could be installing in a context where I don’t care about installing the tests. And right now (as far as I can tell), the only way to do that is to make multiple packages."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T09:18:47.000071",
          "text": "The whole foo foo-lib foo-doc foo-test foo-extra thing."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T09:19:13.000295",
          "text": "(Which I guess makes sense for some dependency resolution, but still feels clunky to me in this simple case.)"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-18T09:28:37.000512",
          "text": "Thank you for the technical terms I can now look up!"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-08-18T10:19:34.000021",
          "text": "<@Stephan> match is the most commonly used pattern matcher in Racket -- unfortunately Typed Racket cannot reason about its coverage, since it can expand into quite complex core forms. there was recently a discussion (<https://github.com/racket/typed-racket/issues/594>) about getting some straightforward coverage checking working. if you're interested in tinkering with your own approach solution, I threw together something along that line a while ago (<https://github.com/pnwamk/datatype>), but it's definitely not a polished, drop in solution (i.e. it works but is limited and does not work with arbitrary types, you have to define them similar to defining an algebraic datatype in a standard statically typed functional language)"
        }
      ]
    },
    {
      "conversation_id": "156",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Jacob if you do switch back to emacs, what you want is jump registers… there’s also bookmarks (temporary or permanent). There’s also C-x C-SPC to jump to your last edit… um. lots. :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-17T17:19:27.000065",
          "text": "<@Jacob> if you do switch back to emacs, what you want is jump registers… there’s also bookmarks (temporary or permanent). There’s also C-x C-SPC to jump to your last edit… um. lots. :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "157",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo Based on my experimentation, it doesn’t seem like [CODE] from [CODE] requires a [CODE] submodule of the language provided to the evaluator. Is this behavior intentional, or would it be useful to add that?\nVincenzo: Kimbery I think it would be useful to add that. I'm not certain of the compatibility implications (and there wouldn't be any if we had thought to add that when submodules like [CODE] were introduced), but it may be ok.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 56.3,
        "contains_question": true,
        "action_keywords": [
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-17T19:57:11.000221",
          "text": "<@Vincenzo> Based on my experimentation, it doesn’t seem like `make-evaluator` from `racket/sandbox` requires a `configure-runtime` submodule of the language provided to the evaluator. Is this behavior intentional, or would it be useful to add that?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-17T20:53:29.000011",
          "text": "<@Kimbery> I think it would be useful to add that. I'm not certain of the compatibility implications (and there wouldn't be any if we had thought to add that when submodules like `configure-runtime` were introduced), but it may be ok."
        }
      ]
    },
    {
      "conversation_id": "158",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stephan: I have a Typed Racket question, if anyone could help I'd appreciate it. I'd like to have a pattern matcher with exhaustion checking, like in ML, so I can be confident that I'm not omitting any cases. Does anyone know of such a pattern-matching macro?\nStephan: If not, would anyone have pointers for how to get to the type information I'd need, from a macro, so I could make a go at writing something to scratch my own itch?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 1.37,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Stephan"
        ]
      },
      "timeline": [
        {
          "user": "Stephan",
          "timestamp": "2017-08-18T06:51:45.000230",
          "text": "I have a Typed Racket question, if anyone could help I'd appreciate it. I'd like to have a pattern matcher with exhaustion checking, like in ML, so I can be confident that I'm not omitting any cases. Does anyone know of such a pattern-matching macro?"
        },
        {
          "user": "Stephan",
          "timestamp": "2017-08-18T06:53:07.000296",
          "text": "If not, would anyone have pointers for how to get to the type information I'd need, from a macro, so I could make a go at writing something to scratch my own itch?"
        }
      ]
    },
    {
      "conversation_id": "159",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Clorinda: there may be some other approaches people have put together as well, I'm just not familiar with what they are off the top of my head",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clorinda"
        ]
      },
      "timeline": [
        {
          "user": "Clorinda",
          "timestamp": "2017-08-18T10:26:01.000334",
          "text": "there may be some other approaches people have put together as well, I'm just not familiar with what they are off the top of my head"
        }
      ]
    },
    {
      "conversation_id": "160",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Willian Eun Tina Have you had font issues with your submission?\nRosalee: I seem to have tracked it down to [CODE]\nRosalee: Which really messes up the lower case [CODE].\nTina: That command chooses a font\nTina: Like the whole font, I believe\nRosalee: Yup. But [CODE] seems to put it in there.\nRosalee: At least as far as I can (currently) tell\nRosalee: Would it makes sense to remove that?\nTina: Rosalee scribble/acmart should not generate Tex code like that I agree. That should be in the cls file.\nTina: But I am confused. If that had any effect it should have set the font to the standard latex roman font. And I don't see that in our paper\nRosalee: That….is a very good point. :confused:\nRosalee: Like, it certainly does look different than the standard computer modern font. But there are also similarities to times. SO I honestly have no idea.\nRosalee: Sure, that makes sense.\nRosalee: But I can still see a case where I want to build the docs, but I don’t want to run the tests.\nTina: Removal of that line seems wise\nRosalee: Or I want to run the tests, but don’t care about building the docs.\nRosalee: Ya, that’s the only way I was able to get rid of it. Unfortunately the line is in the main scribble.tex style file. So its not just as simple as removing it from acmart. :disappointed:\nChantelle: You can get the pre-built docs without tests currently (--binary vs --binary-lib) but yeah, there's no way to get runnable tests without building docs\nChantelle: Maybe a different kind of installation that was like [CODE] but included compiled test modules?\nChantelle: building docs without running tests could just be running [CODE] right?\nRosalee: ‘You can get the pre-built docs without tests’ Yes, but say I don’t want the pre-built docs, I want to build them myself.\nRosalee: Say I’m making my own language that has its own theme for docs. And I’m using that library. I want to provide the docs for the library in the new format, which means getting the source, but I don’t care about building the tests.\nRosalee: If that makes any sense anyway.\nRosalee: Oh ya, building docs without building tests is easy, same as building tests without docs.\nRosalee: The problem is just with dependency resolution.\nRosalee: As the two are tied together.\nChantelle: How does making scribble docs with custom themes work anyway?\nRosalee: Uhh…depends on what you want to change.\nRosalee: The easiest thing is to just change the css file.\nRosalee: (Which honestly wouldn’t really require getting the source.)\nRosalee: The other way is to take the [CODE] structure scribble files provide, and munge it the way you want.\nRosalee: IIRC, frog does the former.\nChantelle: What about if you want only docs for certain packages to look different? Like say we wanted all docs for Typed Racket packages (including libraries people wrote providing things for TR) to have a different visual theme of some sort\nRosalee: That’s easy if you have the source. Just change the style the doc uses.\nRosalee: (AKA, point the doc to its own css file.)\nChantelle: ah so you're referring to changing all docs globally for some set of packages to use a new style as a *consumer* of those packages, not an author of them? like how the <[URL] sets the logo for all docs?\nChantelle: I didn't catch that, my bad",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 37,
        "duration_minutes": 369.58,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Rosalee",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T11:01:08.000264",
          "text": "<@Willian> <@Eun> <@Tina> Have you had font issues with your submission?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T11:01:19.000309",
          "text": "I seem to have tracked it down to `\\renewcommand{\\rmdefault}{ptm}`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T11:01:29.000159",
          "text": "Which really messes up the lower case `g`."
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-18T11:02:47.000056",
          "text": "That command chooses a font"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-18T11:02:59.000102",
          "text": "Like the whole font, I believe"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T11:04:08.000327",
          "text": "Yup. But `scribble/acmart` seems to put it in there."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T11:04:21.000703",
          "text": "At least as far as I can (currently) tell"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T11:04:31.000467",
          "text": "Would it makes sense to remove that?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-18T12:39:52.000114",
          "text": "<@Rosalee> scribble/acmart should not generate Tex code like that I agree. That should be in the cls file. "
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-18T12:40:45.000354",
          "text": "But I am confused. If that had any effect it should have set the font to the standard latex roman font. And I don't see that in our paper"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T13:24:43.000244",
          "text": "That….is a very good point. :confused:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T13:25:56.000375",
          "text": "Like, it certainly does look different than the standard computer modern font. But there are also similarities to times. SO I honestly have no idea."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T13:26:28.000180",
          "text": "Sure, that makes sense."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T13:26:48.000411",
          "text": "But I can still see a case where I want to build the docs, but I don’t want to run the tests."
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-18T13:26:50.000199",
          "text": "Removal of that line seems wise"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T13:26:58.000046",
          "text": "Or I want to run the tests, but don’t care about building the docs."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T13:27:52.000280",
          "text": "Ya, that’s the only way I was able to get rid of it. Unfortunately the line is in the main scribble.tex style file. So its not just as simple as removing it from acmart. :disappointed:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T13:39:02.000278",
          "text": "You can get the pre-built docs without tests currently (--binary vs --binary-lib) but yeah, there's no way to get runnable tests without building docs"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T13:39:27.000124",
          "text": "Maybe a different kind of installation that was like `--binary` but included compiled test modules?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T13:39:45.000356",
          "text": "building docs without running tests could just be running `raco setup` right?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T14:14:23.000145",
          "text": "‘You can get the pre-built docs without tests’ Yes, but say I don’t want the pre-built docs, I want to build them myself."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T14:15:22.000048",
          "text": "Say I’m making my own language that has its own theme for docs. And I’m using that library. I want to provide the docs for the library in the new format, which means getting the source, but I don’t care about building the tests."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T14:15:25.000545",
          "text": "If that makes any sense anyway."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T14:16:05.000604",
          "text": "Oh ya, building docs without building tests is easy, same as building tests without docs."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T14:16:13.000066",
          "text": "The problem is just with dependency resolution."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T14:16:16.000054",
          "text": "As the two are tied together."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T14:51:50.000032",
          "text": "How does making scribble docs with custom themes work anyway?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T16:05:18.000423",
          "text": "Uhh…depends on what you want to change."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T16:05:28.000349",
          "text": "The easiest thing is to just change the css file."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T16:05:37.000269",
          "text": "(Which honestly wouldn’t really require getting the source.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T16:05:59.000009",
          "text": "The other way is to take the `doc` structure scribble files provide, and munge it the way you want."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T16:06:07.000372",
          "text": "IIRC, frog does  the former."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T16:11:09.000176",
          "text": "What about if you want only docs for certain packages to look different? Like say we wanted all docs for Typed Racket packages (including libraries people wrote providing things for TR) to have a different visual theme of some sort"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T17:09:16.000038",
          "text": "That’s easy if you have the source. Just change the style the doc uses."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-18T17:09:25.000260",
          "text": "(AKA, point the doc to its own css file.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T17:10:29.000103",
          "text": "ah so you're referring to changing all docs globally for some set of packages to use a new style as a *consumer* of those packages, not an author of them? like how the <http://docs.racket-lang.org|docs.racket-lang.org> sets the logo for all docs?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T17:10:43.000277",
          "text": "I didn't catch that, my bad"
        }
      ]
    },
    {
      "conversation_id": "161",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tina: Maybe it just messed up the state in some more subtle way?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Tina",
          "timestamp": "2017-08-18T12:45:10.000236",
          "text": "Maybe it just messed up the state in some more subtle way?"
        }
      ]
    },
    {
      "conversation_id": "162",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: I think binary installs from the build server let you skip installing build deps",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-18T13:06:57.000192",
          "text": "I think binary installs from the build server let you skip installing build deps"
        }
      ]
    },
    {
      "conversation_id": "163",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stephan: Clorinda Thanks for the pointers. I'd already built myself a datatype macro whose surface syntax looks pretty much exactly like your define-datatype; I'm interested to check out your type-case. Giving the type explicitly isn't really a problem, but I'm curious if it would be possible to determine the type of the first form, since Typed Racket should know it (although maybe at the wrong time?).",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Stephan"
        ]
      },
      "timeline": [
        {
          "user": "Stephan",
          "timestamp": "2017-08-19T09:05:33.000048",
          "text": "<@Clorinda> Thanks for the pointers. I'd already built myself a datatype macro whose surface syntax looks pretty much exactly like your define-datatype; I'm interested to check out your type-case. Giving the type explicitly isn't really a problem, but I'm curious if it would be possible to determine the type of the first form, since Typed Racket should know it (although maybe at the wrong time?)."
        }
      ]
    },
    {
      "conversation_id": "164",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Yup, that’s exactly what I’m talking about. :slightly_smiling_face:\nRosalee: Vincenzo I want to double check with you as the docs aren’t 100% clear. When I allocate a cstruct using its make-&lt;id&gt; allocator, the result is still tracked by the GC, yes?\nVincenzo: yes\nRosalee: Okay. So it is then not safe to hand a pointer to it to a C function that then takes ownership of it?\nVincenzo: Correct.\nRosalee: In which case it looks like the only way to make one is to: A. call malloc explicitly in raw mode, and manually set the fields.\nRosalee: Okay cool, thanks you.\nVincenzo: You can supply an alternative [CODE] mode with [CODE] if you always want to allocate as, say, [CODE]\nVincenzo: Otherwise, yes, use [CODE], etc..\nRosalee: okay cool, that makes sense.\nRosalee: Thank you\nRosalee: Vincenzo Also, I presume list-&gt;cblock allocates the block with atomic?\nVincenzo: That one does seem inadequately documented. I see that the implementation uses [CODE] with the given type, so that's not always atomic.\nRosalee: Interesting, okay.\nRosalee: Thank you\nRosalee: Vincenzo Its more that I wanted to hand it off to a c function.\nRosalee: But it looks like I’ll have to keep a copy around on the Racket side until I know its safe to free it.\nRosalee: Does anyone know why scribble would print out a [CODE] as the result of an expression in an examples block?\nRosalee: When I run the same example in a repl, I get the correct output.\nLatarsha: Rosalee I think that means it's unprintable in some fashion\nRosalee: Latarsha That would make sense, except that it still shows up in the repl just fine.\nRosalee: I did add a prop:convertible property, that might be doing it….\nVincenzo: Rosalee Yes, it looks like the base renderer prints \"???\" for any convertible (where convertible values not recognized by the HTML renderer fall through to the base renderer). Maybe that's a bad idea in the base renderer.\nRosalee: Vincenzo Mmmm…maybe. Given the [CODE] interface I don’t think we can do much better though.\nRosalee: It probably should be documented somewhere though.\nRosalee: Vincenzo Although in this case, looking, it looks like assuming I can convert it into an image is bad.\nRosalee: Like, I can convert it into a video, but I would honestly just rather it print out its type like in a repl: #&lt;producer&gt;\nRosalee: Vincenzo Mmm…looking at the docs, it actually says: &gt; If pretty-print? is true, the sandbox’s printer is set to pretty-print-handler. In that case, values that are convertible in the sense of convertible? are printed using write-special,\nRosalee: However, when I call write-special directly from within drracket, it shows up as you would expect:\nRosalee: [CODE_BLOCK]\nVincenzo: [CODE] means that rendering is up to the port; Scribble doesn't use DrRacket's [CODE]-based port\nRosalee: AH\nRosalee: okay\nRosalee: In that case, if I turn off [CODE] when defining the evaluator, will the text no longer be formatted in a nicely indented way?\nRosalee: (I say that because it would make sense to have a middle ground here, where you want the nice indentation, but not the auto-conversion.)\nVincenzo: You could turn off [CODE], but I think adjusting the base renderer is more likely the right change\nRosalee: Fair. It also looks like it still tries to convert it even when pretty-print? is set to [CODE]. :disappointed:\nRosalee: So, when you say adjust the base renderer, do you mean submitting a PR?\nRosalee: Or just for the documentation for one package?\nVincenzo: I'm looking into the right change.\nRosalee: Okay cool, thanks.\nVincenzo: Rosalee Setting [CODE] to [CODE] has no effect because the default operation–as long as [CODE] and [CODE] are not changed–is to take the result value and typeset it with [CODE]\nRosalee: That makes sense.\nVincenzo: Rosalee Change pushed\nRosalee: Vincenzo cool, thank. checking them out now\nRosalee: Vincenzo Also, just to make sure, the package server builds the docs with the latest stable version of racket?\nVincenzo: No, <[URL] is built with the current release\nRosalee: Err…ya, okay.\nRosalee: Basically 6.10, until the next version comes out.\nRosalee: (As I understand it anyway)\nVincenzo: Sorry – I misread what you wrote. \"latest stable version\" is a reasonable synonym for \"current release\"!\nRosalee: No worries.\nRosalee: Just wondering how long the [CODE] will stay on the package server’s docs. :slightly_smiling_face:\nRosalee: Also, fyi, it looks like packages with conflicts don’t show up in the search results.\nRosalee: I suspect that’s probably because the package server doesn’t know which one to pick.\nVincenzo: right\nRosalee: Is there any way to tell the package server which one it should choose as the primary package?\nRosalee: (Also cool. After compiling the new build it looks like the base renderer is working as expected, thanks. :slightly_smiling_face: )",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 58,
        "duration_minutes": 3077.53,
        "contains_question": true,
        "action_keywords": [
          "build",
          "implement",
          "should",
          "submit",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T09:53:06.000070",
          "text": "Yup, that’s exactly what I’m talking about. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:41:40.000039",
          "text": "<@Vincenzo> I want to double check with you as the docs aren’t 100% clear. When I allocate a cstruct using its make-&lt;id&gt; allocator, the result is still tracked by the GC, yes?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-19T20:41:51.000028",
          "text": "yes"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:42:16.000060",
          "text": "Okay. So it is then not safe to hand a pointer to it to a C function that then takes ownership of it?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-19T20:42:38.000003",
          "text": "Correct."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:42:56.000030",
          "text": "In which case it looks like the only way to make one is to: A. call malloc explicitly in raw mode, and manually set the fields."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:43:02.000016",
          "text": "Okay cool, thanks you."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-19T20:43:32.000044",
          "text": "You can supply an alternative `malloc` mode with `#:malloc-mode` if you always want to allocate as, say, `'raw`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-19T20:43:52.000044",
          "text": "Otherwise, yes, use `malloc`, etc.."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:44:00.000043",
          "text": "okay cool, that makes sense."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:44:02.000002",
          "text": "Thank you"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:50:00.000023",
          "text": "<@Vincenzo> Also, I presume list-&gt;cblock allocates the block with atomic?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-19T20:53:51.000070",
          "text": "That one does seem inadequately documented. I see that the implementation uses `malloc` with the given type, so that's not always atomic."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:56:25.000032",
          "text": "Interesting, okay."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T20:56:31.000001",
          "text": "Thank you"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T21:02:06.000079",
          "text": "<@Vincenzo> Its more that I wanted to hand it off to a c function."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-19T21:02:29.000035",
          "text": "But it looks like I’ll have to keep a copy around on the Racket side until I know its safe to free it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:34:25.000480",
          "text": "Does anyone know why scribble would print out a `???` as the result of an expression in an examples block?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:34:36.000073",
          "text": "When I run the same example in a repl, I get the correct output."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-21T09:35:28.000088",
          "text": "<@Rosalee> I think that means it's unprintable in some fashion"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:36:31.000265",
          "text": "<@Latarsha> That would make sense, except that it still shows up in the repl just fine."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:37:04.000075",
          "text": "I did add a prop:convertible property, that might be doing it…."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T09:40:16.000008",
          "text": "<@Rosalee> Yes, it looks like the base renderer prints \"???\" for any convertible (where convertible values not recognized by the HTML renderer fall through to the base renderer). Maybe that's a bad idea in the base renderer."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:41:21.000282",
          "text": "<@Vincenzo> Mmmm…maybe. Given the `convertible?` interface I don’t think we can do much better though."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:41:36.000064",
          "text": "It probably should be documented somewhere though."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:42:50.000050",
          "text": "<@Vincenzo> Although in this case, looking, it looks like assuming I can convert it into an image is bad."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:43:37.000137",
          "text": "Like, I can convert it into a video, but I would honestly just rather it print out its type like in a repl: #&lt;producer&gt;"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:49:11.000331",
          "text": "<@Vincenzo> Mmm…looking at the docs, it actually says:\n&gt; If pretty-print? is true, the sandbox’s printer is set to pretty-print-handler. In that case, values that are convertible in the sense of convertible? are printed using write-special,"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:49:30.000260",
          "text": "However, when I call write-special directly from within drracket, it shows up as you would expect:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:49:43.000072",
          "text": "```\n#lang scratch\n\n(require video/base)\n(define x (clip \"green\"))\n\n(write-special x)\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T09:50:25.000028",
          "text": "`write-special` means that rendering is up to the port; Scribble doesn't use DrRacket's `editor%`-based port"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:50:40.000126",
          "text": "AH"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:50:41.000192",
          "text": "okay"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:51:39.000371",
          "text": "In that case, if I turn off `#:pretty-print?` when defining the evaluator, will the text no longer be formatted in a nicely indented way?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:52:00.000220",
          "text": "(I say that because it would make sense to have a middle ground here, where you want the nice indentation, but not the auto-conversion.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T09:54:46.000081",
          "text": "You could turn off `#:pretty-print?`, but I think adjusting the base renderer is more likely the right change"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:57:52.000186",
          "text": "Fair. It also looks like it still tries to convert it even when pretty-print? is set to `#f`. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:58:06.000605",
          "text": "So, when you say adjust the base renderer, do you mean submitting a PR?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:58:17.000069",
          "text": "Or just for the documentation for one package?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T09:58:18.000661",
          "text": "I'm looking into the right change."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T09:59:24.000197",
          "text": "Okay cool, thanks."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T10:07:48.000289",
          "text": "<@Rosalee> Setting `#:pretty-print?` to `#f` has no effect because the default operation–as long as `current-print` and `print-as-expression` are not changed–is to take the result value and typeset it with `to-element`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T10:09:45.000559",
          "text": "That makes sense."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T10:43:42.000347",
          "text": "<@Rosalee> Change pushed"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T12:44:53.000392",
          "text": "<@Vincenzo> cool, thank. checking them out now"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T12:56:11.000113",
          "text": "<@Vincenzo> Also, just to make sure, the package server builds the docs with the latest stable version of racket?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T12:56:35.000060",
          "text": "No, <http://docs.racket-lang.org|docs.racket-lang.org> is built with the current release"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T12:57:02.000076",
          "text": "Err…ya, okay."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T12:57:16.000211",
          "text": "Basically 6.10, until the next version comes out."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T12:57:19.000598",
          "text": "(As I understand it anyway)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T13:00:03.000465",
          "text": "Sorry – I misread what you wrote. \"latest stable version\" is a reasonable synonym for \"current release\"!"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T13:00:21.000286",
          "text": "No worries."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T13:00:44.000333",
          "text": "Just wondering how long the `???` will stay on the package server’s docs. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T13:01:08.000286",
          "text": "Also, fyi, it looks like packages with conflicts don’t show up in the search results."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T13:01:27.000601",
          "text": "I suspect that’s probably because the package server doesn’t know which one to pick."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T13:03:26.000409",
          "text": "right"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T13:05:24.000346",
          "text": "Is there any way to tell the package server which one it should choose as the primary package?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-21T13:10:38.000303",
          "text": "(Also cool. After compiling the new build it looks like the base renderer is working as expected, thanks. :slightly_smiling_face: )"
        }
      ]
    },
    {
      "conversation_id": "165",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Natosha when running [CODE] on a file of mine, I’m getting an error that looks like this: [CODE_BLOCK]\nKimbery: I am not sure what that means. does that mean anything to you, or should I just open a bug?\nGeorgeanna: I’ve got a demo file to prototype how I want a new hash-lang to be... right now I just want to poke around quickly so I’m using [CODE] and that file does port-&gt;list to just dump everything it saw. It is failing on a line with a single [CODE] in it because it isn’t balanced. Is there another #lang reader (or whatever) that does a looser parse? I just want to prototype the syntax at this point and not get tripped up on racket readerisms…\nKimbery: Georgeanna that is due to [CODE], not [CODE]. [CODE] calls [CODE]. is that really what you want, or do you want [CODE] or something like that?\nGeorgeanna: I’m _currently_ line oriented, but I don’t need to be… I want balanced parens and just about nothing else\nGeorgeanna: I only did [CODE] because it calls [CODE] until exhausted, right?\nKimbery: you could use [CODE], but parameterize [CODE] to [CODE]\nGeorgeanna: interesting… I’ll try that\nKimbery: that would make [CODE] not act as a special character\nGeorgeanna: thanks. that did it. perfect\nGeorgeanna: I’m making a hash-lang for lexers… so I want bare [CODE]s\nNatosha: Kimbery, it means that that macro debugger's parser and the macro expander's instrumentation are out of sync. Yes, please file a bug in the macro-debugger repo.\nKimbery: Natosha opened an issue here <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 13,
        "duration_minutes": 1036.88,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "please",
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Kimbery",
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-21T19:47:13.000112",
          "text": "<@Natosha> when running `raco check-requires` on a file of mine, I’m getting an error that looks like this:\n```\nderivation-parser: error on token #229: &lt;local-value, #&lt;syntax:/Users/alexis/gits/racket/racket/racket/collects/syntax/parse/private/lib.rkt:63:55 -string&gt;&gt;\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-21T19:47:48.000185",
          "text": "I am not sure what that means. does that mean anything to you, or should I just open a bug?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-21T19:48:40.000167",
          "text": "I’ve got a demo file to prototype how I want a new hash-lang to be... right now I just want to poke around quickly so I’m using `#lang reader \"literal.rkt\"` and that file does port-&gt;list to just dump everything it saw. It is failing on a line with a single `|` in it because it isn’t balanced. Is there another #lang reader (or whatever) that does a looser parse? I just want to prototype the syntax at this point and not get tripped up on racket readerisms…"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-21T19:49:59.000153",
          "text": "<@Georgeanna> that is due to `port-&gt;list`, not `reader`. `port-&gt;list` calls `read`. is that really what you want, or do you want `port-&gt;lines` or something like that?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-21T19:50:32.000126",
          "text": "I’m _currently_ line oriented, but I don’t need to be… I want balanced parens and just about nothing else"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-21T19:50:42.000132",
          "text": "I only did `port-&gt;list` because it calls `read` until exhausted, right?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-21T19:51:01.000086",
          "text": "you could use `port-&gt;list`, but parameterize `read-accept-bar-quote` to `#f`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-21T19:51:16.000023",
          "text": "interesting… I’ll try that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-21T19:51:17.000257",
          "text": "that would make `|` not act as a special character"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-21T19:52:09.000036",
          "text": "thanks. that did it. perfect"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-21T19:52:25.000124",
          "text": "I’m making a hash-lang for lexers… so I want bare `|`s"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-08-21T20:43:22.000027",
          "text": "<@Kimbery>, it means that that macro debugger's parser and the macro expander's instrumentation are out of sync. Yes, please file a bug in the macro-debugger repo."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T13:04:06.000020",
          "text": "<@Natosha> opened an issue here <https://github.com/racket/macro-debugger/issues/23>"
        }
      ]
    },
    {
      "conversation_id": "166",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Rosalee The pkg-build service should pay attention to rings to pick among conflicting packages; it doesn't, yet. I'll try to make that improvement sometime soon.\nRosalee: Vincenzo cool, thanks.\nRosalee: BTW, does anyone know of a good way to write tests for DrRacket plugins?\nRosalee: About all I have so far is to keep as many of the smarts as possible out of the plugin, and then just not test the plugin.\nLatarsha: Rosalee There's extensive infrastructrue for testing DrRacket\nRosalee: Latarsha Perhaps I’m looking in the wrong place. Because I’m not seeing anything about that in the DrRacket plugin’s manual: <[URL]\nRosalee: Like, I see stuff about making drracket tools for debugging\nRosalee: And elsewhere I can see tests for the drracket plugin infrastructure.\nRosalee: But I don’t see anything about writing tests for DrRacket plugins.\nRosalee: Chantelle Ya, Asuncion and I had a package going on the catalog. Then DVH added a collection to [CODE] for [CODE], thus conflicting with the existing package (and also being incompatible too. :disappointed: ), so we cleaned it up to make it inline with the existing package (and scribble conventions).\nRosalee: But we wanted to leave the acm package up there because it was still useful in old versions of racket.\nRosalee: Although I am glad DVH merged it into scribble-lib. And to be fair, he did ask if anyone else had done it first. But I didn’t find out about it until it was too late. :slightly_smiling_face:\nChantelle: Rosalee the build server does not seem happy with this arrangement :p\nRosalee: Although I guess the other moral of the story is…check the package server before putting something int he main distro?\nRosalee: Chantelle ha, ya, I guess it would: <[URL]\nRosalee: Hmm…I guess we could just have acmart be a completely empty package.\nRosalee: (In everything but racket 6.8)\nChantelle: version exception pointing to totally different package seems like it could have lots of strange consequences\nChantelle: empty package does seem better to me\nChantelle: (I gotta write stuff like this down for a future doc about good racket package practices)\nRosalee: While I agree, I do kind of think that this could also just be resolved by having a cleaner package system.\nRosalee: (magically cleaner…. I don’t want to put myself on a burning steak….err.design it. :wink: )\nChantelle: no disagreement here\nChantelle: the specific case where package A depends on B and provides module X, then a new version of B also provides X, seems worth taking a look at though\nChantelle: I could see that coming up a lot both by accident and as a result of people deciding that X really belongs in the core and moving it into B from A by choice\nRosalee: Yup\nRosalee: So, right now the best I got is we should use c like conventions…\nRosalee: that is, only provide collections with a unique identifier.\nRosalee: Kind of a sad idea given how nice things like…ya know…scope, is.\nRosalee: But….again….its what we got, and I don’t have a better idea.\nRosalee: (Nor want to spend the energy to come up with one right now.)\nChantelle: 1) versioning packages and 2) extending the \"version exception\" idea to packages other than \"main-distribution\" seems like a decent way to do it\nRosalee: That solves a lot of problems, but not all of them.\nRosalee: Because a package can have multiple collections, and the collections are cross cutting through multiple packages, it also should have a unique collection name.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 34,
        "duration_minutes": 1223.9,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "complete",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-21T20:49:21.000046",
          "text": "<@Rosalee> The pkg-build service should pay attention to rings to pick among conflicting packages; it doesn't, yet. I'll try to make that improvement sometime soon."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T13:41:20.000052",
          "text": "<@Vincenzo> cool, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T13:41:30.000163",
          "text": "BTW, does anyone know of a good way to write tests for DrRacket plugins?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T13:41:49.000284",
          "text": "About all I have so far is to keep as many of the smarts as possible out of the plugin, and then just not test the plugin."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-22T14:22:01.000300",
          "text": "<@Rosalee> There's extensive infrastructrue for testing DrRacket"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T14:37:14.000080",
          "text": "<@Latarsha> Perhaps I’m looking in the wrong place. Because I’m not seeing anything about that in the DrRacket plugin’s manual: <http://docs.racket-lang.org/tools/index.html?q=drracket%3Atool%40>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T14:37:38.000170",
          "text": "Like, I see stuff about making drracket tools for debugging"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T14:37:55.000488",
          "text": "And elsewhere I can see tests for the drracket plugin infrastructure."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T14:38:06.001145",
          "text": "But I don’t see anything about writing tests for DrRacket plugins."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:16:44.000637",
          "text": "<@Chantelle> Ya, <@Asuncion> and I had a package going on the catalog. Then DVH added a collection to `scribble-lib` for `scribble/acmart`, thus conflicting with the existing package (and also being incompatible too. :disappointed: ), so we cleaned it up to make it inline with the existing package (and scribble conventions)."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:17:12.000577",
          "text": "But we wanted to leave the acm package up there because it was still useful in old versions of racket."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:17:58.000547",
          "text": "Although I am glad DVH merged it into scribble-lib. And to be fair, he did ask if anyone else had done it first. But I didn’t find out about it until it was too late. :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:18:22.000472",
          "text": "<@Rosalee> the build server does not seem happy with this arrangement :p"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:18:27.000390",
          "text": "Although I guess the other moral of the story is…check the package server before putting something int he main distro?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:19:14.000261",
          "text": "<@Chantelle> ha, ya, I guess it would: <http://pkg-build.racket-lang.org/server/built/fail/acmart.txt>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:19:43.000263",
          "text": "Hmm…I guess we could just have acmart be a completely empty package."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:19:52.000215",
          "text": "(In everything but racket 6.8)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:20:21.000449",
          "text": "version exception pointing to totally different package seems like it could have lots of strange consequences"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:20:32.000173",
          "text": "empty package does seem better to me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:21:03.000073",
          "text": "(I gotta write stuff like this down for a future doc about good racket package practices)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:22:09.000392",
          "text": "While I agree, I do kind of think that this could also just be resolved by having a cleaner package system."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:22:33.000433",
          "text": "(magically cleaner…. I don’t want to put myself on a burning steak….err.design it. :wink: )"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:22:57.000540",
          "text": "no disagreement here"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:23:35.000199",
          "text": "the specific case where package A depends on B and provides module X, then a new version of B also provides X, seems worth taking a look at though"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:24:35.000101",
          "text": "I could see that coming up a lot both by accident and as a result of people deciding that X really belongs in the core and moving it into B from A by choice"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:28:28.000359",
          "text": "Yup"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:28:43.000111",
          "text": "So, right now the best I got is we should use c like conventions…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:28:58.000049",
          "text": "that is, only provide collections with a unique identifier."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:29:26.000424",
          "text": "Kind of a sad idea given how nice things like…ya know…scope, is."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:29:36.000113",
          "text": "But….again….its what we got, and I don’t have a better idea."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T16:29:43.000023",
          "text": "(Nor want to spend the energy to come up with one right now.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T16:30:32.000364",
          "text": "1) versioning packages and 2) extending the \"version exception\" idea to packages other than \"main-distribution\" seems like a decent way to do it"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T17:12:40.000158",
          "text": "That solves a lot of problems,  but not all of them."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T17:13:15.000241",
          "text": "Because a package can have multiple collections, and the collections are cross cutting through multiple packages, it also should have a unique collection name."
        }
      ]
    },
    {
      "conversation_id": "167",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: what's up with the [CODE] package? it has a version exception pointing to [CODE]?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-22T15:28:45.000145",
          "text": "what's up with the `acmart` package? it has a version exception pointing to `scribble-lib`?"
        }
      ]
    },
    {
      "conversation_id": "168",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: I don't think you need to use a unique identifier\nLatarsha: Racket is small enough that just \"avoid conflicts\" seems like enough at the moment",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.22,
        "contains_question": false,
        "action_keywords": [
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-22T18:12:12.000208",
          "text": "I don't think you need to use a unique identifier"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-22T18:12:25.000192",
          "text": "Racket is small enough that just \"avoid conflicts\" seems like enough at the moment"
        }
      ]
    },
    {
      "conversation_id": "169",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Haskell is much bigger, and it mostly avoids conflicts despite the hierarchal namespace. However, GHC has a much nicer story around collisions (it knows about some low-level notion of packages, so you can alias or hide packages as necessary, and you can also specify the package when importing if absolutely necessary).\nKimbery: Vincenzo Tina In my language, [CODE] is a valid identifier. Is there any way to get [EMAIL] to typeset the [CODE] without the vertical bars? Or will I need to either make a custom version of the [CODE]/[CODE]/etc. forms or use [CODE] to escape to [EMAIL] It would be nice to not have to reimplement the whole universe of typesetting functions, including the [CODE] forms.\nTina: Reimplementing the entire universe does sound daunting.\nTina: racketidfont sounds like a good start.\nTina: Sorry I don't have a better answer\nRosalee: Tina Don’t worry. Matthew will have a re-implementation by monday. :stuck_out_tongue:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 26.15,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Rosalee",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T18:31:09.000204",
          "text": "Haskell is much bigger, and it mostly avoids conflicts despite the hierarchal namespace. However, GHC has a much nicer story around collisions (it knows about some low-level notion of packages, so you can alias or hide packages as necessary, and you can also specify the package when importing if absolutely necessary)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T18:37:28.000219",
          "text": "<@Vincenzo> <@Tina> In my language, `.` is a valid identifier. Is there any way to get `@racket[|.|]` to typeset the `.` without the vertical bars? Or will I need to either make a custom version of the `racket`/`racketblock`/etc. forms or use `unsyntax` to escape to `@racketidfont{.}`? It would be nice to not have to reimplement the whole universe of typesetting functions, including the `scribble/example` forms."
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-22T18:47:35.000034",
          "text": "Reimplementing the entire universe does sound daunting. "
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-22T18:48:15.000268",
          "text": "racketidfont sounds like a good start. "
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-22T18:48:36.000049",
          "text": "Sorry I don't have a better answer "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-22T18:57:18.000192",
          "text": "<@Tina> Don’t worry. Matthew will have a re-implementation by monday. :stuck_out_tongue:"
        }
      ]
    },
    {
      "conversation_id": "170",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: [CODE] works okay, but it doesn’t work with [CODE] without [CODE], which is unfortunate.\nVincenzo: Kimbery Does something like this help? [CODE_BLOCK]\nKimbery: Vincenzo That gets me a lot closer, thanks! The issue with that is the resulting [CODE] is not hyperlinked to the definition of [CODE]. I’m looking at the [CODE] docs, but it doesn’t seem to have a way to use a different element for the content but keep the hyperlink.\nKimbery: It seems there’s probably a more indirect way to get the link target and generate the necessary link element, but I don’t know what it is.\nVincenzo: [CODE]?\nKimbery: Aha! That should work; I was looking in the wrong section of the docs.\nKimbery: Yes, that works. Thanks for your help.\nKimbery: Vincenzo Relatedly, is there any way to override how [EMAIL] ....][CODE].[CODE].`?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 72.93,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T19:09:37.000106",
          "text": "`racketidfont` works okay, but it doesn’t work with `scribble/example` without `eval:alts`, which is unfortunate."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-22T19:40:24.000060",
          "text": "<@Kimbery> Does something like this help?\n```\n#lang scribble/manual\n@(require scribble/racket\n          (for-syntax racket/base))\n\n@(let-syntax ([|.| (make-element-id-transformer\n                    (lambda (stx)\n                     #'(racketidfont \".\")))])\n  @scheme[|.|])\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T20:02:12.000072",
          "text": "<@Vincenzo> That gets me a lot closer, thanks! The issue with that is the resulting `.` is not hyperlinked to the definition of `.`. I’m looking at the `to-element` docs, but it doesn’t seem to have a way to use a different element for the content but keep the hyperlink."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T20:02:59.000086",
          "text": "It seems there’s probably a more indirect way to get the link target and generate the necessary link element, but I don’t know what it is."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-22T20:06:08.000004",
          "text": "`racketlink`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T20:08:15.000100",
          "text": "Aha! That should work; I was looking in the wrong section of the docs."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T20:11:54.000035",
          "text": "Yes, that works. Thanks for your help."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-22T20:22:33.000116",
          "text": "<@Vincenzo> Relatedly, is there any way to override how `@defthing[|.| ....]` renders `.`? Or do I just need to roll my own definition form for defining `.`?"
        }
      ]
    },
    {
      "conversation_id": "171",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: I don't see a good way to adjust [CODE]\nLatarsha: hashim: it's fine to ask here\nRosalee: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 1122.53,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-22T21:19:55.000076",
          "text": "I don't see a good way to adjust `defthing`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T13:48:46.000130",
          "text": "hashim: it's fine to ask here"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T16:02:27.000577",
          "text": "<http://pasterack.org/pastes/6144>"
        }
      ]
    },
    {
      "conversation_id": "172",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Danelle: Hi! I’m new to Racket and wanted to use it in a Calculus course starting september. Totally unrelated but I’m currently at a summer course (<[URL] and wanted to make Racket bindings to the thing used here (<[URL] using [CODE]. Now the question: what is the right way to connect to a [CODE] like this: [CODE_BLOCK] where [CODE] is basically a string. The problem is [CODE] which is expected to be dynamically created and to have [CODE] elements. Thanks in advance!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Danelle"
        ]
      },
      "timeline": [
        {
          "user": "Danelle",
          "timestamp": "2017-08-23T07:55:45.000112",
          "text": "Hi! I’m new to Racket and wanted to use it in a Calculus course starting september.\nTotally unrelated but I’m currently at a summer course (<http://school.grammaticalframework.org/2017>) and wanted to make Racket bindings to the thing used here (<http://www.grammaticalframework.org>) using `ffi`.\nNow the question: what is the right way to connect to a `cstruct` like this:\n```typedef struct PgfApplication PgfApplication;\n\nstruct PgfApplication {\n\tPgfCId fun;\n\tint n_args;\n\tPgfExpr args[];\n};\n```\nwhere `fun` is basically a string. The problem is `args` which is expected to be dynamically created and to have `n_args` elements.\nThanks in advance!"
        }
      ]
    },
    {
      "conversation_id": "173",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Would anyone know why putting picts in code causes the code to become unaligned?\nRosalee: (If you remove the [CODE] line, it gets aligned as you would expect\nRosalee: (it also remains if I replace that line with a different pict, or freeze the pict altogether.\nNelson: Danelle I don't know the FFI, but this tutorial might help: <[URL]\nNelson: use [CODE] ?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 82.27,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T16:02:27.000150",
          "text": "Would anyone know why putting picts in code causes the code to become unaligned?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T16:02:56.000291",
          "text": "(If you remove the `(code \"hello\")` line, it gets aligned as you would expect"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T16:04:29.000531",
          "text": "(it also remains if I replace that line with a different pict, or freeze the pict altogether."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-08-23T17:23:32.000188",
          "text": "<@Danelle> I don't know the FFI, but this tutorial might help: <http://prl.ccs.neu.edu/blog/2016/06/27/tutorial-using-racket-s-ffi/>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-08-23T17:24:43.000259",
          "text": "use `hyperlink` ?"
        }
      ]
    },
    {
      "conversation_id": "174",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: why are scribble URLs the way they are? e.g. \"<[URL]\nLatarsha: it's the library path that the identifier is defined in\nChantelle: is there any way to control the url structure for a particular definition?\nChantelle: wondering if there's a way I can define a link relation as a racket value with a URL pointing to its documentation without the relation being really, really ugly looking / percent encoded / contain redundant information\nChantelle: Nelson not put a link in scribble, but use scribble docs as a link relations registry like <[URL]\nChantelle: or just somehow get a registry out of a package catalog so I don't need to register a domain to get a unique url for a link relation\nRosalee: Chantelle It actually does that if there are conflicts\nRosalee: If you look at the video manual (<[URL] which uses the package server, each package gets its own url\nRosalee: If that’s what you’re talking about\nChantelle: Rosalee actually, thinking about it more, I specifically do not want the package name to be part of the url so I have the freedom to move the code between packages without breaking links\nChantelle: this would definitely not be possible with scribble, though maybe some weird extension built on top of the catalog that did things with info files could do it\nNelson: something like `<[URL] ?\nNelson: which would search for a package currently named [CODE] and an identifier (or something) currently named [CODE] (current = since most recent build of the docs)\nChantelle: no, more something like [CODE]bar[CODE]foo`\nChantelle: basically I want a way to use the package system to somehow let packages define unique identifiers across all packages in a catalog, in a way that lets the definition of the identifier move between packages without breaking things\nLatarsha: Chantelle how would you deal with identifiers that need % encoding?\nLatarsha: or, more significantly, packages that provide multiple bindings with the same name\nLatarsha: for example, [CODE] provides a lot of different [CODE] bindings\nChantelle: specifically I'd want this registry server to look for conflicts and do something ring-like in choosing which one is the \"official\" one, with two packages providing the same relation ID being something you could consider a test failure\nChantelle: this is for ids that are \"very special\" in that they're not just code ids, they're ids for resources in some resful distributed system (like link relations)\nNelson: ok what if `<[URL] just used rings to rank results?\nNelson: alright I see \"very special\"\nChantelle: emphasis on very\nRosalee: :pizza: ?\nRosalee: lol\nRosalee: I’m hungry now\nChantelle: :pizza: :pizza: :pizza:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 27,
        "duration_minutes": 52.15,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "build",
          "need to"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Nelson",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:01:52.000052",
          "text": "why are scribble URLs the way they are? e.g. \"<http://docs.racket-lang.org/disposable/#%28form._%28%28lib._disposable%2Fmain..rkt%29._with-disposable%29%29>\""
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T17:07:32.000051",
          "text": "it's the library path that the identifier is defined in"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:10:53.000293",
          "text": "is there any way to control the url structure for a particular definition?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:12:11.000229",
          "text": "wondering if there's a way I can define a link relation as a racket value with a URL pointing to its documentation without the relation being really, really ugly looking / percent encoded / contain redundant information"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:29:11.000073",
          "text": "<@Nelson> not put a link in scribble, but use scribble docs as a link relations registry like <https://www.iana.org/assignments/link-relations/link-relations.xhtml>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:31:25.000343",
          "text": "or just somehow get a registry out of a package catalog so I don't need to register a domain to get a unique url for a link relation"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T17:33:58.000286",
          "text": "<@Chantelle> It actually does that if there are conflicts"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T17:34:34.000311",
          "text": "If you look at the video manual (<http://lang.video/documentation.html>) which uses the package server, each package gets its own url"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T17:34:39.000297",
          "text": "If that’s what you’re talking about"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:35:27.000365",
          "text": "<@Rosalee> actually, thinking about it more, I specifically do not want the package name to be part of the url so I have the freedom to move the code between packages without breaking links"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:35:59.000229",
          "text": "this would definitely not be possible with scribble, though maybe some weird extension built on top of the catalog that did things with info files could do it"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-08-23T17:39:24.000252",
          "text": "something like `<http://docs.racket-lang.org/?pkg=foo&amp;tag=bar>` ?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-08-23T17:39:56.000235",
          "text": "which would search for a package currently named `foo` and an identifier (or something) currently named `bar` (current = since most recent build of the docs)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:41:05.000362",
          "text": "no, more something like `<http://registry.pkgs.racket-lang.org/relations/bar>` which would redirect to the scribble docs for `bar` in `foo`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:41:43.000068",
          "text": "basically I want a way to use the package system to somehow let packages define unique identifiers across all packages in a catalog, in a way that lets the definition of the identifier move between packages without breaking things"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T17:42:07.000002",
          "text": "<@Chantelle> how would you deal with identifiers that need % encoding?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T17:42:35.000188",
          "text": "or, more significantly, packages that provide multiple bindings with the same name"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T17:42:57.000275",
          "text": "for example, `typed-racket-lib` provides a lot of different `#%module-begin` bindings"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:43:36.000294",
          "text": "specifically I'd want this registry server to look for conflicts and do something ring-like in choosing which one is the \"official\" one, with two packages providing the same relation ID being something you could consider a test failure"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:44:23.000014",
          "text": "this is for ids that are \"very special\" in that they're not just code ids, they're ids for resources in some resful distributed system (like link relations)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-08-23T17:44:55.000156",
          "text": "ok what if `<http://docs.racket-lang.org/search/index.html?q=bar|docs.racket-lang.org/search/index.html?q=bar>` just used rings to rank results?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-08-23T17:45:26.000032",
          "text": "alright I see \"very special\""
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:46:43.000360",
          "text": "emphasis on very"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T17:52:28.000095",
          "text": ":pizza: ?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T17:52:29.000154",
          "text": "lol"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-23T17:52:32.000430",
          "text": "I’m hungry now"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T17:54:01.000212",
          "text": ":pizza: :pizza: :pizza:"
        }
      ]
    },
    {
      "conversation_id": "175",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Chantelle Nelson that's close to what happens when you use an \"indirect\" link that goes through the \"local-redirect\" layer (but the use of rings is new as of today, when the pkg-build system started paying attention to rings);the indirect-link index is currently limited in what it covers, but you might look there for implementation ideas; anyway, unless I'm confused about what you're suggesting, this is not only possible with Scribble, but it's substantially already in place\nChantelle: Vincenzo I didn't really explain what I wanted very well or in detail. The indirect links are sort of related though, thanks for the pointer\nNathanial: People are pretty quiet right now over on IRC, so I figured I'd ask here as well.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 87.75,
        "contains_question": false,
        "action_keywords": [
          "build",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Nathanial",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-23T18:52:41.000157",
          "text": "<@Chantelle> <@Nelson> that's close to what happens when you use an \"indirect\" link that goes through the \"local-redirect\" layer (but the use of rings is new as of today, when the pkg-build system started paying attention to rings);the indirect-link index is currently limited in what it covers, but you might look there for implementation ideas; anyway, unless I'm confused about what you're suggesting, this is not only possible with Scribble, but it's substantially already in place"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-23T19:01:26.000293",
          "text": "<@Vincenzo> I didn't really explain what I wanted very well or in detail. The indirect links are sort of related though, thanks for the pointer"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T20:20:26.000074",
          "text": "People are pretty quiet right now over on IRC, so I figured I'd ask here as well."
        }
      ]
    },
    {
      "conversation_id": "176",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nathanial: I was looking at <[URL] I was wondering . . . has anyone tried linear probing rather than double hashing in this hash table? And how sensitive is racket perf to the perf of this table?\nNathanial: I guess the last question would be, what's the bar for changing behavior at this level?\nNathanial: (I'm refering to the traditional hash table, not the mzhamt thing\nLatarsha: Nathanial I expect that Vincenzo has tried other hash tables, I think improving them would help many Racket programs, and the bar is convincing improvement, I would say\nNathanial: So we aren't worried about people having dependencies on the exact shape of the internal hash function, for example? My thoughts were: 1. plug the hash function into SMHasher to see what we're working with. Linear probing is known to be very sensitive to hash function quality.\nNathanial: If there's any problem, try replacing the hash function with something of good quality.\nNathanial: After that, update the code, run some benchmarks, and see whether there is a detectable change.\nVincenzo: I don't think there would be any problem moving away from double hashing. The Racket-on-Chez port uses single hashing with linked lists for collisions, since that's what Chez Scheme provides.\nNathanial: OK. I'll take a look. Any particular benchmarks y'all like to run to verify changes to internals?\nVincenzo: Aside from microbenchmarks, trying a build (maybe plotting like <[URL] is often a good exercise to make sure that things don't go surprisingly wrong, since a build relies on so many different things.\nNathanial: I have been working on testing the string hashing function using SMHasher\nNathanial: I am just testing the initial value, to see what our collision properties are\nNathanial: It looks not so good\nNathanial: And at least on my VM, it's about 1/10th as fast as CityHash64 on longer strings\nNathanial: I wonder if there's an appetite for taking on a purpose built hashing library like xxhash as a dependency\nNathanial: But it's possible I'm doing something wrong. I'll have to look at it more later.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 16,
        "duration_minutes": 190.03,
        "contains_question": true,
        "action_keywords": [
          "build",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nathanial",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T20:20:30.000026",
          "text": "I was looking at <https://github.com/racket/racket/blob/master/racket/src/racket/src/hash.c> \nI was wondering . . . has anyone tried linear probing rather than double hashing in this hash table? \nAnd how sensitive is racket perf to the perf of this table?"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T20:20:54.000129",
          "text": "I guess the last question would be, what's the bar for changing behavior at this level?"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T20:21:13.000010",
          "text": "(I'm refering to the traditional hash table, not the mzhamt thing"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T20:56:31.000057",
          "text": "<@Nathanial> I expect that <@Vincenzo> has tried other hash tables, I think improving them would help many Racket programs, and the bar is convincing improvement, I would say"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T20:58:20.000011",
          "text": "So we aren't worried about people having dependencies on the exact shape of the internal hash function, for example? My thoughts were: 1. plug the hash function into SMHasher to see what we're working with. Linear probing is known to be very sensitive to hash function quality."
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T20:58:53.000120",
          "text": "If there's any problem, try replacing the hash function with something of good quality."
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T20:59:07.000161",
          "text": "After that, update the code, run some benchmarks, and see whether there is a detectable change."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-23T21:01:59.000104",
          "text": "I don't think there would be any problem moving away from double hashing. The Racket-on-Chez port uses single hashing with linked lists for collisions, since that's what Chez Scheme provides."
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T21:02:33.000178",
          "text": "OK. I'll take a look. Any particular benchmarks y'all like to run to verify changes to internals?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-23T21:18:13.000002",
          "text": "Aside from microbenchmarks, trying a build (maybe plotting like <http://build-plot.racket-lang.org/>) is often a good exercise to make sure that things don't go surprisingly wrong, since a build relies on so many different things."
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T23:26:44.000153",
          "text": "I have been working on testing the string hashing function using SMHasher"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T23:27:09.000022",
          "text": "I am just testing the initial value, to see what our collision properties are"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T23:27:19.000011",
          "text": "It looks not so good"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T23:27:35.000052",
          "text": "And at least on my VM, it's about 1/10th as fast as CityHash64 on longer strings"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T23:28:14.000104",
          "text": "I wonder if there's an appetite for taking on a purpose built hashing library like xxhash as a dependency"
        },
        {
          "user": "Nathanial",
          "timestamp": "2017-08-23T23:30:32.000097",
          "text": "But it's possible I'm doing something wrong. I'll have to look at it more later."
        }
      ]
    },
    {
      "conversation_id": "177",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: There are also some ok benchmarks in two places: <[URL]\nLatarsha: and <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.98,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T21:57:51.000082",
          "text": "There are also some ok benchmarks in two places: <https://github.com/racket/racket/tree/master/pkgs/racket-benchmarks/tests/racket/benchmarks>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-23T21:58:50.000022",
          "text": "and <https://github.com/stamourv/contract-benchmarks>"
        }
      ]
    },
    {
      "conversation_id": "178",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Danelle: Will try it, thanks :+1:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Danelle"
        ]
      },
      "timeline": [
        {
          "user": "Danelle",
          "timestamp": "2017-08-24T02:05:07.000189",
          "text": "Will try it, thanks :+1:"
        }
      ]
    },
    {
      "conversation_id": "179",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo If I have a native library that uses pthreads, lets the user set a callback, the callback goes to a Racket function, and the native library calls that callback from another thread, would that likely cause the Racket VM to segfault?\nVincenzo: Rosalee Yes. See [CODE] for the way to solve that problem.\nRosalee: Ah, okay, that would explain a lot.\nRosalee: So that looks like its just a short function which is supposed to run quickly\nRosalee: That you can use to say, add something to a datastructure the main thread grabs.\nRosalee: At least that’s what it looks like to mel\nRosalee: me*\nRosalee: Would I put that on the callback [CODE] type, or the function where I set the [CODE]?\nVincenzo: It's a property of the callback\nRosalee: That makes sense, so in the case of: [CODE_BLOCK] It would go on the inner callback.\nRosalee: Or not, as this doesn’t seem to even print out ‘here’: [CODE_BLOCK]\nRosalee: so I’m going to look for examples.\nRosalee: Oh interesting, the only examples I see use it as a box.\nVincenzo: There are non-box examples in \"net/osx-ssl.rkt\"\nRosalee: Hmm…that looks like what I was doing. Is it possible for the GC to collect a closure defined at the the module level?\nRosalee: (define and exported and immutable)\nRosalee: well, defined and exported and not [CODE]ed anyway.\nLatarsha: no\nRosalee: Ya, that’s what I thought. Oh well. :disappointed:\nRosalee: Ahhh…I’m not setting the keep flag propertly\nRosalee: properly*\nRosalee: BTW Vincenzo the docs say: “…not suitable for a function used multiple times as a reatined callback”\nRosalee: I presume reatined -&gt; retained, yes?\nRosalee: Oh wait, no. the function you can’t call multiple times is the set-callback function, not the callback itself.\nRosalee: Which means hmmph. I’m back to not know why I’m segfaulting. Thanks anyway. :slightly_smiling_face:\nVincenzo: Rosalee Are you working in DrRacket or plain Racket? Going back to your earlier example, a [CODE] definitely wouldn't work in atomic mode in DrRacket, and it's not ok in general, so the crash could be something like that.\nRosalee: Vincenzo plain cmdline racket.\nRosalee: I thought it was only in automic mode if you give it [CODE]\nRosalee: Ah okay.\nRosalee: Hmm…so I recompiled ffmpeg with pthreads explicitly disabled. And I”m still getting segfaults. So its probably something else.\nRosalee: Vincenzo FWIW, here is the C half of the call: [CODE_BLOCK]\nRosalee: And then later on: [CODE_BLOCK]\nKimbery: I’m starting a REPL with [CODE] and running the same code as with a sandbox created with [CODE].\nRosalee: OH…interesting. If I call the callback within the function (rather than storing it for later), it works out just fine…\nRosalee: It seems to be the [CODE] that is problematic.\nRosalee: Which is odd because the function being passed in is a module level function.\nRosalee: AH, okay.\nRosalee: Latarsha It looks like a module level variable WILL get GCed.\nRosalee: And I suspect its a phase issue.\nLatarsha: Right, if the whole module instance itself is collected\nRosalee: Yup, but it seems like it happens as part of compilation.\nRosalee: Although that _could_ just be something strange I’m doing with my setup.\nRosalee: Its hard for me to tell.\nRosalee: Anyway, thanks. :slightly_smiling_face:\nRosalee: Now if only I could attach a will to a module itself…\nKimbery: Adjusting the expansion of [CODE] to use the [CODE] hack makes both work. But the fact that there is a difference is mysterious!",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 46,
        "duration_minutes": 280.43,
        "contains_question": true,
        "action_keywords": [
          "create",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T13:57:55.000101",
          "text": "<@Vincenzo> If I have a native library that uses pthreads, lets the user set a callback, the callback goes to a Racket function, and the native library calls that callback from another thread, would that likely cause the Racket VM to segfault?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-24T14:00:04.000252",
          "text": "<@Rosalee> Yes. See `#:async-apply` for the way to solve that problem."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:01:57.000409",
          "text": "Ah, okay, that would explain a lot."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:03:11.000420",
          "text": "So that looks like its just a short function which is supposed to run quickly"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:03:26.000532",
          "text": "That you can use to say, add something to a datastructure the main thread grabs."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:03:36.000494",
          "text": "At least that’s what it looks like to mel"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:03:37.000326",
          "text": "me*"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:04:22.000423",
          "text": "Would I put that on the callback `_fun` type, or the function where I set the `_fun`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-24T14:05:03.000383",
          "text": "It's a property of the callback"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:06:57.000027",
          "text": "That makes sense, so in the case of:\n```\n(define-libvid set-racket-log-callback\n  (_fun (_fun _pointer _int _string -&gt; _void) -&gt; _void))\n```\nIt would go on the inner callback."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:11:50.000464",
          "text": "Or not, as this doesn’t seem to even print out ‘here’:\n```\n(define-libvid set-racket-log-callback\n  (_fun (_fun #:async-apply (λ (th) (displayln \"here\") (th))\n              _pointer _int _string -&gt; _void) -&gt; _void))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:11:57.000348",
          "text": "so I’m going to look for examples."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:13:10.000447",
          "text": "Oh interesting, the only examples I see use it as a box."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-24T14:15:47.000256",
          "text": "There are non-box examples in \"net/osx-ssl.rkt\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:21:39.000111",
          "text": "Hmm…that looks like what I was doing. Is it possible for the GC to collect a closure defined at the the module level?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:21:50.000242",
          "text": "(define and exported and immutable)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:22:16.000077",
          "text": "well, defined and exported and not `set!`ed anyway."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-24T14:23:00.000352",
          "text": "no"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:24:02.000692",
          "text": "Ya, that’s what I thought. Oh well. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:41:11.000117",
          "text": "Ahhh…I’m not setting the keep flag propertly"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:41:12.000426",
          "text": "properly*"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:42:24.000436",
          "text": "BTW <@Vincenzo> the docs say: “…not suitable for a function used multiple times as a reatined callback”"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:42:33.000306",
          "text": "I presume reatined -&gt; retained, yes?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:51:55.000383",
          "text": "Oh wait, no. the function you can’t call multiple times is the set-callback function, not the callback itself."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T14:52:13.000277",
          "text": "Which means hmmph. I’m back to not know why I’m segfaulting. Thanks anyway. :slightly_smiling_face:"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-24T16:18:34.000014",
          "text": "<@Rosalee> Are you working in DrRacket or plain Racket? Going back to your earlier example, a `(displayln \"here\")` definitely wouldn't work in atomic mode in DrRacket, and it's not ok in general, so the crash could be something like that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:25:06.000210",
          "text": "<@Vincenzo> plain cmdline racket."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:25:26.000181",
          "text": "I thought it was only in automic mode if you give it  `#:automic? #t`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:26:06.000277",
          "text": "Ah okay."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:26:33.000385",
          "text": "Hmm…so I recompiled ffmpeg with pthreads explicitly disabled. And I”m still getting segfaults. So its probably something else."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:28:59.000131",
          "text": "<@Vincenzo> FWIW, here is the C half of the call:\n```\nvoid (*racket_log_callback)(void*, int, const char*) = NULL;\n\nvoid set_racket_log_callback(void (*callback)(void*, int, const char*)) {\n  racket_log_callback = callback;\n}\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:29:31.000084",
          "text": "And then later on:\n```\nvoid ffmpeg_log_callback(void * avcl,  int level, const char * fmt, va_list vl) {\n  int buffsize;\n  char *buff;\n  ...\n  buffsize = ...\n  buff = malloc((buffsize + 1) * sizeof(char));\n  vsnprintf(buff, buffsize + 1, fmt, vl);\n  if(racket_log_callback) {\n    racket_log_callback(avcl, level, buff);\n  } else {\n    free(buff);\n  }\n}\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-24T16:33:14.000353",
          "text": "I’m starting a REPL with `racket -iI hackett` and running the same code as with a sandbox created with `(make-evaluator 'hackett #:require '((submod hackett configure-runtime)))`."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:37:31.000347",
          "text": "OH…interesting. If I call the callback within the function (rather than storing it for later), it works out just fine…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:37:45.000478",
          "text": "It seems to be the `racket_log_callback = callback` that is problematic."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:38:24.000175",
          "text": "Which is odd because the function being passed in is a module level function."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:39:49.000520",
          "text": "AH, okay."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:40:01.000538",
          "text": "<@Latarsha> It looks like a module level variable WILL get GCed."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:40:06.000384",
          "text": "And I suspect its a phase issue."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-24T16:42:56.000535",
          "text": "Right, if the whole module instance itself is collected"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:45:34.000424",
          "text": "Yup, but it seems like it happens as part of compilation."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:45:43.000112",
          "text": "Although that _could_ just be something strange I’m doing with my setup."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:45:47.000359",
          "text": "Its hard for me to tell."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:45:50.000079",
          "text": "Anyway, thanks. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-24T16:53:47.000576",
          "text": "Now if only I could attach a will to a module itself…"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-24T18:38:21.000255",
          "text": "Adjusting the expansion of `mac1` to use the `(define-syntaxes (id) (values))` hack makes both work. But the fact that there is a difference is mysterious!"
        }
      ]
    },
    {
      "conversation_id": "180",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: unless the whole module instance is collected, which is unlikely",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-24T14:23:17.000092",
          "text": "unless the whole module instance is collected, which is unlikely"
        }
      ]
    },
    {
      "conversation_id": "181",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo I have a program that seems to expand differently in a sandbox vs. in a “real” top level REPL. Is this expected? Are the differences documented anywhere?\nVincenzo: Kimbery That shouldn't normally happen, but it would be difficult to list all the ways that a namespace can be configured differently. Can you provide an example?\nVincenzo: The [CODE] callback is always in atomic mode\nKimbery: Vincenzo I am having a hard time coming up with a way to reduce it to a minimal test case, but it happens with some Hackett code.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 73.33,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-24T15:19:01.000553",
          "text": "<@Vincenzo> I have a program that seems to expand differently in a sandbox vs. in a “real” top level REPL. Is this expected? Are the differences documented anywhere?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-24T16:17:01.000123",
          "text": "<@Kimbery> That shouldn't normally happen, but it would be difficult to list all the ways that a namespace can be configured differently. Can you provide an example?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-24T16:25:51.000085",
          "text": "The `#:async-apply` callback is always in atomic mode"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-24T16:32:21.000247",
          "text": "<@Vincenzo> I am having a hard time coming up with a way to reduce it to a minimal test case, but it happens with some Hackett code."
        }
      ]
    },
    {
      "conversation_id": "182",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo I managed to get a test case: [CODE_BLOCK]\nVincenzo: Kimbery I see that this is yet another case where [CODE] seems to behave better, so it's likely a bug in [CODE] handling in the current [CODE]; I should be able to look into it more tomorrow\nKimbery: Vincenzo No worries, I worked around it with a [CODE] forward declaration (and I would like to support existing Racket versions, anyway). Cool to see that racket7 is better here, though. :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 71.98,
        "contains_question": false,
        "action_keywords": [
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-24T18:37:37.000244",
          "text": "<@Vincenzo> I managed to get a test case:\n```\n#lang racket\n\n(require racket/sandbox\n         syntax/location)\n\n(module forms racket\n  (require (for-syntax racket/syntax)\n           syntax/parse/define)\n\n  (provide mac1)\n\n  (define-syntax-parser mac1\n    [(_)\n     #:with id (generate-temporary)\n     #'(define id (mac2 id))])\n\n  (define-syntax-parser mac2\n    [(_ id:id)\n     (local-expand #'id 'expression '())\n     #'(displayln \"mac2\" (current-error-port))]))\n\n; works, prints \"mac2\"\n(void (make-evaluator 'racket/base #:requires (list (quote-module-path forms)) '(mac1)))\n\n; fails\n(void ((make-evaluator 'racket/base #:requires (list (quote-module-path forms))) '(mac1)))\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-24T19:44:09.000092",
          "text": "<@Kimbery> I see that this is yet another case where `racket7` seems to behave better, so it's likely a bug in `module-&gt;namespace` handling in the current `racket`; I should be able to look into it more tomorrow"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-24T19:49:36.000058",
          "text": "<@Vincenzo> No worries, I worked around it with a `define-syntaxes` forward declaration (and I would like to support existing Racket versions, anyway). Cool to see that racket7 is better here, though. :)"
        }
      ]
    },
    {
      "conversation_id": "183",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Is it possible to get a conversion from slideshow pixels to your OS+Monitors pixels?\nRosalee: Like, as a function or just a number.\nRosalee: I ask because I need to convert a slideshow rect into an interactive rect.\nRosalee: Vincenzo or Tina one of you might know?\nRosalee: I see [CODE], but that looks like its going the other way\nTina: Interactive's argument gets a frame. Fill it with a canvas. The canvas will be the right size\nTina: I don't believe you have to do any conversion.\nTina: At least I don't.\nRosalee: Interesting. Do you think that is also true for an opengl canvas?\nRosalee: (I say that because I’m getting OpenGL contexts of a different sizes.)\nRosalee: Depending on the pixel density of the monitor I’m using.\nRosalee: Where a lower pixel density producers a smaller image…\nRosalee: (Or larger, I forget which way is which, but either way, it is consistent.)\nRosalee: Ah, higher is smaller.\nTina: I haven't tried opengl\nRosalee: Alright, thanks anyway. :slightly_smiling_face:\nVincenzo: Rosalee The [CODE] class provides a [CODE] method\nVincenzo: You can compare that result to the [CODE] result\nRosalee: Vincenzo Oh cool thanks.\nRosalee: Vincenzo oh ineresting, they appear to be the same numbers.\nRosalee: Its still kindof odd I only get this problem with slideshow. Like when I use a canvas outside of slideshow it is scaled as expected.\nRosalee: Vincenzo According to both [CODE] and [CODE], the size of the [CODE] is 450x300\nRosalee: BUT, the actual amount of pixels given ~1.5x as much, at about 600x400\nRosalee: So it looks like [CODE] is still giving me the scaled amount, rather then the actual physical amount.\nRosalee: Odd…even [CODE] returns 450x300.\nRosalee: Vincenzo AH, okay, I got it.\nRosalee: It looks like the [CODE] call actually allocates a frame that can have a different resolution than the one you requested.\nRosalee: And so you should base it off of the given width and height, rather than the one you requested.\nRosalee: That worked. Thanks.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 29,
        "duration_minutes": 53.27,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Tina",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:18:44.000185",
          "text": "Is it possible to get a conversion from slideshow pixels to your OS+Monitors pixels?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:18:58.000169",
          "text": "Like, as a function or just a number."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:19:14.000035",
          "text": "I ask because I need to convert a slideshow rect into an interactive rect."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:19:22.000353",
          "text": "<@Vincenzo> or <@Tina> one of you might know?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:20:27.000001",
          "text": "I see `size-in-pixels`, but that looks like its going the other way"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-25T10:21:33.000069",
          "text": "Interactive's argument gets a frame. Fill it with a canvas. The canvas will be the right size"
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-25T10:21:54.000038",
          "text": "I don't believe you have to do any conversion. "
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-25T10:21:57.000280",
          "text": "At least I don't. "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:22:46.000218",
          "text": "Interesting. Do you think that is also true for an opengl canvas?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:23:05.000219",
          "text": "(I say that because I’m getting OpenGL contexts of a different sizes.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:23:25.000026",
          "text": "Depending on the pixel density of the monitor I’m using."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:24:13.000217",
          "text": "Where a lower pixel density producers a smaller image…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:24:28.000292",
          "text": "(Or larger, I forget which way is which, but either way, it is consistent.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:24:42.000064",
          "text": "Ah, higher is smaller."
        },
        {
          "user": "Tina",
          "timestamp": "2017-08-25T10:25:04.000433",
          "text": "I haven't tried opengl "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:25:28.000415",
          "text": "Alright, thanks anyway. :slightly_smiling_face:"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-25T10:32:30.000067",
          "text": "<@Rosalee> The `canvas%` class provides a `get-gl-client-size` method"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-25T10:33:10.000592",
          "text": "You can compare that result to the `get-client-size` result"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:37:18.000087",
          "text": "<@Vincenzo> Oh cool thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:45:08.000060",
          "text": "<@Vincenzo> oh ineresting, they appear to be the same numbers."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T10:46:24.000427",
          "text": "Its still kindof odd I only get this problem with slideshow. Like when I use a canvas outside of slideshow it is scaled as expected."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:04:39.000190",
          "text": "<@Vincenzo> According to both `get-gl-client-size` and `get-client-size`, the size of the `canvas%` is 450x300"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:05:25.000589",
          "text": "BUT, the actual amount of pixels given ~1.5x as much, at about 600x400"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:05:49.000071",
          "text": "So it looks like `get-client-size` is still giving me the scaled amount, rather then the actual physical amount."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:09:25.000294",
          "text": "Odd…even `get-scaled-client-size` returns 450x300."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:11:20.000131",
          "text": "<@Vincenzo> AH, okay, I got it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:11:41.000224",
          "text": "It looks like the `interactive` call actually allocates a frame that can have a different resolution than the one you requested."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:11:56.000314",
          "text": "And so you should base it off of the given width and height, rather than the one you requested."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T11:12:00.000446",
          "text": "That worked. Thanks."
        }
      ]
    },
    {
      "conversation_id": "184",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: is there a faster way to read from an input port until a nul byte besides looping with [CODE]?\nKimbery: I don’t know if that is slow, per se, but I’m not sure if there is a better way\nKimbery: I guess [CODE] could be faster if I really needed maximum speed, but that would make it possible to over-read, while [CODE] only ever reads up to a newline?\nMarlin: Yeah, my recollection is that reading a byte at a time *is* pretty slow in Racket, comparatively. A fast-as-possible solution (without over-reading) might involve [CODE]... maybe... Haven't tried it.\nKimbery: it probably doesn’t matter much for what I’m working on, since this is just a little script I’m running myself, but it would be nice to shave this yak :)\nKimbery: I think the easiest way to do it, from a programming-effort POV, might actually be to use a regexp.\nKimbery: yes, [CODE] seems to work, and it’s definitely fast enough for my needs :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 19.5,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-08-25T14:36:38.000270",
          "text": "is there a faster way to read from an input port until a nul byte besides looping with `read-byte`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-25T14:37:09.000354",
          "text": "I don’t know if that is slow, per se, but I’m not sure if there is a better way"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-25T14:38:56.000310",
          "text": "I guess `read-bytes-avail!*` could be faster if I really needed maximum speed, but that would make it possible to over-read, while `read-line` only ever reads up to a newline?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-08-25T14:41:45.000524",
          "text": "Yeah, my recollection is that reading a byte at a time *is* pretty slow in Racket, comparatively. A fast-as-possible solution (without over-reading) might involve `peak-bytes-avail!`... maybe... Haven't tried it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-25T14:43:14.000113",
          "text": "it probably doesn’t matter much for what I’m working on, since this is just a little script I’m running myself, but it would be nice to shave this yak :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-25T14:47:55.000096",
          "text": "I think the easiest way to do it, from a programming-effort POV, might actually be to use a regexp."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-25T14:56:08.000182",
          "text": "yes, `(regexp-match (byte-pregexp #\"^([^\\0]*)\\0\") port)` seems to work, and it’s definitely fast enough for my needs :)"
        }
      ]
    },
    {
      "conversation_id": "185",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Magnolia: Is it just me or is the <#C088CK7J6|irc> bridge not actually working?\nChantelle: Magnolia I think it's been semi-broken for a while, with intermittent spurts of actually working\nChantelle: does anyone know who maintains it?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 5.17,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Magnolia"
        ]
      },
      "timeline": [
        {
          "user": "Magnolia",
          "timestamp": "2017-08-25T17:16:31.000195",
          "text": "Is it just me or is the <#C088CK7J6|irc> bridge not actually working?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-25T17:21:17.000185",
          "text": "<@Magnolia> I think it's been semi-broken for a while, with intermittent spurts of actually working"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-25T17:21:41.000133",
          "text": "does anyone know who maintains it?"
        }
      ]
    },
    {
      "conversation_id": "186",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Is there any way to run code right before a module instance gets collected?\nRosalee: I don’t care if it doesn’t get run and the program stops, I just want to inform some FFI code that a closure that was once available no longer is.\nRosalee: About all I got right now is have a will executor attached to a variable in the module, and hope that it will only get collected when the module itself is collected.\nRosalee: Ah, okay, that should work. :slightly_smiling_face:\nRosalee: If I have a null terminated char * in C, is there any good way to hand it to Racket?\nRosalee: (Like, give ownership of it to Racket, so that it doesn’t need to get freed on the C side)\nRosalee: Right now all I’ve got is using _bytes. But once I try to convert those bytes to a string, I get segfaults. But if I keep it as bytes I’m not seeing segfaults.\nRosalee: Vincenzo Do asynch-channels not play well with the apply-async parameter in the FFI?\nVincenzo: Rosalee Async channels (or any operations that can block) cannot be used in atomic mode\nVincenzo: For your earlier question, if a C function returns a string that needs to be [CODE]d, then the only way to push the call to [CODE] to Racket's responsibility is to use a finalizer",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 2144.33,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T21:35:42.000055",
          "text": "Is there any way to run code right before a module instance gets collected?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T21:36:21.000017",
          "text": "I don’t care if it doesn’t get run and the program stops, I just want to inform some FFI code that a closure that was once available no longer is."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T21:36:58.000073",
          "text": "About all I got right now is have a will executor attached to a variable in the module, and hope that it will only get collected when the module itself is collected."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-25T23:48:16.000003",
          "text": "Ah, okay, that should work. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-26T10:51:27.000092",
          "text": "If I have a null terminated char * in C, is there any good way to hand it to Racket?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-26T10:52:01.000067",
          "text": "(Like, give ownership of it to Racket, so that it doesn’t need to get freed on the C side)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-26T10:52:55.000011",
          "text": "Right now all I’ve got is using _bytes. But once I try to convert those bytes to a string, I get segfaults.  But if I keep it as bytes I’m not seeing segfaults."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-26T22:52:11.000039",
          "text": "<@Vincenzo> Do asynch-channels not play well with the apply-async parameter in the FFI?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-27T09:15:56.000060",
          "text": "<@Rosalee> Async channels (or any operations that can block) cannot be used in atomic mode"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-27T09:20:02.000069",
          "text": "For your earlier question, if a C function returns a string that needs to be `free`d, then the only way to push the call to `free` to Racket's responsibility is to use a finalizer"
        }
      ]
    },
    {
      "conversation_id": "187",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Why can't you attach the will-executor to the thing you're concerned about?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-25T22:02:21.000053",
          "text": "Why can't you attach the will-executor to the thing you're concerned about?"
        }
      ]
    },
    {
      "conversation_id": "188",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: I feel like I'm dancing on the edge of what I actually understand, and into \"it works (?)\" territory. Would welcome any feedback. <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-08-26T13:51:30.000099",
          "text": "I feel like I'm dancing on the edge of what I actually understand, and into \"it works (?)\" territory. Would welcome any feedback. <https://github.com/greghendershott/racket-mode/blob/e87400982ba34dae5eaa619d3b63a535a080da08/namespace.rkt>"
        }
      ]
    },
    {
      "conversation_id": "189",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tana: have a super noob [CODE] question but the docs don't help me. How do I get [CODE] to install dependent packages from [CODE]?\nChantelle: Tana [CODE] only compiles files and collections, it doesn't know anything about packages, you need to use [CODE] for that\nChantelle: [CODE] will let you install a local package\nChantelle: and using the [CODE] flag will automatically install all dependencies (by default it prompts you asking if you want to install them)\nTana: thinking of a way to be able to scan [CODE] for [CODE] and pass them to [CODE]\nChantelle: [CODE] should do that automatically\nTana: hmm ok\nChantelle: if you've _already_ installed the package and then _added_ new dependencies to [CODE] though, I think you need to do something with [CODE] instead\nTana: ok, for some reason never grokked that from the docs\nChantelle: the docs for package management and installation for package authors could use some better organization\nKimbery: imo it’s something of an oversight that [CODE] does not ensure deps are still properly installed, even if a local [CODE] file changes after the package is initially installed\nKimbery: only [CODE] and [CODE] will check for missing deps\nChantelle: and it's even weirder because [CODE] can check to see if your packages have missing deps...",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 13,
        "duration_minutes": 165.52,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Tana"
        ]
      },
      "timeline": [
        {
          "user": "Tana",
          "timestamp": "2017-08-27T14:21:27.000063",
          "text": "have a super noob `raco` question but the docs don't help me. How do I get `raco setup` to install dependent packages from `info.rkt`?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-27T17:02:40.000060",
          "text": "<@Tana> `raco setup` only compiles files and collections, it doesn't know anything about packages, you need to use `raco pkg install` for that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-27T17:02:53.000044",
          "text": "`raco pkg install --link /some/dir` will let you install a local package"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-27T17:03:10.000006",
          "text": "and using the `--auto` flag will automatically install all dependencies (by default it prompts you asking if you want to install them)"
        },
        {
          "user": "Tana",
          "timestamp": "2017-08-27T17:03:36.000029",
          "text": "thinking of a way to be able to scan `info.rkt` for `deps` and pass them to `raco pkg install`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-27T17:03:55.000038",
          "text": "`raco pkg install` should do that automatically"
        },
        {
          "user": "Tana",
          "timestamp": "2017-08-27T17:04:02.000056",
          "text": "hmm ok"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-27T17:04:38.000050",
          "text": "if you've _already_ installed the package and then _added_ new dependencies to `info.rkt` though, I think you need to do something with `raco pkg update` instead"
        },
        {
          "user": "Tana",
          "timestamp": "2017-08-27T17:05:16.000070",
          "text": "ok, for some reason never grokked that from the docs"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-27T17:05:38.000111",
          "text": "the docs for package management and installation for package authors could use some better organization"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-27T17:06:17.000058",
          "text": "imo it’s something of an oversight that `raco setup` does not ensure deps are still properly installed, even if a local `info.rkt` file changes after the package is initially installed"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-08-27T17:06:33.000019",
          "text": "only `raco pkg install` and `raco pkg update` will check for missing deps"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-27T17:06:58.000049",
          "text": "and it's even weirder because `raco setup` can check to see if your packages have missing deps..."
        }
      ]
    },
    {
      "conversation_id": "190",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Thank you, that makes sense. (Although fwiw I was using an async channel without a limit).\nRosalee: It just seems like its really easy to cause Racket to segfault when making callbacks. Although that ‘might’ just be ffmpeg.\nChantelle: Rosalee &gt; Video v0.2-beta is now mature enough for programmers to reliably use it without segfaults. This is significant because it means Video is now one of the most stable open source video production tools available. is the tool ecosystem for this really that bad? dang\nRosalee: Chantelle Sadly.\nRosalee: (The open source ones.)\nRosalee: Blender is stable.\nRosalee: The rest….less so.\nRosalee: (I guess ffmpeg is also pretty stable, if you like writing shell scripts. :slightly_smiling_face: )\nChantelle: guess that's proof you're working on something very useful then :p\nRosalee: True.\nRosalee: I want to add a nice GUI editor next.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 11,
        "duration_minutes": 21.18,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:21:24.000230",
          "text": "<@Vincenzo> Thank you, that makes sense. (Although fwiw I was using an async channel without a limit)."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:21:59.000104",
          "text": "It just seems like its really easy to cause Racket to segfault when making callbacks. Although that ‘might’ just be ffmpeg."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-28T13:38:23.000262",
          "text": "<@Rosalee>\n\n&gt; Video v0.2-beta is now mature enough for programmers to reliably use it without segfaults. This is significant because it means Video is now one of the most stable open source video production tools available.\n\nis the tool ecosystem for this really that bad? dang"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:41:17.000423",
          "text": "<@Chantelle> Sadly."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:41:21.000326",
          "text": "(The open source ones.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:41:25.000009",
          "text": "Blender is stable."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:41:28.000317",
          "text": "The rest….less so."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:41:43.000062",
          "text": "(I guess ffmpeg is also pretty stable, if you like writing shell scripts. :slightly_smiling_face: )"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-28T13:42:04.000416",
          "text": "guess that's proof you're working on something very useful then :p"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:42:18.000412",
          "text": "True."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T13:42:35.000010",
          "text": "I want to add a nice GUI editor next."
        }
      ]
    },
    {
      "conversation_id": "191",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: I'm reading the [CODE] paper, very nice description of DSL making process!\nJacob: I especially like the explanation of the special syntax interposition points, very helpful\nGeorgeanna: is the package site broken? <[URL]\nJacob: Georgeanna it doesn't seem to be loading for me either\nJacob: Rosalee a question about Figure 8 line 3 in the [CODE] paper, the paragraphs accompanying the figure makes me think line 3 should read as [CODE] instead of [CODE]?\nJacob: or is [CODE] automatically prefixed with #%?\nRosalee: Jacob ugg.....yes, yes it should.\nRosalee: Thank you for catching that.\nRosalee: Looks like I need to make an errata page.\nJacob: No problem, sorry to have added to your plate!\nRosalee: Nah, it's great. I would rather know about it, to improve the paper. So thanks for catching it. :)\nChantelle: Rosalee so hyped for the #lang video talk :)\nRosalee: Chantelle I am too. ^.^ I hope to have v0.2 out of beta for it.\nRosalee: (I mean, it is usable now, but I want to add more effects.(\nRosalee: )*\nRosalee: But thanks. &lt;3\nRosalee: Jacob Thanks again for reporting it, I’ve now set up an errata page: <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 17,
        "duration_minutes": 163.32,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Jacob",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-08-28T18:36:02.000152",
          "text": "I'm reading the `Super 8 Languages for Making Movies` paper, very nice description of DSL making process!"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-28T18:37:06.000089",
          "text": "I especially like the explanation of the special syntax interposition points, very helpful"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-28T18:42:13.000359",
          "text": "is the package site broken? <https://pkgd.racket-lang.org/pkgn/search?q=dotenv+>"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-28T18:43:35.000126",
          "text": "<@Georgeanna> it doesn't seem to be loading for me either"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-28T18:46:56.000091",
          "text": "<@Rosalee> a question about Figure 8 line 3 in the `Super 8 Languages for Making Movies` paper, the paragraphs accompanying the figure makes me think line 3 should read as `(provide (rename-out [#%video-module-begin #%module-begin])` instead of `(provide (rename-out [#%video-module-begin module-begin])`?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-28T18:47:12.000006",
          "text": "or is `module-begin` automatically prefixed with #%?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T19:35:13.000149",
          "text": "<@Jacob> ugg.....yes, yes it should."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T19:35:23.000201",
          "text": "Thank you for catching that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T19:37:23.000040",
          "text": "Looks like I need to make an errata page."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-08-28T19:40:28.000198",
          "text": "No problem, sorry to have added to your plate!"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T19:50:18.000028",
          "text": "Nah, it's great. I would rather know about it, to improve the paper. So thanks for catching it. :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-28T19:50:47.000111",
          "text": "<@Rosalee> so hyped for the #lang video talk :)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T20:01:24.000273",
          "text": "<@Chantelle> I am too.  ^.^ I hope to have v0.2 out of beta for it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T20:01:53.000107",
          "text": "(I mean, it is usable now, but I want to add more effects.("
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T20:01:56.000131",
          "text": ")*"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T20:02:06.000085",
          "text": "But thanks. &lt;3"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-28T21:19:21.000069",
          "text": "<@Jacob> Thanks again for reporting it, I’ve now set up an errata page: <http://lang.video/pub/icfp2017/errata.html>"
        }
      ]
    },
    {
      "conversation_id": "192",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karina: I’m trying to walk an xexpr and insert new nodes at various points\nKarina: i’ve started going down the route using [CODE], but it seems more complicated than it needs to be\nKarina: is there something like [CODE]?\nGeorgeanna: Karina regular map seems to work on them just fine…\nChantelle: Karina does the [CODE] package have what you need?\nKarina: oh, i think sxml might, thanks Chantelle ; fyi Georgeanna yes map works fine, but i was hoping to do something like “replace every [CODE] node with a different node”, which ends up being pretty verbose to do recursively",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 706.83,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Karina"
        ]
      },
      "timeline": [
        {
          "user": "Karina",
          "timestamp": "2017-08-28T22:01:03.000143",
          "text": "I’m trying to walk an xexpr and insert new nodes at various points"
        },
        {
          "user": "Karina",
          "timestamp": "2017-08-28T22:01:31.000226",
          "text": "i’ve started going down the route using `match`, but it seems more complicated than it needs to be"
        },
        {
          "user": "Karina",
          "timestamp": "2017-08-28T22:01:43.000201",
          "text": "is there something like `map-nodes`?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-28T22:23:07.000024",
          "text": "<@Karina> regular map seems to work on them just fine…"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-28T22:58:29.000211",
          "text": "<@Karina> does the `sxml` package have what you need?"
        },
        {
          "user": "Karina",
          "timestamp": "2017-08-29T09:47:53.000280",
          "text": "oh, i think sxml might, thanks <@Chantelle> ; fyi <@Georgeanna> yes map works fine, but i was hoping to do something like “replace every `&lt;a&gt;` node with a different node”, which ends  up being pretty verbose to do recursively"
        }
      ]
    },
    {
      "conversation_id": "193",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Rosalee seems like you could just have the version on your web page have the corrections in it\nRosalee: Latarsha Yup. And I will do that soon. But it also seems reasonable to point out the diffs explicitly.\nLatarsha: here, [CODE] won't change that, because [CODE] in the second case is really just producing some s-expressions\nLatarsha: [CODE] doesn't change that because [CODE] is a top-form\nLatarsha: I think the difference is that the reader for [CODE] (or maybe for [CODE]) adds the [CODE], not some part of [CODE] itself",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 167.6,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T08:41:06.000308",
          "text": "<@Rosalee> seems like you could just have the version on your web page have the corrections in it"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-29T09:58:25.000445",
          "text": "<@Latarsha> Yup. And I will do that soon. But it also seems reasonable to point out the diffs explicitly."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T11:26:23.000125",
          "text": "here, `with-module-reading-parameterization` won't change that, because `read` in the second case is really just producing some s-expressions"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T11:26:46.000642",
          "text": "`expand-to-top-form` doesn't change that because `module` is a top-form"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T11:28:42.000588",
          "text": "I think the difference is that the reader for `#lang` (or maybe for `racket`) adds the `#%module-begin`, not some part of `read` itself"
        }
      ]
    },
    {
      "conversation_id": "194",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: At the moment, searching for [CODE] on <[URL] goes to <[URL] which spins for a minute before giving [CODE] [CODE_BLOCK]\nCorey: Not sure if that's a bat signal for Stefani Sharolyn Delmy or other\nCorey: New topic. This surprised me: [CODE_BLOCK] That is, [CODE] files get [CODE] added on [CODE], but module expression files do not. Even using [CODE] and [CODE] doesn't add [CODE].\nCorey: Of course it's N/A in most cases because you'd probably [CODE] that before rewriting it, like the [CODE] and [CODE] annotators do, and _that_ will add the [CODE]. (I just had an odd situation where I can't [CODE] the whole thing.) ¯\\_(ツ)_/¯",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 46.55,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-08-29T10:35:22.000427",
          "text": "At the moment, searching for `foo` on <https://pkgs.racket-lang.org/> goes to <https://pkgd.racket-lang.org/pkgn/search?q=foo> which spins for a minute before giving `502 Proxy Error`\n\n```\nProxy Error\n\nThe proxy server received an invalid response from an upstream server.\nThe proxy server could not handle the request GET /pkgn/search.\n\nReason: Error reading from remote server\n\nApache/2.4.7 (Ubuntu) Server at <http://pkgd.racket-lang.org|pkgd.racket-lang.org> Port 443\n```"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-29T10:40:49.000376",
          "text": "Not sure if that's a bat signal for <@Stefani> <@Sharolyn> <@Delmy> or other"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-29T11:21:29.000606",
          "text": "New topic. This surprised me:\n\n```\n$ echo \"#lang racket\" &gt; lang.rkt\n\n$ echo \"(module mod racket)\" &gt; mod.rkt\n\n$ racket -e '(require syntax/modread) (with-module-reading-parameterization (λ () (with-input-from-file \"lang.rkt\" read)))'\n'(module lang racket (#%module-begin))\n\n$ racket -e '(require syntax/modread) (with-module-reading-parameterization (λ () (with-input-from-file \"mod.rkt\" read)))'\n'(module mod racket)\n```\n\nThat is, `#lang` files get `#%module-begin` added on `read`, but module expression files do not.  Even using `with-module-reading-parameterization` and `expand-to-top-form` doesn't add `#%module-begin`."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-29T11:21:55.000115",
          "text": "Of course it's N/A in most cases because you'd probably `expand` that before rewriting it, like the `errortrace` and `gui-debugger` annotators do, and _that_ will add the `#%module-begin`. (I just had an odd situation where I can't `expand` the whole thing.) ¯\\_(ツ)_/¯"
        }
      ]
    },
    {
      "conversation_id": "195",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: [CODE_BLOCK] clue me? I thought dotting the args was the right way to do variable arity\nGeorgeanna: also really confused why that is about the number of clauses… not the pattern itself?\nChantelle: I think you want [CODE] instead of [CODE]\nMarlin: First, I think the number of sub-patterns in each match*-pattern needs to be the same -- and needs to be equal to the number of arguments, where the rest argument counts as 1.\nChantelle: or [CODE]\nGeorgeanna: same as: [(\\`(,r ,c)) (board-ref board (-&gt;coord r c))], yes?\nGeorgeanna: gah\nGeorgeanna: damnit\nChantelle: generally I avoid quoting in match patterns, they're a complex enough grammar as is\nChantelle: unless matching against something with lots of symbolic literals I want to ignore\nGeorgeanna: I got tangled up rewriting this and forgot the board argument… now it passes tests: [CODE_BLOCK]\nGeorgeanna: I’m not sure how to say that in non-quotey form. cons… list* ?\nMarlin: list-rest?\nMarlin: well, the first one could just be list\nChantelle: FWIW maybe a [CODE] utility would be appropriate: [CODE_BLOCK]\nGeorgeanna: I’ve never seen that… cool, thanks\nGeorgeanna: wait. I’ve never seen that because it doesn’t exist?\nChantelle: it doesn't, I'm hypothesizing\nGeorgeanna: haha\nChantelle: I don't think it'd be tricky to make though\nChantelle: oh wait you're using multiple arguments to mean a list?\nGeorgeanna: ok. they can both be plain list patterns… that does seem cleaner\nChantelle: how is [CODE] supposed to be called exactly? either [CODE] or [CODE]?\nGeorgeanna: [CODE_BLOCK]\nGeorgeanna: yes, both. I’m gonna have to use one for a wire protocol and don’t want to write [CODE] but I want to write clean and easy tests and internal playtesting\nGeorgeanna: is there a parameter or something to un-truncate test failure output?\nChantelle: for rackunit? how is your output being truncated?\nGeorgeanna: the error coming up for match failures includes the call args, which is a 10x10 board… but the tail is the important part for me\nChantelle: ohhh\nGeorgeanna: moot point now, but I’d like to roll that up in some handler\nChantelle: I'd be surprised if there's a way to do that at all\nChantelle: you could make your board print differently with [CODE]\nGeorgeanna: boo\nChantelle: huh, there's no [CODE] built in to racket for use with [CODE]\nGeorgeanna: huh. haven’t used that one either… not sure when I’d want to pick that over the match one\nChantelle: [CODE] will report better arity information in this case\nChantelle: the [CODE] form constructs a function with an arity claiming to accept any number of arguments, but I think [CODE] is smarter than that and makes a function that knows it accepts either two or three arguments\nChantelle: [CODE_BLOCK]\nGeorgeanna: yeah.. the arity mismatch message truncates the one arg and shows the rest. that’s nice\nGeorgeanna: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 40,
        "duration_minutes": 28.97,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:11:58.000153",
          "text": "```\n(define/match (board-ref . args)\n  [(r c) (board-ref board (-&gt;coord r c))]\n  [(rc)  (hash-ref (board-b board) rc)])\n\n;; battleship.rkt:42:3: match: wrong number of match clauses, expected 1 and got 2\n;;   in: (r c)\n```\n\nclue me? I thought dotting the args was the right way to do variable arity"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:12:26.000310",
          "text": "also really confused why that is about the number of clauses… not the pattern itself?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:15:45.000241",
          "text": "I think you want `((list* r c))` instead of `(r c)`"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-08-29T18:15:47.000114",
          "text": "First, I think the number of sub-patterns in each match*-pattern needs to be the same -- and needs to be equal to the number of arguments, where the rest argument counts as 1."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:15:54.000030",
          "text": "or `((cons r c))`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:16:03.000216",
          "text": "same as: [(\\`(,r ,c)) (board-ref board (-&gt;coord r c))], yes?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:16:06.000131",
          "text": "gah"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:16:17.000350",
          "text": "damnit"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:16:28.000038",
          "text": "generally I avoid quoting in match patterns, they're a complex enough grammar as is"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:16:38.000069",
          "text": "unless matching against something with lots of symbolic literals I want to ignore"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:19:11.000323",
          "text": "I got tangled up rewriting this and forgot the board argument… now it passes tests:\n\n```\n(define/match (board-ref . args)\n  [(`(,board . (,r ,c))) (board-ref board (-&gt;coord r c))]\n  [(`(,board . (,rc)))  (hash-ref (board-b board) rc)])\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:19:27.000344",
          "text": "I’m not sure how to say that in non-quotey form. cons… list* ?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-08-29T18:20:17.000036",
          "text": "list-rest?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-08-29T18:21:36.000023",
          "text": "well, the first one could just be list"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:22:28.000225",
          "text": "FWIW maybe a `define/convert` utility would be appropriate:\n\n```\n(define/convert (board-ref b (rc #:convert -&gt;coord))\n  (hash-ref (board-b board rc)))\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:23:14.000204",
          "text": "I’ve never seen that… cool, thanks"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:23:30.000073",
          "text": "wait. I’ve never seen that because it doesn’t exist?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:23:40.000003",
          "text": "it doesn't, I'm hypothesizing"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:23:44.000035",
          "text": "haha"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:23:52.000226",
          "text": "I don't think it'd be tricky to make though"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:26:08.000279",
          "text": "oh wait you're using multiple arguments to mean a list?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:26:21.000007",
          "text": "ok. they can both be plain list patterns… that does seem cleaner"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:26:34.000325",
          "text": "how is `board-ref` supposed to be called exactly? either `(board-ref b r c)` or `(board-ref b coord)`?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:27:09.000026",
          "text": "```\n(define/match (board-ref . args)\n  [((list board r c)) (board-ref board (-&gt;coord r c))]\n  [((list board rc))  (hash-ref (board-b board) rc)])\n\n;; vs\n\n(define/match (board-ref . args)\n  [(`(,board ,r ,c)) (board-ref board (-&gt;coord r c))]\n  [(`(,board ,rc))  (hash-ref (board-b board) rc)])\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:27:46.000189",
          "text": "yes, both. I’m gonna have to use one for a wire protocol and don’t want to write `string-&gt;coords` but I want to write clean and easy tests and internal playtesting"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:29:40.000354",
          "text": "is there a parameter or something to un-truncate test failure output?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:30:09.000103",
          "text": "for rackunit? how is your output being truncated?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:31:13.000321",
          "text": "the error coming up for match failures includes the call args, which is a 10x10 board… but the tail is the important part for me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:31:27.000072",
          "text": "ohhh"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:31:33.000046",
          "text": "moot point now, but I’d like to roll that up in some handler"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:31:53.000303",
          "text": "I'd be surprised if there's a way to do that at all"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:32:13.000370",
          "text": "you could make your board print differently with `gen:custom-write`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:32:23.000045",
          "text": "boo"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:33:54.000133",
          "text": "huh, there's no `define/case` built in to racket for use with `case-lambda`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:35:14.000151",
          "text": "huh. haven’t used that one either… not sure when I’d want to pick that over the match one"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:36:32.000105",
          "text": "`case-lambda` will report better arity information in this case"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:37:08.000050",
          "text": "the `define/match` form constructs a function with an arity claiming to accept any number of arguments, but I think `case-lambda` is smarter than that and makes a function that knows it accepts either two or three arguments"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T18:37:48.000144",
          "text": "```\n(define-simple-macro\n  (define/case f:id (~and clause [(arg:id ...) body:expr ...+]) ...)\n  (define f (case-lambda clause ...)))\n\n(define/case board-ref\n  [(b r c) (board-ref b (-&gt;coord r c))]\n  [(b rc)  (hash-ref (board-b b) rc)])\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:40:52.000150",
          "text": "yeah.. the arity mismatch message truncates the one arg and shows the rest. that’s nice"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T18:40:56.000091",
          "text": "```\n(define-simple-macro (define/case name (formals body ...+) ...)\n  (define name (case-lambda [formals body ...] ...)))\n\n(define/case board-ref2\n  [(board r c) (board-ref2 board (-&gt;coord r c))]\n  [(board rc)  (hash-ref (board-b board) rc)])\n```"
        }
      ]
    },
    {
      "conversation_id": "196",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Is there a cleaner/better way of saying either of these things? [CODE_BLOCK]\nGeorgeanna: I want to have something like [CODE] that takes a proc that returns strings (or just a string duplicated N times)\nGeorgeanna: Basically Ruby’s [CODE]\nGeorgeanna: but [CODE] also feels stilted\nGeorgeanna: there’s a bug in GUI’s rectangles: [CODE_BLOCK]\nChantelle: Georgeanna there might be a way to use [CODE] to do that more cleanly, but it might also be a hassle",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 104.1,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T19:12:10.000115",
          "text": "Is there a cleaner/better way of saying either of these things?\n\n```\n(define (board-&gt;string board)\n  (string-join\n   (for/list ([r (in-list rows)])\n     (string-join\n      (for/list ([c (in-list cols)])\n        (-&gt;marker (board-ref board r c)))))\n   \"\\n\"))\n\n(module+ test\n  (check-equal? (board-&gt;string (make-board))\n                (string-join\n                 (for/list ([r (in-list rows)])\n                   \". . . . . . . . . .\")\n                 \"\\n\")))\n```"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T19:12:34.000084",
          "text": "I want to have something like `build-string` that takes a proc that returns strings (or just a string duplicated N times)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T19:12:51.000115",
          "text": "Basically Ruby’s `String#*`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T19:13:01.000196",
          "text": "but `board-&gt;string` also feels stilted"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-08-29T20:39:58.000014",
          "text": "there’s a bug in GUI’s rectangles:\n\n```\n(require racket/gui/base)\n\n(define (draw-box broken)\n  (define canvas (make-bitmap 51 28))\n  (define dc (send canvas make-dc))\n\n  (send dc set-brush \"WhiteSmoke\" 'solid)\n\n  (send dc set-pen \"black\" (if broken 1 2) 'long-dash)\n\n  (send dc draw-rectangle 1 1 50 25)\n\n  canvas)\n\n(printf \"only dashed on the sides:~n\")\n(draw-box 'broken)\n(printf \"correctly dashed, but needs to be 2x wide:~n\")\n(draw-box #f)\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T20:56:16.000107",
          "text": "<@Georgeanna> there might be a way to use `math/array` to do that more cleanly, but it might also be a hassle"
        }
      ]
    },
    {
      "conversation_id": "197",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: are all packages in the main distribution hosted in github repos under the \"racket\" organization?\nLatarsha: Chantelle there are maybe a couple exceptions\nChantelle: Latarsha if new packages were added to the main distribution though, they'd go under the racket org?\nLatarsha: that depends if they already existed someewhere else\nLatarsha: in which case they would maybe stay there\nLatarsha: there aren't really any rules here\nChantelle: gotcha\nLatarsha: Audria <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 768.47,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T21:48:13.000181",
          "text": "are all packages in the main distribution hosted in github repos under the \"racket\" organization?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T21:51:35.000029",
          "text": "<@Chantelle> there are maybe a couple exceptions"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T21:52:33.000088",
          "text": "<@Latarsha> if new packages were added to the main distribution though, they'd go under the racket org?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T21:53:07.000028",
          "text": "that depends if they already existed someewhere else"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T21:53:15.000171",
          "text": "in which case they would maybe stay there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-29T21:53:26.000191",
          "text": "there aren't really any rules here"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-29T21:57:23.000062",
          "text": "gotcha"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-30T10:36:41.000254",
          "text": "<@Audria> <https://courses.edx.org/courses/course-v1:UBCx+SPD1x+2T2016/course/>"
        }
      ]
    },
    {
      "conversation_id": "198",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Audria: I'd love to do a HtDP certified course on a MOOC one day. What are the chances of something like that happening?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Audria"
        ]
      },
      "timeline": [
        {
          "user": "Audria",
          "timestamp": "2017-08-30T05:01:16.000295",
          "text": "I'd love to do a HtDP certified course on a MOOC one day. What are the chances of something like that happening?"
        }
      ]
    },
    {
      "conversation_id": "199",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: re the \"tan boxes\" in docs -- that say e.g. [CODE] -- is there a plan for [CODE] to be a hyperlink back to the package server?\nLatarsha: Corey I think it would be nice -- does that count as a plan? :wink:\nCorey: :slightly_smiling_face:\nCorey: I keep stumbling on things searching in the docs, that look interesting, and it's a little unclear today what \"comes with Racket\" vs. is a separate package. Also lazy me wants to just click to learn more about the author, see the source, etc.\nCorey: I didn't know if this was missing on purpose, because it's tricky or difficult, vs. just not done yet\nLatarsha: I think the unclarity about what \"comes with Racket\" is somewhat intentional\nLatarsha: and the rest is just not done yet\nCorey: Fair enough. But then, \"comes from where\" is still interesting, to me :slightly_smiling_face:\nCorey: I'll see if this is something I could try to help with, although atm I already have several engines spread across several garage floors so maybe I shouldn't try to take on another right now.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 9,
        "duration_minutes": 3.93,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-08-30T19:30:16.000206",
          "text": "re the \"tan boxes\" in docs -- that say e.g. `(require foo)    package: foo-lib` -- is there a plan for `foo-lib` to be a hyperlink back to the package server?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-30T19:30:48.000019",
          "text": "<@Corey> I think it would be nice -- does that count as a plan? :wink:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-30T19:30:52.000093",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-30T19:31:40.000133",
          "text": "I keep stumbling on things searching in the docs, that look interesting, and it's a little unclear today what \"comes with Racket\" vs. is a separate package. Also lazy me wants to just click to learn more about the author, see the source, etc."
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-30T19:32:17.000031",
          "text": "I didn't know if this was missing on purpose, because it's tricky or difficult, vs. just not done yet"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-30T19:32:39.000111",
          "text": "I think the unclarity about what \"comes with Racket\" is somewhat intentional"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-30T19:32:52.000079",
          "text": "and the rest is just not done yet"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-30T19:33:01.000150",
          "text": "Fair enough. But then, \"comes from where\" is still interesting, to me :slightly_smiling_face:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-30T19:34:12.000176",
          "text": "I'll see if this is something I could try to help with, although atm I already have several engines spread across several garage floors so maybe I shouldn't try to take on another right now."
        }
      ]
    },
    {
      "conversation_id": "200",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: how do you tell scribble that an identifier is exported from two modules? in my case, one module reprovides everything from a bundle of modules\nCorey: Oh wow. I went to file an issue and discovered this from four days ago: <[URL] Chantelle what is this remote mind control you are doing to me :open_mouth:\nChantelle: Corey I finally got my future vision machine working ;)\nVincenzo: Chantelle For scribble and exporting from two modules: you probably want to use [CODE] with [CODE] and use [CODE] to list multiple modules (instead of having [CODE] generate a [CODE] with a single module)\nChantelle: Vincenzo thanks!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 743.87,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-30T23:33:26.000016",
          "text": "how do you tell scribble that an identifier is exported from two modules? in my case, one module reprovides everything from a bundle of modules"
        },
        {
          "user": "Corey",
          "timestamp": "2017-08-31T11:39:32.000739",
          "text": "Oh wow. I went to file an issue and discovered this from four days ago: <https://github.com/racket/scribble/issues/135> <@Chantelle> what is this remote mind control you are doing to me :open_mouth:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-31T11:46:31.000248",
          "text": "<@Corey> I finally got my future vision machine working ;)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-31T11:54:50.000638",
          "text": "<@Chantelle> For scribble and exporting from two modules: you probably want to use `#:no-declare` with `defmodule` and use `declare-exporting` to list multiple modules (instead of having `defmodule` generate a `declare-exporting` with a single module)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-08-31T11:57:18.000745",
          "text": "<@Vincenzo> thanks!"
        }
      ]
    },
    {
      "conversation_id": "201",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Audria: Thank you!\nAudria: Seems I have missed enrollment. Does it repeat each year?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 2.43,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Audria"
        ]
      },
      "timeline": [
        {
          "user": "Audria",
          "timestamp": "2017-08-31T07:53:17.000091",
          "text": "Thank you!"
        },
        {
          "user": "Audria",
          "timestamp": "2017-08-31T07:55:43.000007",
          "text": "Seems I have missed enrollment. Does it repeat each year?"
        }
      ]
    },
    {
      "conversation_id": "202",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Rosalee How did you resolve the [CODE] problem with acmart? I wonder whether it makes sense to add [CODE] to \"acmart-load.tex\".",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-31T08:09:46.000244",
          "text": "<@Rosalee> How did you resolve the `\\renewcommand{\\rmdefault}{ptm}` problem with acmart? I wonder whether it makes sense to add `\\renewcommand{\\renewrmdefault}{}` to \"acmart-load.tex\"."
        }
      ]
    },
    {
      "conversation_id": "203",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: I don't know -- it looked to me like it was in the future",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-31T09:52:24.000120",
          "text": "I don't know -- it looked to me like it was in the future"
        }
      ]
    },
    {
      "conversation_id": "204",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Is there any easy way to change the font on comments in scribble?\nRosalee: errr. slideshow.\nRosalee: I mean, I know I could just put a pict in there, but then I have to manually handle multiple lines.)\nTilda: Vincenzo Rosalee What's the current status of DrRacket 6.10 on Win10Creators? Is it stable enough that I should direct students to install it, or should I still direct them to Leif's workaround (<[URL] -- and if so, Leif, is there a version of this vm with 6.10 installed?\nVincenzo: Tilda I think Robby's most recent workaround (included in 6.10) is effective for everyone. At least, I don't know of anyone still having trouble with 6.10 and Windows Creator Update\nVincenzo: Rosalee I don't recall a way to change the style of comments\nTilda: Thanks. I'll holler if I find any :wink:\nCarson: I had 2 problems with DrRacket 6.10 on Windows 10:\nCarson: 1. unknown certificate\nCarson: 2. \"Copy from version\" crashing DrRacket every time it was run\nCarson: 1st is not a big deal but 2nd is problematic if you don't want to start with vanilla installation\nLatarsha: Carson I don't think the second has been reported\nCarson: Latarsha it has been reported on 2nd of August: <[URL]\nLatarsha: Carson If that's your report, more detail would be great\nCarson: Latarsha is there a way to force the migration again (I have all packages migrated now) or do I need to reinstall Racket?\nLatarsha: Carson I'm not sure\nCarson: Ok, I will try reinstall\nCarson: Latarsha it appears some individual package installation is sufficient to crash DrRacket - I just did it with installing racketscript from gui\nCarson: more details on the github issue\nLatarsha: great, thanks\nLatarsha: what happens if you remove and then reinstall that pkg from the command line with [CODE]?\nCarson: command line install works with no problem/no errors\nLatarsha: ok good to know\nCarson: Latarsha I've just tried to install Racketscript from command line again this time with no administrative rights for cmd.exe - it resulted in access violation. If that's the main issue then running DrRacket with administrative rights didn't help to alleviate problem.\nLatarsha: Carson I doubt that I can figure out further what's going on -- probably Vincenzo or Tina would need to take a look, and I think they're both traveling today\nCarson: No worries - I am fine with my installation, just tried to narrow down the problem.\nKimbery: I admit I don’t know the syntax arming system as well as I probably should. Hackett’s typeclass dictionary elaborator currently works by recursively taking syntax objects apart and putting them back together again, and I’m pretty sure that will break on code that refers to macros that use [CODE].\nJacob: I'd be interested in any references explaining the motivating reasons for having a syntax arming system, I've browsed through the online documentation but don't really understand the purpose of having such a feature.\nJacob: It seems weird to me that syntax could be dangerous but then you have people hacking strange things people least expect to be a threat\nKimbery: The purpose is so that macros can serve as safe abstraction barriers. For example, a macro can expand to some identifier that is not exported by a module, call it [CODE]. The module that defines the macro may expect that users will never be able to call [CODE] directly, since the macro enforces some invariants that could be broken if [CODE] were invoked on its own. A naughty/malicious user could expand a use of the macro using [CODE], then break the syntax object apart and pull out the [CODE] syntax object. That identifier could then be placed within another syntax object, allowing the malicious user to use [CODE] without conforming to the invariants enforced by the macro.\nKimbery: The syntax arming system prevents that from happening, since the macro author can protect the syntax object with a code inspector that a malicious user will not have access to. That way, breaking apart the syntax object will taint the resulting syntax, and the user will not be able to get access to [CODE] by cheating.\nJacob: ahhh that finally makes sense to me\nJacob: so that's how macros are able to prevent users from abusing their own identifiers that are created at expand sites\nJacob: I thought that was all due to module system being able to prevent private identifiers from being exported or otherwise used not as prescribed by macros but I'm now seeing that syntax arming has a role to play regarding that.\nChantelle: imagine if you exported a function and someone was able to inspect it and get all internal helper functions it called, and then call those helpers directly while skipping contracts and the module system, _and_ they could do that without reflection\nKimbery: Yes. The tricky thing is that Hackett’s elaborator needs to walk an entire syntax object and replace certain bits of it. The current implementation is sort of a hack.\nKimbery: I think I might be able to do something by explicitly disarming/rearming syntax, but I don’t know how to arrange to have the right code inspector.\nChantelle: Kimbery do you think defining typeclass methods as syntax parameters might get around that? so the elaborator could parameterize them to the expected types?\nChantelle: or using a syntax parameter to communicate with the methods indirectly\nJacob: ok then one would apply a syntax guard/armor or whatever it is, to those private internal identifiers that are inserted at expansion sites, to prevent users from being able to directly use those identifiers? The armor system automatically detects non-legal use or does macro has to inspect to verify identifiers are being properly used along with assistance of the armor system? I recall seeing something about syntax being tainted(able)\nKimbery: Chantelle The trouble is that the elaborator has to run _after_ typechecking, and typechecking is expansion. The constraint solver looks at fully-solved types, which are only known after the typechecker finishes its primary pass.\nKimbery: So what I really want is a delimited/multi-phase expansion process. I want to be able to tell [CODE] to expand something recursively, but stop when it sees a certain identifier. Currently, that isn’t possible.\nKimbery: The stop-list argument to [CODE] _sounds_ like what I want, but using the stop list prevents the macroexpander from recursively expanding things like definitions.\nKimbery: This is one of the main things I want to discuss in-person with some people at RacketCon. :slightly_smiling_face:\nChantelle: good idea :P\nJacob: indeed, sounds like one of those that are best solved with in-person help\nKimbery: Jacob Yes, the macroexpander will “taint” armed syntax objects that are pulled apart (using [CODE]) without first being disarmed. Tainted syntax objects cannot be used in the expansion of a macro; the macroexpander will halt with an error.\nKimbery: Using the cute dye pack analogy, opening a syntax object without disarming the dye packs first causes the dye packs to explode.\nJacob: whoosh! Very cute\nKimbery: <[URL]\nChantelle: racket folks love their analogies\nJacob: haha yes, pretty much the imagery that's occupying my mind\nJacob: I'm guessing there's no way for malicious users to disarm syntax. The macroexpander somehow arranges for the original macros to only be allowed to disarm syntax they create?\nKimbery: That’s the part I understand less well. There is a hierarchy of _code inspectors_ that have privileges to arm/disarm syntax objects, but I don’t fully understand how they work at the moment.\nChantelle: completely unrelated: the static information bound by [CODE] is a [CODE] value and the docs for [CODE] say not all of the predicate, accessors, and mutators might be known. When can that happen? I can only construct situations with [CODE] where they're either all bound or the transformer binding itself isn't created. Does it only apply to \"custom\" infos and not those created by [CODE]?\nKimbery: Jacob <[URL]\nKimbery: Chantelle IIRC, it can happen if you use [CODE] instead of [CODE], since [CODE] provides the superclass structure type via a dynamic runtime expression.\nChantelle: Kimbery that makes sense, but the dynamic expression would fall into the category of things that make custom infos and not things that use infos created directly by [CODE] right?\nJacob: Kimbery thanks for the link\nKimbery: Chantelle Not necessarily. You can get access to the struct info for a [CODE]-defined structure as a runtime value by using the [CODE] identifier.\nJacob: and for the clear explanation\nKimbery: Chantelle I think modern Rackets also make the struct id itself serve as a reflective struct-info object using the properties system, but I forget if that’s true or not.\nChantelle: Kimbery wait I think I just got it - the #:super option accepts the _runtime_ reflective information ([CODE]) but the transformer binding has the _static_ reflective stuff ([CODE]) and only the latter contains identifiers\nKimbery: Right.\nChantelle: those two categories of info should really be called out more in the docs\nKimbery: The docs for structs are a little confusing. My guess is because the struct system has evolved a lot over the years. :)\nChantelle: for one, it explains why you can't get field names at runtime which I bet is surprising to a lot of racket folks the first time they find that out\nKimbery: Structs, according to the Racket runtime, don’t have any notion of field names. If you look at [CODE], you will see it defines an accessor function that accesses fields _by index_.\nChantelle: yes but lots of forms have the ability to do stuff with struct field names, they just do it at compile time with the reflective info\nChantelle: it's easy for people to not get that distinction, is my point\nKimbery: Right. Struct accessors are a concept entirely defined by the [CODE] macro, which adds a static information layer on top of the runtime values.\nChantelle: and it's even _more_ confusing because the struct static info only uses \"accessor\" identifiers, the original \"field\" identifiers are not preserved, so forms like [CODE] will _construct_ the accessors from the field names themselves\nKimbery: Hmm, it looks like I was slightly wrong: modern Rackets _do not_ make the constructor bound by [CODE] a valid [CODE] value, only the [CODE] identifier.\nKimbery: And yes, [CODE] is totally broken.\nKimbery: (Unfixably so.)\nChantelle: I mean, there's no way for [CODE] to define accessors that don't fit the struct id + field id pattern\nChantelle: (I hope)\nKimbery: <[URL]\nChantelle: yeah that\nChantelle: I want to expose an api like struct copy in something though; guess that just means I need to provide an option to override the \"inferred magic accessor binding\" thing\nChantelle: gross to use though\nKimbery: I got deep into all this when I wrote [CODE]. :)\nChantelle: which is exactly what I'm using right now that led to this :) thanks btw\nChantelle: throwing some syntax classes in there for doing things with fields might be nice\nChantelle: today is one of those days where I'm really grateful for syntax-parse :)",
      "analysis_metadata": {
        "user_count": 8,
        "message_count": 85,
        "duration_minutes": 1457.05,
        "contains_question": true,
        "action_keywords": [
          "action",
          "complete",
          "create",
          "discuss",
          "finish",
          "fix",
          "implement",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Carson",
          "Chantelle",
          "Jacob",
          "Kimbery",
          "Latarsha",
          "Rosalee",
          "Tilda",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-08-31T15:24:33.000183",
          "text": "<@Vincenzo> Is there any easy way to change the font on comments in scribble?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-31T15:24:37.000104",
          "text": "errr. slideshow."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-08-31T15:25:07.000227",
          "text": "I mean, I know I could just put a pict in there, but then I have to manually handle multiple lines.)"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-08-31T18:02:51.000385",
          "text": "<@Vincenzo> <@Rosalee> What's the current status of DrRacket 6.10 on Win10Creators?  Is it stable enough that I should direct students to install it, or should I still direct them to Leif's workaround (<http://prl.ccs.neu.edu/blog/2017/05/26/racket-6-9-and-windows-10-creators-update/>) -- and if so, Leif, is there a version of this vm with 6.10 installed?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-31T18:20:41.000350",
          "text": "<@Tilda> I think Robby's most recent workaround (included in 6.10) is effective for everyone. At least, I don't know of anyone still having trouble with 6.10 and Windows Creator Update"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-08-31T18:20:59.000182",
          "text": "<@Rosalee> I don't recall a way to change the style of comments"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-08-31T18:21:45.000137",
          "text": "Thanks.  I'll holler if I find any :wink:"
        },
        {
          "user": "Carson",
          "timestamp": "2017-08-31T18:30:43.000095",
          "text": "I had 2 problems with DrRacket 6.10 on Windows 10:"
        },
        {
          "user": "Carson",
          "timestamp": "2017-08-31T18:30:56.000209",
          "text": "1. unknown certificate"
        },
        {
          "user": "Carson",
          "timestamp": "2017-08-31T18:31:30.000126",
          "text": "2. \"Copy from version\" crashing DrRacket every time it was run"
        },
        {
          "user": "Carson",
          "timestamp": "2017-08-31T18:33:30.000114",
          "text": "1st is not a big deal but 2nd is problematic if you don't want to start with vanilla installation"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-08-31T22:56:04.000066",
          "text": "<@Carson> I don't think the second has been reported"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T03:02:19.000289",
          "text": "<@Latarsha> it has been reported on 2nd of August: <https://github.com/racket/drracket/issues/131>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-01T09:54:53.000004",
          "text": "<@Carson> If that's your report, more detail would be great"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T10:01:22.000152",
          "text": "<@Latarsha> is there a way to force the migration again (I have all packages migrated now) or do I need to reinstall Racket?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-01T10:02:12.000110",
          "text": "<@Carson> I'm not sure"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T10:02:36.000107",
          "text": "Ok, I will try reinstall"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T11:35:12.000043",
          "text": "<@Latarsha> it appears some individual package installation is sufficient to crash DrRacket - I just did it with installing racketscript from gui"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T11:35:29.000031",
          "text": "more details on the github issue"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-01T11:35:35.000152",
          "text": "great, thanks"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-01T11:35:53.000490",
          "text": "what happens if you remove and then reinstall that pkg from the command line with `raco pkg install`?"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T11:40:59.000078",
          "text": "command line install works with no problem/no errors"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-01T11:41:08.000548",
          "text": "ok good to know"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T11:58:44.000017",
          "text": "<@Latarsha> I've just tried to install Racketscript from command line again this time with no administrative rights for cmd.exe - it resulted in access violation. If that's the main issue then running DrRacket with administrative rights didn't help to alleviate problem."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-01T11:59:28.000118",
          "text": "<@Carson> I doubt that I can figure out further what's going on -- probably <@Vincenzo> or <@Tina> would need to take a look, and I think they're both traveling today"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-01T12:00:21.000438",
          "text": "No worries - I am fine with my installation, just tried to narrow down the problem."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:28:03.000068",
          "text": "I admit I don’t know the syntax arming system as well as I probably should. Hackett’s typeclass dictionary elaborator currently works by recursively taking syntax objects apart and putting them back together again, and I’m pretty sure that will break on code that refers to macros that use `syntax-protect`."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:29:33.000364",
          "text": "I'd be interested in any references explaining the motivating reasons for having a syntax arming system, I've browsed through the online documentation but don't really understand the purpose of having such a feature."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:30:28.000464",
          "text": "It seems weird to me that syntax could be dangerous but then you have people hacking strange things people least expect to be a threat"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:32:12.000099",
          "text": "The purpose is so that macros can serve as safe abstraction barriers. For example, a macro can expand to some identifier that is not exported by a module, call it `private-id`. The module that defines the macro may expect that users will never be able to call `private-id` directly, since the macro enforces some invariants that could be broken if `private-id` were invoked on its own.\n\nA naughty/malicious user could expand a use of the macro using `local-expand`, then break the syntax object apart and pull out the `private-id` syntax object. That identifier could then be placed within another syntax object, allowing the malicious user to use `private-id` without conforming to the invariants enforced by the macro."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:33:19.000067",
          "text": "The syntax arming system prevents that from happening, since the macro author can protect the syntax object with a code inspector that a malicious user will not have access to. That way, breaking apart the syntax object will taint the resulting syntax, and the user will not be able to get access to `private-id` by cheating."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:33:24.000348",
          "text": "ahhh that finally makes sense to me"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:33:54.000358",
          "text": "so that's how macros are able to prevent users from abusing their own identifiers that are created at expand sites"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:34:55.000087",
          "text": "I thought that was all due to module system being able to prevent private identifiers from being exported or otherwise used not as prescribed by macros but I'm now seeing that syntax arming has a role to play regarding that."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:35:40.000264",
          "text": "imagine if you exported a function and someone was able to inspect it and get all internal helper functions it called,  and then call those helpers directly while skipping contracts and the module system, _and_ they could do that without reflection"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:36:25.000054",
          "text": "Yes. The tricky thing is that Hackett’s elaborator needs to walk an entire syntax object and replace certain bits of it. The current implementation is sort of a hack."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:36:41.000454",
          "text": "I think I might be able to do something by explicitly disarming/rearming syntax, but I don’t know how to arrange to have the right code inspector."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:37:03.000628",
          "text": "<@Kimbery> do you think defining typeclass methods as syntax parameters might get around that? so the elaborator could parameterize them to the expected types?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:37:13.000291",
          "text": "or using a syntax parameter to communicate with the methods indirectly"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:37:42.000309",
          "text": "ok then one would apply a syntax guard/armor or whatever it is, to those private internal identifiers that are inserted at expansion sites, to prevent users from being able to directly use those identifiers? The armor system automatically detects non-legal use or does macro has to inspect to verify identifiers are being properly used along with assistance of the armor system? I recall seeing something about syntax being tainted(able)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:38:29.000302",
          "text": "<@Chantelle> The trouble is that the elaborator has to run _after_ typechecking, and typechecking is expansion. The constraint solver looks at fully-solved types, which are only known after the typechecker finishes its primary pass."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:39:16.000204",
          "text": "So what I really want is a delimited/multi-phase expansion process. I want to be able to tell `local-expand` to expand something recursively, but stop when it sees a certain identifier. Currently, that isn’t possible."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:40:03.000312",
          "text": "The stop-list argument to `local-expand` _sounds_ like what I want, but using the stop list prevents the macroexpander from recursively expanding things like definitions."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:40:29.000412",
          "text": "This is one of the main things I want to discuss in-person with some people at RacketCon. :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:40:44.000062",
          "text": "good idea :P"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:41:04.000255",
          "text": "indeed, sounds like one of those that are best solved with in-person help"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:41:55.000385",
          "text": "<@Jacob> Yes, the macroexpander will “taint” armed syntax objects that are pulled apart (using `syntax-e`) without first being disarmed. Tainted syntax objects cannot be used in the expansion of a macro; the macroexpander will halt with an error."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:42:38.000359",
          "text": "Using the cute dye pack analogy, opening a syntax object without disarming the dye packs first causes the dye packs to explode."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:42:50.000517",
          "text": "whoosh! Very cute"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:42:54.000067",
          "text": "<https://en.wikipedia.org/wiki/Dye_pack>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:43:08.000203",
          "text": "racket folks love their analogies"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:43:12.000152",
          "text": "haha yes, pretty much the imagery that's occupying my mind"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:44:00.000410",
          "text": "I'm guessing there's no way for malicious users to disarm syntax. The macroexpander somehow arranges for the original macros to only be allowed to disarm syntax they create?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:45:03.000169",
          "text": "That’s the part I understand less well. There is a hierarchy of _code inspectors_ that have privileges to arm/disarm syntax objects, but I don’t fully understand how they work at the moment."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:45:20.000499",
          "text": "completely unrelated: the static information bound by `struct` is a `struct-info` value and the docs for `struct-info` say not all of the predicate, accessors, and mutators might be known. When can that happen? I can only construct situations with `struct` where they're either all bound or the transformer binding itself isn't created. Does it only apply to \"custom\" infos and not those created by `struct`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:45:28.000101",
          "text": "<@Jacob> <http://docs.racket-lang.org/reference/modprotect.html>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:46:35.000282",
          "text": "<@Chantelle> IIRC, it can happen if you use `#:super super-expr` instead of `super-id`, since `#:super` provides the superclass structure type via a dynamic runtime expression."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:47:12.000493",
          "text": "<@Kimbery> that makes sense, but the dynamic expression would fall into the category of things that make custom infos and not things that use infos created directly by `struct` right?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:47:52.000486",
          "text": "<@Kimbery> thanks for the link"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:48:00.000118",
          "text": "<@Chantelle> Not necessarily. You can get access to the struct info for a `struct`-defined structure as a runtime value by using the `struct:struct-id` identifier."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T14:48:11.000007",
          "text": "and for the clear explanation"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:48:26.000085",
          "text": "<@Chantelle> I think modern Rackets also make the struct id itself serve as a reflective struct-info object using the properties system, but I forget if that’s true or not."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:49:29.000067",
          "text": "<@Kimbery> wait I think I just got it - the #:super option accepts the _runtime_ reflective information (`struct-type?`) but the transformer binding has the _static_ reflective stuff (`struct-info?`) and only the latter contains identifiers"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:49:35.000230",
          "text": "Right."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:49:42.000222",
          "text": "those two categories of info should really be called out more in the docs"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:50:10.000061",
          "text": "The docs for structs are a little confusing. My guess is because the struct system has evolved a lot over the years. :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:50:10.000078",
          "text": "for one, it explains why you can't get field names at runtime which I bet is surprising to a lot of racket folks the first time they find that out"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:51:07.000368",
          "text": "Structs, according to the Racket runtime, don’t have any notion of field names. If you look at `make-struct-type`, you will see it defines an accessor function that accesses fields _by index_."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:51:33.000031",
          "text": "yes but lots of forms have the ability to do stuff with struct field names, they just do it at compile time with the reflective info"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:51:47.000022",
          "text": "it's easy for people to not get that distinction, is my point"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:51:49.000369",
          "text": "Right. Struct accessors are a concept entirely defined by the `struct` macro, which adds a static information layer on top of the runtime values."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:52:49.000047",
          "text": "and it's even _more_ confusing because the struct static info only uses \"accessor\" identifiers, the original \"field\" identifiers are not preserved, so forms like `struct-copy` will _construct_ the accessors from the field names themselves"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:53:06.000199",
          "text": "Hmm, it looks like I was slightly wrong: modern Rackets _do not_ make the constructor bound by `struct` a valid `struct-type?` value, only the `struct:id` identifier."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:53:33.000063",
          "text": "And yes, `struct-copy` is totally broken."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:53:47.000493",
          "text": "(Unfixably so.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:54:10.000024",
          "text": "I mean, there's no way for `struct` to define accessors that don't fit the struct id + field id pattern"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:54:18.000358",
          "text": "(I hope)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:54:27.000075",
          "text": "<https://github.com/racket/racket/issues/1399>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:55:13.000558",
          "text": "yeah that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:56:09.000335",
          "text": "I want to expose an api like struct copy in something though; guess that just means I need to provide an option to override the \"inferred magic accessor binding\" thing"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:56:19.000349",
          "text": "gross to use though"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T14:57:42.000221",
          "text": "I got deep into all this when I wrote `syntax/parse/class/struct-id`. :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:58:13.000519",
          "text": "which is exactly what I'm using right now that led to this :) thanks btw"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T14:58:31.000218",
          "text": "throwing some syntax classes in there for doing things with fields might be nice"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T15:41:36.000070",
          "text": "today is one of those days where I'm really grateful for syntax-parse :)"
        }
      ]
    },
    {
      "conversation_id": "205",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: should I default to using [CODE] on macros in public APIs? is there a reason not to for specific kinds of macros?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-08-31T16:30:08.000471",
          "text": "should I default to using `protect-out` on macros in public APIs? is there a reason not to for specific kinds of macros?"
        }
      ]
    },
    {
      "conversation_id": "206",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: So a bug report would be a good idea",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-08-31T22:56:17.000028",
          "text": "So a bug report would be a good idea"
        }
      ]
    },
    {
      "conversation_id": "207",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Yevette: Could anyone with more experience using WebSockets and custodians take a look at this issue <[URL] and the corresponding pull request? Thanks. /cc Sharolyn",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Yevette"
        ]
      },
      "timeline": [
        {
          "user": "Yevette",
          "timestamp": "2017-09-01T07:33:43.000114",
          "text": "Could anyone with more experience using WebSockets and custodians take a look at this issue <https://github.com/tonyg/racket-rfc6455/issues/7> and the corresponding pull request? Thanks. /cc <@Sharolyn>"
        }
      ]
    },
    {
      "conversation_id": "208",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Natosha: Chantelle No, [CODE] is for preventing untrusted/restricted code (eg in a sandbox) from importing things that would let them break out of the sandbox, crash the Racket process, etc. For example, [CODE] and [CODE] protect most of their exports (although it's hard to tell from the source, since most of the exports are just re-provided from built-in modules). Were you thinking of [CODE] instead?\nChantelle: Natosha ah yes that's the one I was thinking of, I got the two mixed up",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 50.35,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Natosha",
          "timestamp": "2017-09-01T12:34:42.000280",
          "text": "<@Chantelle> No, `protect-out` is for preventing untrusted/restricted code (eg in a sandbox) from importing things that would let them break out of the sandbox, crash the Racket process, etc. For example, `ffi/unsafe` and `racket/unsafe/ops` protect most of their exports (although it's hard to tell from the source, since most of the exports are just re-provided from built-in modules). Were you thinking of `syntax-protect` instead?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T13:25:03.000540",
          "text": "<@Natosha> ah yes that's the one I was thinking of, I got the two mixed up"
        }
      ]
    },
    {
      "conversation_id": "209",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: Leif and I sometimes talk about writing a Racket play\nNelson: it wouldn't be about Racket per-se\nNelson: but all the characters would be from the Racket docs\nNelson: plumbers, custodians, security guards, will executors\nChantelle: it sounds like it would play out as a revolution by an under-appreciated working class\nEun: You need a breach of contract as a plot point.\nChantelle: Eun slack needs a way to edit a message and make it point to the thread you meant to reply to :)\nChantelle: Nancie welcome!\nChantelle: clearly [CODE] represents the existing social hierarchy",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 94.13,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-09-01T15:45:08.000178",
          "text": "Leif and I sometimes talk about writing a Racket play"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-01T15:45:12.000234",
          "text": "it wouldn't be about Racket per-se"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-01T15:45:20.000124",
          "text": "but all the characters would be from the Racket docs"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-01T15:45:44.000278",
          "text": "plumbers, custodians, security guards, will executors"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T15:50:29.000469",
          "text": "it sounds like it would play out as a revolution by an under-appreciated working class"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-01T15:52:15.000444",
          "text": "You need a breach of contract as a plot point."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T15:52:58.000270",
          "text": "<@Eun> slack needs a way to edit a message and make it point to the thread you meant to reply to :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T17:13:03.000088",
          "text": "<@Nancie> welcome!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T17:19:16.000301",
          "text": "clearly `struct` represents the existing social hierarchy"
        }
      ]
    },
    {
      "conversation_id": "210",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: Threads?\nChantelle: threads ;)\nNancie: My employer has tasked me with giving a training presentation to my coworkers about 10 days from now. I think I'm going to build it with [CODE]\nNancie: Hope this is a good idea",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 317.7,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-09-01T16:00:28.000068",
          "text": "Threads?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-01T16:02:32.000040",
          "text": "threads ;)"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-01T21:16:35.000019",
          "text": "My employer has tasked me with giving a training presentation to my coworkers about 10 days from now. I think I'm going to build it with `lang #slideshow`"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-01T21:18:10.000064",
          "text": "Hope this is a good idea"
        }
      ]
    },
    {
      "conversation_id": "211",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: In that case who would be the privileged class? Lambda, cond, struct, cons?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-09-01T17:17:24.000100",
          "text": "In that case who would be the privileged class? Lambda, cond, struct, cons?"
        }
      ]
    },
    {
      "conversation_id": "212",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I heard that some code inspectors were _arming_ syntax objects. big if true\nStefani: <!everyone> Kimbery and I are going to do an \"Inside Racket Seminar\" on Hackett's implementation. Please tell me when you are available if you'd like to tune in live --- <[URL]\nClorinda: TL;DR if you're in China, you can't use the Racket users' google group, since google services are blocked\nChantelle: it should still be possible to _read_ the mailing lists at least, because of the archives at <[URL]\nClorinda: yah, and if you could successfully sign up for the mailing list, I would think you could email it and receive emails no problem\nClorinda: but I'm not sure if you can sign up w/o visiting the google groups site...?\nChantelle: You can. But I think the email server that the DNS redirects to is recognized by the firewall as a Google IP\nChantelle: I don't know much about this though\nChantelle: Nelson voila! <[URL]\nChantelle: I think `<[URL] might be down again\nNelson: [CODE] is up for me. Use that instead?\nChantelle: Nelson Can't sign in. I'm attempting to publish the [CODE] package.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 12,
        "duration_minutes": 2744.57,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "please",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Clorinda",
          "Kimbery",
          "Nelson",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-09-01T18:14:43.000246",
          "text": "I heard that some code inspectors were _arming_ syntax objects. big if true"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-09-02T06:53:01.000021",
          "text": "<!everyone> <@Kimbery> and I are going to do an \"Inside Racket Seminar\" on Hackett's implementation. Please tell me when you are available if you'd like to tune in live --- <http://whenisgood.net/g4xfey3>"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-09-02T14:51:45.000090",
          "text": "TL;DR if you're in China, you can't use the Racket users' google group, since google services are blocked"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-02T15:05:13.000053",
          "text": "it should still be possible to _read_ the mailing lists at least, because of the archives at <https://lists.racket-lang.org/users/archive/>"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-09-02T15:11:25.000061",
          "text": "yah, and if you could successfully sign up for the mailing list, I would think you could email it and receive emails no problem"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-09-02T15:11:37.000041",
          "text": "but I'm not sure if you can sign up w/o visiting the google groups site...?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-02T15:17:52.000015",
          "text": "You can. But I think the email server that the DNS redirects to is recognized by the firewall as a Google IP"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-02T15:18:16.000013",
          "text": "I don't know much about this though"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-03T01:16:03.000033",
          "text": "<@Nelson> voila! <https://github.com/racket/rackunit/pull/59#issuecomment-326784918>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-03T15:32:58.000033",
          "text": "I think `<http://pkgd.racket-lang.org|pkgd.racket-lang.org>` might be down again"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-03T15:55:05.000074",
          "text": "`pkgs.` is up for me. Use that instead?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-03T15:59:17.000011",
          "text": "<@Nelson> Can't sign in. I'm attempting to publish the `rackunit-typed` package."
        }
      ]
    },
    {
      "conversation_id": "213",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karina: I’d love to receive an @ everyone whenever its published though",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karina"
        ]
      },
      "timeline": [
        {
          "user": "Karina",
          "timestamp": "2017-09-02T13:03:54.000065",
          "text": "I’d love to receive an @ everyone whenever its published though"
        }
      ]
    },
    {
      "conversation_id": "214",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: anyone got any ideas about how to handle this? <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-02T13:46:18.000003",
          "text": "anyone got any ideas about how to handle this? <https://github.com/racket/racket/issues/1790#issuecomment-326743875>"
        }
      ]
    },
    {
      "conversation_id": "215",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: I might be overlooking something… but there is [CODE] and [CODE]… there is [CODE] but not [CODE]. Would having [CODE] be useful? I’m currently trying to clean up my code to not need such a thing, but it feels wordy\nKimbery: Georgeanna I would bet there’s no [CODE] because Racket programmers just don’t mutate things enough to consider writing it/asking for it\nGeorgeanna: I’m trying to convert this code into a let loop… but until I figure the exit logic out, I’m a bit stuck wanting that for now :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 3.93,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-02T21:28:04.000031",
          "text": "I might be overlooking something… but there is `define-values` and `set!-values`… there is `match-define` but not `match-set!`. Would having `match-set!` be useful? I’m currently trying to clean up my code to not need such a thing, but it feels wordy"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-02T21:30:28.000047",
          "text": "<@Georgeanna> I would bet there’s no `match-set!` because Racket programmers just don’t mutate things enough to consider writing it/asking for it"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-02T21:32:00.000018",
          "text": "I’m trying to convert this code into a let loop… but until I figure the exit logic out, I’m a bit stuck wanting that for now :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "216",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Same issue as <[URL]\nEun: <!everyone>: Less than two weeks left to get your RacketCon tickets at early bird prices! <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 859.27,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Eun"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-09-03T21:08:21.000015",
          "text": "Same issue as <https://racket.slack.com/archives/C06V96CKX/p1504017322000427>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-04T11:27:37.000120",
          "text": "<!everyone>: Less than two weeks left to get your RacketCon tickets at early bird prices! <http://con.racket-lang.org/#register>"
        }
      ]
    },
    {
      "conversation_id": "217",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: hey hey! I got racket back up and running in the scheme benchmarks! <[URL]\nGeorgeanna: seems like we lost some progress in 6.10?\nGeorgeanna: (not sure if that is 6.10 getting slower somewhere or others speeding up)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 0.28,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-04T02:47:36.000021",
          "text": "hey hey! I got racket back up and running in the scheme benchmarks! <http://ecraven.github.io/r7rs-benchmarks/benchmark.html>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-04T02:47:41.000161",
          "text": "seems like we lost some progress in 6.10?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-04T02:47:53.000154",
          "text": "(not sure if that is 6.10 getting slower somewhere or others speeding up)"
        }
      ]
    },
    {
      "conversation_id": "218",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: Is this the best way of getting whitespace characters into my console output? [CODE_BLOCK]\nNancie: Concatenating string parts together with converted whitespace characters\nNancie: Thinking I might write a little macro to provide convenient/dangerous interpolation that I'm accustomed to from PHP: <[URL]\nNancie: Oh, thanks! I made the mistake of originally building this example with [CODE]\nDelmy: Yeah that can be confusing. Good rule of thumb is that [CODE] formats for output (so for example [CODE] prints as simply [CODE]), while [CODE] formats so the output can be read back in as racket syntax (so [CODE] would print back as [CODE]).\nCorey: Nancie For some things at-expressions can be handy: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 300.88,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Delmy",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-09-04T14:08:18.000156",
          "text": "Is this the best way of getting whitespace characters into my console output?\n```\n(displayln (string-append \"hello\" (~a #\\tab) \"esteemed user\"))\n```"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-04T14:08:49.000062",
          "text": "Concatenating string parts together with converted whitespace characters"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-04T14:16:08.000050",
          "text": "Thinking I might write a little macro to provide convenient/dangerous interpolation that I'm accustomed to from PHP: <http://php.net/manual/en/language.types.string.php#language.types.string.syntax.double>"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-04T14:18:42.000103",
          "text": "Oh, thanks! I made the mistake of originally building this example with `writeln`"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-09-04T14:21:25.000072",
          "text": "Yeah that can be confusing. Good rule of thumb is that `display` formats for output (so for example `#\\a` prints as simply `a`), while `write` formats so the output can be read back in as racket syntax (so `#\\a` would print back as `#\\a`)."
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-04T19:09:11.000038",
          "text": "<@Nancie> For some things at-expressions can be handy: <http://www.greghendershott.com/2015/08/at-expressions.html>"
        }
      ]
    },
    {
      "conversation_id": "219",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: Normal escape characters work fine in racket literals so you could have done [CODE] and it would be the same afaik. Using [CODE] is fine too. What you did is also equivalent to [CODE].\nNelson: related: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 137.03,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-09-04T14:17:19.000101",
          "text": "Normal escape characters work fine in racket literals so you could have done `(displayln \"hello\\testeemed user\")` and it would be the same afaik. Using `string-append` is fine too. What you did is also equivalent to `(displayln (format \"hello~aesteemed user\" #\\tab\"))`."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-04T16:34:21.000108",
          "text": "related: <http://docs.racket-lang.org/reference/reader.html#%28part._parse-string%29>"
        }
      ]
    },
    {
      "conversation_id": "220",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karina: I’ve been working with web-server/servlet for a little while now, and I’ve been wondering, does it matter if I reuse [CODE] between requests? or should I get a new embed/url for each request?\nStefani: joelmccracken: it doesn't matter\nKarina: thanks sir\nStefani: The only way it matters is if you expect the argument to embed/url to return\nStefani: because they all return to the same s/s/d\nKarina: ah; didn’t realize that was possible! I don’t really understand what that would do, lol\nStefani: joelmccracken: here's an example <[URL]\nKarina: oh wow, that’s nuts. thanks. I might use this feature\nTamela: I have a weird bug in a large program due to subprocess I/O that affects Racket 6.10 only\nTamela: I understand there was a big rewrite for that version.\nTamela: Can anyone here help diagnose and work around it?\nTamela: I've gone about as deep as I think I can without entering the Racket internals.\nTamela: Unfortunately, I haven't, and in fact the bug is quite finicky\nTamela: It seems to depend, for example, on weird timing choices.\nTamela: This bug, from a friend, seems related: <[URL]\nTamela: It also has to do with juggling multiple Z3 processes and killing some of them.\nKimbery: Tamela Can you reproduce the bug on a nightly snapshot? <[URL]\nTamela: Kimbery Working on it\nTamela: The bug does not occur on nightlies\nTamela: So looks like it will be fixed when the next version of Racket 6.10 comes out. Thanks all!\nEun: Tamela: There are no planned updates for 6.10. The fix will most likely be in 6.11, which is scheduled for late October.\nTamela: Ok, great!",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 22,
        "duration_minutes": 1289.85,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Karina",
          "Kimbery",
          "Stefani",
          "Tamela"
        ]
      },
      "timeline": [
        {
          "user": "Karina",
          "timestamp": "2017-09-04T20:25:44.000028",
          "text": "I’ve been working with web-server/servlet for a little while now, and I’ve been wondering, does it matter if I reuse `embed/url` between requests? or should I get a new embed/url for each request?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-09-05T11:40:46.000403",
          "text": "joelmccracken: it doesn't matter"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T11:40:56.000505",
          "text": "thanks sir"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-09-05T11:41:33.000521",
          "text": "The only way it matters is if you expect the argument to embed/url to return"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-09-05T11:41:43.000218",
          "text": "because they all return to the same s/s/d"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T11:48:28.000629",
          "text": "ah; didn’t realize that was possible! I don’t really understand what that would do, lol"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-09-05T11:55:20.000575",
          "text": "joelmccracken: here's an example <https://github.com/racket/web-server/blob/master/web-server-lib/web-server/default-web-root/htdocs/servlets/examples/add-ssd.rkt>"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T11:57:01.000191",
          "text": "oh wow, that’s nuts. thanks. I might use this feature"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T14:34:51.000537",
          "text": "I have a weird bug in a large program due to subprocess I/O that affects Racket 6.10 only"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T14:34:59.000017",
          "text": "I understand there was a big rewrite for that version."
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T14:35:12.000654",
          "text": "Can anyone here help diagnose and work around it?"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T14:35:30.000040",
          "text": "I've gone about as deep as I think I can without entering the Racket internals."
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T16:23:15.000098",
          "text": "Unfortunately, I haven't, and in fact the bug is quite finicky"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T16:23:43.000348",
          "text": "It seems to depend, for example, on weird timing choices."
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T16:24:54.000253",
          "text": "This bug, from a friend, seems related: <https://github.com/racket/racket/issues/1769>"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T16:25:11.000544",
          "text": "It also has to do with juggling multiple Z3 processes and killing some of them."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-05T16:33:05.000101",
          "text": "<@Tamela> Can you reproduce the bug on a nightly snapshot? <https://plt.eecs.northwestern.edu/snapshots/>"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T16:40:51.000025",
          "text": "<@Kimbery> Working on it"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T16:42:17.000185",
          "text": "The bug does not occur on nightlies"
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T16:49:38.000515",
          "text": "So looks like it will be fixed when the next version of Racket 6.10 comes out. Thanks all!"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-05T17:06:56.000058",
          "text": "<@Tamela>: There are no planned updates for 6.10. The fix will most likely be in 6.11, which is scheduled for late October."
        },
        {
          "user": "Tamela",
          "timestamp": "2017-09-05T17:55:35.000227",
          "text": "Ok, great!"
        }
      ]
    },
    {
      "conversation_id": "221",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: can you isolate the problem into a short section of code and post that?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-09-05T15:55:10.000027",
          "text": "can you isolate the problem into a short section of code and post that?"
        }
      ]
    },
    {
      "conversation_id": "222",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: For defining contracts on functions, is it generally preferred to use [CODE] over [CODE]? It seems like [CODE] is more popular, and I'm curious what the reasoning is for this. If you already know the domain and range of a function, is there any benefit to pushing the contract definition out to the module boundary?\nNancie: Having the contract right there in the function definition seems more readable, doesn't it?\nDelmy: it does, which is why I ask :slightly_smiling_face:\nAugustine: Contracts can have a non-trivial performance overhead that you may not want to incur wherever a function is used within a module, whereas it's more likely to want to protect a function from invalid inputs that come from other modules\nChantelle: [CODE] turns the function exported into a macro that can pick up information about the module it's used in, so contract errors tell you both which module the contract is from (the module that used [CODE]) and the module that misused the function.\nChantelle: also, when using [CODE], you can skim the first few lines of a module to get a sense of what functions it exports and what they do instead of having to dig through the entire module looking for contracts and function signatures\nChantelle: philosophically speaking, a module is a single \"unit of trust\" so it doesn't make sense for it to guard against inputs from itself (as [CODE] would)\nChantelle: that's a valid point. I think the counter argument is that contracts are not meant for debugging :)\nDelmy: Thanks, that's a lot of good info! And yeah, I'm basically building something from scratch and want to make sure I get good error message when I accidentally violate my assumptions as the code evolves over time. But it sounds like you actually get better error reporting when you do it at the module level, so I'm inclined to stick with that.\nChantelle: oh have you seen the [CODE] package? it's a really, really good debugging tool to be aware of\nKarina: yeah i’m not sure how to debug this web server stuff,\nKarina: i feel like youre about to be my hero after I look it up\nDelmy: I haven't seen it, I'll look into it. Thanks!\nChantelle: not the one from the [CODE] package, which should probably be considered deprecated\nChantelle: <[URL]\nKarina: nice.\nKarina: does racket have the ability to specify/lock versions of packages? you used to be able to include the planet specs directly in a file\nChantelle: nope, packages also can't declare that they depend only on a specific range of versions of another package\nChantelle: this is an area that needs more work..\nChantelle: you also can't install different versions of the same package\nKarina: interesting\nChantelle: that's one word for it\nKarina: (that it was removed, since it used to work)\nChantelle: planet let you do it but you had to specify the version in source code of every module that used the dependency\nKarina: (maybe i’m misremembering though)",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 25,
        "duration_minutes": 95.65,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Augustine",
          "Chantelle",
          "Delmy",
          "Karina",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-09-05T19:41:48.000138",
          "text": "For defining contracts on functions, is it generally preferred to use `contract-out` over `define/contract`? It seems like `contract-out` is more popular, and I'm curious what the reasoning is for this. If you already know the domain and range of a function, is there any benefit to pushing the contract definition out to the module boundary?"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-05T19:56:32.000182",
          "text": "Having the contract right there in the function definition seems more readable, doesn't it?"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-09-05T19:57:45.000023",
          "text": "it does, which is why I ask :slightly_smiling_face:"
        },
        {
          "user": "Augustine",
          "timestamp": "2017-09-05T20:16:00.000086",
          "text": "Contracts can have a non-trivial performance overhead that you may not want to incur wherever a function is used within a module, whereas it's more likely to want to protect a function from invalid inputs that come from other modules "
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T20:46:24.000044",
          "text": "`contract-out` turns the function exported into a macro that can pick up information about the module it's used in, so contract errors tell you both which module the contract is from (the module that used `contract-out`) and the module that misused the function."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T20:47:54.000070",
          "text": "also, when using `contract-out`, you can skim the first few lines of a module to get a sense of what functions it exports and what they do instead of having to dig through the entire module looking for contracts and function signatures"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T20:48:40.000150",
          "text": "philosophically speaking, a module is a single \"unit of trust\" so it doesn't make sense for it to guard against inputs from itself (as `define/contract` would)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:08:05.000116",
          "text": "that's a valid point. I think the counter argument is that contracts are not meant for debugging :)"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-09-05T21:09:36.000167",
          "text": "Thanks, that's a lot of good info! And yeah, I'm basically building something from scratch and want to make sure I get good error message when I accidentally violate my assumptions as the code evolves over time. But it sounds like you actually get better error reporting when you do it at the module level, so I'm inclined to stick with that."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:10:50.000094",
          "text": "oh have you seen the `debug` package? it's a really, really good debugging tool to be aware of"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:10:56.000062",
          "text": "yeah i’m not sure how to debug this web server stuff,"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:11:14.000060",
          "text": "i feel like youre about to be my hero after I look it up"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-09-05T21:11:24.000100",
          "text": "I haven't seen it, I'll look into it. Thanks!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:12:04.000099",
          "text": "not the one from the `mischief` package, which should probably be considered deprecated"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:12:29.000196",
          "text": "<https://docs.racket-lang.org/debug/>"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:13:02.000011",
          "text": "nice."
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:14:04.000098",
          "text": "does racket have the ability to specify/lock versions of packages? you used to be able to include the planet specs directly in a file"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:14:31.000113",
          "text": "nope, packages also can't declare that they depend only on a specific range of versions of another package"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:14:53.000001",
          "text": "this is an area that needs more work.."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:15:09.000088",
          "text": "you also can't install different versions of the same package"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:16:45.000044",
          "text": "interesting"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:17:01.000150",
          "text": "that's one word for it"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:17:02.000125",
          "text": "(that it was removed, since it used to work)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-05T21:17:26.000176",
          "text": "planet let you do it but you had to specify the version in source code of every module that used the dependency"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:17:27.000052",
          "text": "(maybe i’m misremembering though)"
        }
      ]
    },
    {
      "conversation_id": "223",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karina: I’m using define/contract right now to debug something. I might remove them, or convert them to module level contracts when I’m done\nKarina: (unless, of course, you have buggy code to fix, or maybe i just am a poor racketeer)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 33.88,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Karina"
        ]
      },
      "timeline": [
        {
          "user": "Karina",
          "timestamp": "2017-09-05T20:32:53.000079",
          "text": "I’m using define/contract right now to debug something. I might remove them, or convert them to module level contracts when I’m done"
        },
        {
          "user": "Karina",
          "timestamp": "2017-09-05T21:06:46.000175",
          "text": "(unless, of course, you have buggy code to fix, or maybe i just am a poor racketeer)"
        }
      ]
    },
    {
      "conversation_id": "224",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: Is there a way to define a macro that can be dropped into a match statement? I'm working with very deeply-nested JSON and I want to be able to define something like this: [CODE_BLOCK] So that I can do this: [CODE_BLOCK] But when I try it, match throws a syntax error, complaining about the expr [CODE]. Is there a reason this isn't allowed?\nMarlin: Delmy [CODE]\nMarlin: <[URL]\nDelmy: thank you this is perfect!\nMorton: Sorry if this has been discussed before: why does [CODE] results in [CODE] rather then NaN?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 12.42,
        "contains_question": true,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Marlin",
          "Morton"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-09-06T16:35:15.000490",
          "text": "Is there a way to define a macro that can be dropped into a match statement? I'm working with very deeply-nested JSON and I want to be able to define something like this:\n\n```\n(define-simple-macro (Range Start:id End:id)\n  (hash-table ['start (? number? Start)]\n              ['end (? number? End)]))\n```\n\nSo that I can do this:\n\n```\n(match some-hash-table\n  [(Range my-start my-end)\n   (+ my-start my-end)])\n```\n\nBut when I try it, match throws a syntax error, complaining about the expr `(Range my-start my-end)`. Is there a reason this isn't allowed?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-09-06T16:37:52.000021",
          "text": "<@Delmy> `define-match-expander`"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-09-06T16:38:14.000167",
          "text": "<http://docs.racket-lang.org/reference/match.html?q=define-match-expander#%28form._%28%28lib._racket%2Fmatch..rkt%29._define-match-expander%29%29>"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-09-06T16:38:51.000138",
          "text": "thank you this is perfect!"
        },
        {
          "user": "Morton",
          "timestamp": "2017-09-06T16:47:40.000058",
          "text": "Sorry if this has been discussed before: why does `(* 0 +inf.0)` results in `0` rather then NaN?"
        }
      ]
    },
    {
      "conversation_id": "225",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Morton For no reason other than multiplying _anything_ by exact [CODE] is exact [CODE]. [CODE] is [CODE].\nEun: (add1 lexi-lambda)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 4.38,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-09-06T17:05:34.000226",
          "text": "<@Morton> For no reason other than multiplying _anything_ by exact `0` is exact `0`. `(* 0.0 +inf.0)` is `+nan.0`."
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-06T17:09:57.000096",
          "text": "(add1 @lexi-lambda)"
        }
      ]
    },
    {
      "conversation_id": "226",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: I'm in the process of building a library that's shaping up to have ~10 source files. Is there a standardized way of arranging tests for them in the Racket world? I'm thinking I could test them all in a test.rkt, or put a related test module into each source file, or put separate test files into a [CODE] directory.\nNancie: Additional test module inside each file seems the cleanest in my mind\nNancie: Although that would change the runtime deps to include [CODE], wouldn't it?\nChantelle: Nancie there's generally three ways to do this, depending on how heavyweight the tests are\nChantelle: First, test submodules. That works for most simple tests.\nChantelle: Second, you may include a [CODE] directory in your package. That packages deps are automatically ignored for consideration in \"runtime-deps\", so you may write your tests as normal Racket files (you don't need to put all the code in submodules).\nChantelle: Third, make a wholly separate [CODE] package for your [CODE] package. This is typically done when the libraries used for testing are too expensive to include even as only [CODE], either because you're using multiple heavyweight packages only for testing or your package is used by a lot of other packages so minimizing its dependencies is really important\nNancie: Thanks! Test submodule sounds good for this project\nNancie: Especially after reading [this](<[URL] &gt;The test submodule imports rackunit for its check form, but that import does not create a dependency on rackunit (which is a substantial library) for modules that import \"fish2.rkt\"; the dependency is only for the test submodule.\nChantelle: Right, submodule dependencies are different from the dependencies of their parent modules",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 18.78,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "need to"
        ],
        "decision_keywords": [
          "sounds good"
        ],
        "participants": [
          "Chantelle",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-09-06T21:15:11.000221",
          "text": "I'm in the process of building a library that's shaping up to have ~10 source files. Is there a standardized way of arranging tests for them in the Racket world? I'm thinking I could test them all in a test.rkt, or put a related test module into each source file, or put separate test files into a `private/tests` directory."
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-06T21:15:24.000153",
          "text": "Additional test module inside each file seems the cleanest in my mind"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-06T21:16:07.000143",
          "text": "Although that would change the runtime deps to include `rackunit`, wouldn't it?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-06T21:24:19.000209",
          "text": "<@Nancie> there's generally three ways to do this, depending on how heavyweight the tests are"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-06T21:24:54.000164",
          "text": "First, test submodules. That works for most simple tests."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-06T21:26:43.000168",
          "text": "Second, you may include a `tests` directory in your package. That packages deps are automatically ignored for consideration in \"runtime-deps\", so you may write your tests as normal Racket files (you don't need to put all the code in submodules)."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-06T21:28:50.000082",
          "text": "Third, make a wholly separate `foo-test` package for your `foo` package. This is typically done when the libraries used for testing are too expensive to include even as only `build-deps`, either because you're using multiple heavyweight packages only for testing or your package is used by a lot of other packages so minimizing its dependencies is really important"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-06T21:32:32.000056",
          "text": "Thanks! Test submodule sounds good for this project"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-09-06T21:32:56.000215",
          "text": "Especially after reading [this](<http://blog.racket-lang.org/2012/06/submodules.html>):\n&gt;The test submodule imports rackunit for its check form, but that import does not create a dependency on rackunit (which is a substantial library) for modules that import \"fish2.rkt\"; the dependency is only for the test submodule."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-06T21:33:58.000073",
          "text": "Right, submodule dependencies are different from the dependencies of their parent modules"
        }
      ]
    },
    {
      "conversation_id": "227",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Ha anyone managed to get the [CODE] flag to work for topics with spaces in its name?\nRosalee: Whenever I do [CODE], I get something like:\nRosalee: [CODE_BLOCK]\nTina: Most shells would probably like [CODE]\nRosalee: Tina Hmm…no luck: [CODE_BLOCK]\nRosalee: Okay, after talking to Stefani it looks like the [CODE] flag cannot handle topics with spaces. Thanks anyway. :slightly_smiling_face:\nCorey: Rosalee You're defining/using it like this: [CODE_BLOCK] ?\nRosalee: Chantelle Fair. I will file it when I get home. (Long plain rides are long…)\nRosalee: Corey Ha…..close, the log name is actually much more sane. Its just that the topic has spaces.\nRosalee: (For the record, I didn’t pick the topic, ffmpeg (or rather AVFoundation) did.)\nRosalee: Ooohhh…I just realized, I could easily turn video into a voip chat application.\nRosalee: (Admittedly not a very good one in terms of compression, but still pretty cool.)\nChantelle: Rosalee heckin' do it",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 777.33,
        "contains_question": true,
        "action_keywords": [
          "must",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Rosalee",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T10:07:00.000165",
          "text": "Ha anyone managed to get the `-W` flag to work for topics with spaces in its name?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T10:07:23.000032",
          "text": "Whenever I do `racket -W debug@'AVFoundation input device' listdev.rkt`, I get something like:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T10:07:31.000722",
          "text": "```\n$ racket -W debug@'AVFoundation input device' listdev.rkt\nracket: stderr &lt;levels&gt; after -W switch must be one of the following\n &lt;level&gt;s:\n   none fatal error warning info debug\n or up to one such &lt;level&gt; in whitespace-separated sequence of\n   &lt;level&gt;@&lt;name&gt;\n given: debug@AVFoundation input device\nUse the --help or -h flag for help.\n```"
        },
        {
          "user": "Tina",
          "timestamp": "2017-09-07T10:13:59.000433",
          "text": "Most shells would probably like `racket -W \"debug@AVFoundation input device\" listdev.rkt`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T11:04:19.000082",
          "text": "<@Tina> Hmm…no luck:\n```\n$ racket -W \"debug@AVFoundation input device\" listdev.rkt\nracket: stderr &lt;levels&gt; after -W switch must be one of the following\n &lt;level&gt;s:\n   none fatal error warning info debug\n or up to one such &lt;level&gt; in whitespace-separated sequence of\n   &lt;level&gt;@&lt;name&gt;\n given: debug@AVFoundation input device\nUse the --help or -h flag for help.\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T11:08:12.000729",
          "text": "Okay, after talking to <@Stefani> it looks like the `-W` flag cannot handle topics with spaces. Thanks anyway. :slightly_smiling_face:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-07T15:15:11.000195",
          "text": "<@Rosalee> You're defining/using it like this:\n```\n#lang racket/base\n(define-logger |name with spaces|)\n(|log-name with spaces-debug| \"hi\")\n```\n?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T21:39:13.000111",
          "text": "<@Chantelle> Fair. I will file it when I get home. (Long plain rides are long…)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T21:39:43.000047",
          "text": "<@Corey>  Ha…..close, the log name is actually much more sane. Its just that the topic has spaces."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T21:39:59.000061",
          "text": "(For the record, I didn’t pick the topic, ffmpeg (or rather AVFoundation) did.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T22:56:13.000012",
          "text": "Ooohhh…I just realized, I could easily turn video into a voip chat application."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-07T22:56:30.000093",
          "text": "(Admittedly not a very good one in terms of compression, but still pretty cool.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-07T23:04:20.000089",
          "text": "<@Rosalee> heckin' do it"
        }
      ]
    },
    {
      "conversation_id": "228",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: that probably deserves a bug in the racket repo\nTina: yeah, looks like it!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 14.98,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-07T13:05:51.000529",
          "text": "that probably deserves a bug in the racket repo"
        },
        {
          "user": "Tina",
          "timestamp": "2017-09-07T13:20:50.000304",
          "text": "yeah, looks like it!"
        }
      ]
    },
    {
      "conversation_id": "229",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimber: Hey, I read somewhere (I think I did) that the racket compiler backend is being rewritten to allow for other execution environments. a) is this true b) and if so what is the status c) and if b) true is there a chance to test this?\nVincenzo: Kimber See <[URL]\nKimber: thanks for the link\nKimber: is there a specific reason on why to reimplement Racket on top of Chez Scheme? Also the post doesn't talk about compiler backends - or I have missed that. Another question - is this purely an experiment or is this suppossed to become Racket7?\nVincenzo: I should have included the original message: <[URL]\nVincenzo: The Racket backend itself is not being rewritten, since the idea is to replace it entirely with Chez Scheme in the near term. Longer term, we hope to be able to run Racket on other platforms/VMs/languages.\nKimber: wow. double wow ++ this looks really promising. different racket langs running on a JVM or in the browser. extremely cool",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 68.28,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimber",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimber",
          "timestamp": "2017-09-10T09:02:13.000040",
          "text": "Hey, I read somewhere (I think I did) that the racket compiler backend is being rewritten to allow for other execution environments.\na) is this true\nb) and if so what is the status\nc) and if b) true is there a chance to test this?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-10T09:07:45.000036",
          "text": "<@Kimber> See <https://groups.google.com/d/msg/racket-dev/rkXuHNAmQaA/hjgPZHErAwAJ>"
        },
        {
          "user": "Kimber",
          "timestamp": "2017-09-10T09:40:59.000079",
          "text": "thanks for the link"
        },
        {
          "user": "Kimber",
          "timestamp": "2017-09-10T09:45:04.000028",
          "text": "is there a specific reason on why to reimplement Racket on top of Chez Scheme?\nAlso the post doesn't talk about compiler backends - or I have missed that.\nAnother question - is this purely an experiment or is this suppossed to become Racket7?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-10T09:47:50.000066",
          "text": "I should have included the original message: <https://groups.google.com/d/msg/racket-dev/2BV3ElyfF8Y/4RSd3XbECAAJ>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-10T09:49:22.000059",
          "text": "The Racket backend itself is not being rewritten, since the idea is to replace it entirely with Chez Scheme in the near term. Longer term, we hope to be able to run Racket on other platforms/VMs/languages."
        },
        {
          "user": "Kimber",
          "timestamp": "2017-09-10T10:10:30.000049",
          "text": "wow. double wow ++\nthis looks really promising.\ndifferent racket langs running on a JVM or in the browser.\nextremely cool"
        }
      ]
    },
    {
      "conversation_id": "230",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: If I have multiple threads, and I press Ctr+C, does anyone know which thread the signal is going to go to?\nRosalee: (The docs seem a little vague on this. Just saying that you register a thread with thread-break.)\nRosalee: Or maybe it’ll go to all of them (that are registered and have breaks currently enabled.)\nRosalee: Running some tests also seems to indicate the main thread.\nVincenzo: Yes, Ctl+C sends a break to the main thread\nRosalee: Okay, thanks.\nRosalee: Vincenzo In that case, is there any good way to have the signal be sent to another thread?\nRosalee: (About all I have at the moment is sending it through a channel or some shared state.)\nVincenzo: The [CODE] function sets up a redirect, but otherwise the main thread has to specifically resend it\nRosalee: Mmm…okay. thanks.\nRosalee: Ya, as far as I can tell, [CODE] is very similar to jus [CODE] followed by a [CODE]\nRosalee: (kind of anyway.)\nRosalee: So ya, thanks.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 13,
        "duration_minutes": 57.97,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T12:52:20.000004",
          "text": "If I have multiple threads, and I press Ctr+C, does anyone know which thread the signal is going to go to?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T12:52:50.000016",
          "text": "(The docs seem a little vague on this. Just saying that you register a thread with thread-break.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T12:53:15.000019",
          "text": "Or maybe it’ll go to all of them (that are registered and have breaks currently enabled.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T12:59:50.000038",
          "text": "Running some tests also seems to indicate the main thread."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-10T13:29:10.000007",
          "text": "Yes, Ctl+C sends a break to the main thread"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T13:31:00.000091",
          "text": "Okay, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T13:37:18.000077",
          "text": "<@Vincenzo> In that case, is there any good way to have the signal be sent to another thread?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T13:37:34.000092",
          "text": "(About all I have at the moment is sending it through a channel or some shared state.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-10T13:44:17.000120",
          "text": "The `call-in-nested-thread` function sets up a redirect, but otherwise the main thread has to specifically resend it"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T13:49:34.000014",
          "text": "Mmm…okay. thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T13:50:03.000005",
          "text": "Ya, as far as I can tell, `call-in-nexted-thread` is very similar to jus `thread` followed by a `thread-wait`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T13:50:13.000023",
          "text": "(kind of anyway.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-10T13:50:18.000074",
          "text": "So ya, thanks."
        }
      ]
    },
    {
      "conversation_id": "231",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Eun will 6.10.1 include any updates to packages other than [CODE]? or does it only include the rktio bugfixes?\nEun: Chantelle: Only rktio bugfixes.\nChantelle: gotcha\nChantelle: thanks!\nEun: It's essentially 6.10 + patches.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 0.83,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-11T17:38:00.000274",
          "text": "<@Eun> will 6.10.1 include any updates to packages other than `base`? or does it only include the rktio bugfixes?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-11T17:38:34.000082",
          "text": "<@Chantelle>: Only rktio bugfixes."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-11T17:38:42.000163",
          "text": "gotcha"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-11T17:38:47.000410",
          "text": "thanks!"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-11T17:38:50.000297",
          "text": "It's essentially 6.10 + patches."
        }
      ]
    },
    {
      "conversation_id": "232",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Kimbery Thank you so much for adding [CODE] (and [CODE]) to Racket. That call has been needed for a while.\nRosalee: :heart: :racket: :heart:\nRosalee: Meh, I don’t care. You could have called it, [CODE] and I would have been happy (except that the name was too long, so I guess you could have called it [CODE] and I would have been…umm…confused. :slightly_smiling_face: )\nKimbery: Just for fun… here’s a tiny program that calculates who has the most packages on the package system: [CODE_BLOCK] Chantelle is beating me by one. :)\nKimbery: For context, here are the top ten: [CODE_BLOCK]\nKimbery: Matthew’s overachieving, as always.\nMagnolia: I'm at 24. Darn. Just one too few to make the list. :p *goes to add a hello world package*\nKimbery: According to the script, you have 22 (it ignores [CODE] packages to avoid inflated numbers).\nKimbery: You’re just below Latarsha, who has 23. :)\nMagnolia: Ah I see. Yeah I just looked at the pkg search number.\nKimbery: If you don’t ignore any packages, mflatt is listed as the author for a wild 167 packages.\nChantelle: Kimbery clearly you should publish the [CODE] package and the [CODE] package to pull ahead\nMarlin: If I ever get around to publishing (automatically-built) localization packages for every locale in CLDR, I'll... well, I'll create a new category of package that you'll have to filter out.\nKimbery: I just realized some of mflatt’s packages aren’t even counted, since he has some of them under the [EMAIL] email address.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 14,
        "duration_minutes": 125.13,
        "contains_question": true,
        "action_keywords": [
          "create",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Magnolia",
          "Marlin",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T18:24:45.000132",
          "text": "<@Kimbery> Thank you so much for adding `index-of` (and `indexes-of`) to Racket. That call has been needed for a while."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T18:24:56.000051",
          "text": ":heart: :racket: :heart:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T19:14:47.000028",
          "text": "Meh, I don’t care. You could have called it, `the-foobar-list-function-that-should-have-been-there-a-long-time-ago` and I would have been happy (except that the name was too long, so I guess you could have called it `tflftshbtalta` and I would have been…umm…confused. :slightly_smiling_face: )"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T20:17:36.000099",
          "text": "Just for fun… here’s a tiny program that calculates who has the most packages on the package system:\n```\n#lang racket\n\n(require net/url)\n\n(define pkgs\n  (call/input-url (string-&gt;url \"<https://pkgs.racket-lang.org/pkgs-all>\") get-pure-port read))\n\n(define pkgs-per-author\n  (for*/fold ([acc (hash)])\n             ([(name info) (in-hash pkgs)]\n              #:unless (regexp-match? #px\"-(lib|doc|test)$\" name)\n              #:unless (hash-ref (hash-ref info 'search-terms) 'deprecated #f)\n              [author (in-list (hash-ref info 'authors))])\n    (hash-update acc author add1 0)))\n\n(sort (hash-&gt;list pkgs-per-author) &gt; #:key cdr)\n```\n<@Chantelle> is beating me by one. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T20:18:04.000049",
          "text": "For context, here are the top ten:\n```\n'((\"<mailto:mflatt@racket-lang.org|mflatt@racket-lang.org>\" . 88)\n  (\"<mailto:jay.mccarthy@gmail.com|jay.mccarthy@gmail.com>\" . 44)\n  (\"<mailto:alexander@knauth.org|alexander@knauth.org>\" . 36)\n  (\"<mailto:neil@neilvandyke.org|neil@neilvandyke.org>\" . 35)\n  (\"<mailto:robby@racket-lang.org|robby@racket-lang.org>\" . 33)\n  (\"<mailto:jackhfirth@gmail.com|jackhfirth@gmail.com>\" . 29)\n  (\"<mailto:lexi.lambda@gmail.com|lexi.lambda@gmail.com>\" . 28)\n  (\"<mailto:leif@leifandersen.net|leif@leifandersen.net>\" . 27)\n  (\"<mailto:georges.duperon@gmail.com|georges.duperon@gmail.com>\" . 26)\n  (\"<mailto:mordae@anilinux.org|mordae@anilinux.org>\" . 25))\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T20:18:31.000108",
          "text": "Matthew’s overachieving, as always."
        },
        {
          "user": "Magnolia",
          "timestamp": "2017-09-11T20:22:31.000154",
          "text": "I'm at 24. Darn. Just one too few to make the list. :p *goes to add a hello world package*"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T20:23:36.000101",
          "text": "According to the script, you have 22 (it ignores `-{lib,doc,test}` packages to avoid inflated numbers)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T20:23:51.000124",
          "text": "You’re just below <@Latarsha>, who has 23. :)"
        },
        {
          "user": "Magnolia",
          "timestamp": "2017-09-11T20:24:57.000195",
          "text": "Ah I see. Yeah I just looked at the pkg search number."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T20:25:49.000135",
          "text": "If you don’t ignore any packages, mflatt is listed as the author for a wild 167 packages."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-11T20:26:48.000272",
          "text": "<@Kimbery> clearly you should publish the `__` package and the `___` package to pull ahead"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-09-11T20:28:38.000150",
          "text": "If I ever get around to publishing (automatically-built) localization packages for every locale in CLDR, I'll... well, I'll create a new category of package that you'll have to filter out."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T20:29:53.000088",
          "text": "I just realized some of mflatt’s packages aren’t even counted, since he has some of them under the `<mailto:mflatt@cs.utah.edu|mflatt@cs.utah.edu>` email address."
        }
      ]
    },
    {
      "conversation_id": "233",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I’m glad people are already finding them useful :)\nKimbery: …though now I’m wondering if it should have been called [CODE]. hm.\nNelson: nah\nNelson: but maybe you want to add an [CODE] (example : <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 4.6,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T18:58:05.000124",
          "text": "I’m glad people are already finding them useful :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-11T19:01:06.000010",
          "text": "…though now I’m wondering if it should have been called `indicies-of`. hm."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-11T19:02:13.000276",
          "text": "nah"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-11T19:02:41.000246",
          "text": "but maybe you want to add an `@index[\"indices-of\"]` (example : <https://github.com/racket/racket/blob/master/pkgs/racket-doc/scribblings/reference/pairs.scrbl#L1318>)"
        }
      ]
    },
    {
      "conversation_id": "234",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Chantelle Stealing my ideas are we? :stuck_out_tongue:\nRosalee: Also, I was thinking of publishing a package that just had a lot of empty (but common) collections, so that everyone else’s packages would conflict with it.\nRosalee: Which, given the current implementation, would remove them all from the searchable documentation.\nRosalee: Just so we are 100% clear, I am NOT going to do it, I just noticed its a social attack that exists at the moment. :wink:\nChantelle: Rosalee you monster\nRosalee: tee hee hee\nGeorgeanna: I guess I don’t know what [CODE] is…\nGeorgeanna: I was using [CODE] for our battleship workshop … is there a real difference?\nChantelle: I think [CODE] won't close the port by default\nRosalee: Kimbery lol, I’m right behind you.\nRosalee: Although half of those packages are video packages. :wink:\nRosalee: Also, I’m amused that Jay has two accounts he’s posting from. :wink:\nRosalee: Oh geez, so does Matthew.\nCarson: regarding packages and <[URL] specifically - I wanted to write a script that would notify me of new packages but there seems to be inherent problem to the design of pkgs - there is no \"date-created\" property only \"last-updated\" or \"last-edited\".\nCarson: The same problem is visible on the pkgs index - the packages that got just updated are flagged as new\nCarson: which doesn't reflect reality as there are many packages that are months old yet they are always flagged as new due to some authors scripts updating the packages from local repositories on regular basis (even with no changes)\nCarson: The way I would like to see pkgs working is having both \"new\" and \"updated\" flags\nJacob: The current package system does need improvement and there are several features I would like to see be added to packages too.\nJacob: As it happens I am interested in working on the package system to improve it. There have been prior discussions about various wishlist items that need to be worked on.\nJacob: I will create a post in the users/developers mailing list to check whether there are others working on the same thing and see about coordinating our efforts.\nJacob: Regrettably I won't be able to attend RacketCon this year. That would have been a perfect time to get into a deep discussion with other Racketeers so I'll just have to make do.\nCarson: Though it's not the same - last year streaming of RacketCon allowed for some basic interaction for those of us who couldn't attend. I hope this year will be the same (or better)\nCiara: Sry to bug you with this, but I totally assumed that test--&gt; uses alpha-equivalence by default to compare terms.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 23,
        "duration_minutes": 901.25,
        "contains_question": true,
        "action_keywords": [
          "action",
          "create",
          "discuss",
          "implement",
          "need to",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Carson",
          "Chantelle",
          "Ciara",
          "Georgeanna",
          "Jacob",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T20:57:33.000088",
          "text": "<@Chantelle> Stealing my ideas are we? :stuck_out_tongue:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T20:58:04.000083",
          "text": "Also, I was thinking of publishing a package that just had a lot of empty (but common) collections, so that everyone else’s packages would conflict with it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T20:58:26.000179",
          "text": "Which, given the current implementation, would remove them all from the searchable documentation."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T20:58:44.000006",
          "text": "Just so we are 100% clear, I am NOT going to do it, I just noticed its a social attack that exists at the moment. :wink:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-11T20:59:09.000140",
          "text": "<@Rosalee> you monster"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T20:59:23.000107",
          "text": "tee hee hee"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-11T21:00:22.000078",
          "text": "I guess I don’t know what `call/input-url` is…"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-11T21:00:47.000148",
          "text": "I was using `(port-&gt;string (get-pure-port (string-&gt;url uri)))` for our battleship workshop … is there a real difference?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-11T21:01:47.000105",
          "text": "I think `port-&gt;string` won't close the port by default"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T21:01:58.000187",
          "text": "<@Kimbery> lol, I’m right behind you."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T21:02:05.000144",
          "text": "Although half of those packages are video packages. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T21:04:24.000239",
          "text": "Also, I’m amused that Jay has two accounts he’s posting from. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-11T21:04:40.000003",
          "text": "Oh geez, so does Matthew."
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-12T09:17:12.000131",
          "text": "regarding packages and <https://pkgs.racket-lang.org/pkgs-all> specifically - I wanted to write a script that would notify me of new packages but there seems to be inherent problem to the design of pkgs - there is no \"date-created\" property only \"last-updated\" or \"last-edited\"."
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-12T09:17:48.000359",
          "text": "The same problem is visible on the pkgs index - the packages that got just updated are flagged as new"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-12T09:20:31.000129",
          "text": "which doesn't reflect reality as there are many packages that are months old yet they are always flagged as new due to some authors scripts updating the packages from local repositories on regular basis (even with no changes)"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-12T09:21:20.000201",
          "text": "The way I would like to see pkgs working is having both \"new\" and \"updated\" flags"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-12T09:21:55.000377",
          "text": "The current package system does need improvement and there are several features I would like to see be added to packages too."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-12T09:22:43.000100",
          "text": "As it happens I am interested in working on the package system to improve it. There have been prior discussions about various wishlist items that need to be worked on."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-12T09:23:15.000077",
          "text": "I will create a post in the users/developers mailing list to check whether there are others working on the same thing and see about coordinating our efforts."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-12T09:24:42.000217",
          "text": "Regrettably I won't be able to attend RacketCon this year. That would have been a perfect time to get into a deep discussion with other Racketeers so I'll just have to make do."
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-12T09:28:27.000312",
          "text": "Though it's not the same - last year streaming of RacketCon allowed for some basic interaction for those of us who couldn't attend. I hope this year will be the same (or better)"
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-12T11:58:48.000620",
          "text": "Sry to bug you with this, but I totally assumed that test--&gt; uses alpha-equivalence by default to compare terms."
        }
      ]
    },
    {
      "conversation_id": "235",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ciara: I double-checked my binding forms but I can't quite figure out why these two terms aren't equivalent.\nNelson: nope, [CODE] doesn't use alpha equivalence by default\nNelson: you can set [CODE]\nCiara: that's exactly what I wanted to know, thanks.\nNelson: or pass [CODE]\nCiara: let me check ...\nNelson: <[URL]\nCiara: works brilliantly! many thanks!!\nCorey: This package needs a \"this package needs code, author, anything\" label :simple_smile: <[URL]\nCorey: Hmm also the 4 \"niceware\" pkgs\nCorey: and the \"pointless\" pkgs\nCarson: Corey yes, these are some of these \"always new\" packages I was thinking about.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 12,
        "duration_minutes": 94.33,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Carson",
          "Ciara",
          "Corey",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ciara",
          "timestamp": "2017-09-12T11:59:37.000352",
          "text": "I double-checked my binding forms but I can't quite figure out why these two terms aren't equivalent."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-12T12:00:31.000333",
          "text": "nope, `test--&gt;` doesn't use alpha equivalence by default"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-12T12:00:40.000371",
          "text": "you can set `default-equiv`"
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-12T12:00:55.000304",
          "text": "that's exactly what I wanted to know, thanks."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-12T12:00:58.000835",
          "text": "or pass `#:equiv my-alpha-equiv`"
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-12T12:01:17.000475",
          "text": "let me check ..."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-12T12:01:50.000251",
          "text": "<http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._test--~3e%29%29>"
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-12T12:05:20.000460",
          "text": "works brilliantly! many thanks!!"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T12:26:15.000504",
          "text": "This package needs a \"this package needs code, author, anything\" label :simple_smile: <https://pkgs.racket-lang.org/package/autoff>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T12:29:20.000455",
          "text": "Hmm also the 4 \"niceware\" pkgs"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T12:30:00.000263",
          "text": "and the \"pointless\" pkgs"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-12T13:33:57.000712",
          "text": "<@Corey> yes, these are some of these \"always new\" packages I was thinking about."
        }
      ]
    },
    {
      "conversation_id": "236",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Carson There's a lot of discussion about package catalog wishlist items on the github repo\nChantelle: <[URL]\nChantelle: in particular, these two issues:\nChantelle: <[URL]\nChantelle: <[URL]\nCorey: Carson The [CODE] [CODE] [CODE] packages have bad meta-data (lacking even author or code). Not sure if someone bypassed authentication to create them maliciously. Or some data loss glitch. But regardless, I think they simply need to be deleted? (As opposed to valid packages that are \"new!\" gratuitously frequently.)\nChantelle: lacking both an author and a source should definitely be grounds for removal by curators, since it's not even possible to figure out who to contact about removing it through other means\nChantelle: I'll open an issue for that\nChantelle: Corey <[URL]\nCorey: Chantelle Thank you and sorry -- maybe I should have just logged an issue there in the first place.\nChantelle: no worries, I'm glad you brought it up at all :)\nCorey: I'm sad, I don't think I'm going to be at RacketCon this year.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 12,
        "duration_minutes": 54.17,
        "contains_question": true,
        "action_keywords": [
          "create",
          "discuss",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:46:07.000280",
          "text": "<@Carson> There's a lot of discussion about package catalog wishlist items on the github repo"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:46:18.000162",
          "text": "<https://github.com/tonyg/racket-pkg-website/issues>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:48:10.000380",
          "text": "in particular, these two issues:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:48:11.000443",
          "text": "<https://github.com/tonyg/racket-pkg-website/issues/50>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:48:20.000069",
          "text": "<https://github.com/tonyg/racket-pkg-website/issues/53>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T13:51:26.000512",
          "text": "<@Carson> The `autoff` `niceware` `pointless` packages have bad meta-data (lacking even author or code).\nNot sure if someone bypassed authentication to create them maliciously.\nOr some data loss glitch.\nBut regardless, I think they simply need to be deleted?\n(As opposed to valid packages that are \"new!\" gratuitously frequently.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:53:09.000245",
          "text": "lacking both an author and a source should definitely be grounds for removal by curators, since it's not even possible to figure out who to contact about removing it through other means"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:53:25.000624",
          "text": "I'll open an issue for that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T13:57:48.000161",
          "text": "<@Corey> <https://github.com/tonyg/racket-pkg-website/issues/60>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T13:59:32.000415",
          "text": "<@Chantelle> Thank you and sorry -- maybe I should have just logged an issue there in the first place."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T14:00:17.000340",
          "text": "no worries, I'm glad you brought it up at all :)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T14:40:17.000495",
          "text": "I'm sad, I don't think I'm going to be at RacketCon this year."
        }
      ]
    },
    {
      "conversation_id": "237",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: Carson: Re RacketCon streaming: Yes, we're planning to have streaming again this year.\nEun: Oh no. :(\nEun: Too far?\nCorey: Well I thought I could combine Strange Loop and RacketCon into one long trip.\nCorey: But that wasn't working out.\nCorey: And flying out and back to each was looking non-optimal, too.\nTina: Corey: I can sympathize with too much travel, for sure. I’m missing strange loop this year and that’s a bummer\nCorey: I love the comments in <[URL]\nKimbery: Corey You will be sorely missed at RacketCon. :(",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 9,
        "duration_minutes": 197.7,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Eun",
          "Kimbery",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-09-12T14:12:07.000636",
          "text": "<@Carson>: Re RacketCon streaming: Yes, we're planning to have streaming again this year."
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-12T14:41:09.000135",
          "text": "Oh no. :("
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-12T14:41:25.000169",
          "text": "Too far?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T14:41:43.000453",
          "text": "Well I thought I could combine Strange Loop and RacketCon into one long trip."
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T14:41:48.000121",
          "text": "But that wasn't working out."
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T14:42:07.000421",
          "text": "And flying out and back to each was looking non-optimal, too."
        },
        {
          "user": "Tina",
          "timestamp": "2017-09-12T14:55:52.000379",
          "text": "<@Corey>: I can sympathize with too much travel, for sure. I’m missing strange loop this year and that’s a bummer"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-12T16:10:53.000386",
          "text": "I love the comments in <https://gitlab.com/ether-ash/pointless/blob/master/pointless-lib/pointless/cond.rkt>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-12T17:29:49.000344",
          "text": "<@Corey> You will be sorely missed at RacketCon. :("
        }
      ]
    },
    {
      "conversation_id": "238",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Carson: Chantelle I believe I know who the author of pointless and niceware is: <[URL]\nChantelle: Carson fantastic!\nKimbery: Carson Do you happen to know who that person is? I forget exactly why, but I remember seeing one of their projects at one point (maybe it was pointless?), and I was befuddled at their seeming lack of internet presence. :p\nCarson: Kimbery I am afraid not, but if my goog-fu skills are of any use here is my hunch: <[URL]\nKimbery: I use Alyssa P. Hacker for everything, tbh, regardless of language :stuck_out_tongue:\nKimbery: Carson Oh, thanks. I think I’ve seen that person on twitter, so I’m surprised I didn’t make the connection.\nGeorgeanna: Ciara I asked something similar a month ago and never got an answer… May I see your [CODE]?\nGeorgeanna: Corey you should come to Seattle! I owe you a coffee and/or beer",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 8,
        "duration_minutes": 149.97,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Carson",
          "Chantelle",
          "Georgeanna",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Carson",
          "timestamp": "2017-09-12T15:42:58.000220",
          "text": "<@Chantelle> I believe I know who the author of pointless and niceware is: <https://gitlab.com/users/ether-ash/projects>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T15:43:52.000058",
          "text": "<@Carson> fantastic!"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-12T17:28:59.000328",
          "text": "<@Carson> Do you happen to know who that person is? I forget exactly why, but I remember seeing one of their projects at one point (maybe it was pointless?), and I was befuddled at their seeming lack of internet presence. :p"
        },
        {
          "user": "Carson",
          "timestamp": "2017-09-12T18:08:18.000277",
          "text": "<@Kimbery> I am afraid not, but if my goog-fu skills are of any use here is my hunch: <https://twitter.com/ether_ash/status/880159791414476800>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-12T18:09:18.000132",
          "text": "I use Alyssa P. Hacker for everything, tbh, regardless of language :stuck_out_tongue:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-12T18:09:53.000291",
          "text": "<@Carson> Oh, thanks. I think I’ve seen that person on twitter, so I’m surprised I didn’t make the connection."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-12T18:12:00.000048",
          "text": "<@Ciara> I asked something similar a month ago and never got an answer… May I see your `default-equiv`?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-12T18:12:56.000069",
          "text": "<@Corey> you should come to Seattle! I owe you a coffee and/or beer"
        }
      ]
    },
    {
      "conversation_id": "239",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: Is there a way to customize the reader so that curly braces mean [CODE]? I basically want [CODE] to be equivalent to [CODE]\nKimbery: Delmy You could add a custom entry for [CODE] to the readtable.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 4.77,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-09-12T17:24:38.000362",
          "text": "Is there a way to customize the reader so that curly braces mean `#hasheq`? I basically want `{foo \"thing\" bar \"other\"}` to be equivalent to `#hasheq((foo . \"thing\") (bar . \"other\"))`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-12T17:29:24.000331",
          "text": "<@Delmy> You could add a custom entry for `#\\{` to the readtable."
        }
      ]
    },
    {
      "conversation_id": "240",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: Hey slack, the SICP book uses the character \"Alyssa P. Hacker\" (a lisp hacker). What's a good character for \"a racket hacker\"?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-09-12T18:08:26.000303",
          "text": "Hey slack, the SICP book uses the character \"Alyssa P. Hacker\" (a lisp hacker). What's a good character for \"a racket hacker\"?"
        }
      ]
    },
    {
      "conversation_id": "241",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: I made a package for this called [CODE]. It's an #%app macro instead of a reader extension though, so you'll have to quote the symbols",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-12T19:15:51.000155",
          "text": "I made a package for this called `delimit-app`. It's an #%app macro instead of a reader extension though, so you'll have to quote the symbols"
        }
      ]
    },
    {
      "conversation_id": "242",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: Hey thanks for letting me know about this. It's pretty much exactly what I'm looking for - quoting symbols isn't a big deal.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Delmy"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-09-12T22:53:57.000118",
          "text": "Hey thanks for letting me know about this. It's pretty much exactly what I'm looking for - quoting symbols isn't a big deal."
        }
      ]
    },
    {
      "conversation_id": "243",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Willian you're the relevant person for the pict test timeouts on drdr, right?\nLatarsha: Is there anything I can do to help you debug those (such as access to the drdr machine)?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.25,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-13T13:37:35.000003",
          "text": "<@Willian> you're the relevant person for the pict test timeouts on drdr, right?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-13T13:37:50.000331",
          "text": "Is there anything I can do to help you debug those (such as access to the drdr machine)?"
        }
      ]
    },
    {
      "conversation_id": "244",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimber: Is there a possibility to implement generic interfaces after one has defined a struct. Ok, since this is Lisp anything is possible ... but is there a well defined way (maybe documented even?)\nKimber: Sofar all examples first define the interface and then implement that interface while defining the struct. I know it must be possible as Kimbery must have done something with the generic/collections\nKimbery: Kimber [CODE] doesn’t really allow that. I wrote a multimethod package that allows that sort of thing, but it’s pretty half-baked.\nEun: Kimber: You can, by adding a #:defaults clause when defining the interface.\nKimbery: Eun …but then it’s an O(_n_) predicate lookup instead of a hash lookup. :(\nEun: Yes, but I'd expect n to be pretty small in most cases. And it would be a struct type property lookup otherwise, which I don't think involves hashing.\nKimbery: oh, right. that’s even better—I would hope struct properties are constant time.\nLatarsha: Eun Kimbery pretty sure it's a hash table\nEun: As in, struct type properties are stored in a hash table?\nLatarsha: <[URL]\nEun: Ah, look at that. Didn't expect that.\nKimbery: totally out of curiosity, what did you expect it to be?\nEun: Alist?\nEun: The number of properties a struct type has would typically be small, I'd imagine.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 14,
        "duration_minutes": 102.55,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Kimber",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Kimber",
          "timestamp": "2017-09-13T15:17:17.000471",
          "text": "Is there a possibility to implement generic interfaces after one has defined a struct. Ok, since this is Lisp anything is possible ... but is there a well defined way (maybe documented even?)"
        },
        {
          "user": "Kimber",
          "timestamp": "2017-09-13T15:18:38.000574",
          "text": "Sofar all examples first define the interface and then implement that interface while defining the struct. I know it must be possible as <@Kimbery> must have done something with the generic/collections"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-13T16:21:45.000528",
          "text": "<@Kimber> `racket/generic` doesn’t really allow that. I wrote a multimethod package that allows that sort of thing, but it’s pretty half-baked."
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-13T16:45:35.000275",
          "text": "<@Kimber>: You can, by adding a #:defaults clause when defining the interface."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-13T16:51:23.000475",
          "text": "<@Eun> …but then it’s an O(_n_) predicate lookup instead of a hash lookup. :("
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-13T16:53:13.000297",
          "text": "Yes, but I'd expect n to be pretty small in most cases. And it would be a struct type property lookup otherwise, which I don't think involves hashing."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-13T16:54:08.000403",
          "text": "oh, right. that’s even better—I would hope struct properties are constant time."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-13T16:54:51.000200",
          "text": "<@Eun> <@Kimbery> pretty sure it's a hash table"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-13T16:55:37.000205",
          "text": "As in, struct type properties are stored in a hash table?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-13T16:56:06.000083",
          "text": "<https://github.com/racket/racket/blob/master/racket/src/racket/src/struct.c#L1122>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-13T16:57:07.000179",
          "text": "Ah, look at that. Didn't expect that."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-13T16:57:27.000344",
          "text": "totally out of curiosity, what did you expect it to be?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-13T16:59:28.000019",
          "text": "Alist?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-13T16:59:50.000044",
          "text": "The number of properties a struct type has would typically be small, I'd imagine."
        }
      ]
    },
    {
      "conversation_id": "245",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: robkuz it's possible but not with normal structs, you'll have to add an indirection later on top of them that supports it. And it probably wouldn't work with normal struct properties",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-13T15:58:35.000378",
          "text": "@robkuz it's possible but not with normal structs, you'll have to add an indirection later on top of them that supports it. And it probably wouldn't work with normal struct properties"
        }
      ]
    },
    {
      "conversation_id": "246",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: what's a good way to make a struct safe for users to use without breaking if you add more fields while still allowing them to define subtypes of the struct?\nChantelle: I'm okay with field name overlap between sub and supertypes breaking clients, I just don't want adding any field at all to break them\nKa: that's a great question that i'm interested in, too\nKa: there's some really funky stuff when you want to use [CODE] around struct copy and such\nChantelle: it comes up a lot and it's the thing that frustrates me most about structs\nWillian: Latarsha I can reproduce the timeouts locally (on my linux desktop only), but the stacktraces are not really helpful, and im not sure how to proceed. It’s somehow related to: the JIT, unsafe-fl operations, and futures.\nWillian: The test case is a small one, involving just the blur function, (which uses unsafe-fl and futures)\nWillian: its hard to minimize further b/c inlining the blur function and modifying it in seemingly any way decreases the probability that the program will freeze\nLatarsha: Willian For that sort of thing, [CODE] is very nice because you can just run the program repeatedly until failure, and then debug the failed one\nWillian: it also will likely go away with the upcoming chez rewrite so its been fairly low priority. I never got [CODE] to work, but the programs actually just locked up so I was able to attach [CODE]. It tends to get stuck in seeming arbitrary functions who’s names suggest they have to do with allocation iirc.\nWillian: I could also just disable the pict tests that call [CODE] and [CODE] for now to make drdr shut up, since the bug is ages old anyways\nWillian: Latarsha ^\nLatarsha: what didn't work on [CODE]?\nLatarsha: also just disabling those tests would be good since that would reduce the hang-rate on drdr\nWillian: There wasn't something prebuilt for my platform and I never got building from source working I think? Idr its been like a year since ive looked at this. I'll update the issue and disable the tests when I get home.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 15,
        "duration_minutes": 33.07,
        "contains_question": true,
        "action_keywords": [
          "build",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Latarsha",
          "Willian"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-13T17:31:51.000216",
          "text": "what's a good way to make a struct safe for users to use without breaking if you add more fields while still allowing them to define subtypes of the struct?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-13T17:35:17.000041",
          "text": "I'm okay with field name overlap between sub and supertypes breaking clients, I just don't want adding any field at all to break them"
        },
        {
          "user": "Ka",
          "timestamp": "2017-09-13T17:35:20.000273",
          "text": "that's a great question that i'm interested in, too"
        },
        {
          "user": "Ka",
          "timestamp": "2017-09-13T17:35:40.000057",
          "text": "there's some really funky stuff when you want to use `#:super` around struct copy and such"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-13T17:35:40.000247",
          "text": "it comes up a lot and it's the thing that frustrates me most about structs"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-13T17:49:31.000469",
          "text": "<@Latarsha> I can reproduce the timeouts locally (on my linux desktop only), but the stacktraces are not really helpful, and im not sure how to proceed. It’s somehow related to: the JIT, unsafe-fl operations, and futures."
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-13T17:49:53.000512",
          "text": "The test case is a small one, involving just the blur function, (which uses unsafe-fl and futures)"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-13T17:51:27.000345",
          "text": "its hard to minimize further b/c inlining the blur function and modifying it in seemingly any way decreases the probability that the program will freeze"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-13T17:53:37.000222",
          "text": "<@Willian> For that sort of thing, `rr` is very nice because you can just run the program repeatedly until failure, and then debug the failed one"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-13T17:55:38.000442",
          "text": "it also will likely go away with the upcoming chez rewrite so its been fairly low priority.\n\nI never got `rr` to work, but the programs actually just locked up so I was able to attach `gdb`. It tends to get stuck in seeming arbitrary functions who’s names suggest they have to do with allocation iirc."
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-13T17:57:09.000134",
          "text": "I could also just disable the pict tests that call `jack-o-lantern` and `blur` for now to make drdr shut up, since the bug is ages old anyways"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-13T17:57:13.000114",
          "text": "<@Latarsha> ^"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-13T17:58:21.000325",
          "text": "what didn't work on `rr`?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-13T17:58:40.000191",
          "text": "also just disabling those tests would be good since that would reduce the hang-rate on drdr"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-13T18:04:55.000017",
          "text": "There wasn't something prebuilt for my platform and I never got building from source working I think? Idr its been like a year since ive looked at this.\n\nI'll update the issue and disable the tests when I get home."
        }
      ]
    },
    {
      "conversation_id": "247",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimber: How does this \"half-bakedness\" manifests itself?\nKimber: I don't think this solves my problem. My issue is that I do not want to implement that generic interface on my struct. Not becase the interface is not known when defining the struct (yet the reverse is) but simply I'd like to keep the struct definition clean from orthogonal features. Imagine a generic interface for Jsonifying/Database/Automatic Routing/etc. One could end up with a huge monster struct.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 4.83,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimber"
        ]
      },
      "timeline": [
        {
          "user": "Kimber",
          "timestamp": "2017-09-14T07:16:30.000341",
          "text": "How does this \"half-bakedness\" manifests itself?"
        },
        {
          "user": "Kimber",
          "timestamp": "2017-09-14T07:21:20.000183",
          "text": "I don't think this solves my problem.\nMy issue is that I do not want to implement that generic interface on my struct. Not becase the interface is not known when defining the struct (yet the reverse is) but simply I'd like to keep the struct definition clean from orthogonal features.\nImagine a generic interface for Jsonifying/Database/Automatic Routing/etc.\nOne could end up with a huge monster struct."
        }
      ]
    },
    {
      "conversation_id": "248",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Rosalee Vincenzo Is the nanopass Racket compiler rewrite still a thing now that the Chez rewrite is planned? Or does the latter subsume the former?\nRosalee: Kimbery I haven’t touched it in a while, although Chez’s compiler is nanopass.\nRosalee: Although I don’t know how hard it is to compile Racket code to chez code. Vincenzo would obviously know about that more than me. :wink:\nRosalee: BTW, can anyone give me a good idea of when to use struct properties vs generics?:\nRosalee: woops, wrong question.\nRosalee: <[URL]\nRosalee: I ask because the convertible library (and pict-convertible library), are still using properties. So if I make another convertible library (video-convertible), should I use properties rather than generics.\nKimbery: Rosalee Thanks, that makes sense. I was just sort of idly wondering about how hard it would be to add GHC-style rewrite rules to Racket, and I figure it would be a lot easier to add to a compiler written in Racket rather than one written in C.\nChantelle: Rosalee probably struct properties should only be used when the value stored in the property isn't a function (or something function-like like a struct field index)\nLatarsha: Rosalee I think if you're compatible with [CODE] (which sounds nice) then use properties\nLatarsha: if you're building something new, use generics\nChantelle: I think the only thing generics can't do that props can is associate a value with a struct type itself in a way where you don't need an instance of the struct to access it; the generated methods of a generic interface always need an actual instance of the struct passed to them. Like how typeclasses let you associate a value with a type (such as [CODE] in [CODE]) but OO interfaces can't do that.\nChantelle: How can I test that two syntax objects have the same scopes? Is using [CODE] a reasonable way?\nLatarsha: I think you could try that, but compare using [CODE] on a symbol instead of [CODE]\nChantelle: ah, so [CODE] would be better?\nLatarsha: that's my best suggestion\nChantelle: thanks!\nKimbery: Chantelle [CODE] tests whether or not two things have the same scopes, not [CODE]\nKimbery: (I’m sure Latarsha knows this, just a minor detail)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 19,
        "duration_minutes": 162.15,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Latarsha",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-09-14T13:29:25.000265",
          "text": "<@Rosalee> <@Vincenzo> Is the nanopass Racket compiler rewrite still a thing now that the Chez rewrite is planned? Or does the latter subsume the former?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-14T14:00:11.000286",
          "text": "<@Kimbery> I haven’t touched it in a while, although Chez’s compiler is nanopass."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-14T14:01:07.000018",
          "text": "Although I don’t know how hard it is to compile Racket code to chez code. <@Vincenzo> would obviously know about that more than me. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-14T14:01:32.000405",
          "text": "BTW, can anyone give me a good idea of when to use struct properties vs generics?:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-14T14:01:40.000424",
          "text": "woops, wrong question."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-14T14:02:05.000435",
          "text": "<https://stackoverflow.com/questions/46225445/struct-properties-vs-generics-in-racket>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-14T14:03:13.000317",
          "text": "I ask because the convertible library (and pict-convertible library), are still using properties. So if I make another convertible library (video-convertible), should I use properties rather than generics."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-14T14:45:14.000596",
          "text": "<@Rosalee> Thanks, that makes sense. I was just sort of idly wondering about how hard it would be to add GHC-style rewrite rules to Racket, and I figure it would be a lot easier to add to a compiler written in Racket rather than one written in C."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-14T15:21:00.000216",
          "text": "<@Rosalee> probably struct properties should only be used when the value stored in the property isn't a function (or something function-like like a struct field index)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-14T15:24:18.000296",
          "text": "<@Rosalee> I think if you're compatible with `convertible` (which sounds nice) then use properties"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-14T15:24:25.000326",
          "text": "if you're building something new, use generics"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-14T15:27:33.000398",
          "text": "I think the only thing generics can't do that props can is associate a value with a struct type itself in a way where you don't need an instance of the struct to access it; the generated methods of a generic interface always need an actual instance of the struct passed to them. Like how typeclasses let you associate a value with a type (such as `mempty` in `Monoid`) but OO interfaces can't do that."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-14T15:45:56.000690",
          "text": "How can I test that two syntax objects have the same scopes? Is using `(equal? (datum-&gt;syntax stx1 #f) (datum-&gt;syntax stx2 #f))` a reasonable way?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-14T15:47:21.000457",
          "text": "I think you could try that, but compare using `free-identifier=?` on a symbol instead of `#f`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-14T15:48:10.000069",
          "text": "ah, so `(let ([id (gensym)]) (free-identifier=? (datum-&gt;syntax stx1 id) (datum-&gt;syntax stx2 id)))` would be better?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-14T15:48:35.000222",
          "text": "that's my best suggestion"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-14T15:48:42.000522",
          "text": "thanks!"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-14T16:10:47.000276",
          "text": "<@Chantelle> `bound-identifier=?` tests whether or not two things have the same scopes, not `free-identifier=?`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-14T16:11:34.000164",
          "text": "(I’m sure <@Latarsha> knows this, just a minor detail)"
        }
      ]
    },
    {
      "conversation_id": "249",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: [CODE] tests if two identifiers have the same _binding_\nChantelle: oh right\nChantelle: yeah [CODE] is definitely what I want",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 0.2,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-09-14T16:11:06.000279",
          "text": "`free-identifier=?` tests if two identifiers have the same _binding_"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-14T16:11:10.000147",
          "text": "oh right"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-14T16:11:18.000073",
          "text": "yeah `bound-identifier=?` is definitely what I want"
        }
      ]
    },
    {
      "conversation_id": "250",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Willian: Latarsha whelp. I have no clue why that last pict run timed out. IDK what else to do other than disable the [CODE] [CODE] its associated tests entirely. (The computer on which I could reproduce this is currently borked atm too…) BTW do you know if we can clear the timer logs for that file or something? Its currently making the drdr page really slow to load it seems.\nRoxann: Writing a paper in Scribble/acmart/acmsmall, using bibtex. Was able to get citations as [1…99] numbers, aka `#:style number-style, but they are not linked to the bibtex entry. Is there a way, and probably an easier way, to make this happen. Was using a similar bib.rkt file from one of Van Horn’s papers: [CODE_BLOCK]\nNelson: Roxann try using the [CODE] code here: <[URL]\nNelson: (I inherited that code from Asumu ... and I think it'll add the links like you want.)\nRoxann: Nelson thanks, i’ll try it out\nRoxann: Nelson it does indeed link things, but always takes me to the first page upon click\nRoxann: we are using a bib file though\nNelson: that's weird and bad ...\nRoxann: let me take a look at the generated tex\nNelson: here's a full example, also using a bib file: <[URL]\nNelson: are you calling [CODE] somewhere?\nRoxann: Nelson yep, calling it the main scribble file\nNelson: at the bottom, after all the [CODE]s? (not sure if that matters)\nRoxann: yep, it’s the last thing\nNelson: oops haha\nRoxann: [CODE] is what a citation looks like in tex\nNelson: add this to your texstyle [CODE]\nRoxann: ah, ok\nNelson: (or change [CODE] to generate a call to [CODE])\nRoxann: ok\nNelson: is it working?\nRoxann: not yet. going to look at generating hyperrefs\nNelson: ok (did \"texstyle\" make any sense?)\nRoxann: yeah, i have a .tex file for other things we’re using and have [CODE]\nRoxann: in there\nRoxann: run it as per [CODE]\nRoxann: was actually looking at <[URL] to see if I missed something. Odd that it works elsewhere\nRoxann: for these\nRoxann: I do realize that in popl-2016 example, define-site does not point to the .bib filename though\nRoxann: the cs.bib\nRoxann: as we’re doing, where we point to the bib file specifically\nNelson: oh, good point. Try using just [CODE] ?\nNelson: ... I guess you'd have to reformat your bib file\nRoxann: yeah Nelson. thinking that may do the trick as i build examples. Will try that tomorrow possibly.\nRoxann: but, maybe I’ll play around w/ the code and see. it seems like it should still match up, but we’ll see.\nNelson: ok, feel free to send me your bib file if you get stuck. I can try later tonight.\nRoxann: oh, great. Yeah. I’ll dm that to you\nNelson: Rosalee the bibliography links in the super 8 paper are broken --- clicking a citation jumps to the first page. <[URL]\nNelson: Roxann Rosalee the problem seems to be, the section header for the Bib / References isn't a valid target for hyperref\nNelson: 1. if I add a [CODE] just after the bibliography, links work\nNelson: 2. if I change the bibliography from [CODE] to [CODE] (in the generated TeX), then links work\nRoxann: oh, interesting.\nNelson: Adding [CODE] to [CODE] works ... setting up a PR now but I'm not going to test it now\nRoxann: Nelson thanks for all the work\nRosalee: Nelson Interesting and good catch.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 45,
        "duration_minutes": 1244.28,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Nelson",
          "Rosalee",
          "Roxann",
          "Willian"
        ]
      },
      "timeline": [
        {
          "user": "Willian",
          "timestamp": "2017-09-14T16:45:37.000524",
          "text": "<@Latarsha> whelp. I have no clue why that last pict run timed out. IDK what else to do other than disable the `\"auto pict conversion\"` `test-suite` its associated tests entirely. (The computer on which I could reproduce this is currently borked atm too…)\n\nBTW do you know if we can clear the timer logs for that file or something? Its currently  making the drdr page really slow to load it seems."
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T17:10:50.000412",
          "text": "Writing a paper in Scribble/acmart/@acmsmall, using bibtex. Was able to get citations as [1…99] numbers, aka `#:style number-style, but they are not linked to the bibtex entry. Is there a way, and probably an easier way, to make this happen. Was using a similar bib.rkt file from one of Van Horn’s papers:\n\n```\n#lang racket\n\n(require scriblib/autobib scriblib/bibtex)\n(provide ~cite citet generate-bib)\n(provide (all-from-out scriblib/bibtex scriblib/autobib))\n\n(define-bibtex-cite \"occam.bib\" ~cite citet generate-bib #:style number-style)```"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:26:48.000079",
          "text": "<@Roxann> try using the `small-number-style` code here: <https://github.com/bennn/gtp-paper/blob/master/template/main.rkt#L94>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:27:16.000237",
          "text": "(I inherited that code from Asumu ... and I think it'll add the links like you want.)"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:27:29.000065",
          "text": "<@Nelson> thanks, i’ll try it out"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:33:44.000226",
          "text": "<@Nelson> it does indeed link things, but always takes me to the first page upon click"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:35:35.000050",
          "text": "we are using a bib file though"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:36:45.000251",
          "text": "that's weird and bad ..."
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:37:09.000125",
          "text": "let me take a look at the generated tex"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:37:31.000199",
          "text": "here's a full example, also using a bib file: <https://github.com/nuprl/gradual-typing-performance/tree/master/paper/popl-2016>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:38:05.000182",
          "text": "are you calling `generate-bibliography` somewhere?"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:39:41.000019",
          "text": "<@Nelson> yep, calling it the main scribble file"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:41:41.000073",
          "text": "at the bottom, after all the `include-section`s? (not sure if that matters)"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:41:55.000008",
          "text": "yep, it’s the last thing"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:42:12.000205",
          "text": "oops haha"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:42:15.000150",
          "text": "`~[\\Thyperref{48}{autobiblab:48}]` is what a citation looks like in tex"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:42:21.000113",
          "text": "add this to your texstyle `\\newcommand{\\Thyperref}[2]{\\hyperref[#2]{#1}}`"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:42:25.000186",
          "text": "ah, ok"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:43:28.000134",
          "text": "(or change `render-citation` to generate a call to `\\hyperref`)"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:43:39.000042",
          "text": "ok"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T19:58:56.000061",
          "text": "is it working?"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T19:59:55.000321",
          "text": "not yet. going to look at generating hyperrefs"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T20:01:27.000254",
          "text": "ok (did \"texstyle\" make any sense?)"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:01:58.000136",
          "text": "yeah, i have a .tex file for other things we’re using and have `\\newcommand{\\Thyperref}[2]{\\hyperref[#2]{#1}}`"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:02:00.000220",
          "text": "in there"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:02:18.000022",
          "text": "run it as per `raco scribble ++style style.tex...`"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:02:50.000147",
          "text": "was actually looking at <https://github.com/migeed-z/retic_performance/blob/fdf795946b311e7d64f04902ab54e322f03594df/dls/common.rkt> to see if I missed something. Odd that it works elsewhere"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:02:54.000165",
          "text": "for these"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:04:21.000121",
          "text": "I do realize that in popl-2016 example, define-site does not point to the .bib filename though"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:04:24.000015",
          "text": "the cs.bib"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:04:54.000244",
          "text": "as we’re doing, where we point to the bib file specifically"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T20:09:54.000084",
          "text": "oh, good point. Try using just `define-cite` ?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T20:10:49.000070",
          "text": "... I guess you'd have to reformat your bib file"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:11:21.000292",
          "text": "yeah <@Nelson>. thinking that may do the trick as i build examples. Will try that tomorrow possibly."
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:13:00.000096",
          "text": "but, maybe I’ll play around w/ the code and see. it seems like it should still match up, but we’ll see."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-14T20:15:09.000004",
          "text": "ok, feel free to send me your bib file if you get stuck. I can try later tonight."
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T20:15:52.000174",
          "text": "oh, great. Yeah. I’ll dm that to you"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T09:59:25.000362",
          "text": "<@Rosalee> the bibliography links in the super 8 paper are broken --- clicking a citation jumps to the first page. <https://www2.ccs.neu.edu/racket/pubs/icfp17-acf.pdf>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T10:17:11.000348",
          "text": "<@Roxann> <@Rosalee> the problem seems to be, the section header for the Bib / References isn't a valid target for hyperref"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T10:17:28.000460",
          "text": "1. if I add a `\\section{Foo}` just after the bibliography, links work"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T10:17:54.000210",
          "text": "2. if I change the bibliography from `\\Ssectionstarx{Bibliography}` to `\\Ssection{Bibliography}` (in the generated TeX), then links work"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-15T10:23:08.000058",
          "text": "oh, interesting."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T10:23:51.000712",
          "text": "Adding `\\phantomsection` to `\\Sectionstarx` works ... setting up a PR now but I'm not going to test it now"
        },
        {
          "user": "Roxann",
          "timestamp": "2017-09-15T10:27:36.000312",
          "text": "<@Nelson> thanks for all the work"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-15T13:29:54.000077",
          "text": "<@Nelson> Interesting and good catch."
        }
      ]
    },
    {
      "conversation_id": "251",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Roxann: as an update to our convo, seems like the snippet works find when using sigplan, but not for acmsmall or acmtog, etc…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Roxann"
        ]
      },
      "timeline": [
        {
          "user": "Roxann",
          "timestamp": "2017-09-14T23:57:12.000004",
          "text": "as an update to our convo, seems like the snippet works find when using @sigplan, but not for @acmsmall or @acmtog, etc…"
        }
      ]
    },
    {
      "conversation_id": "252",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: is it acceptable etiquette to create two posts on Racket users and dev email lists about the same thing or to alert users about a topic on dev email list? I believe the dev email list is low traffic so I was thinking to alert interested users to check the other list but didn't want to seem spammy.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-09-15T10:07:11.000683",
          "text": "is it acceptable etiquette to create two posts on Racket users and dev email lists about the same thing or to alert users about a topic on dev email list? I believe the dev email list is low traffic so I was thinking to alert interested users to check the other list but didn't want to seem spammy."
        }
      ]
    },
    {
      "conversation_id": "253",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Thanks.\nRosalee: Did you already post a push to fix it?\nRosalee: Jacob I think most of the people on the dev mailing list are also on the users mailing list so just posting to users will get everyone. (If that is what you’re going for.)\nRosalee: Although I personally think posting a link to the dev list to the users list conversation would be fine.\nRosalee: (Although I am just one person. :wink: )\nJacob: Ha ok, my reasoning had been that work on package system was more of a developer thing than general users. I'll post to the users list and link to the dev list post.\nJacob: sure, I would like that. There'll certainly be a need for at length discussions about ideas for improving the package system.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 168.9,
        "contains_question": true,
        "action_keywords": [
          "discuss",
          "fix",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-15T13:29:57.000039",
          "text": "Thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-15T13:30:02.000351",
          "text": "Did you already post a push to fix it?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-15T13:31:00.000587",
          "text": "<@Jacob> I think most of the people on the dev mailing list are also on the users mailing list so just posting to users will get everyone. (If that is what you’re going for.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-15T13:31:22.000248",
          "text": "Although I personally think posting a link to the dev list to the users list conversation would be fine."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-15T13:31:27.000132",
          "text": "(Although I am just one person. :wink: )"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-15T14:03:45.000128",
          "text": "Ha ok, my reasoning had been that work on package system was more of a developer thing than general users. I'll post to the users list and link to the dev list post."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-15T16:18:51.000548",
          "text": "sure, I would like that. There'll certainly be a need for at length discussions about ideas for improving the package system."
        }
      ]
    },
    {
      "conversation_id": "254",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T14:06:24.000223",
          "text": "<https://github.com/racket/scribble/pull/142>"
        }
      ]
    },
    {
      "conversation_id": "255",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Jacob maybe a #pkg channel would be worth adding to the slack?\nJacob: who should I petition for adding the channel?\nChantelle: Eun dost thou hath channel create powers?\nChantelle: it would work as a good place for announcing new packages or talking about community packages too\nJacob: Agreed\nJacob: and looks like our wish has been granted\nNelson: GOTO <#C74SV1NJJ|pkg>\nEun: Chantelle: Doesn't everyone?\nChantelle: Eun huh, I guess I just assumed I wouldn't be able to\nChantelle: Tested, anyone can make a channel. Will keep that in mind :p\nChantelle: &gt; In retrospect, I probably would have turned any job into a programming-language project. #racketlife\nChantelle: Willian does [CODE] exit with a nonzero status code? I'm wondering how I can avoid running all my tests twice in CI\nWillian: Chantelle raco cover does do a non-zero exit code on test failure (I think) but it doesn't have the same notion of failure as raco test. I don't think I treats stderr as failure. Maybe it should.\nChantelle: Willian I think ideally raco test would provide a way for packages to declare they should be instrumented somehow when being tested, and cover could use that to generate the coverage map. Then the raco cover command would just take the map and upload it or summarize it.\nChantelle: That way it's not possible for raco test and raco cover to have different notions of test failure\nWillian: I'm not sure about the implications of doing that... Cover, for instance, is not compatible with running tests in parallel. Also I'm suspicious of this because cover can change a programs behavior\nWillian: That being said, a unified CI interface would be reaalllyyy nice\nChantelle: Willian maybe combined with an info field to control whether tests run in parallel? or something like that but more general\nChantelle: what sort of programs does cover change test behavior in?\nWillian: There are a few behavior changes that i don't understand and are probably bugs, but in general it changes the runtime of programs---both because of all the extra code and the inserted set!s probably mess with the optimizer---which can changes tests with timeouts or might change race condition behavior. It also greatly increases the memory used, which has caused intermittent OOM errors in the past.\nWillian: Also I'm not sure what effect cover will have on reflection now that I think about it...\nWillian: Also module loading can deadlock if you change the logger before a dynamic require....\nChantelle: Willian does cover only need to install errortrace during compilation and instrument running that compiled code or does it need to change [CODE] in other ways too?\nWillian: Neither? Cover uses errortrace's syntax traversal stuff to apply its own annotation function.\nWillian: It does a bunch of stuff differently: it sets up cross phase annotations, it handles #:cross-phase-persistant modules, it uses a different internal representation of coverage to handle multifile coverage more efficiently, etc. It does wind up reimplementing a bunch of stuff in errortrace though but I'm not sure how to get around that\nChantelle: Willian thanks, that clears up my understanding a lot. I've been thinking about testing and CI stuff a lot lately so let's talk more at racketcon, if you like :)\nWillian: Chantelle yes! I thinking about working on the cover issue you logged as a hackathon project\nChantelle: Which one? :P\nWillian: The most recent one\nWillian: <[URL]\nWillian: The other ones are... Hard...\nChantelle: Oh! Yes that's a great hackathon project and its something I definitely want to do\nChantelle: I'd like to combine that with two testing packages I have to do some neat stuff",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 33,
        "duration_minutes": 1550.62,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "create",
          "implement",
          "let's",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [
          "agreed"
        ],
        "participants": [
          "Chantelle",
          "Eun",
          "Jacob",
          "Nelson",
          "Willian"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-15T16:17:40.000225",
          "text": "<@Jacob> maybe a #pkg channel would be worth adding to the slack?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-15T16:19:01.000528",
          "text": "who should I petition for adding the channel?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-15T16:19:37.000371",
          "text": "<@Eun> dost thou hath channel create powers?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-15T16:19:56.000186",
          "text": "it would work as a good place for announcing new packages or talking about community packages too"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-15T16:20:24.000077",
          "text": "Agreed"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-09-15T16:20:34.000184",
          "text": "and looks like our wish has been granted"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T16:21:17.000039",
          "text": "GOTO <#C74SV1NJJ|pkg>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-15T16:30:54.000548",
          "text": "<@Chantelle>: Doesn't everyone?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-15T16:33:56.000270",
          "text": "<@Eun> huh, I guess I just assumed I wouldn't be able to"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-15T16:35:23.000143",
          "text": "Tested, anyone can make a channel. Will keep that in mind :p"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-15T22:32:54.000056",
          "text": "&gt; In retrospect, I probably would have turned any job into a programming-language project.\n\n#racketlife"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T15:20:13.000033",
          "text": "<@Willian> does `raco cover` exit with a nonzero status code? I'm wondering how I can avoid running all my tests twice in CI"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:01:16.000006",
          "text": "<@Chantelle> raco cover does do a non-zero exit code on test failure (I think) but it doesn't have the same notion of failure as raco test. I don't think I treats stderr as failure. Maybe it should."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T17:03:56.000033",
          "text": "<@Willian> I think ideally raco test would provide a way for packages to declare they should be instrumented somehow when being tested, and cover could use that to generate the coverage map. Then the raco cover command would just take the map and upload it or summarize it."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T17:04:37.000072",
          "text": "That way it's not possible for raco test and raco cover to have different notions of test failure"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:10:29.000050",
          "text": "I'm not sure about the implications of doing that... Cover, for instance, is not compatible with running tests in parallel. Also I'm suspicious of this because cover can change a programs behavior"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:12:20.000039",
          "text": "That being said, a unified CI interface would be reaalllyyy nice"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T17:22:35.000023",
          "text": "<@Willian> maybe combined with an info field to control whether tests run in parallel? or something like that but more general"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T17:23:20.000013",
          "text": "what sort of programs does cover change test behavior in?"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:27:58.000080",
          "text": "There are a few behavior changes that i don't understand and are probably bugs, but in general it changes the runtime of programs---both because of all the extra code and the inserted set!s probably mess with the optimizer---which can changes tests with timeouts or might change race condition behavior. It also greatly increases the memory used, which has caused intermittent OOM errors in the past."
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:29:07.000031",
          "text": "Also I'm not sure what effect cover will have on reflection now that I think about it..."
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:29:52.000097",
          "text": "Also module loading can deadlock if you change the logger before a dynamic require...."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T17:42:40.000008",
          "text": "<@Willian> does cover only need to install errortrace during compilation and instrument running that compiled code or does it need to change `current-compile` in other ways too?"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:45:55.000056",
          "text": "Neither? Cover uses errortrace's syntax traversal stuff to apply its own annotation function."
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T17:49:32.000026",
          "text": "It does a bunch of stuff differently: it sets up cross phase annotations, it handles #:cross-phase-persistant modules, it uses a different internal representation of coverage to handle multifile coverage more efficiently, etc. It does wind up reimplementing a bunch of stuff in errortrace though but I'm not sure how to get around that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T18:04:30.000032",
          "text": "<@Willian> thanks, that clears up my understanding a lot. I've been thinking about testing and CI stuff a lot lately so let's talk more at racketcon, if you like :)"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T18:05:32.000042",
          "text": "<@Chantelle> yes! I thinking about working on the cover issue you logged as a hackathon project "
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T18:05:42.000066",
          "text": "Which one? :P"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T18:06:09.000071",
          "text": "The most recent one"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T18:06:12.000051",
          "text": "<https://github.com/florence/cover/issues/139>"
        },
        {
          "user": "Willian",
          "timestamp": "2017-09-16T18:06:47.000006",
          "text": "The other ones are... Hard..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T18:07:00.000022",
          "text": "Oh! Yes that's a great hackathon project and its something I definitely want to do"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T18:08:17.000030",
          "text": "I'd like to combine that with two testing packages I have to do some neat stuff"
        }
      ]
    },
    {
      "conversation_id": "256",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Vincenzo profiled: <[URL]\nNelson: wow, same picture as always",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 0.7,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-15T21:42:17.000023",
          "text": "<@Vincenzo> profiled: <http://csprofiles.rice.edu/2017/09/13/flatt/>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-15T21:42:59.000006",
          "text": "wow, same picture as always"
        }
      ]
    },
    {
      "conversation_id": "257",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Nelson I’m starting to think there are only four pictures of Matthew on the internet…",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-09-16T01:59:04.000026",
          "text": "<@Nelson> I’m starting to think there are only four pictures of Matthew on the internet…"
        }
      ]
    },
    {
      "conversation_id": "258",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: ohhh",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-16T17:48:28.000048",
          "text": "ohhh"
        }
      ]
    },
    {
      "conversation_id": "259",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Kimbery That sort of fits my theory that, based on observable work output, Matthew is actually identical quadruplets.\nTilda: Hopefully quick question: in scribble, if I want to write [CODE], it'll typeset all that text just fine. How do I anti-quote the call to [CODE] so that it evaluates to a picture, and I get typeset output of [CODE]?\nVincenzo: Tilda [CODE]\nTilda: perfect, thanks :slightly_smiling_face:\nTilda: (might be nice to mention that in <[URL]\nVincenzo: Well, it's a [CODE] escape, not an at-reader escape\nTilda: mmm, fair. and it is indeed mentioned in racketblock, so I sit corrected :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 854.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Tilda",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-09-16T20:04:40.000007",
          "text": "<@Kimbery> That sort of fits my theory that, based on observable work output, Matthew is actually identical quadruplets."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-09-17T10:09:09.000024",
          "text": "Hopefully quick question: in scribble, if I want to write `@racketblock[(cons (circle 30 \"solid\" \"red\") '())]`, it'll typeset all that text just fine.  How do I anti-quote the call to `circle` so that it evaluates to a picture,  and I get typeset output of `(cons &lt;the actual circle&gt; '())`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T10:13:23.000064",
          "text": "<@Tilda> `#,`"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-09-17T10:14:32.000071",
          "text": "perfect, thanks :slightly_smiling_face:"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-09-17T10:15:29.000001",
          "text": "(might be nice to mention that in <https://docs.racket-lang.org/scribble/reader.html...>)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T10:16:41.000037",
          "text": "Well, it's a `racketblock` escape, not an at-reader escape"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-09-17T10:18:58.000002",
          "text": "mmm, fair.  and it is indeed mentioned in racketblock, so I sit corrected :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "260",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Is calling [CODE] in atomic mode (in the following snippet) safe?: [CODE_BLOCK]\nRosalee: It doesn’t need to synchronize on anything. It does do two constructions (the pair and the [CODE])\nRosalee: And it does do a set! on a list.\nRosalee: (One other place in the code also can set! the list, although it also runs in atomic mode.)\nRosalee: This code seems to be safe most of the time, but occasionally makes things deadlock.\nRosalee: Hmm…I seem to get the same behavior even when I do: [CODE_BLOCK]\nRosalee: errr\nRosalee: [CODE_BLOCK]\nRosalee: hmm…here’s any idea. Vincenzo, what happens when Racket is already in atomic mode, and an FFI call from another os-thread calls a racket callback. Would the async-apply wait until Racket leaves atomic mode?\nChantelle: Rosalee the questions you ask when you're developing video make me scared to do anything FFI related :p\nRosalee: Chantelle lol\nRosalee: Its actually not that bad for the most part.\nRosalee: And honestly, the fact that I can even ask those questions is pretty impressive, and speaks a lot to how good the ffi is. :slightly_smiling_face:\nChantelle: Rosalee I believe you, but I remain cautious :p\nRosalee: lol, fair.\nRosalee: It is always kind of amusing when you have a program with multiple threading systems running around. And you have to remember which mutex is associated with which system to avoid deadlocks…\nChantelle: oh jeez\nRosalee: He, he. Hopefully Sam Caldwell will get some of his concurrency DSLs out there, as that can help eliminate a lot of the problems. )\nRosalee: :slightly_smiling_face:\nRosalee: But ya. IMO, it really is quite fun. ^.^\nChantelle: have no idea who that is but concurrency dsls sound interesting\nChantelle: do you have a link?\nRosalee: Not yet no. He is a PhD student who was doing a lot of stuff with Sharolyn (who does seem to actually be on here. :wink: )\nRosalee: <[URL]\nChantelle: syndicate I have poked at a little\nRosalee: I guess there is that: <[URL]\nRosalee: Ah, okay\nVincenzo: Rosalee Yes, atomic mode means that [CODE] callbacks must wait",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 28,
        "duration_minutes": 291.37,
        "contains_question": true,
        "action_keywords": [
          "must",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:15:05.000016",
          "text": "Is calling `callback-proc` in atomic mode (in the following snippet) safe?:\n\n```\n(define ffmpeg-log-list '())\n(struct ffmpeg-msg (name\n                    level\n                    msg))\n\n(define (callback-proc name level len msg)\n  (define name* (or name #\"???\"))\n  (set! ffmpeg-log-list (cons (ffmpeg-msg name* level msg) ffmpeg-log-list)))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:15:33.000136",
          "text": "It doesn’t need to synchronize on anything. It does do two constructions (the pair and the `ffmpeg-msg`)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:15:45.000037",
          "text": "And it does do a set! on a list."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:16:08.000010",
          "text": "(One other place in the code also can set! the list, although it also runs in atomic mode.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:16:35.000039",
          "text": "This code seems to be safe most of the time, but occasionally makes things deadlock."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:41:40.000010",
          "text": "Hmm…I seem to get the same behavior even when I do:\n```\n(define (callback-proc name level len msg)\n  (define name* (or name #\"???\")\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:41:52.000052",
          "text": "errr"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T13:41:58.000086",
          "text": "```\n(define (callback-proc name level len msg)\n  (define name* (or name #\"???\")\n  (void))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T15:37:12.000094",
          "text": "hmm…here’s any idea. <@Vincenzo>, what happens when Racket is already in atomic mode, and an FFI call from another os-thread calls a racket callback. Would the async-apply wait until Racket leaves atomic mode?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T17:22:11.000023",
          "text": "<@Rosalee> the questions you ask when you're developing video make me scared to do anything FFI related :p"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:50:37.000040",
          "text": "<@Chantelle> lol"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:50:43.000021",
          "text": "Its actually not that bad for the most part."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:51:12.000067",
          "text": "And honestly, the fact that I can even ask those questions is pretty impressive, and speaks a lot to how good the ffi is. :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T17:55:13.000069",
          "text": "<@Rosalee> I believe you, but I remain cautious :p"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:55:22.000009",
          "text": "lol, fair."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:56:09.000020",
          "text": "It is always kind of amusing when you have a program with multiple threading systems running around. And you have to remember which mutex is associated with which system to avoid deadlocks…"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T17:56:33.000031",
          "text": "oh jeez"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:57:15.000022",
          "text": "He, he. Hopefully Sam Caldwell will get some of his concurrency DSLs out there, as that can help eliminate a lot of the problems. )"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:57:16.000029",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:57:28.000020",
          "text": "But ya. IMO, it really is quite fun. ^.^"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T17:58:15.000079",
          "text": "have no idea who that is but concurrency dsls sound interesting"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T17:58:19.000015",
          "text": "do you have a link?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T17:59:41.000053",
          "text": "Not yet no. He is a PhD student who was doing a lot of stuff with <@Sharolyn> (who does seem to actually be on here. :wink: )"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T18:00:12.000087",
          "text": "<https://github.com/tonyg/syndicate>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T18:00:25.000050",
          "text": "syndicate I have poked at a little"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T18:00:50.000052",
          "text": "I guess there is that: <https://docs.racket-lang.org/syndicate/index.html?q=syndicate>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-17T18:00:51.000126",
          "text": "Ah, okay"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T18:06:27.000006",
          "text": "<@Rosalee> Yes, atomic mode means that `async-apply` callbacks must wait"
        }
      ]
    },
    {
      "conversation_id": "261",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: what is the [CODE] package scope for? going through the docs it seems to be so different users of the same computer can have different packages installed, but conflict checking is across all installed packages. why would it be useful then?\nVincenzo: Chantelle It doesn't work if installation-scope packages depend on user-scope packages, but the intent is that all dependencies go the other way. It also doesn't work if installation-scope packages change out from under a user. The normal case is that a distribution has installation scope and doesn't change, and everything else is in user-scope.\nChantelle: Vincenzo would it prevent a command like [CODE] from updating installation scope packages because that might cause problems?\nVincenzo: In a setting with user-scoped packages, normally that's the default (so [CODE] actions tend not to affect installation scope) and normally the catalog is configured so that an unchanging set of packages are reported for the installation (i.e., the catalog for a release, which freezes all of the packages that are included in the main distribution).\nChantelle: Vincenzo I think the main distribution packages are in both the normal catalog and a release catalog; do different installation scopes use different sets of package catalogs to resolve names to sources?\nVincenzo: No, they use the same catalogs, but the release catalog is ordered first in the search\nChantelle: I don't think I understand why there are package scopes then, since the \"main distribution packages are frozen\" behavior arises naturally due to how catalogs are configured\nVincenzo: It's not about which packages are updated, but about which directories can be written to install new packages. For a multi-user setting, the main distribution can be installed in \"/usr/local\" and shared among users. But users cannot install new packages there; they need to install packages in their own space, while sharing as much as possible with the main installation.\nChantelle: Vincenzo ohhh, so it's more about machine permissions and administration, instead of isolating packages from each other or dependencies?\nVincenzo: yes\nChantelle: how does using a directory as a package scope instead of using the installation or user scopes play into that?\nVincenzo: Chantelle A directory is meant to be an extra installation-like layer, similar to \"/usr/lib\" versus \"/usr/local/lib\".\nChantelle: Vincenzo ah, that makes sense. thanks for explaining all this!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 13,
        "duration_minutes": 163.48,
        "contains_question": true,
        "action_keywords": [
          "action",
          "need to",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T18:28:54.000094",
          "text": "what is the `user` package scope for? going through the docs it seems to be so different users of the same computer can have different packages installed, but conflict checking is across all installed packages. why would it be useful then?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T19:06:02.000073",
          "text": "<@Chantelle> It doesn't work if installation-scope packages depend on user-scope packages, but the intent is that all dependencies go the other way. It also doesn't work if installation-scope packages change out from under a user. The normal case is that a distribution has installation scope and doesn't change, and everything else is in user-scope."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T19:09:09.000037",
          "text": "<@Vincenzo> would it prevent a command like `raco pkg update --auto mypkg` from updating installation scope packages because that might cause problems?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T19:12:39.000046",
          "text": "In a setting with user-scoped packages, normally that's the default (so `raco pkg` actions tend not to affect installation scope) and normally the catalog is configured so that an unchanging set of packages are reported for the installation (i.e., the catalog for a release, which freezes all of the packages that are included in the main distribution)."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T19:14:12.000073",
          "text": "<@Vincenzo> I think the main distribution packages are in both the normal catalog and a release catalog; do different installation scopes use different sets of package catalogs to resolve names to sources?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T19:19:25.000060",
          "text": "No, they use the same catalogs, but the release catalog is ordered first in the search"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T19:22:00.000051",
          "text": "I don't think I understand why there are package scopes then, since the \"main distribution packages are frozen\" behavior arises naturally due to how catalogs are configured"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T19:39:16.000013",
          "text": "It's not about which packages are updated, but about which directories can be written to install new packages. For a multi-user setting, the main distribution can be installed in \"/usr/local\" and shared among users. But users cannot install new packages there; they need to install packages in their own space, while sharing as much as possible with the main installation."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T19:42:50.000049",
          "text": "<@Vincenzo> ohhh, so it's more about machine permissions and administration, instead of isolating packages from each other or dependencies?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T19:43:06.000019",
          "text": "yes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T19:44:15.000007",
          "text": "how does using a directory as a package scope instead of using the installation or user scopes play into that?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-17T21:08:34.000059",
          "text": "<@Chantelle> A directory is meant to be an extra installation-like layer, similar to \"/usr/lib\" versus \"/usr/local/lib\"."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-17T21:12:23.000015",
          "text": "<@Vincenzo> ah, that makes sense. thanks for explaining all this!"
        }
      ]
    },
    {
      "conversation_id": "262",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: Rosalee can you explain this program to me? I don't know why [CODE] is raising an error. <[URL]\nNelson: ^ I mean, \"why is [CODE] raising an error\"\nRosalee: Nelson how did you constuct pict-namespace?\nRosalee: Because if it's a different namespace, the runtime could be thinking they are two different struct types.\nNelson: [CODE] ... [CODE]; it is a different namespace\nRosalee: Nelson Ya, that is just because its a different namespace (and has nothing to do with pict.)\nRosalee: For example, if you add: [CODE_BLOCK]\nRosalee: and use [CODE] instead, it works out fine.\nVincenzo: Nelson Rosalee If the goal of [CODE] is to isolate effects, then it's better to use [CODE] to attach [CODE] to the new namespace. But maybe the just-pushed improvement to [CODE] docs means that you' already know that.\nRosalee: Vincenzo Yup, exactly.\nRosalee: Nelson and I (and Michael B.) figured that out, thanks though. :slightly_smiling_face:\nNelson: well we should post the solution\nRosalee: Nelson We did, by updating the docs. But in your case just adding a [CODE] works.\nRosalee: Speaking of nothing….I just found out that if you have:\nRosalee: A) A slider,\nRosalee: B) A timer that updates the slider on a regular interval, and\nRosalee: C) Click and drag the slider,\nRosalee: then every time the timer goes off while you are still holding the slider gets treated as if it was a click, rather than being set via set-value!\nRosalee: Not sure if that’s a bug or an intended feature. Thoughts Vincenzo?\nNelson: solution: <[URL]\nNelson: (\"short\" way to eval a string to a function from your favorite library)\nRosalee: Such as in this example: <[URL]\nRosalee: If you click and drag the slider around, the first callback will be what you want, but then you get a bunch of others that are not what you wanted.\nRosalee: Namely, you will get exactly how many as the amount the timer went off.\nVincenzo: Rosalee that's a bug\nRosalee: Vincenzo Okay. I’ll try to hunt it down unless you beat me to it.\nRosalee: Vincenzo I agree that sounds like the bug. Its more a matter of digging in and finding it. :wink:\nRosalee: Mostly because the implementation for the functions is: [CODE_BLOCK]\nRosalee: Which I am sure is great for code re-use, means I need to track down the actual [CODE] without the help of DrRacket’s arrows.\nRosalee: (which, to be clear, is absolutely fine with me. :slightly_smiling_face: )\nVincenzo: I expected to see the problem in \"gui-lib/mred/private/wx/cocoa/slider.rkt\", but I don't see anything there to control when [CODE] events are generated, so maybe my guess is wrong\nRosalee: Ya, about all I see is: [CODE_BLOCK]\nRosalee: Ah, this looks promising: [CODE_BLOCK]\nRosalee: And the [CODE] would explain why you see all of the calls right after you let go.\nRosalee: Vincenzo Interesting, the example from yesterday (<[URL] also causes it to crash on windows.\nRosalee: err….not crash\nRosalee: Cause it to jump to [CODE].\nRosalee: Oh wait, never mind. It is an os x bug\nRosalee: Vincenzo O.O The behavior is different if I run it in DrRacket vs running it in the command line!\nRosalee: That is surprising.\nRosalee: (Also, it looks like the behavior goes back to Racket 5.2. It probably goes back even further although anything 5.1.x and older segfaults on startup.)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 41,
        "duration_minutes": 1541.52,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "implement",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Nelson",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-09-18T11:32:11.000473",
          "text": "<@Rosalee> can you explain this program to me? I don't know why `(eval 'vl-append pict-namespace)` is raising an error. <http://pasterack.org/pastes/92108>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-18T11:32:40.000552",
          "text": "^ I mean, \"why is `((eval 'vl-append pict-namespace) (blank 0 0))` raising an error\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T11:51:01.000043",
          "text": "<@Nelson> how did you constuct pict-namespace?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T11:51:49.000023",
          "text": "Because if it's a different namespace, the runtime could be thinking they are two different struct types."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-18T11:53:41.000267",
          "text": "`make-base-namespace` ... `(namespace-require 'pict)`; it is a different namespace"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T12:41:40.000069",
          "text": "<@Nelson> Ya, that is just because its a different namespace (and has nothing to do with pict.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T12:41:49.000203",
          "text": "For example, if you add:\n```\n(define-namespace-anchor anchor)\n(define pict-namespace2\n  (namespace-anchor-&gt;namespace anchor))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T12:41:58.000283",
          "text": "and use `pict-namespace2` instead, it works out fine."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-18T15:15:36.000326",
          "text": "<@Nelson> <@Rosalee> If the goal of `pict-namespace` is to isolate effects, then it's better to use `namespace-attach-module` to attach `pict` to the new namespace. But maybe the just-pushed improvement to `namespace-attach-module` docs means that you' already know that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:16:02.000266",
          "text": "<@Vincenzo> Yup, exactly."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:16:29.000068",
          "text": "<@Nelson> and I (and Michael B.) figured that out, thanks though. :slightly_smiling_face:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-18T15:16:48.000089",
          "text": "well we should post the solution"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:17:42.000264",
          "text": "<@Nelson> We did, by updating the docs. But in your case just adding a `namespace-attach-module` works."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:17:59.000028",
          "text": "Speaking of nothing….I just found out that if you have:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:18:03.000356",
          "text": "A) A slider,"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:18:16.000517",
          "text": "B) A timer that updates the slider on a regular interval, and"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:18:25.000182",
          "text": "C) Click and drag the slider,"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:19:02.000530",
          "text": "then every time the timer goes off while you are still holding the slider gets treated as if it was a click, rather than being set via set-value!"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:19:15.000080",
          "text": "Not sure if that’s a bug or an intended feature. Thoughts <@Vincenzo>?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-18T15:25:55.000048",
          "text": "solution: <http://pasterack.org/pastes/63734>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-18T15:27:15.000016",
          "text": "(\"short\" way to eval a string to a function from your favorite library)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:27:23.000483",
          "text": "Such as in this example: <https://gist.github.com/LeifAndersen/ff07cb0ffd516b0333f2753db6e96c37>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:28:09.000323",
          "text": "If you click and drag the slider around, the first callback will be what you want, but then you get a bunch of others that are not what you wanted."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T15:28:31.000134",
          "text": "Namely, you will get exactly how many as the amount the timer went off."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-18T16:59:19.000547",
          "text": "<@Rosalee> that's a bug"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:06:47.000006",
          "text": "<@Vincenzo> Okay. I’ll try to hunt it down unless you beat me to it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:11:30.000149",
          "text": "<@Vincenzo> I agree that sounds like the bug. Its more a matter of digging in and finding it. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:12:52.000275",
          "text": "Mostly because the implementation for the functions is:\n```\n      (bounce \n       c\n       (get-value)\n       (set-value v))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:13:25.000320",
          "text": "Which I am sure is great for code re-use, means I need to track down the actual `get-value` without the help of DrRacket’s arrows."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:14:04.000314",
          "text": "(which, to be clear, is absolutely fine with me. :slightly_smiling_face: )"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-18T17:22:00.000205",
          "text": "I expected to see the problem in \"gui-lib/mred/private/wx/cocoa/slider.rkt\", but I don't see anything there to control when `'slider` events are generated, so maybe my guess is wrong"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:25:35.000308",
          "text": "Ya, about all I see is:\n```\n  (define/public (changed)\n    (callback this (new control-event%\n                        [event-type 'slider]\n                        [time-stamp (current-milliseconds)])))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:27:44.000091",
          "text": "Ah, this looks promising:\n```\n(define-objc-class RacketSlider NSSlider\n  #:mixins (FocusResponder KeyMouseResponder CursorDisplayer)\n  [wxb]\n  (-a _void (changed: [_id sender])\n      (let ([wx (-&gt;wx wxb)])\n        (when wx\n          (send wx update-message)\n          (queue-window-event wx (lambda () (send wx changed)))\n          (constrained-reply\n           (send wx get-eventspace)\n           (lambda () (let loop () (pre-event-sync #t) (when (yield/no-sync) (loop))))\n           (void))))))\n\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-18T17:28:18.000233",
          "text": "And the `queue-window-event` would explain why you see all of the calls right after you let go."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-19T13:01:28.000599",
          "text": "<@Vincenzo> Interesting, the example from yesterday (<https://gist.github.com/LeifAndersen/ff07cb0ffd516b0333f2753db6e96c37>) also causes it to crash on windows."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-19T13:01:37.000047",
          "text": "err….not crash"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-19T13:01:42.000648",
          "text": "Cause it to jump to `42`."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-19T13:03:17.000445",
          "text": "Oh wait, never mind. It is an os x bug"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-19T13:08:37.000112",
          "text": "<@Vincenzo> O.O The behavior is different if I run it in DrRacket vs running it in the command line!"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-19T13:08:42.000409",
          "text": "That is surprising."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-19T13:13:42.000510",
          "text": "(Also, it looks like the behavior goes back to Racket 5.2. It probably goes back even further although anything 5.1.x and older segfaults on startup.)"
        }
      ]
    },
    {
      "conversation_id": "263",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: I haven't investigated, but I think I know the problem: dragging puts the control in a \"slider-value update means that a the slider was moved\" mode, and calling [CODE] doesn't temporarily suppress that mode while updating the value",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-18T17:08:41.000521",
          "text": "I haven't investigated, but I think I know the problem: dragging puts the control in a \"slider-value update means that a the slider was moved\" mode, and calling `set-value` doesn't temporarily suppress that mode while updating the value"
        }
      ]
    },
    {
      "conversation_id": "264",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: I'm getting [CODE] - do scribble document modules for a collection _have_ to only be one folder down from the collection? Do I have to make a second [CODE] module next to my scribble document with just [CODE] defined?\nChantelle: nevermind, turned out to be a problem with the [CODE] part of the scribblings info",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 5.7,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-18T23:21:45.000053",
          "text": "I'm getting `WARNING: bad 'scribblings info: '((\"long//path/to/docs/main.scrbl\"))` - do scribble document modules for a collection _have_ to only be one folder down from the collection? Do I have to make a second `info.rkt` module next to my scribble document with just `scribblings` defined?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-18T23:27:27.000041",
          "text": "nevermind, turned out to be a problem with the `categories` part of the scribblings info"
        }
      ]
    },
    {
      "conversation_id": "265",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Yadira: good day. question about lexer. how i must write code for lexer without return token. For example, in flex i can write \"//\" {/* do nothing*/} but in lexer for drracket [(:seq #// #//) null] return (position-token '() (position 7 #f #f) (position 10 #f #f)) i don't need any return from this token. Help me, please\nMarlin: Yadira Assuming you're using the [CODE] form from [CODE], you just want to call the lexer (tail-)recursively. That's it. If you're using a [CODE] then you'd want to wrap your call in [CODE]. The documentation for [CODE] should be useful here: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 171.97,
        "contains_question": true,
        "action_keywords": [
          "must",
          "please",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Marlin",
          "Yadira"
        ]
      },
      "timeline": [
        {
          "user": "Yadira",
          "timestamp": "2017-09-19T07:39:22.000250",
          "text": "good day. question about lexer. how i must write code for lexer without return token. For example, in flex i can write \n\n\"//\" {/* do nothing*/}\n\nbut in lexer for drracket \n\n[(:seq #// #//) null]\n\nreturn (position-token '() (position 7 #f #f) (position 10 #f #f))\ni don't need any return from this token. \nHelp me, please"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-09-19T10:31:20.000218",
          "text": "<@Yadira> Assuming you're using the `lexer` form from `parser-tools/lex`, you just want to call the lexer (tail-)recursively. That's it. If you're using a `lexer-src-pos` then you'd want to wrap your call in `return-without-pos`. The documentation for `return-without-pos` should be useful here: <http://docs.racket-lang.org/parser-tools/Lexers.html?q=lexer-src-pos#%28form._%28%28lib._parser-tools%2Flex..rkt%29._return-without-pos%29%29>"
        }
      ]
    },
    {
      "conversation_id": "266",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Yadira: hello. im'm write simple code for convert string into list of tokens. My question - is more simple way for converting, than my code (define (lex-list s) (let ((buf (open-input-string s))) (let loop ((results '())) (let ((next-token (lexer buf))) (if (eq? 'EOF (token-name (position-token-token next-token))) (reverse results) (loop (cons next-token results)))))))\nLatarsha: Yadira I might write it like this:\nLatarsha: [CODE_BLOCK]\nLatarsha: Someone on Reddit reported an issue that seems to be [CODE] files not being used: <[URL]\nLatarsha: Vincenzo I think we've seen issues like this before, but I can't find the discussion in my email archives\nLatarsha: [CODE]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 636.48,
        "contains_question": true,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Yadira"
        ]
      },
      "timeline": [
        {
          "user": "Yadira",
          "timestamp": "2017-09-20T06:38:02.000071",
          "text": "hello. im'm write simple code for convert string into list of tokens. My question - is more simple way for converting, than my code \n\n(define (lex-list s)\n    (let ((buf (open-input-string s)))\n      (let loop ((results '()))\n        (let ((next-token   (lexer buf)))\n          (if (eq? 'EOF (token-name (position-token-token next-token)))\n              (reverse results)\n              (loop (cons  next-token results)))))))"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-20T09:39:19.000024",
          "text": "<@Yadira> I might write it like this:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-20T09:39:23.000097",
          "text": "```\n(define (lex-list s)\n  (define buf (open-input-string s))\n  (for/list ([next-token (in-producer (λ () (lexer buf)))]\n             #:break (eq? 'EOF (token-name (position-token-token next-token))))\n    next-token))\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-20T11:26:55.000521",
          "text": "Someone on Reddit reported an issue that seems to be `.zo` files not being used: <https://www.reddit.com/r/Racket/comments/713v6h/horrible_performance/>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-20T11:27:22.000307",
          "text": "<@Vincenzo> I think we've seen issues like this before, but I can't find the discussion in my email archives"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-20T17:14:31.000127",
          "text": "`(require 2htdp/image)`"
        }
      ]
    },
    {
      "conversation_id": "267",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ezequiel: I am making a image generator program but my image function was with 2htdp is there something I can do use (require) for the function?\nEzequiel: What I want is to make the function available to the rest of the program.\nChantelle: Ezequiel I'm unsure what you mean, could you provide more details?\nEzequiel: I mean (provide) with my function that is (require 2htdp/image) the rest of my program is #lang racket\nLatarsha: Ezequiel you can use [CODE] in [CODE]\nChantelle: Ezequiel This should work: [CODE_BLOCK]\nEzequiel: provide = provide: this function is not defined\nEzequiel: 1 sec\nEzequiel: I didn't think you could mix #lang racket with 2htdp\nChantelle: [CODE] is a normal library that any module​ can [CODE] and [CODE] will automatically [CODE] it for you (I think)\nEzequiel: LOL I lost a few hours trying to redo my function with pict 2htdp scale/xy\nChantelle: Glad to help :)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 12,
        "duration_minutes": 19.47,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ezequiel",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-20T17:14:07.000278",
          "text": "I am making a image generator program but my image function was with 2htdp is there something I can do use (require) for the function?"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-20T17:17:27.000015",
          "text": "What I want is to make the function available to the rest of the program."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-20T17:19:50.000060",
          "text": "<@Ezequiel> I'm unsure what you mean, could you provide more details?"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-20T17:20:49.000030",
          "text": "I mean (provide) with my function that is (require 2htdp/image) the rest of my program is #lang racket"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-20T17:22:34.000302",
          "text": "<@Ezequiel> you can use `2htdp/image` in `#lang racket`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-20T17:26:07.000034",
          "text": "<@Ezequiel> This should work:\n\n```\n#lang racket\n(require 2htdp/image)\n\n(define (my-image-func arg ...) ...)\n\n(provide my-image-func)\n```"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-20T17:28:06.000116",
          "text": "provide = provide: this function is not defined"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-20T17:28:19.000199",
          "text": "1 sec"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-20T17:28:34.000238",
          "text": "I didn't think you could mix #lang racket with 2htdp"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-20T17:31:37.000096",
          "text": "`2htdp/image` is a normal library that any module​ can `require` and `#lang 2htdp` will automatically `require` it for you (I think)"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-20T17:32:43.000309",
          "text": "LOL I lost a few hours trying to redo my function with pict  2htdp scale/xy"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-20T17:33:35.000073",
          "text": "Glad to help :)"
        }
      ]
    },
    {
      "conversation_id": "268",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: new ebook on racket <[URL] and discussion on HN: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-21T12:13:45.000329",
          "text": "new ebook on racket <http://serverracket.com/> and discussion on HN: <https://news.ycombinator.com/item?id=15301151>"
        }
      ]
    },
    {
      "conversation_id": "269",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I was curious how Matthew’s scope-sets talk did all its fancy animations, so I decided to look at the source code… now I am afraid.\nVincenzo: That one is a bad example because it was written to \"compile\" to GL, but backed back out to picts\nVincenzo: The \"meta-story\" talk at <[URL] may be a better example; it's different kind of example, but I felt like I was starting to get a handle on cartoon-style animations\nVincenzo: I bet others have better examples that are animations but not cartoons\nKimbery: I was mostly interested in the code animations that sets-of-scopes has, the parts where syntax is colored, duplicated, and moved around.\nLatarsha: that's in the less scary part of that code\nKimbery: it’s scary enough to me—I usually put my slides together with a point-and-click gui :)\nLatarsha: my slides might be less scary\nLatarsha: such as <[URL]\nEun: Natosha: Is winooski set up to send mail?\nKimbery: Latarsha where do those submodules come from?\nLatarsha: other private repos, I think\nLatarsha: I should make some of those public\nNatosha: Eun yes, winooski sends mail for now, but might not in the future\nEun: Natosha: Ok. I'm trying to replace some \"pull\" parts of the release with \"push\" equivalent (if that makes any sense), and sending mail would be the most convenient way, I think.\nEun: When you say \"might not in the future\", are you thinking of an active plan to get rid of it, or more as something that would get dropped in a transition, unless something is done to keep it?\nEun: There have been several.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 17,
        "duration_minutes": 213.82,
        "contains_question": true,
        "action_keywords": [
          "decide",
          "should"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Eun",
          "Kimbery",
          "Latarsha",
          "Natosha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-09-21T13:11:26.000251",
          "text": "I was curious how Matthew’s scope-sets talk did all its fancy animations, so I decided to look at the source code… now I am afraid."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-21T13:20:12.000008",
          "text": "That one is a bad example because it was written to \"compile\" to GL, but backed back out to picts"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-21T13:22:06.000436",
          "text": "The \"meta-story\" talk at <https://github.com/mflatt/talks> may be a better example; it's different kind of example, but I felt like I was starting to get a handle on cartoon-style animations"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-21T13:22:18.000137",
          "text": "I bet others have better examples that are animations but not cartoons"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-21T13:24:00.000500",
          "text": "I was mostly interested in the code animations that sets-of-scopes has, the parts where syntax is colored, duplicated, and moved around."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-21T13:25:30.000310",
          "text": "that's in the less scary part of that code"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-21T13:27:02.000632",
          "text": "it’s scary enough to me—I usually put my slides together with a point-and-click gui :)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-21T13:34:41.000235",
          "text": "my slides might be less scary"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-21T13:35:13.000317",
          "text": "such as <https://github.com/samth/edinburgh-2017>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-21T13:37:40.000266",
          "text": "<@Natosha>: Is winooski set up to send mail?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-21T13:42:11.000586",
          "text": "<@Latarsha> where do those submodules come from?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-21T13:42:41.000274",
          "text": "other private repos, I think"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-21T13:42:51.000641",
          "text": "I should make some of those public"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-09-21T13:50:09.000432",
          "text": "<@Eun> yes, winooski sends mail for now, but might not in the future"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-21T13:54:55.000424",
          "text": "<@Natosha>: Ok. I'm trying to replace some \"pull\" parts of the release with \"push\" equivalent (if that makes any sense), and sending mail would be the most convenient way, I think."
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-21T13:55:59.000064",
          "text": "When you say \"might not in the future\", are you thinking of an active plan to get rid of it, or more as something that would get dropped in a transition, unless something is done to keep it?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-09-21T16:45:15.000194",
          "text": "There have been several."
        }
      ]
    },
    {
      "conversation_id": "270",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Does anyone know when the racketio bug fix hit HEAD?\nLatarsha: Rosalee if you go here: <[URL] then each commit message has a link to the commit it was taken from on master\nRosalee: Eun thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 55.73,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-21T15:51:55.000411",
          "text": "Does anyone know when the racketio bug fix hit HEAD?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-21T16:46:32.000247",
          "text": "<@Rosalee> if you go here: <https://github.com/racket/racket/commits/v6.10.1> then each commit message has a link to the commit it was taken from on master"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-21T16:47:39.000280",
          "text": "<@Eun> thanks"
        }
      ]
    },
    {
      "conversation_id": "271",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Usha: Is there a way to have [CODE] support multiple paths with the [CODE] option? We currently pass in several -S arguments to regular Racket.exe\nGeorgeanna: I don’t think they’re equivalent. the [CODE] on [CODE] says that it is the main collects dir where [CODE] says “more collects”.\nUsha: Sure, I just need to find a way to have the resulting .exe have a fully configured collects directory list. I just don't know how I translate a call to racket.exe with multiple -S options to bundle into a raco exe. Seems like I only get to have one collects directory with raco exe.\nUsha: But normal racket operation will gladly support more\nGeorgeanna: I’m not seeing much in the doco to hint otherwise either.\nGeorgeanna: do you just need the paths in the executable for runtime, not compile? Maybe [CODE] ?\nUsha: Hmm, would that prevent the embedding of modules referenced by those -S flags? I can give it a shot\nGeorgeanna: also look at doco for raco, section 19. maybe the config file thing can be of help\nUsha: Basically I'm trying to find a way to make racket work better with our distributed build system and one of the things its not very great at is dealing with lots of small files. I'm trying to bundle as much as I can into as few files as possible to send over the wire.\nGeorgeanna: I’m not experienced with compiling executables tho",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 10.1,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Usha"
        ]
      },
      "timeline": [
        {
          "user": "Usha",
          "timestamp": "2017-09-21T17:57:22.000126",
          "text": "Is there a way to have `raco exe` support multiple paths with the `--collects-path` option? We currently pass in several -S arguments to regular Racket.exe"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-21T18:01:27.000340",
          "text": "I don’t think they’re equivalent. the `--help` on `raco exe` says that it is the main collects dir where `racket` says “more collects”."
        },
        {
          "user": "Usha",
          "timestamp": "2017-09-21T18:03:35.000173",
          "text": "Sure, I just need to find a way to have the resulting .exe have a fully configured collects directory list. I just don't know how I translate a call to racket.exe with multiple -S options to bundle into a raco exe. Seems like I only get to have one collects directory with raco exe."
        },
        {
          "user": "Usha",
          "timestamp": "2017-09-21T18:03:48.000031",
          "text": "But normal racket operation will gladly support more"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-21T18:04:24.000257",
          "text": "I’m not seeing much in the doco to hint otherwise either."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-21T18:04:52.000006",
          "text": "do you just need the paths in the executable for runtime, not compile? Maybe `++exf &lt;flag&gt;` ?"
        },
        {
          "user": "Usha",
          "timestamp": "2017-09-21T18:06:24.000233",
          "text": "Hmm, would that prevent the embedding of modules referenced by those -S flags? I can give it a shot"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-21T18:07:06.000339",
          "text": "also look at doco for raco, section 19. maybe the config file thing can be of help"
        },
        {
          "user": "Usha",
          "timestamp": "2017-09-21T18:07:22.000191",
          "text": "Basically I'm trying to find a way to make racket work better with our distributed build system and one of the things its not very great at is dealing with lots of small files. I'm trying to bundle as much as I can into as few files as possible to send over the wire."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-21T18:07:28.000320",
          "text": "I’m not experienced with compiling executables tho"
        }
      ]
    },
    {
      "conversation_id": "272",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: do log receivers store received messages in a queue? I'm trying to get a list of all messages sent to a log receiver over the extent of calling some thunk.\nChantelle: the only way I can find to get messages out of a log receiver is to call [CODE] on it, but that blocks if no messages are immediately available\nChantelle: ah, I think I can use [CODE] with a procedure instead of a timeout to poll the receiver. It hadn't occurred to me that [CODE] would allow handling events that aren't ready with arbitrary behavior, instead of just a timeout.\nNelson: Chantelle did you try [CODE] ? Here's an example: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 714.03,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T00:09:25.000078",
          "text": "do log receivers store received messages in a queue? I'm trying to get a list of all messages sent to a log receiver over the extent of calling some thunk."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T00:10:03.000156",
          "text": "the only way I can find to get messages out of a log receiver is to call `sync` on it, but that blocks if no messages are immediately available"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T00:12:27.000058",
          "text": "ah, I think I can use `sync/timeout` with a procedure instead of a timeout to poll the receiver. It hadn't occurred to me that `sync/timeout` would allow handling events that aren't ready with arbitrary behavior, instead of just a timeout."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T12:03:27.000076",
          "text": "<@Chantelle> did you try `with-intercepted-logging` ? Here's an example: <https://github.com/bennn/rosette-contract/blob/master/private/util/log.rkt#L75>"
        }
      ]
    },
    {
      "conversation_id": "273",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: That repo looks interesting, Nelson\nNelson: Maybe someday. The idea was to do [CODE] with Rosette, but it only works now for datatypes Rosette can compile to SMT.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 8.05,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-22T12:24:02.000432",
          "text": "That repo looks interesting, <@Nelson> "
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T12:32:05.000030",
          "text": "Maybe someday. The idea was to do `contract-stronger?` with Rosette, but it only works now for datatypes Rosette can compile to SMT."
        }
      ]
    },
    {
      "conversation_id": "274",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Is there any way to add a 0 width field to a c-struct?\nRosalee: Or is there any sort of public version [CODE] I can use?\nRosalee: (Because [CODE] explodes in size and I want to generate stuff dynamically)\nVincenzo: I don't think you can have a 0-sized field in a cstruct.\nVincenzo: Exporting something like [CODE] would be fine. That function is not using anything private, anyway (so, in a pinch, you could just copy it)\nRosalee: Fair. I ask because I want to dynamically create about 10 or so sets of 4-5 structs or so of ~100 fields.\nRosalee: (Because if I statically create them I get a zo file of 100 MB)\nRosalee: But I still want one getter/setter for each field in the set.\nVincenzo: King Did the [CODE] idea solve your problem?\nUsha: No, I get [CODE] when I run the generated .exe\nUsha: I was trying with [CODE], so I just tried with separate [CODE] args, but it gave the same error\nVincenzo: King It looks like [CODE] is required, first, to remove the [CODE] that prevents Racket from consuming extra flags as its own. So, you probably need something like [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 12,
        "duration_minutes": 53.23,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Usha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T14:20:05.000319",
          "text": "<@Vincenzo> Is there any way to add a 0 width field to a c-struct?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T14:20:42.000236",
          "text": "Or is there any sort of public version `compute-offsets` I can use?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T14:21:12.000353",
          "text": "(Because `define-cstruct` explodes in size and I want to generate stuff dynamically)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T14:26:47.000326",
          "text": "I don't think you can have a 0-sized field in a cstruct."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T14:27:42.000161",
          "text": "Exporting something like `compute-offsets` would be fine. That function is not using anything private, anyway (so, in a pinch, you could just copy it)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T14:31:48.000297",
          "text": "Fair. I ask because I want to dynamically create about 10 or so sets of 4-5 structs or so of ~100 fields."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T14:31:59.000424",
          "text": "(Because if I statically create them I get a zo file of 100 MB)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T14:32:07.000520",
          "text": "But I still want one getter/setter for each field in the set."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T14:35:28.000317",
          "text": "<@King> Did the `raco exe ++exf -S ++exf &lt;path&gt; ...` idea solve your problem?"
        },
        {
          "user": "Usha",
          "timestamp": "2017-09-22T14:40:13.000562",
          "text": "No, I get `unknown switch: -S` when I run the generated .exe"
        },
        {
          "user": "Usha",
          "timestamp": "2017-09-22T14:42:19.000197",
          "text": "I was trying with `++exf \"-S &lt;path&gt;\"`, so I just tried with separate `++exf` args, but it gave the same error"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T15:13:19.000089",
          "text": "<@King> It looks like `--exf --` is required, first, to remove the `--` that prevents Racket from consuming extra flags as its own.\nSo, you probably need something like `raco exe --collects-path &lt;path&gt; --exf -- ++exf -S ++exf /tmp/other x.rkt ++exf --`"
        }
      ]
    },
    {
      "conversation_id": "275",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stefani: <!everyone> We are starting the Inside Racket Seminar shortly --- <[URL]\nGeorgeanna: audio keeps dropping but the video keeps going so I don’t think it is my tubes\nNelson: uhoh audio + video just dropped for me\nNelson: hm, just had to refresh\nGeorgeanna: good to know. I’ll try refreshing next time\nLatarsha: everything good here\nGeorgeanna: yeah… it’s been pretty stable\nGeorgeanna: damn… tau-double-arrow-slash-lambda-bang… how do you type all of that? an APL keyboard?\nNelson: something like [CODE] in DrRacket\nNelson: where [CODE] is \"control-\\\"\nGeorgeanna: I need to work with greg to get all these expansions into racket-mode\nNelson: I think you could just change input mode to TeX\nGeorgeanna: oh! looks like it might all be done… I need to learn how to activate it then\nNelson: or, I used to re-use agda mode\nLatarsha: Kimbery is correct about Typed Racket, btw\nCorey: IIUC <[URL]\nGeorgeanna: I don’t know agda…\nNelson: doesn't matter, it's just for the shortcuts, like, [CODE] instead of [CODE]\nRosalee: Kimbery You know what other compiler can loop? :wink:\nRosalee: Nelson Do I need to bring you a :pizza: ?\nRosalee: Nelson Eep, I only have one :heart: though…. I guess I could give you a kidney?\nRosalee: Okay Nelson, here: :kidney:\nNelson: lexi-lambda <[URL] !\nNelson: [CODE]\nKimbery: Rosalee I don’t even get it :disappointed:\nRosalee: Kimbery Ah, no worries. It was a bad attempt at a bad joke. At one point you were talking about the hacket (or haskell) compiler diverging. And I was making a bad joke that the Racket compiler is very easy to make diverge, at least if you include the macro expander. :slightly_smiling_face:\nRosalee: So ya, bad joke, sorry. :disappointed:\nKimbery: ah, yes. I ended up mentioning that, I think. :)\nRosalee: Ah, oh well.\nRosalee: I guess I was too busy trying to be snarky. Sorry. :wink:\nKimbery: haha, it’s fine\nRosalee: Good talk though\nRosalee: or code walk…\nRosalee: or hybrid.\nKimbery: thank you! it’s really dense.\nLatarsha: very nice job, Kimbery\nKimbery: thanks! it was fun to do. :)\nKimbery: it gave me a good motivation to clean up parts of the codebase in the past few weeks, too, since it was even worse a month ago, if you can believe it. :wink:\nRosalee: Meh….check out the video codebase….or don’t. :wink:\nRosalee: (You may end up blind like me if you do…)\nRosalee: Still, it was pretty cool.\nKimbery: it makes me wonder if I should back out the wild [CODE] names, haha\nKimbery: I did not put that much thought into them when I wrote them, and they have sort of… multiplied over time.\nKimbery: there used to be just [CODE] and [CODE], but then one thing led to another…\nRosalee: ya….\nRosalee: This is why I try to avoid having ..too… many greek symbols in my code.\nRosalee: They are really good….up until you realize that you have variables that are 5 or 6 or 7 of them concatenated together and have no idea what they’re trying to say…\nRosalee: Although honestly [CODE] makes sense to me.\nNelson: <[URL]\nRosalee: I would just cringe at having to type that. I mean, I’m sure I can set up a keyboard layout for it, but there really isn’t a standard one I’m aware of, and typing in the latex codes (or unicode codes), seems painful…\nNelson: \nRosalee: Oh god\nRosalee: lol\nKimbery: you end up building the muscle memory for [CODE], [CODE], and [CODE], and they are definitely concise and readable when you know the mnemonics.\nRosalee: Oh, I agree.\nKimbery: ([CODE] means “type”, [CODE] means multiple types, [CODE] means infer, [CODE] means check, and [CODE] means “with bindings”)\nRosalee: I’ve done that. But even with the muscle memory, a variable names [CODE] is kind of long…\nRosalee: although I guess its not any longer than [CODE]\nKimbery: yeah. though not longer than the equivalent, which would be [CODE]. but that’s more readable.\nKimbery: (well, in that case it just would be [CODE], I guess)\nRosalee: Maybe. Readabilities (as far as I can tell), is context sensitive.\nRosalee: Readability*\nRosalee: So given that you are living in this code and I’m not, I must defer to you here. :slightly_smiling_face:\nKimbery: I like the short names—I think they’re very cute—but I think it might be better to get rid of them if I want more people to contribute.\nKimbery: I don’t want to end up with something like Control.Lens.Operators",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 65,
        "duration_minutes": 160.52,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "must",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Georgeanna",
          "Kimbery",
          "Latarsha",
          "Nelson",
          "Rosalee",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Stefani",
          "timestamp": "2017-09-22T15:21:01.000112",
          "text": "<!everyone> We are starting the Inside Racket Seminar shortly --- <https://www.youtube.com/watch?v=3xFWcNarb3Q>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-22T15:45:17.000036",
          "text": "audio keeps dropping but the video keeps going so I don’t think it is my tubes"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T15:47:52.000183",
          "text": "uhoh audio + video just dropped for me"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T15:48:17.000148",
          "text": "hm, just had to refresh"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-22T15:50:08.000032",
          "text": "good to know. I’ll try refreshing next time"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-22T15:51:53.000027",
          "text": "everything good here"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-22T16:03:29.000522",
          "text": "yeah… it’s been pretty stable"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-22T16:05:30.000052",
          "text": "damn… tau-double-arrow-slash-lambda-bang… how do you type all of that? an APL keyboard?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T16:06:03.000391",
          "text": "something like `\\tauC-\\` in DrRacket"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T16:06:15.000385",
          "text": "where `C-\\` is \"control-\\\""
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-22T16:06:27.000315",
          "text": "I need to work with greg to get all these expansions into racket-mode"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T16:06:54.000316",
          "text": "I think you could just change input mode to TeX"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-22T16:07:15.000040",
          "text": "oh! looks like it might all be done… I need to learn how to activate it then"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T16:07:16.000356",
          "text": "or, I used to re-use agda mode"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-22T16:07:35.000118",
          "text": "<@Kimbery> is correct about Typed Racket, btw"
        },
        {
          "user": "Corey",
          "timestamp": "2017-09-22T16:09:38.000409",
          "text": "IIUC <https://github.com/greghendershott/racket-mode/blob/master/Reference.md#racket-unicode-input-method-enable>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-22T16:13:14.000338",
          "text": "I don’t know agda…"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T16:15:08.000538",
          "text": "doesn't matter, it's just for the shortcuts, like, `\\-` instead of `\\rightarrow`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T16:28:21.000217",
          "text": "<@Kimbery> You know what other compiler can loop? :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T16:34:59.000342",
          "text": "<@Nelson> Do I need to bring you a :pizza: ?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T16:39:13.000111",
          "text": "<@Nelson> Eep, I only have one :heart: though…. I guess I could give you a kidney?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T16:44:25.000093",
          "text": "Okay <@Nelson>, here: :kidney:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T17:08:28.000280",
          "text": "@lexi-lambda <https://github.com/AlexKnauth/syntax-sloc> !"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T17:08:34.000224",
          "text": "`raco sloc`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:18:59.000278",
          "text": "<@Rosalee> I don’t even get it :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:46:27.000211",
          "text": "<@Kimbery> Ah, no worries. It was a bad attempt at a bad joke. At one point you were talking about the hacket (or haskell) compiler diverging. And I was making a bad joke that the Racket compiler is very easy to make diverge, at least if you include the macro expander. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:46:49.000120",
          "text": "So ya, bad joke, sorry. :disappointed:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:46:56.000092",
          "text": "ah, yes. I ended up mentioning that, I think. :)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:47:07.000224",
          "text": "Ah, oh well."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:47:19.000145",
          "text": "I guess I was too busy trying to be snarky. Sorry. :wink:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:47:29.000022",
          "text": "haha, it’s fine"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:47:31.000141",
          "text": "Good talk though"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:47:38.000193",
          "text": "or code walk…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:47:40.000266",
          "text": "or hybrid."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:47:46.000032",
          "text": "thank you! it’s really dense."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-22T17:47:51.000060",
          "text": "very nice job, <@Kimbery>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:48:08.000108",
          "text": "thanks! it was fun to do. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:48:36.000126",
          "text": "it gave me a good motivation to clean up parts of the codebase in the past few weeks, too, since it was even worse a month ago, if you can believe it. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:49:13.000159",
          "text": "Meh….check out the video codebase….or don’t. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:49:21.000120",
          "text": "(You may end up blind like me if you do…)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:49:27.000238",
          "text": "Still, it was pretty cool."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:50:20.000156",
          "text": "it makes me wonder if I should back out the wild `τs⇔/λ!` names, haha"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:50:52.000178",
          "text": "I did not put that much thought into them when I wrote them, and they have sort of… multiplied over time."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:51:16.000237",
          "text": "there used to be just `τ⇒!` and `τ⇐!`, but then one thing led to another…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:53:36.000181",
          "text": "ya…."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:53:52.000393",
          "text": "This is why I try to avoid having ..too… many greek symbols in my code."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:54:29.000208",
          "text": "They are really good….up until you realize that you have variables that are 5 or 6 or 7 of them concatenated together and have no idea what they’re trying to say…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:54:59.000144",
          "text": "Although honestly `τs⇔/λ!` makes sense to me."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T17:55:29.000169",
          "text": "<http://lamport.azurewebsites.net/pubs/lamport-paxos.pdf>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:55:41.000184",
          "text": "I would just cringe at having to type that. I mean, I’m sure I can set up a keyboard layout for it, but there really isn’t a standard one I’m aware of, and typing in the latex codes (or unicode codes), seems painful…"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T17:55:47.000072",
          "text": ""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:55:55.000373",
          "text": "Oh god"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:55:56.000219",
          "text": "lol"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:56:41.000035",
          "text": "you end up building the muscle memory for `\\tau`, `\\Rightarr`, and `\\Leftarr`, and they are definitely concise and readable when you know the mnemonics."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:57:13.000319",
          "text": "Oh, I agree."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:57:28.000144",
          "text": "(`τ` means “type”, `τs` means multiple types, `⇒` means infer, `⇐` means check, and `/λ` means “with bindings”)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:58:21.000247",
          "text": "I’ve done that. But even with the muscle memory, a variable names `\\taus\\\\Rightarr!` is kind of long…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:58:53.000051",
          "text": "although I guess its not any longer than `define-syntax`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:59:05.000032",
          "text": "yeah. though not longer than the equivalent, which would be `infer+check-types/bindings`. but that’s more readable."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T17:59:33.000300",
          "text": "(well, in that case it just would be `infer-type!`, I guess)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T18:00:12.000249",
          "text": "Maybe. Readabilities (as far as I can tell), is context sensitive."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T18:00:20.000202",
          "text": "Readability*"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T18:00:40.000179",
          "text": "So given that you are living in this code and I’m not, I must defer to you here. :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T18:01:21.000233",
          "text": "I like the short names—I think they’re very cute—but I think it might be better to get rid of them if I want more people to contribute."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T18:01:32.000016",
          "text": "I don’t want to end up with something like Control.Lens.Operators"
        }
      ]
    },
    {
      "conversation_id": "276",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: (Which in this case I am.)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T17:46:41.000247",
          "text": "(Which in this case I am.)"
        }
      ]
    },
    {
      "conversation_id": "277",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo <[URL]\nChantelle: Kimbery maybe macro-added tooltips would work?\nChantelle: So mousing over the symbolic names would \"translate\" them to their much more wordy counterparts\nKimbery: that’s a fun idea… though I don’t know that everyone uses DrRacket, and it’d be pretty cryptic.\nChantelle: I think [CODE] understands tooltips\nKimbery: Nelson: given the relevant topic… I’m very interested in talking to you, Niesha, and Aracely about some type-related things at RacketCon this year.\nKimbery: I haven’t really been following the Turnstile development since I stopped using it… but I peeked at it a little while ago and it looked like you’ve been improving it.\nKimbery: though I’m not entirely sure who’s working on what at this point.\nNelson: Steven, Alex, and Milo Turner are the \"current\" devs. I think Steven + Alex have been doing a Typed Rosette, and Milo's been doing linear + affine types.\nKimbery: have I met Milo? I don’t immediately recognize the name.\nNelson: he wasn't at racket-con last year\nNelson: so I think no\nKimbery: that would explain things then, yes.\nNelson: was there anything in particular you wanted to ask about?\nNelson: I think recent Turnstile might have performance improvements you can re-use\nNelson: I'm not sure about other stuff\nKimbery: I’m interested in a few different things. trying to come up with a better story for dictionary elaboration is a big one, but that’s not really turnstile-related.\nKimbery: I’m also interested in talking to Stephen about laziness, since I get the sense he may have opinions about it ;)\nKimbery: I’m curious what the performance improvements are. I remember looking at [CODE] at one point, but otherwise I’m unsure what they might be.\nNelson: it might just be syntax-parse tuning, like using [CODE] (like you have already)\nKimbery: my bet is that [CODE] could give speedups, but I don’t think I can use it because of elaboration. :/\nNelson: oh! I just rememberd. Servant!\nNelson: that's something I was thinking about doing too, but never started\nKimbery: this is what the existing demo looks like in Hackett: [CODE_BLOCK]\nNelson: my idea was, have a DSL for web APIs, store these APIs in external files, and the macro expander can read the files &amp; generate typed racket types\nNelson: cool\nKimbery: yeah, the ability to make “type providers” a feature of the macro system is a neat one.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 27,
        "duration_minutes": 48.75,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Nelson",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-22T18:35:11.000262",
          "text": "<@Vincenzo> <https://github.com/racket/racket/pull/1814#issuecomment-331569921>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T18:54:01.000155",
          "text": "<@Kimbery> maybe macro-added tooltips would work?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T18:55:26.000262",
          "text": "So mousing over the symbolic names would \"translate\" them to their much more wordy counterparts"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T18:55:57.000064",
          "text": "that’s a fun idea… though I don’t know that everyone uses DrRacket, and it’d be pretty cryptic."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T19:01:01.000214",
          "text": "I think `racket-mode` understands tooltips"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:04:36.000142",
          "text": "<@Nelson>: given the relevant topic… I’m very interested in talking to you, <@Niesha>, and <@Aracely> about some type-related things at RacketCon this year."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:05:37.000083",
          "text": "I haven’t really been following the Turnstile development since I stopped using it… but I peeked at it a little while ago and it looked like you’ve been improving it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:06:15.000127",
          "text": "though I’m not entirely sure who’s working on what at this point."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:10:38.000004",
          "text": "Steven, Alex, and Milo Turner are the \"current\" devs. I think Steven + Alex have been doing a Typed Rosette, and Milo's been doing linear + affine types."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:11:33.000028",
          "text": "have I met Milo? I don’t immediately recognize the name."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:11:47.000073",
          "text": "he wasn't at racket-con last year"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:11:51.000139",
          "text": "so I think no"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:12:18.000136",
          "text": "that would explain things then, yes."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:12:22.000165",
          "text": "was there anything in particular you wanted to ask about?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:12:35.000003",
          "text": "I think recent Turnstile might have performance improvements you can re-use"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:12:49.000136",
          "text": "I'm not sure about other stuff"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:13:31.000091",
          "text": "I’m interested in a few different things. trying to come up with a better story for dictionary elaboration is a big one, but that’s not really turnstile-related."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:14:03.000032",
          "text": "I’m also interested in talking to Stephen about laziness, since I get the sense he may have opinions about it ;)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:14:55.000146",
          "text": "I’m curious what the performance improvements are. I remember looking at `syntax-local-expand-expression` at one point, but otherwise I’m unsure what they might be."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:16:25.000130",
          "text": "it might just be syntax-parse tuning, like using `#:commit` (like you have already)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:17:28.000005",
          "text": "my bet is that `syntax-local-expand-expression` could give speedups, but I don’t think I can use it because of elaboration. :/"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:21:37.000024",
          "text": "oh! I just rememberd. Servant!"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:22:31.000159",
          "text": "that's something I was thinking about doing too, but never started"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:23:13.000058",
          "text": "this is what the existing demo looks like in Hackett:\n```\n#lang hackett\n\n(require hackett/demo/web-server)\n\n(data Greeting (greeting String))\n\n(instance (-&gt;Body Greeting)\n  [-&gt;body (λ [(greeting name)] {\"Hello, \" ++ name ++ \"!\"})])\n\n(defserver run-server\n  [GET \"/\"               -&gt; String   =&gt; \"Hello, world!\"]\n  [GET \"greet\" -&gt; String -&gt; Greeting =&gt; greeting])\n\n(main (do (println \"Running server on port 8080.\")\n          (run-server 8080)))\n```"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:23:15.000220",
          "text": "my idea was, have a DSL for web APIs, store these APIs in external files, and the macro expander can read the files &amp; generate typed racket types"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-22T19:23:52.000023",
          "text": "cool"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-22T19:23:56.000011",
          "text": "yeah, the ability to make “type providers” a feature of the macro system is a neat one."
        }
      ]
    },
    {
      "conversation_id": "278",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: How can I get a list of submodules a module declares using only a [CODE] value? The closest things I've found are [CODE] and [CODE], but the former requires a [CODE] value and the latter only works for finding submodules of a module while that module is expanding.\nVincenzo: Chantelle [CODE] from [CODE] can help you load the code for a given module path. There's not really a way to list the possible submodules without consulting the code (in compiled or source form).\nChantelle: Vincenzo can / should there be a way to do that?\nVincenzo: There can't be a very different way to do that, since submodules are sometimes loaded only on demand. There could be a way to read compiled source just enough to find out what the submodules are, without actually reading the implementations.\nChantelle: Vincenzo as far as I can tell, what submodules a module has is a static property of a fully expanded module and not a dynamic one, so I'm not sure I understand the barriers to implementing such a [CODE] function\nChantelle: am I missing something?\nChantelle: I'm okay with such a function requiring that a module be loaded to find out what its submodules are, even if some of those submodules are [CODE] forms that could be loaded without loading the enclosing module\nChantelle: (use case is reflecting over all the modules in a package)\nVincenzo: A module doesn't currently keep a list of submodule paths separate from the submodules themselves. So, if the submodules are loaded separately, the module doesn't remember them.\nVincenzo: If you want to know what modules are in a package, though, don't you want to be working with the module implementations, anyway?\nChantelle: Vincenzo I'm not sure I understand your question. What I want is to go from a package name, to a tree of collection directories, to a list of files in each of those collections representing modules, to a tree of all submodules in each of those file modules. What do you mean by \"working with the module implementations\"?\nVincenzo: Since you have a filename for a module, then it seems like [CODE] is exactly what you want. You can use [CODE] on the result from [CODE] to traverse the tree of submodules.\nChantelle: Vincenzo ah, so you were referring to if I wanted to get submodules for some module without knowing anything at all about the module's source code\nChantelle: including where it's located\nChantelle: Vincenzo I assume [CODE] returns a [CODE] value if it uses the default [CODE] procedure?\nVincenzo: Yes\nChantelle: perfect, that ought to work just fine then\nChantelle: thank you!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 18,
        "duration_minutes": 49.32,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T20:40:06.000104",
          "text": "How can I get a list of submodules a module declares using only a `module-path?` value? The closest things I've found are `module-compiled-submodules` and `syntax-local-submodules`, but the former requires a `compiled-module-expression?` value and the latter only works for finding submodules of a module while that module is expanding."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T20:58:39.000005",
          "text": "<@Chantelle> `get-module-code` from `syntax/modcode` can help you load the code for a given module path. There's not really a way to list the possible submodules without consulting the code (in compiled or source form)."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:02:58.000088",
          "text": "<@Vincenzo> can / should there be a way to do that?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T21:04:30.000056",
          "text": "There can't be a very different way to do that, since submodules are sometimes loaded only on demand. There could be a way to read compiled source just enough to find out what the submodules are, without actually reading the implementations."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:08:18.000015",
          "text": "<@Vincenzo> as far as I can tell, what submodules a module has is a static property of a fully expanded module and not a dynamic one, so I'm not sure I understand the barriers to implementing such a `module-&gt;submodule-names` function"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:08:27.000041",
          "text": "am I missing something?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:10:25.000080",
          "text": "I'm okay with such a function requiring that a module be loaded to find out what its submodules are, even if some of those submodules are `module` forms that could be loaded without loading the enclosing module"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:11:11.000095",
          "text": "(use case is reflecting over all the modules in a package)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T21:12:15.000050",
          "text": "A module doesn't currently keep a list of submodule paths separate from the submodules themselves. So, if the submodules are loaded separately, the module doesn't remember them."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T21:12:39.000074",
          "text": "If you want to know what modules are in a package, though, don't you want to be working with the module implementations, anyway?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:16:08.000016",
          "text": "<@Vincenzo> I'm not sure I understand your question. What I want is to go from a package name, to a tree of collection directories, to a list of files in each of those collections representing modules, to a tree of all submodules in each of those file modules. What do you mean by \"working with the module implementations\"?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T21:20:08.000124",
          "text": "Since you have a filename for a module, then it seems like `get-module-code` is exactly what you want. You can use `module-compiled-submodules` on the result from `get-module-code` to traverse the tree of submodules."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:22:36.000083",
          "text": "<@Vincenzo> ah, so you were referring to if I wanted to get submodules for some module without knowing anything at all about the module's source code"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:23:07.000044",
          "text": "including where it's located"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:27:08.000105",
          "text": "<@Vincenzo> I assume `get-module-code` returns a `compiled-module-expression?` value if it uses the default `compile` procedure?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-22T21:27:21.000115",
          "text": "Yes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:29:21.000073",
          "text": "perfect, that ought to work just fine then"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-22T21:29:25.000073",
          "text": "thank you!"
        }
      ]
    },
    {
      "conversation_id": "279",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Rosalee your latest change broke the Travis build, which was evident on the PR\nRosalee: Latarsha The failed builds looked like they were independent networking errors.\nRosalee: Latarsha Which is also evident by the travis failure pattern. :wink:\nRosalee: [CODE_BLOCK]\nSadye: Yes! I found a zero-day in TR. How much will you pay me? Ooh, I should have asked that before filing the bug report. Darn!\nLatarsha: Rosalee if there's something wrong with Travis, then lets talk about that in the PR before merging\nLatarsha: In general we should have a rationale before breaking CI\nRosalee: Latarsha I have no idea what you are talking about as the build finished successfully: <[URL]\nLatarsha: Rosalee did you rerun some of the builds? it gave a message about failing here <[URL]\nRosalee: Yes, as the error had nothing to do with Racket, nor Travis, but (almost certainly) <[URL] being unavailable for the few minutes the build was running.\nRosalee: Like, I’m not trying to be obtuse. I just don’t know how that error could have been avoided.\nRosalee: Since, if we are going to depend on external sources like that in our build (which is fine imo), they will sometimes go down.\nRosalee: But I could be missing something.\nRosalee: I guess in this case I could have waited until <[URL] went back up. But that doesn’t really solve the problem because it can still go down when the merge test is running.\nRosalee: (Unless that is an acceptable risk?)\nLatarsha: Just make a comment that the travis failure is due to <[URL] being down\nRosalee: Okay, will do\nRosalee: And done. And I will do that going into the future. Thanks Latarsha\nRosalee: This sort of thing makes me wonder if travis has different error modes. Because errors caused by a server being unavailable should probably be put into a different category as errors from the code.\nRosalee: (sometimes…)\nNelson: Yeah, something like \"could not run\".\nNelson: I'd like this for when the northwestern machine is rebuilding, instead of: [CODE_BLOCK]\nRosalee: Ya, that would be nice.\nRosalee: I’ll have to look into it a bit more later.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 24,
        "duration_minutes": 3571.82,
        "contains_question": true,
        "action_keywords": [
          "build",
          "finish",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson",
          "Rosalee",
          "Sadye"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-22T23:56:48.000007",
          "text": "<@Rosalee> your latest change broke the Travis build, which was evident on the PR"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-23T09:57:43.000014",
          "text": "<@Latarsha> The failed builds looked like they were independent networking errors."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-23T09:58:26.000004",
          "text": "<@Latarsha> Which is also evident by the travis failure pattern. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-23T09:59:09.000041",
          "text": "```\nERROR: tcp-connect: connection failed\n  address: <http://www.unicode.org|www.unicode.org>\n  port number: 80\n  system error: handle not found; rktio_err=17\n```"
        },
        {
          "user": "Sadye",
          "timestamp": "2017-09-25T02:28:49.000183",
          "text": "Yes! I found a zero-day in TR. How much will you pay me?  Ooh, I should have asked that before filing the bug report. Darn!"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-25T10:44:29.000167",
          "text": "<@Rosalee> if there's something wrong with Travis, then lets talk about that in the PR before merging"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-25T10:45:47.000780",
          "text": "In general we should have a rationale before breaking CI"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:47:51.000546",
          "text": "<@Latarsha> I have no idea what you are talking about as the build finished successfully: <https://travis-ci.org/racket/racket/builds/278853287>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-25T10:50:57.000302",
          "text": "<@Rosalee> did you rerun some of the builds? it gave a message about failing here <https://racket.slack.com/archives/C3P4M37H7/p1506138806000017>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:52:07.000405",
          "text": "Yes, as the error had nothing to do with Racket, nor Travis, but (almost certainly) <http://unicode.org|unicode.org> being unavailable for the few minutes the build was running."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:52:31.000226",
          "text": "Like, I’m not trying to be obtuse. I just don’t know how that error could have been avoided."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:52:55.000241",
          "text": "Since, if we are going to depend on external sources like that in our build (which is fine imo), they will sometimes go down."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:53:18.000643",
          "text": "But I could be missing something."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:55:49.000848",
          "text": "I guess in this case I could have waited until <http://unicode.org|unicode.org> went back up. But that doesn’t really solve the problem because it can still go down when the merge test is running."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:55:55.000370",
          "text": "(Unless that is an acceptable risk?)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-25T10:56:10.000406",
          "text": "Just make a comment that the travis failure is due to <http://unicode.org|unicode.org> being down"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T10:57:57.000805",
          "text": "Okay, will do"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T11:00:06.000279",
          "text": "And done. And I will do that going into the future. Thanks <@Latarsha>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T11:01:17.000215",
          "text": "This sort of thing makes me wonder if travis has different error modes. Because errors caused by a server being unavailable should probably be put into a different category as errors from the code."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T11:01:23.000564",
          "text": "(sometimes…)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-25T11:03:30.000483",
          "text": "Yeah, something like \"could not run\"."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-25T11:03:45.000405",
          "text": "I'd like this for when the northwestern machine is rebuilding, instead of:\n```\n0.28s$ curl -L -o installer.sh <http://plt.eecs.northwestern.edu/snapshots/current/installers/racket-test-current-x86_64-linux-precise.sh>\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   314  100   314    0     0   1899      0 --:--:-- --:--:-- --:--:--  1903\n100   389  100   389    0     0   1474      0 --:--:-- --:--:-- --:--:--  1474\n0.01s$ sh installer.sh --in-place --dest ~/racket/\ninstaller.sh: 2: installer.sh: Syntax error: newline unexpected\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T11:28:29.000376",
          "text": "Ya, that would be nice."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T11:28:37.000410",
          "text": "I’ll have to look into it a bit more later."
        }
      ]
    },
    {
      "conversation_id": "280",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Sadye: Ooh, I think I got my first TR soundness bug!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Sadye"
        ]
      },
      "timeline": [
        {
          "user": "Sadye",
          "timestamp": "2017-09-25T00:06:19.000015",
          "text": "Ooh, I think I got my first TR soundness bug!"
        }
      ]
    },
    {
      "conversation_id": "281",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ezequiel: I have three functions I want to iterate through till #f I want to avoid for loops what is the normal practice of this in Racket?\nLatarsha: Ezequiel I would use a for loop and use [CODE]\nEzequiel: Latarsha using a for loop in a functionalish language just feels wrong :slightly_smiling_face:\nLatarsha: Ezequiel If you think about it as a comprehension then maybe it will feel better\nEzequiel: Latarsha How about apply? In R that is the normal way for getting around loops\nLatarsha: you can also use apply, but you shouldn't think of [CODE] or [CODE] as \"for loops\" in the imperative sense you're trying to avoid\nRosalee: Ezequiel From my experience, [CODE] (and friends), are more like [CODE] in other FP languages…\nRosalee: Ezequiel Also (unlike in R), for loops are actually reasonably fast, and (imo) a much cleaner way of saying things.\nRosalee: (Also they are proper expressions, unlike in some other languages &gt;.&gt; )",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 31.65,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ezequiel",
          "Latarsha",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-25T11:55:57.000119",
          "text": "I have three functions I want to iterate through till #f I want to avoid for loops what is the normal practice of this in Racket?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-25T11:57:19.000542",
          "text": "<@Ezequiel> I would use a for loop and use `in-producer`"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-25T12:20:12.000089",
          "text": "<@Latarsha> using a for loop in a functionalish language just feels wrong  :slightly_smiling_face:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-25T12:20:36.000428",
          "text": "<@Ezequiel> If you think about it as a comprehension then maybe it will feel better"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-25T12:22:31.000089",
          "text": "<@Latarsha> How about apply? In R that is the normal way for getting around loops"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-25T12:23:18.000574",
          "text": "you can also use apply, but you shouldn't think of `for/list` or `for/fold` as \"for loops\" in the imperative sense you're trying to avoid"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T12:26:17.000308",
          "text": "<@Ezequiel> From my experience, `lapply` (and friends), are more like `map` in other FP languages…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T12:27:09.000393",
          "text": "<@Ezequiel> Also (unlike in R), for loops are actually reasonably fast, and (imo) a much cleaner way of saying things."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-25T12:27:36.000529",
          "text": "(Also they are proper expressions, unlike in some other languages &gt;.&gt; )"
        }
      ]
    },
    {
      "conversation_id": "282",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ciara: Redex seems to be geared towards Reduction Semantics, which I really dig. But suppose you were to define a reduction relation as a Structural Operational Semantics instead. To define the step relation playing SOS's premise-conclusion game would you rather a) define a reduction relation and encode the premises as side-conditions or b) define a judgment form even though I've only seen people use these for typing rules? Or is there a third option I've just not stumbled over?\nCiara: thanks David. (it's good to hear from you btw.)\nCiara: I guess I'll try a judgment form then.\nCiara: yes, the link you sent me does exactly what I was asking about. A natural semantics is also an SOS.\nCiara: afaik.\nEzequiel: Loops hurt so bad",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 404.22,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ciara",
          "Ezequiel"
        ]
      },
      "timeline": [
        {
          "user": "Ciara",
          "timestamp": "2017-09-26T03:06:35.000326",
          "text": "Redex seems to be geared towards Reduction Semantics, which I really dig. But suppose you were to define a reduction relation as a Structural Operational Semantics instead. To define the step relation playing SOS's premise-conclusion game would you rather a) define a reduction relation and encode the premises as side-conditions or b) define a judgment form even though I've only seen people use these for typing rules? Or is there a third option I've just not stumbled over?"
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-26T05:24:03.000341",
          "text": "thanks <@David>. (it's good to hear from you btw.)"
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-26T05:25:00.000033",
          "text": "I guess I'll try a judgment form then."
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-26T05:27:00.000262",
          "text": "yes, the link you sent me does exactly what I was asking about. A natural semantics is also an SOS."
        },
        {
          "user": "Ciara",
          "timestamp": "2017-09-26T05:27:28.000012",
          "text": "afaik."
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-26T09:50:48.000242",
          "text": "Loops hurt so bad"
        }
      ]
    },
    {
      "conversation_id": "283",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "David: I’d use a judgment form for that. I see people using judgment forms for all sorts of things besides typing rules. For example, in *An Introduction to Redex with Abstracting Abstract Machines* [1], Van Horn uses them for everything from a lookup relation to operational semantics. [1]: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "David"
        ]
      },
      "timeline": [
        {
          "user": "David",
          "timestamp": "2017-09-26T05:16:19.000131",
          "text": "I’d use a judgment form for that. I see people using judgment forms for all sorts of things besides typing rules. For example, in *An Introduction to Redex with Abstracting Abstract Machines* [1], Van Horn uses them for everything from a lookup relation to operational semantics.\n\n[1]: <https://dvanhorn.github.io/redex-aam-tutorial/#%28part._.Evaluation%29>"
        }
      ]
    },
    {
      "conversation_id": "284",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ezequiel: <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ezequiel"
        ]
      },
      "timeline": [
        {
          "user": "Ezequiel",
          "timestamp": "2017-09-26T09:51:03.000036",
          "text": "<https://www.brinckerhoff.org/blog/2017/05/20/loops-hurt-so-bad/>"
        }
      ]
    },
    {
      "conversation_id": "285",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo I can never remember which is preferred: [CODE] or [CODE].\nRosalee: I’m thinking of putting a note in the docs, but since I can’t remember which is preferred, I’m not sure which to recommend.\nVincenzo: Rosalee Although I once had in mind that [CODE] would be preferred, [CODE] does slightly more. So, I found it tricky and not obviously worthwhile to pick on as preferred.\nRosalee: Vincenzo Ah, yes, that’s what it was. Thanks.\nRosalee: Vincenzo How can I construct a module declaration?\nRosalee: Like, I know I can use dynamic-require to instantiate and/or visit it, and I can use namespace-attach-* to attach a declaration of an already declared module.\nLatarsha: Rosalee [CODE] is the usual way\nGeorgeanna: Kimbery you had some network code ([URL] maybe?) in here the other day that used some call/thunky form I’d not seen before… I don’t remember it’s name. help?\nRosalee: Latarsha Ya, but won’t that also eval it? Hence also visiting and instantiating it?\nLatarsha: no\nKimbery: Georgeanna [CODE] <[URL]\nRosalee: Okay then. If I have a module on my filesystem, is there any way to declare it?\nRosalee: Like, say I want to declare [CODE]\nLatarsha: [CODE_BLOCK]\nRosalee: Fair.\nGeorgeanna: that was it… thanks. I’m using [CODE] and not sure how it’ll differ but I want to poke\nRosalee: That does work for anonymous modules (so to speak), but I’m not sure how to get that to work for ones that are on the filesystem. I mean, I could [CODE] it first, but then wouldn’t it be a different module?\nKimbery: Georgeanna [CODE] already closes the port, so I think it should be equivalent.\nGeorgeanna: I want to build a simple webapp for the server side of a client I already wrote in racket. is there something like ruby’s sinatra I can start with?\nKimbery: the [CODE] package.\nLatarsha: Rosalee why do you want to avoid visiting it?\nPatrice: Rosalee I thought dynamic require [CODE] does the declaration\nLatarsha: Georgeanna you might like <[URL]\nGeorgeanna: huh. why do I already have that installed? I guess it is an auto-install\nKimbery: it’s part of the main distribution.\nGeorgeanna: oh… but the doco says package. hrm\nLatarsha: Rosalee as Patrice suggests, [CODE] may be what you want, if you're ok with visiting the module\nRosalee: Latarsha Because I don’t want to run the module, nor do I want to expand the module.\nKimbery: Georgeanna the main distribution is a set of packages. [CODE] is minimal racket.\nLatarsha: Rosalee declaration involves expansion\nRosalee: Mm…good point.\nRosalee: Remind me the difference between visiting and expanding in this case then?\nKimbery: Georgeanna the main distribution has a lot of things in it. you can see them here: <[URL]\nLatarsha: <[URL]\nGeorgeanna: so lisp.sh uses [CODE] and [CODE] suggests stuffer chains… I assume the lisp.sh thing is more straightforward\nGeorgeanna: I think I just never noticed rackunit and the like listing as packages in the doco\nLatarsha: Georgeanna which docs for [CODE] suggest stuffer chains?\nKimbery: Georgeanna you probably want to look here, not at the place [CODE] deep links to. <[URL]\nLatarsha: another good tutorial is <[URL]\nKimbery: Latarsha [CODE] indexes into a weird spot for beginners.\nGeorgeanna: Latarsha I searched for web-server, clicked on the module result, and that drops you into section 3: stateless servers\nGeorgeanna: the example at the top of that is a stuffer chain\nLatarsha: Kimbery that's (partly) because [CODE] isn't really for beginners\nLatarsha: it ought to have a different name\nRosalee: “That is, the expander instantiates any variables defined in the module within begin-for-syntax, and it also evaluates all expressions for define-syntaxes transformer bindings.”\nRosalee: If that is the case, _and_ declaring a module requires visiting it…\nKimbery: Latarsha [CODE]? or [CODE]? not that it can be changed now.\nGeorgeanna: [CODE]\nRosalee: then its not at all clear how declaring a module and visiting a module differ. Like, is it possible to visit a module without declaring it, but not the other way around?\nGeorgeanna: maybe the module link should drop into section 1 ?\nKimbery: Georgeanna the web server library is pretty old. if you stick to a good subset of it, it works pretty nicely. but there’s some weird stuff in there.\nPatrice: Rosalee it is also possible that some module is copied from another namespace\nPatrice: I think in that case declaration will happen, but maybe not visiting\nKimbery: Georgeanna it would be nice to write a small layer on top of the web server that gives it a more consistent, modern interface. I started doing that at one point, but then I got roped into writing my programming language.\nLatarsha: me too\nGeorgeanna: haha\nRosalee: Patrice that makes sense.\nPatrice: iirc there's some low-level functions that actually does the declaration work\nGeorgeanna: “…and now I have 43 problems”\nPatrice: Rosalee <[URL] the two-argument mode of [CODE] does it\nRosalee: So then its safe to say that the ‘first’ time a module is declared, it _must_ be visited, but any further declarations do not require further visits (but can optionally still do it.)\nLatarsha: Rosalee the eval example does not visit the module\nKimbery: Georgeanna here’s a tiny example of one of my uses of the web server, which uses the most modern-feeling bits, I think. <[URL]\nGeorgeanna: if I’m keeping an in-memory db… is there some hook or signal or something I can register to save to disk before the process quits? I don’t see anything on [CODE]\nRosalee: Patrice Okay, thank you.\nGeorgeanna: Kimbery awesome. thanks\nLatarsha: Georgeanna you might be interested in <[URL]\nRosalee: Patrice So it seems like all declaring a module is…is applying that parameter’s function…\nRosalee: Which makes a _lot_ more sense. :slightly_smiling_face:\nRosalee: So now, if that is the case, I just need to find a way to call that function directly.\nRosalee: (Since I wan’t to declare a module on the filesystem without visiting it.)\nGeorgeanna: ella is pretty\nKimbery: Latarsha I have a bunch of utility functions and things sitting around that I’ve basically copied between various web-server projects because I haven’t felt like I have enough to put them into a package. Then I got stuck because I decided my web framework needed an ORM, and then I decided it would be really nice to have return-type polymorphism…\nKimbery: I have some stuff that does signed/encrypted session storage using libcrypto, rails-style “flashes”, bindings to recaptcha, match expanders for HTML forms, a short-id generator, and a simple HTML sanitizer. Also some sendgrid integration for sending emails, but that’s probably pretty half-baked.\nGeorgeanna: hrm… [CODE] isn’t like [CODE] in that it adds a thunk to run at exit… instead, it assumes the entire exit process and doesn’t actually exit… what am I not getting?\nGeorgeanna: AND! doesn’t actually run if via the cmdline?!?\nGeorgeanna: (unless I manually call [CODE])\nGeorgeanna: should I be using [CODE] instead?\nKimbery: Georgeanna my guess is that the exit handler isn’t really what you want. maybe you want a plumber? <[URL]\nGeorgeanna: yeah. that is strange. if I use [CODE] it does NOT get called if I call [CODE]… too tangled (yet not tangled enough?)\nGeorgeanna: I’ll poke at plumbers\nGeorgeanna: honestly… plumbers don’t make much sense to me. &gt; There is no guarantee that a flush callback will be called before a process terminates—either because the plumber is not the original plumber that is flushed by the default exit handler […]\nGeorgeanna: ah. I shouldn’t make one. just use [CODE]\nKimbery: Georgeanna my understanding is that the reason things like [CODE], [CODE], and [CODE] can be changed is to support things like DrRacket, but most programs will not touch them.\nKimbery: you certainly don’t want [CODE] in DrRacket to exit DrRacket.\nChantelle: Georgeanna Also, plumbers are for _optimistic_ resource cleanup, where it's acceptable if attempting to clean up the resource is abandoned. Custodian shutdown hooks are for things that absolutely _must_ happen during cleanup, and as such they're unsafe to use due to deadlocking / concurrency problems and you should be very careful about doing IO in them.\nGeorgeanna: is there a way to hook cancelling the web server in the repl?\nGeorgeanna: I can catch exit on the cmdline just fine… but that isn’t as clean as just running the code in the repl and then C-c C-c\nGeorgeanna: looks like it calls bye, then shutdown-server… but that doesn’t have hooks\nGeorgeanna: Latarsha I wound up expanding ella’s macros to include [CODE] (arb code in body) and [CODE] (bare name)\nGeorgeanna: such that: [CODE_BLOCK]\nLatarsha: I haven't touched that code in a while as you can see\nGeorgeanna: I am guessing I’ll mostly use the middle form\nLatarsha: So I'm happy to take any changes you make\nGeorgeanna: cool… question for you… is that first form in the examples file supposed to work at all? I’m guessing no?\nGeorgeanna: I was tempted to extend the macro to regexp-ify a bare word\nPatrice: Rosalee: rereading the doc again, now I'm not sure whether module declaration is actually performed by the default module name resolver",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 97,
        "duration_minutes": 360.92,
        "contains_question": true,
        "action_keywords": [
          "build",
          "decide",
          "must",
          "need to",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Kimbery",
          "Latarsha",
          "Patrice",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T14:26:00.000337",
          "text": "<@Vincenzo> I can never remember which is preferred: `module-path-index-resolve` or `resolve-module-path-index`."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T14:27:06.000201",
          "text": "I’m thinking of putting a note in the docs, but since I can’t remember which is preferred, I’m not sure which to recommend."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-26T14:36:26.000016",
          "text": "<@Rosalee> Although I once had in mind that `module-path-index-resolve` would be preferred, `resolve-module-path-index` does slightly more. So, I found it tricky and not obviously worthwhile to pick on as preferred."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T14:39:09.000488",
          "text": "<@Vincenzo> Ah, yes, that’s what it was. Thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T17:54:11.000138",
          "text": "<@Vincenzo> How can I construct a module declaration?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T17:55:05.000132",
          "text": "Like, I know I can use dynamic-require to instantiate and/or visit it, and I can use namespace-attach-* to attach a declaration of an already declared module."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T17:55:29.000034",
          "text": "<@Rosalee> `eval` is the usual way"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T17:56:27.000192",
          "text": "<@Kimbery> you had some network code (http, maybe?) in here the other day that used some call/thunky form I’d not seen before… I don’t remember it’s name. help?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T17:56:41.000055",
          "text": "<@Latarsha> Ya, but won’t that also eval it? Hence also visiting and instantiating it?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T17:56:51.000044",
          "text": "no"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T17:57:14.000242",
          "text": "<@Georgeanna> `call/input-url` <http://docs.racket-lang.org/net/url.html#%28def._%28%28lib._net%2Furl..rkt%29._call%2Finput-url%29%29>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T17:57:14.000502",
          "text": "Okay then. If I have a module on my filesystem, is there any way to declare it?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T17:57:36.000038",
          "text": "Like, say I want to declare `foo.rkt`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T17:57:40.000231",
          "text": "```\n&gt; (eval '(module m racket (display 1)))\n&gt; (require 'm)\n1\n&gt; \n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T17:57:48.000333",
          "text": "Fair."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T17:58:28.000020",
          "text": "that was it… thanks. I’m using `port-&gt;string (post-pure-port (string-&gt;url ...` and not sure how it’ll differ but I want to poke"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T17:58:42.000396",
          "text": "That does work for anonymous modules (so to speak), but I’m not sure how to get that to work for ones that are on the filesystem. I mean, I could `read` it first, but then wouldn’t it be a different module?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T17:59:16.000011",
          "text": "<@Georgeanna> `port-&gt;string` already closes the port, so I think it should be equivalent."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T17:59:21.000150",
          "text": "I want to build a simple webapp for the server side of a client I already wrote in racket. is there something like ruby’s sinatra I can start with?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T17:59:34.000256",
          "text": "the `web-server` package."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T17:59:52.000448",
          "text": "<@Rosalee> why do you want to avoid visiting it?"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-09-26T17:59:58.000169",
          "text": "<@Rosalee> I thought dynamic require `(void)` does the declaration"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:00:37.000103",
          "text": "<@Georgeanna> you might like <http://lisp.sh/crud-web-api-in-racket/>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:00:40.000054",
          "text": "huh. why do I already have that installed? I guess it is an auto-install"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:00:53.000293",
          "text": "it’s part of the main distribution."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:01:33.000109",
          "text": "oh… but the doco says package. hrm"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:01:40.000429",
          "text": "<@Rosalee> as <@Patrice> suggests, `(dynamic-require \"foo.rkt\" (void))` may be what you want, if you're ok with visiting the module"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:01:42.000040",
          "text": "<@Latarsha> Because I don’t want to run the module, nor do I want to expand the module."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:01:58.000342",
          "text": "<@Georgeanna> the main distribution is a set of packages. `base` is minimal racket."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:01:59.000175",
          "text": "<@Rosalee> declaration involves expansion"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:02:18.000121",
          "text": "Mm…good point."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:02:36.000256",
          "text": "Remind me the difference between visiting and expanding in this case then?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:03:00.000314",
          "text": "<@Georgeanna> the main distribution has a lot of things in it. you can see them here: <https://pkgs.racket-lang.org/package/main-distribution>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:03:10.000147",
          "text": "<http://docs.racket-lang.org/reference/syntax-model.html?q=dynamic-require#%28tech._visit%29>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:03:26.000380",
          "text": "so lisp.sh uses `serve/servlet` and `web-server` suggests stuffer chains… I assume the lisp.sh thing is more straightforward"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:04:01.000175",
          "text": "I think I just never noticed rackunit and the like listing as packages in the doco"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:04:12.000002",
          "text": "<@Georgeanna> which docs for `web-server` suggest stuffer chains?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:04:15.000196",
          "text": "<@Georgeanna> you probably want to look here, not at the place `#lang web-server` deep links to. <http://docs.racket-lang.org/web-server/index.html>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:04:24.000039",
          "text": "another good tutorial is <http://docs.racket-lang.org/continue/index.html>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:04:49.000046",
          "text": "<@Latarsha> `#lang web-server` indexes into a weird spot for beginners."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:05:05.000132",
          "text": "<@Latarsha> I searched for web-server, clicked on the module result, and that drops you into section 3: stateless servers"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:05:14.000019",
          "text": "the example at the top of that is a stuffer chain"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:05:18.000317",
          "text": "<@Kimbery> that's (partly) because `#lang web-server` isn't really for beginners"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:05:36.000243",
          "text": "it ought to have a different name"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:05:37.000274",
          "text": "“That is, the expander instantiates any variables defined in the module within begin-for-syntax, and it also evaluates all expressions for define-syntaxes transformer bindings.”"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:06:26.000352",
          "text": "If that is the case, _and_ declaring a module requires visiting it…"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:06:28.000225",
          "text": "<@Latarsha> `#lang web-server/stateless`? or `#lang web-server/continuation`? not that it can be changed now."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:06:42.000307",
          "text": "`#lang web-server/gah`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:07:00.000056",
          "text": "then its not at all clear how declaring a module and visiting a module differ. Like, is it possible to visit a module without declaring it, but not the other way around?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:07:06.000123",
          "text": "maybe the module link should drop into section 1 ?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:07:22.000151",
          "text": "<@Georgeanna> the web server library is pretty old. if you stick to a good subset of it, it works pretty nicely. but there’s some weird stuff in there."
        },
        {
          "user": "Patrice",
          "timestamp": "2017-09-26T18:07:32.000036",
          "text": "<@Rosalee> it is also possible that some module is copied from another namespace"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-09-26T18:08:01.000001",
          "text": "I think in that case declaration will happen, but maybe not visiting"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:08:13.000213",
          "text": "<@Georgeanna> it would be nice to write a small layer on top of the web server that gives it a more consistent, modern interface. I started doing that at one point, but then I got roped into writing my programming language."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:08:20.000013",
          "text": "me too"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:08:31.000386",
          "text": "haha"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:08:33.000238",
          "text": "<@Patrice> that makes sense."
        },
        {
          "user": "Patrice",
          "timestamp": "2017-09-26T18:08:36.000204",
          "text": "iirc there's some low-level functions that actually does the declaration work"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:08:45.000319",
          "text": "“…and now I have 43 problems”"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-09-26T18:09:11.000028",
          "text": "<@Rosalee> <https://docs.racket-lang.org/reference/Module_Names_and_Loading.html?q=current-module-name-resolve#%28def._%28%28quote._~23~25kernel%29._current-module-name-resolver%29%29> the two-argument mode of `current-module-name-resolve` does it"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:09:17.000361",
          "text": "So then its safe to say that the ‘first’ time a module is declared, it _must_ be visited, but any further declarations do not require further visits (but can optionally still do it.)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:09:35.000195",
          "text": "<@Rosalee> the eval example does not visit the module"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:10:27.000219",
          "text": "<@Georgeanna> here’s a tiny example of one of my uses of the web server, which uses the most modern-feeling bits, I think. <https://github.com/lexi-lambda/imgcap/blob/ae4a303c577b6d451a9f8d274b6f1907291b6530/imgcap/main.rkt>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:11:13.000245",
          "text": "if I’m keeping an in-memory db… is there some hook or signal or something I can register to save to disk before the process quits? I don’t see anything on `serve/servlet`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:11:15.000299",
          "text": "<@Patrice> Okay, thank you."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:11:29.000388",
          "text": "<@Kimbery> awesome. thanks"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T18:11:30.000250",
          "text": "<@Georgeanna> you might be interested in <https://github.com/samth/ella>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:12:19.000372",
          "text": "<@Patrice> So it seems like all declaring a module is…is applying that parameter’s function…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:12:28.000144",
          "text": "Which makes a _lot_ more sense. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:12:59.000216",
          "text": "So now, if that is the case, I just need to find a way to call that function directly."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T18:13:18.000168",
          "text": "(Since I wan’t to declare a module on the filesystem without visiting it.)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:13:33.000125",
          "text": "ella is pretty"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:14:29.000025",
          "text": "<@Latarsha> I have a bunch of utility functions and things sitting around that I’ve basically copied between various web-server projects because I haven’t felt like I have enough to put them into a package. Then I got stuck because I decided my web framework needed an ORM, and then I decided it would be really nice to have return-type polymorphism…"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:18:22.000107",
          "text": "I have some stuff that does signed/encrypted session storage using libcrypto, rails-style “flashes”, bindings to recaptcha, match expanders for HTML forms, a short-id generator, and a simple HTML sanitizer. Also some sendgrid integration for sending emails, but that’s probably pretty half-baked."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:21:04.000263",
          "text": "hrm… `exit-handler` isn’t like `at-exit` in that it adds a thunk to run at exit… instead, it assumes the entire exit process and doesn’t actually exit… what am I not getting?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:21:31.000123",
          "text": "AND! doesn’t actually run if via the cmdline?!?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:21:52.000258",
          "text": "(unless I manually call `(exit)`)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:22:44.000247",
          "text": "should I be using `(executable-yield-handler)` instead?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:23:17.000049",
          "text": "<@Georgeanna> my guess is that the exit handler isn’t really what you want. maybe you want a plumber? <http://docs.racket-lang.org/reference/plumbers.html>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:25:21.000197",
          "text": "yeah. that is strange. if I use `executable-yield-handler` it does NOT get called if I call `(exit)`… too tangled (yet not tangled enough?)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:25:24.000295",
          "text": "I’ll poke at plumbers"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:29:23.000098",
          "text": "honestly… plumbers don’t make much sense to me.\n\n&gt; There is no guarantee that a flush callback will be called before a process terminates—either because the plumber is not the original plumber that is flushed by the default exit handler […]"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T18:31:14.000096",
          "text": "ah. I shouldn’t make one. just use `current-plumber`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:32:52.000106",
          "text": "<@Georgeanna> my understanding is that the reason things like `exit-handler`, `executable-yield-handler`, and `current-plumber` can be changed is to support things like DrRacket, but most programs will not touch them."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-26T18:33:18.000168",
          "text": "you certainly don’t want `(exit)` in DrRacket to exit DrRacket."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-26T18:44:00.000097",
          "text": "<@Georgeanna> Also, plumbers are for _optimistic_ resource cleanup, where it's acceptable if attempting to clean up the resource is abandoned. Custodian shutdown hooks are for things that absolutely _must_ happen during cleanup, and as such they're unsafe to use due to deadlocking / concurrency problems and you should be very careful about doing IO in them."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T19:38:11.000026",
          "text": "is there a way to hook cancelling the web server in the repl?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T19:38:41.000023",
          "text": "I can catch exit on the cmdline just fine… but that isn’t as clean as just running the code in the repl and then C-c C-c"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T19:39:07.000177",
          "text": "looks like it calls bye, then shutdown-server… but that doesn’t have hooks"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T20:00:50.000094",
          "text": "<@Latarsha> I wound up expanding ella’s macros to include `(_ method route (e args ...) ...)` (arb code in body) and `(_ method route e)` (bare name)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T20:01:19.000082",
          "text": "such that:\n\n```\n(get #rx\"/incr\" (incr params))\n(get #rx\"/incr2\" incr)\n(get #rx\"/incr3\"\n     (set! db (cons (length db) db)) ...)\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T20:01:51.000012",
          "text": "I haven't touched that code in a while as you can see"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T20:01:53.000042",
          "text": "I am guessing I’ll mostly use the middle form"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T20:02:04.000248",
          "text": "So I'm happy to take any changes you make"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T20:02:33.000069",
          "text": "cool… question for you… is that first form in the examples file supposed to work at all? I’m guessing no?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T20:02:53.000168",
          "text": "I was tempted to extend the macro to regexp-ify a bare word"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-09-26T20:26:55.000117",
          "text": "<@Rosalee>: rereading the doc again, now I'm not sure whether module declaration is actually performed by the default module name resolver"
        }
      ]
    },
    {
      "conversation_id": "286",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: Latarsha just noticed, TR doesn't register a type for [CODE] in [CODE]. Should I submit a PR to call [CODE] in the part of [CODE] that's doing the type checking?\nLatarsha: ben yes",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 0.2,
        "contains_question": true,
        "action_keywords": [
          "should",
          "submit"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-09-26T15:22:06.000048",
          "text": "<@Latarsha> just noticed, TR doesn't register a type for `vector` in `(vector 1 2 3)`. Should I submit a PR to call `add-typeof-expr` in the part of `tc-app` that's doing the type checking?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T15:22:18.000327",
          "text": "@ben yes"
        }
      ]
    },
    {
      "conversation_id": "287",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: if you're writing stuff to disk you most definitely want a plumber flush callback",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-26T18:44:25.000278",
          "text": "if you're writing stuff to disk you most definitely want a plumber flush callback"
        }
      ]
    },
    {
      "conversation_id": "288",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Cool",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T20:01:35.000258",
          "text": "Cool"
        }
      ]
    },
    {
      "conversation_id": "289",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Patrice: the doc seems to say that when a module is declared, the current module name resolver will be invoked, not \"the current module name resolver is invoked to declare a module\"\nRosalee: Patrice lol, thanks.\nRosalee: Which I guess leads back to my original question. How can I declare a module (without visiting it)?\nRosalee: Which I suspect Vincenzo probably knows.\nVincenzo: Rosalee There's no way to avoid running expand-time code in a [CODE] form if you start with the module in S-expression form. If you have a module in compiled form, you can [CODE] the compiled module to declare it without running any phase of the module. (And if you want the declared name to correspond to a file, set [CODE].)\nVincenzo: If you have a file that contains a module, then you probably want to set [CODE] and [CODE] while you use [CODE].\nRosalee: Vincenzo Okay cool, thanks. :wink:\nRosalee: :slightly_smiling_face: *\nRosalee: If I have a macro that expands to a class, is it possible to have a field that is only in scope for the macro itself?\nRosalee: Something like this almost works, in that the method is only in scope for the macro, but still won’t work if the user creates a method with the same name. <[URL]\nVincenzo: Rosalee Introduce a [CODE] alongside your class\nRosalee: Vincenzo Isn’t that what the example did?\nRosalee: Anyway, Michael helped me find a solution, as shown here: <[URL] We ‘think’ the problem is that the internal method name is just a symbol (rather than an identifier), which is what causes the error.\nVincenzo: Oh, sorry --- I misread it. I'm not sure why that didn't work, and I can't investigate more just now.\nRosalee: But because its the internal binding, an identifier should work (we think anyway).\nRosalee: So we’re going to submit a bug report.\nRosalee: Vincenzo okay cool, thanks.\nRosalee: Is using [CODE] supposed to interact with your init list in Racket Classes?, such as in this example: <[URL]\nRosalee: This error also persists if you replace the [CODE] line with: [CODE_BLOCK] Which is really odd to me.\nRosalee: Hmm…looking at the fully expanded macro, I’m inclined to think this is possibly a bug in [CODE] or [CODE]\nNatosha: Rosalee from the docs for [CODE]: \"Thus, methods, fields, and initialization arguments declared with such external-name ids are accessible only in the scope of the define-local-member-name declaration.\"\nRosalee: Natosha Bleh, thanks, I missed that.\nRosalee: In that case, is there any way I can have the external name for an init variable be the same as a private field?\nRosalee: (Or rather, private in that instances of a class can access it for any object, like you would do in a copy method.)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 24,
        "duration_minutes": 4145.25,
        "contains_question": true,
        "action_keywords": [
          "create",
          "should",
          "submit",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Natosha",
          "Patrice",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Patrice",
          "timestamp": "2017-09-26T20:28:15.000058",
          "text": "the doc seems to say that when a module is declared, the current module name resolver will be invoked, not \"the current module name resolver is invoked to declare a module\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T20:46:17.000085",
          "text": "<@Patrice> lol, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T20:47:05.000012",
          "text": "Which I guess leads back to my original question. How can I declare a module (without visiting it)?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-26T20:47:16.000054",
          "text": "Which I suspect <@Vincenzo> probably knows."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-26T21:42:39.000208",
          "text": "<@Rosalee> There's no way to avoid running expand-time code in a `module` form if you start with the module in S-expression form. If you have a module in compiled form, you can `eval` the compiled module to declare it without running any phase of the module. (And if you want the declared name to correspond to a file, set `current-module-declare-name`.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-26T21:43:29.000181",
          "text": "If you have a file that contains a module, then you probably want to set `current-module-declare-name` and `current-load-relative-directory` while you use `load`."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T11:43:02.000479",
          "text": "<@Vincenzo> Okay cool, thanks. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T11:43:04.000427",
          "text": ":slightly_smiling_face: *"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T11:47:09.000015",
          "text": "If I have a macro that expands to a class, is it possible to have a field that is only in scope for the macro itself?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T11:47:46.000252",
          "text": "Something like this almost works, in that the method is only in scope for the macro, but still won’t work if the user creates a method with the same name. <https://gist.github.com/LeifAndersen/1a5b188574c6756f6b888c7365276544>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-28T13:43:14.000251",
          "text": "<@Rosalee> Introduce a `define-local-member-name` alongside your class"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T13:48:43.000309",
          "text": "<@Vincenzo> Isn’t that what the example did?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T13:50:01.000147",
          "text": "Anyway, Michael helped me find a solution, as shown here: <https://gist.github.com/LeifAndersen/1318798979267ea46ae8ac3933c64989>\n\nWe ‘think’ the problem is that the internal method name is just a symbol (rather than an identifier), which is what causes the error."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-09-28T13:51:01.000251",
          "text": "Oh, sorry --- I misread it. I'm not sure why that didn't work, and I can't investigate more just now."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T13:51:11.000407",
          "text": "But because its the internal binding, an identifier should work (we think anyway)."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T13:51:21.000320",
          "text": "So we’re going to submit a bug report."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-28T13:51:25.000124",
          "text": "<@Vincenzo> okay cool, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-29T16:12:58.000234",
          "text": "Is using `define-local-member-name` supposed to interact with your init list in Racket Classes?, such as in this example: <https://gist.github.com/LeifAndersen/05c46b068249b0d7312b635e993327b0>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-29T16:15:17.000526",
          "text": "This error also persists if you replace the `init-field` line with:\n```\n(init [(internal-hello hello)])\n(field [hello internal-hello])\n```\n\nWhich is really odd to me."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-29T16:57:12.000139",
          "text": "Hmm…looking at the fully expanded macro, I’m inclined to think this is possibly a bug in `extract-arg` or `validate-local-member`"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-09-29T17:31:01.000174",
          "text": "<@Rosalee> from the docs for `define-local-member-name`: \"Thus, methods, fields, and initialization arguments declared with such external-name ids are accessible only in the scope of the define-local-member-name declaration.\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-29T17:31:51.000309",
          "text": "<@Natosha> Bleh, thanks, I missed that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-29T17:32:47.000287",
          "text": "In that case, is there any way I can have the external name for an init variable be the same as a private field?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-09-29T17:33:30.000052",
          "text": "(Or rather, private in that instances of a class can access it for any object, like you would do in a copy method.)"
        }
      ]
    },
    {
      "conversation_id": "290",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Georgeanna that first form is indeed supposed to work. did it break?\nGeorgeanna: Latarsha it didn’t work for me… but I don’t remember how/why.\nGeorgeanna: could be user error :stuck_out_tongue:\nNelson: Latarsha is it ok if I merge <[URL] tonight?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 2283.77,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-26T22:17:04.000013",
          "text": "<@Georgeanna> that first form is indeed supposed to work. did it break?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T22:45:53.000007",
          "text": "<@Latarsha> it didn’t work for me… but I don’t remember how/why."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-09-26T22:46:00.000024",
          "text": "could be user error :stuck_out_tongue:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-28T12:20:50.000210",
          "text": "<@Latarsha> is it ok if I merge <https://github.com/racket/typed-racket/pull/599> tonight?"
        }
      ]
    },
    {
      "conversation_id": "291",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Nelson that seems fine to me\nNelson: thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 1.78,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-09-28T14:23:45.000342",
          "text": "<@Nelson> that seems fine to me"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-09-28T14:25:32.000507",
          "text": "thanks"
        }
      ]
    },
    {
      "conversation_id": "292",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Kimbery finally getting around to watching Inside Hackett!\nChantelle: I noticed the type checker structs are all prefab, I assume that is because of cross-phase uses?\nChantelle: I had a problem once where I wanted cross-phase structs but didn't want them to be prefab so I could attach properties to them still (like custom write) and a method that ryan suggested was to declare a struct property in a cross phase persistent module and use that property in functions that I wanted to use in a cross-phase manner. Is that something you'd be interested in for those structs or is their prefab-ness not a problem?\nKimbery: Chantelle I don’t think there’s any reason at the moment to make them non-prefab, but I could imagine a couple different ways to support that if it became necessary at some point.\nChantelle: gotcha\nChantelle: Kimbery the transformation of a let to a lambda then back to a let - what problems come up if the lambda-&gt;racket-let step isn't done and you just leave it as a lambda? is it for optimization reasons or something else?\nKimbery: you mean implementing [CODE] in terms of [CODE]? you could do that for [CODE], specifically, but not for things like [CODE] or more complicated forms.\nChantelle: yeah I mean just for [CODE] specifically, no idea how to handle [CODE]\nChantelle: also is this the paper you were working off of? <[URL]\nKimbery: no, the paper is linked in the wiki page.\nChantelle: gotta make sure I add the right thing to the reading list :P\nKimbery: <[URL]\nKimbery: specifically, this paper: <[URL]\nChantelle: ah I missed the wiki page, thanks\nChantelle: Kimbery Possible idea for the part of the hackett implementation that inserts [CODE] and then later performs a second expansion pass to insert the right dictionaries: what about using [CODE] and [CODE]? My thinking is that typeclass uses can use syntax-local-lift-expression to get an identifier for the dictionary they want and put their use-case-specific constraints in the lifted expression, then [CODE] can call local expand, capture the lifted expressions, and manipulate the expressions to include the proper typeclass dictionary info based on the constraints in the lifted expressions. Do you think something like that could work?\nChantelle: and do you think it would be simpler than what hackett does currently\nKimbery: Chantelle I don’t think that would work due to the way dictionary elaboration needs to consult local information introduced by [CODE].\nChantelle: Kimbery what local information does dictionary elaboration need?\nKimbery: It needs (1) a fully solved type environment and (2) the set of constraints locally in scope.\nKimbery: The latter equivalently being the set of dictionaries in scope.\nKimbery: More generally, my long-term goal is to make the constraint solver extensible, so that things like type equalities, typeclasses, implicit parameters, checked exceptions, and units of measure can all be implemented separately from the core.\nKimbery: (And they can be mixed and matched.)\nChantelle: for things that are whole-program transformations, I'd expect the way to implement that would have to be as a [CODE] on top of hackett with the transformation implemented in [CODE] somehow\nChantelle: did you have something different in mind?\nKimbery: bluntly, yes.\nKimbery: it’s not an unrestricted transformation, but I think the typechecker can provide hooks that allow the constraint domain to be extended in ways that add new source-to-source transformations, yet don’t sacrifice composition.\nChantelle: maybe something where hackett exposes lots of syntax parameters that influence how constraints are solved in a set of expressions?\nKimbery: I think it would be somewhat orthogonal to existing Racket metaprogramming constructs\nChantelle: interesting. in what ways? also, wild shot in the dark sort of question: do you think rosette or anything in its internals could be used in hackett's implementation of constraint solving?\nKimbery: the idea behind much of hackett is using the typechecker as a way to propagate compile-time information that can then be used for metaprogramming. this is they key idea behind why I think hackett can, theoretically, do more than either racket or haskell.\nKimbery: (wrt metaprogramming, that is.)\nChantelle: right, no complaints with that here\nKimbery: I will touch upon that in some degree in my racketcon talk\nKimbery: as for rosette: I don’t know, but I doubt it.\nKimbery: they both use things called “constraint solvers”, but the sort of constraint solver used in haskell is a very different constraint solver from the one used in rosette. I am not sure the similarities extend beyond names.\nChantelle: if i wanted to write a liquid-hackett sort of thing that needed access to an SMT solver, rosette seems like something I'd poke at since it's supposed to be for making langs that use SMT solvers to do stuff\nChantelle: but maybe for non-liquid-hackett it wouldn't be useful at all\nKimbery: right, if you wanted to add the notion of refinements to hackett’s constraint domain, that might be useful. but the point is more that hackett ought to be _agnostic_ to the constraint domain.\nKimbery: like HM(X) and OutsideIn(X) are parameterized over the constraint domain.\nChantelle: so it'd be more like hackett provides some sort of syntactic protocol for macros to declare, require, and influence constraints independent of what constraints actually are or how they're checked\nChantelle: non-local constraints particularly\nKimbery: right. and one of the nice properties of the Haskell type system is that’s actually possible.\nChantelle: ?\nKimbery: OutsideIn(X) provides an especially strong framework with an extensible constraint domain, but Hackett’s typechecker isn’t nearly as fancy as OutsideIn at the moment.\nChantelle: are [CODE] and [CODE] things in haskell's internals that are exposed to language extensions?\nKimbery: but the fact that OusideIn works like that is encouraging, since it means Hackett can continue to be generalized even if it makes an extensible constraint domain a core, user-accessible feature.\nChantelle: I write very little haskell :p\nKimbery: I think GHC typechecker plugins can add new sorts of constraint solvers, but I don’t believe they can add new constraints.\nKimbery: OutsideIn(X) is the type system that GHC currently uses, though, for context.\nChantelle: ah so [CODE] is this thing: <[URL]\nChantelle: then is [CODE] a constraint domain agnostic type system that ghc used to use but doesn't anymore?\nChantelle: for hindley milner I'm guessing :p\nKimbery: I don’t believe GHC ever used HM(X)\nChantelle: found this paper presenting HM(X): <[URL]\nChantelle: is there anything else worth reading about it for context?\nKimbery: I haven’t read that much about HM(X), since I’ve mostly focused on OutsideIn(X).\nKimbery: before OutsideIn, I believe GHC used a system known as “boxy type inference”\nChantelle: cute name\nKimbery: Hackett uses neither, since it uses a variant on Dunfield and Krishnaswami’s bidirectional system that’s similar to the PureScript typechecker\nKimbery: OutsideIn is very, very complex, but I think that’s largely because it’s designed to support type families, higher-rank polymorphism, and GADTs.\nKimbery: Hackett currently only supports one of those things.\nChantelle: lots to think about\nChantelle: thanks for entertaining my questions :P\nChantelle: really looking forward to the racketcon talk\nKimbery: a lot of this stuff is, of course, aspirational. I don’t yet know if all of it is even possible, and even if it is, I think it’d be new research.\nChantelle: the best kind of research\nKimbery: well, the _only_ kind of research, I think.\nKimbery: if you know it’ll work, it isn’t really research, is it? :)\nChantelle: that would be the joke :p\nKimbery: in the past six months or so that I’ve been developing Hackett in earnest, I’ve developed some intuitions for certain things, so I _think_ the ideas I have are possible, but I’m not 100% sure.\nChantelle: heh I still want to figure out how [CODE] with submodules could work for writing main and test submodules, and also pull the infix op code out into a package so I can use it for other stuff\nKimbery: I thought about extracting the infix stuff, but it’s seriously like a couple dozen lines of code, and the interface isn’t stable enough for those couple dozen lines to be put in a package\nKimbery: plus, there are advantages to keeping Hackett monolithic right now.\nChantelle: not having to deal with racket's package system and versioning is one that comes to mind\nKimbery: that’s part of it, but a larger part is that I can worry about implementing exactly what Hackett needs and nothing more.\nChantelle: true\nChantelle: helps keep focus\nKimbery: Hackett is, by LOC, extremely small.\nKimbery: [CODE] is a mere 3047 LOC\nChantelle: heh, racket is amazing\nChantelle: hypothetically, if there _was_ a package that implemented infix app syntax in such a way that hackett could use it, do you think using it would be a bad idea?\nKimbery: as of right now, probably. I think the time at which it _might_ make sense to extract is once precedence is squared away, and that means we need to learn more about usage patterns for infix operators in real Hackett code.\nChantelle: seems reasonable enough to me\nDavid: Today, I learned that: [CODE_BLOCK]\nDavid: Moreover, when searching-and-replacing Σ → ∑ in DrRacket, it’s smart enough to match σ (lowercase Σ) as well :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 85,
        "duration_minutes": 2287.33,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "David",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T20:57:42.000013",
          "text": "<@Kimbery> finally getting around to watching Inside Hackett!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T20:58:03.000009",
          "text": "I noticed the type checker structs are all prefab, I assume that is because of cross-phase uses?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:00:11.000033",
          "text": "I had a problem once where I wanted cross-phase structs but didn't want them to be prefab so I could attach properties to them still (like custom write) and a method that ryan suggested was to declare a struct property in a cross phase persistent module and use that property in functions that I wanted to use in a cross-phase manner. Is that something you'd be interested in for those structs or is their prefab-ness not a problem?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:14:23.000012",
          "text": "<@Chantelle> I don’t think there’s any reason at the moment to make them non-prefab, but I could imagine a couple different ways to support that if it became necessary at some point."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:14:56.000009",
          "text": "gotcha"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:18:29.000034",
          "text": "<@Kimbery> the transformation of a let to a lambda then back to a let - what problems come up if the lambda-&gt;racket-let step isn't done and you just leave it as a lambda? is it for optimization reasons or something else?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:19:52.000037",
          "text": "you mean implementing `let` in terms of `lambda`? you could do that for `let`, specifically, but not for things like `letrec` or more complicated forms."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:20:11.000008",
          "text": "yeah I mean just for `let` specifically, no idea how to handle `letrec`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:20:21.000014",
          "text": "also is this the paper you were working off of? <https://people.mpi-sws.org/~joshua/bitype.pdf>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:20:40.000021",
          "text": "no, the paper is linked in the wiki page."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:20:43.000034",
          "text": "gotta make sure I add the right thing to the reading list :P"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:20:56.000061",
          "text": "<https://github.com/racket/racket/wiki/Inside-Racket-Seminar-7.-Alexis-King-on-Hackett>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:21:05.000046",
          "text": "specifically, this paper: <http://www.cs.cmu.edu/%7Ejoshuad/papers/bidir/>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:21:17.000009",
          "text": "ah I missed the wiki page, thanks"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:46:17.000021",
          "text": "<@Kimbery> Possible idea for the part of the hackett implementation that inserts `@%dictionary-placeholder` and then later performs a second expansion pass to insert the right dictionaries: what about using `syntax-local-lift-expression` and `local-expand/capture-lifts`? My thinking is that typeclass uses can use syntax-local-lift-expression to get an identifier for the dictionary they want and put their use-case-specific constraints in the lifted expression, then `#%module-begin` can call local expand, capture the lifted expressions, and manipulate the expressions to include the proper typeclass dictionary info based on the constraints in the lifted expressions. Do you think something like that could work?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:46:50.000057",
          "text": "and do you think it would be simpler than what hackett does currently"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:52:05.000056",
          "text": "<@Chantelle> I don’t think that would work due to the way dictionary elaboration needs to consult local information introduced by `@%with-dictionary`."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:52:41.000011",
          "text": "<@Kimbery> what local information does dictionary elaboration need?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:53:13.000011",
          "text": "It needs (1) a fully solved type environment and (2) the set of constraints locally in scope."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:53:31.000031",
          "text": "The latter equivalently being the set of dictionaries in scope."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:54:36.000038",
          "text": "More generally, my long-term goal is to make the constraint solver extensible, so that things like type equalities, typeclasses, implicit parameters, checked exceptions, and units of measure can all be implemented separately from the core."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:54:51.000019",
          "text": "(And they can be mixed and matched.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:55:40.000002",
          "text": "for things that are whole-program transformations, I'd expect the way to implement that would have to be as a `#lang` on top of hackett with the transformation implemented in `#%module-begin` somehow"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:55:53.000003",
          "text": "did you have something different in mind?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:56:00.000045",
          "text": "bluntly, yes."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:56:52.000018",
          "text": "it’s not an unrestricted transformation, but I think the typechecker can provide hooks that allow the constraint domain to be extended in ways that add new source-to-source transformations, yet don’t sacrifice composition."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:57:05.000017",
          "text": "maybe something where hackett exposes lots of syntax parameters that influence how constraints are solved in a set of expressions?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:57:42.000069",
          "text": "I think it would be somewhat orthogonal to existing Racket metaprogramming constructs"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T21:59:00.000016",
          "text": "interesting. in what ways? also, wild shot in the dark sort of question: do you think rosette or anything in its internals could be used in hackett's implementation of constraint solving?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:59:49.000040",
          "text": "the idea behind much of hackett is using the typechecker as a way to propagate compile-time information that can then be used for metaprogramming. this is they key idea behind why I think hackett can, theoretically, do more than either racket or haskell."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T21:59:56.000021",
          "text": "(wrt metaprogramming, that is.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:00:04.000119",
          "text": "right, no complaints with that here"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:00:15.000072",
          "text": "I will touch upon that in some degree in my racketcon talk"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:01:03.000069",
          "text": "as for rosette: I don’t know, but I doubt it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:02:44.000073",
          "text": "they both use things called “constraint solvers”, but the sort of constraint solver used in haskell is a very different constraint solver from the one used in rosette. I am not sure the similarities extend beyond names."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:03:34.000063",
          "text": "if i wanted to write a liquid-hackett sort of thing that needed access to an SMT solver, rosette seems like something I'd poke at since it's supposed to be for making langs that use SMT solvers to do stuff"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:03:50.000001",
          "text": "but maybe for non-liquid-hackett it wouldn't be useful at all"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:04:19.000009",
          "text": "right, if you wanted to add the notion of refinements to hackett’s constraint domain, that might be useful. but the point is more that hackett ought to be _agnostic_ to the constraint domain."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:04:33.000050",
          "text": "like HM(X) and OutsideIn(X) are parameterized over the constraint domain."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:05:34.000003",
          "text": "so it'd be more like hackett provides some sort of syntactic protocol for macros to declare, require, and influence constraints independent of what constraints actually are or how they're checked"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:05:51.000025",
          "text": "non-local constraints particularly"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:05:57.000001",
          "text": "right. and one of the nice properties of the Haskell type system is that’s actually possible."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:06:21.000080",
          "text": "?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:06:38.000045",
          "text": "OutsideIn(X) provides an especially strong framework with an extensible constraint domain, but Hackett’s typechecker isn’t nearly as fancy as OutsideIn at the moment."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:07:19.000009",
          "text": "are `HM(X)` and `OutsideIn(X)` things in haskell's internals that are exposed to language extensions?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:07:20.000008",
          "text": "but the fact that OusideIn works like that is encouraging, since it means Hackett can continue to be generalized even if it makes an extensible constraint domain a core, user-accessible feature."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:07:36.000045",
          "text": "I write very little haskell :p"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:07:55.000036",
          "text": "I think GHC typechecker plugins can add new sorts of constraint solvers, but I don’t believe they can add new constraints."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:08:45.000045",
          "text": "OutsideIn(X) is the type system that GHC currently uses, though, for context."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:08:47.000010",
          "text": "ah so `OutsideIn` is this thing: <https://wiki.haskell.org/Simonpj/Talk:OutsideIn>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:09:31.000123",
          "text": "then is `HM(X)` a constraint domain agnostic type system that ghc used to use but doesn't anymore?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:09:55.000066",
          "text": "for hindley milner I'm guessing :p"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:10:39.000070",
          "text": "I don’t believe GHC ever used HM(X)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:12:11.000034",
          "text": "found this paper presenting HM(X): <http://www.cs.tufts.edu/~nr/cs257/archive/martin-odersky/tapos-final.pdf>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:12:17.000025",
          "text": "is there anything else worth reading about it for context?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:12:54.000049",
          "text": "I haven’t read that much about HM(X), since I’ve mostly focused on OutsideIn(X)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:13:09.000065",
          "text": "before OutsideIn, I believe GHC used a system known as “boxy type inference”"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:13:15.000007",
          "text": "cute name"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:14:10.000010",
          "text": "Hackett uses neither, since it uses a variant on Dunfield and Krishnaswami’s bidirectional system that’s similar to the PureScript typechecker"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:15:59.000016",
          "text": "OutsideIn is very, very complex, but I think that’s largely because it’s designed to support type families, higher-rank polymorphism, and GADTs."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:16:15.000144",
          "text": "Hackett currently only supports one of those things."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:19:11.000004",
          "text": "lots to think about"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:19:20.000002",
          "text": "thanks for entertaining my questions :P"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:19:27.000040",
          "text": "really looking forward to the racketcon talk"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:20:46.000012",
          "text": "a lot of this stuff is, of course, aspirational. I don’t yet know if all of it is even possible, and even if it is, I think it’d be new research."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:20:59.000044",
          "text": "the best kind of research"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:21:19.000014",
          "text": "well, the _only_ kind of research, I think."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:21:52.000017",
          "text": "if you know it’ll work, it isn’t really research, is it? :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:22:14.000003",
          "text": "that would be the joke :p"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:24:29.000032",
          "text": "in the past six months or so that I’ve been developing Hackett in earnest, I’ve developed some intuitions for certain things, so I _think_ the ideas I have are possible, but I’m not 100% sure."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:26:11.000044",
          "text": "heh I still want to figure out how `#lang hackett/script` with submodules could work for writing main and test submodules, and also pull the infix op code out into a package so I can use it for other stuff"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:27:05.000030",
          "text": "I thought about extracting the infix stuff, but it’s seriously like a couple dozen lines of code, and the interface isn’t stable enough for those couple dozen lines to be put in a package"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:27:51.000018",
          "text": "plus, there are advantages to keeping Hackett monolithic right now."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:28:36.000024",
          "text": "not having to deal with racket's package system and versioning is one that comes to mind"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:29:39.000008",
          "text": "that’s part of it, but a larger part is that I can worry about implementing exactly what Hackett needs and nothing more."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:29:55.000029",
          "text": "true"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:29:58.000045",
          "text": "helps keep focus"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:30:37.000064",
          "text": "Hackett is, by LOC, extremely small."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:31:32.000058",
          "text": "`hackett-lib` is a mere 3047 LOC"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:31:46.000059",
          "text": "heh, racket is amazing"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:31:55.000106",
          "text": "hypothetically, if there _was_ a package that implemented infix app syntax in such a way that hackett could use it, do you think using it would be a bad idea?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-09-30T22:32:41.000104",
          "text": "as of right now, probably. I think the time at which it _might_ make sense to extract is once precedence is squared away, and that means we need to learn more about usage patterns for infix operators in real Hackett code."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-09-30T22:33:13.000071",
          "text": "seems reasonable enough to me"
        },
        {
          "user": "David",
          "timestamp": "2017-10-02T11:02:25.000258",
          "text": "Today, I learned that:\n\n```\n&gt; (equal? 'Π ; \\Pi\n          '∏ ; \\prod\n          )\n#f\n&gt; (equal? 'Σ ; \\Sigma\n          '∑ ; \\sum\n          )\n#f\n```"
        },
        {
          "user": "David",
          "timestamp": "2017-10-02T11:05:02.000097",
          "text": "Moreover, when searching-and-replacing Σ → ∑ in DrRacket, it’s smart enough to match σ (lowercase Σ) as well :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "293",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: mimics! <[URL]\nDavid: :fearful:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 4.43,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "David",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-10-02T12:42:12.000278",
          "text": "mimics! <https://github.com/reinderien/mimic>"
        },
        {
          "user": "David",
          "timestamp": "2017-10-02T12:46:38.000200",
          "text": ":fearful:"
        }
      ]
    },
    {
      "conversation_id": "294",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: At racket summer school I was asking about racket hashlangs vs nanopass and Matt or Sriram (I don’t remember at this point, but I think it was the latter) advocated for racket hashlangs in the style of nanopass. There are pros and cons to both. With hashlangs, you lose the ability to insert/arrange/remove layers as easily as nonopass… But I’m not getting something about this approach. I spent an inordinate amount of time figuring out how to instantiate a module in order to implement [CODE] for beautiful racket (so you can run via [CODE])… it is clearly not meant to be an easy thing…\nGeorgeanna: so… if I were to implement MANY racket hashlangs for a nanopass style architecture… how do a go from layer1 to layer2, etc?? I want to have completely separate passes for desugaring, ANF transformation, etc etc. (and at some point, I’d LOVE to disconnect entirely from racket as a backend and produce machine or VM code)… am I thinking about this wrong?\nGeorgeanna: (the more I type this, the more I suspect I’m thinking top-down and should be thinking bottom up… but I’m (possibly) even more confused by that approach. Designing languages _starts_ with the language, not the bottom layer mechanics)\nDavid: I guess part of the pitch of the Racket approach, as opposed to the Nanopass one, is that you don’t have to disconnect from Racket to generate VM code, because the Racket compiler is doing that for you.\nGeorgeanna: absolutely. you get a TON for free… and I want that, for sure… ignore my parenthetical about eventually disconnecting from racket as a backend for now.\nGeorgeanna: that’s a success problem. :slightly_smiling_face:\nGeorgeanna: (I love questions like “what if we get too much traffic for heroku??” to which I answer “congratulations?“… but I’m not concerned with finishing, I’m concerned with starting)\nDavid: In my experience, the Nanopass approach is more appropriate than the Racket approach when I’m building a *transpiler*. In that case, I’m not targeting a machine, so linguistic reuse doesn’t apply. For example, I built CSS-expressions (<[URL] using Nanopass, and I don’t see how I could’ve used the Racket way. (Though, from having talked to Jay, I believe it’s possible, it’s just beyond my reach.)\nGeorgeanna: oh god… the domain in that doco… that’s amazing\nDavid: My other point is, unless you want to directly write code for the languages in every pass on the compiler, then it’s not worth having ‘#lang’s for them. Let them just be a collection of macros expanding to other macros. Or, at most, module languages, as opposed to full ‘#lang’s with custom readers.\nDavid: Are you referring to ‘<[URL]\nChantelle: Georgeanna another idea is for hashlangs to provide more extension points that transform things that seem like they would require another language layer into things that hook into provided extension points and thus compose with other extensions\nGeorgeanna: David yes… and I’m learning actual CSS from it. :stuck_out_tongue:\nGeorgeanna: Chantelle ummm… I’m not following that\nGeorgeanna: is that basically the same as David’s comment?\nChantelle: Georgeanna things like #%app and #%datum can let you override parts of #lang racket by importing modules instead of changing the language's reader. I think racket langs should move towards doing more of that\nChantelle: I'd really like a way for requiring a module to somehow wrap all forms after the require statement in a macro defined by the required module\nGeorgeanna: that’d be interesting but possibly scary. :slightly_smiling_face:\nChantelle: absolutely :) but if langs don't provide it, people do it anyway with metalanguages that operate by chaining readers together and that's way easier to get wrong\nGeorgeanna: I think I’d want it to be opt-in tho… like [CODE]\nChantelle: that's a good idea, and means it might be possible to implement it as a regular require transformer instead of a wrapper on top of require\nChantelle: I like a name like [CODE] better tho :p [CODE] makes me think it's for some dependency injection framework\nChantelle: I'd want to combine this with making [CODE] / [CODE] / etc syntax parameters instead of magic identifiers inserted by the reader, that way a [CODE] form could override [CODE] by wrapping the module body in a [CODE] form\nChantelle: Delmy [CODE] ought to work\nChantelle: maybe\nChantelle: see this part of the docs for [CODE] in particular: &gt; However, if any individual stx-expr produces a non-syntax object, then it is converted to one using datum-&gt;syntax and the lexical context and source location of the individual stx-expr.\nGeorgeanna: the basics [CODE_BLOCK]\nChantelle: ^ and that example is using [CODE] and [CODE], and [CODE] performs the same conversion that [CODE] does\nDelmy: But what if the [CODE] part of [CODE] is something I want to be generated from an identifier? Can I unquote just the part that is the name?\nChantelle: Delmy You can use [CODE] to produce a keyword dynamically from a string\nDelmy: awesome that sounds like exactly what I need, i'll look into it. Thanks!\nChantelle: :+1:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 32,
        "duration_minutes": 130.3,
        "contains_question": true,
        "action_keywords": [
          "build",
          "complete",
          "finish",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "David",
          "Delmy",
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T15:57:29.000123",
          "text": "At racket summer school I was asking about racket hashlangs vs nanopass and Matt or Sriram (I don’t remember at this point, but I think it was the latter) advocated for racket hashlangs in the style of nanopass. There are pros and cons to both. With hashlangs, you lose the ability to insert/arrange/remove layers as easily as nonopass… But I’m not getting something about this approach. I spent an inordinate amount of time figuring out how to instantiate a module in order to implement `run-with-lang` for beautiful racket (so you can run via `./basic blahblah.bas`)… it is clearly not meant to be an easy thing…"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T15:59:24.000113",
          "text": "so… if I were to implement MANY racket hashlangs for a nanopass style architecture… how do a go from layer1 to layer2, etc?? I want to have completely separate passes for desugaring, ANF transformation, etc etc. (and at some point, I’d LOVE to disconnect entirely from racket as a backend and produce machine or VM code)… am I thinking about this wrong?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:00:29.000002",
          "text": "(the more I type this, the more I suspect I’m thinking top-down and should be thinking bottom up… but I’m (possibly) even more confused by that approach. Designing languages _starts_ with the language, not the bottom layer mechanics)"
        },
        {
          "user": "David",
          "timestamp": "2017-10-02T16:02:18.000076",
          "text": "I guess part of the pitch of the Racket approach, as opposed to the Nanopass one, is that you don’t have to disconnect from Racket to generate VM code, because the Racket compiler is doing that for you."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:03:41.000326",
          "text": "absolutely. you get a TON for free… and I want that, for sure… ignore my parenthetical about eventually disconnecting from racket as a backend for now."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:03:50.000384",
          "text": "that’s a success problem. :slightly_smiling_face:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:04:51.000360",
          "text": "(I love questions like “what if we get too much traffic for heroku??” to which I answer “congratulations?“… but I’m not concerned with finishing, I’m concerned with starting)"
        },
        {
          "user": "David",
          "timestamp": "2017-10-02T16:05:08.000193",
          "text": "In my experience, the Nanopass approach is more appropriate than the Racket approach when I’m building a *transpiler*. In that case, I’m not targeting a machine, so linguistic reuse doesn’t apply. For example, I built CSS-expressions (<https://docs.racket-lang.org/css-expr/index.html>) using Nanopass, and I don’t see how I could’ve used the Racket way. (Though, from having talked to Jay, I believe it’s possible, it’s just beyond my reach.)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:06:35.000317",
          "text": "oh god… the domain in that doco… that’s amazing"
        },
        {
          "user": "David",
          "timestamp": "2017-10-02T16:08:25.000285",
          "text": "My other point is, unless you want to directly write code for the languages in every pass on the compiler, then it’s not worth having ‘#lang’s for them. Let them just be a collection of macros expanding to other macros. Or, at most, module languages, as opposed to full ‘#lang’s with custom readers."
        },
        {
          "user": "David",
          "timestamp": "2017-10-02T16:08:43.000167",
          "text": "Are you referring to ‘<http://bettermotherfuckingwebsite.com|bettermotherfuckingwebsite.com>’?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T16:09:24.000424",
          "text": "<@Georgeanna> another idea is for hashlangs to provide more extension points that transform things that seem like they would require another language layer into things that hook into provided extension points and thus compose with other extensions"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:09:41.000164",
          "text": "<@David> yes… and I’m learning actual CSS from it. :stuck_out_tongue:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:10:09.000372",
          "text": "<@Chantelle> ummm… I’m not following that"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:10:39.000065",
          "text": "is that basically the same as <@David>’s comment?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T16:13:02.000178",
          "text": "<@Georgeanna> things like #%app and #%datum can let you override parts of #lang racket by importing modules instead of changing the language's reader. I think racket langs should move towards doing more of that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T16:16:16.000430",
          "text": "I'd really like a way for requiring a module to somehow wrap all forms after the require statement in a macro defined by the required module"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:21:08.000400",
          "text": "that’d be interesting but possibly scary. :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T16:21:45.000141",
          "text": "absolutely :) but if langs don't provide it, people do it anyway with metalanguages that operate by chaining readers together and that's way easier to get wrong"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T16:23:40.000369",
          "text": "I think I’d want it to be opt-in tho… like `(require (inject-in somerequire form1 form2))`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T16:24:49.000195",
          "text": "that's a good idea, and means it might be possible to implement it as a regular require transformer instead of a wrapper on top of require"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T16:25:26.000114",
          "text": "I like a name like `module-body-in` better tho :p `inject-in` makes me think it's for some dependency injection framework"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T16:27:13.000572",
          "text": "I'd want to combine this with making `#%app` / `#%datum` / etc syntax parameters instead of magic identifiers inserted by the reader, that way a `module-body-in` form could override `#%app` by wrapping the module body in a `syntax-parameterize` form"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T17:59:10.000288",
          "text": "<@Delmy> `(with-syntax ([foo-kw (make-keyword-dynamically ...)]) #'(lambda (a foo-kw c) ...)` ought to work"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T17:59:29.000105",
          "text": "maybe"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:00:18.000215",
          "text": "see this part of the docs for `with-syntax` in particular:\n\n&gt; However, if any individual stx-expr produces a non-syntax object, then it is converted to one using datum-&gt;syntax and the lexical context and source location of the individual stx-expr."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-02T18:01:09.000420",
          "text": "the basics\n```\n&gt; (define val 'z)\n&gt; (define key '#:y)\n&gt; #`(lambda (x #,key #,val) 42)\n#&lt;syntax:12:2 (lambda (x #:y z) 42)&gt;\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:01:38.000276",
          "text": "^ and that example is using `quasisyntax` and `unsyntax`, and `unsyntax` performs the same conversion that `with-syntax` does"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-10-02T18:06:22.000085",
          "text": "But what if the `y` part of `#:y` is something I want to be generated from an identifier? Can I unquote just the part that is the name?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:07:15.000201",
          "text": "<@Delmy> You can use `string-&gt;keyword` to produce a keyword dynamically from a string"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-10-02T18:07:33.000103",
          "text": "awesome that sounds like exactly what I need, i'll look into it. Thanks!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:07:47.000289",
          "text": ":+1:"
        }
      ]
    },
    {
      "conversation_id": "295",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: How can one create syntax for a keyword argument? I want to do something like [CODE] Where [CODE] is generated from some identifiers in a macro.\nLatarsha: Delmy you might be interested in [CODE] or using [CODE]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 2.12,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-10-02T17:56:33.000411",
          "text": "How can one create syntax for a keyword argument? I want to do something like `#'(lamdba (a #:b c) ...)` Where `#:b c` is generated from some identifiers in a macro."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-02T17:58:40.000239",
          "text": "<@Delmy> you might be interested in `#,@` or using `...`"
        }
      ]
    },
    {
      "conversation_id": "296",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: does it still count as 3d syntax if a syntax object contains a non-prefab struct but that struct has an implementation of [CODE]?\nKimbery: yes\nChantelle: why?\nKimbery: custom-write converts things to strings. perhaps the better question should be asking about serializable structs?\nKimbery: more pointedly, custom-write does not have any notion of _reading_ the result. 3D syntax is about things that aren’t roundtrippable.\nChantelle: No, I mean custom write specifically. The case I'm thinking of is where a module is read with a reader that produces syntax objects containing structs to represent certain special kinds of syntactic constructs (as opposed to using tagged s-exps), and those structs implement custom write in such a way that the read-write contract holds _but only if the custom reader is used_\nChantelle: so it would round-trip as long as the extended reader was used\nKimbery: the notion of the reader is long gone by the time syntax objects are marshalled to bytecode\nKimbery: that would mean bytecode loading would need to call a reader, which is a string parser\nKimbery: that sounds like a very bad idea to me\nChantelle: fully expanded syntax objects are the only syntax objects that are marshalled to bytecode correct? this use of syntax objects wouldn't persist that far\nKimbery: I don’t really understand what you’re asking. 3D syntax is only a problem when syntax objects are marshalled to bytecode; that’s the whole reason the notion of 2D/3D syntax exists, IIUC.\nKimbery: If your syntax isn’t getting marshalled to bytecode, you can put whatever values you want in your syntax.\nChantelle: The way this relates to marshalling is if i did have a reader that did this and expected the lang it was used with to override [CODE] in order to detect these special structs, that would work fine and these syntax objects wouldn't exist after expansion. But using the reader with a lang that uses the default definition of [CODE] would expand it into [CODE], and _that_ would result in a 3d syntax object surviving to a fully expanded module.\nChantelle: So I guess my question is: should the default [CODE] form with a 3d syntax object be an error?\nKimbery: Should it be an error? I don’t think it _should_ be an error… not currently, at any rate. Whether or not it will do what you want is a separate question. I’m not entirely sure what “phase” the reader runs at (since it doesn’t really have one, currently), but I would imagine it is different from macroexpansion phases, so your struct might end up being from no phases at all… and it would _at least_ need to be cross-phase persistent to be defined behavior.\nChantelle: I think the reader and the expander share namespaces",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 17,
        "duration_minutes": 22.9,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:39:49.000266",
          "text": "does it still count as 3d syntax if a syntax object contains a non-prefab struct but that struct has an implementation of `gen:custom-write`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:41:04.000173",
          "text": "yes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:41:23.000004",
          "text": "why?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:41:51.000287",
          "text": "custom-write converts things to strings. perhaps the better question should be asking about serializable structs?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:42:57.000134",
          "text": "more pointedly, custom-write does not have any notion of _reading_ the result. 3D syntax is about things that aren’t roundtrippable."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:43:26.000041",
          "text": "No, I mean custom write specifically. The case I'm thinking of is where a module is read with a reader that produces syntax objects containing structs to represent certain special kinds of syntactic constructs (as opposed to using tagged s-exps), and those structs implement custom write in such a way that the read-write contract holds _but only if the custom reader is used_"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:43:53.000181",
          "text": "so it would round-trip as long as the extended reader was used"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:44:11.000060",
          "text": "the notion of the reader is long gone by the time syntax objects are marshalled to bytecode"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:45:13.000144",
          "text": "that would mean bytecode loading would need to call a reader, which is a string parser"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:45:17.000326",
          "text": "that sounds like a very bad idea to me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:47:39.000143",
          "text": "fully expanded syntax objects are the only syntax objects that are marshalled to bytecode correct? this use of syntax objects wouldn't persist that far"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:48:21.000271",
          "text": "I don’t really understand what you’re asking. 3D syntax is only a problem when syntax objects are marshalled to bytecode; that’s the whole reason the notion of 2D/3D syntax exists, IIUC."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:49:06.000181",
          "text": "If your syntax isn’t getting marshalled to bytecode, you can put whatever values you want in your syntax."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:55:24.000227",
          "text": "The way this relates to marshalling is if i did have a reader that did this and expected the lang it was used with to override `#%datum` in order to detect these special structs, that would work fine and these syntax objects wouldn't exist after expansion. But using the reader with a lang that uses the default definition of `#%datum` would expand it into `(quite &lt;stx object&gt;)`, and _that_ would result in a 3d syntax object surviving to a fully expanded module."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T18:55:39.000101",
          "text": "So I guess my question is: should the default `#%datum` form with a 3d syntax object be an error?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-02T18:59:35.000211",
          "text": "Should it be an error? I don’t think it _should_ be an error… not currently, at any rate. Whether or not it will do what you want is a separate question. I’m not entirely sure what “phase” the reader runs at (since it doesn’t really have one, currently), but I would imagine it is different from macroexpansion phases, so your struct might end up being from no phases at all… and it would _at least_ need to be cross-phase persistent to be defined behavior."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-02T19:02:43.000066",
          "text": "I think the reader and the expander share namespaces"
        }
      ]
    },
    {
      "conversation_id": "297",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Tina Is the indentation settings for racket text% editors defined in [CODE]?\nRosalee: If so could you point me to it? (Searching the docs appears to have failed me.)\nTina: I don't know what you mean by indentation settings exactly\nTina: What purpose are you trying to achieve?\nRosalee: Checking indentation, in specific:\nRosalee: At the moment I have an object that satisfies [CODE], I can call one of the [CODE] functions on it to indent it.\nRosalee: However, I also want the ability to change some of the tabbing rules, much like in the DrRacket preferences window.\nRosalee: In fact, exactly like in the DrRacket preferences window.\nRosalee: I’m just looking for a programatic way to do that. :wink:\nRosalee: If you know how I could do that that would be awesome. :smile: (If not thanks anyway though.)\nTina: [CODE] and [CODE]\nTina: You can avoid updating your own preferences file if you use:\nTina: [CODE] and the getter\nTina: (set up a hash table and avoid writing to the file)\nTina: You can look at the difference between the files before and after you make the modification via the drracket gui\nTina: and you probably also want to look in framework/private/main, I believe.\nTina: hth\nRosalee: Ok, cool\nRosalee: So basically try it in drracket and check the preferences file to see the exact preference? Cool, much appreciated. :smile:\nTina: or read the code I pointed you to, in order to see what the settings are.\nTina: or both, I suppose\nRosalee: Cool, thanks.\nRosalee: Although hmm…the preferences file doesn’t seem to be in my ~/Library/Racket folder.\nTina: See [CODE]\nRosalee: *facepalm* ah, thanks.\nRosalee: [CODE]…ah, okay. Thanks. :slightly_smiling_face:\nRosalee: Tina Ah, okay [CODE], thanks. :slightly_smiling_face:\nTina: when you call [CODE] you don’t pass the [CODE] part\nRosalee: just [CODE]? Makes sense. Thanks a lot for the help.\nTilda: Tina or Rosalee or anyone who's worked with images in DrRacket: is there a reason [CODE] requires its width/height arguments to be strictly positive? Tonight, two students pasted into their code the rendered output of [CODE], i.e. a 0x0 image, and my Racket-&gt;text converter choked on it because [CODE] threw an error.\nTina: I guess one of the underlying bitmap construction operations on one of the platforms won't create a zero sized bit map\nTina: The image library has a bunch of special cases for this reason.\nTina: (I don't actually know why tho. But that's my guess.)\nTilda: gotcha. So in my code, I can use a workaround with [CODE], and short-circuit the problem. but it seemed kinda hackish to me :wink:\nRosalee: Tilda Ya, fwiw, I suspect Matthew has done the most with that particular bit of the code (bitmap%)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 35,
        "duration_minutes": 104.6,
        "contains_question": true,
        "action_keywords": [
          "create",
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Tilda",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:02:28.000140",
          "text": "<@Tina> Is the indentation settings for racket text% editors defined in `framework`?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:02:44.000160",
          "text": "If so could you point me to it? (Searching the docs appears to have failed me.)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:03:10.000279",
          "text": "I don't know what you mean by indentation settings exactly"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:04:19.000136",
          "text": "What purpose are you trying to achieve?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:05:11.000146",
          "text": "Checking indentation, in specific:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:06:05.000073",
          "text": "At the moment I have an object that satisfies `racket:text&lt;%&gt;`, I can call one of the `tabify` functions on it to indent it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:06:34.000088",
          "text": "However, I also want the ability to change some of the tabbing rules, much like in the DrRacket preferences window."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:06:43.000175",
          "text": "In fact, exactly like in the DrRacket preferences window."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:06:50.000189",
          "text": "I’m just looking for a programatic way to do that. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:07:54.000134",
          "text": "If you know how I could do that that would be awesome. :smile: (If not thanks anyway though.)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:10:29.000117",
          "text": "`preferences:get` and `preferences:set`"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:10:42.000095",
          "text": "You can avoid updating your own preferences file if you use:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:11:18.000100",
          "text": "`preferences:low-level-put-preferences` and the getter"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:11:28.000106",
          "text": "(set up a hash table and avoid writing to the file)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:11:53.000007",
          "text": "You can look at the difference between the files before and after you make the modification via the drracket gui"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:12:08.000011",
          "text": "and you probably also want to look in framework/private/main, I believe."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:12:12.000123",
          "text": "hth"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:19:39.000171",
          "text": "Ok, cool"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:20:06.000092",
          "text": "So basically try it in drracket and check the preferences file to see the exact preference? Cool, much appreciated. :smile:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:21:21.000204",
          "text": "or read the code I pointed you to, in order to see what the settings are."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:21:23.000198",
          "text": "or both, I suppose"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:22:51.000162",
          "text": "Cool, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:23:08.000054",
          "text": "Although hmm…the preferences file doesn’t seem to be in my ~/Library/Racket folder."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:23:47.000081",
          "text": "See `find-system-path`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:24:07.000111",
          "text": "*facepalm* ah, thanks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:25:10.000027",
          "text": "`~/Library/Preferences`…ah, okay. Thanks. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:32:12.000185",
          "text": "<@Tina> Ah, okay `plt:framework-pref:framework:tabify`, thanks. :slightly_smiling_face:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T21:32:40.000056",
          "text": "when you call `preferences:set` you don’t pass the `plt:framework-pref` part"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T21:39:07.000071",
          "text": "just `framework:tabify`? Makes sense. Thanks a lot for the help."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:12:44.000039",
          "text": "<@Tina> or <@Rosalee> or anyone who's worked with images in DrRacket: is there a reason `make-bitmap` requires its width/height arguments to be strictly positive?  Tonight, two students pasted into their code the rendered output of `empty-image`, i.e. a 0x0 image, and my Racket-&gt;text converter choked on it because `make-bitmap` threw an error."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T22:13:42.000035",
          "text": "I guess one of the underlying bitmap construction operations on one of the platforms won't create a zero sized bit map"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T22:13:59.000100",
          "text": "The image library has a bunch of special cases for this reason. "
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-02T22:14:14.000191",
          "text": "(I don't actually know why tho. But that's my guess.)"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:24:28.000168",
          "text": "gotcha.  So in my code, I can use a workaround with `(equal? snip 2htdp:empty-image)`, and short-circuit the problem.  but it seemed kinda hackish to me :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:47:04.000187",
          "text": "<@Tilda> Ya, fwiw, I suspect Matthew has done the most with that particular bit of the code (bitmap%)"
        }
      ]
    },
    {
      "conversation_id": "298",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Although can I ask why you are using bitmap% in the first place?\nRosalee: (I mean, don’t get me wrong, its frequently the right task for the job, but [CODE] is usually _much_ nicer when it comes to silly edge cases like this. :wink: )\nTilda: I'm using neither; I'm walking the wxme tree of snips, finding the convertibles, and converting them to pngs\nTilda: do you happen to know how to ask a convertible what its width will be, if I try to convert it?\nTilda: assuming I don't know what type of snip it is, merely that it's convertible?\nRosalee: Oh wow, if you’re using [CODE] to convert to a png and you’re getting an error that’s probably a bug.\nRosalee: So short answer, no, I don’t think you can do that. Long answer, that’s probably a bug…can you give me a sample?\nTilda: so, [CODE] will trigger the contract error\nTilda: You can rig it with some image snip if you want, but that's simple enough as it is\nRosalee: Tilda Interesting, this is certainly a bug.\nTilda: also, really annoyingly: [CODE] doesn't give me [CODE], it dies with the contract error, first.\nRosalee: As per the docs…\nRosalee: yup\nRosalee: which is why its a bug. :wink:\nRosalee: Either: A) It should not say its convertible?, or B) It should return fallback (which is by default an error iirc.)\nRosalee: Although…its probably a bug in the 2htdp library.\nTilda: I'd rather B: I don't want image snips to *not* claim that they're convertible things, but I do want a decent error-handling mechanism\nRosalee: Ya, this is almost certainly a bug in [CODE], for example, when trying to convert [CODE], I get:\nRosalee: [CODE_BLOCK]\nRosalee: I ‘think’ Corliss manages that library? I’ll talk to him about it tomorrow morning if that works for you?\nRosalee: (Unless you need something sooner.)\nTilda: well, I can workaround it with a with-handlers on the exn:fail:contract error, but it's ugly. I'd like a cleaner long-term solution\nRosalee: Tilda Okay. Fwiw, something like this will solve your immediate problem, I’ll talk to Matthias tomorrow about getting it fixed properly: [CODE_BLOCK]\nTilda: Thanks. For now, I'm using a similar handler, but I'm not outputting the empty image itself. In a minor sense, it's better that I handle the error, because a 0-pixel image is very hard to see on a monitor... :slightly_smiling_face:\nRosalee: LOL, very true. Which is why I *always* (aka never) use zero-width space characters in my racket variables. :wink:\nRosalee: Anyway, I need to be up early in the morning, so if that works for the moment I’m off to bed. :slightly_smiling_face:\nTilda: thanks\nRosalee: Thank you for finding the bug.\nTilda: don't thank me; thank students with wonky submissions!\nTilda: Found another bug too (filed in git) about indentation and highlighting; not urgent, just weird\nTina: Tilda Rosalee that’s a but in 2htdp/image (a library I maintain), but it is also a bug in [CODE]:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 31,
        "duration_minutes": 570.85,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Tilda",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:48:14.000084",
          "text": "Although can I ask why you are using bitmap% in the first place?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:49:07.000015",
          "text": "(I mean, don’t get me wrong, its frequently the right task for the job, but `pict` is usually _much_ nicer when it comes to silly edge cases like this. :wink: )"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:51:02.000162",
          "text": "I'm using neither; I'm walking the wxme tree of snips, finding the convertibles, and converting them to pngs"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:51:22.000085",
          "text": "do you happen to know how to ask a convertible what its width will be, if I try to convert it?"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:51:31.000035",
          "text": "assuming I don't know what type of snip it is, merely that it's convertible?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:52:30.000074",
          "text": "Oh wow, if you’re using `convert` to convert to a png and you’re getting an error that’s probably a bug."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:53:12.000089",
          "text": "So short answer, no, I don’t think you can do that. Long answer, that’s probably a bug…can you give me a sample?"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:53:22.000052",
          "text": "so, `(convert empty-image 'png-bytes)` will trigger the contract error"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:53:43.000090",
          "text": "You can rig it with some image snip if you want, but that's simple enough as it is"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:56:12.000020",
          "text": "<@Tilda> Interesting, this is certainly a bug."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:56:14.000279",
          "text": "also, really annoyingly: `(convert empty-image 'png-bytes 'fallback)` doesn't give me `'fallback`, it dies with the contract error, first."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:56:16.000034",
          "text": "As per the docs…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:56:26.000152",
          "text": "yup"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:56:31.000073",
          "text": "which is why its a bug. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:57:15.000126",
          "text": "Either:\nA) It should not say its convertible?, or\nB) It should return fallback (which is by default an error iirc.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:58:18.000056",
          "text": "Although…its probably a bug in the 2htdp library."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T22:58:18.000127",
          "text": "I'd rather B: I don't want image snips to *not* claim that they're convertible things, but I do want a decent error-handling mechanism"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:59:26.000056",
          "text": "Ya, this is almost certainly a bug in `2htdp`, for example, when trying to convert `blank`, I get:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T22:59:30.000028",
          "text": "```\n&gt; (convert (blank 0) 'png-bytes)\n#\"\\211PNG\\r\\n\\32\\n\\0\\0\\0\\rIHDR\\0\\0\\0\\1\\0\\0\\0\\1\\b\\6\\0\\0\\0\\37\\25\\304\\211\\0\\0\\0\\rIDAT\\b\\231c\\370\\377\\377?\\3\\0\\b\\374\\2\\376\\205\\315\\2534\\0\\0\\0\\0IEND\\256B`\\202\"\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T23:00:04.000156",
          "text": "I ‘think’ <@Corliss> manages that library? I’ll talk to him about it tomorrow morning if that works for you?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T23:00:21.000175",
          "text": "(Unless you need something sooner.)"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T23:00:51.000194",
          "text": "well, I can workaround it with a with-handlers on the exn:fail:contract error, but it's ugly.  I'd like a cleaner long-term solution"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T23:04:51.000076",
          "text": "<@Tilda> Okay. Fwiw, something like this will solve your immediate problem, I’ll talk to Matthias tomorrow about getting it fixed properly:\n```\n#lang racket\n\n(require (prefix-in file: file/convertible)\n         pict)\n\n(define (convert v request [default #f])\n  (with-handlers ([exn:fail:contract? (λ (e)\n                                        (case request\n                                          [(png-bytes) (convert (blank 0) 'png-bytes default)]\n                                          [else (raise e)]))])\n    (file:convert v request default)))\n```"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T23:06:11.000071",
          "text": "Thanks.  For now, I'm using a similar handler, but I'm not outputting the empty image itself.  In a minor sense, it's better that I handle the error, because a 0-pixel image is very hard to see on a monitor... :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T23:06:47.000062",
          "text": "LOL, very true. Which is why I *always* (aka never) use zero-width space characters in my racket variables. :wink:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T23:07:01.000078",
          "text": "Anyway, I need to be up early in the morning, so if that works for the moment I’m off to bed. :slightly_smiling_face:"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T23:07:10.000110",
          "text": "thanks"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-02T23:07:27.000148",
          "text": "Thank you for finding the bug."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T23:07:44.000020",
          "text": "don't thank me; thank students with wonky submissions!"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-02T23:08:18.000014",
          "text": "Found another bug too (filed in git) about indentation and highlighting; not urgent, just weird"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T08:19:05.000486",
          "text": "<@Tilda> <@Rosalee> that’s a but in 2htdp/image (a library I maintain), but it is also a bug in `pict`:"
        }
      ]
    },
    {
      "conversation_id": "299",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tina: [CODE_BLOCK]\nTina: It isn’t obvious to me what the right behavior is here, but I’ve pushed a change that produces a 1x1 bitmap in that case\nTina: (but =&gt; bug)\nTina: Rosalee: you wrote earlier “it is probably a bug in the 2htdp library”; I just want to put out that the error message contains the line:\nTina: [CODE_BLOCK]\nTina: (lines)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 6,
        "duration_minutes": 23.4,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Tina",
          "timestamp": "2017-10-03T08:21:28.000211",
          "text": "```\n#lang racket/base\n(require file/convertible\n         racket/class\n         racket/gui/base)\n(require (prefix-in p: pict))\n\n(define bp\n  (read-bitmap\n   (open-input-bytes\n    (convert (p:rectangle 0 0) 'png-bytes 'fallback))))\n\n(send bp get-width) ;; ==&gt; 1\n(send bp get-height) ;; ==&gt; 1\n```"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T08:27:36.000322",
          "text": "It isn’t obvious to me what the right behavior is here, but I’ve pushed a change that produces a 1x1 bitmap in that case"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T08:27:45.000067",
          "text": "(but =&gt; bug)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T08:44:15.000477",
          "text": "<@Rosalee>: you wrote earlier “it is probably a bug in the 2htdp library”; I just want to put out that the error message contains the line:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T08:44:48.000310",
          "text": "```\n  blaming: &lt;pkgs&gt;/gui-lib/mrlib/image-core.rkt\n   (assuming the contract is correct)\n```"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T08:44:52.000085",
          "text": "(lines)"
        }
      ]
    },
    {
      "conversation_id": "300",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Sure. I blamed 2htdp/image because pict didn’t fail. Although I personally thought making a 1x1 transparent png was the right thing to do here as apparently pngs can’t have a 0 width or height.\nTilda: Where is that speced? I couldn't find that fact anywhere...\nRosalee: But yup, it was certainly the gui lib that tried to make the actual 0x0 picture. :slightly_smiling_face:\nTilda: Going back to a related question: do you happen to know how to ask a convertible what its width will be, if I try to convert it?\nRosalee: Tilda I honestly forget. Here is an unofficial SO answer while I track down the actual spec: <[URL]\nRosalee: Tilda The closest thing that the convert library seems to support (by default) is: [CODE], which gives you the width and height at the same time as converting the image.\nRosalee: You ‘could’ use [CODE], which automatically pads the png image.\nRosalee: This gives the effect of a 0x0 image being padded. And then it gives you the amount of padding added to each side.\nTilda: I tried that, and consistently got #f as my output. Looks like the snip doesn't respond to that message\nRosalee: So in the case of [CODE], you get a 6x6 sized png with 3 pixels of padding on the left, top, right, and bottom.\nTilda: Would be lovely if it did....\nRosalee: Ah, sad.\nRosalee: Then nope, I highly suspect it’s not possible. :confused:\nTilda: Png-bytes+bounds I can understand why it fails, since it promises to return the actual bytes and bounds, and can't return a 0*0 image. But the padded version ought to work, and just doesn't seem to be supported right now\nRosalee: Okay\nRosalee: I think I have a solution.\nRosalee: Its ugly and terrible, but….\nRosalee: convert to pdf-bytes.\nRosalee: Then use the racket-poppler package to get the width and height of the pdf page.\nTilda: Oh good grief. Srsly?\nRosalee: Ya, that is worse than just catching the exception. :disappointed:\nTilda: Well now thanks to Robby's fix, there won't be an exception to catch... Irony.\nRosalee: But ya, the convert library is kind of…lacking, imo.\nTilda: I wonder if the contract for png-bytes+bounds might not be better as (list (or/c bytes default) num num num num), instead of (or/c (list bytes num num num num) default)...\nTilda: In that you could get the bounds even if you couldn't get the bytes\nRosalee: Eh, something you pass into the convert library might not even make sense to be a png file. In which case having it return default/c is the right thing.\nRosalee: What would be much better would be having a ‘width and ‘height convert targets.\nTilda: I can see efficiency reasons why that might not be ideal (eg if the image is recomputed each time, in order to measure it), but as an API that would be helpful\nRosalee: FYI, here is the png spec that makes a 0x0 png invalid: <[URL]\nRosalee: I absolutely agree.\nRosalee: Honestly, I would just scrap the [CODE] library altogether. Its a great idea, but its just too rigid in so many ways.\nRosalee: [CODE]*\nTilda: Well, it's a nice trick that works with snips that I can't statically predict what that are, so it's got that going for it :-)\nRosalee: Sure. I think a convertiblity library absolutely must exist. Its just this particular instance which is too rigid.\nRosalee: I’ve actually been working on a replacement for use with video.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 35,
        "duration_minutes": 22.83,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "create",
          "fix",
          "must",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Tilda"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T08:58:00.000273",
          "text": "Sure. I blamed 2htdp/image because pict didn’t fail. Although I personally thought making a 1x1 transparent png was the right thing to do here as apparently pngs can’t have a 0 width or height."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T08:58:34.000451",
          "text": "Where is that speced? I couldn't find that fact anywhere..."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T08:58:35.000334",
          "text": "But yup, it was certainly the gui lib that tried to make the actual 0x0 picture. :slightly_smiling_face:"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:00:58.000404",
          "text": "Going back to a related question: do you happen to know how to ask a convertible what its width will be, if I try to convert it?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:01:22.000657",
          "text": "<@Tilda> I honestly forget. Here is an unofficial SO answer while I track down the actual spec: <https://stackoverflow.com/questions/7909212/how-to-create-empty-0x0-image>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:03:23.000380",
          "text": "<@Tilda> The closest thing that the convert library seems to support (by default) is: `'png-bytes+bounds`, which gives you the width and height at the same time as converting the image."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:04:35.000083",
          "text": "You ‘could’ use `'png-bytes+bounds8`, which automatically pads the png image."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:05:02.000512",
          "text": "This gives the effect of a 0x0 image being padded. And then it gives you the amount of padding added to each side."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:05:21.000430",
          "text": "I tried that, and consistently got #f as my output. Looks like the snip doesn't respond to that message"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:05:33.000106",
          "text": "So in the case of `(convert empty-image 'png-bytes+bounds8)`, you get a 6x6 sized png with 3 pixels of padding on the left, top, right, and bottom."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:05:39.000034",
          "text": "Would be lovely if it did...."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:06:02.000238",
          "text": "Ah, sad."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:06:16.000483",
          "text": "Then nope, I highly suspect it’s not possible. :confused:"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:07:45.000229",
          "text": "Png-bytes+bounds I can understand why it fails, since it promises to return the actual bytes and bounds, and can't return a 0*0 image. But the padded version ought to work, and just doesn't seem to be supported right now"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:08:32.000229",
          "text": "Okay"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:08:36.000362",
          "text": "I think I have a solution."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:08:43.000093",
          "text": "Its ugly and terrible, but…."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:08:48.000366",
          "text": "convert to pdf-bytes."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:09:03.000213",
          "text": "Then use the racket-poppler package to get the width and height of the pdf page."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:09:27.000141",
          "text": "Oh good grief. Srsly? "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:09:49.000088",
          "text": "Ya, that is worse than just catching the exception. :disappointed:"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:10:13.000347",
          "text": "Well now thanks to Robby's fix, there won't be an exception to catch... Irony."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:10:15.000212",
          "text": "But ya, the convert library is kind of…lacking, imo."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:12:34.000322",
          "text": "I wonder if the contract for png-bytes+bounds might not be better as (list (or/c bytes default) num num num num), instead of (or/c (list bytes num num num num) default)..."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:13:21.000598",
          "text": "In that you could get the bounds even if you couldn't get the bytes"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:14:41.000602",
          "text": "Eh, something you pass into the convert library might not even make sense to be a png file. In which case having it return default/c is the right thing."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:15:02.000303",
          "text": "What would be much better would be having a ‘width and ‘height convert targets."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:16:34.000144",
          "text": "I can see efficiency reasons why that might not be ideal (eg if the image is recomputed each time, in order to measure it), but as an API that would be helpful"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:16:37.000038",
          "text": "FYI, here is the png spec that makes a 0x0 png invalid: <http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:17:14.000066",
          "text": "I absolutely agree."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:17:55.000032",
          "text": "Honestly, I would just scrap the `file/convert` library altogether. Its a great idea, but its just too rigid in so many ways."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:18:10.000361",
          "text": "`file/convertible`*"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T09:18:57.000204",
          "text": "Well, it's a nice trick that works with snips that I can't statically predict what that are, so it's got that going for it :-)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:20:32.000283",
          "text": "Sure. I think a convertiblity library absolutely must exist. Its just this particular instance which is too rigid."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-03T09:20:50.000170",
          "text": "I’ve actually been working on a replacement for use with video."
        }
      ]
    },
    {
      "conversation_id": "301",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tina: Tilda if you want to avoid catching the exception, you can check to see if the image has either a 0 width or a 0 height.\nTilda: Yesss, that's exactly my question. I don't have an image, I have a snip -- how do I ask the snip for its dimensions, if I don't know for certain that it's an image-snip?\nTina: get-extent\nTina: but maybe non-2htdp/image snips don’t have this problem, so maybe you can get the image out?\nTilda: Currently, my code for this case is simply, [CODE_BLOCK]\nTina: (I’ll note that [CODE] is an unrelated thing, which is slightly confusing to me at this point :slightly_smiling_face: )\nTilda: so I don't have a dc&lt;%&gt; to give to [CODE]. unless that's not the get-extent you meant?\nTina: If you want to work around the bug, I suggest you check to see if the snip is actually an [CODE] from 2htdp/image and if it has either a 0 width or a 0 height and then do the “conversion” yourself.\nTina: A bitmap dc would work fine for this purpose.\nTina: But that’s probably not the most direct approach\nTina: (If you want to stick with the code you have above, I suggest you use a regexp match on the error message so you don’t accidentally catch real bugs. I think that would also be just fine.)\nTilda: so using get-extent, it would be something like [CODE_BLOCK] ?\nTina: I’m not sure what would go wrong exactly but you should probably put a 1x1 bitmap into the bitmap-dc.\nTina: (Also you don’t have to add an image to the html page when it is 0x0, right? You could just put something less? Maybe nothing?)\nTina: Also, you can use [CODE] in the rhs of a [CODE]:\nTilda: right, that's what the add-empty-image is doing; it's letting me put a non-image placeholder into the resulting output\nTina: [CODE_BLOCK]\nTilda: good to know, thanks. I wasn't certain about the scoping, so didn't bother\nTina: It is scoped to that arm of the [CODE]\nTina: (to the square brackets)\nTilda: yup, makes sense. I think I'd gotten so used to BSL that I forgot normal racket allows defines in places where they make sense :wink:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 21,
        "duration_minutes": 18.93,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Tilda",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:25:05.000541",
          "text": "<@Tilda> if you want to avoid catching the exception, you can check to see if the image has either a 0 width or a 0 height."
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T10:25:41.000429",
          "text": "Yesss, that's exactly my question.  I don't have an image, I have a snip -- how do I ask the snip for its dimensions, if I don't know for certain that it's an image-snip?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:25:56.000293",
          "text": "get-extent"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:26:24.000521",
          "text": "but maybe non-2htdp/image snips don’t have this problem, so maybe you can get the image out?"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T10:26:58.000700",
          "text": "Currently, my code for this case is simply,\n```\n          [(convertible? snip)\n           (let ((converted\n                  (with-handlers ([exn:fail:contract?\n                                   (λ(e) 'conversion-failure)])\n                    (convert snip 'png-bytes 'conversion-failure))))\n             (if (equal? converted 'conversion-failure)\n                 (display (add-empty-image \"\")\n                          out)\n                 (display (add-image (convert snip 'png-bytes))\n                          out)))]\n```"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:27:01.000502",
          "text": "(I’ll note that `image-snip%` is an unrelated thing, which is slightly confusing to me at this point :slightly_smiling_face: )"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T10:28:28.000322",
          "text": "so I don't have a dc&lt;%&gt; to give to `(send a-snip get-extent dc x y)`.  unless that's not the get-extent you meant?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:28:31.000445",
          "text": "If you want to work around the bug, I suggest you check to see if the snip is actually an `image?` from 2htdp/image and if it has either a 0 width or a 0 height and then do the “conversion” yourself."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:28:53.000066",
          "text": "A bitmap dc would work fine for this purpose."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:29:03.000230",
          "text": "But that’s probably not the most direct approach"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:32:23.000583",
          "text": "(If you want to stick with the code you have above, I suggest you use a regexp match on the error message so you don’t accidentally catch real bugs. I think that would also be just fine.)"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T10:34:39.000297",
          "text": "so using get-extent, it would be something like\n```\n[(convertible? snip)\n           (let* ((bm (new bitmap-dc%))\n                  (width (box 0))\n                  (height (box 0)))\n             (send snip get-extent bm 0 0 width height)\n             (if (or (= (unbox width) 0) (= (unbox height) 0))\n                 (display (add-empty-image \"\") out)\n                 (display (add-image (convert snip 'png-bytes))\n                          out)))]\n```\n?"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:35:24.000188",
          "text": "I’m not sure what would go wrong exactly but you should probably put a 1x1 bitmap into the bitmap-dc."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:36:16.000510",
          "text": "(Also you don’t have to add an image to the html page when it is 0x0, right? You could just put something less? Maybe nothing?)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:36:33.000722",
          "text": "Also, you can use `define` in the rhs of a `cond`:"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T10:36:51.000477",
          "text": "right, that's what the add-empty-image is doing; it's letting me put a non-image placeholder into the resulting output"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:37:00.000276",
          "text": "```\n[(convertible? snip)\n (define bm (make-object bitmap-dc% (make-bitmap 1 1))))\n (define wb (box 0))\n... etc\n```"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T10:38:05.000407",
          "text": "good to know, thanks.  I wasn't certain about the scoping, so didn't bother"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:39:54.000636",
          "text": "It is scoped to that arm of the `cond`"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-03T10:40:06.000716",
          "text": "(to the square brackets)"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-03T10:44:01.000009",
          "text": "yup, makes sense.  I think I'd gotten so used to BSL that I forgot normal racket allows defines in places where they make sense :wink:"
        }
      ]
    },
    {
      "conversation_id": "302",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Latarsha re: the GH issue, is racket7 easy to build these days? I haven’t tried it yet.\nLatarsha: Kimbery should be just [CODE]\nKimbery: but how can I write Racket without DrRacket? :)\nKimbery: oh, I see… racket7 does _not_ imply racket-on-chez.\nLatarsha: right\nLatarsha: no need to miss out on DrRacket\nLatarsha: :slightly_smiling_face:\nKimbery: so I should just expect [CODE] to give me an ordinary Racket installation with a slower and less buggy expander?\nLatarsha: yes\nLatarsha: and maybe a slower IO system\nLatarsha: you might want to build less than that\nKimbery: if I want to install drracket, I don’t really have a choice, do I?\nKimbery: I did notice that [CODE] did not set up static-links into the [CODE] dir… I don’t remember how those got set up in my normal from-source installation in the first place.\nKimbery: okay. I seem to remember I stopped using [CODE] for some reason, but I don’t remember what the reason was.\nKimbery: I think I wanted to not install the whole main-distribution.\nKimbery: aww, my [CODE] segfaulted.\nLatarsha: if you can get a stack trace that would be a useful bug report\nKimbery: Latarsha I have a crash report, but re-running [CODE] worked. should I still open an issue?\nKimbery: Latarsha Alex’s program still fails on the new expander\nLatarsha: Worth reporting on the bug",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 20,
        "duration_minutes": 78.22,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T17:36:06.000158",
          "text": "<@Latarsha> re: the GH issue, is racket7 easy to build these days? I haven’t tried it yet."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T17:36:23.000102",
          "text": "<@Kimbery> should be just `make`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T17:36:47.000068",
          "text": "but how can I write Racket without DrRacket? :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T17:39:24.000106",
          "text": "oh, I see… racket7 does _not_ imply racket-on-chez."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T17:40:16.000224",
          "text": "right"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T17:40:29.000148",
          "text": "no need to miss out on DrRacket"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T17:40:31.000015",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T17:41:55.000029",
          "text": "so I should just expect `make base` to give me an ordinary Racket installation with a slower and less buggy expander?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T17:44:11.000036",
          "text": "yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T17:44:21.000485",
          "text": "and maybe a slower IO system"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T17:54:16.000105",
          "text": "you might want to build less than that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T17:56:24.000097",
          "text": "if I want to install drracket, I don’t really have a choice, do I?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T18:01:33.000205",
          "text": "I did notice that `make base` did not set up static-links into the `pkgs/` dir… I don’t remember how those got set up in my normal from-source installation in the first place."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T18:03:19.000123",
          "text": "okay. I seem to remember I stopped using `make` for some reason, but I don’t remember what the reason was."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T18:03:41.000242",
          "text": "I think I wanted to not install the whole main-distribution."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T18:06:41.000274",
          "text": "aww, my `raco setup` segfaulted."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T18:11:25.000234",
          "text": "if you can get a stack trace that would be a useful bug report"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T18:19:16.000364",
          "text": "<@Latarsha> I have a crash report, but re-running `raco setup` worked. should I still open an issue?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-03T18:51:06.000253",
          "text": "<@Latarsha> Alex’s program still fails on the new expander"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T18:54:19.000250",
          "text": "Worth reporting on the bug"
        }
      ]
    },
    {
      "conversation_id": "303",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: true\nLatarsha: [CODE] sets them up for the pkgs that are in there\nLatarsha: Yes\nTana: Question about Typed Racket: it looks like [CODE] wants a [CODE] but most math operators want [CODE] - is there a way to cast a [CODE] to [CODE] for something like [CODE]\nTana: <[URL]\nLatarsha: Tana that's because [CODE] is a runtime error in regular untyped Racket\nTana: Okay so the problem i have is that I have functions that return the result of a math operation which is a [CODE] and I am passing that to another function which needs a [CODE]\nTana: [CODE_BLOCK]\nTana: in this case [CODE] is returning the result of [CODE] which is a [CODE] and that is getting passed to [CODE] down in the bottom of [CODE] which wants a [CODE]\nLatarsha: Tana [CODE_BLOCK]\nTana: Latarsha just so I understand, I need to use [CODE] because [CODE] can return types other than [CODE] or an exception or something?\nLatarsha: Tana the issue is that [CODE] is not a [CODE], but [CODE] is, and Typed Racket isn't currently smart enough to tell the difference\nLatarsha: but [CODE] always produces a [CODE]\nEzequiel: Latarsha there is RSound but it already isn't working on my computer and I want to distribute this to about 20 computers\nEzequiel: Latarsha RSound uses portaudio \"This package includes the portaudio dynamic libraries for Windows and Mac, where I believe that users will have trouble compiling and installing such a package\"\nRosalee: Ezequiel What systems do you want to distribute it on?\nEzequiel: Rosalee Sadly Windows 7 and Windows 8 :disappointed:\nRosalee: Ezequiel Oh, interesting.\nRosalee: Did you call [CODE]?\nRosalee: <[URL]\nRosalee: Actually, better idea, can we take a step back…you want to make a volume meeter, may I ask what you want it for?\nLatarsha: Ezequiel maybe ask about the RSound problems on the mailing list\nEzequiel: Latarsha I'm checking on my OpenSUSE machine right now. I am thinking it is a Windows portaudio issue. Doesn't look like there are other options besides portaudio currently\nRosalee: Ezequiel More or less…depend on your application. :slightly_smiling_face:\nEzequiel: Rosalee I teach LITTLE kids that wear headphones. I need to know if the computer is playing audio to them and if it is the kids need to know not to touch the screen yet.\nRosalee: Ah, okay.\nRosalee: So in that case you aren’t generating any sound, so much as you want to see the sound that the system is generating, coorect?\nKrysta: OK that was a bug in my reproduction of my real bug. My real problem is that I cannot read from the gdb subprocess after I send any of the [CODE] commands. For example: <[URL] Is it because gdb's [CODE] commands fork or something like that?\nEzequiel: Rosalee Yes I just want to know that sound is being played and then have some events triggered\nRosalee: Ezequiel Ah, okay. Hmmph. I’m not even sure if portaudio can handle that. As it’s just a library to produce sound, not monitor it.\nRosalee: And this will probably be platform dependent.\nRosalee: Windows 7 and 8 you say?\nEzequiel: yes :disappointed:\nNelson: no\nRosalee: Okay….hmm…next question, is the sound coming out of a standard 3.5mm jack?\nEzequiel: It is coming out of Either USB or 3.5mm\nEzequiel: seems like I need to have access to the Windows Mixer. I see how to access it in C , but my C skills are decades old\nRosalee: Ezequiel Oh bleh, ya, that makes things harder.\nRosalee: Can you link to the API?\nRosalee: (Racket has a really good FFI)\nRosalee: Ah, it’s a c++ api, not c…that’s harder. :disappointed:\nRosalee: Investigating…\nEzequiel: Rosalee Well this will be my new pet project for a little bit to try and get the API to sound mixer. I'm always thinking of fringe cases.\nRosalee: lol, fair.\nRosalee: Sadly C++ and FFIs don’t mix very well. :disappointed:\nRosalee: Ezequiel Can you send me a copy of [CODE]?\nRosalee: It looks like this is the file that contains all of the smarts.\nRosalee: But I don’t have immediate access to a windows pc.\nKimbery: Tennille try [CODE]\nTennille: that worked, btw\nKimbery: that’s just how the racket class system works, so [CODE] is just a part of class syntax. you might want to read the section of the racket documentation on [CODE].\nKimbery: this is probably a good place to start <[URL]\nTennille: Kimbery mostly joking but I was hoping by using racket I wouldn’t have to think about classes\nKimbery: (I find the section of the reference on classes a little uncharacteristically difficult to read)\nKimbery: Tennille me, too. I don’t use [CODE]. but the author of the redis package did, so you probably have to think about them if you want to use that package. :)\nTennille: thank you though. if [CODE] is part of the class syntax that makes perfect sense. I had not come across it before\nKimbery: Tennille if you search for identifiers in the docs, they’ll usually link to something useful <[URL]\nKimbery: but… the [CODE] reference is laid out in a bit of an odd way, so a lot of the docs for the various class-related forms are in other places. :/\nKimbery: and it doesn’t have enough examples.\nTennille: slightly more examples than [CODE] does though: <[URL]\nKimbery: yes, rackdis looks like it needs a little love.\nTennille: apologies for the sarcasm. I actually really appreciate anyone who’s created a module/package and gone out of their way to get it published in a repo. we’re lucky to have anything at all",
      "analysis_metadata": {
        "user_count": 8,
        "message_count": 62,
        "duration_minutes": 1375.67,
        "contains_question": true,
        "action_keywords": [
          "create",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ezequiel",
          "Kimbery",
          "Krysta",
          "Latarsha",
          "Nelson",
          "Rosalee",
          "Tana",
          "Tennille"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T18:00:43.000114",
          "text": "true"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T18:02:22.000269",
          "text": "`make` sets them up for the pkgs that are in there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-03T18:19:27.000296",
          "text": "Yes"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T10:14:23.000414",
          "text": "Question about Typed Racket: it looks like `&gt;` wants a `Real` but most math operators want `Number` - is there a way to cast a `Number` to `Real` for something like `(if (&gt; x (+ y z)) ...)`"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T10:31:48.000416",
          "text": "<https://dl.dropbox.com/s/tvdjxewbgik4nve/Screenshot%202017-10-04%2010.29.49.png>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-04T10:48:40.000029",
          "text": "<@Tana> that's because `(&lt; (sqrt -1) 1)` is a runtime error in regular untyped Racket"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T12:05:28.000334",
          "text": "Okay so the problem i have is that I have functions that return the result of a math operation which is a `Number` and I am passing that to another function which needs a `Real`"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T12:05:57.000419",
          "text": "```\n; Get magnitude of vector (length)\n(: vector-mag (-&gt; vect Number))\n(define (vector-mag a)\n  (sqrt (+ (expt (vect-x a) 2) (expt (vect-y a) 2))))\n\n; Convert vector to a unit vector (magnitude of 1)\n(: vector-normalize (-&gt; vect vect))\n(define (vector-normalize a)\n  (define m (vector-mag a))\n  (if (zero? m)\n      a\n      (vector/ a m)))\n```"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T12:06:43.000387",
          "text": "in this case `vector-mag` is returning the result of `sqrt` which is a `Number` and that is getting passed to `vector/` down in the bottom of `vector-normalize` which wants a `Real`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-04T12:10:14.000129",
          "text": "<@Tana> \n```\n#lang typed/racket\n\n(struct vect ([x : Real] [y : Real]))\n\n; Get magnitude of vector (length)\n(: vector-mag (-&gt; vect Real))\n(define (vector-mag a)\n  (sqrt (+ (sqr (vect-x a)) (sqr (vect-y a)))))\n```"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T12:15:09.000212",
          "text": "<@Latarsha> just so I understand, I need to use `sqr` because `expt` can return types other than `Number` or an exception or something?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-04T12:21:58.000620",
          "text": "<@Tana> the issue is that `(expt i 3)` is not a `Real`, but `(expt i 2)` is, and Typed Racket isn't currently smart enough to tell the difference"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-04T12:22:08.000680",
          "text": "but `sqr` always produces a `Real`"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T13:00:14.000147",
          "text": "<@Latarsha> there is RSound but it already isn't working on my computer and I want to distribute this to about 20 computers"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T13:01:47.000152",
          "text": "<@Latarsha> RSound uses portaudio \"This package includes the portaudio dynamic libraries for Windows and Mac, where I believe that users will have trouble compiling and installing such a package\""
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:11:26.000204",
          "text": "<@Ezequiel> What systems do you want to distribute it on?"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T13:11:59.000447",
          "text": "<@Rosalee> Sadly Windows 7 and Windows 8 :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:12:25.000248",
          "text": "<@Ezequiel> Oh, interesting."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:13:10.000369",
          "text": "Did you call `pa-maybe-initialize`?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:13:15.000493",
          "text": "<http://docs.racket-lang.org/portaudio/index.html?q=portaudio>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:14:04.000419",
          "text": "Actually, better idea, can we take a step back…you want to make a volume meeter, may I ask what you want it for?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-04T13:20:15.000123",
          "text": "<@Ezequiel> maybe ask about the RSound problems on the mailing list"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T13:21:16.000239",
          "text": "<@Latarsha> I'm checking on my OpenSUSE machine right now. I am thinking it is a Windows portaudio issue.  Doesn't look like there are other options besides portaudio currently"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:24:44.000390",
          "text": "<@Ezequiel> More or less…depend on your application. :slightly_smiling_face:"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T13:26:24.000074",
          "text": "<@Rosalee> I teach LITTLE kids that wear headphones. I need to know if the computer is playing audio to them and if it is the kids need to know not to touch the screen yet."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:29:06.000357",
          "text": "Ah, okay."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:29:42.000107",
          "text": "So in that case you aren’t generating any sound, so much as you want to see the sound that the system is generating, coorect?"
        },
        {
          "user": "Krysta",
          "timestamp": "2017-10-04T13:31:20.000235",
          "text": "OK that was a bug in my reproduction of my real bug.  My real problem is that I cannot read from the gdb subprocess after I send any of the `exec-*` commands.  For example: <https://gist.github.com/scottcarr/e9605a0b4c058f4e853b0ac11f1a3abe>  Is it because gdb's `exec-*` commands fork or something like that?"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T16:17:13.000366",
          "text": "<@Rosalee> Yes I just want to know that sound is being played and then have some events triggered"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:20:48.000072",
          "text": "<@Ezequiel> Ah, okay. Hmmph. I’m not even sure if portaudio can handle that. As it’s just a library to produce sound, not monitor it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:21:06.000270",
          "text": "And this will probably be platform dependent."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:21:13.000168",
          "text": "Windows 7 and 8 you say?"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T16:21:43.000142",
          "text": "yes :disappointed:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-04T16:21:49.000487",
          "text": "no"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:22:21.000578",
          "text": "Okay….hmm…next question, is the sound coming out of a standard 3.5mm jack?"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T16:23:06.000061",
          "text": "It is coming out of Either USB or 3.5mm"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T16:30:31.000240",
          "text": "seems like I need to have access to the Windows Mixer. I see how to access it in C , but my C skills are decades old"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:31:31.000200",
          "text": "<@Ezequiel> Oh bleh, ya, that makes things harder."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:31:37.000562",
          "text": "Can you link to the API?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:31:47.000087",
          "text": "(Racket has a really good FFI)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:33:39.000227",
          "text": "Ah, it’s a c++ api, not c…that’s harder. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:33:47.000357",
          "text": "Investigating…"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T16:34:08.000366",
          "text": "<@Rosalee> Well this will be my new pet project for a little bit to try and get the API to sound mixer. I'm always thinking of fringe cases."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:34:43.000047",
          "text": "lol, fair."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:34:55.000652",
          "text": "Sadly C++ and FFIs don’t mix very well. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:38:25.000144",
          "text": "<@Ezequiel> Can you send me a copy of `mmsystem.h`?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:38:34.000024",
          "text": "It looks like this is the file that contains all of the smarts."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T16:38:40.000474",
          "text": "But I don’t have immediate access to a windows pc."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:40:34.000448",
          "text": "<@Tennille> try `(new redis% [ip \"1.2.3.4\"] [port 1234])`"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:45:03.000447",
          "text": "that worked, btw"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:45:50.000062",
          "text": "that’s just how the racket class system works, so `init-field` is just a part of class syntax. you might want to read the section of the racket documentation on `racket/class`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:46:15.000581",
          "text": "this is probably a good place to start <http://docs.racket-lang.org/guide/classes.html>"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:46:34.000189",
          "text": "<@Kimbery> mostly joking but I was hoping by using racket I wouldn’t have to think about classes"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:46:38.000404",
          "text": "(I find the section of the reference on classes a little uncharacteristically difficult to read)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:47:02.000293",
          "text": "<@Tennille> me, too. I don’t use `racket/class`. but the author of the redis package did, so you probably have to think about them if you want to use that package. :)"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:47:44.000067",
          "text": "thank you though. if `init-field` is part of the class syntax that makes perfect sense. I had not come across it before"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:48:51.000178",
          "text": "<@Tennille> if you search for identifiers in the docs, they’ll usually link to something useful <http://docs.racket-lang.org/search/index.html?q=init-field>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:49:28.000098",
          "text": "but… the `racket/class` reference is laid out in a bit of an odd way, so a lot of the docs for the various class-related forms are in other places. :/"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:49:36.000322",
          "text": "and it doesn’t have enough examples."
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:50:30.000257",
          "text": "slightly more examples than `rackdis` does though:\n<https://docs.racket-lang.org/rackdis/index.html>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T16:52:24.000388",
          "text": "yes, rackdis looks like it needs a little love."
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:56:23.000227",
          "text": "apologies for the sarcasm. I actually really appreciate anyone who’s created a module/package and gone out of their way to get it published in a repo. we’re lucky to have anything at all"
        }
      ]
    },
    {
      "conversation_id": "304",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Clorinda: others who have _written_ more Typed Racket may have better advice... but from my view you could (1) use Real more often instead of Number if that works, or (2) something like the following that can quickly ensure something is a [CODE] (or error in this case):\nClorinda: [CODE_BLOCK]\nClorinda: Although many math operators may accept any [CODE], they will also accept [CODE] (since any [CODE] is a [CODE]), and many (I think...) should know that if they got a Real, they will produce a Real\nLatarsha: what I would do for that function is just have it take [CODE] as input\nTana: ahhhh ok\nTana: lemme hack on it",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 6.43,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Clorinda",
          "Latarsha",
          "Tana"
        ]
      },
      "timeline": [
        {
          "user": "Clorinda",
          "timestamp": "2017-10-04T10:46:44.000532",
          "text": "others who have _written_ more Typed Racket may have better advice... but from my view you could (1) use Real more often instead of Number if that works, or (2) something like the following that can quickly ensure something is a `Real` (or error in this case):"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-04T10:46:56.000145",
          "text": "```\n#lang typed/racket\n\n(define x : Number 42)\n\n(ann (assert x real?) Real)\n```"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-04T10:48:11.000407",
          "text": "Although many math operators may accept any `Number`, they will also accept `Real` (since any `Real` is a `Number`), and many (I think...) should know that if they got a Real, they will produce a Real"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-04T10:49:01.000148",
          "text": "what I would do for that function is just have it take `Real` as input"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T10:53:05.000748",
          "text": "ahhhh ok"
        },
        {
          "user": "Tana",
          "timestamp": "2017-10-04T10:53:10.000237",
          "text": "lemme hack on it"
        }
      ]
    },
    {
      "conversation_id": "305",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ezequiel: I want to make a volume meter in Racket. What library would I look for?\nLatarsha: Ezequiel Racket GUI library? Sound library? Or some other kind of library?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 50.48,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ezequiel",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T11:20:22.000450",
          "text": "I want to make a volume meter in Racket. What library would I look for?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-04T12:10:51.000504",
          "text": "<@Ezequiel> Racket GUI library? Sound library? Or some other kind of library?"
        }
      ]
    },
    {
      "conversation_id": "306",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Krysta: Hello! I'm trying to script GDB with racket as a subprocess. However, I'm having trouble reading/writing to the subprocess. I thought it was a buffering issue. Here is a small reproduction of my issue: [CODE_BLOCK] The final line blocks forever. Could some one please suggest how I should go about reading/writing to a subprocess when I don't know exactly when it will respond?\nVincenzo: Krysta It looks like you're missing [CODE] as the output port for the last [CODE]\nKrysta: mflatt you're right! I should have known better. I've made that mistake several times already :wink: thank you\nKimbery: Krysta if you wrap everything with [CODE], then you won’t have to specify the port, and you won’t be able to make the mistake :)\nRosalee: (most linux systems have portaudio in their repos)\nRosalee: I know some windows systems require you to init the package",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 6,
        "duration_minutes": 17.33,
        "contains_question": true,
        "action_keywords": [
          "please",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Krysta",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Krysta",
          "timestamp": "2017-10-04T12:55:22.000173",
          "text": "Hello!  I'm trying to script GDB with racket as a subprocess.  However, I'm having trouble reading/writing to the subprocess.  I thought it was a buffering issue.  Here is a small reproduction of my issue:\n```\n#lang racket\n(define GDB-PROMPT #\"(gdb) \\n\")\n(define NEWLINE 10)\n\n(define-values (proc o i e) (subprocess #f #f #f \"/usr/bin/gdb\" \"--interpreter=mi2\"))\n\n(file-stream-buffer-mode o 'none)\n(file-stream-buffer-mode i 'none)\n(file-stream-buffer-mode e 'none)\n\n; read menu (10 lines long)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n(read-bytes-line o)\n\n; read (gdb) \\n\n(read-bytes-line o)\n\n(write-bytes #\"-file-exec-and-symbols a.out\\n\" i)\n(flush-output i)\n\n(read-bytes-line o) ;\n(read-bytes-line o) ; read done\n\n(write-bytes #\"-break-insert *main\\n\")\n(flush-output i)\n\n(sleep 1)\n(read-byte o)\n```\nThe final line blocks forever.  Could some one please suggest how I should go about reading/writing to a subprocess when I don't know exactly when it will respond?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-04T13:03:43.000036",
          "text": "<@Krysta> It looks like you're missing `i` as the output port for the last `write-bytes`"
        },
        {
          "user": "Krysta",
          "timestamp": "2017-10-04T13:05:23.000291",
          "text": "@mflatt you're right!  I should have known better.  I've made that mistake several times already :wink:  thank you"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-04T13:06:33.000519",
          "text": "<@Krysta> if you wrap everything with `(parameterize ([current-output-port i]) ....)`, then you won’t have to specify the port, and you won’t be able to make the mistake :)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:11:38.000547",
          "text": "(most linux systems have portaudio in their repos)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T13:12:42.000697",
          "text": "I know some windows systems require you to init the package"
        }
      ]
    },
    {
      "conversation_id": "307",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: scribble PDF question: is there an easy way to print landscape &amp; large fonts?\nNelson: (forwarded from [CODE], the idea is to make an \"accessible\" version of a class handout)\nEzequiel: Nelson have you tried quad for PDF?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 112.77,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ezequiel",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-10-04T14:25:07.000149",
          "text": "scribble PDF question: is there an easy way to print landscape &amp; large fonts?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-04T14:25:34.000342",
          "text": "(forwarded from `blerner`, the idea is to make an \"accessible\" version of a class handout)"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-04T16:17:53.000475",
          "text": "<@Nelson> have you tried quad for PDF?"
        }
      ]
    },
    {
      "conversation_id": "308",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tennille: hi racketeers, thanks in advance for looking. I am trying to use the *rackdis* package to connect to a remote redis server. All of the examples I’ve found use the following to initiate a connection: &gt;(define redis (new redis%)) &gt;(send redis init) I’m unsure about the syntax for adding the ip address and port of the remote server. In the docs the definition of *redis%* starts like this: &gt;(define redis% &gt; (class &gt; object% &gt; (init-field [ip “127.0.0.1”] [port 6379] [timeout 1]) &gt; (field [out null] [in null]) &gt; (super-new) and it ends like this: &gt;(define/public (init) &gt; (define-values (i o) (tcp-connect ip port)) &gt; (set! in i) &gt; (set! out o)))) I’m pretty new to Racket and can’t quite figure out how to set the IP and Port. There is “public” setter for timeout but not one for IP and Port\nTennille: thank you Kimbery I appreciate the help again (you’ve helped before!). I guess I should have tried that looking at the definition. What am I looking at there in the definition? *redis%* is defined as a class I guess? But I just don’t see where in the definition it shows that there is a short circuit to stuff my args into the *init-field* fn\nTennille: Kimbery thanks again!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 11.23,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Tennille"
        ]
      },
      "timeline": [
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:36:36.000064",
          "text": "hi racketeers, thanks in advance for looking.\nI am trying to use the *rackdis* package to connect to a remote redis server. All of the examples I’ve found use the following to initiate a connection: \n&gt;(define redis (new redis%))\n&gt;(send redis init)\nI’m unsure about the syntax for adding the ip address and port of the remote server. In the docs the definition of *redis%* starts like this:\n&gt;(define redis%\n&gt;  (class\n&gt;      object%\n&gt;    (init-field [ip “127.0.0.1”] [port 6379] [timeout 1])\n&gt;    (field [out null] [in null])\n&gt;    (super-new)\n\nand it ends like this:\n&gt;(define/public (init)\n&gt;      (define-values (i o) (tcp-connect ip port))\n&gt;      (set! in i)\n&gt;      (set! out o))))\nI’m pretty new to Racket and can’t quite figure out how to set the IP and Port. There is “public” setter for timeout but not one for IP and Port"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:44:55.000258",
          "text": "thank you <@Kimbery> I appreciate the help again (you’ve helped before!). I guess I should have tried that looking at the definition. What am I looking at there in the definition? *redis%* is defined as a class I guess? But I just don’t see where in the definition it shows that there is a short circuit to stuff my args into the *init-field* fn"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T16:47:50.000336",
          "text": "<@Kimbery> thanks again!"
        }
      ]
    },
    {
      "conversation_id": "309",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: update from [CODE] he's happy after: (1) using a TeX style to enter landscape mode for the document, and (2) putting [CODE] at the top of the document\nNelson: Rosalee any thoughts on turning a scribbled PDF into a \"very large print\" version? If not I'll turn this into a stackoverflow Q/A\nRosalee: Probably should be a so question. My main thought is you’ll want to replace the style file…",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 2.13,
        "contains_question": true,
        "action_keywords": [
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Nelson",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-10-04T17:59:39.000338",
          "text": "update from `blerner` he's happy after: (1) using a TeX style to enter landscape mode for the document, and (2) putting `\\fontsize{28pt}{40pt}\\selectfont` at the top of the document"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-04T18:00:32.000332",
          "text": "<@Rosalee> any thoughts on turning a scribbled PDF into a \"very large print\" version? If not I'll turn this into a stackoverflow Q/A"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-04T18:01:47.000382",
          "text": "Probably should be a so question. My main thought is you’ll want to replace the style file…"
        }
      ]
    },
    {
      "conversation_id": "310",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tennille: hi, last question for the day. I’m getting a list back from redis, which is good. it looks like it’s a list of strings but string functions reject them. They members the list have a ‘#’ in front of them. For example: &gt;#“do I not look like a string” I think this has something to do with the contract but can’t figure out how to massage it into a string\nMarlin: those are bytestrings\nDelmy: you want [CODE] to turn them into strings\nTennille: gotcha. found that fn\nTennille: is there an fn that I could have used to determine what type I had? something that would have returned ‘bytestring’?\nMarlin: um, in a typed-racket repl, you could enter [CODE], and you'll see the type\nMarlin: so that's kinda a way\nTennille: ah ok\nTennille: &gt;&gt; #“haha” &gt;- : Bytes &gt;#“haha”",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 6.72,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Marlin",
          "Tennille"
        ]
      },
      "timeline": [
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T18:49:52.000221",
          "text": "hi, last question for the day. I’m getting a list back from redis, which is good. it looks like it’s a list of strings but string functions reject them. They members the list have a ‘#’ in front of them. For example:\n&gt;#“do I not look like a string”\nI think this has something to do with the contract but can’t figure out how to massage it into a string"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-04T18:50:23.000229",
          "text": "those are bytestrings"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-10-04T18:51:03.000132",
          "text": "you want `bytes-&gt;string/utf-8` to turn them into strings"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T18:51:23.000273",
          "text": "gotcha. found that fn"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T18:52:06.000148",
          "text": "is there an fn that I could have used to determine what type I had? something that would have returned ‘bytestring’?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-04T18:54:51.000383",
          "text": "um, in a typed-racket repl, you could enter `#\"dfsdgvsd\"`, and you'll see the type"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-04T18:54:56.000185",
          "text": "so that's kinda a way"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T18:55:22.000227",
          "text": "ah ok"
        },
        {
          "user": "Tennille",
          "timestamp": "2017-10-04T18:56:35.000358",
          "text": "&gt;&gt; #“haha”\n&gt;- : Bytes\n&gt;#“haha”"
        }
      ]
    },
    {
      "conversation_id": "311",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "David: Is there an easy way to background a shelled out process in Racket? Currently, I’m using [CODE], but adding a [CODE] to the end of the command does not behave the same as in Bash, Racket still blocks, waiting for completion.\nClorinda: [CODE]?\nDavid: Hmmm, I was hoping you wouldn’t say that :stuck_out_tongue: I’m trying to avoid having to close ports and so forth.\nClorinda: there may be a better option -- I've just used subprocess before and it worked well\nClorinda: (I may have used [CODE] -- can't remember...)\nDavid: My use case is I have a bunch of commands to run in a loop, and they’re all independent. Moreover, I don’t care about the outputs, I’m running them for their side-effects (creating files on the disk). I wrote a [CODE] loop which calls [CODE], and it worked fine, but it was a waste of time waiting the things to go serially. Then I wrapped the thing in [CODE]. It works, but I was looking for a more principled solution.\nDavid: Of course, [CODE] would work just as well, but then I’d have to juggle the many ports I don’t care about.\nDavid: Ideally, there’d be a [CODE], which uses a thread pool and all.\nDavid: But I couldn’t find such a thing in the stdlib.\nClorinda: would a [CODE] be a sensible for-form?\nClorinda: it would have to dome something (maybe throw away...) the thread descriptors... that seems... not ideal\nDavid: I’m running this in DrRacket, so even throwing away the thread descriptors works, because the main thread sticks around anyway. But, to make [CODE] (or [CODE], as I called it) also work on the command-line, it’d [CODE] on thread descriptors. The whole [CODE] form would block. While I’m here wishing things would exist, [CODE] would have a thread pool to avoid starvation.\nClorinda: would [CODE] want to use [CODE] to update what should happen on exit, then? (I have no idea if that's a sensible suggestion, BTW -- we're way beyond my area of experience at this point, lol)\nDavid: I guess the whole [CODE] form could avoid blocking if it used [CODE]. But I wasn’t even this ambitious. I’d be happy if the [CODE] form itself blocked, but iterations ran in parallel.\nDavid: In fact, I’d say blocking the whole form would be even more useful. Because then I’d be easy to construct parallel pipelines with the necessary contention points. For example, if I have a directory full of PDFs I want to process,¹ I can sequence a bunch of [CODE] and it’d never try to process a file before it’s ready. ¹ Oh, look at that! A directory full of PDFs is exactly what I have here :slightly_smiling_face:\nChantelle: David a thread pool probably wouldn't do what you think it does most of the time\nChantelle: hey lexi didn't you write a [CODE] macro and stick it in some package?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 17,
        "duration_minutes": 257.97,
        "contains_question": true,
        "action_keywords": [
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Clorinda",
          "David"
        ]
      },
      "timeline": [
        {
          "user": "David",
          "timestamp": "2017-10-05T09:42:27.000222",
          "text": "Is there an easy way to background a shelled out process in Racket? Currently, I’m using `system`, but adding a `&amp;` to the end of the command does not behave the same as in Bash, Racket still blocks, waiting for completion."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T09:44:43.000026",
          "text": "`subprocess`?"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T09:47:47.000080",
          "text": "Hmmm, I was hoping you wouldn’t say that :stuck_out_tongue:\nI’m trying to avoid having to close ports and so forth."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T09:48:22.000343",
          "text": "there may be a better option -- I've just used subprocess before and it worked well"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T09:50:45.000504",
          "text": "(I may have used `process` -- can't remember...)"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T09:51:37.000304",
          "text": "My use case is I have a bunch of commands to run in a loop, and they’re all independent. Moreover, I don’t care about the outputs, I’m running them for their side-effects (creating files on the disk). I wrote a `for` loop which calls `system`, and it worked fine, but it was a waste of time waiting the things to go serially. Then I wrapped the thing in `(thread (λ () ___))`. It works, but I was looking for a more principled solution."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T09:52:20.000081",
          "text": "Of course, `subprocess` would work just as well, but then I’d have to juggle the many ports I don’t care about."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T09:52:52.000403",
          "text": "Ideally, there’d be a `for/parallel`, which uses a thread pool and all."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T09:53:19.000355",
          "text": "But I couldn’t find such a thing in the stdlib."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T09:53:54.000362",
          "text": "would a `for/thread` be a sensible for-form?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T09:54:55.000119",
          "text": "it would have to dome something (maybe throw away...) the thread descriptors... that seems... not ideal"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T09:58:33.000504",
          "text": "I’m running this in DrRacket, so even throwing away the thread descriptors works, because the main thread sticks around anyway. But, to make `for/thread` (or `for/parallel`, as I called it) also work on the command-line, it’d `map thread-wait` on thread descriptors. The whole `for` form would block. While I’m here wishing things would exist, `for/parallel` would have a thread pool to avoid starvation."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T10:01:35.000252",
          "text": "would `for/thread` want to use `exit-handler` to update what should happen on exit, then? (I have no idea if that's a sensible suggestion, BTW -- we're way beyond my area of experience at this point, lol)"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T10:03:58.000053",
          "text": "I guess the whole `for/thread` form could avoid blocking if it used `exit-handler`. But I wasn’t even this ambitious. I’d be happy if the `for` form itself blocked, but iterations ran in parallel."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T10:07:25.000131",
          "text": "In fact, I’d say blocking the whole form would be even more useful. Because then I’d be easy to construct parallel pipelines with the necessary contention points. For example, if I have a directory full of PDFs I want to process,¹ I can sequence a bunch of `for/parallel` and it’d never try to process a file before it’s ready.\n\n¹ Oh, look at that! A directory full of PDFs is exactly what I have here :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T13:45:19.000133",
          "text": "<@David> a thread pool probably wouldn't do what you think it does most of the time"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:00:25.000035",
          "text": "hey lexi didn't you write a `for/async` macro and stick it in some package?"
        }
      ]
    },
    {
      "conversation_id": "312",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: If you want, you can create a new custodian and use it when creating your processes, then call [CODE] to close any dangling ports all at once.\nKimbery: But, as Chantelle says, I don’t think a thread pool makes sense in Racket (since Racket threads are green threads that all run on the same OS thread).\nChantelle: Also the Racket process isn't the one doing the work in this case. Racket has no idea how many OS threads or how much memory the bash subprocesses are using and logically it shouldn't, so there isn't really a sensible way for Racket to properly manage the resources consumed by those subprocesses.\nChantelle: Racket's the client, not the server. Client load control is usually done via throttling / rate limiting.\nChantelle: so instead of \"run these tasks on X threads\", think of it as \"make no more than X requests per second\"\nKimbery: Right… which is why, if you truly want to run a bunch of subprocesses in parallel, Racket’s threads are good enough. They’ll create a bunch of subprocesses concurrently, and the subprocesses will actually run in parallel (being, well, separate processes).\nKimbery: You could just do [CODE] to run a bunch of [CODE] commands in parallel and wait for them all to finish.\nChantelle: a throttling package would be a useful thing to have\nKimbery: Err… no, [CODE] isn’t right, since that would wait for any _one_ to finish. You would want [CODE].\nKimbery: You could implement throttling pretty trivially with a single semaphore.\nKimbery: no\nChantelle: must be thinking of something else then\nDavid: I’m probably misunderstanding something about thread pools. My idea was that if I had to run 1000 processes, I might not want to run them all simultaneously, but only have, say, 100 active at a time. How would this go wrong? How is [CODE] different than [CODE]?\nKimbery: David It isn’t really, except that [CODE] discards the results.\nChantelle: David because each process could spawn any number of its own threads\nChantelle: you don't want to only have 100 processes active at one time, you want 100 OS threads active at one time\nChantelle: so limiting the processes may indirectly work, or it might not\nKimbery: If you wanted to throttle to [CODE] things running at a time, you could just create a semaphore with [CODE] and wrap each [CODE] call with [CODE].\nKimbery: [CODE_BLOCK]\nDavid: Oh, right. I had [CODE]. That was naïve :stuck_out_tongue: In any case, [CODE] is equivalent to [CODE] in my use case, as I understand from reading the documentation. Is this right?\nChantelle: yes, that's right\nKimbery: Yes, IIRC [CODE] and [CODE] do the same thing on threads.\nDavid: :+1: Thanks.\nDavid: I’m learning so much from this conversation. I just read about [CODE], it’s great!\nDavid: Alexis, you nailed it! That’s the implementation for the feature I wanted to find in the stdlib.\nKimbery: Personally, I think it’s small enough and easy enough to build out of existing, composable pieces that there doesn’t need to be a separate abstraction for it. But YMMV.\nDavid: I understand Chantelle’s point about OS threads, but, in my use case, it doesn’t matter.\nChantelle: in the stdlib I'd want something where doing each for loop iteration concurrently and throttling are separate concerns\nKimbery: Isn’t that what the semaphore and the use of [CODE] are? Separate concerns?\nChantelle: ugh [CODE] in [CODE] is not well named :/\nChantelle: no I mean\nChantelle: there's more ways to throttle than just \"x concurrent tasks\"\nDavid: How about a [CODE], with optional [CODE] argument?\nChantelle: [CODE] / [CODE] / [CODE] would be the names I'd want\nKimbery: David The thing here is that you aren’t making a pool of workers and distributing work over them. That isn’t really what you want from Racket’s threading model. Threads are cheap; feel free to make a million of them. Rather, you want to limit the number of processes you actually spawn at a time.\nKimbery: A “thread pool” generally means you have a pool of workers, which isn’t the case here.\nChantelle: yes, I wouldn't want any for forms to have any knowledge of pooling tasks or other kinds of resource control\nChantelle: there's too many different ways to do it\nKimbery: Chantelle, you’re great, but I remain unconvinced that you do not overengineer these things. :)\nChantelle: Kimbery maybe I'm just planning for a different future :p\nChantelle: I'm very much thinking with web servers in mind right now\nClorinda: from left field: would it be [CODE] (i.e. plural)?\nClorinda: XD\nChantelle: ¯\\_(ツ)_/¯\nDavid: My intent is: (1) given [CODE], I can make this run faster just by replacing [CODE] with [CODE]; and (2) this doesn’t freeze my DrRacket because it tried to spawn a thousand subprocesses. If threads are cheap, then something else is making DrRacket hang. Do you know what it could be?\nKimbery: I guess a [CODE] could be useful, but it really would just be a tiny abbreviation for wrapping the body of a use of [CODE] in [CODE]…\nChantelle: arguably, there's a lot of tiny abbreviations in the [CODE] forms\nKimbery: Everything is just [CODE] at the end of the day. :)\nKimbery: (…which in turn is just named [CODE], which is just recursion…)\nChantelle: a fold a day keeps the object oriented programmers away\nNelson: please don't call if [CODE] ... call it ~[CODE]~ (edit: maybe [CODE] ?) at least, or make a [CODE] package\nDavid: Moreover, consider the case (1) above. I don’t want to think about threads or thunks, I just want my typesetting tasks to go faster :slightly_smiling_face:\nChantelle: it's not parallel though\nKimbery: Nelson but it isn’t parallel\nNelson: [CODE]?\nClorinda: what's wrong with for/threads\nClorinda: out of curiosity\nChantelle: David you _have_ to think about threads and the difference between IO and CPU tasks to do this without getting weird unexpected results though\nNelson: because [CODE] means [CODE] is the accumulator; with [CODE] the threads aren't really the accumulator\nDavid: Hmm, this is similar in spirit to [CODE] in Bash. And I don’t think about IO or CPU when using that.\nKimbery: David I think Racket’s threading model is relatively simple compared to most languages, and I think it’s worth learning. So much of the benefits of FP are building big things out of small, composable things. I think big abstractions (looking at you, [CODE]) are usually only desirable when either incredibly common or too hard to build out of smaller pieces.\nKimbery: [CODE] in bash is basically [CODE] in Racket.\nChantelle: David in Bash nearly all tasks ever are IO tasks, so bash can provide a simpler model of parallelism without breaking too many unstated assumptions\nChantelle: a general-purpose form for Racket would not have that luxury\nClorinda: Nelson that is not strictly the case (regarding accumulators)\nKimbery: Nelson I wish that were the case, too, but that’s already sort of been broken in the stdlib.\nClorinda: there are lots in the standard lib that break that convention\nChantelle: part of the problem is what racket calls threads are green threads, which are completely and entirely different from OS threads, making \"thread\" a highly overloaded term\nKimbery: I really like Racket’s concurrency model. I wish the parallelism story were better, but I think the concurrency model is pretty easy to understand and work with, more so than most other languages I’ve used.\nChantelle: yeah racket concurrency is really pleasant to work with, and I can generally get a feel for how I would do complex things with it\nDavid: Oh, I find my [CODE] argument so good. It’s a shame no one else here is falling for it :stuck_out_tongue: Of course, your concerns make sense when writing serious programs. But I’m writing a script to typeset my Redex models. This is not rocket science :stuck_out_tongue:\nChantelle: true. I think a [CODE] form would be really great for something like Rash or one of those other \"racket-but-for-shell-script\" hashlangs\nChantelle: maybe even it should be the default in that sort of context\nKimbery: David I think I would agree with you if Racket threads ran in parallel, but they don’t. So using threads without understanding what they’re doing would likely be confusing, and making that too accessible might be misleading.\nKimbery: Having a parallel-map sort of feature is a great one. But Racket can’t really have that (barring futures, which I am convinced are not currently especially useful outside of extraordinarily specific scenarios).\nKimbery: Of course, Chez changes things.\nKimbery: If you had a [CODE], you would get confused people writing [CODE] complaining on the mailing list.\nChantelle: actually with real threads, _that_ would be faster but IO bound tasks would be slower\nDavid: I don’t understand Racket’s parallel/concurrency models. I don’t even understand why Racket threads don’t run in parallel.¹ But I added the [CODE] thing and it did make things go faster.² That’s more then I could’ve asked :slightly_smiling_face: ¹ Yes, I’ll read the documentation and learn about this, now that I’m curious. ² At the cost of making DrRacket hang for approximately 10 seconds.\nKimbery: Chantelle That’s essentially my point.\nChantelle: Kimbery oops I thought you meant in the context of real threads run on chez or something\nKimbery: No, I was talking a theoretical [CODE]-y thing using green threads.\nChantelle: gotcha\nDavid: DrRacket should show me a progress bar when working through the [CODE] :stuck_out_tongue:\nKimbery: David As for _why_ Racket threads don’t run in parallel, I think a large part of it is that Racket was not designed to be made parallel, and making it parallel turned out to be unreasonably hard. :)\nKimbery: There’s a talk mflatt gave a while back (at Mozilla, IIRC?) about some of the history around trying to make Racket parallel.\nDavid: It has some sort of Global Interpreter Lock (GIL)? I remember that from my days of Ruby…\nChantelle: David racket doesn't have a GIL\nKimbery: <[URL]\nKimbery: Chantelle racket might as well have a GIL\nDavid: :+1: I’ll watch this later, thanks.\nChantelle: Kimbery how so?\nKimbery: I’m being a little facetious, but I’m saying Racket’s current runtime is not really able to run in parallel, whether it has an actual GIL or not, so the result from the user’s POV is more or less identical\nKimbery: what I’m really saying is that responding to people who ask “does Racket have a GIL?” with “no” is technically correct, the best kind of correct\nKimbery: but what they’re _really_ asking is “can I run my Racket in parallel?”\nKimbery: and the answer is “not in the way you’re probably hoping for”\nChantelle: I think no parallelism with IO in terms of green threads is a _really_ different model than no parallelism with IO in terms of OS threads, and the latter is why a GIL is so painful - in the former a GIL isn't nearly as big an issue and users won't think of those two cases as the same thing\nKimbery: you can have the latter with a GIL\nChantelle: you have both with and without a GIL - what I mean is that it's only the latter where a GIL is a huge problem for almost all users. In the former, a GIL is a problem much less often to the point where most users, even those doing complex things, wouldn't need to care\nChantelle: hmmm, I think I said that wrong\nKimbery: I’m not sure I understand why the latter is made any more complicated by a GIL\nChantelle: y'know I'm not sure what my point was anymore\nKimbery: alright\nChantelle: I think some a scribble book about general concurrency and parallelism concepts and where Racket's model fits in would be a great thing to have in the docs\nDavid: Kimbery, Chantelle: Just got a chance to get back to this. Thanks a lot for the conversation. I certainly learned a lot from you :slightly_smiling_face:\nChantelle: :D",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 106,
        "duration_minutes": 145.93,
        "contains_question": true,
        "action_keywords": [
          "action",
          "agree",
          "build",
          "complete",
          "create",
          "finish",
          "implement",
          "must",
          "need to",
          "please",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Clorinda",
          "David",
          "Kimbery",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T13:48:38.000297",
          "text": "If you want, you can create a new custodian and use it when creating your processes, then call `custodian-shutdown-all` to close any dangling ports all at once."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T13:49:16.000729",
          "text": "But, as <@Chantelle> says, I don’t think a thread pool makes sense in Racket (since Racket threads are green threads that all run on the same OS thread)."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T13:53:29.000447",
          "text": "Also the Racket process isn't the one doing the work in this case. Racket has no idea how many OS threads or how much memory the bash subprocesses are using and logically it shouldn't, so there isn't really a sensible way for Racket to properly manage the resources consumed by those subprocesses."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T13:54:08.000369",
          "text": "Racket's the client, not the server. Client load control is usually done via throttling / rate limiting."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T13:54:48.000024",
          "text": "so instead of \"run these tasks on X threads\", think of it as \"make no more than X requests per second\""
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T13:57:24.000275",
          "text": "Right… which is why, if you truly want to run a bunch of subprocesses in parallel, Racket’s threads are good enough. They’ll create a bunch of subprocesses concurrently, and the subprocesses will actually run in parallel (being, well, separate processes)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T13:59:05.000273",
          "text": "You could just do `(apply sync (for/list ([i (in-range 10)]) (thread (lambda () (system \"blah\")))))` to run a bunch of `blah` commands in parallel and wait for them all to finish."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T13:59:29.000142",
          "text": "a throttling package would be a useful thing to have"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T13:59:45.000479",
          "text": "Err… no, `(apply sync ....)` isn’t right, since that would wait for any _one_ to finish. You would want `(for-each sync ....)`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:00:24.000160",
          "text": "You could implement throttling pretty trivially with a single semaphore."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:00:31.000141",
          "text": "no"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:00:47.000062",
          "text": "must be thinking of something else then"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:01:24.000477",
          "text": "I’m probably misunderstanding something about thread pools. My idea was that if I had to run 1000 processes, I might not want to run them all simultaneously, but only have, say, 100 active at a time. How would this go wrong?\n\nHow is `(for-each sync ___)` different than `(map thread-wait ___)`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:01:55.000588",
          "text": "<@David> It isn’t really, except that `for-each` discards the results."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:02:04.000065",
          "text": "<@David> because each process could spawn any number of its own threads"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:02:18.000359",
          "text": "you don't want to only have 100 processes active at one time, you want 100 OS threads active at one time"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:02:46.000116",
          "text": "so limiting the processes may indirectly work, or it might not"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:02:55.000458",
          "text": "If you wanted to throttle to `n` things running at a time, you could just create a semaphore with `(make-semaphore n)` and wrap each `system` call with `call-with-semaphore`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:06:04.000060",
          "text": "```\n(let ([s (make-semaphore 5)])\n  (for-each thread-wait\n            (for/list ([i (in-range 10)])\n              (thread (thunk (call-with-semaphore\n                              s (thunk (system (~a \"sleep 1 &amp;&amp; echo \" i)))))))))\n```"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:06:48.000238",
          "text": "Oh, right. I had `(void (map ___))`. That was naïve :stuck_out_tongue:\n\nIn any case, `sync` is equivalent to `thread-wait` in my use case, as I understand from reading the documentation. Is this right?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:06:55.000452",
          "text": "yes, that's right"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:07:03.000064",
          "text": "Yes, IIRC `sync` and `thread-wait` do the same thing on threads."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:07:08.000601",
          "text": ":+1: Thanks."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:08:28.000107",
          "text": "I’m learning so much from this conversation. I just read about `thunk`, it’s great!"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:10:01.000267",
          "text": "Alexis, you nailed it! That’s the implementation for the feature I wanted to find in the stdlib."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:10:45.000116",
          "text": "Personally, I think it’s small enough and easy enough to build out of existing, composable pieces that there doesn’t need to be a separate abstraction for it. But YMMV."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:10:49.000320",
          "text": "I understand <@Chantelle>’s point about OS threads, but, in my use case, it doesn’t matter."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:11:00.000321",
          "text": "in the stdlib I'd want something where doing each for loop iteration concurrently and throttling are separate concerns"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:11:33.000482",
          "text": "Isn’t that what the semaphore and the use of `thread` are? Separate concerns?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:11:43.000644",
          "text": "ugh `for/async` in `racket/future` is not well named :/"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:11:47.000266",
          "text": "no I mean"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:12:01.000290",
          "text": "there's more ways to throttle than just \"x concurrent tasks\""
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:12:04.000393",
          "text": "How about a `for/parallel`, with optional `#:pool-size` argument?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:12:47.000580",
          "text": "`for/thread` / `for/future` / `for/place` would be the names I'd want"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:13:07.000302",
          "text": "<@David> The thing here is that you aren’t making a pool of workers and distributing work over them. That isn’t really what you want from Racket’s threading model. Threads are cheap; feel free to make a million of them. Rather, you want to limit the number of processes you actually spawn at a time."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:13:35.000017",
          "text": "A “thread pool” generally means you have a pool of workers, which isn’t the case here."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:13:47.000375",
          "text": "yes, I wouldn't want any for forms to have any knowledge of pooling tasks or other kinds of resource control"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:13:53.000513",
          "text": "there's too many different ways to do it"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:14:20.000013",
          "text": "<@Chantelle>, you’re great, but I remain unconvinced that you do not overengineer these things. :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:14:40.000407",
          "text": "<@Kimbery> maybe I'm just planning for a different future :p"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:15:29.000131",
          "text": "I'm very much thinking with web servers in mind right now"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T14:15:41.000106",
          "text": "from left field: would it be `for/threads` (i.e. plural)?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T14:16:00.000631",
          "text": "XD"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:16:07.000124",
          "text": "¯\\_(ツ)_/¯"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:16:15.000408",
          "text": "My intent is: (1) given `(for ___ (system ___))`, I can make this run faster just by replacing `for` with `for/&lt;your-favorite-name-here&gt;`; and (2) this doesn’t freeze my DrRacket because it tried to spawn a thousand subprocesses. If threads are cheap, then something else is making DrRacket hang. Do you know what it could be?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:16:38.000436",
          "text": "I guess a `for/thread(s)` could be useful, but it really would just be a tiny abbreviation for wrapping the body of a use of `for/list` in `(thread (thunk ....))`…"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:17:06.000659",
          "text": "arguably, there's a lot of tiny abbreviations in the `for/*` forms"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:17:28.000267",
          "text": "Everything is just `for/fold` at the end of the day. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:17:41.000306",
          "text": "(…which in turn is just named `let`, which is just recursion…)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:17:44.000171",
          "text": "a fold a day keeps the object oriented programmers away"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-05T14:17:47.000083",
          "text": "please don't call if `for/threads` ... call it ~`parallel-for`~ (edit: maybe `thread-comprehension` ?) at least, or make a `map-reduce` package"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:17:58.000224",
          "text": "Moreover, consider the case (1) above. I don’t want to think about threads or thunks, I just want my typesetting tasks to go faster :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:17:58.000475",
          "text": "it's not parallel though"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:18:01.000339",
          "text": "<@Nelson> but it isn’t parallel"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-05T14:18:16.000351",
          "text": "`async-for`?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T14:18:20.000475",
          "text": "what's wrong with for/threads"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T14:18:29.000495",
          "text": "out of curiosity"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:18:36.000677",
          "text": "<@David> you _have_ to think about threads and the difference between IO and CPU tasks to do this without getting weird unexpected results though"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-05T14:19:36.000726",
          "text": "because `for/X` means `X` is the accumulator; with `for/threads` the threads aren't really the accumulator"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:19:40.000542",
          "text": "Hmm, this is similar in spirit to `&amp;` in Bash. And I don’t think about IO or CPU when using that."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:19:56.000382",
          "text": "<@David> I think Racket’s threading model is relatively simple compared to most languages, and I think it’s worth learning. So much of the benefits of FP are building big things out of small, composable things. I think big abstractions (looking at you, `LOOP`) are usually only desirable when either incredibly common or too hard to build out of smaller pieces."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:20:11.000254",
          "text": "`&amp;` in bash is basically `thread` in Racket."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:20:17.000254",
          "text": "<@David> in Bash nearly all tasks ever are IO tasks, so bash can provide a simpler model of parallelism without breaking too many unstated assumptions"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:20:33.000471",
          "text": "a general-purpose form for Racket would not have that luxury"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T14:20:44.000016",
          "text": "<@Nelson> that is not strictly the case (regarding accumulators)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:21:02.000051",
          "text": "<@Nelson> I wish that were the case, too, but that’s already sort of been broken in the stdlib."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-05T14:21:06.000752",
          "text": "there are lots in the standard lib that break that convention"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:21:34.000283",
          "text": "part of the problem is what racket calls threads are green threads, which are completely and entirely different from OS threads, making \"thread\" a highly overloaded term"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:23:25.000626",
          "text": "I really like Racket’s concurrency model. I wish the parallelism story were better, but I think the concurrency model is pretty easy to understand and work with, more so than most other languages I’ve used."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:24:00.000460",
          "text": "yeah racket concurrency is really pleasant to work with, and I can generally get a feel for how I would do complex things with it"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:24:57.000495",
          "text": "Oh, I find my `for → for/&lt;make-this-faster&gt;` argument so good. It’s a shame no one else here is falling for it :stuck_out_tongue:\n\nOf course, your concerns make sense when writing serious programs. But I’m writing a script to typeset my Redex models. This is not rocket science :stuck_out_tongue:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:25:35.000274",
          "text": "true. I think a `for/&lt;make-this-faster&gt;` form would be really great for something like Rash or one of those other \"racket-but-for-shell-script\" hashlangs"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:25:51.000422",
          "text": "maybe even it should be the default in that sort of context"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:25:55.000190",
          "text": "<@David> I think I would agree with you if Racket threads ran in parallel, but they don’t. So using threads without understanding what they’re doing would likely be confusing, and making that too accessible might be misleading."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:26:52.000272",
          "text": "Having a parallel-map sort of feature is a great one. But Racket can’t really have that (barring futures, which I am convinced are not currently especially useful outside of extraordinarily specific scenarios)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:27:05.000423",
          "text": "Of course, Chez changes things."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:28:40.000198",
          "text": "If you had a `for/make-this-faster`, you would get confused people writing `(for/make-this-faster ([i (in-range 100)]) (some-cpu-bound-racket-computation!))` complaining on the mailing list."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:29:00.000451",
          "text": "actually with real threads, _that_ would be faster but IO bound tasks would be slower"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:29:03.000014",
          "text": "I don’t understand Racket’s parallel/concurrency models. I don’t even understand why Racket threads don’t run in parallel.¹ But I added the `(for-each thread-wait (for/list (thread (thunk ___)))))` thing and it did make things go faster.² That’s more then I could’ve asked :slightly_smiling_face:\n\n¹ Yes, I’ll read the documentation and learn about this, now that I’m curious.\n² At the cost of making DrRacket hang for approximately 10 seconds."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:29:14.000758",
          "text": "<@Chantelle> That’s essentially my point."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:29:32.000164",
          "text": "<@Kimbery> oops I thought you meant in the context of real threads run on chez or something"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:29:58.000191",
          "text": "No, I was talking a theoretical `for/async`-y thing using green threads."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:30:06.000751",
          "text": "gotcha"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:32:01.000001",
          "text": "DrRacket should show me a progress bar when working through the `for/make-this-faster` :stuck_out_tongue:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:32:02.000560",
          "text": "<@David> As for _why_ Racket threads don’t run in parallel, I think a large part of it is that Racket was not designed to be made parallel, and making it parallel turned out to be unreasonably hard. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:32:37.000329",
          "text": "There’s a talk mflatt gave a while back (at Mozilla, IIRC?) about some of the history around trying to make Racket parallel."
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:32:44.000061",
          "text": "It has some sort of Global Interpreter Lock (GIL)? I remember that from my days of Ruby…"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:33:03.000170",
          "text": "<@David> racket doesn't have a GIL"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:33:12.000435",
          "text": "<https://air.mozilla.org/incremental-parallelization-of-dynamic-languages/>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:33:42.000518",
          "text": "<@Chantelle> racket might as well have a GIL"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T14:33:59.000382",
          "text": ":+1: I’ll watch this later, thanks."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:34:11.000323",
          "text": "<@Kimbery> how so?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:35:05.000118",
          "text": "I’m being a little facetious, but I’m saying Racket’s current runtime is not really able to run in parallel, whether it has an actual GIL or not, so the result from the user’s POV is more or less identical"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:35:46.000194",
          "text": "what I’m really saying is that responding to people who ask “does Racket have a GIL?” with “no” is technically correct, the best kind of correct"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:36:04.000122",
          "text": "but what they’re _really_ asking is “can I run my Racket in parallel?”"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:36:20.000551",
          "text": "and the answer is “not in the way you’re probably hoping for”"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:36:43.000267",
          "text": "I think no parallelism with IO in terms of green threads is a _really_ different model than no parallelism with IO in terms of OS threads, and the latter is why a GIL is so painful - in the former a GIL isn't nearly as big an issue and users won't think of those two cases as the same thing"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:37:28.000102",
          "text": "you can have the latter with a GIL"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:39:35.000593",
          "text": "you have both with and without a GIL - what I mean is that it's only the latter where a GIL is a huge problem for almost all users. In the former, a GIL is a problem much less often to the point where most users, even those doing complex things, wouldn't need to care"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:41:37.000157",
          "text": "hmmm, I think I said that wrong"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:41:41.000355",
          "text": "I’m not sure I understand why the latter is made any more complicated by a GIL"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:42:25.000445",
          "text": "y'know I'm not sure what my point was anymore"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T14:43:13.000592",
          "text": "alright"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T14:45:08.000577",
          "text": "I think some a scribble book about general concurrency and parallelism concepts and where Racket's model fits in would be a great thing to have in the docs"
        },
        {
          "user": "David",
          "timestamp": "2017-10-05T16:14:10.000202",
          "text": "<@Kimbery>, <@Chantelle>: Just got a chance to get back to this. Thanks a lot for the conversation. I certainly learned a lot from you :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-05T16:14:34.000084",
          "text": ":D"
        }
      ]
    },
    {
      "conversation_id": "313",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ezequiel: (require ffi/winapi) (win64? ) What argument is (win64?) wanting? I would figure it was (= (system-type 'word) 64)\nMarlin: Ezequiel in the docs, it looks like [CODE] isn't a procedure: <[URL]\nEzequiel: Marlin I understand its not a procedure but I don't understand (win64? )'s arguement it is looking for.\nKimbery: Ezequiel what Marlin is saying is that [CODE] is not a function, so it does not accept any argument. it is a value. [CODE] is either [CODE] or [CODE]. I don’t think your question makes very much sense.\nEzequiel: Kimbery Well I should say I expected (win64?) to return #t or #f. I am answer from the point of stupid. How are you suppose to use (win64?)\nKimbery: don’t put any parentheses around it. just write [CODE].\nKimbery: [CODE_BLOCK]\nEzequiel: I was correct I was from the point of stupid :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 138.63,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Ezequiel",
          "Kimbery",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-05T15:24:42.000104",
          "text": "(require ffi/winapi) (win64? ) What argument is (win64?) wanting? I would figure it was  (= (system-type 'word) 64)"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-05T15:53:47.000237",
          "text": "<@Ezequiel> in the docs, it looks like `win64?` isn't a procedure: <http://docs.racket-lang.org/foreign/winapi.html?q=win64%3F#%28def._%28%28lib._ffi%2Fwinapi..rkt%29._win64~3f%29%29>"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-05T17:36:29.000474",
          "text": "<@Marlin> I understand its not a procedure but I don't understand (win64? )'s arguement it is looking for."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T17:40:23.000255",
          "text": "<@Ezequiel> what <@Marlin> is saying is that `win64?` is not a function, so it does not accept any argument. it is a value. `win64?` is either `#t` or `#f`. I don’t think your question makes very much sense."
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-05T17:42:20.000368",
          "text": "<@Kimbery> Well I should say I expected (win64?) to return #t or #f. I am answer from the point of stupid. How are you suppose to use (win64?)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T17:42:36.000336",
          "text": "don’t put any parentheses around it. just write `win64?`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-05T17:43:02.000213",
          "text": "```\n&gt; win64?\n#f\n```"
        },
        {
          "user": "Ezequiel",
          "timestamp": "2017-10-05T17:43:20.000151",
          "text": "I was correct I was from the point of stupid :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "314",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: hi folks... maybe especially Eun -- what are the lunch options near the venue on Saturday?\nGeorgeanna: Ka walk west to University Ave (just called “the ave” if you ask for directions) and take your pick… there is a ton. Probably stuff on campus too, but it won’t be half as good.\nGeorgeanna: what do you like?\nKa: Georgeanna ah. thanks! I wasn't sure if there was a recommended campus spot, or if people would just self-organize and find something.\nKa: I'm vegan, so just trying to plan ahead.\nGeorgeanna: there’s many options for you… go north on the ave for explicitly vegan options. Pizza∏ and others nearby…\nNelson: there's at least 2 other vegans attending\nKa: Pizzaπ isn't as good as it used to be.\nKa: and is fairly far from the venue, no?\nGeorgeanna: it’s a short walk\nKa: maps say 22 minutes from Mary Gates Hall.\nKa: (doable, sure)\nGeorgeanna: there’s a korean place closer to our venue that I love… don’t know the name, but it’s about 42nd just off the ave\nKa: Georgeanna Nelson thanks for the info. :stuck_out_tongue:\nGeorgeanna: Araya’s Place is also popular w/ my vegan friends\nGeorgeanna: and closer\nKa: I guess if I play my cards right, I might even be able to go to Full Tilt for ice cream.\nKa: Araya's is good food.\nEun: apg: Food will be provided, including vegan options.\nKa: Oh! Even better! Thanks, Eun !",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 20,
        "duration_minutes": 222.23,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Georgeanna",
          "Ka",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:07:51.000163",
          "text": "hi folks... maybe especially <@Eun> -- what are the lunch options near the venue on Saturday?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-05T19:09:29.000254",
          "text": "<@Ka> walk west to University Ave (just called “the ave” if you ask for directions) and take your pick… there is a ton. Probably stuff on campus too, but it won’t be half as good."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-05T19:09:51.000301",
          "text": "what do you like?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:12:53.000144",
          "text": "<@Georgeanna> ah. thanks! I wasn't sure if there was a recommended campus spot, or if people would just self-organize and find something."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:13:03.000220",
          "text": "I'm vegan, so just trying to plan ahead."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-05T19:14:18.000092",
          "text": "there’s many options for you… go north on the ave for explicitly vegan options. Pizza∏ and others nearby…"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-05T19:14:23.000240",
          "text": "there's at least 2 other vegans attending"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:14:43.000281",
          "text": "Pizzaπ isn't as good as it used to be."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:14:55.000155",
          "text": "and is fairly far from the venue, no?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-05T19:15:25.000269",
          "text": "it’s a short walk"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:15:49.000328",
          "text": "maps say 22 minutes from Mary Gates Hall."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:16:05.000001",
          "text": "(doable, sure)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-05T19:16:07.000166",
          "text": "there’s a korean place closer to our venue that I love… don’t know the name, but it’s about 42nd just off the ave"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:16:46.000141",
          "text": "<@Georgeanna> <@Nelson> thanks for the info. :stuck_out_tongue:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-05T19:17:34.000059",
          "text": "Araya’s Place is also popular w/ my vegan friends"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-05T19:17:37.000088",
          "text": "and closer"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:17:40.000279",
          "text": "I guess if I play my cards right, I might even be able to go to Full Tilt for ice cream."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T19:17:50.000067",
          "text": "Araya's is good food."
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-05T20:50:16.000137",
          "text": "apg: Food will be provided, including vegan options."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-05T22:50:05.000047",
          "text": "Oh! Even better! Thanks, <@Eun> !"
        }
      ]
    },
    {
      "conversation_id": "315",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Since there doesn't appear to be an organized thing the night before this year, do any Racketeers going to RacketCon want to get dinner this evening?\nEun: Tana: The most general solution would be to wrap the relevant code with [CODE]. But depending on the specific code, you may be able to naturally get Real as a return type by tightening the arguments to whatever operations you're using.\nEun: Kimbery: Sure! Should be getting in in time for dinner. Currently waiting at O'Hare. :)\nLatarsha: Kimbery I think what Eun means to say is that he's hoping the gods smile on him and that he leaves o'hare before tuesday :slightly_smiling_face:\nEun: Well, at least the food's better here than near the office. :P\nAugustine: Eun that's not saying very much\nEun: True.\nEun: Eh. I gotta admit that it's pretty convenient to have direct flights everywhere.\nKimbery: Eun Latarsha I'm just as bad; I'm currently waiting in LAX :)\nLatarsha: probably more comfortably than this exit row\nKimbery: at least it's closer to Seattle than to St. Louis",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 11,
        "duration_minutes": 48.13,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Augustine",
          "Eun",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T13:17:42.000001",
          "text": "Since there doesn't appear to be an organized thing the night before this year, do any Racketeers going to RacketCon want to get dinner this evening?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T13:38:09.000435",
          "text": "<@Tana>: The most general solution would be to wrap the relevant code with `(assert x real?)`. But depending on the specific code, you may be able to naturally get Real as a return type by tightening the arguments to whatever operations you're using."
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T13:38:42.000406",
          "text": "<@Kimbery>: Sure! Should be getting in in time for dinner. Currently waiting at O'Hare. :)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-06T13:42:04.000097",
          "text": "<@Kimbery> I think what <@Eun> means to say is that he's hoping the gods smile on him and that he leaves o'hare before tuesday :slightly_smiling_face:"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T13:42:43.000313",
          "text": "Well, at least the food's better here than near the office. :P"
        },
        {
          "user": "Augustine",
          "timestamp": "2017-10-06T13:43:32.000287",
          "text": "<@Eun> that's not saying very much"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T13:43:55.000138",
          "text": "True."
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T13:53:35.000400",
          "text": "Eh. I gotta admit that it's pretty convenient to have direct flights everywhere."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T13:57:31.000125",
          "text": "<@Eun> <@Latarsha> I'm just as bad; I'm currently waiting in LAX :)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-06T13:57:56.000540",
          "text": "probably more comfortably than this exit row"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T14:05:50.000381",
          "text": "at least it's closer to Seattle than to St. Louis"
        }
      ]
    },
    {
      "conversation_id": "316",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Sorry, can't hear you all over the sound of my two hour long flight from SFO :)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-06T15:03:20.000003",
          "text": "Sorry, can't hear you all over the sound of my two hour long flight from SFO :)"
        }
      ]
    },
    {
      "conversation_id": "317",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: I’m having an off day… why does [CODE_BLOCK] not print the time portion? Looking at the code, it seems like it should\nGeorgeanna: I verified that [CODE] still has the time portion of the data… but nothing\nVincenzo: Pass [CODE] as the optional second argument\nKa: Am I crazy, or does the [CODE] option to slideshow not work anymore?\nGeorgeanna: derp. told you I was having an off day :slightly_smiling_face:\nGeorgeanna: I’m trying to follow some of the posts on lisp.sh and they refer to a lot of calls that aren’t part of racket and it is getting tedious… but I want to stick to plain racket for now\nGeorgeanna: thanks Vincenzo\nGeorgeanna: Kimbery I’ve got plans tonight. sorry. Lunch maybe?\nVincenzo: Ka I don't know; [CODE] seems to work for me\nKa: Vincenzo I've used it successfully in the past, and I thought it showed up on the preview window, but not happening now.\nVincenzo: It shows up on the main window for me, and not on the preview window\nKa: oh. where in the main window?\nVincenzo: (I didn't remember the [CODE] flag at all, but apparently I added it 4 years ago. And I never use the preview window.)\nVincenzo: In small text at the bottom left\nKa: oooh yes. I see it now. it's an actual \"clock\"\nKa: maybe I'm simply crazy. I could have sworn I've used a sort of timer on the preview window.\nKa: it was red.\nKa: but, likely I'm misremembering.\nKa: (*maybe* I used google present, and then thought I should add a timer to the preview window. That's probably the most likely scenario...)\nKa: anyway. thanks for sanity checking me Vincenzo!\nGeorgeanna: doco says that the default log level is [CODE] but I’m getting back [CODE] from [CODE]\nGeorgeanna: oh… this may be a racket-mode-ism… plain repl in terminal says [CODE]\nCorey: Georgeanna doc: <[URL]\nGeorgeanna: Corey yeah. even after reducing * from fatal to error I’m still not seeing anything. Not sure why\nCorey: Oh in a [CODE] buffer? I get: [CODE_BLOCK]\nCorey: (I might be misunderstanding the context what you're trying to do, or expecting)\nGeorgeanna: in my terminal: [CODE_BLOCK] in racket-mode-repl: [CODE_BLOCK] with: [CODE] in the config saved for current session (and I killed the repl after)\nGeorgeanna: then when I call [CODE] I get “blah” output in the terminal and not in racket-mode-repl\nCorey: Oh OK. Hmm. I'll take a look, but might not be able to until tmr\nGeorgeanna: … maybe I can SHOW you tomorrow? Are you going to be here?\nCorey: Alas no.\nGeorgeanna: boo!\nGeorgeanna: kk. well… hit me up here if you need any more infos. I’ve given up and yanked the error handler from the servlet for now\nCorey: Will do.\nGeorgeanna: thanks!\nCorey: btw speaking of loggers earlier this week I got stuff set up for a Racket log-receiver to also put things into AWS CloudWatch Logs for a project I'm working on.\nCorey: Georgeanna I can repro the problem you describe when I [CODE] and restart the REPL: Then [CODE] returns [CODE] as you report. Until I figure this out: As a work-around can you try going to the [CODE] buffer -- e.g. in a racket-mode buffer hit [CODE] to open it -- then press [CODE] and choose [CODE] and type [CODE]? IOW set [CODE] using the \"UI\". (That works for me).",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 37,
        "duration_minutes": 185.02,
        "contains_question": true,
        "action_keywords": [
          "review",
          "should",
          "will"
        ],
        "decision_keywords": [
          "works for me"
        ],
        "participants": [
          "Corey",
          "Georgeanna",
          "Ka",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T16:58:08.000009",
          "text": "I’m having an off day… why does\n```\n(date-display-format 'iso-8601)\n(date-&gt;string (seconds-&gt;date (current-seconds)))\n```\nnot print the time portion? Looking at the code, it seems like it should"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T16:58:55.000410",
          "text": "I verified that `(seconds-&gt;date (current-seconds))` still has the time portion of the data… but nothing"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-06T16:59:12.000424",
          "text": "Pass `#t` as the optional second argument"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T16:59:22.000457",
          "text": "Am I crazy, or does the `--clock` option to slideshow not work anymore?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T16:59:36.000194",
          "text": "derp. told you I was having an off day :slightly_smiling_face:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T17:00:16.000526",
          "text": "I’m trying to follow some of the posts on lisp.sh and they refer to a lot of calls that aren’t part of racket and it is getting tedious… but I want to stick to plain racket for now"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T17:04:05.000006",
          "text": "thanks <@Vincenzo>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T17:04:39.000285",
          "text": "<@Kimbery> I’ve got plans tonight. sorry. Lunch maybe?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-06T17:07:03.000386",
          "text": "<@Ka> I don't know; `--clock` seems to work for me"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:09:23.000254",
          "text": "<@Vincenzo> I've used it successfully in the past, and I thought it showed up on the preview window, but not happening now."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-06T17:09:51.000336",
          "text": "It shows up on the main window for me, and not on the preview window"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:10:00.000058",
          "text": "oh. where in the main window?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-06T17:10:19.000237",
          "text": "(I didn't remember the `--clock` flag at all, but apparently I added it 4 years ago. And I never use the preview window.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-06T17:10:23.000212",
          "text": "In small text at the bottom left"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:10:39.000116",
          "text": "oooh yes. I see it now. it's an actual \"clock\""
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:11:11.000117",
          "text": "maybe I'm simply crazy. I could have sworn I've used a sort of timer on the preview window."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:11:15.000314",
          "text": "it was red."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:11:28.000007",
          "text": "but, likely I'm misremembering."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:12:34.000225",
          "text": "(*maybe* I used google present, and then thought I should add a timer to the preview window. That's probably the most likely scenario...)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-06T17:12:48.000289",
          "text": "anyway. thanks for sanity checking me <@Vincenzo>!"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T17:30:22.000235",
          "text": "doco says that the default log level is `'error` but I’m getting back `'(#f #f)` from `(log-all-levels (current-logger))`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T17:30:59.000077",
          "text": "oh… this may be a racket-mode-ism… plain repl in terminal says `'error`"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:41:22.000014",
          "text": "<@Georgeanna> doc: <https://github.com/greghendershott/racket-mode/blob/master/Reference.md#racket-logger-config>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T19:42:21.000110",
          "text": "<@Corey> yeah. even after reducing * from fatal to error I’m still not seeing anything. Not sure why"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:44:01.000014",
          "text": "Oh in a `*Racket REPL*` buffer? I get:\n```\n&gt; (log-all-levels (current-logger))\n'(fatal\n  #f\n  debug\n  deals\n  warning\n  http\n  debug\n  aws\n  warning\n  cm-accomplice\n  info\n  GC\n  warning\n  module-prefetch\n  info\n  optimizer\n  error\n  racket/contract\n  info\n  sequence-specialization)\n```"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:44:56.000106",
          "text": "(I might be misunderstanding the context what you're trying to do, or expecting)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T19:45:32.000165",
          "text": "in my terminal:\n\n```\n&gt; (log-all-levels (current-logger))\n'(error #f)\n```\nin racket-mode-repl:\n```\nbserver.rkt﻿&gt; (log-all-levels (current-logger))\n'(#f #f)\n```\nwith: `(* . error)` in the config saved for current session (and I killed the repl after)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T19:46:03.000075",
          "text": "then when I call `(log-error \"blah\")` I get “blah” output in the terminal and not in racket-mode-repl"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:46:52.000189",
          "text": "Oh OK. Hmm. I'll take a look, but might not be able to until tmr"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T19:47:28.000042",
          "text": "… maybe I can SHOW you tomorrow? Are you going to be here?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:47:35.000013",
          "text": "Alas no."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T19:47:40.000125",
          "text": "boo!"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T19:48:12.000012",
          "text": "kk. well… hit me up here if you need any more infos. I’ve given up and yanked the error handler from the servlet for now"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:48:43.000172",
          "text": "Will do."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T19:48:53.000192",
          "text": "thanks!"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:49:47.000041",
          "text": "btw speaking of loggers earlier this week I got stuff set up for a Racket log-receiver to also put things into AWS CloudWatch Logs for a project I'm working on."
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T20:03:09.000166",
          "text": "<@Georgeanna> I can repro the problem you describe when I `(setq racket-logger-config ((* . error)))` and restart the REPL: Then `(log-all-levels (current-logger))` returns `'(#f #f)` as you report.\nUntil I figure this out: As a work-around can you try going to the `*Racket Logger*` buffer -- e.g. in a racket-mode buffer hit `C-c C-l` to open it -- then press `l` and choose `*` and type `error`?\nIOW set `racket-logger-config` using the \"UI\".\n(That works for me)."
        }
      ]
    },
    {
      "conversation_id": "318",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: not that I can figure out why… seems like it should work",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-06T17:34:08.000348",
          "text": "not that I can figure out why… seems like it should work"
        }
      ]
    },
    {
      "conversation_id": "319",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: so… I never ate lunch today, so if anyone else is in Seattle and interested, I would be very interested in getting some food :)\nKimbery: Eun Latarsha Chantelle ^ ?\nCorey: src: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 2.23,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T19:39:26.000044",
          "text": "so… I never ate lunch today, so if anyone else is in Seattle and interested, I would be very interested in getting some food :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T19:39:47.000015",
          "text": "<@Eun> <@Latarsha> <@Chantelle> ^ ?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-06T19:41:40.000150",
          "text": "src: <https://github.com/greghendershott/racket-mode/blob/master/racket-custom.el#L215-L245>"
        }
      ]
    },
    {
      "conversation_id": "320",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: lexi.lambda: Just got to the hotel, and definetly interested in dinner in the short term.\nEun: samth, Chantelle: ^\nKimbery: Eun shall I meet you in the lobby?\nEun: 5 minutes?\nKimbery: sounds great\nEun: (Oh, and FYI, I don't have slack on my phone.)\nKimbery: you should get slack on your phone ;)\nEun: It's intentional. :)\nKimbery: Vincent and I are at Thanh Vi on University Way if anyone is interested in joining us\nWillian: Kimbery we ( Augustine Patrice and I) will attempt to join! (Just getting off the train)\nChantelle: Kimbery Willian I only just got off the plane so unless your meal lasts three hours I don't think I'll make it :p\nKimbery: Chantelle we just got back from dinner; I think the Chicago folks may be turning in, but I’d be down to meet up and chat for a while :)\nChantelle: Kimbery I could say hi but I gotta head to bed early tonight\nKimbery: oh?\nChantelle: ya, didn't get enough sleep and otherwise I'll sleep through the morning and miss my own talk :p\nKimbery: hah, that’s a good reason. see ya tomorrow then.\nChantelle: kk!\nVincenzo: RacketCon wifi: UWNetID: event0531 Password: T3A7-F8U9-M7V6",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 18,
        "duration_minutes": 878.02,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Kimbery",
          "Vincenzo",
          "Willian"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-10-06T20:46:37.000046",
          "text": "lexi.lambda: Just got to the hotel, and definetly interested in dinner in the short term."
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T20:46:49.000102",
          "text": "@samth, <@Chantelle>: ^"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T20:47:03.000119",
          "text": "<@Eun> shall I meet you in the lobby?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T20:47:29.000011",
          "text": "5 minutes?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T20:47:41.000100",
          "text": "sounds great"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T20:47:52.000021",
          "text": "(Oh, and FYI, I don't have slack on my phone.)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T20:48:18.000019",
          "text": "you should get slack on your phone ;)"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-06T20:48:38.000121",
          "text": "It's intentional. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T21:20:23.000045",
          "text": "Vincent and I are at Thanh Vi on University Way if anyone is interested in joining us"
        },
        {
          "user": "Willian",
          "timestamp": "2017-10-06T21:26:29.000021",
          "text": "<@Kimbery> we ( <@Augustine>  <@Patrice> and I) will attempt to join! (Just getting off the train)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-06T22:03:29.000088",
          "text": "<@Kimbery> <@Willian> I only just got off the plane so unless your meal lasts three hours I don't think I'll make it :p"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T23:02:32.000035",
          "text": "<@Chantelle> we just got back from dinner; I think the Chicago folks may be turning in, but I’d be down to meet up and chat for a while :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-06T23:03:10.000040",
          "text": "<@Kimbery> I could say hi but I gotta head to bed early tonight"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T23:03:23.000032",
          "text": "oh?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-06T23:03:49.000063",
          "text": "ya, didn't get enough sleep and otherwise I'll sleep through the morning and miss my own talk :p"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-06T23:04:02.000113",
          "text": "hah, that’s a good reason. see ya tomorrow then."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-06T23:04:18.000075",
          "text": "kk!"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-07T11:24:38.000071",
          "text": "RacketCon wifi: UWNetID: event0531  Password: T3A7-F8U9-M7V6"
        }
      ]
    },
    {
      "conversation_id": "321",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Carson: Eun when and where can we expect a link to live stream from racketcon?\nEun: Carson: I don't know yet. Will keep you posted.\nEun: all: Streaming is up at: <[URL]\nEun: <!everyone>: Afternoon stream: <[URL]\nMarlin: Eun is tomorrow's town hall going to be streamed?\nEun: Marlin: Unfortunately not. Unless some brave soul volunteers to improvise something with their laptop.\nEun: leif, Willian: ^",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 7,
        "duration_minutes": 1012.6,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Carson",
          "Eun",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Carson",
          "timestamp": "2017-10-07T09:33:48.000019",
          "text": "<@Eun> when and where can we expect a link to live stream from racketcon?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-07T10:12:42.000089",
          "text": "<@Carson>: I don't know yet. Will keep you posted."
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-07T12:21:47.000025",
          "text": "@all: Streaming is up at: <https://www.youtube.com/watch?v=et0C4ijed04>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-07T17:01:02.000021",
          "text": "<!everyone>: Afternoon stream: <https://www.youtube.com/watch?v=WI8uA4KjQJk>"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-07T21:04:55.000009",
          "text": "<@Eun> is tomorrow's town hall going to be streamed?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-08T02:26:19.000004",
          "text": "<@Marlin>: Unfortunately not. Unless some brave soul volunteers to improvise something with their laptop."
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-08T02:26:24.000034",
          "text": "@leif, <@Willian>: ^"
        }
      ]
    },
    {
      "conversation_id": "322",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tana: :+1:\nHelga: pity I can’t watch most of the livestream… is there an ETA for when the videos will be available?\nMarlin: volume just cut out\nMarlin: and it's back\nRosalee: Marlin sorry, didn't see this in time. :(\nMarlin: No problem, Rosalee !\nChantelle: Thanks for an incredible RacketCon everyone :)",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 7,
        "duration_minutes": 1919.57,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Helga",
          "Marlin",
          "Rosalee",
          "Tana"
        ]
      },
      "timeline": [
        {
          "user": "Tana",
          "timestamp": "2017-10-07T17:01:25.000018",
          "text": ":+1:"
        },
        {
          "user": "Helga",
          "timestamp": "2017-10-07T18:26:18.000082",
          "text": "pity I can’t watch most of the livestream… is there an ETA for when the videos will be available?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-07T18:40:41.000044",
          "text": "volume just cut out"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-07T18:40:57.000013",
          "text": "and it's back"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-08T14:07:05.000045",
          "text": "<@Marlin> sorry, didn't see this in time. :("
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-08T14:16:05.000019",
          "text": "No problem, <@Rosalee> !"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T01:00:59.000062",
          "text": "Thanks for an incredible RacketCon everyone :)"
        }
      ]
    },
    {
      "conversation_id": "323",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Owner found already!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-08T12:07:22.000001",
          "text": "Owner found already!"
        }
      ]
    },
    {
      "conversation_id": "324",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Is there any news from the town hall discussion?\nLory: What are the other places where Racket people talk?\nCorey: AFAIK 1. Here on slack 2. [CODE] on freenode 3. Mailing list 4. Matthew's secret lair\nKimbery: Analisa [CODE_BLOCK]\nVincenzo: Corey For the town-hall meeting, it was status reports and discussion – no decisions. The Racket-on-Chez report was that DrRacket now sort of runs, but it will probably take another year for things to run well. The pkgs report (Jay) was about plans to merge the doc and main-package views. The Typed Racket report (Sam) was improved refinement types. The typesetting report (MB) was that a pure Racket solution to generating PDFs is on the way, such as direct Scribble-to-PDF without Latex. I think I've missed one or two, so I hope others fill in. After that, we had tutorials on how to contribute, as listed on the schedule. Finally, people broke up into groups and work. I had to leave mid-afternoon to catch my flight, but it looked to me like a lot of good discussion taking place around busy keyboards.\nKa: Pkgs/docs: does that mean it wouldn’t link out to <[URL] If so, would docs hosting on docs. go away?\nKa: (I’m sure this was answered, so apologies for even asking)\nLatarsha: Ka The idea is to continue hosting docs, as now, but have the front page of docs and/or pkgs be a general front-end to \"finding Racket code\" rather than just a documentation page or just a \"find a package\" page\nLatarsha: Exactly what that page would look like remains to be seen, but it might be something like a cross between the current <[URL] the package search bar, and the \"most common packages\" that you see on the NPM front page\nKa: Ohh!! Ok. Thats great!\nKa: Thanks for the details Latarsha",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 11,
        "duration_minutes": 1105.92,
        "contains_question": true,
        "action_keywords": [
          "discuss",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Ka",
          "Kimbery",
          "Latarsha",
          "Lory",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-10-08T16:47:57.000069",
          "text": "Is there any news from the town hall discussion?"
        },
        {
          "user": "Lory",
          "timestamp": "2017-10-08T16:49:24.000041",
          "text": "What are the other places where Racket people talk?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-08T16:50:49.000060",
          "text": "AFAIK\n1. Here on slack\n2. `#racket` on freenode\n3. Mailing list\n4. Matthew's secret lair"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-08T19:41:20.000071",
          "text": "<@Analisa> \n```\nwatch-exec -p . -- fish -c 'raco setup --check-pkg-deps --doc-index --pkgs hackett-lib hackett-demo hackett-test hackett-doc; and raco test -j 8 -p hackett-lib hackett-demo hackett-test'\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-09T10:45:19.000779",
          "text": "<@Corey> For the town-hall meeting, it was status reports and discussion – no decisions. The Racket-on-Chez report was that DrRacket now sort of runs, but it will probably take another year for things to run well. The pkgs report (Jay) was about plans to merge the doc and main-package views. The Typed Racket report (Sam) was improved refinement types. The typesetting report (MB) was that a pure Racket solution to generating PDFs is on the way, such as direct Scribble-to-PDF without Latex. I think I've missed one or two, so I hope others fill in.\nAfter that, we had tutorials on how to contribute, as listed on the schedule. Finally, people broke up into groups and work. I had to leave mid-afternoon to catch my flight, but it looked to me like a lot of good discussion taking place around busy keyboards."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T10:52:02.000733",
          "text": "Pkgs/docs: does that mean it wouldn’t link out to <http://docs.racket-lang.org|docs.racket-lang.org>? If so, would docs hosting on docs. go away?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T10:52:33.000464",
          "text": "(I’m sure this was answered, so apologies for even asking)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-09T10:53:37.000239",
          "text": "<@Ka> The idea is to continue hosting docs, as now, but have the front page of docs and/or pkgs be a general front-end to \"finding Racket code\" rather than just a documentation page or just a \"find a package\" page"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-09T10:56:26.000348",
          "text": "Exactly what that page would look like remains to be seen, but it might be something like a cross between the current <http://docs.r-l.org|docs.r-l.org>, the package search bar, and the \"most common packages\" that you see on the NPM front page"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T11:13:32.000201",
          "text": "Ohh!! Ok. Thats great! "
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T11:13:52.000221",
          "text": "Thanks for the details <@Latarsha> "
        }
      ]
    },
    {
      "conversation_id": "325",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Indeed! One of my favorites\nChantelle: Latarsha and you went and fixed typed rackunit for me too :p",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 0.42,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-09T01:29:12.000058",
          "text": "Indeed! One of my favorites"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T01:29:37.000037",
          "text": "<@Latarsha> and you went and fixed typed rackunit for me too :p"
        }
      ]
    },
    {
      "conversation_id": "326",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Analisa: It made a good first impression for me!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Analisa"
        ]
      },
      "timeline": [
        {
          "user": "Analisa",
          "timestamp": "2017-10-09T01:54:39.000025",
          "text": "It made a good first impression for me!"
        }
      ]
    },
    {
      "conversation_id": "327",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: the <#C088CK7J6|irc> channel is out of date again.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:30:20.000156",
          "text": "the <#C088CK7J6|irc> channel is out of date again."
        }
      ]
    },
    {
      "conversation_id": "328",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Isabelle: Hi, is there a racket function or library that's faster at splitting a string into a list of strings than string-split? (I'm processing a 2.5Mb text file, takes 2 seconds to read into a list of lines and takes 19 seconds to map string-split over those lines... it's even worse with my 150+Mb files)\nKa: Isabelle can you do it without reading the full list of lines first?\nIsabelle: Each line is independent except order matters\nKa: so, use something like [CODE] with [CODE]\nKa: and then split-string on the generated line\nKa: you'll at least save the 2 seconds.\nKa: (in-lines will lazily read during iteration instead of all up front)\nKa: the string-split then is the problem.\nIsabelle: The 2 seconds is trivial :slightly_smiling_face:\nKa: (but in the 150Mb case, it's longer than 2seconds I'm guessing?)\nIsabelle: Yeah but it's still less than 10\nKa: how big are the lines?\nIsabelle: Whereas the string splitting is still quite large\nIsabelle: They vary but on average 8 words\nKa: are you splitting with regexp? or just a string?\nIsabelle: I'm splitting with the default value to string-split\nIsabelle: (which matches ' ' but I don't know if that's done with a string or a regexp internall)\nMarlin: default is [CODE]\nMarlin: you can probably get better performance by reading and splitting bytes instead of strings\nKa: Isabelle I'm trying to get a big enough file to test if I suffer the same problem.\nKa: one second\nIsabelle: Cool :slightly_smiling_face: Sadly I have to leave the computer but I'll check back\nKa: so, i'm doing a 5M file (the bible from project gutenberg) in 2.235s of real time\nKa: 114567 lines of varying sizes\nKa: and that includes the printing of the result.\nKa: (and less than a second if i suppress output)\nKa: anyway, Isabelle I don't doubt that you're seeing this, but I'm guessing there's another explanation. Can you run <[URL] this with your file and see what you get?",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 27,
        "duration_minutes": 17.4,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Isabelle",
          "Ka",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:30:30.000490",
          "text": "Hi, is there a racket function or library that's faster at splitting a string into a list of strings than string-split? (I'm processing a 2.5Mb text file, takes 2 seconds to read into a list of lines and takes 19 seconds to map string-split over those lines... it's even worse with my 150+Mb files)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:31:23.000392",
          "text": "<@Isabelle> can you do it without reading the full list of lines first?"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:31:59.000056",
          "text": "Each line is independent except order matters"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:32:40.000297",
          "text": "so, use something like `for/list` with `in-lines`"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:32:55.000363",
          "text": "and then split-string on the generated line"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:33:08.000212",
          "text": "you'll at least save the 2 seconds."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:33:24.000206",
          "text": "(in-lines will lazily read during iteration instead of all up front)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:33:37.000099",
          "text": "the string-split then is the problem."
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:34:14.000293",
          "text": "The 2 seconds is trivial :slightly_smiling_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:34:24.000113",
          "text": "(but in the 150Mb case, it's longer than 2seconds I'm guessing?)"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:34:34.000263",
          "text": "Yeah but it's still less than 10"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:34:51.000176",
          "text": "how big are the lines?"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:34:51.000565",
          "text": "Whereas the string splitting is still quite large"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:35:22.000321",
          "text": "They vary but on average 8 words"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:36:00.000187",
          "text": "are you splitting with regexp? or just a string?"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:36:22.000403",
          "text": "I'm splitting with the default value to string-split"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:37:06.000395",
          "text": "(which matches ' ' but I don't know if that's done with a string or a regexp internall)"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T12:37:24.000365",
          "text": "default is `#px\"\\\\s+\"`"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T12:39:52.000342",
          "text": "you can probably get better performance by reading and splitting bytes instead of strings"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:40:22.000030",
          "text": "<@Isabelle> I'm trying to get a big enough file to test if I suffer the same problem."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:40:23.000194",
          "text": "one second"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T12:41:40.000190",
          "text": "Cool :slightly_smiling_face: Sadly I have to leave the computer but I'll check back"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:42:43.000174",
          "text": "so, i'm doing a 5M file (the bible from project gutenberg) in 2.235s of real time"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:42:57.000016",
          "text": "114567 lines of varying sizes"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:43:11.000198",
          "text": "and that includes the printing of the result."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:46:16.000310",
          "text": "(and less than a second if i suppress output)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T12:47:54.000588",
          "text": "anyway, <@Isabelle> I don't doubt that you're seeing this, but I'm guessing there's another explanation. Can you run <http://pasterack.org/pastes/55271> this with your file and see what you get?"
        }
      ]
    },
    {
      "conversation_id": "329",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Marlin: oh, I didn't break it up into lines first; not sure exactly what output you're looking for -- a list of lists of strings?\nIsabelle: Marlin Thanks for the example, sadly it turns out my text input is not utf-8 (was news to me, I thought it was)\nMarlin: you can use other encodings\nMarlin: there's a [CODE]\nMarlin: and if you need, say, WINDOWS-1252, you do that with [CODE], etc.\nKa: Isabelle could you maybe share the relevant part of your program?\nMarlin: Isabelle are you running in DrRacket?\nIsabelle: Well the relevant bit of program is now the bit Marlin shared, and yes I'm running in DrRacket as I want to explore the data after I process it\nKa: Isabelle ok.\nMarlin: Did you turn off debugging/profiling?\nMarlin: Because that imposes a heavy performance penalty.\nMarlin: The options are in Language -&gt; Choose Language, and you may need to \"show details\" if you haven't in the past.\nKa: hmm. maybe this is a hardware thing? Isabelle are you running this on a relatively recent machine? Or running in virtualization or something?\nKa: (even with debugging, Marlin, it still runs &lt; 3 seconds for me)\nMarlin: it could also be printing results, which is far more expensive than computing them\nKa: true. printing in drracket is extremely slow.\nMarlin: Ka I didn't actually try the dead-simple version first; I had just assumed it was slower. Turns out it's faster.\nKa: Marlin yay for doing the simple thing. :slightly_smiling_face:\nKa: I will say, one thing that I do happen to like about go is that they have equivalent packages that are very similar for functions to work on strings and []byte. Might be worth copying this if we can provide faster bytes-split for cases where that's needed.\nIsabelle: Marlin and Ka This is running on a this-year model macbook pro, so hardware shouldn't be much of an issue, and the only thing printing out during this phase is the time measurement (which means it is measuring time as well as working but doesn't print out any of the file contents), but I haven't changed any DrRacket settings other than to beef up the RAM to 4Gb (I'm processing the files one after another, so my memory footprint does get big by the second 150+Mb file) so I'll try that tomorrow. Still 20s -&gt; 6s helps me get to the more interesting exploration faster :slightly_smiling_face: So Thanks a bunch for the help\nKa: ooh! It's multiple files in a row?\nKa: ah. ok\nIsabelle: In that window, in another two files in a row. The initial reading time doesn't seem to lag for multiple files although memory builds up\nGeorgeanna: Isabelle [CODE] can help a lot… but hit Cmd-L, “Show Details” and switch from “Debugging” to “No debugging or profiling”. It makes a huge difference\nIsabelle: Oddly I just ran it without debugging and it was faster... there's a lot of GC time. Trying a fresh run of DrRacket\nIsabelle: I mean it was faster With debugging turned on\nGeorgeanna: maybe it has a compile artifact w/ the debugging and it needs to recompile for non? I don’t know how that side works\nKa: i'd imagine the run button basically reloads the entire code window into the repl, no?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 28,
        "duration_minutes": 220.53,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Isabelle",
          "Ka",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T13:09:51.000006",
          "text": "oh, I didn't break it up into lines first; not sure exactly what output you're looking for -- a list of lists of strings?"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T14:02:06.000350",
          "text": "<@Marlin> Thanks for the example, sadly it turns out my text input is not utf-8 (was news to me, I thought it was)"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:02:58.000184",
          "text": "you can use other encodings"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:03:15.000530",
          "text": "there's a `bytes-&gt;string/latin-1`"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:04:00.000445",
          "text": "and if you need, say, WINDOWS-1252, you do that with `bytes-open-converter`, etc."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T14:08:47.000401",
          "text": "<@Isabelle> could you maybe share the relevant part of your program?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:08:50.000157",
          "text": "<@Isabelle> are you running in DrRacket?"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T14:09:38.000123",
          "text": "Well the relevant bit of program is now the bit <@Marlin> shared, and yes I'm running in DrRacket as I want to explore the data after I process it"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T14:10:07.000170",
          "text": "<@Isabelle> ok."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:10:10.000048",
          "text": "Did you turn off debugging/profiling?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:10:21.000654",
          "text": "Because that imposes a heavy performance penalty."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:12:02.000033",
          "text": "The options are in Language -&gt; Choose Language, and you may need to \"show details\" if you haven't in the past."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T14:14:09.000101",
          "text": "hmm. maybe this is a hardware thing? <@Isabelle> are you running this on a relatively recent machine? Or running in virtualization or something?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T14:14:50.000242",
          "text": "(even with debugging, <@Marlin>, it still runs &lt; 3 seconds for me)"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T14:15:04.000331",
          "text": "it could also be printing results, which is far more expensive than computing them"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T14:16:14.000439",
          "text": "true. printing in drracket is extremely slow."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-09T15:14:30.000203",
          "text": "<@Ka> I didn't actually try the dead-simple version first; I had just assumed it was slower. Turns out it's faster."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T15:22:46.000361",
          "text": "<@Marlin> yay for doing the simple thing. :slightly_smiling_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T15:25:55.000373",
          "text": "I will say, one thing that I do happen to like about go is that they have equivalent packages that are very similar for functions to work on strings and []byte. Might be worth copying this if we can provide faster bytes-split for cases where that's needed."
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T16:31:13.000393",
          "text": "<@Marlin> and <@Ka> This is running on a this-year model macbook pro, so hardware shouldn't be much of an issue, and the only thing printing out during this phase is the time measurement (which means it is measuring time as well as working but doesn't print out any of the file contents), but I haven't changed any DrRacket settings other than to beef up the RAM to 4Gb (I'm processing the files one after another, so my memory footprint does get big by the second 150+Mb file) so I'll try that tomorrow. Still 20s -&gt; 6s helps me get to the more interesting exploration faster :slightly_smiling_face: So Thanks a bunch for the help"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T16:32:27.000166",
          "text": "ooh! It's multiple files in a row?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T16:33:16.000115",
          "text": "ah. ok"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T16:33:21.000263",
          "text": "In that window, in another two files in a row. The initial reading time doesn't seem to lag for multiple files although memory builds up"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-09T16:42:17.000400",
          "text": "<@Isabelle> `(time (void (do-the-thing))` can help a lot… but hit Cmd-L, “Show Details” and switch from “Debugging” to “No debugging or profiling”. It makes a huge difference"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T16:43:14.000322",
          "text": "Oddly I just ran it without debugging and it was faster... there's a lot of GC time. Trying a fresh run of DrRacket"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T16:46:54.000347",
          "text": "I mean it was faster With debugging turned on"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-09T16:49:39.000246",
          "text": "maybe it has a compile artifact w/ the debugging and it needs to recompile for non? I don’t know how that side works"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T16:50:23.000019",
          "text": "i'd imagine the run button basically reloads the entire code window into the repl, no?"
        }
      ]
    },
    {
      "conversation_id": "330",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Is the text% editor implemented in Racket or does it use native text boxes (with a lot of Racket code on top)?\nVincenzo: The [CODE] class along with snips, implements all drawing and manipulation at the level of [CODE], [CODE], and [CODE].\nVincenzo: So, no native text boxes.\nRosalee: Vincenzo Okay cool, that’s what I thought.\nRosalee: thanks. :slightly_smiling_face:\nIsabelle: Cut it to 6s on my 2.5Mb, still running the 150Mb",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 15.57,
        "contains_question": true,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Isabelle",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-09T13:52:40.000519",
          "text": "<@Vincenzo> Is the text% editor implemented in Racket or does it use native text boxes (with a lot of Racket code on top)?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-09T13:54:42.000193",
          "text": "The `text%` class along with snips, implements all drawing and manipulation at the level of `draw-text`, `on-char`, and `on-event`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-09T13:54:53.000054",
          "text": "So, no native text boxes."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-09T14:05:19.000090",
          "text": "<@Vincenzo> Okay cool, that’s what I thought."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-09T14:05:20.000570",
          "text": "thanks. :slightly_smiling_face:"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T14:08:14.000522",
          "text": "Cut it to 6s on my 2.5Mb, still running the 150Mb"
        }
      ]
    },
    {
      "conversation_id": "331",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: knew I'd forget something on the trip to RacketCon this year; I forgot to get a shirt!\nChantelle: Oops",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.37,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T15:10:56.000498",
          "text": "knew I'd forget something on the trip to RacketCon this year; I forgot to get a shirt!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T15:11:18.000471",
          "text": "Oops"
        }
      ]
    },
    {
      "conversation_id": "332",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Isabelle: Also printing in DrRacket is very slow and doesn't seem to be interruptible if the processing has finished (I accidentally let the file contents enter the interactions window early on, and it seemed the only action to take to stop it was to force quit DrRacket)\nIsabelle: Four files in a row, shortest to biggest",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.1,
        "contains_question": false,
        "action_keywords": [
          "action",
          "finish"
        ],
        "decision_keywords": [],
        "participants": [
          "Isabelle"
        ]
      },
      "timeline": [
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T16:32:39.000206",
          "text": "Also printing in DrRacket is very slow and doesn't seem to be interruptible if the processing has finished (I accidentally let the file contents enter the interactions window early on, and it seemed the only action to take to stop it was to force quit DrRacket)"
        },
        {
          "user": "Isabelle",
          "timestamp": "2017-10-09T16:32:45.000550",
          "text": "Four files in a row, shortest to biggest"
        }
      ]
    },
    {
      "conversation_id": "333",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: OK. I have a basic [CODE] working… but one thing that confuses me is what functions are available… if my main.rkt implementing my hashlang is [CODE] then things work fine… my lexer can use things like [CODE]… but if I make it use [CODE] then [CODE] isn’t available EVEN IF I put in a [CODE] inside my [CODE]. What am I not getting?\nGeorgeanna: [CODE_BLOCK] (so far…. I’d like to add more constructs)\nGeorgeanna: possible phase 3: [CODE_BLOCK]\nVincenzo: Georgeanna If your [CODE] introduces the [CODE], then the introduced bindings are not visible to references that are supplied to the macro. In other words, imports are hygienic the same as definitions. It's usually easiest to have the [CODE] reader to inject a [CODE] that has empty lexical context, so that it behaves as if it were present with the references.\nKimbery: To add to what Matthew said, [CODE] introduces bindings with the same lexical context as the piece of syntax for the module name itself.\nChantelle: I think it would be easier if you had your #lang lexer expand into (module anonymous lexer body ...)\nChantelle: That way whatever (require lexer) would export is what will be visible in a #lang lexer module\nChantelle: But I haven't done this in a while and my memory is fuzzy\nKa: aside: is there a reason modules can't be, actually *anonymous* ?\nKa: slideshow/simple creates a module [CODE] which seems silly\nChantelle: that part I'm fuzzy on\nKimbery: modules are not first-class, so they can’t be anonymous in that sense\nKa: that's explanation enough.\nKa: :slightly_smiling_face:\nChantelle: can a lang expand to multiple modules? Without submodules I mean\nKimbery: no\nKa: that'd be a limitation of read-syntax?\nChantelle: I wonder if there would be any reasonable use for it\nChantelle: can't think of anything that wouldn't be much more easily done with submodules\nKa: hmm. read-syntax could return #'(begin ... )\nKimbery: it’s not a limitation of the reader, no\nKimbery: there’s just the question of what it would _mean_ and what it would _do_.\nChantelle: ¯\\_(ツ)_/¯\nKa: i think the first question is: can the current implementation somehow be tricked into it\nKimbery: modules in racket are uniquely identified by a module path.\nKa: then the second is: is that a good idea or not?\nKa: it seems like it's a good idea to enforce 1 module. but does the current system do so?\nKa: (i assume yes, based on this discussion)\nKimbery: yes. it won’t work if you expand to something other than a [CODE] form.\nChantelle: I think the reason readers have to make a module whose name doesn't matter is related to backwards compatibility with [CODE] and the top level\nKa: but it *does* matter, no? it'd mean I couldn't technically have two of my slideshows be required by another file?\nKa: (or, another module)\nKa: assuming the things defined in that module are provided, of course?\nChantelle: The module name doesn't come up when you require it as a file\nChantelle: I'm not sure if the name is important if you load the file into the top level\nKa: \"After evaluation is triggered once, later requires do not re-evaluate the module body.\" -- <[URL]\nKa: presumably it uses the name-id to know to not reevaluate the body?\nKa: e.g. if I have foo.rkt -&gt; resulting in (module foo ...) and foo2.rkt -&gt; resulting in (module foo ...) --- will that work?\nChantelle: Yes because the path is part of the key used to id modules\nChantelle: File path, I mean\nKa: ah. ok\nChantelle: the module-path? and resolved-module-path? predicates are good places to go in the docs for more info\nKa: confirmed that this works via a quick experiment. :slightly_smiling_face:\nKa: (and also confirmed that slideshow simple slides can just be included in your #lang slideshow without issues, which is fun)\nKa: (well, required that is)\nChantelle: Sweeeet\nChantelle: I liked your talk a lot by the way\nKa: thanks!\nKa: i wish i was able to be there yesterday\nKa: :disappointed:\nKa: (sounded like a lot of fun was had by all)\nChantelle: Designing tools with the goal to make something you could use at the last minute to whip something up in an hour leads tools in interesting directions\nKa: ha!\nChantelle: Hopefully there's another office hours day next year :p it was great\nKa: if Eun and the con team send out a survey, I'm sure \"office hours next year\" will be part of the feedback.\nKa: I'm just worried about the 11th con. There's not an [CODE] in [CODE] -- how will that work?",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 56,
        "duration_minutes": 51.8,
        "contains_question": true,
        "action_keywords": [
          "create",
          "discuss",
          "implement",
          "requires",
          "todo",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Ka",
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-09T17:43:40.000108",
          "text": "OK. I have a basic `#lang lexer` working… but one thing that confuses me is what functions are available… if my main.rkt implementing my hashlang is `racket` then things work fine… my lexer can use things like `string-trim`… but if I make it use `racket/base` then `string-trim` isn’t available EVEN IF I put in a `(require racket/string)` inside my `#%module-begin`.\n\nWhat am I not getting?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-09T17:46:07.000052",
          "text": "```\n#lang oedipuslex\n\ndigits = (:+ numeric)\n\n(eof)                                                 : (return-without-srcloc eof)\n\"\\n\"                                                  : (token 'NEWLINE lexeme)\nwhitespace                                            : (token lexeme #:skip? #t)\n(:or \"print\" \"goto\" \"end\" \"+\" \":\" \";\")                : (token lexeme lexeme)\ndigits                                                : (token 'INTEGER (string-&gt;number lexeme))\n(:or (:seq (:? digits) \".\" digits) (:seq digits \".\")) : (token 'DECIMAL (string-&gt;number lexeme))\n(:or (from/to \"\\\"\" \"\\\"\") (from/to \"'\"  \"'\"))          : (token 'STRING (string-trim lexeme #px\".\"))\n```\n\n(so far…. I’d like to add more constructs)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-09T17:47:27.000215",
          "text": "possible phase 3:\n\n```\n;; TODO: phase 3: maybe?\ndigits = (:+ numeric)\n\n(eof)                                      : (return-without-srcloc eof)\n\"\\n\"                                       : (token 'NEWLINE lexeme)\nwhitespace                                 : (token lexeme #:skip? #t)\n\"rem\" ... \"\\n\"                             : (token 'REM lexeme)\n\"print\" | \"goto\" | \"end\" | \"+\" | \":\" | \";\" : (token lexeme lexeme)\ndigits                                     : (token 'INTEGER (string-&gt;number lexeme))\ndigits? \".\" digits | digits \".\"            : (token 'DECIMAL (string-&gt;number lexeme))\n \"\\\"\" .. \"\\\"\" | \"'\" .. \"'\"                 : (token 'STRING (string-trim lexeme #px\".\"))\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-09T18:13:25.000060",
          "text": "<@Georgeanna> If your `#%module-begin` introduces the `(require racket/string)`, then the introduced bindings are not visible to references that are supplied to the macro. In other words, imports are hygienic the same as definitions. It's usually easiest to have the `oedipuslex` reader to inject a `require` that has empty lexical context, so that it behaves as if it were present with the references."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-09T18:14:43.000175",
          "text": "To add to what Matthew said, `require` introduces bindings with the same lexical context as the piece of syntax for the module name itself."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:15:59.000248",
          "text": "I think it would be easier if you had your #lang lexer expand into (module anonymous lexer body ...)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:16:40.000297",
          "text": "That way whatever (require lexer) would export is what will be visible in a #lang lexer module"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:16:51.000171",
          "text": "But I haven't done this in a while and my memory is fuzzy"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:17:02.000367",
          "text": "aside: is there a reason modules can't be, actually *anonymous* ?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:17:16.000394",
          "text": "slideshow/simple creates a module `my-module` which seems silly"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:17:26.000399",
          "text": "that part I'm fuzzy on"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-09T18:17:31.000116",
          "text": "modules are not first-class, so they can’t be anonymous in that sense"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:17:59.000239",
          "text": "that's explanation enough."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:18:01.000001",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:18:05.000303",
          "text": "can a lang expand to multiple modules? Without submodules I mean"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-09T18:18:11.000202",
          "text": "no"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:19:12.000129",
          "text": "that'd be a limitation of read-syntax?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:19:32.000066",
          "text": "I wonder if there would be any reasonable use for it"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:20:00.000094",
          "text": "can't think of anything that wouldn't be much more easily done with submodules"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:20:21.000027",
          "text": "hmm. read-syntax could return #'(begin ... )"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-09T18:20:24.000097",
          "text": "it’s not a limitation of the reader, no"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-09T18:20:40.000081",
          "text": "there’s just the question of what it would _mean_ and what it would _do_."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:20:51.000017",
          "text": "¯\\_(ツ)_/¯"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:21:14.000071",
          "text": "i think the first question is: can the current implementation somehow be tricked into it"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-09T18:21:22.000171",
          "text": "modules in racket are uniquely identified by a module path."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:21:22.000185",
          "text": "then the second is: is that a good idea or not?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:21:42.000317",
          "text": "it seems like it's a good idea to enforce 1 module. but does the current system do so?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:21:57.000115",
          "text": "(i assume yes, based on this discussion)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-09T18:22:09.000135",
          "text": "yes. it won’t work if you expand to something other than a `module` form."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:22:15.000176",
          "text": "I think the reason readers have to make a module whose name doesn't matter is related to backwards compatibility with `load` and the top level"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:23:36.000329",
          "text": "but it *does* matter, no? it'd mean I couldn't technically have two of my slideshows be required by another file?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:23:44.000048",
          "text": "(or, another module)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:23:57.000094",
          "text": "assuming the things defined in that module are provided, of course?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:25:01.000021",
          "text": "The module name doesn't come up when you require it as a file"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:25:29.000066",
          "text": "I'm not sure if the name is important if you load the file into the top level"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:26:01.000104",
          "text": "\"After evaluation is triggered once, later requires do not re-evaluate the module body.\" -- <https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._module-syntax%29>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:26:14.000131",
          "text": "presumably it uses the name-id to know to not reevaluate the body?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:26:37.000176",
          "text": "e.g. if I have foo.rkt -&gt; resulting in (module foo ...) and foo2.rkt -&gt; resulting in (module foo ...) --- will that work?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:27:03.000345",
          "text": "Yes because the path is part of the key used to id modules"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:27:16.000136",
          "text": "File path, I mean"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:27:26.000007",
          "text": "ah. ok"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:28:58.000195",
          "text": "the module-path? and resolved-module-path? predicates are good places to go in the docs for more info"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:29:17.000331",
          "text": "confirmed that this works via a quick experiment. :slightly_smiling_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:30:01.000145",
          "text": "(and also confirmed that slideshow simple slides can just be included in your #lang slideshow without issues, which is fun)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:30:12.000186",
          "text": "(well, required that is)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:30:17.000011",
          "text": "Sweeeet"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:30:26.000017",
          "text": "I liked your talk a lot by the way"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:30:30.000155",
          "text": "thanks!"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:30:55.000103",
          "text": "i wish i was able to be there yesterday"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:30:56.000023",
          "text": ":disappointed:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:31:11.000100",
          "text": "(sounded like a lot of fun was had by all)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:32:09.000162",
          "text": "Designing tools with the goal to make something you could use at the last minute to whip something up in an hour leads tools in interesting directions"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:32:42.000121",
          "text": "ha!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:32:45.000117",
          "text": "Hopefully there's another office hours day next year :p it was great"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:33:59.000060",
          "text": "if <@Eun> and the con team send out a survey, I'm sure \"office hours next year\" will be part of the feedback."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-09T18:35:28.000317",
          "text": "I'm just worried about the 11th con. There's not an `eleventh` in `racket/list` -- how will that work?"
        }
      ]
    },
    {
      "conversation_id": "334",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: PRs welcome ;)\nLatarsha: Chantelle any thoughts on my rackunit PR?\nLashaunda: Chantelle You can have my tshirt if you want. I got a Large.\nChantelle: Latarsha yes but I have a ton of work stuff to catch up on so I might not get a chance to review it until the weekend\nChantelle: Lashaunda That's very kind, but I think I'll just check with vincent to see if there are any leftover shirts\nLashaunda: Chantelle Roger. Let me know if you still lack a tshirt later. You definitely earned yours.\nNelson: Racket t-shirts are also on <[URL]\nLatarsha: I saw Todd wearing one at RacketCon\nLatarsha: Vincenzo Tina Do you know where I can find the futures benchmarks from Swaine et al, OOPSLA 2010? /cc Gus\nLatarsha: Chantelle I just read your speaker bio from RacketCon, and I'm hoping that these are connected: \"figuring out how to stop software from breaking all the time. He also likes punching things.\"\nChantelle: Latarsha oh if only poor test coverage could be fixed by just punching my laptop\nChantelle: (it's actually in there because I like martial arts)\nEun: Chantelle: All the shirts were gone by the end of Sat. Sorry.\nLashaunda: Chantelle Happy also to buy you a tshirt, (require size)",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 14,
        "duration_minutes": 2559.75,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "review"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Lashaunda",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-09T18:39:25.000130",
          "text": "PRs welcome ;)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-10T09:22:09.000130",
          "text": "<@Chantelle> any thoughts on my rackunit PR?"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-10T12:17:56.000446",
          "text": "<@Chantelle> You can have my tshirt if you want.  I got a Large."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-10T15:19:09.000346",
          "text": "<@Latarsha> yes but I have a ton of work stuff to catch up on so I might not get a chance to review it until the weekend"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-10T15:19:48.000341",
          "text": "<@Lashaunda> That's very kind, but I think I'll just check with vincent to see if there are any leftover shirts"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-10T15:23:46.000204",
          "text": "<@Chantelle> Roger. Let me know if you still lack a tshirt later. You definitely earned yours."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-10T15:28:07.000133",
          "text": "Racket t-shirts are also on <http://devswag.com/|devswag.com/>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-10T15:31:28.000230",
          "text": "I saw Todd wearing one at RacketCon"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-10T15:39:52.000269",
          "text": "<@Vincenzo> <@Tina> Do you know where I can find the futures benchmarks from Swaine et al, OOPSLA 2010? /cc <@Gus>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-10T21:11:52.000108",
          "text": "<@Chantelle> I just read your speaker bio from RacketCon, and I'm hoping that these are connected: \"figuring out how to stop software from breaking all the time. He also likes punching things.\""
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-10T21:44:11.000075",
          "text": "<@Latarsha> oh if only poor test coverage could be fixed by just punching my laptop"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-10T21:44:37.000002",
          "text": "(it's actually in there because I like martial arts)"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-11T11:43:33.000131",
          "text": "<@Chantelle>: All the shirts were gone by the end of Sat. Sorry."
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-11T13:19:10.000334",
          "text": "<@Chantelle> Happy also to buy you a tshirt, (require size)"
        }
      ]
    },
    {
      "conversation_id": "335",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: Nelson Latarsha those shirts are immensely comfortable.\nKa: I'm wearing mine right now.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 1.13,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-10T18:42:58.000164",
          "text": "<@Nelson> <@Latarsha> those shirts are immensely comfortable."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-10T18:44:06.000325",
          "text": "I'm wearing mine right now."
        }
      ]
    },
    {
      "conversation_id": "336",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Analisa: What's the best/most idiomatic way to give an example where a function diverges in scribble?\nNelson: Analisa you can give [CODE] an evaluator with a time limit: <[URL]\nNelson: Does anyone here have Windows 10 creators update, and want to check if DrRacket can handle the \"God Mode\" folder? <[URL]\nChantelle: Sadye You asked about a data frame library at racketcon right? <[URL]\nChantelle: TIL tonyg has a package for sending and receiving raw Ethernet frames in Racket <[URL]\nTilda: Not quite sure why, but the name of that packet reminds me of this gem: <[URL]\nChantelle: Tilda you did read the README poem right? :p\nChantelle: because if not you're in for a fun surprise\nTilda: no, but I'm glad Tony and I thought along the same vein...\nRosalee: Possibly a different thing, as it does seem like this will make the callback last indefinitely: [CODE_BLOCK]\nRosalee: I kind of wonder if I’m doing something in atomic mode that is not allowed. Namely, these two functions which are in atomic mode: [CODE_BLOCK]\nVincenzo: Rosalee The callbacks look ok to run in atomic mode, but I'm unclear on the lifetime of the arguments pass to the callback installed by [CODE] – given that [CODE] keeps the arguments for use later and returns. Are those arguments things that live beyond the dynamic extent of the call to the callback (and they're eventually freed by whatever calls [CODE])?\nRosalee: Vincenzo Here it is: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 13,
        "duration_minutes": 2228.15,
        "contains_question": true,
        "action_keywords": [
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Analisa",
          "Chantelle",
          "Nelson",
          "Rosalee",
          "Tilda",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Analisa",
          "timestamp": "2017-10-11T01:11:42.000182",
          "text": "What's the best/most idiomatic way to give an example where a function diverges in scribble?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-11T11:08:12.000385",
          "text": "<@Analisa> you can give `examples` an evaluator with a time limit: <http://pasterack.org/pastes/66137>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-11T16:40:25.000008",
          "text": "Does anyone here have Windows 10 creators update, and want to check if DrRacket can handle the \"God Mode\" folder? <https://www.excelsiorjet.com/blog/support-stories/the-folder-of-god/>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-11T22:07:25.000056",
          "text": "<@Sadye> You asked about a data frame library at racketcon right? <https://github.com/alex-hhh/ActivityLog2/blob/master/doc/data-frame.md>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T13:30:31.000323",
          "text": "TIL tonyg has a package for sending and receiving raw Ethernet frames in Racket <https://github.com/tonyg/racket-packet-socket>"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-12T13:36:04.000182",
          "text": "Not quite sure why, but the name of that packet reminds me of this gem: <http://web.mit.edu/adorai/www/seuss-technical-writing.html>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T13:36:42.000306",
          "text": "<@Tilda> you did read the README poem right? :p"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T13:36:53.000242",
          "text": "because if not you're in for a fun surprise"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-10-12T13:37:07.000534",
          "text": "no, but I'm glad Tony and I thought along the same vein..."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T13:41:04.000154",
          "text": "Possibly a different thing, as it does seem like this will make the callback last indefinitely:\n```\n(define-libvid set-racket-log-callback\n  (_fun (_fun #:async-apply (λ (x) (let loop () (displayln \"NO\") (loop)) (x))\n              #:keep malloc-immobile-cell\n              _bytes _av-log-constant _int _bytes\n              -&gt; _void) -&gt; _void))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T13:42:03.000108",
          "text": "I kind of wonder if I’m doing something in atomic mode that is not allowed. Namely, these two functions which are in atomic mode:\n```\n(define (callback-proc name level len msg)\n  (define name* (or name #\"???\"))\n  (set! ffmpeg-log-list (cons (ffmpeg-msg name* level msg) ffmpeg-log-list)))\n\n(define (flush-ffmpeg-log-list!)\n  (call-as-atomic\n   (λ ()\n     (define ret ffmpeg-log-list)\n     (set! ffmpeg-log-list '())\n     (reverse ret))))\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-12T13:59:35.000686",
          "text": "<@Rosalee> The callbacks look ok to run in atomic mode, but I'm unclear on the lifetime of the arguments pass to the callback installed by `set-racket-log-callback` – given that `callback-proc` keeps the arguments for use later and returns. Are those arguments things that live beyond the dynamic extent of the call to the callback (and they're eventually freed by whatever calls `flush-ffmpeg-log-list!`)?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:19:51.000506",
          "text": "<@Vincenzo> Here it is:\n```\nvoid set_racket_log_callback(void (*callback)(RACKET_CALLBACK_TYPES)){\n  racket_log_callback = callback;\n}\n```"
        }
      ]
    },
    {
      "conversation_id": "337",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lashaunda: Nelson did not know about <[URL] thanks!\nLashaunda: (you saved me scribble time)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 1.6,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lashaunda"
        ]
      },
      "timeline": [
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-11T13:18:09.000397",
          "text": "<@Nelson> did not know about <http://pasterack.org|pasterack.org>, thanks!"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-11T13:19:45.000713",
          "text": "(you saved me scribble time)"
        }
      ]
    },
    {
      "conversation_id": "338",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Racket sees it as a plain directory, since it doesn't use that part of the shell32.dll API",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-11T17:38:24.000028",
          "text": "Racket sees it as a plain directory, since it doesn't use that part of the shell32.dll API"
        }
      ]
    },
    {
      "conversation_id": "339",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: Is there any way to use the optimization coach outside of DrRacket?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-10-11T20:13:14.000077",
          "text": "Is there any way to use the optimization coach outside of DrRacket?"
        }
      ]
    },
    {
      "conversation_id": "340",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo Welp, looks like I had the segfault solved, but its still there.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T13:40:17.000805",
          "text": "<@Vincenzo> Welp, looks like I had the segfault solved, but its still there."
        }
      ]
    },
    {
      "conversation_id": "341",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: Nancie: Yes. There's a (not very friendly) command-line interface: racket -l optimization-coach/report my-file.rkt\nNancie: Friendly or not, sounds like a good starting point for integration with other editors or CI tools\nEun: Ah, if that's the goal, then it may not be so bad. Its output is mostly machine readable.\nNancie: If you're willing to accept PRs for other output modes (like stdout) then that may be my next Racket experiment\nNancie: Oh wait, I totally misread that\nNancie: maybe that does print to stdout\nChantelle: at racketcon office hours there was mention of some work on getting racket to cooperate with some \"editor server\" protocol used by things like eclipse and visual studio, maybe the optimization coach could be part of that?\nChantelle: ah yes, found it: <[URL]\nEun: Nancie: PRs definitely welcome!\nEun: And I think it should indeed be printing to stdout.\nNancie: I'm thinking Emacs integration myself. Does anyone edit Racket with a tool that supports this protocol?\nEun: A [CODE] command would be nice (and I have half the plumbing for that sitting around), but that would need a more human-friendly output.\nChantelle: Nancie re emacs integration: would that be built on top of [CODE] or would it be something completely separate?\nNancie: I don't understand it well enough to say. [CODE] seems like a fine candidate, but maybe it would be more appropriate to integrate with Flycheck?\nNancie: I only just adopted full-time emacs a few weeks ago after using Jetbrains tools for many years\nChantelle: I don't use emacs at all so I know virtually nothing about its ecosystem\nCorey: wrt to emacs I'd suggest step 0 is simply make sure any command-line tool prints error-like messages in a standard way\nCorey: like [CODE]\nRosalee: Vincenzo That is correct.\nRosalee: Although, I should mention that at the moment, those objects never get freed.\nRosalee: They are (for the moment) a memory leak.\nRosalee: (I will fix that later, for now keeping them takes relatively little space, and helps with debugging things.)\nCorey: Then you can use various emacs things to run the tool (a shell, or [CODE]), and [CODE] will work on the output\nCorey: A counter-example, that's kind of awkward, is when Racket elides paths in messages with [CODE] and then next-error can't work\nCorey: For the racket-mode REPL, specifically, I set an error display handler to _not_ do those special prefixes\nCorey: But for command-line tools in general, try to just do the full path in the first place :slightly_smiling_face:\nVincenzo: Rosalee What is the C-level function that corresponds to [CODE]? I think a callback installed with [CODE] will not necessarily get values for the first (likely, but probably not guaranteed) or fourth (definitely not) arguments that live beyond the callback.\nCorey: Anyway, with that, even if you want to wrap [CODE] and [CODE] in some convenience stuff, it's just a thin wrapper and there's no wheel re-inventing\nNancie: Thanks, I'll add these to my notes\nCorey: Just my suggestion for step 0. Not necessarily trying to discourage steps 1 ... ¯\\_(ツ)_/¯\nRosalee: Where [CODE] is: [CODE_BLOCK]\nVincenzo: I guess the interesting part is: what calls [CODE]?\nRosalee: That would be [CODE], whose implementation is: [CODE_BLOCK]\nRosalee: More or less it takes the va_list, duplicates it, calls [CODE] once to get the buffer size, calls [CODE] again (on the now duplicated list) again to fill in the actual buffer.\nRosalee: And then it calls the racket callback and returns.\nVincenzo: Ok, that makes sense. I'm out of ideas just by looking at the definitions.\nRosalee: From the racket side, that call is defined as: [CODE_BLOCK]\nRosalee: And the reason its called that way is because its used in this context:\nRosalee: [CODE_BLOCK]\nRosalee: Where the type of [CODE] is: [CODE_BLOCK]\nRosalee: And [CODE] is used because the type includes a va_list, and so Racket is just plugging the one c function into the other.\nRosalee: So I would imagine [CODE] is good enough for that.\nRosalee: Vincenzo Ah, okay. Thanks anyway. :confused:\nRosalee: Vincenzo hmm…you know, I wonder if I can start this up in gdb and get interesting results. (BTW, the error I am getting is): [CODE_BLOCK]\nRosalee: Which seems like a suspiciously low address to me…\nRosalee: And of course running racket in a debugger makes the segfault go away. :disappointed:\nRosalee: lol…thanks.\nSadye: doc search question: how do I tag my rsound docs so that they show up for users searching in the lang/htdp-beginner context? I'm not even sure whether this information goes in the .scrbl file or in my info.rkt. I've spent my obligatory 10 minutes searching, so now I'm asking for help :slightly_smiling_face:.\nVincenzo: Sadye It looks like the set of places to search is hardwired into the language: <[URL]",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 49,
        "duration_minutes": 273.72,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "fix",
          "implement",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Eun",
          "Nancie",
          "Rosalee",
          "Sadye",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-10-12T14:00:33.000694",
          "text": "<@Nancie>: Yes. There's a (not very friendly) command-line interface: racket -l optimization-coach/report my-file.rkt"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:01:52.000082",
          "text": "Friendly or not, sounds like a good starting point for integration with other editors or CI tools"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-12T14:02:37.000104",
          "text": "Ah, if that's the goal, then it may not be so bad. Its output is mostly machine readable."
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:03:03.000364",
          "text": "If you're willing to accept PRs for other output modes (like stdout) then that may be my next Racket experiment"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:03:40.000627",
          "text": "Oh wait, I totally misread that"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:03:46.000140",
          "text": "maybe that does print to stdout"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T14:04:39.000078",
          "text": "at racketcon office hours there was mention of some work on getting racket to cooperate with some \"editor server\" protocol used by things like eclipse and visual studio, maybe the optimization coach could be part of that?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T14:05:13.000061",
          "text": "ah yes, found it: <https://github.com/Microsoft/language-server-protocol>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-12T14:06:30.000123",
          "text": "<@Nancie>: PRs definitely welcome!"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-12T14:06:46.000201",
          "text": "And I think it should indeed be printing to stdout."
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:07:28.000309",
          "text": "I'm thinking Emacs integration myself. Does anyone edit Racket with a tool that supports this protocol?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-12T14:07:28.000326",
          "text": "A `raco optimization-coach` command would be nice (and I have half the plumbing for that sitting around), but that would need a more human-friendly output."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T14:08:35.000080",
          "text": "<@Nancie> re emacs integration: would that be built on top of `racket-mode` or would it be something completely separate?"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:09:07.000437",
          "text": "I don't understand it well enough to say. `racket-mode` seems like a fine candidate, but maybe it would be more appropriate to integrate with Flycheck?"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:09:29.000393",
          "text": "I only just adopted full-time emacs a few weeks ago after using Jetbrains tools for many years"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T14:09:33.000415",
          "text": "I don't use emacs at all so I know virtually nothing about its ecosystem"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:14:00.000074",
          "text": "wrt to emacs I'd suggest step 0 is simply make sure any command-line tool prints error-like messages in a standard way"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:14:21.000273",
          "text": "like `/full/path/to/file:line:col some message here`"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:14:30.000052",
          "text": "<@Vincenzo> That is correct."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:14:48.000278",
          "text": "Although, I should mention that at the moment, those objects never get freed."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:14:56.000537",
          "text": "They are (for the moment) a memory leak."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:15:55.000613",
          "text": "(I will fix that later, for now keeping them takes relatively little space, and helps with debugging things.)"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:16:48.000292",
          "text": "Then you can use various emacs things to run the tool (a shell, or `async-shell-command`), and `next-error` will work on the output"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:17:30.000337",
          "text": "A counter-example, that's kind of awkward, is when Racket elides paths in messages with `&lt;pkgs&gt;/some/path/to/file` and then next-error can't work"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:17:59.000529",
          "text": "For the racket-mode REPL, specifically, I set an error display handler to _not_ do those special prefixes"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:18:16.000298",
          "text": "But for command-line tools in general, try to just do the full path in the first place :slightly_smiling_face:"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-12T14:18:27.000424",
          "text": "<@Rosalee> What is the C-level function that  corresponds to `set-racket-log-callback`? I think a callback installed with `av_log_set_callback` will not necessarily get values for the first (likely, but probably not guaranteed) or fourth (definitely not) arguments that live beyond the callback."
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:19:25.000014",
          "text": "Anyway, with that, even if you want to wrap `async-shell-command` and `next-error` in some convenience stuff, it's just a thin wrapper and there's no wheel re-inventing"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-12T14:19:29.000127",
          "text": "Thanks, I'll add these to my notes"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-12T14:19:53.000453",
          "text": "Just my suggestion for step 0. Not necessarily trying to discourage steps 1 ... ¯\\_(ツ)_/¯"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:20:15.000406",
          "text": "Where `racket_log_callback` is:\n```\nvoid (*racket_log_callback)(RACKET_CALLBACK_TYPES) = NULL;\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-12T14:20:33.000285",
          "text": "I guess the interesting part is: what calls `racket_log_callback`?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:21:09.000463",
          "text": "That would be `ffmeg_log_callback`, whose implementation is:\n```\nvoid ffmpeg_log_callback(void * avcl,\n                         int level,\n                         const char * fmt,\n                         va_list vl) {\n  int buffsize;\n  char find_size_buf[FIND_BUFF_SIZE];\n  char *buff;\n  va_list size_vl;\n  size_t namesize;\n  const char *tmp;\n  char *name = NULL;\n\n  if(avcl) {\n    tmp = ((AVClass*)(*(void**)avcl))-&gt;class_name;\n    namesize = strlen(tmp);\n    name = malloc((1 + namesize)*sizeof(char));\n    strncpy(name, tmp, (1 + namesize));\n  }\n\n  if(racket_log_callback) {\n    va_copy(size_vl, vl);\n    buffsize = vsnprintf(find_size_buf, FIND_BUFF_SIZE, fmt, size_vl);\n    buff = malloc((buffsize + 1) * sizeof(char));\n    vsnprintf(buff, buffsize + 1, fmt, vl);\n    va_end(size_vl);\n    racket_log_callback(name, level, buffsize, buff);\n  } else {\n    vsnprintf(find_size_buf, FIND_BUFF_SIZE, fmt, vl);\n  }\n}\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:22:26.000208",
          "text": "More or less it takes the va_list, duplicates it, calls `vsnprintf` once to get the buffer size, calls `vsnprintf` again (on the now duplicated list) again to fill in the actual buffer."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:22:32.000362",
          "text": "And then it calls the racket callback and returns."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-12T14:23:00.000154",
          "text": "Ok, that makes sense. I'm out of ideas just by looking at the definitions."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:23:04.000258",
          "text": "From the racket side, that call is defined as:\n```\n(define-libvid ffmpeg-log-callback _fpointer)\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:23:21.000002",
          "text": "And the reason its called that way is because its used in this context:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:23:53.000046",
          "text": "```\n  (av-log-set-callback ffmpeg-log-callback)\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:24:33.000556",
          "text": "Where the type of `av-log-set-callback` is:\n```\n  (define-avutil av-log-set-callback (_fun _fpointer -&gt; _void))\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:25:14.000309",
          "text": "And `_fpointer` is used because the type includes a va_list, and so Racket is just plugging the one c function into the other."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:25:26.000245",
          "text": "So I would imagine `_fpointer` is good enough for that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:25:38.000668",
          "text": "<@Vincenzo> Ah, okay. Thanks anyway. :confused:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:35:19.000237",
          "text": "<@Vincenzo> hmm…you know, I wonder if I can start this up in gdb and get interesting results. (BTW, the error I am getting is):\n```\nracket(29704,0x7fff76471000) malloc: *** error for object 0xd01: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\n[1]    29704 abort      racket -W debug -l raco video mosaic.rkt\n```"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T14:35:47.000446",
          "text": "Which seems like a suspiciously low address to me…"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T15:35:02.000694",
          "text": "And of course running racket in a debugger makes the segfault go away. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-12T15:36:25.000398",
          "text": "lol…thanks."
        },
        {
          "user": "Sadye",
          "timestamp": "2017-10-12T17:12:00.000267",
          "text": "doc search question: how do I tag my rsound docs so that they show up for users searching in the lang/htdp-beginner context? I'm not even sure whether this information goes in the .scrbl file or in my info.rkt. I've spent my obligatory 10 minutes searching, so now I'm asking for help :slightly_smiling_face:."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-12T18:34:16.000129",
          "text": "<@Sadye> It looks like the set of places to search is hardwired into the language: <https://github.com/racket/htdp/blob/master/htdp-lib/lang/htdp-langs.rkt#L600>"
        }
      ]
    },
    {
      "conversation_id": "342",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: <[URL]\nKa: Nancie Chantelle it might actually be best to start with a something even smaller -- a simple minor-mode in the likes of [CODE] (<[URL]\nKa: but, to Corey's point, that's probably step 1. step 0 is making sure you can easily jump to the error with the output matching something emacs can understand.\nKa: Sadye more basic question: how does doc search even *work*?\nKa: where's the index data? It's gotta be local since I don't see any network requests to search...\nKa: ah. it's in [CODE]\nKimbery: the [CODE] package is what actually renders the documentation index, IIUC <[URL]\nTina: Sadye pull requests welcome to either add yours or make things extensible :slightly_smiling_face:\nSadye: Tina Agh! Got me. :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 9,
        "duration_minutes": 1211.27,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Kimbery",
          "Sadye",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-12T15:35:44.000026",
          "text": "<https://media.tenor.com/images/7f22622198e3786f805304418f8d35d6/tenor.gif>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-12T16:10:50.000429",
          "text": "<@Nancie> <@Chantelle> it might actually be best to start with a something even smaller -- a simple minor-mode in the likes of `go-lint-mode` (<https://github.com/golang/lint/blob/master/misc/emacs/golint.el>)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-12T16:12:06.000208",
          "text": "but, to <@Corey>'s point, that's probably step 1. step 0 is making sure you can easily jump to the error with the output matching something emacs can understand."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-12T18:27:35.000058",
          "text": "<@Sadye> more basic question: how does doc search even *work*?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-12T18:27:57.000277",
          "text": "where's the index data? It's gotta be local since I don't see any network requests to search..."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-12T18:29:41.000345",
          "text": "ah. it's in `plt-index.js`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-12T18:33:57.000029",
          "text": "the `racket-index` package is what actually renders the documentation index, IIUC <https://github.com/racket/racket/tree/master/pkgs/racket-index>"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-13T08:40:29.000425",
          "text": "<@Sadye> pull requests welcome to either add yours or make things extensible :slightly_smiling_face:"
        },
        {
          "user": "Sadye",
          "timestamp": "2017-10-13T11:47:00.000447",
          "text": "<@Tina> Agh! Got me. :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "343",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: I'd be interesting to integrate this into say, racket-mode or something.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-12T16:09:08.000406",
          "text": "I'd be interesting to integrate this into say, racket-mode or something."
        }
      ]
    },
    {
      "conversation_id": "344",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Shad: I'm working out a definition for a standard-cat pict. Haven't played with whiskers yet. Here's the gist <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shad"
        ]
      },
      "timeline": [
        {
          "user": "Shad",
          "timestamp": "2017-10-13T01:44:27.000102",
          "text": "I'm working out a definition for a standard-cat pict. Haven't played with whiskers yet. Here's the gist <https://gist.github.com/deeglaze/31bc02c325acdef4d67daec8c3af06e1>"
        }
      ]
    },
    {
      "conversation_id": "345",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: Wonderful! Also amazed to see how the image comes out in the emacs repl in [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-10-13T07:20:55.000172",
          "text": "Wonderful! Also amazed to see how the image comes out in the emacs repl in `racket-mode`"
        }
      ]
    },
    {
      "conversation_id": "346",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: /kick-drdr\nRosalee: Vincenzo What is the #:tag feature in [CODE], do?\nRosalee: (I ask because [CODE] seems to use it, but its not documented.\nRosalee: (Trying to make my own [CODE] that can make structs for different (ABI breaking) versions of the same library. Which is why this is relevant to me.)\nVincenzo: It specifies a tag as an alternative to the default [CODE]. I'll make a note to add that to the docs.\nRosalee: Ah, okay\nRosalee: I’d be happy to do it if that helps.\nRosalee: Yes…it should get merged. :slightly_smiling_face:\nRosalee: We could have [CODE]. :slightly_smiling_face:\nNancie: Latarsha what's that command do?\nLatarsha: Nancie it resets the CI server build at <[URL]\nLatarsha: Best not to run it unless that's hung\nRosalee: Also Vincenzo I submitted a PR to add it to the docs: <[URL]\nLatarsha: /kick-drdr\nKimbery: Can someone explain why these two programs print different things? Maybe Vincenzo or Latarsha? [CODE_BLOCK] [CODE_BLOCK] The only difference is the addition of [CODE] in the second program.\nLatarsha: I don't see how that could happen, so I hope Vincenzo can explain\nKimbery: It appears to happen in racket7 as well, fwiw.\nVincenzo: Kimbery The short answer is that [CODE] doesn't implicitly switch to \"macro result\" view in the same way that [CODE] or [CODE] does. If you make the macro return [CODE], then you get an out-of-context error in either variant of your example. Equivalently, [CODE] produces [CODE] and both cases. Overall, the intent is that [CODE] as a result of the macro should be bound. To achieve that goal, [CODE] includes an implicit [CODE] on its argument, as does [CODE] and other [CODE] functions. The [CODE] function does not include an implicit [CODE]. That's why you get [CODE] in the first example; the binding has macro-introduction marks, but the identifier passed to [CODE] does not. In the second example, you're effectively canceling the macro-introduction mark for the binding (by using [CODE] to make the identifier look like it came from the macro use), and then looking up a binding from an identifier with more scopes still finds the binding. To make a long story short, use [CODE] on the argument to [CODE] if you want to see a bindings that as it will visible in the example, and its kindof an accident that you get [CODE] in your second example. The documentation should be made more clear which operations implicitly switch to macro-result view (with an implicit [CODE]) and which ones don't.\nKimbery: Vincenzo Thank you for that explanation. I admit that I find it pretty difficult and confusing to remember all the subtle differences between different syntax functions and how they adjust scopes. Is that what the [CODE] prefix actually means? Functions that include an implicit [CODE]?\nVincenzo: I don't think it's as simple as having a [CODE] prefix. I expected to sort this out better with the expander rewrite, but it was too easy to just do whatever the current functions do without thinking about it more.\nKimbery: Okay. The actual problem I was trying to solve when I ran into this is that I was binding some identifiers into a definition context, then calling [CODE] on some syntax using the context, and the identifiers in the resulting syntax were not [CODE] to the identifiers I had.\nKimbery: Adding the [CODE] before binding the identifiers fixed the issue, but I’ll try moving it to someplace after the binding and see if that still works, since that seems closer to the right thing to do based on your explanation.\nNoe: Kimbery Is there any chance the identifiers that were not free-identifier=? to your binders were accessed from a syntax property set within the local expansion but accessed outside? Local-expand in effect does a syntax-local-introduce on its argument and return. Ran into this issue with turnstile with my own conversion to definition contexts there. Need to syntax-local-introduce when adding the property and when accessing the property.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 23,
        "duration_minutes": 1723.87,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "need to",
          "should",
          "submit",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Nancie",
          "Noe",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-13T11:55:17.000121",
          "text": "/kick-drdr "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T12:10:14.000637",
          "text": "<@Vincenzo> What is the #:tag feature in `define-cpointer-type`, do?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T12:10:36.000622",
          "text": "(I ask because `define-cstruct` seems to use it, but its not documented."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T12:11:23.000100",
          "text": "(Trying to make my own `define-cstruct` that can make structs for different (ABI breaking) versions of the same library. Which is why this is relevant to me.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-13T12:12:34.000135",
          "text": "It specifies a tag as an alternative to the default `'id`. I'll make a note to add that to the docs."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T12:28:47.000419",
          "text": "Ah, okay"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T12:28:58.000028",
          "text": "I’d be happy to do it if that helps."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T14:01:03.000149",
          "text": "Yes…it should get merged. :slightly_smiling_face:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T14:01:08.000337",
          "text": "We could have `pict/farm`. :slightly_smiling_face:"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-13T14:13:45.000312",
          "text": "<@Latarsha> what's that command do?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-13T14:44:34.000431",
          "text": "<@Nancie> it resets the CI server build at <http://drdr.racket-lang.org|drdr.racket-lang.org>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-13T14:44:52.000066",
          "text": "Best not to run it unless that's hung"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-13T15:47:32.000400",
          "text": "Also <@Vincenzo> I submitted a PR to add it to the docs: <https://github.com/racket/racket/pull/1844>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-13T16:43:47.000162",
          "text": "/kick-drdr "
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-13T17:03:15.000298",
          "text": "Can someone explain why these two programs print different things? Maybe <@Vincenzo> or <@Latarsha>?\n```\n#lang racket\n\n(require (for-syntax racket/syntax)\n         syntax/parse/define)\n\n(define-simple-macro (mac)\n  #:do [(define x (generate-temporary))\n        (define intdef-ctx (syntax-local-make-definition-context))\n        (define x* (internal-definition-context-introduce intdef-ctx x))\n        (syntax-local-bind-syntaxes (list x) #f intdef-ctx)\n        (println (identifier-binding x*))]\n  (void))\n\n(mac) ; =&gt; #f\n```\n```\n#lang racket\n\n(require (for-syntax racket/syntax)\n         syntax/parse/define)\n\n(define-simple-macro (mac)\n  #:do [(define x (syntax-local-introduce (generate-temporary)))\n        (define intdef-ctx (syntax-local-make-definition-context))\n        (define x* (internal-definition-context-introduce intdef-ctx x))\n        (syntax-local-bind-syntaxes (list x) #f intdef-ctx)\n        (println (identifier-binding x*))]\n  (void))\n\n(mac) ; =&gt; 'lexical\n```\nThe only difference is the addition of `syntax-local-introduce` in the second program."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-13T17:21:34.000072",
          "text": "I don't see how that could happen, so I hope <@Vincenzo> can explain"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-13T17:23:00.000233",
          "text": "It appears to happen in racket7 as well, fwiw."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T09:56:02.000067",
          "text": "<@Kimbery> The short answer is that `identifier-binding` doesn't implicitly switch to \"macro result\" view in the same way that `syntax-local-bind-syntaxes` or `syntax-local-value` does.\nIf you make the macro return `x*`, then you get an out-of-context error in either variant of your example. Equivalently, `(identifier-binding (syntax-local-introduce x*))` produces `'lexical` and both cases. Overall, the intent is that `x*` as a result of the macro should be bound. To achieve that goal, `syntax-local-bind-syntaxes` includes an implicit `syntax-local-introduce` on its argument, as does `syntax-local-value` and other `syntax-local-...` functions.\nThe `identifier-binding` function does not include an implicit `syntax-local-introduce`. That's why you get `#f` in the first example; the binding has macro-introduction marks, but the identifier passed to `identifier-binding` does not.\nIn the second example, you're effectively canceling the macro-introduction mark for the binding (by using `syntax-local-introduce` to make the identifier look like it came from the macro use), and then looking up a binding from an identifier with more scopes still finds the binding.\nTo make a long story short, use `syntax-local-introduce` on the argument to `identifier-binding` if you want to see a bindings that as it will visible in the example, and its kindof an accident that you get `'lexical` in your second example.\nThe documentation should be made more clear which operations implicitly switch to macro-result view (with an implicit `syntax-local-introduce`) and which ones don't."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-14T12:02:56.000101",
          "text": "<@Vincenzo> Thank you for that explanation. I admit that I find it pretty difficult and confusing to remember all the subtle differences between different syntax functions and how they adjust scopes. Is that what the `syntax-local-` prefix actually means? Functions that include an implicit `syntax-local-introduce`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T12:05:33.000117",
          "text": "I don't think it's as simple as having a `syntax-local-` prefix. I expected to sort this out better with the expander rewrite, but it was too easy to just do whatever the current functions do without thinking about it more."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-14T12:08:39.000091",
          "text": "Okay. The actual problem I was trying to solve when I ran into this is that I was binding some identifiers into a definition context, then calling `local-expand` on some syntax using the context, and the identifiers in the resulting syntax were not `free-identifier=?` to the identifiers I had."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-14T12:10:04.000044",
          "text": "Adding the `syntax-local-introduce` before binding the identifiers fixed the issue, but I’ll try moving it to someplace after the binding and see if that still works, since that seems closer to the right thing to do based on your explanation."
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-14T16:39:09.000011",
          "text": "<@Kimbery> Is there any chance the identifiers that were not free-identifier=? to your binders were accessed from a syntax property set within the local expansion but accessed outside? Local-expand in effect does a syntax-local-introduce on its argument and return. Ran into this issue with turnstile with my own conversion to definition contexts there. Need to syntax-local-introduce when adding the property and when accessing the property."
        }
      ]
    },
    {
      "conversation_id": "347",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: Shad standard-cat is rad!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-13T12:53:08.000129",
          "text": "<@Shad> standard-cat is rad!"
        }
      ]
    },
    {
      "conversation_id": "348",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Shad: Nelson The cat-silhouette function would be good way to build that version. I can also have #:left-eye and #:right-eye options that take picts and place them appropriately. Probably #:nose too.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Shad"
        ]
      },
      "timeline": [
        {
          "user": "Shad",
          "timestamp": "2017-10-13T15:08:12.000488",
          "text": "<@Nelson> The cat-silhouette function would be good way to build that version. I can also have #:left-eye and #:right-eye options that take picts and place them appropriately. Probably #:nose too."
        }
      ]
    },
    {
      "conversation_id": "349",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Shad: I'm on a chrome book, so everything has to be done through the browser. I've been using <[URL] as a REPL, and that's a rough experience. Especially with all the captcha requirements as you iterate. Eagerly awaiting racketscript + pict + racket/draw support so I can fiddle with images faster. I can ssh into a machine with racket for text-based iteration, but graphical stuff is hard.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Shad"
        ]
      },
      "timeline": [
        {
          "user": "Shad",
          "timestamp": "2017-10-13T18:50:43.000230",
          "text": "I'm on a chrome book, so everything has to be done through the browser. I've been using <http://pasterack.org|pasterack.org> as a REPL, and that's a rough experience. Especially with all the captcha requirements as you iterate. Eagerly awaiting racketscript + pict + racket/draw support so I can fiddle with images faster. I can ssh into a machine with racket for text-based iteration, but graphical stuff is hard."
        }
      ]
    },
    {
      "conversation_id": "350",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Shad: I want to make a gui interface now, where I can fiddle with all the parameters to standard-cat and see what it looks like real time.\nShad: basically I want to play with the ear positioning, arc length, and extents, and then the whisker length and droop.\nShad: it's not rackety until it has 20 optional keyword arguments\nKimbery: Yep, I thought about that, and that was my theory. Normally I wouldn’t need to do that sort of low-level mucking about with identifiers, but I had to do that because type variables are represented as identifiers, and I needed to do some type substitution.\nKimbery: The trouble is that it goes in as a syntax object to be expanded and comes out as a property.\nKimbery: Also, hello Noe, I didn’t realize you were in slack. :wave:\nNoe: So did you solve your problem, or is there still a difficulty?\nNoe: (Kimbery)\nNoe: Question\nKimbery: I got it working by adding a [CODE] in the right spot. So far it seems to work fine.\nNoe: Question for everyone: is it expected behavior that [CODE] will use compiled files for dependencies built by raco make even when the source file has been modified since? If so, why? Seems like it would be friendlier to check the timestamps transitive dependencies like raco make does, but I guess I could see that being too expensive.\nLatarsha: Noe No, that's not the expected behavior, and [CODE] shouldn't be doing that",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 12,
        "duration_minutes": 189.35,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Noe",
          "Shad"
        ]
      },
      "timeline": [
        {
          "user": "Shad",
          "timestamp": "2017-10-14T16:34:00.000020",
          "text": "I want to make a gui interface now, where I can fiddle with all the parameters to standard-cat and see what it looks like real time."
        },
        {
          "user": "Shad",
          "timestamp": "2017-10-14T16:38:21.000028",
          "text": "basically I want to play with the ear positioning, arc length, and extents, and then the whisker length and droop."
        },
        {
          "user": "Shad",
          "timestamp": "2017-10-14T16:39:07.000037",
          "text": "it's not rackety until it has 20 optional keyword arguments"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-14T16:40:46.000080",
          "text": "Yep, I thought about that, and that was my theory. Normally I wouldn’t need to do that sort of low-level mucking about with identifiers, but I had to do that because type variables are represented as identifiers, and I needed to do some type substitution."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-14T16:41:18.000052",
          "text": "The trouble is that it goes in as a syntax object to be expanded and comes out as a property."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-14T16:42:29.000063",
          "text": "Also, hello <@Noe>, I didn’t realize you were in slack. :wave:"
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-14T16:43:16.000056",
          "text": "So did you solve your problem, or is there still a difficulty?"
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-14T16:44:59.000005",
          "text": "(<@Kimbery>)"
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-14T16:45:00.000099",
          "text": "Question"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-14T16:45:33.000044",
          "text": "I got it working by adding a `syntax-local-introduce` in the right spot. So far it seems to work fine."
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-14T16:47:49.000072",
          "text": "Question for everyone: is it expected behavior that `racket` will use compiled files for dependencies built by raco make even when the source file has been modified since? If so, why? Seems like it would be friendlier to check the timestamps transitive dependencies like raco make does, but I guess I could see that being too expensive."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T19:43:21.000063",
          "text": "<@Noe> No, that's not the expected behavior, and `racket` shouldn't be doing that"
        }
      ]
    },
    {
      "conversation_id": "351",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: or, perhaps to be more clear, if [CODE] depends on [CODE] and both have zo files, and then you modify [CODE], then the zo for [CODE] will still be used since [CODE] is not newer than the zo file\nLatarsha: but if you modify [CODE] and then run [CODE], it will not use the zo file for [CODE]\nLatarsha: Vincenzo (or maybe someone else) I'd like to provide an argument to [CODE] that produces a module path with the same semantics as calling [CODE] on the MPI directly\nLatarsha: I got somewhere with [CODE] but that doesn't work when running [CODE]\nVincenzo: Latarsha I don't understand the question. Can you provide a more complete example?\nLatarsha: Vincenzo Currently, I have this function:\nLatarsha: [CODE_BLOCK]\nLatarsha: I want to write a similar function, but which generates a list of [CODE] syntax objects\nLatarsha: I've written this: [CODE_BLOCK]\nLatarsha: which works when the code that uses it is run with [CODE], but not with [CODE] or [CODE]\nLatarsha: the elements of the list [CODE] are generated by [CODE] in other modules\nLatarsha: I'm trying to arrange for the submodules of a Typed Racket module that declare types or contracts to have [CODE]s for the same submodules in the modules that the outer module depends on\nLatarsha: Won't that point to the inside of the Typed Racket implementation, where that function is?\nVincenzo: Well, maybe I see...\nLatarsha: If I have modules [CODE] and [CODE], where b requires a, then in the [CODE] submodule of b I want to generate a require for the [CODE] submodule of a\nLatarsha: and the MPI in the code (named [CODE]) points to [CODE]\nVincenzo: Is the issue that [CODE] in [CODE] might be a submodule path, so you can't just wrap it with [CODE]?\nLatarsha: I tried just putting [CODE] directly in the [CODE] form but apparently [CODE] can't take a module-path-index (which is what [CODE] is) directly\nLatarsha: certainly [CODE] would be the nicest thing to be able to write there\nVincenzo: I'm not clear on where [CODE] came from that it's a module path index, but then it seems like [CODE] would be what you want.\nLatarsha: Do you mean [CODE]?\nVincenzo: Yes\nLatarsha: [CODE] comes from a call to [CODE] in the other module ([CODE] in my example)\nLatarsha: That produces a similar error to one I had earlier: [CODE_BLOCK]\nLatarsha: However, that was enough to get me to this:\nLatarsha: [CODE_BLOCK]\nLatarsha: which I think will make unportable zo files but should be enough to allow me to make progress on this\nLatarsha: Thanks!\nVincenzo: I agree that's not the right thing. How about [CODE]?\nLatarsha: That seems to work!\nRosalee: Vincenzo Is there an equivalent to [CODE] and [CODE] in the ffi lib? I see it in [CODE], but the docs say that it shouldn’t be used directly.\nRosalee: For reference, I’m trying to build my own [CODE] macro, because the existing one doesn’t support versions, which I need.\nLory: I'm learning Racket by working through Beautiful Racket, and I have a question about expanders. I don't get why the expander here (<[URL] needs to [CODE], but the expander here (<[URL] doesn't need to [CODE], [CODE], etc.\nVincenzo: Rosalee Those are not meant to be exposed, and the way that [CODE] uses [CODE] and [CODE] looks like a hack to me. I recommend using [CODE] for the C-&gt;Scheme part, and use [CODE] for the Scheme-&gt;C part. The little bit of duplication that you'll have is better than the hack.\nVincenzo: Lory A reference to [CODE] originates in the reader, before identifiers have scope, while references to [CODE], etc., originate in expansion. In other words, it's roughly that [CODE] is introduced by a [CODE] form, while [CODE], etc., are introduced by [CODE] forms.\nLory: Vincenzo Thanks! I had not noticed that distinction.\nVincenzo: Kimbery One possible reason: Since [CODE] doesn't work in internal-definition contexts, the latter works only at the module level, while the former also works in local contexts.\nKimbery: Ahh, that makes sense. So you can’t have a notion of nested local scopes from different phases.\nKimbery: That means David’s suggestion to use phases as namespaces unfortunately probably won’t work. Let me ask a followup question, then: is there any way for Racket programmers to inject requires that have the same shadowing behavior as bindings imported by the module language? Alternatively, is there any way to adjust how bindings provided by a module language are imported?\nKimbery: Essentially, I have a require transformer [CODE], and I inject it into every [CODE]. That transformer finds all the mangled type imports, unmangles them, and applies the type scope. I can’t do that for types provided by the module language, though, because there are obviously no “module language transformers”.\nKimbery: And if I adjust the reader to transform [CODE] into [CODE], then users are unable to shadow bindings provided by [CODE] with other [CODE]s.\nKimbery: I _think_ this would be a problem even if I were using something like submodules to store bindings instead of a name mangling scheme, but maybe I’m overlooking something.\nKimbery: What do you mean “the procedure that invokes it”? Isn’t the procedure that invokes macro transformers just the macroexpander? Or do you want to know something about where the macro is used?\nKimbery: I don’t think you can do that.\nKimbery: You could create your own custom version of [CODE] that set up some lexical information that another macro could use. But I don’t think the built-in [CODE] does anything like that.\nDelmy: I thought the contract system could do things like this? I.e. when a contract is broken, it gives you information about whether the blame lies with the function itself, or the context in which it was called. Either way not a huge deal.\nKimbery: I think the contract system does that with [CODE], which has syntactic access to the name, but I think it usually only blames modules.\nDelmy: Gotcha, thanks for the info.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 48,
        "duration_minutes": 1045.88,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "complete",
          "create",
          "fix",
          "implement",
          "need to",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Kimbery",
          "Latarsha",
          "Lory",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T19:44:25.000050",
          "text": "or, perhaps to be more clear, if `a.rkt` depends on `b.rkt` and both have zo files, and then you modify `b.rkt`, then the zo for `a.rkt` will still be used since `a.rkt` is not newer than the zo file"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T19:45:20.000023",
          "text": "but if you modify `b.rkt` and then run `a.rkt`, it will not use the zo file for `b.rkt`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T20:23:53.000063",
          "text": "<@Vincenzo> (or maybe someone else) I'd like to provide an argument to `resolve-module-path-index` that produces a module path with the same semantics as calling `dynamic-require` on the MPI directly"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T20:24:26.000020",
          "text": "I got somewhere with `(resolved-module-path-name (current-module-declare-name))` but that doesn't work when running `raco make`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T21:16:53.000038",
          "text": "<@Latarsha> I don't understand the question. Can you provide a more complete example?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:17:50.000019",
          "text": "<@Vincenzo> Currently, I have this function:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:17:55.000027",
          "text": "```\n(define (do-requires [ns (current-namespace)])\n  (parameterize ([current-namespace ns])\n    (for ([m (in-list to-require)]\n          #:when m)\n      (dynamic-require (module-path-index-join '(submod \".\" #%type-decl) m)\n                       #f))))\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:18:21.000048",
          "text": "I want to write a similar function, but which generates a list of `(require ...)` syntax objects"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:18:37.000062",
          "text": "I've written this:\n```\n(define (get-requires)\n  (for/list ([m (in-list to-require)]\n             #:when m)\n    ;; FIXME: is this really the right code?                                                                                                                                    \n    #`(require (only-in (submod #,(resolve-module-path-index\n                                   m\n                                   (resolved-module-path-name\n                                    (current-module-declare-name)))\n                                #%type-decl)))))\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:19:14.000084",
          "text": "which works when the code that uses it is run with `racket`, but not with `raco make` or `raco expand`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:20:05.000077",
          "text": "the elements of the list `to-require` are generated by `(variable-reference-&gt;module-path-index (#%variable-reference))` in other modules"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:42:21.000015",
          "text": "I'm trying to arrange for the submodules of a Typed Racket module that declare types or contracts to have `require`s for the same submodules in the modules that the outer module depends on"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T21:57:38.000029",
          "text": "Won't that point to the inside of the Typed Racket implementation, where that function is?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T22:00:59.000014",
          "text": "Well, maybe I see..."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:01:51.000004",
          "text": "If I have modules `a.rkt` and `b.rkt`, where b requires a, then in the `#%type-decl` submodule of b I want to generate a require for the `#%type-decl` submodule of a"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:02:41.000074",
          "text": "and the MPI in the code (named `m`) points to `a`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T22:05:43.000013",
          "text": "Is the issue that `m` in `get-requires` might be a submodule path, so you can't just wrap it with `submod`?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:06:52.000026",
          "text": "I tried just putting `m` directly in the `submod` form but apparently `require` can't take a module-path-index (which is what `m` is) directly"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:07:20.000064",
          "text": "certainly `(submod #,m #%type-decl)` would be the nicest thing to be able to write there"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T22:08:02.000007",
          "text": "I'm not clear on where `m` came from that it's a module path index, but then it seems like `(module-path-join '(submod \".\" #%type-decl) m)` would be what you want."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:09:04.000003",
          "text": "Do you mean `module-path-index-join`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T22:09:09.000044",
          "text": "Yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:09:34.000017",
          "text": "`m` comes from a call to `(variable-reference-&gt;module-path-index (#%variable-reference))` in the other module (`a` in my example)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:13:20.000013",
          "text": "That produces a similar error to one I had earlier:\n```\n?: bad syntax for require sub-form\n  in: #&lt;module-path-index:((submod \".\" #%type-decl) \"x.rkt\")&gt;\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:17:03.000070",
          "text": "However, that was enough to get me to this:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:17:15.000040",
          "text": "```\n(define (get-requires)\n  (for/list ([m (in-list to-require)]\n             #:when m)\n    ;; FIXME: is this really the right code?                                                                                                                                    \n    #`(require (only-in #,(cons 'submod (resolved-module-path-name (module-path-index-resolve (module-path-index-join '(submod \".\" #%type-decl) m))))))))\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:17:41.000022",
          "text": "which I think will make unportable zo files but should be enough to allow me to make progress on this"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:17:54.000033",
          "text": "Thanks!"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T22:23:54.000059",
          "text": "I agree that's not the right thing. How about `(collapse-module-path-index (module-path-index-join '(submod \".\" #%type-decl) m))`?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-14T22:31:44.000028",
          "text": "That seems to work!"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-15T11:50:29.000036",
          "text": "<@Vincenzo> Is there an equivalent to `ctype-scheme-&gt;c` and `ctype-c-&gt;scheme` in the ffi lib? I see it in `'#%foreign`, but the docs say that it shouldn’t be used directly."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-15T11:51:06.000051",
          "text": "For reference, I’m trying to build my own `define-cstruct` macro, because the existing one doesn’t support versions, which I need."
        },
        {
          "user": "Lory",
          "timestamp": "2017-10-15T12:05:42.000027",
          "text": "I'm learning Racket by working through Beautiful Racket, and I have a question about expanders. I don't get why the expander here (<https://beautifulracket.com/stacker/source-listing.html>) needs to `(provide handle)`, but the expander here (<https://beautifulracket.com/bf/an-imperative-expander.html>) doesn't need to `(provide gt)`, `(provide lt)`, etc."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-15T12:24:28.000039",
          "text": "<@Rosalee> Those are not meant to be exposed, and the way that `define-cstruct` uses `ctype-scheme-&gt;c` and `ctype-c-&gt;scheme` looks like a hack to me. I recommend using `cpointer-push-tag!` for the C-&gt;Scheme part, and use `cpointer-has-tag?` for the Scheme-&gt;C part. The little bit of duplication that you'll have is better than the hack."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-15T12:29:09.000075",
          "text": "<@Lory> A reference to `handle` originates in the reader, before identifiers have scope, while references to `gt`, etc., originate in expansion. In other words, it's roughly that `handle` is introduced by a `'` form, while `gt`, etc., are introduced by `#'` forms."
        },
        {
          "user": "Lory",
          "timestamp": "2017-10-15T12:30:08.000086",
          "text": "<@Vincenzo> Thanks! I had not noticed that distinction."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-15T12:34:36.000045",
          "text": "<@Kimbery> One possible reason: Since `begin-for-syntax` doesn't work in internal-definition contexts, the latter works only at the module level, while the former also works in local contexts."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T12:36:08.000018",
          "text": "Ahh, that makes sense. So you can’t have a notion of nested local scopes from different phases."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T12:38:26.000053",
          "text": "That means David’s suggestion to use phases as namespaces unfortunately probably won’t work. Let me ask a followup question, then: is there any way for Racket programmers to inject requires that have the same shadowing behavior as bindings imported by the module language? Alternatively, is there any way to adjust how bindings provided by a module language are imported?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T12:40:09.000021",
          "text": "Essentially, I have a require transformer `unmangle-types-in`, and I inject it into every `require`. That transformer finds all the mangled type imports, unmangles them, and applies the type scope. I can’t do that for types provided by the module language, though, because there are obviously no “module language transformers”."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T12:40:57.000057",
          "text": "And if I adjust the reader to transform `#lang hackett` into `(module m hackett (require hackett))`, then users are unable to shadow bindings provided by `hackett` with other `require`s."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T12:41:35.000082",
          "text": "I _think_ this would be a problem even if I were using something like submodules to store bindings instead of a name mangling scheme, but maybe I’m overlooking something."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T13:04:51.000040",
          "text": "What do you mean “the procedure that invokes it”? Isn’t the procedure that invokes macro transformers just the macroexpander? Or do you want to know something about where the macro is used?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T13:06:40.000069",
          "text": "I don’t think you can do that."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T13:07:29.000073",
          "text": "You could create your own custom version of `define` that set up some lexical information that another macro could use. But I don’t think the built-in `define` does anything like that."
        },
        {
          "user": "Delmy",
          "timestamp": "2017-10-15T13:08:28.000107",
          "text": "I thought the contract system could do things like this? I.e. when  a contract is broken, it gives you information about whether the blame lies with the function itself, or the context in which it was called. Either way not a huge deal."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T13:09:35.000013",
          "text": "I think the contract system does that with `define/contract`, which has syntactic access to the name, but I think it usually only blames modules."
        },
        {
          "user": "Delmy",
          "timestamp": "2017-10-15T13:10:18.000099",
          "text": "Gotcha, thanks for the info."
        }
      ]
    },
    {
      "conversation_id": "352",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: My first thought is [CODE] in place of [CODE], but I'm not sure that's the right idea.\nVincenzo: I though you were trying to do something like that. If you want to be relative to the context where the [CODE] appears, I'm not following well enough to see why \".\" doesn't work.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 4.52,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T21:55:33.000047",
          "text": "My first thought is `(variable-reference-&gt;module-path-index (#%variable-reference))` in place of `(resolved-module-path-name (current-module-declare-name))`, but I'm not sure that's the right idea."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-14T22:00:04.000019",
          "text": "I though you were trying to do something like that. If you want to be relative to the context where the `require` appears, I'm not following well enough to see why \".\" doesn't work."
        }
      ]
    },
    {
      "conversation_id": "353",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Natosha: Noe See the [CODE] package. It provides a compiled-load handler that implements recursive timestamp checking.\nPatrice: Natosha Hi, I sent a pull request to [CODE]. The default use-compiled handler will check the existence of a file, so I added that check",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 655.57,
        "contains_question": false,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Natosha",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Natosha",
          "timestamp": "2017-10-14T22:51:12.000028",
          "text": "<@Noe> See the `custom-load` package. It provides a compiled-load handler that implements recursive timestamp checking."
        },
        {
          "user": "Patrice",
          "timestamp": "2017-10-15T09:46:46.000091",
          "text": "<@Natosha> Hi, I sent a pull request to `custom-load`. The default use-compiled handler will check the existence of a file, so I added that check"
        }
      ]
    },
    {
      "conversation_id": "354",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: From the second page, I think this covers it: [CODE_BLOCK]\nLory: I read that, but I thought that just replaces instances of [CODE] with [CODE], which led me to think that [CODE] needs to be provided.\nKimbery: Can someone in here explain why we always write the former of these two programs instead of the latter? [CODE_BLOCK] I’ve never fully understood why we use phase 0 transformer bindings to store data that macros have access to instead of just using phase 1 bindings.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 10.83,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Lory",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-10-15T12:20:05.000111",
          "text": "From the second page, I think this covers it:\n```\n(define-macro-cases bf-op\n  [(bf-op \"&gt;\") #'(gt)]\n  [(bf-op \"&lt;\") #'(lt)]\n  [(bf-op \"+\") #'(plus)]\n  [(bf-op \"-\") #'(minus)]\n  [(bf-op \".\") #'(period)]\n  [(bf-op \",\") #'(comma)])\n(provide bf-op)\n```"
        },
        {
          "user": "Lory",
          "timestamp": "2017-10-15T12:21:43.000016",
          "text": "I read that, but I thought that just replaces instances of `(bf-op \"&gt;\")` with `(gt)`, which led me to think that `(gt)` needs to be provided."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T12:30:55.000010",
          "text": "Can someone in here explain why we always write the former of these two programs instead of the latter?\n```\n#lang racket\n\n(require (for-syntax racket/syntax)\n         syntax/parse/define)\n\n\n(define-simple-macro (definer1 x:id)\n  (define-syntax x 42))\n(define-simple-macro (consumer1 x:id)\n  #:with value (syntax-local-value #'x)\n  (quote value))\n\n(definer1 foo)\n(consumer1 foo)\n\n\n(define-simple-macro (definer2 x:id)\n  (define-for-syntax x 42))\n(define-simple-macro (consumer2 x:id)\n  #:with value (syntax-local-eval #'x)\n  (quote value))\n\n(definer2 foo)\n(consumer2 foo)\n```\nI’ve never fully understood why we use phase 0 transformer bindings to store data that macros have access to instead of just using phase 1 bindings."
        }
      ]
    },
    {
      "conversation_id": "355",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: How can one write a macro such that it can report the name of procedure which invokes it? I basically want something like: [CODE_BLOCK]\nDelmy: The context in which the macro is used. Like if I had [CODE] then [CODE] should printf [CODE] as a side effect.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 3.18,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-10-15T13:03:00.000021",
          "text": "How can one write a macro such that it can report the name of procedure which invokes it? I basically want something like:\n\n```\n(define-syntax (foo)\n  (syntax-parse stx\n    [(_)\n      (with-syntax ([invoking-proc (?? get-invoking-proc ??)])\n        (syntax/loc stx\n          (begin\n            (eprintf \"foo called from: ~v\" invoking-proc)\n            (void))))]))\n```"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-10-15T13:06:11.000022",
          "text": "The context in which the macro is used. Like if I had `(define (my-fn) (foo))` then `my-fn` should printf `foo called from \"my-fn\"` as a side effect."
        }
      ]
    },
    {
      "conversation_id": "356",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Noe: Natosha I take it from the existence of [CODE] that [CODE] does not by default behave the way Latarsha describes? Do you know why [CODE] isn’t more cautious? It seems like the timestamp check shouldn’t be too expensive compared to the rather larger cost of actually loading and instantiating a module. To be clear, the behavior I’m talking about is the following: [CODE_BLOCK]\nLatarsha: I think that what's happening there is that the compiled version of [CODE] includes the actual symbol\nLatarsha: so fixing this requires that b.rkt be recompiled, even though _its_ zo is not out of date\nLatarsha: what I said earlier remains correct",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 8.27,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Noe"
        ]
      },
      "timeline": [
        {
          "user": "Noe",
          "timestamp": "2017-10-15T15:26:43.000118",
          "text": "<@Natosha> I take it from the existence of `custom-load` that `racket` does not by default behave the way <@Latarsha> describes? Do you know why `racket` isn’t more cautious? It seems like the timestamp check shouldn’t be too expensive compared to the rather larger cost of actually loading and instantiating a module.\n\nTo be clear, the behavior I’m talking about is the following:\n\n```\nmkdir example; cd example\n\ncat &lt;&lt;EOF &gt;a.rkt\n#lang racket\n(define x 'old)\n(provide x)\nEOF\n\ncat &lt;&lt;EOF &gt;b.rkt\n#lang racket\n(require \"a.rkt\")\nx\nEOF\n\nraco make b.rkt\n\ncat &lt;&lt;EOF &gt;a.rkt\n#lang racket\n(define x 'new)\n(provide x)\nEOF\n\n# Prints 'old\nracket b.rkt\n\nraco make b.rkt\n\n# Prints 'new\nracket b.rkt\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-15T15:32:48.000011",
          "text": "I think that what's happening there is that the compiled version of `b.rkt` includes the actual symbol"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-15T15:33:23.000033",
          "text": "so fixing this requires that b.rkt be recompiled, even though _its_ zo is not out of date"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-15T15:34:59.000070",
          "text": "what I said earlier remains correct"
        }
      ]
    },
    {
      "conversation_id": "357",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo I’m trying to better understand the syntax model behind [CODE] submodules, since the docs seem a little sparse. Does it make sense for [CODE] to affect such submodules? If not, why not? Currently, it looks like the implementation of [CODE] ignores all [CODE] submodules, but it would be convenient for me if it were possible to affect them that way (and, since they inherit bindings around them, it seems like it should theoretically be possible).\nVincenzo: Kimbery I think it would make sense for [CODE] to work with [CODE], but I've never tried\nVincenzo: There's no way, as far as I can see, to import in a way that allows shadowing\nKimbery: Okay, that’s probably enough for me to go on… I just have little idea how syntax parameters actually work, so I didn’t want to try something completely wrong. :)\nKimbery: As for imports, I think the namespace issue is surprisingly hard. :( But I think I might be able to get something that _almost_ works, modulo the issue with import shadowing.\nKimbery: [CODE_BLOCK] wat\nKimbery: oh, hah—the [CODE] is wrong there. still have no idea what that error message is about…\nLatarsha: Vincenzo returning to our conversation about [CODE] from this weekend, I have another issue\nLatarsha: I would like to create a module path that works from a submodule of the place I currently am\nLatarsha: given a module path index (or a module path) pointing to a given place\nLatarsha: Normally, if the original module path (index) is just [CODE] or [CODE] or [CODE] then just using it directly works fine\nLatarsha: but if the original module path is [CODE] then putting that in a further submodule just doesn't work\nVincenzo: samth If you're in the module-path-index world, then you can [CODE] a [CODE]. If you're in the module-path world and want to stay there, then I don't know a better approach than looking for [CODE] and adding to the end – that is, partially parsing the module path. (I forgot why allowing nested [CODE] wasn't trivial in the first place.)\nLatarsha: Ok, thanks",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 14,
        "duration_minutes": 1328.52,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "create",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T16:11:59.000027",
          "text": "<@Vincenzo> I’m trying to better understand the syntax model behind `(module* m #f ....)` submodules, since the docs seem a little sparse. Does it make sense for `splicing-syntax-parameterize` to affect such submodules? If not, why not? Currently, it looks like the implementation of `splicing-syntax-parameterize` ignores all `module*` submodules, but it would be convenient for me if it were possible to affect them that way (and, since they inherit bindings around them, it seems like it should theoretically be possible)."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-15T16:19:06.000104",
          "text": "<@Kimbery> I think it would make sense for `splicing-syntax-parameterize` to work with `(module* m #f ....)`, but I've never tried"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-15T16:19:41.000024",
          "text": "There's no way, as far as I can see, to import in a way that allows shadowing"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T16:20:39.000047",
          "text": "Okay, that’s probably enough for me to go on… I just have little idea how syntax parameters actually work, so I didn’t want to try something completely wrong. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T16:21:26.000002",
          "text": "As for imports, I think the namespace issue is surprisingly hard. :( But I think I might be able to get something that _almost_ works, modulo the issue with import shadowing."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T23:26:20.000072",
          "text": "```\n$ cat module-begin.rkt\n#lang racket\n\n(require syntax/parse/define)\n\n(define-simple-macro (#%module-begin form ...)\n  #'(#%plain-module-begin form ...))\n\n(module* use #f)\n\n$ racket module-begin.rkt\nmodule-begin.rkt:8:0: module*: compiled body was not built with #%module-begin\n  in: (module* use #f)\n```\nwat"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-15T23:29:13.000046",
          "text": "oh, hah—the `#'` is wrong there. still have no idea what that error message is about…"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-16T14:04:25.000386",
          "text": "<@Vincenzo> returning to our conversation about `module-path-index-join` from this weekend, I have another issue"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-16T14:05:09.000029",
          "text": "I would like to create a module path that works from a submodule of the place I currently am"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-16T14:05:31.000292",
          "text": "given a module path index (or a module path) pointing to a given place"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-16T14:06:17.000498",
          "text": "Normally, if the original module path (index) is just `foo` or `\"foo.rkt\"` or `(submod \"foo.rkt\" bar)` then just using it directly works fine"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-16T14:06:47.000038",
          "text": "but if the original module path is `(submod \"..\" foo)` then putting that in a further submodule just doesn't work"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-16T14:12:35.000147",
          "text": "@samth If you're in the module-path-index world, then you can `module-path-index-join` a `(submod \".\" bar)`. If you're in the module-path world and want to stay there, then I don't know a better approach than looking for `submod` and adding to the end – that is, partially parsing the module path. (I forgot why allowing nested `submod` wasn't trivial in the first place.)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-16T14:20:30.000392",
          "text": "Ok, thanks"
        }
      ]
    },
    {
      "conversation_id": "358",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Patrice: ha! [CODE_BLOCK]\nPatrice: so it does not begin with [CODE]\nNatosha: Patrice yes, sorry, I wanted to try it and maybe adapt the test before I merged the PR but I haven't had a chance yet\nPatrice: Natosha I see. Thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 360.87,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Natosha",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Patrice",
          "timestamp": "2017-10-16T08:11:39.000439",
          "text": "ha!\n```\n$ raco expand module-begin.rkt\n$ raco expand module-begin.rkt \n(module module-begin racket\n  (#%module-begin\n   (module configure-runtime '#%kernel\n     (#%module-begin (#%require racket/runtime-config) (#%app configure '#f)))\n   (#%require syntax/parse/define)\n   (define-syntaxes\n    (#%module-begin)\n    ...)\n   (module* use #f (quote-syntax (#%plain-module-begin)))))\n```"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-10-16T08:12:15.000316",
          "text": "so it does not begin with `#%module-begin`"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-10-16T13:54:00.000151",
          "text": "<@Patrice> yes, sorry, I wanted to try it and maybe adapt the test before I merged the PR but I haven't had a chance yet"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-10-16T14:12:31.000462",
          "text": "<@Natosha> I see. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "359",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: anyone happen to know who the other racketeer in Mountain View is? <[URL]\nEun: Eric Dobson, maybe?\nChantelle: oh right!\nChantelle: brought to you by Nelson towards the bottom of that thread\nLatarsha: 1. Look for \"racketeers.csv\" in the menu 2. Click the \"vertical dots\" to the right of \"racketeers.csv\". (If you hover the mouse over these dots, it should say \"Layer Options\") 3. Click \"Open Data Table\" 4. Right-click any row, choose \"Add Row\" 5. Add yourself, hit enter\nLatarsha: (those are Nelson's instructions)\nKa: Chantelle Latarsha great! I haven't seen the thread yet apparently.\nKa: :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 8,
        "duration_minutes": 20.52,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Ka",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T13:47:15.000183",
          "text": "anyone happen to know who the other racketeer in Mountain View is? <https://www.google.com/maps/d/u/0/edit?mid=1i3zN11e_6te5ytduAiv1cidrIi4&amp;ll=37.31311276802874%2C-121.76553941601566&amp;z=11>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-10-17T13:52:27.000579",
          "text": " Eric Dobson, maybe?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T13:52:56.000104",
          "text": "oh right!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T14:06:36.000048",
          "text": "brought to you by <@Nelson> towards the bottom of that thread"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-17T14:07:02.000700",
          "text": "1. Look for \"racketeers.csv\" in the menu\n2. Click the \"vertical dots\" to the right of \"racketeers.csv\". (If you\nhover the mouse over these dots, it should say \"Layer Options\")\n3. Click \"Open Data Table\"\n4. Right-click any row, choose \"Add Row\"\n5. Add yourself, hit enter"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-17T14:07:12.000635",
          "text": "(those are <@Nelson>'s instructions)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:07:46.000022",
          "text": "<@Chantelle> <@Latarsha> great! I haven't seen the thread yet apparently."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:07:46.000444",
          "text": ":slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "360",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: woah! what is this?\nKa: and, how do I get my name on the list?\nChantelle: Ka <[URL]\nKa: It might be fun to have a slack app that shows racketeers nearby. e.g. [CODE]\nKa: and, allow for something like [CODE] and [CODE]\nChantelle: presumably opt-in with a way to have fine-grained access control - I don't want to be responsible for giving people the ability to stalk racketeers\nKa: yeah. that's a good point\nKa: works better as a company tool\nChantelle: definitely\nKa: (but yeah, it'd be opt-in)\nKa: The *other* thing that might be fun: <[URL]\nLatarsha: annoyingly we're at our limit for apps on free slack\nChantelle: that's both creepy and fascinating\nKa: ah! there you go.\nKa: Chantelle works great for large companies... of course.\nChantelle: it's almost like slack only accidentally took over foss communities :P\nKa: not a huge fan of this trend...\nKa: but, if that's what people want, then...\nChantelle: ¯\\_(ツ)_/¯",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 19,
        "duration_minutes": 35.9,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:05:58.000185",
          "text": "woah! what is this?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:06:16.000461",
          "text": "and, how do I get my name on the list?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T14:06:25.000376",
          "text": "<@Ka> <https://groups.google.com/forum/#!topic/racket-users/Xss3WBAN5bU>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:26:15.000343",
          "text": "It might be fun to have a slack app that shows racketeers nearby. e.g. `/geo nearby`"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:27:16.000188",
          "text": "and, allow for something like `/geo set 90210` and `/geo whereis @apg`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T14:28:24.000454",
          "text": "presumably opt-in with a way to have fine-grained access control - I don't want to be responsible for giving people the ability to stalk racketeers"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:29:59.000594",
          "text": "yeah. that's a good point"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:30:05.000486",
          "text": "works better as a company tool"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T14:30:17.000052",
          "text": "definitely"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:30:19.000310",
          "text": "(but yeah, it'd be opt-in)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:30:50.000301",
          "text": "The *other* thing that might be fun: <https://racket.slack.com/apps/A11MJ51SR-donut>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-17T14:31:35.000490",
          "text": "annoyingly we're at our limit for apps on free slack"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T14:31:39.000466",
          "text": "that's both creepy and fascinating"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:32:06.000627",
          "text": "ah! there you go."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:32:20.000123",
          "text": "<@Chantelle> works great for large companies... of course."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T14:33:19.000432",
          "text": "it's almost like slack only accidentally took over foss communities :P"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:41:12.000018",
          "text": "not a huge fan of this trend..."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T14:41:25.000038",
          "text": "but, if that's what people want, then..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T14:41:52.000393",
          "text": "¯\\_(ツ)_/¯"
        }
      ]
    },
    {
      "conversation_id": "361",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo I have Yet Another Question to throw your way… could you explain to me why this program produces an unbound identifier error? [CODE_BLOCK] I tried using the macro stepper to debug this example, but the macro stepper seems to actually error out on this code. I tried using Theron’s [CODE], and at first glance, it seemed like the inner [CODE] has all the right scopes, so I don’t understand why it isn’t bound. (And for what it’s worth, it also happens on racket7.)\nVincenzo: At first glance, when the [CODE] submodule is compiled, there will be a fresh compile-time instantiation of the enclosing module, and it makes a fresh introducer. If that's on the right track, the way to preserve a scope across module instantiations is to embed it in a syntax object (really, a pair: one with and one without) and extract it out later with [CODE] (using the pair).\nKimbery: Oh, I see, that makes sense. I think using [CODE] actually crossed my mind at one point over the past few days, but I forgot about it while I was dealing with a bunch of other things. :)\nKimbery: Yes, replacing the [CODE] with this seems to solve the problem: [CODE_BLOCK] …which seems a little roundabout, but I guess it makes sense.\nKimbery: With that fix + the extra [CODE] changes, namespacing _finally_ seems to work properly inside [CODE] submodules.\nKimbery: Now I just need to figure out how on earth to handle the REPL/top-level. :/\nKimbery: It does seem tricky. In modules, I surround the module body with a [CODE] I introduce in [CODE]. At the top-level, that’s obviously not an option. I’m not sure if it’s safe to use the same introducers for all forms at the top level, then just make [CODE] use them.\nKimbery: Okay, I got the top level working, which means my scribble docs render… but getting scribble to understand code with multiple namespaces is not going to be easy. :sob:\nKimbery: Vincenzo I just pushed a commit without the unnecessary [CODE], feel free to merge (or I can).\nKimbery: I am planning on inlining the updated definition of [CODE] into Hackett to support older Racket versions, but I am trying to make sure that I can legally do so, since Hackett is licensed under a BSD-like license and Racket is LGPL, which are incompatible. However, looking at the relicensing effort, it looks like all the authors of that code have granted permission to relicense under MIT, which _I think_ means I can safely reuse the code as long as I include the MIT license text. I’d imagine nobody in here is a lawyer, though. :)\nKa: IANAL, but :wave: seems fine. :stuck_out_tongue:\nVincenzo: Kimbery IANAL, either, but it sounds right to me\nChantelle: Kimbery (warning: bad and vague legal advice) If inlining the updated definition involves copying only code that _you_ wrote, then I think licensing doesn't really apply since you own the copyright\nKimbery: it doesn’t, which is the problem.\nKimbery: I’m not going to worry about it too much. I put the MIT license at the top of the module with a copyright notice for PLT Design, and all the copyright holders for that piece of code are core Racket folks, so I doubt anyone is going to take legal action against me for copying a couple dozen lines of code. :)\nKa: oracle didn't care :slightly_smiling_face:\nKimbery: I would be much more careful if Oracle were the copyright holder. ;)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 17,
        "duration_minutes": 168.82,
        "contains_question": true,
        "action_keywords": [
          "action",
          "fix",
          "need to",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T16:21:35.000043",
          "text": "<@Vincenzo> I have Yet Another Question to throw your way… could you explain to me why this program produces an unbound identifier error?\n```\n#lang racket\n\n(require syntax/parse/define)\n\n(begin-for-syntax\n  (define introducer (make-syntax-introducer #t)))\n\n(define-simple-macro (begin/introduce form ...)\n  #:with [form* ...] (map introducer (attribute form))\n  (begin form* ...))\n\n(begin/introduce\n  (define x 42))\n\n(module* name #f\n  (begin/introduce\n    x)) ; unbound identifier in module\n```\nI tried using the macro stepper to debug this example, but the macro stepper seems to actually error out on this code. I tried using <@Theron>’s `debug-scopes`, and at first glance, it seemed like the inner `x` has all the right scopes, so I don’t understand why it isn’t bound. (And for what it’s worth, it also happens on racket7.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-17T16:25:03.000262",
          "text": "At first glance, when the `name` submodule is compiled, there will be a fresh compile-time instantiation of the enclosing module, and it makes a fresh introducer.\nIf that's on the right track, the way to preserve a scope across module instantiations is to embed it in a syntax object (really, a pair: one with and one without) and extract it out later with `make-syntax-delta-introducer` (using the pair)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T16:30:06.000142",
          "text": "Oh, I see, that makes sense. I think using `make-syntax-delta-introducer` actually crossed my mind at one point over the past few days, but I forgot about it while I was dealing with a bunch of other things. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T16:40:16.000585",
          "text": "Yes, replacing the `begin-for-syntax` with this seems to solve the problem:\n```\n(define-simple-macro (define-introducer-pair x:id y:id)\n  #:with a (datum-&gt;syntax #f 'a)\n  #:with b ((make-syntax-introducer #t) #'a)\n  (begin\n    (define-syntaxes [a b] (values #f #f))\n    (begin-for-syntax\n      (define-values [x y] (values (quote-syntax a) (quote-syntax b))))))\n\n(define-introducer-pair unintro intro)\n\n(begin-for-syntax\n  (define introducer (make-syntax-delta-introducer intro unintro)))\n```\n…which seems a little roundabout, but I guess it makes sense."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T16:49:21.000200",
          "text": "With that fix + the extra `splicing-syntax-parameterize` changes, namespacing _finally_ seems to work properly inside `(module* m #f ....)` submodules."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T16:55:17.000084",
          "text": "Now I just need to figure out how on earth to handle the REPL/top-level. :/"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T16:59:18.000085",
          "text": "It does seem tricky. In modules, I surround the module body with a `splicing-syntax-parameterize` I introduce in `#%module-begin`. At the top-level, that’s obviously not an option. I’m not sure if it’s safe to use the same introducers for all forms at the top level, then just make `#%top-interaction` use them."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T17:14:19.000162",
          "text": "Okay, I got the top level working, which means my scribble docs render… but getting scribble to understand code with multiple namespaces is not going to be easy. :sob:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T17:42:55.000395",
          "text": "<@Vincenzo> I just pushed a commit without the unnecessary `with-syntax`, feel free to merge (or I can)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T18:03:52.000333",
          "text": "I am planning on inlining the updated definition of `splicing-syntax-parameterize` into Hackett to support older Racket versions, but I am trying to make sure that I can legally do so, since Hackett is licensed under a BSD-like license and Racket is LGPL, which are incompatible. However, looking at the relicensing effort, it looks like all the authors of that code have granted permission to relicense under MIT, which _I think_ means I can safely reuse the code as long as I include the MIT license text. I’d imagine nobody in here is a lawyer, though. :)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T18:06:21.000137",
          "text": "IANAL, but :wave: seems fine. :stuck_out_tongue:"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-17T18:19:06.000435",
          "text": "<@Kimbery> IANAL, either, but it sounds right to me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T19:06:03.000121",
          "text": "<@Kimbery> (warning: bad and vague legal advice) If inlining the updated definition involves copying only code that _you_ wrote, then I think licensing doesn't really apply since you own the copyright"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T19:06:24.000187",
          "text": "it doesn’t, which is the problem."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T19:08:15.000179",
          "text": "I’m not going to worry about it too much. I put the MIT license at the top of the module with a copyright notice for PLT Design, and all the copyright holders for that piece of code are core Racket folks, so I doubt anyone is going to take legal action against me for copying a couple dozen lines of code. :)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T19:09:49.000013",
          "text": "oracle didn't care :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T19:10:24.000019",
          "text": "I would be much more careful if Oracle were the copyright holder. ;)"
        }
      ]
    },
    {
      "conversation_id": "362",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Hopelessly? ;)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T16:55:36.000613",
          "text": "Hopelessly? ;)"
        }
      ]
    },
    {
      "conversation_id": "363",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Go ahead and merge - thanks!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-17T17:54:51.000123",
          "text": "Go ahead and merge - thanks!"
        }
      ]
    },
    {
      "conversation_id": "364",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: welp, i tried",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T19:06:53.000043",
          "text": "welp, i tried"
        }
      ]
    },
    {
      "conversation_id": "365",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: Clorinda what do you recommend instead of [CODE] for \"arrow\"?\nNelson: after reading the discussion in [CODE]scribble/manual`, but for internal documentation\nNelson: not sure what ought to be in the language ... just feeling that [CODE] makes writing documentation convenient, and I'd want similar-but-not-exactly-the-same tools for internal docs\nNelson: on that note, reminds me that when I search the docs for [CODE], I should see there's a Typed Racket version of it (also if I'm just browsing the [CODE] docs)\nKimbery: I’ve thought about that a lot, too. [CODE] would be a good start. Unsure if you want full literate programming or not.\nNelson: I've never tried LP but I'm very skeptical\nNelson: because I think there'd be lots of things like: because of this 1 idea/goal, we change the code in N different places\nKimbery: I find [CODE] is too “heavyweight”. But on the other hand, I have a _lot_ of comments in Hackett. It would be nice for them to render somewhere and let me link between them.\nChantelle: Vincenzo When a TCP output port is closed _only_ via a custodian shutdown (no calls to [CODE] or to [CODE]) is a TCP FIN packet sent? If so, is there any way for a Racket program to forcefully close a TCP connection without sending a FIN packet? Use case is testing that servers / clients handle unexpectedly terminated TCP connections correctly.\nChantelle: (reading more, I think what I'm looking for is a way to control whether FIN, RST, or nothing at all is sent from one end to the other when ports are closed)\nNelson: if only we had [CODE] ?\nChantelle: yes please to scribble docs that cooperate well with [CODE]\nChantelle: it's frustrating that docs are included via a single [CODE] export so it's hard to define documentation in a piecemeal way...\nNelson: I think the [CODE] package has a solution\nNelson: but I've never looked into it\nNelson: or, would it be possible to do [CODE] that looks for [CODE] syntax and lifts those into a \"big\" [CODE] ?\nKimbery: in theory, yes, but meta-languages that introduce new forms are currently held together with spit and baling wire\nChantelle: if the docs are implicitly stitched together then the scribble prose section order is dependent on the order of how things are implemented in the module which sounds Not Fun\nKimbery: this problem is hard, and I would like someone to solve it, but I have no interest in trying to solve it myself in the near future :)\nChantelle: heh I feel that way about a lot of things\nKa: random question: how can I shadow a package with raco such that I can work on a smaller piece of the distribution (e.g. slideshow)?\nKa: [CODE] is what I thought might work... but that doesn't seem to do what i want.\nKimbery: [CODE] should do the trick if you already have [CODE] installed\nNelson: or [CODE] if you want a copy of the slideshow repo\nKa: hmm. so update instead! perfect!\nKa: thanks\nKa: hmm. doing that rebuilds the world?\nKa: that's unexpected.\nNelson: yes, it runs [CODE] for you\nKa: i'd expect that, but i guess i wouldn't expect that it'd also re-setup all packages\nNelson: (there's a [CODE] option)\nNelson: IIUC it's because they might depend on slideshow.\nNelson: since most don't, the setup should go fast\nKa: it's tolerable, sure. it rebuilt everything -- the srfi-lib's and things I wouldn't expect.\nKa: but... ¯\\_(ツ)_/¯\nNelson: is there a good alternative? I guess racket would have to know all things that depend on slideshow\nChantelle: how exactly is this happening? [CODE] looks for packages that depend on slideshow's package, then [CODE] checks each module in each of those packages and skips it (but still prints a [CODE] line) if the module doesn't depend on slideshow?\nNelson: I think right now, [CODE] rebuilds every collection. If a collection's dependencies haven't changed, then the rebuild doesn't happen.\nVincenzo: Chantelle I don't think there's a way to close a TCP connection within Racket without sending FIN.\nVincenzo: When [CODE] runs [CODE], it rebuilds any collection that is included in any package that declares a dependency on the changed package, if I remember correctly\nVincenzo: My quick searches don't turn up an easy way to control this\nChantelle: It's not an obstacle for me at the moment so don't sweat it",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 42,
        "duration_minutes": 97.2,
        "contains_question": true,
        "action_keywords": [
          "build",
          "discuss",
          "implement",
          "please",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Kimbery",
          "Nelson",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T22:36:32.000036",
          "text": "<@Clorinda> what do you recommend instead of `arr` for \"arrow\"?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T22:58:38.000166",
          "text": "after reading the discussion in `<https://github.com/racket/typed-racket/pull/633>`, I'm thinking Racket could use a language like `scribble/manual`, but for internal documentation"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:00:48.000245",
          "text": "not sure what ought to be in the language ... just feeling that `scribble/manual` makes writing documentation convenient, and I'd want similar-but-not-exactly-the-same tools for internal docs"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:04:05.000106",
          "text": "on that note, reminds me that when I search the docs for `hc-append`, I should see there's a Typed Racket version of it (also if I'm just browsing the `pict` docs)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T23:04:10.000063",
          "text": "I’ve thought about that a lot, too. `scribble/manual` would be a good start. Unsure if you want full literate programming or not."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:05:28.000045",
          "text": "I've never tried LP but I'm very skeptical"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:06:04.000120",
          "text": "because I think there'd be lots of things like: because of this 1 idea/goal, we change the code in N different places"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T23:06:28.000079",
          "text": "I find `scribble/lp` is too “heavyweight”. But on the other hand, I have a _lot_ of comments in Hackett. It would be nice for them to render somewhere and let me link between them."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T23:07:02.000073",
          "text": "<@Vincenzo> When a TCP output port is closed _only_ via a custodian shutdown (no calls to `close-&lt;i/o&gt;-port` or to `tcp-abandon-port`) is a TCP FIN packet sent? If so, is there any way for a Racket program to forcefully close a TCP connection without sending a FIN packet? Use case is testing that servers / clients handle unexpectedly terminated TCP connections correctly."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T23:09:13.000016",
          "text": "(reading more, I think what I'm looking for is a way to control whether FIN, RST, or nothing at all is sent from one end to the other when ports are closed)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:11:20.000170",
          "text": "if only we had `(module+ scribble/manual ....)` ?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T23:12:14.000060",
          "text": "yes please to scribble docs that cooperate well with `module+`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T23:12:54.000063",
          "text": "it's frustrating that docs are included via a single `doc` export so it's hard to define documentation in a piecemeal way..."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:14:15.000002",
          "text": "I think the `mcfly` package has a solution"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:14:19.000036",
          "text": "but I've never looked into it"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:15:42.000094",
          "text": "or, would it be possible to do `#lang doc+ racket` that looks for `(begin-doc ....)` syntax and lifts those into a \"big\" `module*` ?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T23:18:03.000028",
          "text": "in theory, yes, but meta-languages that introduce new forms are currently held together with spit and baling wire"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T23:18:26.000119",
          "text": "if the docs are implicitly stitched together then the scribble prose section order is dependent on the order of how things are implemented in the module which sounds Not Fun"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T23:20:11.000108",
          "text": "this problem is hard, and I would like someone to solve it, but I have no interest in trying to solve it myself in the near future :)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T23:20:24.000124",
          "text": "heh I feel that way about a lot of things"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:36:33.000023",
          "text": "random question: how can I shadow a package with raco such that I can work on a smaller piece of the distribution (e.g. slideshow)?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:36:53.000108",
          "text": "`raco pkg install --link -u ./slideshow-lib` is what I thought might work... but that doesn't seem to do what i want."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-17T23:38:37.000084",
          "text": "`raco pkg update --link slideshow-lib` should do the trick if you already have `slideshow-lib` installed"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:41:16.000005",
          "text": "or `raco pkg update --clone slideshow` if you want a copy of the slideshow repo"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:42:18.000210",
          "text": "hmm. so update instead! perfect!"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:43:05.000004",
          "text": "thanks"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:46:35.000044",
          "text": "hmm. doing that rebuilds the world?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:46:46.000045",
          "text": "that's unexpected."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:46:54.000141",
          "text": "yes, it runs `raco setup` for you"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:47:18.000006",
          "text": "i'd expect that, but i guess i wouldn't expect that it'd also re-setup all packages"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:47:20.000066",
          "text": "(there's a `--no-setup` option)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:48:21.000096",
          "text": "IIUC it's because they might depend on slideshow."
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:48:32.000080",
          "text": "since most don't, the setup should go fast"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:49:26.000093",
          "text": "it's tolerable, sure. it rebuilt everything -- the srfi-lib's and things I wouldn't expect."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-17T23:49:31.000055",
          "text": "but... ¯\\_(ツ)_/¯"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-17T23:55:28.000037",
          "text": "is there a good alternative? I guess racket would have to know all things that depend on slideshow"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-17T23:56:46.000111",
          "text": "how exactly is this happening? `raco setup` looks for packages that depend on slideshow's package, then `raco setup` checks each module in each of those packages and skips it (but still prints a `raco setup: /path/to/mod` line) if the module doesn't depend on slideshow?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-18T00:00:28.000102",
          "text": "I think right now, `raco setup` rebuilds every collection. If a collection's dependencies haven't changed, then the rebuild doesn't happen."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-18T00:01:43.000050",
          "text": "<@Chantelle> I don't think there's a way to close a TCP connection within Racket without sending FIN."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-18T00:04:05.000114",
          "text": "When `raco pkg` runs `raco setup`, it rebuilds any collection that is included in any package that declares a dependency on the changed package, if I remember correctly"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-18T00:12:31.000143",
          "text": "My quick searches don't turn up an easy way to control this"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T00:13:44.000083",
          "text": "It's not an obstacle for me at the moment so don't sweat it"
        }
      ]
    },
    {
      "conversation_id": "366",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: is that something that would be very difficult to change?\nVincenzo: Offhand, I don't even know how to do it in C. As for avoiding both FIN and RST, is that possible without unplugging the machine or otherwise disabling the OS?\nChantelle: ¯\\_(ツ)_/¯\nChantelle: I don't know enough about how kernels expose the tcp/ip stack to user programs. I'm only barely sure that it lives in the kernel and not userland.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 5.67,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T00:02:18.000175",
          "text": "is that something that would be very difficult to change?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-18T00:06:15.000039",
          "text": "Offhand, I don't even know how to do it in C. As for avoiding both FIN and RST, is that possible without unplugging the machine or otherwise disabling the OS?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T00:06:56.000009",
          "text": "¯\\_(ツ)_/¯"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T00:07:58.000010",
          "text": "I don't know enough about how kernels expose the tcp/ip stack to user programs. I'm only barely sure that it lives in the kernel and not userland."
        }
      ]
    },
    {
      "conversation_id": "367",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Ka To add to Matthew’s comment, [CODE] doesn’t really know about packages, only collections. When [CODE] installs or updates a package, it sets up the relevant links so that [CODE] sees the package’s contents as “just another collection” (or set of collections, in the case of multi-collection packages). When [CODE] runs [CODE], it provides the collections of the package being updated. As Matthew notes, this can end up being a lot of extraneous things if other packages provide modules in the same collection as the package being updated, or if they provide modules in the same collections as a package’s dependents.\nKimbery: The underlying API in [CODE] hints at some of this: note that [CODE] takes a [CODE] argument, but it doesn’t let you specify anything about packages. <[URL]\nKa: Hmmm.\nKa: Thanks for all the interesting context!\nKa: So is the Racket distribution a single collection?\nKimbery: No, a “collection” is just a top-level namespace, like [CODE] or [CODE], and the core provides modules in many collections. I think the terminology is a little odd.\nKimbery: But this is all the way it is for legacy reasons.\nKa: Thats what I thought a collection was. OK. I guess I still don’t quite understand the world rebuild...but it’s not necessary to at the moment.\nKimbery: Yes, it’s strange. It would be better if [CODE] were smarter and knew about packages, but collections long predate the current package system, so packages were sort of bolted on top.\nKa: Ok.\nKimbery: (At least that is my understanding. I actually haven’t been using Racket long enough to have experienced it pre-package system.)\nChantelle: plus it's technically the second package system\nChantelle: I've no idea what using PLaneT (the first system) was like\nChantelle: is there a way to peek channels or async buffered channel like one can peek a port?\nVincenzo: Chantelle There's no peek operation on normal channels (and I think adding one is probably not a good idea, since they're intended for synchronous, atomic exchange). Asynch channels don't currently provide a peek operation, but I see no particular obstacle to adding it.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 15,
        "duration_minutes": 498.6,
        "contains_question": true,
        "action_keywords": [
          "build",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-18T00:41:24.000087",
          "text": "<@Ka> To add to Matthew’s comment, `raco setup` doesn’t really know about packages, only collections. When `raco pkg` installs or updates a package, it sets up the relevant links so that `raco setup` sees the package’s contents as “just another collection” (or set of collections, in the case of multi-collection packages). When `raco pkg` runs `setup`, it provides the collections of the package being updated. As Matthew notes, this can end up being a lot of extraneous things if other packages provide modules in the same collection as the package being updated, or if they provide modules in the same collections as a package’s dependents."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-18T00:42:32.000131",
          "text": "The underlying API in `setup/setup` hints at some of this: note that `setup` takes a `#:collections` argument, but it doesn’t let you specify anything about packages. <http://docs.racket-lang.org/raco/setup-plt-plt.html#%28def._%28%28lib._setup%2Fsetup..rkt%29._setup%29%29>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T00:43:08.000141",
          "text": "Hmmm."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T00:43:22.000089",
          "text": "Thanks for all the interesting context!"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T00:45:41.000192",
          "text": "So is the Racket distribution a single collection?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-18T00:46:44.000072",
          "text": "No, a “collection” is just a top-level namespace, like `racket/` or `syntax/`, and the core provides modules in many collections. I think the terminology is a little odd."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-18T00:46:57.000166",
          "text": "But this is all the way it is for legacy reasons."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T00:47:54.000022",
          "text": "Thats what I thought a collection was. OK. I guess I still don’t quite understand the world rebuild...but it’s not necessary to at the moment."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-18T00:48:56.000010",
          "text": "Yes, it’s strange. It would be better if `raco setup` were smarter and knew about packages, but collections long predate the current package system, so packages were sort of bolted on top."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T00:49:11.000120",
          "text": "Ok."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-18T00:49:22.000037",
          "text": "(At least that is my understanding. I actually haven’t been using Racket long enough to have experienced it pre-package system.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T00:51:03.000070",
          "text": "plus it's technically the second package system"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T00:51:31.000053",
          "text": "I've no idea what using PLaneT (the first system) was like"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T00:57:12.000172",
          "text": "is there a way to peek channels or async buffered channel like one can peek a port?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-18T09:00:00.000057",
          "text": "<@Chantelle> There's no peek operation on normal channels (and I think adding one is probably not a good idea, since they're intended for synchronous, atomic exchange). Asynch channels don't currently provide a peek operation, but I see no particular obstacle to adding it."
        }
      ]
    },
    {
      "conversation_id": "368",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Clorinda: Nelson I think [CODE] is a great name =) -- this is sort of a silly bias I have, but when we were using [CODE] everywhere in Typed Racket (that used to be the name of the struct) in conversation and all over the code base you would see references to them as \"arity\" or similar. when I called them an \"arity\" Sam got annoyed and corrected me that it was \"arrow\" -- I appreciated the correction, and wanted us to avoid the confusion in the future, so I've been trying to avoid [CODE]. This is probably just me being crazy and anal to some degree, TBH ¯\\_(ツ)_/¯\nClorinda: <[URL]\nMarlin: That's something I've wanted for a long time. Thanks, Clorinda\nClorinda: Marlin me too! happy to be the one to add it! (it was pretty easy, all the hooks for such a customization already existed in the framework, thankfully. thank you all who helped design it that way!)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 181.77,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clorinda",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T07:19:57.000156",
          "text": "<@Nelson> I think `arrow` is a great name =)  -- this is sort of a silly bias I have, but when we were using `arr` everywhere in Typed Racket (that used to be the name of the struct) in conversation and all over the code base you would see references to them as \"arity\" or similar. when I called them an \"arity\" Sam got annoyed and corrected me that it was \"arrow\" -- I appreciated the correction, and wanted us to avoid the confusion in the future, so I've been trying to avoid `arr`. This is probably just me being crazy and anal to some degree, TBH ¯\\_(ツ)_/¯ "
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T10:19:51.000327",
          "text": "<https://github.com/racket/racket/commit/9e16d3f9c9c218825a483f6b53750ed9bbee2470>"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-18T10:20:55.000138",
          "text": "That's something I've wanted for a long time. Thanks, <@Clorinda>"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T10:21:43.000394",
          "text": "<@Marlin> me too! happy to be the one to add it! (it was pretty easy, all the hooks for such a customization already existed in the framework, thankfully. thank you all who helped design it that way!)"
        }
      ]
    },
    {
      "conversation_id": "369",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: There isn't a separate TR version, though\nLatarsha: David Christiansen (sadly not on slack) has been working on a tool for this recently",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.83,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T09:13:01.000546",
          "text": "There isn't a separate TR version, though"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T09:13:51.000185",
          "text": "David Christiansen (sadly not on slack) has been working on a tool for this recently"
        }
      ]
    },
    {
      "conversation_id": "370",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Tina OMG Robby….best…email…ever. :smile:\nRosalee: (The one you sent about the v6.11 release.)\nRosalee: [CODE_BLOCK]\nTina: :slightly_smiling_face:\nTina: I have a lot of trouble removing the “now”s on my own……",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 2.73,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T10:40:55.000296",
          "text": "<@Tina> OMG Robby….best…email…ever. :smile:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T10:41:08.000395",
          "text": "(The one you sent about the v6.11 release.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T10:41:22.000504",
          "text": "```\n(regexp-replace*\n #rx\" now\"\n \"DrRacket's Program Countour is now significantly more efficient;\nusing it now no longer hurts DrRacket's interactivity now\"\n \"\")\n```"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-18T10:43:28.000283",
          "text": ":slightly_smiling_face:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-18T10:43:39.000209",
          "text": "I have a lot of trouble removing the “now”s on my own……"
        }
      ]
    },
    {
      "conversation_id": "371",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: edit: I'd like to see there's a [CODE] and \"readable\" versions of its types for pict functions\nLatarsha: There should be a note that [CODE] exists in the docs where it lists other libraries provided with Typed Racket",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 3.6,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-10-18T11:08:48.000211",
          "text": "edit: I'd like to see there's a `typed/pict` and \"readable\" versions of its types for pict functions"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T11:12:24.000241",
          "text": "There should be a note that `typed/pict` exists in the docs where it lists other libraries provided with Typed Racket"
        }
      ]
    },
    {
      "conversation_id": "372",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: Hey All, I’m a frontend web developer and somewhat new to computer programming. Wanted to see if I could get some recommendations as to a systematic approach. I recently started the HtDP book and planned moving to the SICP book after that. If anyone has any recommendations for books or resources for learning programming through Racket, I’d love to hear about it. I also have the Realm of Racket book coming soon. Thanks! Dustin\nDavid: Jalisa, I can give you an anti-recommendation: I believe SICP might be a good tenth book for a person somewhat new to computer programming, but not a second. The style of code in it is dated, and it talks about domains far removed from most people’s interests (for example, calculus). We have more accessible resources, including Realm of Racket and Beautiful Racket.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 63.78,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "David",
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T11:38:05.000478",
          "text": "Hey All,\n\nI’m a frontend web developer and somewhat new to computer programming. Wanted to see if I could get some recommendations as to a systematic approach. I recently started the HtDP book and planned moving to the SICP book after that.\n\nIf anyone has any recommendations for books or resources for learning programming through Racket, I’d love to hear about it. I also have the Realm of Racket book coming soon.\n\nThanks!\nDustin "
        },
        {
          "user": "David",
          "timestamp": "2017-10-18T12:41:52.000082",
          "text": "<@Jalisa>, I can give you an anti-recommendation: I believe SICP might be a good tenth book for a person somewhat new to computer programming, but not a second. The style of code in it is dated, and it talks about domains far removed from most people’s interests (for example, calculus). We have more accessible resources, including Realm of Racket and Beautiful Racket."
        }
      ]
    },
    {
      "conversation_id": "373",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Has anyone else noticed that the latest version of the acmart template (the one Vincenzo updated to a while back), has an ugly footnote on the first page?\nRosalee: I mean, it does appear to be part of the standard distribution (as shown from the sample), but it just looks gross.\nLatarsha: I don't see any footnotes there\nRosalee: Latarsha : &gt; Authors’ addresses: Gang Zhou, College of William and Mary, 104 Jamestown Rd, Williamsburg, VA, 23185, USA, [EMAIL] Valerie Béranger, Inria Paris-Rocquencourt, Rocquencourt, France, [EMAIL] Aparna Patel, Rajiv GandhiUniversity, Rono-Hills, Doimukh, Arunachal Pradesh, India, [EMAIL] Huifen Chan, Tsinghua University,30 Shuangqing Rd, Haidian Qu, Beijing Shi, China, [EMAIL] Ting Yan, Eaton Innovation Center, Prague,Czech Republic, [EMAIL] Tian He, University of Virginia, School of Engineering, Charlottesville, VA, 22903,USA, University of Minnesota, USA, [EMAIL] Chengdu Huang; John A. Stankovic; Tarek F. Abdelzaher, Universityof Virginia, School of Engineering, Charlottesville, VA, 22903, USA.\nRosalee: Right above the copyright notice.\nLatarsha: Not sure I would call that a footnote, but sure\nLatarsha: and yes, that's part of the template\nRosalee: Okay, what would you call it?\nLatarsha: not sure (I would say that a footnote has a reference from the main text, like the footnote on p2 of that sample)\nLatarsha: You could certainly complain to the PACM people about it\nRosalee: Fair\nRosalee: I just said footnote because (a) I didn’t have a better name for it and (b), I’ve seen people do that sort of thing accept just attached to the title.\nRosalee: Anyway, thanks.\nJalisa: David I think you’re probably right on that, and I did wonder about it being a tad dated. I’ll instead move to _Realm of Racket_ and at some point _Beautiful Racket_. I didn’t realize it taught programming is such a way, thanks! My other thought (eventually) was _Software Foundations:_ <[URL]\nRosalee: Jalisa I would recommend against that.\nRosalee: (Using software foundations)\nRosalee: Its a great way to get into theorem provers (or at least coq)\nRosalee: But for generic programming, I suspect it won’t be as relevant.\nRosalee: But I could always be wrong. :slightly_smiling_face:\nJalisa: Okay, thanks! Perhaps I should instead do more hands-on exercises and explore the documentation. The thing I found most attractive about Racket was the documentation. Thanks again.\nJalisa: My goal is to explore Racket for a while (who knows where that might go) and possibly learn Rust and Haskell later on. I’ll check that out, thanks!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 21,
        "duration_minutes": 25.27,
        "contains_question": true,
        "action_keywords": [
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jalisa",
          "Latarsha",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:52:38.000758",
          "text": "Has anyone else noticed that the latest version of the acmart template (the one <@Vincenzo> updated to a while back), has an ugly footnote on the first page?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:53:27.000252",
          "text": "I mean, it does appear to be part of the standard distribution (as shown from the sample), but it just looks gross."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T12:54:46.000318",
          "text": "I don't see any footnotes there"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:55:52.000560",
          "text": "<@Latarsha> :\n&gt; Authors’ addresses: Gang Zhou, College of William and Mary, 104 Jamestown Rd, Williamsburg, VA, 23185, USA, <mailto:gang_zhou@wm.edu|gang_zhou@wm.edu>; Valerie Béranger, Inria Paris-Rocquencourt, Rocquencourt, France, <mailto:beranger@inria.fr|beranger@inria.fr>; Aparna Patel, Rajiv GandhiUniversity, Rono-Hills, Doimukh, Arunachal Pradesh, India, <mailto:aprna_patel@rguhs.ac.in|aprna_patel@rguhs.ac.in>; Huifen Chan, Tsinghua University,30 Shuangqing Rd, Haidian Qu, Beijing Shi, China, <mailto:chan0345@tsinghua.edu.cn|chan0345@tsinghua.edu.cn>; Ting Yan, Eaton Innovation Center, Prague,Czech Republic, <mailto:yanting02@gmail.com|yanting02@gmail.com>; Tian He, University of Virginia, School of Engineering, Charlottesville, VA, 22903,USA, University of Minnesota, USA, <mailto:tinghe@uva.edu|tinghe@uva.edu>; Chengdu Huang; John A. Stankovic; Tarek F. Abdelzaher, Universityof Virginia, School of Engineering, Charlottesville, VA, 22903, USA."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:56:04.000205",
          "text": "Right above the copyright notice."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T12:56:28.000005",
          "text": "Not sure I would call that a footnote, but sure"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T12:56:32.000383",
          "text": "and yes, that's part of the template"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:56:43.000263",
          "text": "Okay, what would you call it?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T12:57:37.000112",
          "text": "not sure (I would say that a footnote has a reference from the main text, like the footnote on p2 of that sample)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-18T12:57:56.000033",
          "text": "You could certainly complain to the PACM people about it"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:58:34.000125",
          "text": "Fair"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:58:57.000462",
          "text": "I just said footnote because (a) I didn’t have a better name for it and (b), I’ve seen people do that sort of thing accept just attached to the title."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T12:59:04.000326",
          "text": "Anyway, thanks."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T13:03:34.000245",
          "text": "<@David> I think you’re probably right on that, and I did wonder about it being a tad dated. I’ll instead move to _Realm of Racket_ and at some point _Beautiful Racket_. I didn’t realize it taught programming is such a way, thanks! \n\nMy other thought (eventually) was _Software Foundations:_\n\n<http://softwarefoundations.cis.upenn.edu|softwarefoundations.cis.upenn.edu> "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T13:05:15.000414",
          "text": "<@Jalisa> I would recommend against that."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T13:05:21.000243",
          "text": "(Using software foundations)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T13:06:05.000262",
          "text": "Its a great way to get into theorem provers (or at least coq)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T13:06:49.000044",
          "text": "But for generic programming, I suspect it won’t be as relevant."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-18T13:06:52.000782",
          "text": "But I could always be wrong. :slightly_smiling_face:"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T13:10:10.000526",
          "text": "Okay, thanks! Perhaps I should instead do more hands-on exercises and explore the documentation. The thing I found most attractive about Racket was the documentation. Thanks again. "
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T13:17:54.000444",
          "text": "My goal is to explore Racket for a while (who knows where that might go) and possibly learn Rust and Haskell later on. I’ll check that out, thanks!"
        }
      ]
    },
    {
      "conversation_id": "374",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: Jalisa I'm not sure it's a great second book, but The New Turing Omnibus will introduce you to a lot of concepts in Computing. It won't teach you Racket though, if that's your goal.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-18T13:16:22.000642",
          "text": "<@Jalisa> I'm not sure it's a great second book, but The New Turing Omnibus will introduce you to a lot of concepts in Computing. It won't teach you Racket though, if that's your goal."
        }
      ]
    },
    {
      "conversation_id": "375",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: Is it possible to build a library that provides modules for both Racket and Typed Racket without writing the code twice? Any examples of this being done in the wild?\nClorinda: Nancie It's not clear to me what you're asking. Typed Racket modules can be required in Racket code, and untyped Racket modules' definitions can be used if an adaptor module (i.e. a module that declares the types for any desired definitions) is written. But I think you're asking about something else -- can you say more about what you're trying to do?\nKa: Clorinda Nancie are you using contracts in the non-Typed Racket code?\nNancie: I think the adapter module is exactly what I'm looking for\nNancie: I just want to build a library that's convenient for users of either [CODE] without incurring any extra contract penalties\nKa: Nancie i'm actually curious about this too -- having not played around too much with Typed Racket\nKa: my (not so informed) understanding was that contracts provide most of the bridge necessary -- but maybe that's not accurate enough\nCorey: My take on this is that \"ideally\" you simply write your thing using Typed Racket. That is automatically usable by dynamic typed plain Racket, because it generates contracts. If you find the performance is fine, this is the simplest way to go.\nCorey: There was also some discussion on the mailing list\nNancie: I watched this a few days ago and found it pretty enlightening <[URL]\nCorey: My search fu only got the middle of the thread: <[URL]\nCorey: That was about using submodules to expose alternate interfaces\nCorey: (I have the full thread in Gmail but can't figure out how to link you to it in GGroups) ¯\\_(ツ)_/¯\nKa: there's usually a \"link\" button somewhere. the interface to google groups is .... not very usable.\nKa: but, awesome! I think I got it backwards. Write Typed Racket, get contracts for free for untyped Racket\nCorey: Yep. I mean, you _might_ find it too slow. But maybe not. If you like \"make it correct, then make it fast\" approach, that's probably the way to go?\nNancie: Yeah, I think that's the right way to do things\nCorey: Oh, circa May 2015 is when it switched to using Google Groups instead of the old list server. That explains why GGroups didn't have the start of that thread. :grin:\nCorey: <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 19,
        "duration_minutes": 100.55,
        "contains_question": true,
        "action_keywords": [
          "build",
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Clorinda",
          "Corey",
          "Ka",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-10-18T16:11:19.000407",
          "text": "Is it possible to build a library that provides modules for both Racket and Typed Racket without writing the code twice? Any examples of this being done in the wild?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T17:01:35.000167",
          "text": "<@Nancie> It's not clear to me what you're asking. Typed Racket modules can be required in Racket code, and untyped Racket modules' definitions can be used if an adaptor module (i.e. a module that declares the types for any desired definitions) is written. But I think you're asking about something else -- can you say more about what you're trying to do?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T17:32:31.000093",
          "text": "<@Clorinda> <@Nancie> are you using contracts in the non-Typed Racket code?"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-18T17:34:54.000068",
          "text": "I think the adapter module is exactly what I'm looking for"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-18T17:35:43.000118",
          "text": "I just want to build a library that's convenient for users of either `#lang` without incurring any extra contract penalties"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T17:38:51.000224",
          "text": "<@Nancie> i'm actually curious about this too -- having not played around too much with Typed Racket"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T17:39:22.000219",
          "text": "my (not so informed) understanding was that contracts provide most of the bridge necessary -- but maybe that's not accurate enough"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:40:55.000200",
          "text": "My take on this is that \"ideally\" you simply write your thing using Typed Racket. That is automatically usable by dynamic typed plain Racket, because it generates contracts. If you find the performance is fine, this is the simplest way to go."
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:41:02.000505",
          "text": "There was also some discussion on the mailing list"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-18T17:41:04.000397",
          "text": "I watched this a few days ago and found it pretty enlightening\n<https://www.youtube.com/watch?v=mtR3NupaRAQ>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:41:24.000418",
          "text": "My search fu only got the middle of the thread: <https://groups.google.com/forum/#!topicsearchin/racket-users/butterick$20typed$20racket$20submodules;context-place=searchin/racket-users/butterick$20typed$20racket$20submodules$20%7Csort:date/racket-users/Z431HQqIg6g>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:41:42.000290",
          "text": "That was about using submodules to expose alternate interfaces"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:42:12.000084",
          "text": "(I have the full thread in Gmail but can't figure out how to link you to it in GGroups) ¯\\_(ツ)_/¯"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T17:42:47.000266",
          "text": "there's usually a \"link\" button somewhere. the interface to google groups is .... not very usable."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-18T17:43:22.000255",
          "text": "but, awesome! I think I got it backwards. Write Typed Racket, get contracts for free for untyped Racket"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:44:18.000207",
          "text": "Yep. I mean, you _might_ find it too slow. But maybe not.\nIf you like \"make it correct, then make it fast\" approach, that's probably the way to go?"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-18T17:44:54.000217",
          "text": "Yeah, I think that's the right way to do things"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:51:43.000212",
          "text": "Oh, circa May 2015 is when it switched to using Google Groups instead of the old list server. That explains why GGroups didn't have the start of that thread. :grin:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-18T17:51:52.000014",
          "text": "<https://lists.racket-lang.org/users/archive/2015-March/066424.html>"
        }
      ]
    },
    {
      "conversation_id": "376",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Clorinda: I'm trying to just [CODE] in the contents of a Racket file using [CODE]\nClorinda: getting error [CODE] -- am I doing something silly here?\nClorinda: (I was hoping to just get the datum, e.g. [CODE] (the keyword))\nMarlin: [CODE], maybe?\nMarlin: hm, that didn't seem to work.\nMarlin: [CODE] did, but you don't get a [CODE] datum; instead, you get a [CODE] for the whole file.\nClorinda: I'm not wanting to do anything fancy (I don't think) -- just read over the file's sexps as lists\nVincenzo: Clorinda [CODE] isn't a keyword like [CODE], so you can't [CODE] just [CODE]\nKimbery: try [CODE]? <[URL]\nClorinda: aaaah, duh -- thanks Vincenzo. that's unfortunate for my simple, silly approach to skimming the file contents as a bunch of lists =(\nVincenzo: I haven't tried it, but you might be able to use [CODE] to discard the [CODE] line and then read the rest of the content (on the assumption that the rest is in S-expression form).\nMarlin: yeah, that works",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 12,
        "duration_minutes": 14.57,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clorinda",
          "Kimbery",
          "Marlin",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T19:21:51.000040",
          "text": "I'm trying to just `read` in the contents of a Racket file using `(read (open-input-file \"Desktop/foo/foo.rkt\"))`"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T19:22:06.000030",
          "text": "getting error `read: #lang not enabled in the current context` -- am I doing something silly here?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T19:23:01.000059",
          "text": "(I was hoping to just get the datum, e.g. `'#lang` (the keyword))"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-18T19:26:42.000155",
          "text": "`(parameterize ([read-accept-lang #t]) ...)`, maybe?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-18T19:29:32.000204",
          "text": "hm, that didn't seem to work."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-18T19:30:34.000253",
          "text": "`read-accept-reader` did, but you don't get a `'#lang` datum; instead, you get a `(module ...)` for the whole file."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T19:31:28.000096",
          "text": "I'm not wanting to do anything fancy (I don't think) -- just read over the file's sexps as lists"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-18T19:31:48.000090",
          "text": "<@Clorinda> `#lang` isn't a keyword like `#:lang`, so you can't `read` just `#lang`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-18T19:31:49.000032",
          "text": "try `with-module-reading-parameterization`? <http://docs.racket-lang.org/syntax/module-helpers.html#%28def._%28%28lib._syntax%2Fmodread..rkt%29._with-module-reading-parameterization%29%29>"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T19:32:55.000140",
          "text": "aaaah, duh -- thanks <@Vincenzo>. that's unfortunate for my simple, silly approach to skimming the file contents as a bunch of lists =("
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-18T19:34:18.000110",
          "text": "I haven't tried it, but you might be able to use `read-language` to discard the `#lang` line and then read the rest of the content (on the assumption that the rest is in S-expression form)."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-18T19:36:25.000283",
          "text": "yeah, that works"
        }
      ]
    },
    {
      "conversation_id": "377",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Clorinda: there's not a one-liner that will clone/download all the source code from pkgs.racket-lang.org... is there?\nChantelle: [CODE] I think\nChantelle: or at least I'm pretty sure theres a [CODE] command that does it\nClorinda: thanks, Chantelle! [CODE] was the trick!\nChantelle: Jalisa There are more academic users of Racket than there are industrial ones, but I would say Racket has more industrial users than most other schemes and lisps. Only other lispy langs I know of with comparable industry use are common lisp and clojure (both of which have vastly more industry use than racket as far as I know)\nChantelle: what sort of domain were you looking to use racket in?\nChantelle: (I ask because I want to make racket better for use in backend web dev myself)\nChantelle: Only a month and a half (I think) until it comes out :D\nChantelle: if you like both Racket and Haskell, you might be interested in the Hackett language / project",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 9,
        "duration_minutes": 35.97,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Clorinda"
        ]
      },
      "timeline": [
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T20:08:24.000041",
          "text": "there's not a one-liner that will clone/download all the source code from pkgs.racket-lang.org... is there?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:09:09.000151",
          "text": "`raco pkg catalog-archive` I think"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:09:38.000161",
          "text": "or at least I'm pretty sure theres a `raco pkg catalog-*` command that does it"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T20:14:28.000292",
          "text": "thanks, <@Chantelle>! `raco pkg catalog-archive` was the trick!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:30:24.000233",
          "text": "<@Jalisa> There are more academic users of Racket than there are industrial ones, but I would say Racket has more industrial users than most other schemes and lisps. Only other lispy langs I know of with comparable industry use are common lisp and clojure (both of which have vastly more industry use than racket as far as I know)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:32:40.000125",
          "text": "what sort of domain were you looking to use racket in?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:33:02.000231",
          "text": "(I ask because I want to make racket better for use in backend web dev myself)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:39:31.000111",
          "text": "Only a month and a half (I think) until it comes out :D"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:44:22.000128",
          "text": "if you like both Racket and Haskell, you might be interested in the Hackett language / project"
        }
      ]
    },
    {
      "conversation_id": "378",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: I'm mainly using Racket to learn how to program, but does anyone know if there are many jobs using Racket? I realize it was renamed from Scheme, but it seems difficult to judge based on that. Thanks.\nJalisa: That's sort of what I was thinking. Thanks!\nJalisa: I'm trying to stick with the web side of things as well. Came across this book which was interesting: <[URL]\nJalisa: I don't know why, but I really enjoy the syntax and feel of Racket and Haskell over other C-like languages or JS.\nJalisa: Oh, for sure! I'm already checking that one out. Seems like the two make for an outstanding pair.\nJalisa: I think it essentially brings Racket's macros and keeps most of the syntax of Haskell?\nChantelle: it uses Racket syntax and is built on Racket's VM, macro system, and module system via [CODE]\nChantelle: but the semantics are pretty much haskell 98\nChantelle: the exception is it has [CODE] and you can make macros that interact with type information\nJalisa: Sounds very cool.\nChantelle: it is indeed incredibly cool\nJalisa: I spent a ton of time last night figuring out how to put Racket's location in my [CODE] on a Mac. Turns out there's more than one way to do it. I think my mistake was relying on a command instead if simply restarting Terminal. Felt like a success even though it was a small achievement!\nChantelle: [CODE] frustrates me in general\nJalisa: Thought it was only me..\nChantelle: something I really like about racket (and other langs that do this) is that after you add racket's location to [CODE], packages can put stuff in there so you can install packages that give you command line tools without messing around with [CODE]\nJalisa: Right, that was another reason I looked at Racket; things seem to just work.\nJalisa: <[URL] Was excited to get this today.\nChantelle: I've heard good things :)\nClorinda: I'm trying to read through a large number of files with this script:\nClorinda: <[URL]\nClorinda: I used 30GB of swap space doing so...\nClorinda: I'm calling [CODE] at the end of processing each file...\nChantelle: each file is relatively small I assume?\nClorinda: yah\nClorinda: well... all the racket files from the package server...\nChantelle: ah gotcha\nClorinda: but they're racket source files -- I imagine none are too big\nClorinda: I wasn't expecting my code to win any races... but I'm a little puzzled why it's bringing my OS to a halt =\\\nChantelle: if you don't call [CODE] do you still get huge memory consumption?\nClorinda: let me try...\nClorinda: okay yah that seemed to fix it -- I bet I've got an embarrassing infinite loop in that function\nClorinda: thanks again Chantelle! :smiley:\nChantelle: glad to help :D although I have no idea why your sexp function would be consuming tons of memory\nClorinda: me neither... more digging! :smiley:\nChantelle: testing this with [CODE] might be interesting\nClorinda: I prefer to live on the edge of my seat -- wondering if OS X will just freeze up and die\nClorinda: XD\nChantelle: that works too\nMarlin: Clorinda try changing [CODE] to [CODE]\nChantelle: Marlin if the [CODE] call isn't recursive, would the tail call benefits of [CODE] matter?\nMarlin: oh, yeah, I ~think I~ definitely misread that. sorry!\nClorinda: I added a sleep to the for loop (a tenth of a second) and things are okay so far... =)\nClorinda: hah! it's because one of the files has a cyclic data structure in it that my code just keeps diving into XD\nClorinda: didn't think I'd have to add cycle detection when reading source code contents, hahaha",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 44,
        "duration_minutes": 97.68,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Clorinda",
          "Jalisa",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:27:19.000173",
          "text": "I'm mainly using Racket to learn how to program, but does anyone know if there are many jobs using Racket? I realize it was renamed from Scheme, but it seems difficult to judge based on that. Thanks."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:31:38.000204",
          "text": "That's sort of what I was thinking. Thanks!"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:37:46.000143",
          "text": "I'm trying to stick with the web side of things as well. Came across this book which was interesting: <http://serverracket.com/>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:44:00.000087",
          "text": "I don't know why, but I really enjoy the syntax and feel of Racket and Haskell over other C-like languages or JS."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:46:10.000004",
          "text": "Oh, for sure! I'm already checking that one out. Seems like the two make for an outstanding pair."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:47:56.000007",
          "text": "I think it essentially brings Racket's macros and keeps most of the syntax of Haskell?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:48:35.000048",
          "text": "it uses Racket syntax and is built on Racket's VM, macro system, and module system via `#lang`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:48:41.000139",
          "text": "but the semantics are pretty much haskell 98"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:48:59.000036",
          "text": "the exception is it has `define-syntax` and you can make macros that interact with type information"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:50:14.000129",
          "text": "Sounds very cool."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:50:50.000169",
          "text": "it is indeed incredibly cool"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:54:26.000094",
          "text": "I spent a ton of time last night figuring out how to put Racket's location in my `$PATH` on a Mac. Turns out there's more than one way to do it. I think my mistake was relying on a command instead if simply restarting Terminal. Felt like a success even though it was a small achievement!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:55:13.000008",
          "text": "`$PATH` frustrates me in general"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:55:48.000143",
          "text": "Thought it was only me.."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T20:56:54.000166",
          "text": "something I really like about racket (and other langs that do this) is that after you add racket's location to `$PATH`, packages can put stuff in there so you can install packages that give you command line tools without messing around with `$PATH`"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T20:59:56.000091",
          "text": "Right, that was another reason I looked at Racket; things seem to just work."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-18T21:05:33.000211",
          "text": "<https://i.imgur.com/wQAR8Y0.jpg>\n\nWas excited to get this today."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:09:39.000015",
          "text": "I've heard good things :)"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:28:14.000249",
          "text": "I'm trying to read through a large number of files with this script:"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:28:16.000029",
          "text": "<https://gist.github.com/pnwamk/02ce911d8a28e32a29bfc621c5c2f273>"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:28:31.000073",
          "text": "I used 30GB of swap space doing so..."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:29:10.000088",
          "text": "I'm calling `close-input-port` at the end of processing each file..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:30:51.000100",
          "text": "each file is relatively small I assume?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:30:59.000115",
          "text": "yah"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:31:17.000028",
          "text": "well... all the racket files from the package server..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:31:24.000224",
          "text": "ah gotcha"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:31:43.000122",
          "text": "but they're racket source files -- I imagine none are too big"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:32:29.000061",
          "text": "I wasn't expecting my code to win any races... but I'm a little puzzled why it's bringing my OS to a halt =\\"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:32:59.000145",
          "text": "if you don't call `search-sexp!` do you still get huge memory consumption?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:33:09.000134",
          "text": "let me try..."
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:34:26.000063",
          "text": "okay yah that seemed to fix it -- I bet I've got an embarrassing infinite loop in that function"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:34:32.000113",
          "text": "thanks again <@Chantelle>! :smiley:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:35:02.000146",
          "text": "glad to help :D although I have no idea why your sexp function would be consuming tons of memory"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:35:18.000143",
          "text": "me neither... more digging! :smiley:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:35:39.000121",
          "text": "testing this with `custodian-limit-memory` might be interesting"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:36:03.000136",
          "text": "I prefer to live on the edge of my seat -- wondering if OS X will just freeze up and die"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:36:08.000084",
          "text": "XD"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:36:11.000054",
          "text": "that works too"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-18T21:47:27.000070",
          "text": "<@Clorinda> try changing `with-handlers` to `with-handlers*`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-18T21:48:30.000017",
          "text": "<@Marlin> if the `try-read` call isn't recursive, would the tail call benefits of `with-handlers*` matter?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-18T21:49:22.000019",
          "text": "oh, yeah, I ~think I~ definitely misread that. sorry!"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T21:51:16.000122",
          "text": "I added a sleep to the for loop (a tenth of a second) and things are okay so far... =)"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T22:03:42.000216",
          "text": "hah! it's because one of the files has a cyclic data structure in it that my code just keeps diving into XD"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-10-18T22:05:00.000120",
          "text": "didn't think I'd have to add cycle detection when reading source code contents, hahaha"
        }
      ]
    },
    {
      "conversation_id": "379",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: The trick I use is to put (when I'm on macOS) [CODE] in my path and then symlink ([CODE]) the current Racket distribution to [CODE]. So, futz with it once, and be done forever.\nLashaunda: how do I make a text-field% right-justified?\nJalisa: apg thanks. I think what I did was add it to [CODE].",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 3,
        "duration_minutes": 61.4,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jalisa",
          "Ka",
          "Lashaunda"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-19T13:00:54.000282",
          "text": "The trick I use is to put (when I'm on macOS) `/Applications/Racket/bin` in my path and then symlink (`ln -s`) the current Racket distribution to `/Applications/Racket`. So, futz with it once, and be done forever."
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-19T13:59:08.000101",
          "text": "how do I make a text-field% right-justified?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-19T14:02:18.000355",
          "text": "@apg thanks. I think what I did was add it to `/etc/path`."
        }
      ]
    },
    {
      "conversation_id": "380",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: Lashaunda More difficult than it should be: [CODE_BLOCK]\nLashaunda: Vincenzo Awesome, thanks so much!\nVincenzo: Well, the resizing part doesn't work for me. It looks like [CODE] isn't called on Mac OS, so that's a bug.\nLashaunda: It will take some tweaking, my digits are cut off a little on the right until I resize, but it's a good start, and gives me something to work with, thanks again!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 20.1,
        "contains_question": false,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Lashaunda",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T16:16:10.000141",
          "text": "<@Lashaunda> More difficult than it should be:\n```\n(define text-field-right-align%\n  (class text-field%\n    (inherit get-editor get-client-size)\n    (define/private (reset-width)\n      (define e (get-editor))\n      (define wb (box 0.0))\n      (send (send e get-admin) get-view #f #f wb #f)\n      (send e set-max-width (- (unbox wb) 2))\n      (send e set-paragraph-alignment 0 'right))\n    (define/override (on-size w h)\n      (super on-size w h)\n      (reset-width))\n    (init [callback void])\n    (super-new [callback (lambda (t e)\n                           ;; an editor tends to lose\n                           ;; its alignment if all the text\n                           ;; is deleted, so reset it\n                           ;; after any change\n                           (reset-width)\n                           (callback t e))])\n    (reset-width)))\n```"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-19T16:17:27.000353",
          "text": "<@Vincenzo> Awesome, thanks so much!"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T16:19:46.000333",
          "text": "Well, the resizing part doesn't work for me. It looks like `on-size` isn't called on Mac OS, so that's a bug."
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-10-19T16:36:16.000048",
          "text": "It will take some tweaking, my digits are cut off a little on the right until I resize, but it's a good start, and gives me something to work with, thanks again!"
        }
      ]
    },
    {
      "conversation_id": "381",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I’m having a really rough time figuring out how to get Scribble to cooperate with multiple namespaces, largely because it seems like all the APIs for registering definitions of Racket identifiers are private APIs. Someone previously pointed me at some code that uses [CODE] from [CODE], but it’s all very complicated, and I don’t totally understand how it works.\nKimbery: Frustratingly, Scribble doesn’t seem to be figuring out that my binding is being documented, complaining about undefined tags, but I have no idea how to debug _why_ they aren’t defined.\nKimbery: It looks like [CODE] accepts an [CODE], but doesn’t actually use its lexical context? And the symbolic name matters?\nVincenzo: Kimbery Is [CODE] from [CODE] (a public API) on the right path for what you want?\nKimbery: That looks possibly closer, though I’m not sure how to use what it produces. I’m making my own form similar to [CODE] and friends, all of which appear to use this [CODE] thing.\nVincenzo: Actually, no, [CODE] is not the right thing. That's for looking up a tag.\nKimbery: Right. I’m looking to bind a tag. I got something that _almost_ seems to work by carefully arranging for the symbolic name to be the right one, but as far as I can tell, it isn’t easily possible to render a link to a racket identifier with [CODE]’s [CODE] style without making the text of the link the symbolic name of the export.\nVincenzo: That problem sounds familiar. I vaguely remember trying to work around that once myself and not succeeding, but I don't remember the details or whether I found another way.\nVincenzo: I think I tried to use [CODE].\nVincenzo: I may have ended up arranging a [CODE] import with the name that I wanted to render.\nKimbery: I was thinking about trying for that latter thing.\nKimbery: The unfortunate thing here is that, even if I _do_ manage to get this working, the hacks are starting to pile up rather high. It’s not too bad if it’s all contained within Hackett’s implementation, but some of this Scribble stuff would leak out into users’ library documentation.\nKimbery: And I usually try very hard to avoid complaining about this sort of thing, but the Scribble internals do not seem especially pleasant. :/\nVincenzo: It's even more of a prototype-that-got-out-of-hand than most things\nKimbery: Well, I was feeling about ready to throw in the towel, but arranging for the right [CODE] import seems to have worked(ish), so that was helpful.\nKimbery: I think I am _very_ close to getting multiple namespaces working semi-smoothly in Hackett. The only significant remaining obstacle is documenting Hackett’s base types and type-level forms, like [CODE]. I use [CODE] and [CODE] to document them, but frustratingly, it seems impossible to get [CODE] to document an identifier with any other name than how it is exported from the module. I am, however, reluctant to reimplement half of [CODE] in Hackett.\nKimbery: I guess I _could_ just copy [CODE] into Hackett’s codebase and tweak it slightly, but that seems like the option of last resort. Maybe it will be necessary, though.\nKa: all the software i've ever worked on / written professionally is exactly this. :disappointed:\nKimbery: The trouble is that Scribble’s binding documentation forms don’t really pay any attention to hygiene. (But shhh, don’t tell anyone.)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 19,
        "duration_minutes": 1401.45,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ka",
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T17:30:36.000120",
          "text": "I’m having a really rough time figuring out how to get Scribble to cooperate with multiple namespaces, largely because it seems like all the APIs for registering definitions of Racket identifiers are private APIs. Someone previously pointed me at some code that uses `id-to-target-maker` from `scribble/private/manual-bind`, but it’s all very complicated, and I don’t totally understand how it works."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T17:32:04.000323",
          "text": "Frustratingly, Scribble doesn’t seem to be figuring out that my binding is being documented, complaining about undefined tags, but I have no idea how to debug _why_ they aren’t defined."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T17:44:34.000202",
          "text": "It looks like `id-to-target-maker` accepts an `identifier?`, but doesn’t actually use its lexical context? And the symbolic name matters?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T17:52:56.000225",
          "text": "<@Kimbery> Is `xref-binding-&gt;definition-tag` from `scribble/xref` (a public API) on the right path for what you want?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T17:55:34.000130",
          "text": "That looks possibly closer, though I’m not sure how to use what it produces. I’m making my own form similar to `defproc` and friends, all of which appear to use this `id-to-target-maker` thing."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T18:06:26.000398",
          "text": "Actually, no, `xref-binding-&gt;definition-tag` is not the right thing. That's for looking up a tag."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T18:07:57.000244",
          "text": "Right. I’m looking to bind a tag. I got something that _almost_ seems to work by carefully arranging for the symbolic name to be the right one, but as far as I can tell, it isn’t easily possible to render a link to a racket identifier with `to-element`’s `#:defn? #t` style without making the text of the link the symbolic name of the export."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T18:11:55.000163",
          "text": "That problem sounds familiar. I vaguely remember trying to work around that once myself and not succeeding, but I don't remember the details or whether I found another way."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T18:13:30.000055",
          "text": "I think I tried to use `make-element-id-transformer`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T18:14:52.000080",
          "text": "I may have ended up arranging a `for-label` import with the name that I wanted to render."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T18:15:07.000062",
          "text": "I was thinking about trying for that latter thing."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T18:16:22.000032",
          "text": "The unfortunate thing here is that, even if I _do_ manage to get this working, the hacks are starting to pile up rather high. It’s not too bad if it’s all contained within Hackett’s implementation, but some of this Scribble stuff would leak out into users’ library documentation."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T18:17:15.000038",
          "text": "And I usually try very hard to avoid complaining about this sort of thing, but the Scribble internals do not seem especially pleasant. :/"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-19T18:18:30.000347",
          "text": "It's even more of a prototype-that-got-out-of-hand than most things"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-19T18:46:21.000359",
          "text": "Well, I was feeling about ready to throw in the towel, but arranging for the right `for-label` import seems to have worked(ish), so that was helpful."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T14:46:20.000041",
          "text": "I think I am _very_ close to getting multiple namespaces working semi-smoothly in Hackett. The only significant remaining obstacle is documenting Hackett’s base types and type-level forms, like `forall`. I use `defform` and `defidform` to document them, but frustratingly, it seems impossible to get `defform` to document an identifier with any other name than how it is exported from the module. I am, however, reluctant to reimplement half of `defform` in Hackett."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T14:48:49.000468",
          "text": "I guess I _could_ just copy `scribble/private/manual-form` into Hackett’s codebase and tweak it slightly, but that seems like the option of last resort. Maybe it will be necessary, though."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-20T14:56:17.000381",
          "text": "all the software i've ever worked on / written professionally is exactly this. :disappointed:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T16:52:03.000178",
          "text": "The trouble is that Scribble’s binding documentation forms don’t really pay any attention to hygiene. (But shhh, don’t tell anyone.)"
        }
      ]
    },
    {
      "conversation_id": "382",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Shad: Is there not an introducer you can use on an identifier to assert which namespace it's in?\nShad: Oh that's a pity\nNelson: time for a \"Scribble: closing the book on unhygienic documentation tools\" ?\nKimbery: [CODE]\nKimbery: I’m not even sure if respecting hygiene would actually solve this problem, though, sadly. There’s a variety of moving parts at play.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 41.6,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Nelson",
          "Shad"
        ]
      },
      "timeline": [
        {
          "user": "Shad",
          "timestamp": "2017-10-20T16:48:47.000217",
          "text": "Is there not an introducer you can use on an identifier to assert which namespace it's in?"
        },
        {
          "user": "Shad",
          "timestamp": "2017-10-20T17:26:09.000210",
          "text": "Oh that's a pity"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-20T17:28:29.000097",
          "text": "time for a \"Scribble: closing the book on unhygienic documentation tools\" ?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T17:28:50.000249",
          "text": "`#lang scribble/manual2`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T17:30:23.000167",
          "text": "I’m not even sure if respecting hygiene would actually solve this problem, though, sadly. There’s a variety of moving parts at play."
        }
      ]
    },
    {
      "conversation_id": "383",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: can a module provide the same symbol with two different bindings?\nChantelle: if not I'm not sure how hygiene applies to scribble\nNoe: Can anyone remind me why syntax parameters can’t be just be implemented with parameterize at phase 1 + syntax-local-expand-expression? The Scheme Workshop paper includes a comment that this wouldn’t work because compile-time state is ephemeral, but I can’t figure how to construct an example where it would matter given local-expand’s refusal to look under let-syntax anyway. The solution in the racket 7 expander doesn’t feel appreciably different than using a phase 1 parameter, as there it’s using the current expand context parameter.\nChantelle: Noe not sure, but since parameters are intrinsically related to thread cells and the like it seems like a strange choice in general. Macro expansion isn't performed in a multi-threaded way (at least within a module)\nChantelle: so why add the complexity of thread cells at all if there's no concurrency involved?\nNoe: Isn’t that just an argument to use fluid-let instead of parameterize?\nNoe: I guess my impression from the seeming deprecation of fluid-let is that parameterize is just as efficient for Racket, or at least efficient enough, but I don’t really know.\nNoe: Parameters also have a nicer API where you explicitly call out your dynamically bound values as parameters up-front, which is another reason to like them regardless of whether you care about the threading behavior.\nChantelle: I'm guessing the compile time state part of the paper is referring to how using state and side effects during macro expansion can cause differences to arise based on whether modules are compiled ahead of time or compiled and run interactively\nChantelle: I don't know the details well enough to think of a specific example and demonstrate how it goes wrong, but reading The Separate Compilation Guarantee in the racket reference and reading the Composable and Compilable Macros paper are probably good places to go hunting for details\nKimbery: Noe I don’t know, but using [CODE] would force a specific expansion order, whereas syntax parameters don’t.\nVincenzo: Noe I think the paper's explanation was probably intended to address wrapping a [CODE] with [CODE], and probably we agree that such an implementation wouldn't work. I don't quite see what you have in mind with [CODE]. In any case, the current implementation also supports [CODE] in a way that I think parameters can't. (I forget where splicing parameterize is used, but it seemed important at some point.)\nKimbery: I’m getting good milage out of it :)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 267.08,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Noe",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-20T19:09:48.000181",
          "text": "can a module provide the same symbol with two different bindings?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-20T19:10:08.000209",
          "text": "if not I'm not sure how hygiene applies to scribble"
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-20T19:11:02.000198",
          "text": "Can anyone remind me why syntax parameters can’t be just be implemented with parameterize at phase 1 + syntax-local-expand-expression? The Scheme Workshop paper includes a comment that this wouldn’t work because compile-time state is ephemeral, but I can’t figure how to construct an example where it would matter given local-expand’s refusal to look under let-syntax anyway. The solution in the racket 7 expander doesn’t feel appreciably different than using a phase 1 parameter, as there it’s using the current expand context parameter."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-20T19:12:22.000028",
          "text": "<@Noe> not sure, but since parameters are intrinsically related to thread cells and the like it seems like a strange choice in general. Macro expansion isn't performed in a multi-threaded way (at least within a module)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-20T19:12:55.000203",
          "text": "so why add the complexity of thread cells at all if there's no concurrency involved?"
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-20T19:13:42.000130",
          "text": "Isn’t that just an argument to use fluid-let instead of parameterize?"
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-20T19:14:58.000109",
          "text": "I guess my impression from the seeming deprecation of fluid-let is that parameterize is just as efficient for Racket, or at least efficient enough, but I don’t really know."
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-20T19:16:19.000215",
          "text": "Parameters also have a nicer API where you explicitly call out your dynamically bound values as parameters up-front, which is another reason to like them regardless of whether you care about the threading behavior."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-20T19:21:58.000206",
          "text": "I'm guessing the compile time state part of the paper is referring to how using state and side effects during macro expansion can cause differences to arise based on whether modules are compiled ahead of time or compiled and run interactively"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-20T19:23:47.000009",
          "text": "I don't know the details well enough to think of a specific example and demonstrate how it goes wrong, but reading The Separate Compilation Guarantee in the racket reference and reading the Composable and Compilable Macros paper are probably good places to go hunting for details"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T20:19:31.000045",
          "text": "<@Noe> I don’t know, but using `syntax-local-expand-expression` would force a specific expansion order, whereas syntax parameters don’t."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-20T23:35:23.000018",
          "text": "<@Noe> I think the paper's explanation was probably intended to address wrapping a `local-expand` with `parameterize`, and probably we agree that such an implementation wouldn't work. I don't quite see what you have in mind with `let-syntax`. In any case, the current implementation also supports `splicing-syntax-parameterize` in a way that I think parameters can't. (I forget where splicing parameterize is used, but it seemed important at some point.)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T23:36:53.000036",
          "text": "I’m getting good milage out of it :)"
        }
      ]
    },
    {
      "conversation_id": "384",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: not at the same phase.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-20T20:18:07.000086",
          "text": "not at the same phase."
        }
      ]
    },
    {
      "conversation_id": "385",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: I've just developed a very odd problem. After a few seconds (or sometimes immediately) the slideshow keybindings stop working\nLatarsha: No slides switch, and I can't quit (have to kill the program). Any thoughts on how to debug this issue are welcome, since I have to give a talk in a few days.\nLatarsha: cc Vincenzo Tina\nTina: You could put a printf down inside the low level key handling routine and see if that shows up\nTina: I don’t have any good ideas, in case that wasn’t obvious from the above. :grinning:\nLatarsha: Tina Do you know offhand which file I should look in? Otherwise I'll find it\nTina: not offhand; I would have to poke around to recall\nLatarsha: Ok, thanks, I'll have a look\nTina: (But Matthew did a lot more than I ever did.\nTina: )",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 10.4,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-22T21:39:55.000066",
          "text": "I've just developed a very odd problem. After a few seconds (or sometimes immediately) the slideshow keybindings stop working"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-22T21:43:23.000054",
          "text": "No slides switch, and I can't quit (have to kill the program). Any thoughts on how to debug this issue are welcome, since I have to give a talk in a few days."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-22T21:43:35.000067",
          "text": "cc <@Vincenzo> <@Tina>"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-22T21:44:21.000169",
          "text": "You could put a printf down inside the low level key handling routine and see if that shows up"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-22T21:44:53.000044",
          "text": "I don’t have any good ideas, in case that wasn’t obvious from the above. :grinning:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-22T21:46:15.000093",
          "text": "<@Tina> Do you know offhand which file I should look in? Otherwise I'll find it"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-22T21:50:04.000001",
          "text": "not offhand; I would have to poke around to recall"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-22T21:50:15.000053",
          "text": "Ok, thanks, I'll have a look"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-22T21:50:16.000037",
          "text": "(But Matthew did a lot more than I ever did."
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-22T21:50:19.000037",
          "text": ")"
        }
      ]
    },
    {
      "conversation_id": "386",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Well, further investigation (thanks for the suggestion Robby) tells me that [CODE] in [CODE] is never called when the bad behavior happens\nLatarsha: Which I think means that somehow the connection to GTK has gone wrong\nVincenzo: Latarsha This is with the current git master and not the v6.11 pre-release or earlier, right? William is having similar problems: <[URL] I haven't investigated enough, yet\nLatarsha: This is indeed with git master\nLatarsha: I haven't tried the prerelease\nLatarsha: Stefani would it make sense to just remove this package? <[URL]\nStefani: Latarsha done\nLatarsha: Vincenzo so far, things seem to be working with that repair -- thanks for the quick fix!\nLatarsha: Question -- how do I build the racket web pages, after the conversion to pollen? The instructions in the readme don't seem to work",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 851.75,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Stefani",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-22T22:13:29.000054",
          "text": "Well, further investigation (thanks for the suggestion Robby) tells me that `do-key-event` in `mred/private/wx/window.rkt` is never called when the bad behavior happens"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-22T22:14:52.000038",
          "text": "Which I think means that somehow the connection to GTK has gone wrong"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-23T08:44:23.000190",
          "text": "<@Latarsha> This is with the current git master and not the v6.11 pre-release or earlier, right?\nWilliam is having similar problems: <https://github.com/racket/gui/issues/80>\nI haven't investigated enough, yet"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-23T08:46:38.000328",
          "text": "This is indeed with git master"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-23T08:46:49.000337",
          "text": "I haven't tried the prerelease"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-23T09:48:46.000164",
          "text": "<@Stefani> would it make sense to just remove this package? <https://pkgs.racket-lang.org/package/qudongfang>"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-10-23T12:11:59.000364",
          "text": "<@Latarsha> done"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-23T12:24:30.000014",
          "text": "<@Vincenzo> so far, things seem to be working with that repair -- thanks for the quick fix!"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-23T12:25:14.000098",
          "text": "Question -- how do I build the racket web pages, after the conversion to pollen? The instructions in the readme don't seem to work"
        }
      ]
    },
    {
      "conversation_id": "387",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: I've pushed a possible repair",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-23T09:03:45.000122",
          "text": "I've pushed a possible repair"
        }
      ]
    },
    {
      "conversation_id": "388",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: anyone know how to insert latex symbols in DrRacket on windows?\nNelson: I tried, [CODE] and that didn't work. Searched the help menu and saw [CODE] but I don't know what that means.\nGeorgeanna: Nelson I just did [CODE] and then [CODE] and it worked. So I think that means “either control or meta backslash”\nGeorgeanna: I found “3.3.8 LaTeX and TeX inspired keybindings” in the doco searching for latex\nGeorgeanna: [CODE] works too\nNelson: ok thanks, I emailed this to the person who's having trouble. Will let you know if it worked :slightly_smiling_face:\nNelson: wooo success! here's the play-by-play:\nNelson: Just tried \\Tau with c:\\, m:\\ and neither worked?\nNelson: Oh. \\Downarrow with m:\\ works\nNelson: Ok yes m:\\ is the way to go. Thanks a lot!!!!!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 31.13,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-10-23T18:07:38.000219",
          "text": "anyone know how to insert latex symbols in DrRacket on windows?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-23T18:08:35.000270",
          "text": "I tried, `\\tauC-\\` and that didn't work. Searched the help menu and saw `~cm:\\` but I don't know what that means."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-23T18:22:44.000124",
          "text": "<@Nelson> I just did `\\Downarrow` and then `C-\\` and it worked. So I think that means  “either control or meta backslash”"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-23T18:23:33.000178",
          "text": "I found “3.3.8 LaTeX and TeX inspired keybindings” in the doco searching for latex"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-23T18:24:04.000261",
          "text": "`\\Tau C-\\` works too"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-23T18:32:23.000139",
          "text": "ok thanks, I emailed this to the person who's having trouble. Will let you know if it worked :slightly_smiling_face:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-23T18:38:28.000010",
          "text": "wooo success! here's the play-by-play:"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-23T18:38:28.000126",
          "text": "Just tried \\Tau with c:\\, m:\\ and neither worked?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-23T18:38:38.000098",
          "text": "Oh. \\Downarrow with m:\\ works"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-10-23T18:38:46.000005",
          "text": "Ok yes m:\\ is the way to go. Thanks a lot!!!!!"
        }
      ]
    },
    {
      "conversation_id": "389",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Anyone here going to SPLASH in Vancouver?\nGeorgeanna: I am!\nGeorgeanna: it’s been a long time since I’ve been, but there’s usually “camp smalltalk” with Don and others perma-camped there… we should do the same for racket. :stuck_out_tongue:\nLory: Oh I just read about it. Looks decent. Not my area though\nLatarsha: Georgeanna cool, I'll see you there (I get in tonight late)\nTina: Nelson Georgeanna see the docs on keymap% for how to interpret those strings.\nGeorgeanna: Latarsha it I'd soooo small! Making me sad.\nLatarsha: Georgeanna ?\nGeorgeanna: Latarsha just being wistful... This conference used to be huge. I worry it won't have the impact it used to have.\nGeorgeanna: Latarsha I just did Chris Granger’s “how long does it take to make a counting button” example… Even learning enough of [CODE] it only took me 3-4 minutes… but is there something I can have represented in the repl that could do the same thing? I had to have a [CODE] thingy to make this demo work and would just like to have a thing drop into the repl w/ some state.\nLatarsha: Georgeanna I don't think there's a really easy way to add a button to the repl, but I know very little [CODE] programming\nGeorgeanna: looks like [CODE] would be close if it weren’t backed by an image\nGeorgeanna: oh! [CODE]\nGeorgeanna: hrm. nope :confused:",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 14,
        "duration_minutes": 2574.93,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Latarsha",
          "Lory",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-23T18:33:01.000194",
          "text": "Anyone here going to SPLASH in Vancouver?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-23T18:59:12.000228",
          "text": "I am!"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-23T19:00:26.000146",
          "text": "it’s been a long time since I’ve been, but there’s usually “camp smalltalk” with Don and others perma-camped there… we should do the same for racket. :stuck_out_tongue:"
        },
        {
          "user": "Lory",
          "timestamp": "2017-10-23T20:23:35.000163",
          "text": "Oh I just read about it. Looks decent. Not my area though"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-23T21:30:24.000221",
          "text": "<@Georgeanna> cool, I'll see you there (I get in tonight late)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-10-24T16:57:58.000011",
          "text": "<@Nelson> <@Georgeanna> see the docs on keymap% for how to interpret those strings."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-25T11:34:31.000404",
          "text": "<@Latarsha> it I'd soooo small! Making me sad."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-25T11:42:25.000437",
          "text": "<@Georgeanna> ?"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-25T11:45:00.000172",
          "text": "<@Latarsha> just being wistful... This conference used to be huge. I worry it won't have the impact it used to have."
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-25T13:24:18.000488",
          "text": "<@Latarsha> I just did Chris Granger’s “how long does it take to make a counting button” example… Even learning enough of `racket/gui` it only took me 3-4 minutes… but is there something I can have represented in the repl that could do the same thing? I had to have a `[parent frame]` thingy to make this demo work and would just like to have a thing drop into the repl w/ some state."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-25T13:25:33.000419",
          "text": "<@Georgeanna> I don't think there's a really easy way to add a button to the repl, but I know very little `racket/gui` programming"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-25T13:25:50.000300",
          "text": "looks like `button-snip%` would be close if it weren’t backed by an image"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-25T13:26:13.000192",
          "text": "oh! `text-button-snip%`"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-10-25T13:27:57.000154",
          "text": "hrm. nope :confused:"
        }
      ]
    },
    {
      "conversation_id": "390",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: SPLASH looks crazy\nKa: so many talks and things.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.13,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-23T20:03:50.000275",
          "text": "SPLASH looks crazy"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-23T20:03:58.000132",
          "text": "so many talks and things."
        }
      ]
    },
    {
      "conversation_id": "391",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lory: I'm in Vancouver and don't know anything about splash",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lory"
        ]
      },
      "timeline": [
        {
          "user": "Lory",
          "timestamp": "2017-10-23T20:22:30.000078",
          "text": "I'm in Vancouver and don't know anything about splash"
        }
      ]
    },
    {
      "conversation_id": "392",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ora: So I’m using Racket for a class and discovered this, if I do (require 2htdp/planetcute) and then (list heart heart), the REPL only shows one image (the heart isn’t repeated), though interestingly if I ask for the length of that same list, it’s 2\nOra: Any idea if that’s expected behavior? Easy enough to tell my class to ignore the fact that the repl isn’t printing out the expected list so it’s not a big deal, just thought I’d bring it up\nLatarsha: Ora that's definitely a bug\nOra: Thanks Latarsha, I’ll report it as such :thumbsup:",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 9.58,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Ora"
        ]
      },
      "timeline": [
        {
          "user": "Ora",
          "timestamp": "2017-10-25T12:50:37.000060",
          "text": "So I’m using Racket for a class and discovered this, if I do (require 2htdp/planetcute) and then (list heart heart), the REPL only shows one image (the heart isn’t repeated), though interestingly if I ask for the length of that same list, it’s 2"
        },
        {
          "user": "Ora",
          "timestamp": "2017-10-25T12:51:30.000274",
          "text": "Any idea if that’s expected behavior? Easy enough to tell my class to ignore the fact that the repl isn’t printing out the expected list so it’s not a big deal, just thought I’d bring it up"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-25T12:55:57.000009",
          "text": "<@Ora> that's definitely a bug"
        },
        {
          "user": "Ora",
          "timestamp": "2017-10-25T13:00:12.000176",
          "text": "Thanks <@Latarsha>, I’ll report it as such :thumbsup:"
        }
      ]
    },
    {
      "conversation_id": "393",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: I'm trying to wrap my head around units and how to think about them. They seem mostly prevalent in gui code written in the pre-Racket days (PLT Games, Slideshow, etc), but they seem like a pretty powerful construct for building other applications and structuring libraries around.\nKa: As an example, Kimbery's envy project seems like a natural fit. envy could produce a signature, and the environment parsing could produce a unit that matches the signature for use everywhere.\nKa: but, in testing, you could provide a \"mocked\" unit...\nKa: but, based on my peering into slideshow's code, it seems like units \"infect\" -- I'm not sure if that's just the style of slideshow's codebase, or a practical \"limitation\" of working with them. Is my understanding accurate?\nKa: And, finally: does it make sense to think of a unit as a \"parameterizable, reinvokable\" module?\nVincenzo: Ka Yes, a parameterizable, reinvokable module is definitely the right idea. A unit cannot import or export macros, although macros can be \"exported\" in unit signatures. Yes, units tend infect if you want to parameterize in interesting ways, and the overhead of doing that is why they're not used as pervasively as we originally imagined. Units are still a decent option for dealing with mutual dependencies, since units allow cycles in the dependency graph, and modules don't. Units can also be good for parameterization, but [CODE] turns out to be enough more often than not.\nKa: Vincenzo thanks for the explanation! the other analogy I thought of is simply a class. but, that's more squinty.\nKa: what if units were extended to support a notion of *calling into* -- [CODE] in class terms, such that they could be linked without affecting local bindings (which is where I think the \"infectiousness\" stems from)?\nKa: so for every exportable you could write the equivalent of [CODE] ?\nKa: to call the [CODE] *without* binding it in your current module's namespace\nKa: sort of a dynamic \"fluid\" import of sorts\nVincenzo: You can use [CODE] to do that kind of thing.\nKa: hmm.. does invoking the unit cost a lot though?\nVincenzo: It costs some, similar to calling a function that contains definitions in its body. If you want a single instance that acts like an object, then you could certainly implement that macro. There's a compile-time API to inspect signatures.\nKa: yeah, i guess the thing I want is temporary, or fluid \"linkage\"\nKa: if the unit performs some sort of expensive computation, invoking it multiple times to call a single function from it (like, with the define-values/invoke-unit) seems costly\nKa: where as, an already invoked unit that wasn't linked (if such a thing is possible) provides this sort of first class object that I can \"tap\" into when needed only.\nKa: but, i guess i could just use a class for that, too.\nKa: does any of this make sense?\nKa: with the *advantage* that these things can be parameterized and customized effectively.\nKa: (e.g. a plugin system or something)\nVincenzo: Yes, that all make sense, including the idea that you might just use a class (possibly under a [CODE])\nKa: is there an easy way in racket/class classes to enforce a thing implements an interface, in the same way a unit is checked against a signature?\nKa: I guess as a final point, maybe the best idea is a macro, like you suggested (and I'm just catching up to), that invokes a unit, captures and saves off it's exports into a first class thing (e.g. a struct) that can get the dynamic linkage I'm searching for, without the cost of reinvoking the unit each time.\nKa: maybe a struct with a prop:procedure that ties it all together. :thinking_face:\nKa: thanks again, Vincenzo\nCorey: Ka If you want runtime linkage another idea is to start with [CODE], and build up from that that?\nCorey: Let's say, the plugin interface requires plugins to provide functions named [CODE] [CODE] and [CODE] -- or provide a struct or class named [CODE].\nCorey: (Maybe I didn't follow the discussion well. Just wanted to point out that [CODE] is a thing. Maybe too low-level for what you're trying to do.)\nKa: Corey I'm not, yet, trying to do anything. Just exploring what units are (and are not) good for.\nKa: [CODE] sounds worth exploring, though I'm not sure it gets at the ability to \"mock\" things like in my example with envy.\nKa: maybe.\nKa: hmmm, yeah, I guess other than the signature aspect of it, Corey, this could work the same way.\nKa: you still get the separation of namespaces that are important in this theoretical use case. worth considering, for sure.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 34,
        "duration_minutes": 96.6,
        "contains_question": true,
        "action_keywords": [
          "build",
          "discuss",
          "finish",
          "implement",
          "let's",
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Ka",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:17:35.000284",
          "text": "I'm trying to wrap my head around units and how to think about them. They seem mostly prevalent in gui code written in the pre-Racket days (PLT Games, Slideshow, etc), but they seem like a pretty powerful construct for building other applications and structuring libraries around."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:19:08.000235",
          "text": "As an example, <@Kimbery>'s envy project seems like a natural fit. envy could produce a signature, and the environment parsing could produce a unit that matches the signature for use everywhere."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:19:43.000293",
          "text": "but, in testing, you could provide a \"mocked\" unit..."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:20:46.000233",
          "text": "but, based on my peering into slideshow's code, it seems like units \"infect\" -- I'm not sure if that's just the style of slideshow's codebase, or a practical \"limitation\" of working with them. Is my understanding accurate?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:22:21.000207",
          "text": "And, finally: does it make sense to think of a unit as a \"parameterizable, reinvokable\" module?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T14:30:29.000732",
          "text": "<@Ka> Yes, a parameterizable, reinvokable module is definitely the right idea. A unit cannot import or export macros, although macros can be \"exported\" in unit signatures.\nYes, units tend infect if you want to parameterize in interesting ways, and the overhead of doing that is why they're not used as pervasively as we originally imagined.\nUnits are still a decent option for dealing with mutual dependencies, since units allow cycles in the dependency graph, and modules don't. Units can also be good for parameterization, but `lambda` turns out to be enough more often than not."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:36:54.000074",
          "text": "<@Vincenzo> thanks for the explanation! the other analogy I thought of is simply a class. but, that's more squinty."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:44:21.000268",
          "text": "what if units were extended to support a notion of *calling into* -- `send` in class terms, such that they could be linked without affecting local bindings (which is where I think the \"infectiousness\" stems from)?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:45:43.000675",
          "text": "so for every exportable you could write the equivalent of `(unit@ some-function-in-sig)` ?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:48:11.000476",
          "text": "to call the `some-function-in-sig` *without* binding it in your current module's namespace"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:48:48.000171",
          "text": "sort of a dynamic \"fluid\" import of sorts"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T14:48:52.000300",
          "text": "You can use `(let () (define-values/invoke-unit ....) ....)` to do that kind of thing."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:49:37.000336",
          "text": "hmm.. does invoking the unit cost a lot though?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T14:51:04.000647",
          "text": "It costs some, similar to calling a function that contains definitions in its body. If you want a single instance that acts like an object, then you could certainly implement that macro. There's a compile-time API to inspect signatures."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:51:47.000420",
          "text": "yeah, i guess the thing I want is temporary, or fluid \"linkage\""
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:52:44.000446",
          "text": "if the unit performs some sort of expensive computation, invoking it multiple times to call a single function from it (like, with the define-values/invoke-unit) seems costly"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:53:37.000526",
          "text": "where as, an already invoked unit that wasn't linked (if such a thing is possible) provides this sort of first class object that I can \"tap\" into when needed only."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:53:45.000143",
          "text": "but, i guess i could just use a class for that, too."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:54:23.000222",
          "text": "does any of this make sense?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:55:33.000431",
          "text": "with the *advantage* that these things can be parameterized and customized effectively."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T14:55:41.000429",
          "text": "(e.g. a plugin system or something)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T14:59:44.000241",
          "text": "Yes, that all make sense, including the idea that you might just use a class (possibly under a `lambda`)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:01:55.000545",
          "text": "is there an easy way in racket/class classes to enforce a thing implements an interface, in the same way a unit is checked against a signature?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:13:30.000175",
          "text": "I guess as a final point, maybe the best idea is a macro, like you suggested (and I'm just catching up to), that invokes a unit, captures and saves off it's exports into a first class thing (e.g. a struct) that can get the dynamic linkage I'm searching for, without the cost of reinvoking the unit each time."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:18:09.000375",
          "text": "maybe a struct with a prop:procedure that ties it all together. :thinking_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:18:17.000476",
          "text": "thanks again, <@Vincenzo>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-25T15:36:54.000027",
          "text": "<@Ka> If you want runtime linkage another idea is to start with `dynamic-require`, and build up from that that?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-25T15:37:19.000058",
          "text": "Let's say, the plugin interface requires plugins to provide functions named `start` `do` and `finish` -- or provide a struct or class named `the-interface`."
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-25T15:38:31.000568",
          "text": "(Maybe I didn't follow the discussion well. Just wanted to point out that `dynamic-require` is a thing. Maybe too low-level for what you're trying to do.)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:44:55.000197",
          "text": "<@Corey> I'm not, yet, trying to do anything. Just exploring what units are (and are not) good for."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:45:45.000121",
          "text": "`dynamic-require` sounds worth exploring, though I'm not sure it gets at the ability to \"mock\" things like in my example with envy."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:45:54.000215",
          "text": "maybe."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:53:27.000153",
          "text": "hmmm, yeah, I guess other than the signature aspect of it, <@Corey>, this could work the same way."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T15:54:11.000017",
          "text": "you still get the separation of namespaces that are important in this theoretical use case. worth considering, for sure."
        }
      ]
    },
    {
      "conversation_id": "394",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: On the consuming side your app could store the [CODE]d result(s) in var(s) wrapped in contract(s) if you wish.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-10-25T15:37:35.000642",
          "text": "On the consuming side your app could store the `dynamic-require`d result(s) in var(s) wrapped in contract(s) if you wish."
        }
      ]
    },
    {
      "conversation_id": "395",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: does anyone have context on neil van dyke's \"uri-old\" package?\nKa: is it called \"uri-old\" because there's a new thing? or something else?\nKa: oh. nevermind. it's \"old and obsolete, but nevertheless still in use.\"\nKa: I ask, mostly, because I'm curious why net/url doesn't provide a `#url\"<[URL] reader like uri-old does.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 5.88,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-25T19:06:02.000028",
          "text": "does anyone have context on neil van dyke's \"uri-old\" package?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T19:06:17.000095",
          "text": "is it called \"uri-old\" because there's a new thing? or something else?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T19:07:10.000226",
          "text": "oh. nevermind. it's \"old and obsolete, but nevertheless still in use.\""
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-25T19:11:55.000198",
          "text": "I ask, mostly, because I'm curious why net/url doesn't provide a `#url\"<http://blargh>\"` reader like uri-old does."
        }
      ]
    },
    {
      "conversation_id": "396",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo Do you have any intuition around whether or not it would be possible to make [CODE] used in a [CODE] context apply to declarations lifted with [CODE]? It seems like it would be necessary to force expansion using [CODE], but that seems like it would be okay in a [CODE] context, since the expander is going to recursively expand the module, anyway. Does that make sense, or am I speaking nonsense?\nVincenzo: Kimbery Do you mean [CODE]? It sounds like that could work.\nKimbery: I just mean [CODE]… my understanding is [CODE] is only for [CODE]. I want to make this work for something that uses [CODE].\nVincenzo: Oh, I see. I'm less optimistic about that.\nKimbery: I’ve hacked something together since I asked the question, and it passes the tests I wrote. However, it doesn’t seem to be working in my “real” problem, so I’m not sure what’s going on.\nKimbery: I _did_ observe that calling [CODE] with [CODE] as the context seems to, indeed, capture things lifted by [CODE].\nKimbery: For context, here are the changes I attempted so far: <[URL]\nVincenzo: My guess is that expansion for [CODE] either goes too far or a partial doesn't go far enough to expose all of the relevant lifts, but maybe it can be made to work\nKimbery: When in a [CODE] context, after the initial introduction of [CODE], doesn’t the expander recursively expand the module, anyway? There’s no more partial expansion at that point, right?\nVincenzo: Yes, but I was thinking that you need something to be partial to add the parameterization. But maybe I haven't given it enough thought, and I can look more tomorrow\nKimbery: Okay. My naïve attempt just bound the identifiers in a first-class definition context, then called [CODE].\nKimbery: The main reason I’m trying this, for what it’s worth, is to avoid needing to reimplement [CODE] for Hackett. I started by trying to ditch syntax parameters entirely and just use phase 1 parameters, but I don’t think that interacts with submodules properly, an issue I stumbled into before.\nKimbery: So it _seems_ like binding the right identifiers and forcing recursive expansion should work alright, even if it’s a little roundabout. But it isn’t working, so I’m trying to figure out why.\nKimbery: Vincenzo Here’s a reduced program I’ve managed to come up with that completely perplexes me: [CODE_BLOCK] Here’s the output: [CODE_BLOCK] Why does the second example print [CODE]?\nKimbery: I think I must not understand how first-class definition contexts work.\nKimbery: Also, excitingly, it seems that using [CODE] in a [CODE] context produces an internal expander error on racket7.\nKimbery: Here’s an even simpler test case: [CODE_BLOCK] The first [CODE] declaration compiles fine, but the second produces an identifier-used-out-of-context error.\nKimbery: This weirdness really does seem potentially specific to [CODE] because I can’t get similar behavior with other expansion contexts, and the fact that it crashes the new expander seems like reason to believe it’s doing something strange.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 18,
        "duration_minutes": 116.43,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "implement",
          "must",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T19:43:14.000112",
          "text": "<@Vincenzo> Do you have any intuition around whether or not it would be possible to make `splicing-syntax-parameterize` used in a `'module-begin` context apply to declarations lifted with `syntax-local-lift-module-begin-declaration`? It seems like it would be necessary to force expansion using `local-expand`, but that seems like it would be okay in a `'module-begin` context, since the expander is going to recursively expand the module, anyway. Does that make sense, or am I speaking nonsense?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T20:46:24.000002",
          "text": "<@Kimbery> Do you mean `local-expand/capture-lifts`? It sounds like that could work."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T20:47:09.000044",
          "text": "I just mean `local-expand`… my understanding is `local-expand/capture-lifts` is only for `syntax-local-lift-expression`. I want to make this work for something that uses `syntax-local-lift-module-end-declaration`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T20:48:01.000006",
          "text": "Oh, I see. I'm less optimistic about that."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T20:48:43.000073",
          "text": "I’ve hacked something together since I asked the question, and it passes the tests I wrote. However, it doesn’t seem to be working in my “real” problem, so I’m not sure what’s going on."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T20:49:22.000007",
          "text": "I _did_ observe that calling `local-expand` with `'module-begin` as the context seems to, indeed, capture things lifted by `syntax-local-lift-module-end-declaration`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T20:52:29.000160",
          "text": "For context, here are the changes I attempted so far: <https://github.com/lexi-lambda/racket/commit/eb5a3be3c8c4ca2e5b3e5c8eed06b60b78e13262>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T20:53:30.000103",
          "text": "My guess is that expansion for `'module-begin` either goes too far or a partial doesn't go far enough to expose all of the relevant lifts, but maybe it can be made to work"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T20:55:25.000151",
          "text": "When in a `'module-begin` context, after the initial introduction of `#%module-begin`, doesn’t the expander recursively expand the module, anyway? There’s no more partial expansion at that point, right?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-25T20:56:41.000006",
          "text": "Yes, but I was thinking that you need something to be partial to add the parameterization. But maybe I haven't given it enough thought, and I can look more tomorrow"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T20:57:30.000029",
          "text": "Okay. My naïve attempt just bound the identifiers in a first-class definition context, then called `(local-expand stx 'module-begin '() ctx)`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T21:00:28.000216",
          "text": "The main reason I’m trying this, for what it’s worth, is to avoid needing to reimplement `module+` for Hackett. I started by trying to ditch syntax parameters entirely and just use phase 1 parameters, but I don’t think that interacts with submodules properly, an issue I stumbled into before."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T21:01:25.000032",
          "text": "So it _seems_ like binding the right identifiers and forcing recursive expansion should work alright, even if it’s a little roundabout. But it isn’t working, so I’m trying to figure out why."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T21:23:39.000103",
          "text": "<@Vincenzo> Here’s a reduced program I’ve managed to come up with that completely perplexes me:\n```\n#lang racket\n\n(require syntax/parse/define)\n\n(define-syntax x #f)\n\n(define-simple-macro (print-shadower!)\n  #:do [(println (syntax-local-value (syntax-local-get-shadower #'x)))]\n  (void))\n\n(define-simple-macro (expand-and-shadow form ...)\n  #:do [(define ctx (syntax-local-make-definition-context))\n        (syntax-local-bind-syntaxes (list (syntax-local-introduce (syntax-local-get-shadower #'x)))\n                                    #'#t\n                                    ctx)]\n  #:with result (local-expand #'(#%plain-module-begin form ...) 'module-begin '() ctx)\n  #:do [(println (syntax-&gt;datum #'result))]\n  result)\n\n(module* a #f (expand-and-shadow (print-shadower!)))\n(module* b #f (expand-and-shadow (define y (print-shadower!))))\n```\nHere’s the output:\n```\n#t\n'(#%plain-module-begin (#%app void))\n#f\n'(#%plain-module-begin (define-values (y) (#%app void)))\n```\nWhy does the second example print `#f`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T21:23:57.000099",
          "text": "I think I must not understand how first-class definition contexts work."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T21:24:43.000017",
          "text": "Also, excitingly, it seems that using `syntax-local-make-definition-context` in a `'module-begin` context produces an internal expander error on racket7."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T21:32:05.000170",
          "text": "Here’s an even simpler test case:\n```\n#lang racket\n\n(require syntax/parse/define)\n\n(define-simple-macro (bind-and-expand x:id form ...)\n  #:do [(define ctx (syntax-local-make-definition-context))\n        (syntax-local-bind-syntaxes (list #'x) #'(λ (stx) (println stx) #'(void)) ctx)]\n  #:with result (local-expand #'(#%plain-module-begin form ...) 'module-begin '() ctx)\n  #:do [(writeln (syntax-&gt;datum #'result))]\n  result)\n\n(module* a #f (bind-and-expand x x))\n(module* b #f (bind-and-expand x (define y x)))\n```\nThe first `module*` declaration compiles fine, but the second produces an identifier-used-out-of-context error."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-25T21:39:40.000086",
          "text": "This weirdness really does seem potentially specific to `'module-begin` because I can’t get similar behavior with other expansion contexts, and the fact that it crashes the new expander seems like reason to believe it’s doing something strange."
        }
      ]
    },
    {
      "conversation_id": "397",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: I have Many Opinions about both this and uris in general",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T00:34:05.000121",
          "text": "I have Many Opinions about both this and uris in general"
        }
      ]
    },
    {
      "conversation_id": "398",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: I've been fiddling with my corporate issued laptop this morning trying to find a free SVG editor to PNGize them after changing some colors, because PowerPoint (in 2016) doesn't support SVG. BUT THEN, I realized: \"rsvg exists, why the hell am I not just using that?\"\nKa: I'd love to hear them!\nChantelle: main first issue is that URIs have a generic syntax and DNS addresses are not part of that syntax\nChantelle: specific schemes refine the syntax\nChantelle: so a generic reader wouldn't be able to tell you as much as you'd assume\nKa: you might not be able to completely *validate* at read time, sure.\nKa: but a url has parts: scheme host path query, etc.\nKa: that are generally standardized, yes?\nKa: hmmm. though, i can't seem to use pict to colorize the result.\nKa: Latarsha yeah, that's likely my strategy, and what Magnolia said on irc. likely easier to just add the color to the document though. :slightly_smiling_face:\nKa: (and scale and render to png with racket)\nChantelle: they are and a reader syntax would be nice\nChantelle: but it would be less nice than having a proper definition of uris and related types in the first place\nChantelle: (which I'm working on right now btw! contributions welcome)\nKa: where is the work being done?\nChantelle: github repo that's temporarily private due to google IP assignment bureaucracy\nKa: ah ha!\nChantelle: I can send you an invite (which I have to a few others who like backend web dev stuff)\nChantelle: I'm at work conference in NYC all week though so I'm shorter on time than usual\nKa: please do send an invite. would be interesting to see if i could help in some way.\nChantelle: will do, also the <#C7KDZQKL5|web> channel is a channel I made and invited everyone else I sent invites to\nKa: awesome",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 22,
        "duration_minutes": 71.7,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "complete",
          "please",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-10-26T13:36:39.000027",
          "text": "I've been fiddling with my corporate issued laptop this morning trying to find a free SVG editor to PNGize them after changing some colors, because PowerPoint (in 2016) doesn't support SVG. BUT THEN, I realized: \"rsvg exists, why the hell am I not just using that?\""
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T13:37:30.000325",
          "text": "I'd love to hear them!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T13:39:36.000095",
          "text": "main first issue is that URIs have a generic syntax and DNS addresses are not part of that syntax"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T13:39:52.000125",
          "text": "specific schemes refine the syntax"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T13:40:02.000295",
          "text": "so a generic reader wouldn't be able to tell you as much as you'd assume"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T13:43:10.000035",
          "text": "you might not be able to completely *validate* at read time, sure."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T13:43:33.000154",
          "text": "but a url has parts: scheme host path query, etc."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T13:43:53.000295",
          "text": "that are generally standardized, yes?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T13:48:43.000363",
          "text": "hmmm. though, i can't seem to use pict to colorize the result."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T14:13:14.000496",
          "text": "<@Latarsha> yeah, that's likely my strategy, and what <@Magnolia> said on irc. likely easier to just add the color to the document though. :slightly_smiling_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T14:13:26.000355",
          "text": "(and scale and render to png with racket)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T14:17:24.000207",
          "text": "they are and a reader syntax would be nice"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T14:17:40.000049",
          "text": "but it would be less nice than having a proper definition of uris and related types in the first place"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T14:18:17.000045",
          "text": "(which I'm working on right now btw! contributions welcome)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T14:18:58.000412",
          "text": "where is the work being done?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T14:20:02.000603",
          "text": "github repo that's temporarily private due to google IP assignment bureaucracy"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T14:20:33.000318",
          "text": "ah ha!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T14:20:45.000081",
          "text": "I can send you an invite (which I have to a few others who like backend web dev stuff)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T14:21:48.000054",
          "text": "I'm at work conference in NYC all week though so I'm shorter on time than usual"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T14:24:39.000187",
          "text": "please do send an invite. would be interesting to see if i could help in some way."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-26T14:44:37.000169",
          "text": "will do, also the <#C7KDZQKL5|web> channel is a channel I made and invited everyone else I sent invites to"
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-26T14:48:21.000426",
          "text": "awesome"
        }
      ]
    },
    {
      "conversation_id": "399",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Maybe turn it to a bitmap and then colorize?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-26T14:10:09.000070",
          "text": "Maybe turn it to a bitmap and then colorize?"
        }
      ]
    },
    {
      "conversation_id": "400",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: I spend a lot of my time with Haskellers—no doubt they’re very smart people! But I’m truly trying to _learn_ programming the proper way. Seems like I’m always brought back to Racket. Had a chance to listen to this podcast which was totally enlightening and mostly unbiased. Very good points made: <[URL]\nJalisa: If you didn't get to listen, here [partly cut and paraphrased] is one key point I received from the podcast: &gt; *Question:* Are there certain things you wished you had across all the languages? For instance, some people fall in love with macros or types. What are some of the things you've found from all these different languages, that, if you had to pick—maybe wave a magic wand ... what true language if you could get some of these features out in addition to the immutability and, at least, _thinking_ in types? &gt; *Answer:* Well, it's definitely not static types. But macros or syntactic abstraction is something that I think makes sense across the entire spectrum of functional languages. Few people understand it. A lot of the pioneering work in syntactic abstraction has been done in the context of the Scheme and Racket language. They introduce things like: you could write macros [originating in Lisp] in the language you're also writing your programs in. The Scheme language has the idea of hygiene, and then there's a couple of things Racket refines. Macros are great for teaching and for doing things systematically. *The mechanisms to make that happen are very poorly understood outside of the Scheme and Racket community. For example, the Haskell people have a bunch of hacks to solve the same kind of problems that Racket and Scheme solve with a very small number of very powerful mechanisms.* —_Functional Geekery Episode 112 – Micheal Sperber_\nStefani: Scribble-y question... any way to put something after subsection to make the content go into the subsection's parent?\nJalisa: I've learned that _indentation_ matters in Haskell. Is that the case with Racket, too?\nMarlin: Jalisa the short answer is no; the longer answer is: it depends on the reader\nJalisa: HtDP2e keeps saying in DrRacket to hit [CODE] but I'm almost certain (at least on a Mac) that doesn't work. You have to hit [CODE].\nJalisa: You're totally right! Thanks.\nJalisa: Suppose I didn't realize that was a working REPL. For some reason, I assumed it was only generating the output.\nJalisa: DrRacket sure takes up a decent amount of RAM though...",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 414.53,
        "contains_question": true,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Jalisa",
          "Marlin",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-10-26T15:29:37.000234",
          "text": "I spend a lot of my time with Haskellers—no doubt they’re very smart people! But I’m truly trying to _learn_ programming the proper way. Seems like I’m always brought back to Racket.\n\nHad a chance to listen to this podcast which was totally enlightening and mostly unbiased. Very good points made:\n\n<https://www.functionalgeekery.com/episode-112-micheal-sperber/>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-26T20:10:46.000007",
          "text": "If you didn't get to listen, here [partly cut and paraphrased] is one key point I received from the podcast:\n\n&gt; *Question:* Are there certain things you wished you had across all the languages? For instance, some people fall in love with macros or types. What are some of the things you've found from all these different languages, that, if you had to pick—maybe wave a magic wand ... what true language if you could get some of these features out in addition to the immutability and, at least, _thinking_ in types?\n\n&gt; *Answer:* Well, it's definitely not static types. But macros or syntactic abstraction is something that I think makes sense across the entire spectrum of functional languages. Few people understand it. A lot of the pioneering work in syntactic abstraction has been done in the context of the Scheme and Racket language. They introduce things like: you could write macros [originating in Lisp] in the language you're also writing your programs in. The Scheme language has the idea of hygiene, and then there's a couple of things Racket refines. Macros are great for teaching and for doing things systematically. *The mechanisms to make that happen are very poorly understood outside of the Scheme and Racket community. For example, the Haskell people have a bunch of hacks to solve the same kind of problems that Racket and Scheme solve with a very small number of very powerful mechanisms.* —_Functional Geekery Episode 112 – Micheal Sperber_"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-10-26T20:17:31.000130",
          "text": "Scribble-y question... any way to put something after @subsection to make the content go into the subsection's parent?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-26T20:38:47.000119",
          "text": "I've learned that _indentation_ matters in Haskell. Is that the case with Racket, too?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-10-26T20:41:34.000076",
          "text": "<@Jalisa> the short answer is no; the longer answer is: it depends on the reader"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-26T21:23:03.000048",
          "text": "HtDP2e keeps saying in DrRacket to hit `Enter` but I'm almost certain (at least on a Mac) that doesn't work. You have to hit `CMD + R`."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-26T22:21:16.000043",
          "text": "You're totally right! Thanks."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-26T22:22:10.000194",
          "text": "Suppose I didn't realize that was a working REPL. For some reason, I assumed it was only generating the output."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-10-26T22:24:09.000094",
          "text": "DrRacket sure takes up a decent amount of RAM though..."
        }
      ]
    },
    {
      "conversation_id": "401",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I believe it only says to hit enter when you’re in the _interactions window_. It sounds like you’re typing into the definitions window.\nKa: Where the reader is the *user*, and in some cases the text -&gt; racket object reader.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 928.13,
        "contains_question": false,
        "action_keywords": [
          "action"
        ],
        "decision_keywords": [],
        "participants": [
          "Ka",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-26T21:39:58.000004",
          "text": "I believe it only says to hit enter when you’re in the _interactions window_. It sounds like you’re typing into the definitions window."
        },
        {
          "user": "Ka",
          "timestamp": "2017-10-27T13:08:06.000082",
          "text": "Where the reader is the *user*, and in some cases the text -&gt; racket object reader."
        }
      ]
    },
    {
      "conversation_id": "402",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo For the purposes of maintaining two separate namespaces, would there be anything dangerous about making each namespace’s scope a _global_, well-known scope, rather than a separate scope per module? I’m trying to think about if there are corner cases that would break hygiene, but I don’t think so, since the existing per-module scope will prevent bindings across modules from interacting in undesirable ways.\nShad: Kimbery would that not entail needing a scope that purports to be distinct from other scopes and the same across builds?\nKimbery: It would, but that can be done with the [CODE] trick Matthew pointed out to me the other day: [CODE_BLOCK]\nKimbery: By embedding the syntax objects in the resulting program and using [CODE], the scope is preserved across module instantiations.\nKimbery: I just tried this approach, and it seems to work fine. It simplifies the implementation a lot, so I am leaning towards it—it eliminates the need for a patched version of [CODE] and a reimplementation of [CODE] to cooperate with submodules.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 43.32,
        "contains_question": true,
        "action_keywords": [
          "build",
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Shad"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-10-27T13:44:42.000376",
          "text": "<@Vincenzo> For the purposes of maintaining two separate namespaces, would there be anything dangerous about making each namespace’s scope a _global_, well-known scope, rather than a separate scope per module? I’m trying to think about if there are corner cases that would break hygiene, but I don’t think so, since the existing per-module scope will prevent bindings across modules from interacting in undesirable ways."
        },
        {
          "user": "Shad",
          "timestamp": "2017-10-27T14:23:39.000036",
          "text": "<@Kimbery> would that not entail needing a scope that purports to be distinct from other scopes and the same across builds?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-27T14:24:27.000030",
          "text": "It would, but that can be done with the `make-syntax-delta-introducer` trick Matthew pointed out to me the other day:\n```\n(define-simple-macro (define-value/type-introducers value-introducer:id type-introducer:id)\n  #:with scopeless-id (datum-&gt;syntax #f 'introducer-id)\n  #:with value-id ((make-syntax-introducer #t) #'scopeless-id)\n  #:with type-id ((make-syntax-introducer #t) #'scopeless-id)\n  (begin\n    (define value-introducer (make-syntax-delta-introducer #'value-id #'scopeless-id))\n    (define type-introducer (make-syntax-delta-introducer #'type-id #'scopeless-id))))\n\n(define-value/type-introducers value-introducer type-introducer)\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-27T14:24:52.000203",
          "text": "By embedding the syntax objects in the resulting program and using `make-syntax-delta-introducer`, the scope is preserved across module instantiations."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-27T14:28:01.000083",
          "text": "I just tried this approach, and it seems to work fine. It simplifies the implementation a lot, so I am leaning towards it—it eliminates the need for a patched version of `racket/splicing` and a reimplementation of `module+` to cooperate with submodules."
        }
      ]
    },
    {
      "conversation_id": "403",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Latarsha saw racket/racket#1870, I've looked into racket on docker stuff a bunch and I'm curious what your plan is there\nLatarsha: Chantelle just using it in the linked repo for automated release testing purposes\nChantelle: at a first pass I'm guessing the github issue is dockerfile related rather than racket related\nChantelle: Latarsha Try changing the [CODE] section of the dockerfile to this: [CODE_BLOCK]\nChantelle: then to run tests, run the command [CODE]\nLatarsha: The GitHub issue fails if I connect to the image and run the command manually\nChantelle: images and containers are different things - image is like binary you compile, container is like process you run\nChantelle: that dockerfile is running the test command when you build the image, so you're in \"build mode\" and have an AUFS filesystem that does weird things\nChantelle: I think you want to run the tests inside a container spawned from the image instead\nChantelle: containers are the only things you can connect / shell into, you can't \"connect\" to an image\nChantelle: (as an example of AUFS weirdness, putting [CODE] in a dockerfile does something that's almost, but not quite, entirely unlike what you meant)\nLatarsha: Sorry, what I mean is that if I run that docker file, and then connect to the resulting container, and then run the failing test, it continues to fail\nLatarsha: Also, what should I do instead of rm?\nLatarsha: Also, is there a way to roll back to an earlier point in the build inside a dockerfile?\nChantelle: hmmm\nChantelle: how familiar are you with docker?\nLatarsha: Chantelle I've written some docker stuff before, but only for basically scripting a container creation reproducibly\nChantelle: Latarsha okay, so the most important thing to know is that you should assume containers have read-only filesystems and try and understand dockerfiles and the docker command line in terms of that\nChantelle: more accurately, assume containers have _immutable_ filesystems\nLatarsha: Ok, that's confusing since I can download and install things\nChantelle: exactly\nLatarsha: also, your suggested command also fails\nChantelle: could you paste all output of the [CODE] command?\nLatarsha: basically just some cache hits and then the usual racket test output and then the error message\nLatarsha: Chantelle <[URL]\nChantelle: Latarsha can you nuke your cache first? the output of each build step would be useful\nLatarsha: remind me how to do that?\nChantelle: [CODE]\nLatarsha: Chantelle, same error: <[URL]\nChantelle: Latarsha I don't think I see error output in that log\nLatarsha: yeah that's because I failed to redirect stderr\nLatarsha: it's just the same last line\nChantelle: ah okay\nChantelle: I don't know racket's tests well enough to debug the specific failure, but I can give general docker guidance that will probably help\nLatarsha: My suspicion is that it's something to do with running as root or in [CODE]\nChantelle: Latarsha Ah, then I probably know how to fix that. But first...\nChantelle: Latarsha Think of containers as extremely well-isolated UNIX processes (possibly with subprocesses), and images as executables with metadata describing that isolation. Running a container involves choosing an image, setting up isolation described by that image, then running the image's executable in that isolated environment. Network configuration, OS capabilities, user and group config, and what the filesystem looks like are all included in an image's isolation metadata. This means that by default: - Attempting to write or create files in a container is _only visible to processes inside that container_ and writes won't persist after the container dies - The container has an isolated network with a different IP address than the IP address of the host machine the container is running on - The container runs as a root user, but this does not affect the container isolation. Images can further restrict this if they want by creating users and user groups and defining what user/group the container runs as when it first starts up. - Containers running on the same host share the operating system kernel (unlike VMs where each gets its own hypervisor) but syscalls and the like can be intercepted and restricted - All processes inside a container run in a single process group and the host may kill them all and restrict their resources arbitrarily - Images do clever things to make having lots of them cheap in terms of storage space, and containers are _very cheap_ to start and run (unlike VMs)\nLatarsha: Right, I understand a bunch about how containers work, but have not used them a huge amount (this is a common academic affliction)\nChantelle: Latarsha Gotcha. So I think the part that's confusing here is how a dockerfile gets turned into an image, and how an image describes the filesystem of containers run from it. An image has a list of _layers_, starting with the \"base layer\" which is empty(-ish), and each layer describes a filesystem diff from the previous layer. So images are like git repos, and if you take a base image (like [CODE]) and make ten different images that add 10MB of different stuff on top of it, you can cache all the layers in the [CODE] image when downloading those ten images. Dockerfiles describe how to build images. *Each RUN, ADD, and COPY command makes a new layer*. So if you add a file in one RUN command, then remove it in the next, you don't actually save any space in the image. In fact, you _double_ the space taken up by the thing you wanted to remove, because now the image has to store it twice: once in a diff that adds it, and once in a diff that removes it.\nLatarsha: right, that all makes sense\nLatarsha: the reason I'm removing things in the other dockerfile in that repo is to have a clean state, not to save space\nLatarsha: what I'd prefer to do is basically have the equivalent of slideshow [CODE] for dockerfiles\nLatarsha: IOW, download some stuff, and then say, first do this, and then go back to the layer after downloading and do this other stuff, etc\nChantelle: Yeah docker does not encourage doing that within an image because saving space and structuring layers so you can cache them across different builds of different images is crucial. Instead, you can use \"multi-stage builds\" which let you define a pipeline of _multiple_ different images in a single dockerfile and you can use files from one image as an input to building the next image.\nChantelle: You do this by having multiple FROM commands\nChantelle: <[URL]\nLatarsha: ok, that looks helpful\nChantelle: other random tips: - Always use absolute paths to refer to stuff in the image's filesystem, because otherwise you have to keep track of the current directory inside the image and the current directory outside the image while you're building it. Gets messy fast. - Pay attention to how ENTRYPOINT and CMD are different, and always use \"exec form\" - Make sure to use the most recent stable versions of Docker and anything related to Docker, because the space is progressing so fast that a \"best practice\" from six months ago may easily be terrible advice today - Read this: <[URL]\nLatarsha: thanks\nLatarsha: you can have a look at <[URL] for where I currently am\nChantelle: I've been peeking at it. FYI, I've got a repo (<[URL] that builds docker images for already-released racket versions using the installers.\nChantelle: but I do think racket should have an official docker image that's built from source as part of its release process.\nLatarsha: the goal here isn't to produce anything for general consumption\nLatarsha: but to have a nice contained way of doing testing\nLatarsha: producing a docker image would be nice to do too\nChantelle: baby steps :)\nNoe: Is there some magic that prevents DrRacket from recompiling racket/base code with errortrace annotations? If I call a function in racket/base and it raises an error---perhaps I’ve called [CODE]---the stacktrace doesn’t include frames inside the implementation of [CODE]. But if I define [CODE] myself in some file I require, it does include frames inside my implementation.\nLatarsha: Chantelle is there a reason that xvfb keeps randomly failing to start?\nChantelle: Latarsha probably docker's default security setup assumes you won't be doing gui-like things in containers\nLatarsha: answer, it doesn't like being re-run in close succession with itself\nNancie: this thread right here: <[URL]\nChantelle: Latarsha also, docker does not give containers access to the gpu\nLatarsha: I don't think that'll be a problem\nChantelle: [EMAIL] I laughed at that one a bit too much\nLatarsha: the whole thread is actually great\nLatarsha: and not just for the joke\nChantelle: how am I not already following this person\nLatarsha: oh were you not already following david?\nLatarsha: you should do that\nChantelle: done\nNancie: Racket users are the best thing on Twitter\nNancie: besides dril, ofc\nChantelle: added a :dril: emoji, you're all welcome\nChantelle: Latarsha did a little googlin' and I think the Right Way for testing graphics stuff inside docker containers is to put the xvfb headless server inside its own separate container\nChantelle: since X is a client server model anyways\nLatarsha: Vincenzo I just noticed that [CODE] is not on <[URL] and that it's info.rkt specifies a collection that's probably not what's intended (my guess is [CODE] is intended)\nLatarsha: Chantelle I made you a collaborator in the hopes that you'll fix all my bugs :slightly_smiling_face:\nChantelle: Latarsha there's been a change in Google's FOSS policies so I might not be able to help much, unless you're fine with patches being copyright Google instead of copyright me (they'd be under the same license either way)\nVincenzo: DrRacket refrains from applying errortrace to anything that's from the main \"collects\" or from packages that you're not editing. There are many reasons for that rule, among them that DrRacket cannot in general write to \"compiled\" directories in those places.\nVincenzo: It's true that I never got around to adding it to pkgs, and I should do that. I think the \"distro-build\" collection is as intended, though.\nLatarsha: If it's in that collection, then the checklist instruction is wrong\nVincenzo: I've pushed repairs, where the two expanders had different bugs, but the same underlying cause that I hadn't considered the possibility of internal-definition contexts for [CODE] mode. I wouldn't be surprised if you run into further problems, especially with the old expander.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 82,
        "duration_minutes": 1212.87,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "fix",
          "implement",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Nancie",
          "Noe",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:40:56.000265",
          "text": "<@Latarsha> saw racket/racket#1870, I've looked into racket on docker stuff a bunch and I'm curious what your plan is there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T16:41:51.000403",
          "text": "<@Chantelle> just using it in the linked repo for automated release testing purposes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:43:01.000003",
          "text": "at a first pass I'm guessing the github issue is dockerfile related rather than racket related"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:49:23.000225",
          "text": "<@Latarsha> Try changing the `# mflatt` section of the dockerfile to this:\n\n```\nCMD [\"/racket-in-place/bin/racket\", \"-l\", \"tests/racket/test\", \"-l\", \"tests/htdp-lang/test-htdp\", \"-l\", \"tests/compiler/embed/test\", \"-f\", \"racket-test-core/tests/racket/pack.rktl\"]\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:50:01.000063",
          "text": "then to run tests, run the command `sudo docker build . -f Dockerfile-tests -t racket-test &amp;&amp; sudo docker run racket-test`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T16:50:42.000371",
          "text": "The GitHub issue fails if I connect to the image and run the command manually"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:51:30.000200",
          "text": "images and containers are different things - image is like binary you compile, container is like process you run"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:51:58.000310",
          "text": "that dockerfile is running the test command when you build the image, so you're in \"build mode\" and have an AUFS filesystem that does weird things"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:52:16.000267",
          "text": "I think you want to run the tests inside a container spawned from the image instead"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:52:37.000313",
          "text": "containers are the only things you can connect / shell into, you can't \"connect\" to an image"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T16:55:01.000017",
          "text": "(as an example of AUFS weirdness, putting `RUN rm -rf /some/dir` in a dockerfile does something that's almost, but not quite, entirely unlike what you meant)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:04:02.000378",
          "text": "Sorry, what I mean is that if I run that docker file, and then connect to the resulting container, and then run the failing test, it continues to fail"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:04:12.000437",
          "text": "Also, what should I do instead of rm?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:04:46.000066",
          "text": "Also, is there a way to roll back to an earlier point in the build inside a dockerfile?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:06:04.000227",
          "text": "hmmm"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:06:12.000237",
          "text": "how familiar are you with docker?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:39:14.000104",
          "text": "<@Chantelle> I've written some docker stuff before, but only for basically scripting a container creation reproducibly"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:42:00.000103",
          "text": "<@Latarsha> okay, so the most important thing to know is that you should assume containers have read-only filesystems and try and understand dockerfiles and the docker command line in terms of that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:42:29.000165",
          "text": "more accurately, assume containers have _immutable_ filesystems"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:42:41.000252",
          "text": "Ok, that's confusing since I can download and install things"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:42:49.000007",
          "text": "exactly"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:43:14.000344",
          "text": "also, your suggested command also fails"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:44:18.000065",
          "text": "could you paste all output of the `sudo &lt;docker build+run&gt;` command?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:47:18.000021",
          "text": "basically just some cache hits and then the usual racket test output and then the error message"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:48:44.000090",
          "text": "<@Chantelle> <https://gist.github.com/83e2062f81ce02d55d9f97db41d5c30b>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:49:54.000098",
          "text": "<@Latarsha> can you nuke your cache first? the output of each build step would be useful"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:50:06.000166",
          "text": "remind me how to do that?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:50:14.000251",
          "text": "`docker build --no-cache`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:53:58.000078",
          "text": "<@Chantelle>, same error: <https://gist.github.com/e6f518b171f893cc89a95fc2543e95b3>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:57:09.000189",
          "text": "<@Latarsha> I don't think I see error output in that log"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:57:26.000015",
          "text": "yeah that's because I failed to redirect stderr"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T17:57:32.000117",
          "text": "it's just the same last line"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:57:41.000202",
          "text": "ah okay"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T17:58:11.000217",
          "text": "I don't know racket's tests well enough to debug the specific failure, but I can give general docker guidance that will probably help"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:00:09.000036",
          "text": "My suspicion is that it's something to do with running as root or in `/`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:00:41.000284",
          "text": "<@Latarsha> Ah, then I probably know how to fix that. But first..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:11:08.000135",
          "text": "<@Latarsha> Think of containers as extremely well-isolated UNIX processes (possibly with subprocesses), and images as executables with metadata describing that isolation. Running a container involves choosing an image, setting up isolation described by that image, then running the image's executable in that isolated environment. Network configuration, OS capabilities, user and group config, and what the filesystem looks like are all included in an image's isolation metadata. This means that by default:\n\n- Attempting to write or create files in a container is _only visible to processes inside that container_ and writes won't persist after the container dies\n- The container has an isolated network with a different IP address than the IP address of the host machine the container is running on\n- The container runs as a root user, but this does not affect the container isolation. Images can further restrict this if they want by creating users and user groups and defining what user/group the container runs as when it first starts up.\n- Containers running on the same host share the operating system kernel (unlike VMs where each gets its own hypervisor) but syscalls and the like can be intercepted and restricted\n- All processes inside a container run in a single process group and the host may kill them all and restrict their resources arbitrarily\n- Images do clever things to make having lots of them cheap in terms of storage space, and containers are _very cheap_ to start and run (unlike VMs)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:15:02.000083",
          "text": "Right, I understand a bunch about how containers work, but have not used them a huge amount (this is a common academic affliction)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:26:55.000101",
          "text": "<@Latarsha> Gotcha. So I think the part that's confusing here is how a dockerfile gets turned into an image, and how an image describes the filesystem of containers run from it. An image has a list of _layers_, starting with the \"base layer\" which is empty(-ish), and each layer describes a filesystem diff from the previous layer. So images are like git repos, and if you take a base image (like `ubuntu`) and make ten different images that add 10MB of different stuff on top of it, you can cache all the layers in the `ubuntu` image when downloading those ten images.\n\nDockerfiles describe how to build images. *Each RUN, ADD, and COPY command makes a new layer*. So if you add a file in one RUN command, then remove it in the next, you don't actually save any space in the image. In fact, you _double_ the space taken up by the thing you wanted to remove, because now the image has to store it twice: once in a diff that adds it, and once in a diff that removes it."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:29:50.000032",
          "text": "right, that all makes sense"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:30:06.000172",
          "text": "the reason I'm removing things in the other dockerfile in that repo is to have a clean state, not to save space"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:30:30.000179",
          "text": "what I'd prefer to do is basically have the equivalent of slideshow `'alts` for dockerfiles"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:30:57.000085",
          "text": "IOW, download some stuff, and then say, first do this, and then go back to the layer after downloading and do this other stuff, etc"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:33:32.000012",
          "text": "Yeah docker does not encourage doing that within an image because saving space and structuring layers so you can cache them across different builds of different images is crucial. Instead, you can use \"multi-stage builds\" which let you define a pipeline of _multiple_ different images in a single dockerfile and you can use files from one image as an input to building the next image."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:33:36.000298",
          "text": "You do this by having multiple FROM commands"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:33:41.000183",
          "text": "<https://docs.docker.com/engine/userguide/eng-image/multistage-build/#before-multi-stage-builds>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:36:58.000118",
          "text": "ok, that looks helpful"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:43:04.000223",
          "text": "other random tips:\n\n- Always use absolute paths to refer to stuff in the image's filesystem, because otherwise you have to keep track of the current directory inside the image and the current directory outside the image while you're building it. Gets messy fast.\n- Pay attention to how ENTRYPOINT and CMD are different, and always use \"exec form\"\n- Make sure to use the most recent stable versions of Docker and anything related to Docker, because the space is progressing so fast that a \"best practice\" from six months ago may easily be terrible advice today\n- Read this: <https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:45:32.000155",
          "text": "thanks"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:45:41.000044",
          "text": "you can have a look at <https://github.com/samth/docker-racket-build> for where I currently am"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:52:47.000022",
          "text": "I've been peeking at it. FYI, I've got a repo (<https://github.com/jackfirth/racket-docker>) that builds docker images for already-released racket versions using the installers."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:53:06.000087",
          "text": "but I do think racket should have an official docker image that's built from source as part of its release process."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:54:05.000130",
          "text": "the goal here isn't to produce anything for general consumption"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:54:14.000047",
          "text": "but to have a nice contained way of doing testing"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:54:25.000161",
          "text": "producing a docker image would be nice to do too"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:54:51.000049",
          "text": "baby steps :)"
        },
        {
          "user": "Noe",
          "timestamp": "2017-10-27T18:56:39.000191",
          "text": "Is there some magic that prevents DrRacket from recompiling racket/base code with errortrace annotations? If I call a function in racket/base and it raises an error---perhaps I’ve called `(first '())`---the stacktrace doesn’t include frames inside the implementation of `first`. But if I define `first` myself in some file I require, it does include frames inside my implementation."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T18:57:30.000244",
          "text": "<@Chantelle> is there a reason that xvfb keeps randomly failing to start?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T18:59:50.000042",
          "text": "<@Latarsha> probably docker's default security setup assumes you won't be doing gui-like things in containers"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T19:00:06.000198",
          "text": "answer, it doesn't like being re-run in close succession with itself"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-27T19:01:46.000239",
          "text": "this thread right here: <https://twitter.com/lambda_calculus/status/923989942354759682>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T19:02:03.000085",
          "text": "<@Latarsha> also, docker does not give containers access to the gpu"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T19:02:18.000057",
          "text": "I don't think that'll be a problem"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T19:02:32.000089",
          "text": "<@Nancie>...okay, I laughed at that one a bit too much"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T19:02:45.000005",
          "text": "the whole thread is actually great"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T19:02:52.000134",
          "text": "and not just for the joke"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T19:05:33.000115",
          "text": "how am I not already following this person"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T19:06:12.000075",
          "text": "oh were you not already following david?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T19:06:15.000108",
          "text": "you should do that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T19:06:52.000217",
          "text": "done"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-27T19:08:13.000102",
          "text": "Racket users are the best thing on Twitter"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-10-27T19:08:18.000018",
          "text": "besides dril, ofc"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T19:12:19.000100",
          "text": "added a :dril: emoji, you're all welcome"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T19:15:11.000149",
          "text": "<@Latarsha> did a little googlin' and I think the Right Way for testing graphics stuff inside docker containers is to put the xvfb headless server inside its own separate container"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T19:15:29.000065",
          "text": "since X is a client server model anyways"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T19:27:58.000174",
          "text": "<@Vincenzo> I just noticed that `distro-build-test` is not on <http://pkgs.racket-lang.org|pkgs.racket-lang.org>, and that it's info.rkt specifies a collection that's probably not what's intended (my guess is `'multi` is intended)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T20:09:39.000140",
          "text": "<@Chantelle> I made you a collaborator in the hopes that you'll fix all my bugs :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T20:38:47.000082",
          "text": "<@Latarsha> there's been a change in Google's FOSS policies so I might not be able to help much, unless you're fine with patches being copyright Google instead of copyright me (they'd be under the same license either way)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-28T09:57:46.000049",
          "text": "DrRacket refrains from applying errortrace to anything that's from the main \"collects\" or from packages that you're not editing. There are many reasons for that rule, among them that DrRacket cannot in general write to \"compiled\" directories in those places."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-28T09:59:44.000010",
          "text": "It's true that I never got around to adding it to pkgs, and I should do that. I think the \"distro-build\" collection is as intended, though."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T10:25:07.000126",
          "text": "If it's in that collection, then the checklist instruction is wrong"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-28T12:53:48.000024",
          "text": "I've pushed repairs, where the two expanders had different bugs, but the same underlying cause that I hadn't considered the possibility of internal-definition contexts for `'module-begin` mode. I wouldn't be surprised if you run into further problems, especially with the old expander."
        }
      ]
    },
    {
      "conversation_id": "404",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: I don't particularly care who owns the copyright\nLatarsha: Or maybe the instructions expect a particular current directory?\nVincenzo: I don't see any particular problem, either\nVincenzo: The checklist was wrong; now fixed\nVincenzo: I didn't notice because I do always run the test from its directory\nKimbery: Vincenzo Thank you for both of those fixes, though I think ultimately I can get away with neither of them, since the strategy of just using unique, global scopes for namespacing eliminates my need for [CODE]. (Which almost seems disappointing, since it was a fun use-case, but this approach works a lot better.)",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 894.37,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-27T22:19:10.000039",
          "text": "I don't particularly care who owns the copyright"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T10:26:44.000064",
          "text": "Or maybe the instructions expect a particular current directory?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-28T12:40:56.000095",
          "text": "I don't see any particular problem, either"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-28T12:58:48.000001",
          "text": "The checklist was wrong; now fixed"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-28T12:59:08.000061",
          "text": "I didn't notice because I do always run the test from its directory"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-10-28T13:13:32.000034",
          "text": "<@Vincenzo> Thank you for both of those fixes, though I think ultimately I can get away with neither of them, since the strategy of just using unique, global scopes for namespacing eliminates my need for `splicing-syntax-parameterize`. (Which almost seems disappointing, since it was a fun use-case, but this approach works a lot better.)"
        }
      ]
    },
    {
      "conversation_id": "405",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: probably because docker uses the Open Containers Initiative standardized image format which many different container runtimes understand now",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-10-27T23:26:55.000049",
          "text": "probably because docker uses the Open Containers Initiative standardized image format which many different container runtimes understand now"
        }
      ]
    },
    {
      "conversation_id": "406",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Corey This test continues to be somewhat flaky <[URL] ; would it make sense to add more retries?\nCorey: Latarsha Although I've only glanced at it I think Stefani’s PR from this morning will do that: <[URL]\nLatarsha: That URL definitely responds for me\nChantelle: what if the catalog test runner gave tests the ability to run docker containers? You could make a non-flaky http test suite with that\nLatarsha: the issue here is the CI server at <[URL] which doesn't have the restrictions that the pkg-build system does\nLatarsha: but does apparently have periodic issues reaching <[URL]\nChantelle: bizarre\nLatarsha: and it's really genuinely just <[URL] as you can see at that link (click the green back button a bunch of times to see various issues)\nChantelle: the drdr links aren't working for me\nChantelle: not able to connect\nLatarsha: <[URL]\nLatarsha: it works for me\nChantelle: ....oh I have [URL] everywhere set to block non-[URL] connections because I was using public wifi hotspots...\nChantelle: it's yahoo closing the tcp connection so I don't think there's much you can do there\nLatarsha: yeah but it usually works so i think just retrying a few times should fix it\nChantelle: How often does that test run?\nLatarsha: about once an hour\nLatarsha: the CI server just runs continously\nLatarsha: (it used to be triggered by pushes but we gave up on that when we split the main repo)\nChantelle: gotcha\nLatarsha: the main <[URL] page shows the history of all builds\nChantelle: how different are drdr and the package build server?\nLatarsha: quite\nLatarsha: drdr is intended to be a highly comprehensive test of the main distribution\nLatarsha: for example, it builds from source every time, runs tests that need a gui or arbitrary system access or the network, and tests every file in every package in main-distribution and main-distribution-test, and doesn't have an overall time limit\nLatarsha: but it doesn't build anything that's not in the main-distribution or needed by it\nChantelle: interesting\nChantelle: gui bits tested with xvfb?\nChantelle: oh by the way Latarsha, could you add a license to samth/docker-racket-build?\nLatarsha: done\nChantelle: perfect, thanks\nLatarsha: actually, i want to add the other license too\nChantelle: other license?\nLatarsha: apache as well\nChantelle: oh, dual licensing it?\nChantelle: you're probably better off using just apache instead of using dual licenses\nChantelle: licenses don't compose as neatly as functions do unfortunately\nLatarsha: We're dual-licensing Racket generally as MIT and Apache, for roughly the same reasons that Rust does\nLatarsha: so I want to do the same thing here\nChantelle: oh rust does that? neat\nLatarsha: yes\nChantelle: ah, I gotcha, dual licensing means that pull request authors implicitly agree to both\nLatarsha: yeah\nLatarsha: that's why I wanted to do it now before you do anything that might get you in trouble with Google Legal\nLatarsha: oh, and it actually runs a real X server, not xvfb\nChantelle: good call on license thing then - relicensing stuff that's partially copyright google would be... not simple, probably\nChantelle: as for real X server: why?\nLatarsha: not certain, Stefani would know better\nChantelle: oh and, how are snapshot and pre-release installers made?\nLatarsha: those are built with the [CODE] package\nChantelle: do you want the dockerfile to only describe how to build stuff in terms of what's at <[URL] or do you want it to conceivably work in racket CI before those are uploaded anywhere?\nLatarsha: mostly the former\nLatarsha: the goal is to automate the process when Eun sends out an email telling people to do testing items that are on their checklist\nLatarsha: current checklist here: <[URL]\nChantelle: and I presume the way that's done is people take the pre-release installer and install racket with it, then run those tests?\nLatarsha: yes\nLatarsha: and so this is just automating that process in a nice reproducible way\nChantelle: kk\nChantelle: then I think ill file some issues about stuff we could do\nLatarsha: there's an issue filed already for all the things that don't work (which may be harder to fix for you), plus a couple of issues about the Docker code\nLatarsha: based on what you suggested yesterday\nChantelle: Latarsha filed issues for all the stuff I could think of off the top of my head\nLatarsha: Casey not currently, although we're looking in to making it possible to make tax-deductible donations to racket\nLatarsha: In the united states, if you make a donation to a charitable organization you don't have to pay taxes on that money\nChantelle: Latarsha dockerfile progress: I'm able to build and partially test minimal and non-minimal installs of the x86_64 and i368 linux installers\nChantelle: x86_64 linux natipkg installers seem to have issues due to the openssl libs included in the [CODE] package\nChantelle: haven't attempted proper xvfb setup yet\nChantelle: in-place installs are all that's tested so far - not unix-style nor the generated uninstall script\nChantelle: this is with docker-compose and multi-stage builds\nLatarsha: Chantelle nice\nStefani: Chantelle DrDr appears to need a real X server because when I used Xvfb the DrR tests did not pass because the mouse/screen/drawing wasn't exactly the same as it expected.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 71,
        "duration_minutes": 3685.3,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [
          "works for me"
        ],
        "participants": [
          "Chantelle",
          "Corey",
          "Latarsha",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T19:56:50.000004",
          "text": "<@Corey> This test continues to be somewhat flaky <http://drdr.racket-lang.org/43204/racket/share/pkgs/http/http/request.rkt> ; would it make sense to add more retries?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-10-28T20:00:26.000080",
          "text": "<@Latarsha> Although I've only glanced at it I think <@Stefani>’s PR from this morning will do that: <https://github.com/greghendershott/http/pull/10>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:01:32.000118",
          "text": "That URL definitely responds for me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:04:11.000054",
          "text": "what if the catalog test runner gave tests the ability to run docker containers? You could make a non-flaky http test suite with that"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:05:03.000022",
          "text": "the issue here is the CI server at <http://drdr.racket-lang.org|drdr.racket-lang.org>, which doesn't have the restrictions that the pkg-build system does"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:05:19.000061",
          "text": "but does apparently have periodic issues reaching <http://yahoo.com|yahoo.com>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:05:34.000014",
          "text": "bizarre"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:07:07.000016",
          "text": "and it's really genuinely just <http://yahoo.com|yahoo.com>, as you can see at that link (click the green back button a bunch of times to see various issues)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:15:46.000018",
          "text": "the drdr links aren't working for me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:15:52.000032",
          "text": "not able to connect"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:16:22.000046",
          "text": "<http://downforeveryoneorjustme.com/drdr.racket-lang.org>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:16:34.000050",
          "text": "it works for me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:17:11.000073",
          "text": "....oh I have https everywhere set to block non-https connections because I was using public wifi hotspots..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:20:06.000054",
          "text": "it's yahoo closing the tcp connection so I don't think there's much you can do there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:20:45.000029",
          "text": "yeah but it usually works so i think just retrying a few times should fix it"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:21:09.000021",
          "text": "How often does that test run?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:21:24.000012",
          "text": "about once an hour"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:21:37.000015",
          "text": "the CI server just runs continously"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:22:03.000057",
          "text": "(it used to be triggered by pushes but we gave up on that when we split the main repo)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:22:18.000024",
          "text": "gotcha"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:22:59.000080",
          "text": "the main <http://drdr.racket-lang.org|drdr.racket-lang.org> page shows the history of all builds"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:23:31.000012",
          "text": "how different are drdr and the package build server?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:23:50.000041",
          "text": "quite"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:24:22.000058",
          "text": "drdr is intended to be a highly comprehensive test of the main distribution"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:25:36.000004",
          "text": "for example, it builds from source every time, runs tests that need a gui or arbitrary system access or the network, and tests every file in every package in main-distribution and main-distribution-test, and doesn't have an overall time limit"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:26:01.000063",
          "text": "but it doesn't build anything that's not in the main-distribution or needed by it"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:26:54.000014",
          "text": "interesting"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:27:07.000005",
          "text": "gui bits tested with xvfb?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:28:21.000006",
          "text": "oh by the way <@Latarsha>, could you add a license to samth/docker-racket-build?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:29:27.000009",
          "text": "done"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:29:56.000013",
          "text": "perfect, thanks"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:30:19.000012",
          "text": "actually, i want to add the other license too"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:31:04.000003",
          "text": "other license?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:32:00.000059",
          "text": "apache as well"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:32:05.000024",
          "text": "oh, dual licensing it?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:32:22.000028",
          "text": "you're probably better off using just apache instead of using dual licenses"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:32:42.000030",
          "text": "licenses don't compose as neatly as functions do unfortunately"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:33:13.000001",
          "text": "We're dual-licensing Racket generally as MIT and Apache, for roughly the same reasons that Rust does"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:33:20.000038",
          "text": "so I want to do the same thing here"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:33:31.000017",
          "text": "oh rust does that? neat"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:34:24.000006",
          "text": "yes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:34:34.000059",
          "text": "ah, I gotcha, dual licensing means that pull request authors implicitly agree to both"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:34:53.000035",
          "text": "yeah"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:35:13.000048",
          "text": "that's why I wanted to do it now before you do anything that might get you in trouble with Google Legal"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:37:22.000007",
          "text": "oh, and it actually runs a real X server, not xvfb"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:38:34.000065",
          "text": "good call on license thing then - relicensing stuff that's partially copyright google would be... not simple, probably"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:38:50.000018",
          "text": "as for real X server: why?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:42:29.000074",
          "text": "not certain, <@Stefani> would know better"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:42:42.000033",
          "text": "oh and, how are snapshot and pre-release installers made?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:43:01.000029",
          "text": "those are built with the `distro-build` package"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:44:36.000032",
          "text": "do you want the dockerfile to only describe how to build stuff in terms of what's at <http://pre-release.racket-lang.org|pre-release.racket-lang.org> or do you want it to conceivably work in racket CI before those are uploaded anywhere?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:45:39.000026",
          "text": "mostly the former"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:46:09.000043",
          "text": "the goal is to automate the process when <@Eun> sends out an email telling people to do testing items that are on their checklist"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:46:21.000036",
          "text": "current checklist here: <https://github.com/racket/racket/wiki/Release-Checklist>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:46:55.000021",
          "text": "and I presume the way that's done is people take the pre-release installer and install racket with it, then run those tests?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:47:06.000044",
          "text": "yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:47:43.000026",
          "text": "and so this is just automating that process in a nice reproducible way"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:48:00.000039",
          "text": "kk"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T20:48:19.000037",
          "text": "then I think ill file some issues about stuff we could do"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:49:11.000006",
          "text": "there's an issue filed already for all the things that don't work (which may be harder to fix for you), plus a couple of issues about the Docker code"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-28T20:49:21.000058",
          "text": "based on what you suggested yesterday"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-28T21:45:03.000102",
          "text": "<@Latarsha> filed issues for all the stuff I could think of off the top of my head"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-29T11:26:35.000105",
          "text": "<@Casey> not currently, although we're looking in to making it possible to make tax-deductible donations to racket"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-29T11:29:03.000089",
          "text": "In the united states, if you make a donation to a charitable organization you don't have to pay taxes on that money"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-30T14:40:00.000751",
          "text": "<@Latarsha> dockerfile progress: I'm able to build and partially test minimal and non-minimal installs of the x86_64 and i368 linux installers"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-30T14:44:05.000217",
          "text": "x86_64 linux natipkg installers seem to have issues due to the openssl libs included in the `racket-x86_64-linux-natipkg-2` package"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-30T14:44:17.000204",
          "text": "haven't attempted proper xvfb setup yet"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-30T14:45:45.000532",
          "text": "in-place installs are all that's tested so far - not unix-style nor the generated uninstall script"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-10-30T14:47:45.000302",
          "text": "this is with docker-compose and multi-stage builds"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-30T15:58:31.000144",
          "text": "<@Chantelle> nice"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-10-31T09:22:08.000349",
          "text": "<@Chantelle> DrDr appears to need a real X server because when I used Xvfb the DrR tests did not pass because the mouse/screen/drawing wasn't exactly the same as it expected."
        }
      ]
    },
    {
      "conversation_id": "407",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Casey: Hello, is there a racket foundation or a project fund ?\nCasey: tax?\nCasey: I never paid tax and I don't intent to do so. I am interested in making regular donations to push racket into a new field, and hope to get support. I am here to evaluate racket for our new project. Most interestingly for us is how much the racket devs and ecosystem around this project is willing to support us. We are interested in supporting racket officially by donating two core devs a wage if they help expanding racket to our use cases. Please, let me know if that sounds interesting to you.\nLatarsha: Casey for a significant contribution such as that, it would probably be better to discuss over email\nCasey: sure thing. I PM you",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 9.9,
        "contains_question": true,
        "action_keywords": [
          "discuss",
          "please",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Casey",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Casey",
          "timestamp": "2017-10-29T11:25:41.000101",
          "text": "Hello,\nis there a racket foundation or a project fund ?"
        },
        {
          "user": "Casey",
          "timestamp": "2017-10-29T11:27:07.000014",
          "text": "tax?"
        },
        {
          "user": "Casey",
          "timestamp": "2017-10-29T11:32:31.000024",
          "text": "I never paid tax and I don't intent to do so. I am interested in making regular donations to push racket into a new field, and hope to get support.\nI am here to evaluate racket for our new project. Most interestingly for us is how much the racket devs and ecosystem around this project is willing to support us. We are interested in supporting racket officially by donating two core devs a wage if they help expanding racket to our use cases. Please, let me know if that sounds interesting to you."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-10-29T11:35:04.000043",
          "text": "<@Casey> for a significant contribution such as that, it would probably be better to discuss over email"
        },
        {
          "user": "Casey",
          "timestamp": "2017-10-29T11:35:35.000041",
          "text": "sure thing. I PM you"
        }
      ]
    },
    {
      "conversation_id": "408",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: with the new 6.11 update, I'm very happy with how fast the program contour feature is now. It's much useful on my large files now.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-10-31T12:20:50.000247",
          "text": "with the new 6.11 update, I'm very happy with how fast the program contour feature is now. It's much useful on my large files now."
        }
      ]
    },
    {
      "conversation_id": "409",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: The documentation for snip-editors’s [CODE] method says the inset is “how much space is left between the edge of the snip and the border.”\nRosalee: What border is it referring to?\nRosalee: I assume its not the editor’s border, as that’s the margin.\nRosalee: Would it be the edge of the external editor?\nRosalee: It could also be the snip’s border, but then wouldn’t the edge of the snip and the snip’s border be the same, leading to a value of 0?\nRosalee: Ohh…I _think_ I get it. The editor’s border is smaller than the snip’s border. So the inset is the distance between the two of them.\nRosalee: And the margin is the extra space beyond the snip’s border.\nRosalee: Something like this:\nRosalee: Oh jeez, maybe not. THere is also a concept of padding too…. :disappointed:\nRosalee: Vincenzo You might know this stuff.\nRosalee: ohh..its just the css box model:\nRosalee: padding = padding\nRosalee: inset = border\nRosalee: margin = margin\nRosalee: hmm…interesting. So the border’s position isn’t really connected to the padding and margin per se? If so interesting, thanks. :slightly_smiling_face:\nChantelle: Latarsha voilà! <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 16,
        "duration_minutes": 918.07,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:29:20.000589",
          "text": "The documentation for snip-editors’s `get-inset` method says the inset is “how much space is left between the edge of the snip and the border.”"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:29:25.000111",
          "text": "What border is it referring to?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:29:39.000012",
          "text": "I assume its not the editor’s border, as that’s the margin."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:29:55.000149",
          "text": "Would it be the edge of the external editor?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:32:10.000608",
          "text": "It could also be the snip’s border, but then wouldn’t the edge of the snip and the snip’s border be the same, leading to a value of 0?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:48:31.000224",
          "text": "Ohh…I _think_ I get it. The editor’s border is smaller than the snip’s border. So the inset is the distance between the two of them."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:48:43.000378",
          "text": "And the margin is the extra space beyond the snip’s border."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:48:46.000152",
          "text": "Something like this:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:54:33.000637",
          "text": "Oh jeez, maybe not. THere is also a concept of padding too…. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:54:41.000784",
          "text": "<@Vincenzo> You might know this stuff."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:58:52.000216",
          "text": "ohh..its just the css box model:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:58:55.000564",
          "text": "padding = padding"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:58:58.000114",
          "text": "inset = border"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T13:59:02.000016",
          "text": "margin = margin"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-10-31T14:11:54.000546",
          "text": "hmm…interesting. So the border’s position isn’t really connected to the padding and margin per se? If so interesting, thanks. :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T04:47:24.000094",
          "text": "<@Latarsha> voilà! <https://github.com/samth/docker-racket-build/pull/16>"
        }
      ]
    },
    {
      "conversation_id": "410",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: I think padding and margin are as in CSS, but the border is always drawn with width 1 and doesn't add to the box's size. Inset specifies where a border is drawn relative to the box created by padding + margin (and a larger inset value doesn't mean the box gets bigger, but that the border is drawn further from the edge of the box).",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-10-31T14:07:09.000328",
          "text": "I think padding and margin are as in CSS, but the border is always drawn with width 1 and doesn't add to the box's size. Inset specifies where a border is drawn relative to the box created by padding + margin (and a larger inset value doesn't mean the box gets bigger, but that the border is drawn further from the edge of the box)."
        }
      ]
    },
    {
      "conversation_id": "411",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Quintin you might be interested in <[URL]\nClorinda: am I missing something obvious -- why does TR _insist_ that my default value for [CODE] be [CODE] or a thunk?\nLatarsha: Clorinda because it's hard to give another less-specific type\nLatarsha: you could give a type that's [CODE] or something like that\nClorinda: I don't follow\nClorinda: so, this wouldn't work? [CODE]\nLatarsha: Because if I instantiate D with [CODE] then it doesn't ever return that, and does potentially return [CODE]\nClorinda: ugh -- well I don't want to wrap my symbol in a thunk! =p\nLatarsha: we could change the [CODE] case to use an intersection type bounded by some big union\nClorinda: with a negation type we could express it, right?\nClorinda: one case for not a procedure, one for a procedure?\nLatarsha: yes\nClorinda: all the better!\nQuintin: Latarsha Thanks! It's interesting to see other people approaching the same problem. I couldn't find many before I started rash, but in the last month I've found several projects that are to some degree trying to do something similar.\nEun: Quintin: Also: <[URL]\nEun: By a high schooler I know.\nKimbery: &gt; In Ergonomica, as with similar functional programming languages, the only statement in the language is the [CODE] statement. Then, immediately, the next section title: &gt; [CODE] statement what\nQuintin: Eun Thanks also. I've seen that one before.\nQuintin: Actually the coolest shell project I've found (other than Rash, of course....) is Xonsh. It is a python-superset shell that is actually fairly stable and usable. I'm not sure how I didn't find it before I started Rash.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 19,
        "duration_minutes": 174.72,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Clorinda",
          "Eun",
          "Kimbery",
          "Latarsha",
          "Quintin"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T13:06:34.000395",
          "text": "<@Quintin> you might be interested in <https://github.com/dundalek/closh>"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-11-01T13:07:28.000454",
          "text": "am I missing something obvious -- why does TR _insist_ that my default value for `hash-ref` be `#f` or a thunk?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T13:09:03.000011",
          "text": "<@Clorinda> because it's hard to give another less-specific type"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T13:09:31.000266",
          "text": "you could give a type that's `(U Boolean String Number Symbol Input-Port)` or something like that"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-11-01T13:11:22.000446",
          "text": "I don't follow"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-11-01T13:11:32.000396",
          "text": "so, this wouldn't work? `(All (K V D) (-&gt; (HashTable K V) K D (U V D)))`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T13:12:11.000522",
          "text": "Because if I instantiate D with `(-&gt; String)` then it doesn't ever return that, and does potentially return `String`"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-11-01T13:13:29.000391",
          "text": "ugh -- well I don't want to wrap my symbol in a thunk! =p"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T13:14:04.000025",
          "text": "we could change the `#f` case to use an intersection type bounded by some big union"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-11-01T13:14:08.000231",
          "text": "with a negation type we could express it, right?"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-11-01T13:14:23.000721",
          "text": "one case for not a procedure, one for a procedure?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T13:14:42.000457",
          "text": "yes"
        },
        {
          "user": "Clorinda",
          "timestamp": "2017-11-01T13:14:48.000386",
          "text": "all the better!"
        },
        {
          "user": "Quintin",
          "timestamp": "2017-11-01T14:58:48.000331",
          "text": "<@Latarsha> Thanks!  It's interesting to see other people approaching the same problem.  I couldn't find many before I started rash, but in the last month I've found several projects that are to some degree trying to do something similar."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-01T15:05:18.000264",
          "text": "<@Quintin>: Also: <https://github.com/ergonomica/ergonomica>"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-01T15:05:31.000569",
          "text": "By a high schooler I know."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-01T15:07:06.000014",
          "text": "&gt; In Ergonomica, as with similar functional programming languages, the only statement in the language is the `if/elif/else` statement.\nThen, immediately, the next section title:\n&gt; `with` statement\nwhat"
        },
        {
          "user": "Quintin",
          "timestamp": "2017-11-01T15:59:55.000344",
          "text": "<@Eun> Thanks also.  I've seen that one before."
        },
        {
          "user": "Quintin",
          "timestamp": "2017-11-01T16:01:17.000112",
          "text": "Actually the coolest shell project I've found (other than Rash, of course....) is Xonsh.  It is a python-superset shell that is actually fairly stable and usable.  I'm not sure how I didn't find it before I started Rash."
        }
      ]
    },
    {
      "conversation_id": "412",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: documentation is hard.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-11-01T15:26:11.000277",
          "text": "documentation is hard."
        }
      ]
    },
    {
      "conversation_id": "413",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Chantelle can you add instructions on how to run your code?\nChantelle: yes, though I might not have time until later this week\nChantelle: I'll make sure to add them before merging\nLatarsha: Is there just some simple call to [CODE]?\nChantelle: [CODE] == download and run all installers, producing images with racket successfully installed\nChantelle: [CODE] == run all tests, exit 0 on all successful exit nonzero on fail or error (including OOMEs)\nChantelle: [CODE] == run that service, exiting with 0 on success or 1 on failure\nChantelle: every \"foo-test\" service in the compose yml runs the same [CODE] script - different test services just run using different base images (and thus different installers)\nChantelle: ex: [CODE] will run the tests in a container whose [CODE] and [CODE] binaries were installed by building the [CODE] image\nLatarsha: seems like I need to install non-packaged versions of docker and docker-compose\nChantelle: You need a recent version of docker installed. Docker for Mac and Docker for Windows are the current best ways to get docker onto those systems\nLatarsha: Yeah, I use linux, but that doesn't mean I get a .deb for docker-compose\nLatarsha: :disappointed:\nLatarsha: also, what's the best way to try another test without re-running all the previous tests?\nChantelle: I think there's a Docker for Linux thing. Installing packages might not be the recommended way to do stuff\nLatarsha: yeah, turns out there's a docker-provided .deb for docker itself, but not for compose\nLatarsha: I have it all running now, though\nChantelle: You can use [CODE] to override the command that would normally be run\nChantelle: So I think [CODE] would do what you want, for example\nChantelle: That runs just those tests instead of running the [CODE] script from the CMD instruction\nLatarsha: ok great\nLatarsha: this is all very nice, thanks a ton!\nChantelle: Glad to help, I love this sort of stuff :)\nLatarsha: Vincenzo Stefani Are [CODE] and [CODE] intentionally setting [CODE] differently?\nLatarsha: To see the difference, try [CODE] and the same with [CODE] (the latter will fail with an unknown path)\nChantelle: By the way, would you happen to know _why_ the db tests consume over a gigabyte of memory?\nLatarsha: no, I was going to look into that\nVincenzo: Unlike [CODE], [CODE] sets the current directory to the file's directory for testing, as documented. I don't think either will have [CODE] set after the module declaration is loaded. Probably the directory-changing behavior in [CODE] should have been specific to the [CODE] flag, though, since it seems to have been added as part of the [CODE] addition.\nLatarsha: Vincenzo thanks, I had missed that in the docs\nLatarsha: somehow xvfb-run causes tests to have no output\nLatarsha: or maybe that was just the framework tests hanging\nLatarsha: no, the problem is that [CODE] doesn't work, have to wrap it in [CODE]\nLatarsha: Vincenzo The most recent Travis build keeps hanging on linux in the [CODE] tests, and I have no idea why: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 33,
        "duration_minutes": 1266.47,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T15:55:54.000001",
          "text": "<@Chantelle> can you add instructions on how to run your code?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T16:12:00.000259",
          "text": "yes, though I might not have time until later this week"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T16:12:28.000383",
          "text": "I'll make sure to add them before merging"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T16:12:34.000427",
          "text": "Is there just some simple call to `docker-compose`?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T16:18:47.000109",
          "text": "`docker-compose build` == download and run all installers, producing images with racket successfully installed"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T16:19:07.000481",
          "text": "`docker-compose up` == run all tests, exit 0 on all successful exit nonzero on fail or error (including OOMEs)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T16:19:35.000667",
          "text": "`docker-compose run &lt;service-in-docker-compose.yml&gt;` == run that service, exiting with 0 on success or 1 on failure"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T16:20:38.000551",
          "text": "every \"foo-test\" service in the compose yml runs the same `test.sh` script - different test services just run using different base images (and thus different installers)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T16:21:42.000328",
          "text": "ex: `docker-compose run racket-x86-minimal-test` will run the tests in a container whose `racket` and `raco` binaries were installed by building the `racket-x86-minimal` image"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T17:43:15.000460",
          "text": "seems like I need to install non-packaged versions of docker and docker-compose"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T18:28:38.000202",
          "text": "You need a recent version of docker installed. Docker for Mac and Docker for Windows are the current best ways to get docker onto those systems"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:29:11.000413",
          "text": "Yeah, I use linux, but that doesn't mean I get a .deb for docker-compose"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:29:15.000025",
          "text": ":disappointed:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:29:38.000286",
          "text": "also, what's the best way to try another test without re-running all the previous tests?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T18:30:29.000116",
          "text": "I think there's a Docker for Linux thing. Installing packages might not be the recommended way to do stuff"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:30:49.000096",
          "text": "yeah, turns out there's a docker-provided .deb for docker itself, but not for compose"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:30:57.000315",
          "text": "I have it all running now, though"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T18:31:34.000277",
          "text": "You can use `docker-compose run &lt;service&gt; &lt;command&gt;` to override the command that would normally be run"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T18:32:24.000205",
          "text": "So I think `docker-compose run racket-x86-test raco test -p some-package` would do what you want, for example"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T18:33:21.000289",
          "text": "That runs just those tests instead of running the `test.sh` script from the CMD instruction"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:34:10.000003",
          "text": "ok great"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:34:46.000132",
          "text": "this is all very nice, thanks a ton!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T18:41:54.000005",
          "text": "Glad to help, I love this sort of stuff :)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:44:30.000051",
          "text": "<@Vincenzo> <@Stefani> Are `raco test -l` and `racket -l` intentionally setting `current-load-relative-directory` differently?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:45:01.000241",
          "text": "To see the difference, try `raco test -l tests/htdp-lang/test-htdp` and the same with `racket -l` (the latter will fail with an unknown path)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-01T18:53:24.000159",
          "text": "By the way, would you happen to know _why_ the db tests consume over a gigabyte of memory?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T18:54:06.000164",
          "text": "no, I was going to look into that"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-01T19:01:08.000150",
          "text": "Unlike `racket`, `raco test` sets the current directory to the file's directory for testing, as documented. I don't think either will have `current-load-relative-directory` set after the module declaration is loaded. Probably the directory-changing behavior in `raco test` should have been specific to the `--drdr` flag, though, since it seems to have been added as part of the `--drdr` addition."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-01T19:08:26.000142",
          "text": "<@Vincenzo> thanks, I had missed that in the docs"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T11:24:06.000548",
          "text": "somehow xvfb-run causes tests to have no output"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T11:24:18.000458",
          "text": "or maybe that was just the framework tests hanging"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T11:30:17.000571",
          "text": "no, the problem is that `docker-compose run xvfb-run ...` doesn't work, have to wrap it in `sh -c`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T13:02:22.000268",
          "text": "<@Vincenzo> The most recent Travis build keeps hanging on linux in the `file.rktl` tests, and I have no idea why: <https://travis-ci.org/racket/racket/builds/295988203>"
        }
      ]
    },
    {
      "conversation_id": "414",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: xonsh always did look interesting",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-11-01T17:58:42.000183",
          "text": "xonsh always did look interesting"
        }
      ]
    },
    {
      "conversation_id": "415",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: that's probably caused by the daemon process that [CODE] spawns not being reaped properly by [CODE] when it runs as PID 1\nChantelle: which is one of the reasons I think [CODE] should be in a different container\nLatarsha: There's one test that hasn't worked under xvfb\nChantelle: which test?\nLatarsha: The leak test in DrRacket\nLatarsha: Mentioned in the issue I think\nChantelle: is that the one that jay mentioned in slack?\nChantelle: the one that needs a real X server instead of xvfb for some bizarre reason?\nLatarsha: Probably\nLatarsha: The tests have changed some since then\nChantelle: I think I'm confused. Is that related to the docker setup or an entirely separate issue?\nChantelle: ah I only just saw the commit you added to the PR\nChantelle: I'll merge the PR as is unless you've got objections\nChantelle: my plan is to do the following next: - Split gui tests into a separate Dockerfile - Add config to docker-compose.yml to run one gui test service for each installer variant in addition to the non-gui test service - Add a Dockerfile for an image that _only_ runs xvfb - Add an xvfb service to docker-compose.yml and update each gui test service to use that xvfb instead of wrapping tests in [CODE], to avoid process weirdness and make the tests run in an environment that's more similar to how they'd run when talking to a real X server\nChantelle: that also means we could swap out the xvfb service for a different docker image that runs a real X server without changing any of the tests or test scripts\nChantelle: also: what exactly is the point of [CODE]? shouldn't [CODE] just do that by default? or is it to avoid updating packages or something?\nLatarsha: That plan sounds good, and I'm for merging now\nChantelle: ack\nLatarsha: What I meant about the tests changing is that the DrRacket tests have been changed to avoid some concurrency problems\nLatarsha: so that maybe more of them needed a real X server in the past\nLatarsha: I also think [CODE] should be the default behavior\nLatarsha: but it isn't\nChantelle: ah\nChantelle: how much do you know about the individual test suites run in the release tests?\nLatarsha: it varies a lot, as you might expect\nLatarsha: I wrote the match and TR tests, I don't understand the DrRacket tests, other things are in between\nChantelle: from what I can gather, a lot of them are doing things that can tend to make tests flaky / unportable, and I'm wondering how much effort it would take to make some improvements there\nLatarsha: making them less flaky would be good\nLatarsha: but some of them are very un-maintained\nLatarsha: and/or maintained by people with widely varying skill/time investment\nChantelle: (granted my point of comparison is my employer, where most tests are entirely capable of being executed across machine clusters where none of the machines even have hard disks...)\nLatarsha: in general, we try to avoid flakiness in DrDr\nLatarsha: but many of the release tests are not run there\nChantelle: also I presume DrDr does not run tests for every possible installation environment?\nLatarsha: right\nLatarsha: it's just a particular machine\nChantelle: whereas the release tests should probably be run on each permutation of installation options\nLatarsha: <[URL]\nLatarsha: yes, although that isn't currently done\nChantelle: how are the installers built from source anyways? is there a list of which commits to use from each of the racket repos that the release manager maintains somewhere?\nLatarsha: yes\nLatarsha: <[URL] has a lot of detail\nLatarsha: this repo <[URL] has all the releases\nChantelle: ah hah!\nChantelle: that catalog repo is the part of the release process I was missing\nEun: Chantelle: There's yet more pieces, actually. :)\nEun: But many of them no one but me needs to bother with.\nChantelle: Eun let me first say that I've got enough projects already, but I like release automation and it seems like an area where I'm able to help a lot :)\nEun: Oooh, interesting.\nEun: I'm actually in the process of increasing automation for some of these hidden parts.\nEun: But the testing checklist that's on the wiki is by far the most painful part.\nEun: The manual tests, especially.\nChantelle: well I do like testing\nChantelle: care to reveal more details, O Mysterious Vincent?\nChantelle: part of the reason I'm interested is because I have to remember to add new docker images for each racket version in my racket docker images repo and I always forget",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 55,
        "duration_minutes": 63.28,
        "contains_question": true,
        "action_keywords": [
          "should",
          "update"
        ],
        "decision_keywords": [
          "sounds good"
        ],
        "participants": [
          "Chantelle",
          "Eun",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T15:57:06.000078",
          "text": "that's probably caused by the daemon process that `xvfb-run` spawns not being reaped properly by `xvfb-run` when it runs as PID 1"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T15:58:06.000600",
          "text": "which is one of the reasons I think `xvfb` should be in a different container"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:01:39.000277",
          "text": "There's one test that hasn't worked under xvfb"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:02:05.000321",
          "text": "which test?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:04:28.000190",
          "text": "The leak test in DrRacket"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:04:38.000381",
          "text": "Mentioned in the issue I think"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:05:10.000417",
          "text": "is that the one that jay mentioned in slack?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:05:24.000420",
          "text": "the one that needs a real X server instead of xvfb for some bizarre reason?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:07:29.000253",
          "text": "Probably"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:07:40.000166",
          "text": "The tests have changed some since then"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:10:16.000161",
          "text": "I think I'm confused. Is that related to the docker setup or an entirely separate issue?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:18:40.000115",
          "text": "ah I only just saw the commit you added to the PR"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:19:43.000601",
          "text": "I'll merge the PR as is unless you've got objections"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:22:52.000179",
          "text": "my plan is to do the following next:\n\n- Split gui tests into a separate Dockerfile\n- Add config to docker-compose.yml to run one gui test service for each installer variant in addition to the non-gui test service\n- Add a Dockerfile for an image that _only_ runs xvfb\n- Add an xvfb service to docker-compose.yml and update each gui test service to use that xvfb instead of wrapping tests in `xvfb-run`, to avoid process weirdness and make the tests run in an environment that's more similar to how they'd run when talking to a real X server"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:24:00.000292",
          "text": "that also means we could swap out the xvfb service for a different docker image that runs a real X server without changing any of the tests or test scripts"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:26:29.000332",
          "text": "also: what exactly is the point of `--skip-installed`? shouldn't `raco pkg install` just do that by default? or is it to avoid updating packages or something?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:36:39.000155",
          "text": "That plan sounds good, and I'm for merging now"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:36:57.000556",
          "text": "ack"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:37:15.000031",
          "text": "What I meant about the tests changing is that the DrRacket tests have been changed to avoid some concurrency problems"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:37:26.000432",
          "text": "so that maybe more of them needed a real X server in the past"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:37:41.000039",
          "text": "I also think `--skip-installed` should be the default behavior"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:37:46.000031",
          "text": "but it isn't"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:38:07.000251",
          "text": "ah"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:42:59.000084",
          "text": "how much do you know about the individual test suites run in the release tests?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:43:14.000405",
          "text": "it varies a lot, as you might expect"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:43:48.000137",
          "text": "I wrote the match and TR tests, I don't understand the DrRacket tests, other things are in between"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:43:55.000615",
          "text": "from what I can gather, a lot of them are doing things that can tend to make tests flaky / unportable, and I'm wondering how much effort it would take to make some improvements there"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:44:22.000385",
          "text": "making them less flaky would be good"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:44:32.000345",
          "text": "but some of them are very un-maintained"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:44:53.000627",
          "text": "and/or maintained by people with widely varying skill/time investment"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:45:17.000541",
          "text": "(granted my point of comparison is my employer, where most tests are entirely capable of being executed across machine clusters where none of the machines even have hard disks...)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:46:07.000560",
          "text": "in general, we try to avoid flakiness in DrDr"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:46:15.000576",
          "text": "but many of the release tests are not run there"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:46:49.000320",
          "text": "also I presume DrDr does not run tests for every possible installation environment?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:46:58.000005",
          "text": "right"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:47:02.000292",
          "text": "it's just a particular machine"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:47:13.000634",
          "text": "whereas the release tests should probably be run on each permutation of installation options"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:47:39.000049",
          "text": "<http://drdr.racket-lang.org/help>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:47:50.000419",
          "text": "yes, although that isn't currently done"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:48:01.000247",
          "text": "how are the installers built from source anyways? is there a list of which commits to use from each of the racket repos that the release manager maintains somewhere?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:48:13.000526",
          "text": "yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:48:40.000347",
          "text": "<https://github.com/racket/racket/wiki/Release-process> has a lot of detail"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T16:49:01.000244",
          "text": "this repo <https://github.com/racket/release-catalog> has all the releases"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:49:39.000264",
          "text": "ah hah!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:49:50.000130",
          "text": "that catalog repo is the part of the release process I was missing"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-02T16:53:46.000249",
          "text": "<@Chantelle>: There's yet more pieces, actually. :)"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-02T16:54:14.000568",
          "text": "But many of them no one but me needs to bother with."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:55:26.000425",
          "text": "<@Eun> let me first say that I've got enough projects already, but I like release automation and it seems like an area where I'm able to help a lot :)"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-02T16:56:58.000632",
          "text": "Oooh, interesting."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-02T16:57:20.000267",
          "text": "I'm actually in the process of increasing automation for some of these hidden parts."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-02T16:57:38.000080",
          "text": "But the testing checklist that's on the wiki is by far the most painful part."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-02T16:57:50.000257",
          "text": "The manual tests, especially."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:58:01.000212",
          "text": "well I do like testing"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T16:59:46.000295",
          "text": "care to reveal more details, O Mysterious Vincent?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T17:00:23.000094",
          "text": "part of the reason I'm interested is because I have to remember to add new docker images for each racket version in my racket docker images repo and I always forget"
        }
      ]
    },
    {
      "conversation_id": "416",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Perhaps this is silly, but are there \"placeholder\" arguments for curried functions in Racket?\nIda: (curry fn _ _ 3)\nChantelle: Ida no, but the [CODE] package does something similar\nIda: Does Racket instead prescribe a different idiom?\nChantelle: I think Racket has no style recommendations on lambda shorthands\nChantelle: most folks use one of the following: - the [CODE] function, [CODE] - the [CODE] and [CODE] SRFI macros, [CODE] - the [CODE] package, [CODE] - the [CODE] package, [CODE] - the [CODE] package, [CODE]\nIda: hmmm, perhaps I shall check out the fancy-app package, but so far I haven't been dowloading other people's libraries\nIda: thanks\nChantelle: glad to help!\nEun: Chantelle: No time right now, but I can tell you more later.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 44.75,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Ida"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-02T17:18:40.000318",
          "text": "Perhaps this is silly, but are there \"placeholder\" arguments for curried functions in Racket?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-02T17:18:52.000071",
          "text": "(curry fn _ _ 3)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T17:19:01.000203",
          "text": "<@Ida> no, but the `fancy-app` package does something similar"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-02T17:19:20.000090",
          "text": "Does Racket instead prescribe a different idiom?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T17:19:38.000131",
          "text": "I think Racket has no style recommendations on lambda shorthands"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T17:22:52.000347",
          "text": "most folks use one of the following:\n\n- the `curry` function, `((curry + 1 2) 3) =&gt; 6`\n- the `cut` and `cute` SRFI macros, `((cut + 1 2 &lt;&gt;) 3) =&gt; 6`\n- the `fancy-app` package, `((+ 1 2 _) 3) =&gt; 6`\n- the `afl` package, `(#λ(+ 1 2 %) 3) =&gt; 6`\n- the `curly-fn` package, `(#{+ 1 2} 3) =&gt; 6`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-02T17:27:26.000214",
          "text": "hmmm, perhaps I shall check out the fancy-app package, but so far I haven't been dowloading other people's libraries"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-02T17:27:36.000326",
          "text": "thanks"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T17:27:43.000138",
          "text": "glad to help!"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-02T18:03:25.000421",
          "text": "<@Chantelle>: No time right now, but I can tell you more later."
        }
      ]
    },
    {
      "conversation_id": "417",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: Ida srfi-26 (which has cut) should be available in racket without having to download someone elses package",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-11-02T19:42:40.000222",
          "text": "<@Ida> srfi-26 (which has cut) should be available in racket without having to download someone elses package"
        }
      ]
    },
    {
      "conversation_id": "418",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Likewise my racket-travis repo",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-11-02T20:10:50.000245",
          "text": "Likewise my racket-travis repo"
        }
      ]
    },
    {
      "conversation_id": "419",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Magnolia: Anyone else have build problems on git HEAD? (edit: seems to happen for me on v6.11 too, I wonder if Racket doesn't like something with my OS config...)\nMagnolia: I get [CODE] during the collects setup.\nMagnolia: I'm on commit [CODE] and should be a clean checkout since I just did [CODE]\nMagnolia: Ah argh, looks like I recently built some networking software that modifies [CODE]. Setting that too low can cause [CODE] failures. I bet that's it. Sorry for the noise.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 4,
        "duration_minutes": 50.23,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Magnolia"
        ]
      },
      "timeline": [
        {
          "user": "Magnolia",
          "timestamp": "2017-11-02T21:01:50.000030",
          "text": "Anyone else have build problems on git HEAD? (edit: seems to happen for me on v6.11 too, I wonder if Racket doesn't like something with my OS config...)"
        },
        {
          "user": "Magnolia",
          "timestamp": "2017-11-02T21:02:14.000214",
          "text": "I get `mprotect failed: 7f9ae8800000, 524288, 1, 12` during the collects setup."
        },
        {
          "user": "Magnolia",
          "timestamp": "2017-11-02T21:03:02.000186",
          "text": "I'm on commit `4f1ef42d071c060973b69de001ad577261f13a61` and should be a clean checkout since I just did `git clean -fxd`"
        },
        {
          "user": "Magnolia",
          "timestamp": "2017-11-02T21:52:04.000138",
          "text": "Ah argh, looks like I recently built some networking software that modifies `vm.max_map_count`. Setting that too low can cause `mprotect` failures. I bet that's it. Sorry for the noise."
        }
      ]
    },
    {
      "conversation_id": "420",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Chantelle Ida actually most people just use lambda\nChantelle: well yes there's that\nChantelle: Latarsha I may have gone a little overboard.... but I'm now able to run the GUI tests while _watching_ what the tests are doing to the X server in a browser\nChantelle: xvfb container + x11vnc container which turns x server into vnc server + websockify container which gives access to vnc server over websockets + nginx with novnc, which is a client web app somebody made that shows you a live feed of a vnc-over-websocket server in a browser window",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 390.88,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-02T22:23:34.000146",
          "text": "<@Chantelle> <@Ida> actually most people just use lambda"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-02T22:23:55.000091",
          "text": "well yes there's that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T04:53:20.000388",
          "text": "<@Latarsha> I may have gone a little overboard.... but I'm now able to run the GUI tests while _watching_ what the tests are doing to the X server in a browser"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T04:54:27.000106",
          "text": "xvfb container + x11vnc container which turns x server into vnc server + websockify container which gives access to vnc server over websockets + nginx with novnc, which is a client web app somebody made that shows you a live feed of a vnc-over-websocket server in a browser window"
        }
      ]
    },
    {
      "conversation_id": "421",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Woot\nVincenzo: Latarsha I haven't figured out why the Travis build is hanging . I've tried a few Linux builds, including ones with the same package set as on Travis, but didn't provoke the problem.\nLatarsha: Vincenzo I'll push a PR which runs the file tests in non-quiet mode\nLatarsha: I think it's because TR knows that the output is the input\nLatarsha: and uses that, together with the input type, in subtyping\nLatarsha: (innovation due to Eric Dobson)\nNelson: thank you Eric Dobson\nLatarsha: Chantelle it does a bunch of internal timing logging",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 8,
        "duration_minutes": 486.07,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Nelson",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T07:15:17.000238",
          "text": "Woot"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-03T12:12:40.000239",
          "text": "<@Latarsha> I haven't figured out why the Travis build is hanging . I've tried a few Linux builds, including ones with the same package set as on Travis, but didn't provoke the problem."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T12:13:26.000348",
          "text": "<@Vincenzo> I'll push a PR which runs the file tests in non-quiet mode"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T13:40:13.000428",
          "text": "I think it's because TR knows that the output is the input"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T13:40:25.000132",
          "text": "and uses that, together with the input type, in subtyping"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T13:40:54.000357",
          "text": "(innovation due to Eric Dobson)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-03T13:41:19.000573",
          "text": "thank you Eric Dobson"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T15:21:21.000265",
          "text": "<@Chantelle> it does a bunch of internal timing logging"
        }
      ]
    },
    {
      "conversation_id": "422",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: can someone explain _how_ this program typechecks? [CODE_BLOCK] (It doesn't typecheck if I uncomment the return type --- that part makes sense to me)\nNelson: I tried this in the repl too, and [CODE] is [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.42,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-11-03T13:38:51.000095",
          "text": "can someone explain _how_ this program typechecks?\n```\n#lang typed/racket/base\n(define (f (x : Integer)) #|: Integer|# x)\n(ann f (-&gt; Natural Natural))\n```\n(It doesn't typecheck if I uncomment the return type --- that part makes sense to me)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-03T13:39:16.000217",
          "text": "I tried this in the repl too, and `(:print-type f)` is `(-&gt; Integer Integer)`"
        }
      ]
    },
    {
      "conversation_id": "423",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: does typed racket do any logging besides warnings about dead code?\nChantelle: with racket loggers instead of stdout / something else I assume?\nChantelle: I think making TR log everything with the topic [CODE] or [CODE] might be a good idea\nNelson: Chantelle the [CODE] logger\nLatarsha: yeah",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 4.37,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T15:19:49.000299",
          "text": "does typed racket do any logging besides warnings about dead code?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T15:22:00.000305",
          "text": "with racket loggers instead of stdout / something else I assume?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T15:23:01.000138",
          "text": "I think making TR log everything with the topic `typed/racket` or `typed/racket/base` might be a good idea"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-03T15:23:11.000474",
          "text": "<@Chantelle> the `tr-timing` logger"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T15:24:11.000277",
          "text": "yeah"
        }
      ]
    },
    {
      "conversation_id": "424",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nancie: If I wanted to write a library of common validation functions like [CODE] would it be super cool or awkward and asinine to provide them as contracts?\nNancie: I suppose there's nothing to stop me from providing both\nNelson: super cool\nChantelle: Nancie I'd either provide them as contracts like [CODE] _or_ use something that's specifically only for flat data\nNelson: but I'm usually happy with stuff like [CODE]\nNelson: using the predicate as a contract\nChantelle: like expectations (self plug)\nChantelle: Nelson I think for server programming in particular it's really useful to have more than just a predicate so error messages for bad requests can be more informative\nChantelle: particularly when parsing string input\nNancie: k, this is going into my sheet of notes for Obvious Web Stuff Racket Doesn't Have Yet\nKa: Nancie that must be a big giant list. :troll:\nNancie: Yes, that's why I like it! I'm greedy and vain enough to take all the easy problems for myself\nChantelle: that's the way to do it :p",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 13,
        "duration_minutes": 13.22,
        "contains_question": true,
        "action_keywords": [
          "must"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Nancie",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nancie",
          "timestamp": "2017-11-03T16:59:39.000434",
          "text": "If I wanted to write a library of common validation functions like `valid-email?` would it be super cool or awkward and asinine to provide them as contracts?"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-11-03T17:00:32.000280",
          "text": "I suppose there's nothing to stop me from providing both"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-03T17:01:04.000015",
          "text": "super cool"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:01:15.000353",
          "text": "<@Nancie> I'd either provide them as contracts like `valid-email/c` _or_ use something that's specifically only for flat data"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-03T17:01:27.000011",
          "text": "but I'm usually happy with stuff like `(-&gt; valid-email? blah-blah-blah)`"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-03T17:01:34.000223",
          "text": "using the predicate as a contract"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:01:36.000191",
          "text": "like expectations (self plug)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:02:26.000001",
          "text": "<@Nelson> I think for server programming in particular it's really useful to have more than just a predicate so error messages for bad requests can be more informative"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:03:06.000158",
          "text": "particularly when parsing string input"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-11-03T17:04:25.000246",
          "text": "k, this is going into my sheet of notes for Obvious Web Stuff Racket Doesn't Have Yet"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:11:45.000163",
          "text": "<@Nancie> that must be a big giant list. :troll:"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-11-03T17:12:28.000101",
          "text": "Yes, that's why I like it! I'm greedy and vain enough to take all the easy problems for myself"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:12:52.000162",
          "text": "that's the way to do it :p"
        }
      ]
    },
    {
      "conversation_id": "425",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: question: what \"kids these days\" editor has the best racket support currently?\nChantelle: do any of them?\nLatarsha: i just installed VS code and it has two racket plugins\nLatarsha: but I can't really tell what they do\nLatarsha: besides syntax highlighting\nChantelle: I use Atom a lot and vaguely recall a random racket plugin someone wrote that kinda sorta worked, but not by doing any of the stuff drracket does\nLatarsha: <[URL]\nChantelle: I think emacs and drracket are the only editors where \"racket support\" includes actually macroexpanding the code to figure out how to properly highlight stuff\nKa: where's the atom plugin that uninstalls it and installs emacs instead?\nChantelle: then I could just open [CODE] and similar files in drracket and not need two editors\nKimbery: I should switch to emacs, but I have never managed to stick with it for more than two weeks",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 11,
        "duration_minutes": 21.77,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:24:55.000121",
          "text": "question: what \"kids these days\" editor has the best racket support currently?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:27:14.000441",
          "text": "do any of them?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:27:30.000363",
          "text": "i just installed VS code and it has two racket plugins"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:27:36.000423",
          "text": "but I can't really tell what they do"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:27:43.000109",
          "text": "besides syntax highlighting"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:27:44.000371",
          "text": "I use Atom a lot and vaguely recall a random racket plugin someone wrote that kinda sorta worked, but not by doing any of the stuff drracket does"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:28:10.000406",
          "text": "<https://atom.io/packages/language-racket>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:28:43.000040",
          "text": "I think emacs and drracket are the only editors where \"racket support\" includes actually macroexpanding the code to figure out how to properly highlight stuff"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:31:29.000215",
          "text": "where's the atom plugin that uninstalls it and installs emacs instead?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:45:54.000216",
          "text": "then I could just open `.gitignore` and similar files in drracket and not need two editors"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:46:41.000209",
          "text": "I should switch to emacs, but I have never managed to stick with it for more than two weeks"
        }
      ]
    },
    {
      "conversation_id": "426",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: there was a time when I wanted to add all the drracket features to atom, and then I (1) realized I like having time to sleep and (2) stopped worrying and learned to love drracket\nChantelle: honestly I'd rather figure out a way for drracket to infer [CODE]s for files based on file extensions and then just write [CODE]s for all the stuff I'd normally edit in atom...\nChantelle: at least, not need two most of the time\nKimbery: I am not actually sure which of intellij, drracket, and atom consume the most memory on my computer\nChantelle: The Terrible Trio\nChantelle: ramsticks quake in fear as they boot up\nKa: Kimbery it's funny that *you* have memory issues. That's always been the complaint against emacs!\nKa: oh how far we've come.\nKa: where emacs isn't the memory hog.\nLatarsha: I love DrRacket and use it all the time\nKimbery: I don’t actually think I have any memory problems, except when I decide to ask maven to do a clean build of my company’s entire monolithic jvm codebase\nLatarsha: but I also think it's important to make sure the experience in other editors is ok\nNancie: I only just switched to it full time about a month ago after several months of part-time use. My need for editing gigantic yaml files drove me there from Jetbrains and racket-mode helped me to stay\nKa: I'm an emacs + geiser user. I think there are things in racket-mode that I'd like, but haven't plunged yet.\nKimbery: that was my main motivation for wanting to get Atom integration\nChantelle: there's that json-rpc language editor server project thing that got discussed at racketcon office hours briefly\nKimbery: plus I think it would be super cool to have DrRacket’s binding arrows in another editor, and I think Atom/VSCode could theoretically support that\nKa: Chantelle specifically for racket?\nNancie: I do love the binding arrows\nChantelle: Ka there's a generic json-rpc protocol for language editor stuff that Microsoft was working on for vscode, and at office hours I think Stefani brought up a desire to get racket to integrate with it\nCorey: Nancie wrt validating email addresses, something I needed to do recently: <[URL] (maybe outside the scope of what you wanted to do, idk)\nKimbery: at first I found the binding arrows sort of weird, but I’ve gotten used to them enough that I don’t really think about them at all except when someone comments on them in surprise while looking over my shoulder while I write racket\nKa: Chantelle ah, interesting.\nChantelle: I like binding arrows because they're a really easy-to-explain example of something incredibly cool that racket can do because of how it does things\nChantelle: or at least easy-to-demo\nKimbery: it’s especially fun to show off the binding arrows for (1) non-s-exp languages and (2) macros that do weird things with scope and/or [CODE]\nCorey: At one point I considered trying to do the arrows in racket-mode. But I sat down for awhile until the feeling passed.\nLatarsha: Chantelle yeah, that's the language server protocol or something like that\nCorey: I mean there is ASCII art and \"overlays\", and even images in some emacs builds <[URL]\nCorey: But yeah. No.\nCorey: [CODE] lets you jump among the definitions and uses, that's it.\nKimbery: I’m curious, Corey, how much did you have to replicate to do Check Syntax’s analysis outside of DrRacket? and how much of that could you just re-use without reinventing? I know Check Syntax does a lot of work to handle things like tail position analysis, inspection of [CODE]-ness, and props like [CODE], [CODE], and [CODE].\nChantelle: I've wondered that too\nKimbery: could you basically just use [CODE] directly?\nCorey: Robby exposed it and I use a list of things produced by it.\nKimbery: neat. so the analysis is entirely reused, and racket-mode “just” has to do the work to map that information onto the current buffer?\nCorey: The racket side is just <[URL]\nCorey: The emacs side is creating a bunch of overlays using that list -- and ignoring the arrow info",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 38,
        "duration_minutes": 19.43,
        "contains_question": true,
        "action_keywords": [
          "build",
          "decide",
          "discuss",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Ka",
          "Kimbery",
          "Latarsha",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:44:10.000029",
          "text": "there was a time when I wanted to add all the drracket features to atom, and then I (1) realized I like having time to sleep and (2) stopped worrying and learned to love drracket"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:45:26.000294",
          "text": "honestly I'd rather figure out a way for drracket to infer `#lang`s for files based on file extensions and then just write `#lang`s for all the stuff I'd normally edit in atom..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:46:02.000156",
          "text": "at least, not need two most of the time"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:46:10.000364",
          "text": "I am not actually sure which of intellij, drracket, and atom consume the most memory on my computer"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:46:22.000005",
          "text": "The Terrible Trio"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:46:29.000190",
          "text": "ramsticks quake in fear as they boot up"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:47:10.000317",
          "text": "<@Kimbery> it's funny that *you* have memory issues. That's always been the complaint against emacs!"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:47:23.000037",
          "text": "oh how far we've come."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:47:37.000122",
          "text": "where emacs isn't the memory hog."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:48:01.000010",
          "text": "I love DrRacket and use it all the time"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:48:09.000146",
          "text": "I don’t actually think I have any memory problems, except when I decide to ask maven to do a clean build of my company’s entire monolithic jvm codebase"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:48:15.000201",
          "text": "but I also think it's important to make sure the experience in other editors is ok"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-11-03T17:48:21.000268",
          "text": "I only just switched to it full time about a month ago after several months of part-time use. My need for editing gigantic yaml files drove me there from Jetbrains and racket-mode helped me to stay"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:48:56.000096",
          "text": "I'm an emacs + geiser user. I think there are things in racket-mode that I'd like, but haven't plunged yet."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:48:56.000241",
          "text": "that was my main motivation for wanting to get Atom integration"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:49:04.000085",
          "text": "there's that json-rpc language editor server project thing that got discussed at racketcon office hours briefly"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:49:41.000018",
          "text": "plus I think it would be super cool to have DrRacket’s binding arrows in another editor, and I think Atom/VSCode could theoretically support that"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:49:47.000031",
          "text": "<@Chantelle> specifically for racket?"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-11-03T17:49:56.000318",
          "text": "I do love the binding arrows"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:50:34.000241",
          "text": "<@Ka> there's a generic json-rpc protocol for language editor stuff that Microsoft was working on for vscode, and at office hours I think <@Stefani> brought up a desire to get racket to integrate with it"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T17:50:39.000168",
          "text": "<@Nancie> wrt validating email addresses, something I needed to do recently: <https://gist.github.com/greghendershott/4019ddefeba6d928637f797e8f0f8ef6> (maybe outside the scope of what you wanted to do, idk)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:50:49.000347",
          "text": "at first I found the binding arrows sort of weird, but I’ve gotten used to them enough that I don’t really think about them at all except when someone comments on them in surprise while looking over my shoulder while I write racket"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T17:51:22.000027",
          "text": "<@Chantelle> ah, interesting."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:52:14.000155",
          "text": "I like binding arrows because they're a really easy-to-explain example of something incredibly cool that racket can do because of how it does things"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T17:52:21.000365",
          "text": "or at least easy-to-demo"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:54:16.000138",
          "text": "it’s especially fun to show off the binding arrows for (1) non-s-exp languages and (2) macros that do weird things with scope and/or `'sub-range-binders`"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T17:55:43.000409",
          "text": "At one point I considered trying to do the arrows in racket-mode. But I sat down for awhile until the feeling passed."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-03T17:55:58.000059",
          "text": "<@Chantelle> yeah, that's the language server protocol or something like that"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T17:57:23.000100",
          "text": "I mean there is ASCII art and \"overlays\", and even images in some emacs builds <https://www.gnu.org/software/emacs/manual/html_node/elisp/Images.html>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T17:57:30.000055",
          "text": "But yeah. No."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T17:58:00.000163",
          "text": "`racket-check-syntax-mode` lets you jump among the definitions and uses, that's it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T17:59:37.000014",
          "text": "I’m curious, <@Corey>, how much did you have to replicate to do Check Syntax’s analysis outside of DrRacket? and how much of that could you just re-use without reinventing? I know Check Syntax does a lot of work to handle things like tail position analysis, inspection of `syntax-original?`-ness, and props like `'disappeared-use`, `'disappeared-binding`, and `'sub-range-binders`."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-03T18:00:05.000254",
          "text": "I've wondered that too"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T18:00:14.000065",
          "text": "could you basically just use `drracket/check-syntax` directly?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T18:00:24.000147",
          "text": "Robby exposed it and I use a list of things produced by it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-03T18:01:38.000129",
          "text": "neat. so the analysis is entirely reused, and racket-mode “just” has to do the work to map that information onto the current buffer?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T18:02:48.000380",
          "text": "The racket side is just <https://github.com/greghendershott/racket-mode/blob/master/cmds.rkt#L779-L832>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-03T18:03:36.000199",
          "text": "The emacs side is creating a bunch of overlays using that list -- and ignoring the arrow info"
        }
      ]
    },
    {
      "conversation_id": "427",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Stefani: Chantelle Ka <[URL]\nKa: oh nice!\nChantelle: _nice_\nChantelle: this is using the json RPC protocol right?\nChantelle: also: hey cool it's using my [CODE] package!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 236.52,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Stefani",
          "timestamp": "2017-11-03T20:33:29.000016",
          "text": "<@Chantelle> <@Ka> <https://github.com/jeapostrophe/racket-langserver>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-03T20:35:43.000099",
          "text": "oh nice!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-04T00:29:35.000033",
          "text": "_nice_"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-04T00:29:46.000046",
          "text": "this is using the json RPC protocol right?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-04T00:30:00.000033",
          "text": "also: hey cool it's using my `delimit-app` package!"
        }
      ]
    },
    {
      "conversation_id": "428",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Oh, interesting. I wrote [CODE] and the contract \"expected\" message said the simpler [CODE]. I wonder if the contract itself was optimized like that or just the message. I'm guessing the former.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-11-04T09:45:57.000087",
          "text": "Oh, interesting. I wrote `(and/c exact-integer? (between/c 1 2))` and the contract \"expected\" message said the simpler `(integer-in 1 2)`. I wonder if the contract itself was optimized like that or just the message. I'm guessing the former."
        }
      ]
    },
    {
      "conversation_id": "429",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Looks awesome\nLatarsha: What do I do to use it?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.13,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-04T09:59:50.000050",
          "text": "Looks awesome"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-04T09:59:58.000071",
          "text": "What do I do to use it?"
        }
      ]
    },
    {
      "conversation_id": "430",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Genevie: Today I downloaded the Racket 6.11 package for Mac. When I double-click on DrRacket, it does not start. I see the following in the system logs: [CODE_BLOCK] Have others seen this? FWIW, earlier today I installed the latest macOS security update.\nGenevie: If I run [CODE] from the command line, that (seems to) work fine.\nLatarsha: Genevie what about [CODE] on the command line?\nGenevie: I will try that and get back to you.\nVincenzo: Genevie Which version of macOS are you running? I'm still on 10.11 (El Capitan), and the current security update didn't affect DrRacket for me, but maybe I need to be on [High] Sierra to see the problem.\nGenevie: Vincenzo I am running macOS 10.12.6 “Sierra.”\nVincenzo: Genevie I updated a Sierra machine, and things still work for me. Maybe the output from Sam's suggestion will help.\nGenevie: I will try that when I get back to my house, later today.\nGenevie: Vincenzo Latarsha Running [CODE] seems to work without problem on my Mac.\nGenevie: Doubling-clicking the DrRacket icon yields the same error that I reported earlier, in [CODE]: [CODE_BLOCK]\nGenevie: Sometimes (?) I see that a volume is mounted and then quickly unmounted around the time that I run DrRacket by double-clicking on it. The volume seems to be a random hex string, different each tim—a UUID? (The mounting and unmounting is reported to me by HardwareGrowler.)\nGenevie: The mounting/unmounting does not happen when I run [CODE] from the command line.\nVincenzo: Genevie That behavior sounds like macOS trying to sandbox the application as untrusted. But the disk image that you used to install should have been signed, and so the application shouldn't be tagged as needing a sandbox. Maybe something has gone wrong with signing, but I'd expect to have seen and heard about more problems in that case.\nGenevie: FWIW, I downloaded the Racket 6.11 package from the Utah mirror.\nGenevie: Just now, I downloaded the Racket 6.11 package again, from the Utah mirror, to another Mac running macOS 10.12.6. Double-clicking on DrRacket starts right up, no problem.\nGenevie: My machine on which it works is “fairly new”: an iMac (Retina 5K, 27-inch, Late 2015) with a 4GHz Interl Core i7.\nGenevie: My machine on which it does not work is “fairly old”: a MacBook Pro (15\", Mid 2012) with a 2.6GHz Intel Core i7.\nGenevie: Perhaps the biggest difference between the machines is the graphics systems. Notably, my MacBook Pro does not have a retina display.\nVincenzo: I've been trying via VNC to a 2012 Mac mini, so I don't think the vintage or display is the problem Does [CODE] say anything? Or [CODE] (if you installed to \"Applications\")?\nGenevie: I ran both commands. Neither one produced any output.\nVincenzo: That's good in that no output means no detected signing problem, but it leaves me with no more guesses\nGenevie: Well, if you think of another hypothesis, let me know. Thanks for pondering!\nGenevie: :thinking_face:\nLashaunda: Genevie Sometimes when I download a nightly build, when I run it (double-click on the icon), nothing happens, other than DrRacket seems to start to start and then quickly shuts down again. At some point in the past, someone told me (on MacOS) when this happens to drag the DrRacket icon/app out of the folder it's in, to the folder above, and then to drag it back into the original folder and try double-clicking again. When I do that, the problem goes away and DrRacket starts normally from that point forward. I don't know if this is related to the problem you saw, but I'm mentioning it in case it might be.\nGenevie: Lashaunda I tried that procedure on my MacBook Pro (where DrRacket was not working), and— _the problem went away!_\nGenevie: Your trick worked!\nGenevie: “Huh.”\nGenevie: Thank you for your help, Lashaunda!\nJalisa: Genevie I’m on macOS. Installing the new version was a breeze for me. Simply drag the old folder to the trash, and then the new (entire folder—after opening package) to Applications. After that, running [CODE] seems to work flawlessly. Here also is another guide for that <[URL]\nGenevie: Thanks for the help, Jalisa!",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 30,
        "duration_minutes": 1794.88,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Genevie",
          "Jalisa",
          "Lashaunda",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Genevie",
          "timestamp": "2017-11-04T16:41:08.000040",
          "text": "Today I downloaded the Racket 6.11 package for Mac. When I double-click on DrRacket, it does not start. I see the following in the system logs:\n```\nNov  4 14:22:11 gris com.apple.xpc.launchd[1] (com.apple.xpc.launchd.oneshot.0x10000007.DrRacket[1053]): Service exited with abnormal code: 1\nNov  4 14:22:27 gris com.apple.xpc.launchd[1] (org.racket-lang.DrRacket.16768[1060]): Service exited with abnormal code: 1\n```\nHave others seen this?\nFWIW, earlier today I installed the latest macOS security update."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-04T16:41:31.000062",
          "text": "If I run `racket` from the command line, that (seems to) work fine."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-04T19:17:16.000021",
          "text": "<@Genevie> what about `racket -l drracket` on the command line?"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T08:32:34.000082",
          "text": "I will try that and get back to you."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-05T10:38:59.000005",
          "text": "<@Genevie> Which version of macOS are you running? I'm still on 10.11 (El Capitan), and the current security update didn't affect DrRacket for me, but maybe I need to be on [High] Sierra to see the problem."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T11:20:17.000091",
          "text": "<@Vincenzo> I am running macOS 10.12.6 “Sierra.”"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-05T11:42:44.000105",
          "text": "<@Genevie> I updated a Sierra machine, and things still work for me. Maybe the output from Sam's suggestion will help."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T11:43:16.000057",
          "text": "I will try that when I get back to my house, later today."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T14:43:57.000027",
          "text": "<@Vincenzo> <@Latarsha> Running `bin/racket -l drracket` seems to work without problem on my Mac."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T14:48:51.000013",
          "text": "Doubling-clicking the DrRacket icon yields the same error that I reported earlier, in `system.log`:\n```\nNov  5 12:41:40 gris com.apple.xpc.launchd[1] (com.apple.xpc.launchd.oneshot.0x1000002f.DrRacket[3153]): Service exited with abnormal code: 1\n```"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T14:52:44.000041",
          "text": "Sometimes (?) I see that a volume is mounted and then quickly unmounted around the time that I run DrRacket by double-clicking on it. The volume seems to be a random hex string, different each tim—a UUID? (The mounting and unmounting is reported to me by HardwareGrowler.)"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T14:53:56.000016",
          "text": "The mounting/unmounting does not happen when I run `bin/racket -l drracket` from the command line."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-05T15:40:36.000006",
          "text": "<@Genevie> That behavior sounds like macOS trying to sandbox the application as untrusted. But the disk image that you used to install should have been signed, and so the application shouldn't be tagged as needing a sandbox.\nMaybe something has gone wrong with signing, but I'd expect to have seen and heard about more problems in that case."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T15:53:37.000025",
          "text": "FWIW, I downloaded the Racket 6.11 package from the Utah mirror."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T15:59:11.000065",
          "text": "Just now, I downloaded the Racket 6.11 package again, from the Utah mirror, to another Mac running macOS 10.12.6. Double-clicking on DrRacket starts right up, no problem."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:00:20.000027",
          "text": "My machine on which it works is “fairly new”: an iMac (Retina 5K, 27-inch, Late 2015) with a 4GHz Interl Core i7."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:02:06.000026",
          "text": "My machine on which it does not work is “fairly old”: a MacBook Pro (15\", Mid 2012) with a 2.6GHz Intel Core i7."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:03:40.000087",
          "text": "Perhaps the biggest difference between the machines is the graphics systems. Notably, my MacBook Pro does not have a retina display."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-05T16:09:49.000009",
          "text": "I've been trying via VNC to a 2012 Mac mini, so I don't think the vintage or display is the problem\nDoes `codesign -v racket-6.11-x86_64-macosx.dmg` say anything? Or `codesign -v /Applications/Racket\\ v6.11/DrRacket.app` (if you installed to \"Applications\")?"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:11:21.000111",
          "text": "I ran both commands. Neither one produced any output."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-05T16:17:34.000066",
          "text": "That's good in that no output means no detected signing problem, but it leaves me with no more guesses"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:18:34.000048",
          "text": "Well, if you think of another hypothesis, let me know. Thanks for pondering!"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:18:41.000002",
          "text": ":thinking_face:"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-05T16:30:09.000108",
          "text": "<@Genevie> Sometimes when I download a nightly build, when I run it (double-click on the icon), nothing happens, other than DrRacket seems to start to start and then quickly shuts down again.  At some point in the past, someone told me (on MacOS) when this happens to drag the DrRacket icon/app out of the folder it's in, to the folder above, and then to drag it back into the original folder and try double-clicking again.  When I do that, the problem goes away and DrRacket starts normally from that point forward.  I don't know if this is related to the problem you saw, but I'm mentioning it in case it might be."
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:40:28.000006",
          "text": "<@Lashaunda> I tried that procedure on my MacBook Pro (where DrRacket was not working), and— _the problem went away!_"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:40:35.000088",
          "text": "Your trick worked!"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T16:40:48.000008",
          "text": "“Huh.”"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T18:29:30.000010",
          "text": "Thank you for your help, <@Lashaunda>!"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-05T21:05:02.000002",
          "text": "<@Genevie> I’m on macOS. Installing the new version was a breeze for me. Simply drag the old folder to the trash, and then the new (entire folder—after opening package) to Applications. After that, running `sudo sh -c 'echo \"/Applications/Racket v6.11/bin\" &gt;&gt; /etc/paths'` seems to work flawlessly. Here also is another guide for that <http://beautifulracket.com/setting-the-mac-os-path.html|beautifulracket.com/setting-the-mac-os-path.html>"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-11-05T22:36:01.000170",
          "text": "Thanks for the help, <@Jalisa>!"
        }
      ]
    },
    {
      "conversation_id": "431",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Is it possible for two different Racket threads to use [CODE] on linux-y systems to talk to two different X servers? The only way I can think of how that would work is if the threads set the [CODE] environment variable in the [CODE] parameter and that didn't explode when GTK was called via FFI\nLatarsha: Chantelle that seems unlikely to be possible to me, but it's more likely in racket than in other systems",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 198.23,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-05T04:42:47.000015",
          "text": "Is it possible for two different Racket threads to use `racket/gui` on linux-y systems to talk to two different X servers? The only way I can think of how that would work is if the threads set the `DISPLAY` environment variable in the `current-environment-variables` parameter and that didn't explode when GTK was called via FFI"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-05T08:01:01.000095",
          "text": "<@Chantelle> that seems unlikely to be possible to me, but it's more likely in racket than in other systems"
        }
      ]
    },
    {
      "conversation_id": "432",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: What do people here think of the idea of named partially applied functions?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ida"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-05T12:17:35.000020",
          "text": "What do people here think of the idea of named partially applied functions?"
        }
      ]
    },
    {
      "conversation_id": "433",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Latarsha Eun hopefully for the 6.12 release you'll be able to watch the GUI tests from your friendly neighborhood web browser <[URL]\nTina: Corey you are right about [CODE]: <[URL]\nCorey: What I've been doing lately is making a web site: [CODE_BLOCK]\nChantelle: Corey how's the experience been this time around?\nCorey: It's been good so far. (It's really my first time around.)\nChantelle: huh, I could have sworn you'd made sites with racket before\nChantelle: then again my memory is severely inadequate\nCorey: Just static with Frog or Scribble\nChantelle: ahhhh\nCorey: I have also doinked around with ClojureScript\nCorey: This site is 0% XxxScript (except for what Stripe supplies). It's all Racket plus Postgres on AWS.\nChantelle: _nice_\nChantelle: what're you using to talk to postgres with racket? just the [CODE] library or any extra stuff?\nCorey: The [CODE] library, plus most queries written as sexprs using Ryan's [CODE] lib\nChantelle: fantastic\nChantelle: how's using that [CODE] package been?\nCorey: It's been better than embedding text string literals, even within at-expr blocks. :slightly_smiling_face:\nJalisa: Does anyone know of projects and Racket related to new cryptocurrencies?\nChantelle: there's none that I know of\nJalisa: Thanks.\nEun: Latarsha: Is there a minimum docker version needed to run your testing setup?\nChantelle: Eun yes, and it's fairly recent\nChantelle: is that docker-compose version or docker engine version?\nEun: Chantelle: Ah, ok.\nEun: Docker engine, lemme check docker-compose.\nChantelle: are you installing onto a mac?\nEun: 1.5.2\nEun: Yes, I'm running this on my laptop, which is a mac.\nChantelle: my advice is: don't install from homebrew, only install it with the official Docker for Mac installer\nChantelle: it should be possible but generally Docker for Mac is simpler and auto-updates\nChantelle: I'm not sure the homebrew formula is officially maintained by docker\nEun: Ah, ok, will try that.\nEun: Chantelle: Got a newer version, now things seem to be happening. Thanks!\nChantelle: Eun :+1:\nCorey: Some Docker trivia: <[URL]\nChantelle: huh, so that's where the whale came from\nChantelle: I hope that designer got paid well and got a lot more work from docker for all the other logs and stuff they needed",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 37,
        "duration_minutes": 1190.02,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Eun",
          "Jalisa",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-05T19:08:35.000138",
          "text": "<@Latarsha> <@Eun> hopefully for the 6.12 release you'll be able to watch the GUI tests from your friendly neighborhood web browser <https://github.com/samth/docker-racket-build/pull/18>"
        },
        {
          "user": "Tina",
          "timestamp": "2017-11-06T11:11:35.000028",
          "text": "<@Corey> you are right about `and/c`: <https://github.com/racket/racket/blob/master/racket/collects/racket/contract/private/and.rkt#L182-L246>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:19:30.000240",
          "text": "What I've been doing lately is making a web site:\n```\n$ curl -I -s <https://deals.extramaze.com> | grep Server\nServer: Racket\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:22:27.000267",
          "text": "<@Corey> how's the experience been this time around?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:23:46.000082",
          "text": "It's been good so far. (It's really my first time around.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:26:14.000063",
          "text": "huh, I could have sworn you'd made sites with racket before"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:26:28.000060",
          "text": "then again my memory is severely inadequate"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:26:37.000097",
          "text": "Just static with Frog or Scribble"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:27:06.000239",
          "text": "ahhhh"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:27:07.000532",
          "text": "I have also doinked around with ClojureScript"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:27:56.000331",
          "text": "This site is 0% XxxScript (except for what Stripe supplies).\nIt's all Racket plus Postgres on AWS."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:28:15.000449",
          "text": "_nice_"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:28:30.000424",
          "text": "what're you using to talk to postgres with racket? just the `db` library or any extra stuff?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:28:49.000008",
          "text": "The `db` library, plus most queries written as sexprs using Ryan's `sql` lib"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:29:00.000291",
          "text": "fantastic"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:29:11.000635",
          "text": "how's using that `sql` package been?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:29:39.000337",
          "text": "It's been better than embedding text string literals, even within at-expr blocks. :slightly_smiling_face:"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-06T14:30:21.000494",
          "text": "Does anyone know of projects and Racket related to new cryptocurrencies?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:30:54.000465",
          "text": "there's none that I know of"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-06T14:34:21.000453",
          "text": "Thanks."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:40:27.000096",
          "text": "<@Latarsha>: Is there a minimum docker version needed to run your testing setup?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:40:38.000665",
          "text": "<@Eun> yes, and it's fairly recent"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:40:58.000767",
          "text": "is that docker-compose version or docker engine version?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:41:00.000130",
          "text": "<@Chantelle>: Ah, ok."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:41:11.000200",
          "text": "Docker engine, lemme check docker-compose."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:41:11.000585",
          "text": "are you installing onto a mac?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:41:23.000213",
          "text": "1.5.2"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:41:32.000040",
          "text": "Yes, I'm running this on my laptop, which is a mac."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:41:58.000479",
          "text": "my advice is: don't install from homebrew, only install it with the official Docker for Mac installer"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:42:35.000600",
          "text": "it should be possible but generally Docker for Mac is simpler and auto-updates"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:42:56.000231",
          "text": "I'm not sure the homebrew formula is officially maintained by docker"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:46:00.000693",
          "text": "Ah, ok, will try that."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:52:39.000506",
          "text": "<@Chantelle>: Got a newer version, now things seem to be happening. Thanks!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:55:07.000312",
          "text": "<@Eun> :+1:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-06T14:57:19.000316",
          "text": "Some Docker trivia: <https://99designs.com/logo-design/contests/create-cool-open-source-project-logo-219415/entries>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:58:17.000040",
          "text": "huh, so that's where the whale came from"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-06T14:58:36.000228",
          "text": "I hope that designer got paid well and got a lot more work from docker for all the other logs and stuff they needed"
        }
      ]
    },
    {
      "conversation_id": "434",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: I have 1.9.1 (latest from homebrew), and I get strange errors.\nEun: That should be possible, right?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.97,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:40:48.000152",
          "text": "I have 1.9.1 (latest from homebrew), and I get strange errors."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T14:41:46.000226",
          "text": "That should be possible, right?"
        }
      ]
    },
    {
      "conversation_id": "435",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: reminds me that Typed Racket could use a logo\nNelson: maybe also syntax/parse\nEun: Nelson: Re TR, maybe that's too easy, but what about a Tau replacing the Lambda in the Racket logo?\nLatarsha: I've seen that before -- I think Typed Clojure did something like that\nJalisa: Wow, that's awesome. _faved designer_\nJalisa: $430 is a great price for that quality of work: <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 6,
        "duration_minutes": 30.7,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Jalisa",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-11-06T16:44:21.000327",
          "text": "reminds me that Typed Racket could use a logo"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-06T16:44:35.000507",
          "text": "maybe also syntax/parse"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-06T16:52:00.000268",
          "text": "<@Nelson>: Re TR, maybe that's too easy, but what about a Tau replacing the Lambda in the Racket logo?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-06T16:54:28.000223",
          "text": "I've seen that before -- I think Typed Clojure did something like that"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-06T17:12:38.000308",
          "text": "Wow, that's awesome. _faved designer_"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-06T17:15:03.000120",
          "text": "$430 is a great price for that quality of work: <https://99designs.com/profiles/asammanis/services/284>"
        }
      ]
    },
    {
      "conversation_id": "436",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: Corey I think this is by the same designer <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-06T17:23:15.000365",
          "text": "<@Corey> I think this is by the same designer <http://rickylinn.com/albums/arizona-iced-tea/>"
        }
      ]
    },
    {
      "conversation_id": "437",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: a Hackett logo would logically be a combination of the Haskell and Racket logos… but a lambda combined with a lambda is still just a lambda :/\nKimbery: I guess it could use the lambda/[CODE] hybrid that Haskell’s logo has\nJalisa: Kimbery I use a guy who does them for $100. I can monitor it, get your feedback, and have it made for you. I can front the money if you're seriously interested, and you can send it back to me when you're satisfied with the design. Let me know.\nKimbery: it’s fine, haha, I think it’s a little premature to be worrying about that right now.\nJalisa: Right. Here's one he did for me. Second.\nJalisa: <[URL]\nJalisa: Another one <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 7,
        "duration_minutes": 59.78,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jalisa",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-11-07T13:27:46.000002",
          "text": "a Hackett logo would logically be a combination of the Haskell and Racket logos… but a lambda combined with a lambda is still just a lambda :/"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-07T13:28:31.000358",
          "text": "I guess it could use the lambda/`&gt;&gt;=` hybrid that Haskell’s logo has"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-07T14:21:39.000063",
          "text": "<@Kimbery> I use a guy who does them for $100. I can monitor it, get your feedback, and have it made for you. I can front the money if you're seriously interested, and you can send it back to me when you're satisfied with the design. Let me know."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-07T14:22:10.000637",
          "text": "it’s fine, haha, I think it’s a little premature to be worrying about that right now."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-07T14:23:54.000059",
          "text": "Right. Here's one he did for me. Second."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-07T14:24:36.000545",
          "text": "<https://i.imgur.com/gzr4TlL.jpg>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-07T14:27:33.000066",
          "text": "Another one\n\n<https://i.imgur.com/TZZo2MH.jpg>"
        }
      ]
    },
    {
      "conversation_id": "438",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: Can you make a lambda out of two smaller lambdas?\nEun: Corey: ISTR you having a random generator for docs for fake (but plausible) syntax-zoo functions, but I can't find it. Is it still around?\nCorey: I don't seem to have it handy. I pasterack-ed it but that's scrolled off by now. I think it's on an old laptop drive. I didn't dignify it by making it a repo :stuck_out_tongue:\nEun: That's a bummer.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 10.88,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Eun"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-11-07T13:33:52.000447",
          "text": "Can you make a lambda out of two smaller lambdas?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-07T13:34:41.000223",
          "text": "<@Corey>: ISTR you having a random generator for docs for fake (but plausible) syntax-zoo functions, but I can't find it. Is it still around?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-07T13:40:59.000319",
          "text": "I don't seem to have it handy. I pasterack-ed it but that's scrolled off by now. I think it's on an old laptop drive. I didn't dignify it by making it a repo :stuck_out_tongue:"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-07T13:44:45.000264",
          "text": "That's a bummer."
        }
      ]
    },
    {
      "conversation_id": "439",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "David: How do I save a pict to a file? Preferably an SVG or a PDF, but without cropping the figure.\nKa: David [CODE] works pretty well. [CODE] is the pict\nKa: I'm guessing you figured it out though, as it's been nearly 3 hours.\nKa: but... oh, you were looking for svg or a PDF....\nDavid: Still no luck with a scalable image format. But thanks anyway :slightly_smiling_face:\nKa: so, i've been looking a bit\nKa: slideshow can do to pdf, and what I've found is that there's a svg-dc% and a ps-dc%\nKa: so.\nKa: <[URL]\nKa: it'll probably work to then use [CODE]\nKa: but, i'm not sure if it'll end up being scalable on the svgdc or not.\nDavid: Hmmm, I’ll check this out. Thank you.\nKa: Georgeanna thanks for that detailed example!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 13,
        "duration_minutes": 436.08,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "David",
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "David",
          "timestamp": "2017-11-07T15:27:27.000430",
          "text": "How do I save a pict to a file? Preferably an SVG or a PDF, but without cropping the figure."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:11:54.000192",
          "text": "<@David> `(send (pict-&gt;bitmap sp) save-file png-name 'png))))` works pretty well. `sp` is the pict"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:12:20.000209",
          "text": "I'm guessing you figured it out though, as it's been nearly 3 hours."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:13:15.000148",
          "text": "but... oh, you were looking for svg or a PDF...."
        },
        {
          "user": "David",
          "timestamp": "2017-11-07T18:19:14.000243",
          "text": "Still no luck with a scalable image format. But thanks anyway :slightly_smiling_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:21:26.000169",
          "text": "so, i've been looking a bit"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:21:46.000379",
          "text": "slideshow can do to pdf, and what I've found is that there's a svg-dc% and a ps-dc%"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:21:50.000345",
          "text": "so."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:22:16.000324",
          "text": "<https://docs.racket-lang.org/draw/svg-dc_.html>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:24:21.000048",
          "text": "it'll probably work to then use `(draw-pict yourpict svgdc ...)`"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T18:24:46.000035",
          "text": "but, i'm not sure if it'll end up being scalable on the svgdc or not."
        },
        {
          "user": "David",
          "timestamp": "2017-11-07T20:02:36.000041",
          "text": "Hmmm, I’ll check this out. Thank you."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-07T22:43:32.000069",
          "text": "<@Georgeanna> thanks for that detailed example!"
        }
      ]
    },
    {
      "conversation_id": "440",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "David: Thank you very much :slightly_smiling_face: But, hey, that’s a lot of hoops we have to jump through for such a simple task. Would there be interest for ‘save-image’ and ‘save-svg-image’ functions for pict, à la 2htdp/image?\nLatarsha: David yeah that would be great\nDavid: :+1: I opened this issue, then: <[URL]\nDavid: Unfortunately, I can’t tell, because I don’t know what “convertibles” are. But even if they suffice, I think there’s still room for some helper functions, or, at the very least, for some improvements to the documentation.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 119.78,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "David",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "David",
          "timestamp": "2017-11-08T06:59:24.000208",
          "text": "Thank you very much :slightly_smiling_face:\nBut, hey, that’s a lot of hoops we have to jump through for such a simple task. Would there be interest for ‘save-image’ and ‘save-svg-image’ functions for pict, à la 2htdp/image?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-08T08:32:03.000251",
          "text": "<@David> yeah that would be great"
        },
        {
          "user": "David",
          "timestamp": "2017-11-08T08:39:10.000329",
          "text": ":+1: I opened this issue, then: <https://github.com/racket/pict/issues/35>"
        },
        {
          "user": "David",
          "timestamp": "2017-11-08T08:59:11.000131",
          "text": "Unfortunately, I can’t tell, because I don’t know what “convertibles” are. But even if they suffice, I think there’s still room for some helper functions, or, at the very least, for some improvements to the documentation."
        }
      ]
    },
    {
      "conversation_id": "441",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tilda: It looks like picts are convertible, and that the convertible protocol implementation for picts accepts 'svg-bytes as a target format. Would that suffice here?\nTilda: see <[URL] -- essentially, [CODE] should give you a bytestring containing a valid svg\nTilda: (not all the conversion targets are supported by all convertible things, annoyingly, but it looks like picts do support svg-bytes)\nTilda: (someone else more knowledgeable about this should chime in here; I know just enough about [CODE] to know that it exists, but I haven't played around with picts very much)\nDavid: Yes, this seems to be in the direction I’m thinking about…",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 11.12,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "David",
          "Tilda"
        ]
      },
      "timeline": [
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T08:55:25.000187",
          "text": "It looks like picts are convertible, and that the convertible protocol implementation for picts accepts 'svg-bytes as a target format. Would that suffice here?"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T09:02:14.000046",
          "text": "see <http://docs.racket-lang.org/file/convertible.html?q=file%2Fconvertible> -- essentially, `(convert your-pict 'svg-bytes)` should give you a bytestring containing a valid svg"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T09:02:32.000072",
          "text": "(not all the conversion targets are supported by all convertible things, annoyingly, but it looks like picts do support svg-bytes)"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T09:03:14.000166",
          "text": "(someone else more knowledgeable about this should chime in here; I know just enough about `convert` to know that it exists, but I haven't played around with picts very much)"
        },
        {
          "user": "David",
          "timestamp": "2017-11-08T09:06:32.000296",
          "text": "Yes, this seems to be in the direction I’m thinking about…"
        }
      ]
    },
    {
      "conversation_id": "442",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Eun: Vincenzo: Quick distro-build question: is [CODE] guaranteed to exit with a non-0 return code if any of the build clients failed?\nVincenzo: Eun It looks like the non-0 status may only happen with completely sequential builds. That could be fixed for builds that include parallel parts.\nEun: Ok, thanks for confirming! I'll try implementing the change.\nEun: That turned out to be pretty easy, actually. I'll push the change.\nVincenzo: Great - thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 55.1,
        "contains_question": true,
        "action_keywords": [
          "build",
          "complete",
          "fix",
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Eun",
          "timestamp": "2017-11-08T12:21:16.000233",
          "text": "<@Vincenzo>: Quick distro-build question: is `make site` guaranteed to exit with a non-0 return code if any of the build clients failed?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-08T12:38:28.000719",
          "text": "<@Eun> It looks like the non-0 status may only happen with completely sequential builds. That could be fixed for builds that include parallel parts."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-08T13:05:01.000097",
          "text": "Ok, thanks for confirming! I'll try implementing the change."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-08T13:13:40.000738",
          "text": "That turned out to be pretty easy, actually. I'll push the change."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-08T13:16:22.000212",
          "text": "Great - thanks"
        }
      ]
    },
    {
      "conversation_id": "443",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Vincenzo how nondeterministic is the distro-build process?\nVincenzo: There's non-determinism in bytecode compilation (reduced over time, but not eliminated outside the main \"collects\") and in C compilation (because C compilers tend to have some non-determinism, too, if you're not at Google)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 2.63,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-08T16:01:08.000473",
          "text": "<@Vincenzo> how nondeterministic is the distro-build process?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-08T16:03:46.000258",
          "text": "There's non-determinism in bytecode compilation (reduced over time, but not eliminated outside the main \"collects\") and in C compilation (because C compilers tend to have some non-determinism, too, if you're not at Google)"
        }
      ]
    },
    {
      "conversation_id": "444",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Georgeanna: Tilda does that mean I can remove metapict from the equation and just do all this directly?\nTilda: I don't think metapict was part of the issue. It's just a library you used to create the pict, no? So for example, [CODE_BLOCK]\nTilda: if you want to make a metapict-based pict, that's your prerogative, but it doesn't seem to have to do anything with how to convert the underlying pict to a svg, unless I misunderstand your problem scenario\nGeorgeanna: I’m just trying to peel back the onion and see how much code this really takes. metapict is providing a lot of drawing… I wasn’t sure what type of thing I was getting back therefore didn’t know whether I could do the convertable (I can—so much cleaner than that bottom blob I had!)… now I’m trying to peel back the drawing code from metapict\nGeorgeanna: I guess I should also poke at [CODE]\nTilda: I suspect (but am not an expert here) that metapict is a convenience library over the underlying pict datatype. It makes it easier to construct sophisticated picts, but that's orthogonal to how to save them. Likewise, 2htdp/images are convertible, which is ultimately how I save them, by converting them to png-bytes :slightly_smiling_face:\nGeorgeanna: thanks!\nTilda: <[URL] documentation: \"All images in MetaPict are represented as picts. A pict is a structure that holds information on how to draw a picture. A pict can be rendered to produce an image in various formats such as png, pdf, and, svg.\"\nKarine: I am trying to run raco in a docker container based on fedora:26 and I keep getting: [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 9,
        "duration_minutes": 665.22,
        "contains_question": true,
        "action_keywords": [
          "create",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Karine",
          "Tilda"
        ]
      },
      "timeline": [
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-08T16:54:57.000246",
          "text": "<@Tilda> does that mean I can remove metapict from the equation and just do all this directly?"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T16:57:24.000303",
          "text": "I don't think metapict was part of the issue.  It's just a library you used to create the pict, no? So for example,\n```\n#lang racket\n(require pict file/convertible)\n(define p (filled-rectangle 40 40))\n(convert p 'svg-bytes)\n```"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T16:58:40.000275",
          "text": "if you want to make a metapict-based pict, that's your prerogative, but it doesn't seem to have to do anything with how to convert the underlying pict to a svg, unless I misunderstand your problem scenario"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-08T17:05:42.000232",
          "text": "I’m just trying to peel back the onion and see how much code this really takes. metapict is providing a lot of drawing… I wasn’t sure what type of thing I was getting back therefore didn’t know whether I could do the convertable (I can—so much cleaner than that bottom blob I had!)… now I’m trying to peel back the drawing code from metapict"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-08T17:07:00.000150",
          "text": "I guess I should also poke at `2htdp/image`"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T17:07:34.000295",
          "text": "I suspect (but am not an expert here) that metapict is a convenience library over the underlying pict datatype.  It makes it easier to construct sophisticated picts, but that's orthogonal to how to save them.  Likewise, 2htdp/images are convertible, which is ultimately how I save them, by converting them to png-bytes :slightly_smiling_face:"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-08T17:11:28.000337",
          "text": "thanks!"
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-08T17:13:26.000359",
          "text": "<http://soegaard.github.io/docs/metapict/metapict.html#%28part._reference-pict%29> documentation: \"All images in MetaPict are represented as picts. A pict is a structure that holds information on how to draw a picture. A pict can be rendered to produce an image in various formats such as png, pdf, and, svg.\""
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-09T04:00:10.000251",
          "text": "I am trying to run raco in a docker container based on fedora:26 and I keep getting: `SSL_library_init: implementation not found; no arguments provided`"
        }
      ]
    },
    {
      "conversation_id": "445",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: Which dep am I missing here? I am installing openssl and openssl-devel which I thought was the requirement.\nKarine: ah.. .the missing dep was openssl-libs. :slightly_smiling_face:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 31.73,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karine"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-11-09T04:00:29.000073",
          "text": "Which dep am I missing here? I am installing openssl and openssl-devel which I thought was the requirement."
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-09T04:32:13.000287",
          "text": "ah.. .the missing dep was openssl-libs. :slightly_smiling_face:"
        }
      ]
    },
    {
      "conversation_id": "446",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Vincenzo you can see a more verbose file test output here: <[URL]\nLatarsha: they all seem to hang in the same place\nVincenzo: Looks like they're hanging at an IPv6 test\nVincenzo: line 1528 of \"file.rktl\"\nLatarsha: this suggests that maybe we shouldn't expect that to work: <[URL]\nVincenzo: The test is set up to accommodate environments where IPv6 is not supported so that listening at \"::1\" or connecting to \"::1\" raises an exception. Maybe something has gone wrong in error handling for that case. (If trying to use \"::1\" fails without reporting an error, then I don't know offhand how to accommodate that.)\nLatarsha: Vincenzo is there an expression I could try to run that would tell us the difference?\nVincenzo: It might be interesting to know whether [CODE] by itself hangs, but I think it will take more work to track down the problem\nLatarsha: Vincenzo what's the [CODE] function you refer to? [CODE] doesn't seem like the right thing there\nVincenzo: Oh, I see... I did mean [CODE], but I see that [CODE] in the test doesn't have a hostname. I wonder if adding the hostname to [CODE] would help. (I think it would still be a valid test.)\nLatarsha: I'm still confused -- what does \"::1\" mean then?\nKa: ::1 looks like an ipv6 address\nLatarsha: right, it is\nKa: (sorry, should have read up)\nLatarsha: but I'm confused about what mflatt means to try with tcp-listen\nVincenzo: as the 4th argument\nVincenzo: That is, I orginally had in mind [CODE]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 17,
        "duration_minutes": 392.68,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ka",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T09:41:17.000665",
          "text": "<@Vincenzo> you can see a more verbose file test output here: <https://travis-ci.org/racket/racket/builds/299648951>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T09:41:25.000659",
          "text": "they all seem to hang in the same place"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-09T09:47:42.000072",
          "text": "Looks like they're hanging at an IPv6 test"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-09T09:48:00.000406",
          "text": "line 1528 of \"file.rktl\""
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T09:49:46.000118",
          "text": "this suggests that maybe we shouldn't expect that to work: <https://github.com/travis-ci/travis-ci/issues/3302#issuecomment-159748795>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-09T10:04:26.000276",
          "text": "The test is set up to accommodate environments where IPv6 is not supported so that listening at \"::1\" or connecting to \"::1\" raises an exception. Maybe something has gone wrong in error handling for that case. (If trying to use \"::1\" fails without reporting an error, then I don't know offhand how to accommodate that.)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T10:46:46.000150",
          "text": "<@Vincenzo> is there an expression I could try to run that would tell us the difference?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-09T10:49:15.000016",
          "text": "It might be interesting to know whether `(listen \"::1\")` by itself hangs, but I think it will take more work to track down the problem"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T15:19:47.000283",
          "text": "<@Vincenzo> what's the `listen` function you refer to? `tcp-listen` doesn't seem like the right thing there"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-09T16:06:06.000544",
          "text": "Oh, I see... I did mean `tcp-listen`, but I see that `tcp-listen` in the test doesn't have a hostname. I wonder if adding the hostname to `tcp-listen` would help. (I think it would still be a valid test.)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T16:08:27.000399",
          "text": "I'm still confused -- what does \"::1\" mean then?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-09T16:11:30.000095",
          "text": "::1 looks like an ipv6 address"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T16:11:49.000417",
          "text": "right, it is"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-09T16:11:58.000086",
          "text": "(sorry, should have read up)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T16:12:07.000039",
          "text": "but I'm confused about what mflatt means to try with tcp-listen"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-09T16:13:22.000122",
          "text": "as the 4th argument"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-09T16:13:58.000568",
          "text": "That is, I orginally had in mind `(tcp-listen 0 5 #t \"::1\")`"
        }
      ]
    },
    {
      "conversation_id": "447",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Btw I made some docker images for Racket that you might be able to use instead. I'm curious how you're planning on using Racket and docker together\nChantelle: Latarsha I'm planning on merging the linux-natipkg docker build PR later tonight unless you've got objections\nLatarsha: Chantelle I think my thoughts here are less useful than yours anyway ;)\nChantelle: Latarsha ack ;)\nChantelle: Latarsha oh, could you enable Travis on that repo? There's a docker service available to travis runs so I want to try and get the installer tests running on that\nLatarsha: Done\nChantelle: Fantastic, thanks\nLatarsha: Vincenzo that [CODE] test failed: <[URL]\nLatarsha: Karine if you go here <[URL] there's a link to the source\nVincenzo: Latarsha Thanks! That error is good news, and I'll try to adapt \"file.rktl\"\nLatarsha: also, note for the future: the [CODE] syntax doesn't understand that a [CODE] inside [CODE] shouldn't start a new comment :disappointed:\nLatarsha: Vincenzo your repair has fixed the travis issue\nChantelle: Latarsha it looks like the Typed Racket tests run in the gui test script includes some tests that depend on ext flonums, and those tests fail on the 32-bit builds (racket-i386 and racket-i386-minimal)\nLatarsha: I think they should just test if extflonums are available explicitly",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 14,
        "duration_minutes": 1109.9,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-09T19:12:30.000079",
          "text": "Btw I made some docker images for Racket that you might be able to use instead. I'm curious how you're planning on using Racket and docker together"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-09T20:46:50.000198",
          "text": "<@Latarsha> I'm planning on merging the linux-natipkg docker build PR later tonight unless you've got objections"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T20:47:26.000129",
          "text": "<@Chantelle> I think my thoughts here are less useful than yours anyway ;)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-09T20:48:20.000077",
          "text": "<@Latarsha> ack ;)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-09T20:49:21.000141",
          "text": "<@Latarsha> oh, could you enable Travis on that repo? There's a docker service available to travis runs so I want to try and get the installer tests running on that"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T20:52:11.000060",
          "text": " Done"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-09T20:56:49.000248",
          "text": "Fantastic, thanks"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-09T23:27:28.000092",
          "text": "<@Vincenzo> that `tcp-listen` test failed: <https://travis-ci.org/racket/racket/jobs/299991848#L1661>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-10T08:26:34.000123",
          "text": "<@Karine> if you go here <https://pkgs.racket-lang.org/package/quickcheck> there's a link to the source"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-10T08:50:39.000256",
          "text": "<@Latarsha> Thanks! That error is good news, and I'll try to adapt \"file.rktl\""
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-10T08:53:12.000548",
          "text": "also, note for the future: the `.travis.yml` syntax doesn't understand that a `#` inside `\" ... \"` shouldn't start a new comment :disappointed:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-10T10:33:35.000507",
          "text": "<@Vincenzo> your repair has fixed the travis issue"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-10T13:31:41.000626",
          "text": "<@Latarsha> it looks like the Typed Racket tests run in the gui test script includes some tests that depend on ext flonums, and those tests fail on the 32-bit builds (racket-i386 and racket-i386-minimal)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-10T13:42:24.000095",
          "text": "I think they should just test if extflonums are available explicitly"
        }
      ]
    },
    {
      "conversation_id": "448",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: Does anyone know where the quickcheck pkg source is?\nKarine: Can't seem to find a link to it from the docs.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.2,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karine"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-11-10T04:13:19.000322",
          "text": "Does anyone know where the quickcheck pkg source is?"
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-10T04:13:31.000219",
          "text": "Can't seem to find a link to it from the docs."
        }
      ]
    },
    {
      "conversation_id": "449",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: I think adding code to those tests to recognize when they're being run on 32-bit racket and skipping those tests would be appropriate\nChantelle: that does sound better",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 194.67,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-10T13:32:56.000118",
          "text": "I think adding code to those tests to recognize when they're being run on 32-bit racket and skipping those tests would be appropriate"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-10T16:47:36.000180",
          "text": "that does sound better"
        }
      ]
    },
    {
      "conversation_id": "450",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: Does anybody know of a project using quickcheck that is defining their own generators? I am having a hard time understanding how to do this from the docs.\nKarine: The problem is not so much creating the generator itself: [CODE] would do it...\nKarine: but reusing existing generators in the definition of a new one.\nChantelle: Karine I've worked on that project a little, and I don't think it's easy to do that yet\nKarine: Chantelle that's unfortunate. For larger projects creation of new generators is a must. Can't be that hard. If I have a struct of two integers, creating a generator for the struct by reusing the generator for integers should really be straightforward. :disappointed: Thanks anyway.\nChantelle: Karine Have you seen the Hypothesis python library?\nChantelle: it's a very advanced property testing library that does some really neat things with how generators / arbitraries are represented\nChantelle: in particular, under Hypothesis's model generators monadically compose and allow effective shrinking to be derived automatically for a composed generator\nKarine: yes, I use Hypothesis regularly. However, this specific project is racket-based. Unless you know of a solution on how to plug Hypothesis with racekt.\nChantelle: I think implementing hypothesis's representation of arbitraries into the racket quickcheck library would be a really great thing to do\nChantelle: although that would take more time than you likely have if you're trying to just use quickcheck in your racket project\nKarine: understood but I am juggling quite a few balls at the moment. Unlikely I will able to pick up on that tbh.\nChantelle: completely understandable\nChantelle: it's on my list of things to do eventually in some Far Distant Future where somebody's finally invented a way to freeze life responsibilities indefinitely",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 14,
        "duration_minutes": 71.4,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "implement",
          "must",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Karine"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-11-13T02:55:25.000149",
          "text": "Does anybody know of a project using quickcheck that is defining their own generators? I am having a hard time understanding how to do this from the docs."
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-13T02:55:52.000160",
          "text": "The problem is not so much creating the generator itself: `(make-generator (lambda (size rgen) ...))` would do it..."
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-13T02:56:11.000064",
          "text": "but reusing existing generators in the definition of a new one."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T03:59:16.000246",
          "text": "<@Karine> I've worked on that project a little, and I don't think it's easy to do that yet"
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-13T04:01:48.000062",
          "text": "<@Chantelle> that's unfortunate.  For larger projects creation of new generators is a must. Can't be that hard. If I have a struct of two integers, creating a generator for the struct by reusing the generator for integers should really be straightforward. :disappointed: Thanks anyway."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T04:02:07.000359",
          "text": "<@Karine> Have you seen the Hypothesis python library?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T04:02:25.000462",
          "text": "it's a very advanced property testing library that does some really neat things with how generators / arbitraries are represented"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T04:03:09.000043",
          "text": "in particular, under Hypothesis's model generators monadically compose and allow effective shrinking to be derived automatically for a composed generator"
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-13T04:03:55.000133",
          "text": "yes, I use Hypothesis regularly. However, this specific project is racket-based. Unless you know of a solution on how to plug Hypothesis with racekt."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T04:05:12.000020",
          "text": "I think implementing hypothesis's representation of arbitraries into the racket quickcheck library would be a really great thing to do"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T04:05:29.000143",
          "text": "although that would take more time than you likely have if you're trying to just use quickcheck in your racket project"
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-13T04:05:54.000013",
          "text": "understood but I am juggling quite a few balls at the moment. Unlikely I will able to pick up on that tbh."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T04:06:08.000027",
          "text": "completely understandable"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T04:06:49.000048",
          "text": "it's on my list of things to do eventually in some Far Distant Future where somebody's finally invented a way to freeze life responsibilities indefinitely"
        }
      ]
    },
    {
      "conversation_id": "451",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: You're most likely to have success sending PRs to improve the data model",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-13T03:59:53.000249",
          "text": "You're most likely to have success sending PRs to improve the data model"
        }
      ]
    },
    {
      "conversation_id": "452",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tilda: Tina, Vincenzo a student of mine is seeing the following bug on Win10FCU, DrR6.11: \"Whenever I sleep my computer with DrR running, it gives me the following error when I wake it up. Resolved by closing and restarting DrR.\"\nTilda: Before I file a bug report, what extra diagnostic info would be useful to you, and how do I collect it with this student?\nVincenzo: Tilda I think that's enough information for us to find the bug",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 77.0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Tilda",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Tilda",
          "timestamp": "2017-11-13T07:49:26.000190",
          "text": "<@Tina>, <@Vincenzo> a student of mine is seeing the following bug on Win10FCU, DrR6.11: \"Whenever I sleep my computer with DrR running, it gives me the following error when I wake it up.  Resolved by closing and restarting DrR.\""
        },
        {
          "user": "Tilda",
          "timestamp": "2017-11-13T07:49:45.000150",
          "text": "Before I file a bug report, what extra diagnostic info would be useful to you, and how do I collect it with this student?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-13T09:06:26.000189",
          "text": "<@Tilda> I think that's enough information for us to find the bug"
        }
      ]
    },
    {
      "conversation_id": "453",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: what's the necessary magic to get rid of my relative path requires all over my project and use collection like paths? i.e. [CODE] as opposed to [CODE]?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Karine"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-11-13T09:23:14.000014",
          "text": "what's the necessary magic to get rid of my relative path requires all over my project and use collection like paths? i.e. `(require myproject/lib/utils)` as opposed to `(require \"../src/lib/utils.rkt\")`?"
        }
      ]
    },
    {
      "conversation_id": "454",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Patrice: how about installing [CODE] as a package? [CODE_BLOCK]\nNancie: Just a guess, but usually the cdr of a list is also a list, not an atom",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 1479.42,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nancie",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Patrice",
          "timestamp": "2017-11-13T11:07:18.000843",
          "text": "how about installing `myproject` as a package?\n```\nSOME-PATH/myproject $ raco pkg install\n```"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-11-14T11:46:43.000516",
          "text": "Just a guess, but usually the cdr of a list is also a list, not an atom"
        }
      ]
    },
    {
      "conversation_id": "455",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Does anyone know why Racket differentiates Lists from Pairs?\nIda: They appear to be so similar\nNancie: so if you passed a pair to a contract that specified list, there could still be a runtime error if it does something with the tail of it\nJacob: Lists are built out of pairs, and if the pair notation was the only thing we had available then a list would be written as ( a . ( b . ( c . ( d . ())))). It's rather cumbersome to write a list like that so it's just easier to employ a list notation (a b c d) and be done with it.\nIda: I was particularly confused about [CODE] and [CODE] vs. [CODE] and [CODE]\nIda: For example, [CODE] is apparently not a list, and [CODE] and [CODE] won't work on it\nIda: but [CODE] and [CODE] work just fine\nJacob: That is because car and cdr operate on a low level, they see a list as a linked list of pairs\nIda: But to me, the structure looks all very list-like\nJacob: [CODE] always return a pair, [CODE] will return [CODE] which is a pair\nJacob: [CODE] and [CODE] operates on a more abstract level, they expect their parameters to be lists\nJacob: the reason [CODE], [CODE], and [CODE] work fine on a list is because they sees a list just as linked pairs\nIda: So a list of size 2 is different from a pair?\nIda: [CODE] versus [CODE]\nJacob: yes, they are different\nJacob: why don't you write out [CODE] using pair notation like I did in yesterday's message?\nJacob: and compare to what [CODE] looks like in pair notation\nIda: Racket spits it back out without the period\nIda: But conceptually I thouht they are the same\nIda: I thought my [CODE] is built out of a pair\nIda: so I thought the smallest list and a pair should be identical\nJacob: there is more than one pair involved in [CODE]\nJacob: written out in pair notation, [CODE] would look like [CODE]\nJacob: [CODE] in pair notation would look like [CODE]\nIda: Oh I see you're saying there's an implicit hidden [CODE]\nJacob: as you can see, [CODE] and [CODE] look nothing like each other when viewed as pairs\nIda: My Dr. Racket doesn't give out those periods\nIda: I mean, it normally does, but not for list\nJacob: the Racket printer hides the underlying pair nature of a list from you by printing as ('() 3) without any periods\nIda: Is there a Racket tool to more easily visualize the linked pairs underneath?\nJacob: I think so yes, there's an option to configure the Racket printer\nJacob: let me see\nJacob: not able to find it at the moment, maybe others will be able to point it out for us\nIda: Ah well on your hint I dived into [CODE] of the Reader docs\nIda: but it appears my Dr Racket is on maximum verbosity\nLatarsha: Ida if you're new to lists and pairs, you might find the \"Beginning Student Language\" helpful, and trying things out there\nJacob: if you'd like to practice in your DrRacket, try [CODE] and [CODE] and compare the two results\nLatarsha: where you will only be able to use [CODE] to construct lists",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 38,
        "duration_minutes": 1551.22,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Jacob",
          "Latarsha",
          "Nancie"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-14T11:32:33.000418",
          "text": "Does anyone know why Racket differentiates Lists from Pairs?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-14T11:32:38.000130",
          "text": "They appear to be so similar"
        },
        {
          "user": "Nancie",
          "timestamp": "2017-11-14T11:47:24.000475",
          "text": "so if you passed a pair to a contract that specified list, there could still be a runtime error if it does something with the tail of it"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-14T22:07:53.000205",
          "text": "Lists are built out of pairs, and if the pair notation was the only thing we had available then a list would be written as ( a . ( b . ( c . ( d . ())))). It's rather cumbersome to write a list like that so it's just easier to employ a list notation (a b c d) and be done with it. "
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:09:18.000351",
          "text": "I was particularly confused about `first` and `rest` vs. `car` and `cdr`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:09:42.000288",
          "text": "For example, `(cons '() 3)` is apparently not a list, and `first` and `rest` won't work on it"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:10:04.000044",
          "text": "but `car` and `cdr` work just fine"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:10:34.000372",
          "text": "That is because car and cdr operate on a low level, they see a list as a linked list of pairs"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:11:10.000447",
          "text": "But to me, the structure looks all very list-like"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:11:21.000494",
          "text": "`cons` always return a pair, `(cons '(), 3)` will return `('() . 3)` which is a pair"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:11:50.000630",
          "text": "`first` and `rest` operates on a more abstract level, they expect their parameters to be lists"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:12:27.000424",
          "text": "the reason `cons`, `car`, and `cdr` work fine on a list is because they sees a list just as linked pairs"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:12:32.000461",
          "text": "So a list of size 2 is different from a pair?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:12:58.000615",
          "text": "`(list '() 3)` versus `(cons '() 3)`"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:13:07.000180",
          "text": "yes, they are different"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:13:30.000676",
          "text": "why don't you write out `(list '() 3)` using pair notation like I did in yesterday's message?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:13:47.000472",
          "text": "and compare to what `(cons '() 3)` looks like in pair notation"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:13:50.000067",
          "text": "Racket spits it back out without the period"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:14:00.000121",
          "text": "But conceptually I thouht they are the same"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:14:14.000527",
          "text": "I thought my `(list '() 3)` is built out of a pair"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:14:34.000168",
          "text": "so I thought the smallest list and a pair should be identical"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:14:41.000391",
          "text": "there is more than one pair involved in `(list '() 3)`"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:15:21.000160",
          "text": "written out in pair notation, `(list '() 3)` would look like `('() . (3. '()))`"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:15:52.000256",
          "text": "`(cons '() 3)` in pair notation would look like `('() . 3)`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:16:26.000170",
          "text": "Oh I see you're saying there's an implicit hidden `'()`"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:16:27.000049",
          "text": "as you can see, `(list '() 3)` and `(cons '() 3)` look nothing like each other when viewed as pairs"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:16:48.000693",
          "text": "My Dr. Racket doesn't give out those periods"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:16:56.000126",
          "text": "I mean, it normally does, but not for list"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:17:22.000239",
          "text": "the Racket printer hides the underlying pair nature of a list from you by printing as ('() 3) without any periods"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:18:33.000483",
          "text": "Is there a Racket tool to more easily visualize the linked pairs underneath?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:18:49.000640",
          "text": "I think so yes, there's an option to configure the Racket printer"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:18:51.000081",
          "text": "let me see"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:22:31.000385",
          "text": "not able to find it at the moment, maybe others will be able to point it out for us"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:23:02.000101",
          "text": "Ah well on your hint I dived into `1.4.5` of the Reader docs"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T13:23:15.000186",
          "text": "but it appears my Dr Racket is on maximum verbosity"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T13:23:33.000301",
          "text": "<@Ida> if you're new to lists and pairs, you might find the \"Beginning Student Language\" helpful, and trying things out there"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-15T13:23:40.000151",
          "text": "if you'd like to practice in your DrRacket, try `(cons 'a 'b)` and `(cons 'a '())` and compare the two results"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T13:23:46.000473",
          "text": "where you will only be able to use `cons` to construct lists"
        }
      ]
    },
    {
      "conversation_id": "456",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: And why the need for () as the very last thing in the list written out in the pair notation? If you consider a list of just one element, (d). How would you want to write that in pair notation? You might try write it as (d . ) but that doesn't work, a pair always has two elements, the car and cdr of a pair always return valid elements. So we just define the concept of an empty list, identify it as (), which is a valid value in Racket. Now we can write (d) as (d . ()). Thus the cdr of (d) will always be ().",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-11-14T22:15:29.000070",
          "text": "And why the need for () as the very last thing in the list written out in the pair notation? If you consider a list of just one element, (d). How would you want to write that in pair notation? You might try write it as (d . ) but that doesn't work, a pair always has two elements, the car and cdr of a pair always return valid elements. So we just define the concept of an empty list, identify it as (), which is a valid value in Racket. Now we can write (d) as (d . ()). Thus the cdr of (d) will always be ()."
        }
      ]
    },
    {
      "conversation_id": "457",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vada: Sorry for the noob question but what is the difference between the top window in DR Racket and the bottom/REPL one? In particular why can’t I evaluate this form [CODE] in the bottom window but can in the top? (I’m trying to go through the little prover)\nVada: (so have installed Dracula/ACL2)\nLatarsha: Vada what does DrRacket say the Language is?\nVada: ACL2\nVada: Latarsha: I use emacs/clojure mainly - so am familiar with having a file/buffer and a repl. I’m assuming that’s going on here, but would’ve expected the [CODE] form to evaluate the same in both places. So mainly curious about that aspect.\nLatarsha: Vada It looks like you can do [CODE] in the top but not the bottom?\nVada: yes\nVada: oh that’s strange doing it now it works\nLatarsha: So I assume that the ACL2 language only allows new books in the definitions area, but I don't know why\nVada: not sure what has changed",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 9.93,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Vada"
        ]
      },
      "timeline": [
        {
          "user": "Vada",
          "timestamp": "2017-11-15T17:56:52.000313",
          "text": "Sorry for the noob question but what is the difference between the top window in DR Racket and the bottom/REPL one?\n\nIn particular why can’t I evaluate this form `(include-book \"j-bob-lang\" :dir :teachpacks)` in the bottom window but can in the top?\n\n(I’m trying to go through the little prover)"
        },
        {
          "user": "Vada",
          "timestamp": "2017-11-15T17:57:09.000304",
          "text": "(so have installed Dracula/ACL2)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T17:59:05.000195",
          "text": "<@Vada> what does DrRacket say the Language is?"
        },
        {
          "user": "Vada",
          "timestamp": "2017-11-15T18:01:45.000151",
          "text": "ACL2"
        },
        {
          "user": "Vada",
          "timestamp": "2017-11-15T18:04:33.000392",
          "text": "<@Latarsha>: I use emacs/clojure mainly - so am familiar with having a file/buffer and a repl.  I’m assuming that’s going on here, but would’ve expected the `include-book` form to evaluate the same in both places.  So mainly curious about that aspect."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T18:05:17.000045",
          "text": "<@Vada> It looks like you can do `include-book` in the top but not the bottom?"
        },
        {
          "user": "Vada",
          "timestamp": "2017-11-15T18:05:25.000402",
          "text": "yes"
        },
        {
          "user": "Vada",
          "timestamp": "2017-11-15T18:06:26.000385",
          "text": "oh that’s strange doing it now it works"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T18:06:27.000006",
          "text": "So I assume that the ACL2 language only allows new books in the definitions area, but I don't know why"
        },
        {
          "user": "Vada",
          "timestamp": "2017-11-15T18:06:48.000389",
          "text": "not sure what has changed"
        }
      ]
    },
    {
      "conversation_id": "458",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: i feel as though i've seen something, even recently but can't find it... has someone done a language usage survey -- like that of <[URL] before?\nKa: (obviously for racket)\nLatarsha: Ka no, I don't think we've done anything like that\nKa: Latarsha ah. ok.\nKa: for some reason I though I remembered something like that happening recently.. obviously I'm wrong. :slightly_smiling_face:\nKa: The survey questions from the Haskell survey linked above are actually quite interesting and I think mostly applicable to Racket... aside maybe from the different packages servers and tools, of course.\nKa: I'm tempted to try to put something like this together for racket -- any interest?\nLatarsha: Ka I think something like that would be cool\nKa: yeah, me too. if anyone is interested in helping, let me know. I'll start thinking about how to pull it off.\nEun: Ka: Maybe you were thinking of the recent RacketCon survey?\nEun: Also, seconding the \"this would be great\" comment!\nKa: Eun it wasn’t the racketcon survey. I must have dreamed about a results post, because I swear Ben wrote it. Apparently, I dream about racket surveys? idk.\nKa: so, i've got a little scribble helper that works like this: <[URL]\nKa: basically, it allows me to inline a graphviz diagram (eventually I'd like to draw this with pict, but I digress) by passing it as an argument to [CODE], but I'm also trying to setup a [CODE] with a label.\nKa: I've figured out how to make little extensions for scribble, but what I don't yet understand is how to actually combine them into a bigger thing. Maybe the answer is that I just need a macro here?\nKa: (see thing.scrbl ... but, really I'd rather have something like [CODE]\nKa: oh wait. i guess a function will do!\nKa: (got it)\nKa: Karine uf you find things, please let me know.\nKarine: Ka ^^^",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 20,
        "duration_minutes": 973.8,
        "contains_question": true,
        "action_keywords": [
          "must",
          "please",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Eun",
          "Ka",
          "Karine",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-11-15T19:34:02.000057",
          "text": "i feel as though i've seen something, even recently but can't find it... has someone done a language usage survey -- like that of <http://taylor.fausak.me/2017/11/15/2017-state-of-haskell-survey-results/> before?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-15T19:34:17.000021",
          "text": "(obviously for racket)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T19:34:31.000355",
          "text": "<@Ka> no, I don't think we've done anything like that"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-15T19:35:04.000028",
          "text": "<@Latarsha> ah. ok."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-15T19:35:26.000193",
          "text": "for some reason I though I remembered something like that happening recently.. obviously I'm wrong. :slightly_smiling_face:"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-15T19:36:29.000046",
          "text": "The survey questions from the Haskell survey linked above are actually quite interesting and I think mostly applicable to Racket... aside maybe from the different packages servers and tools, of course."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-15T19:36:49.000234",
          "text": "I'm tempted to try to put something like this together for racket -- any interest?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T19:37:31.000200",
          "text": "<@Ka> I think something like that would be cool"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-15T19:39:00.000036",
          "text": "yeah, me too. if anyone is interested in helping, let me know. I'll start thinking about how to pull it off."
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-15T22:37:25.000104",
          "text": "<@Ka>: Maybe you were thinking of the recent RacketCon survey?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-15T22:37:35.000041",
          "text": "Also, seconding the \"this would be great\" comment!"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-15T22:58:32.000117",
          "text": "<@Eun> it wasn’t the racketcon survey. I must have dreamed about a results post, because I swear Ben wrote it. Apparently, I dream about racket surveys? idk."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T03:05:58.000085",
          "text": "so, i've got a little scribble helper that works like this: <https://gist.github.com/apg/7d3eda32a2925d8270f2dabef2b968fd>"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T03:07:11.000224",
          "text": "basically, it allows me to inline a graphviz diagram (eventually I'd like to draw this with pict, but I digress) by passing it as an argument to `@image`, but I'm also trying to setup a `@figure` with a label."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T03:08:20.000336",
          "text": "I've figured out how to make little extensions for scribble, but what I don't yet understand is how to actually combine them into a bigger thing. Maybe the answer is that I just need a macro here?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T03:09:28.000075",
          "text": "(see thing.scrbl ... but, really I'd rather have something like `@graphviz-figure[#:ref \"foo-bar\" #:label \"Some Foo Bar\"]{ ... }`"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T03:36:49.000379",
          "text": "oh wait. i guess a function will do!"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T04:11:34.000085",
          "text": "(got it)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T10:02:15.000242",
          "text": "<@Karine> uf you find things, please let me know."
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-16T11:47:50.000575",
          "text": "<@Ka> ^^^"
        }
      ]
    },
    {
      "conversation_id": "459",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: You mean a State of Racket survey? That would be interesting\nIda: Can anyone point me in the right direction on making a simple http get request in Racket?\nIda: The docs for the http client are a little terse ~_~\nLatarsha: Ida [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 90.65,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-15T20:41:57.000175",
          "text": "You mean a State of Racket survey? That would be interesting"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T20:59:02.000188",
          "text": "Can anyone point me in the right direction on making a simple http get request in Racket?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-15T20:59:25.000148",
          "text": "The docs for the http client are a little terse ~_~"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-15T22:12:36.000033",
          "text": "<@Ida>\n```\n#lang racket\n\n(require net/url)\n(port-&gt;string (get-pure-port (string-&gt;url \"<https://google.com/>\")))\n```"
        }
      ]
    },
    {
      "conversation_id": "460",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: Anyone here with experience in interfacing go and racket?\nKarine: apg sure will",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 407.63,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Karine"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-11-16T05:00:07.000315",
          "text": "Anyone here with experience in interfacing go and racket?"
        },
        {
          "user": "Karine",
          "timestamp": "2017-11-16T11:47:45.000248",
          "text": "apg sure will"
        }
      ]
    },
    {
      "conversation_id": "461",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: I just discovered that Racket commits to left-to-right evaluation order. I had been assuming that Racket was like Scheme in keeping evaluation order unspecified. I was wondering if there are any specific reasons for picking and sticking to left-to-right, other than simple convenience?\nLatarsha: Jacob making it easier to understand what your program will do\nJacob: makes sense and good reason to have as many things specified as possible\nJacob: I was reading the schemify.rkt file in racket7's cs folder and saw the comment about transforming to enforce left-to-right which surprised me. Good to improve my understanding of Racket's semantics nuances",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 1.92,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Jacob",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-11-16T12:29:42.000060",
          "text": "I just discovered that Racket commits to left-to-right evaluation order. I had been assuming that Racket was like Scheme in keeping evaluation order unspecified. I was wondering if there are any specific reasons for picking and sticking to left-to-right, other than simple convenience?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-16T12:30:17.000041",
          "text": "<@Jacob> making it easier to understand what your program will do"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-16T12:30:48.000583",
          "text": "makes sense and good reason to have as many things specified as possible"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-16T12:31:37.000350",
          "text": "I was reading the schemify.rkt file in racket7's cs folder and saw the comment about transforming to enforce left-to-right which surprised me. Good to improve my understanding of Racket's semantics nuances"
        }
      ]
    },
    {
      "conversation_id": "462",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: <!everyone> The RacketCon 2017 videos are now live! <[URL]\nRosalee: Thank you to everyone who participated.\nKa: Rosalee thanks for *your* hard work to make that happen!\nLory: Does this preclude optimizations that would parallelize?\nEun: Thanks leif!\nEun: And thanks to all our speakers! And sponsors! And helpers! :)\nJacob: perhaps Latarsha can clarify for you\nDavid: This is a coincidence, I was watching the archived stream now :slightly_smiling_face: It seems like there’s something wrong with this video: <[URL]\nDavid: And this one: <[URL]\nDavid: (Namely, they’re all black screen.)\nShad: Ruh roh\nLatarsha: not really, because parallel semantics is even weaker than what's in the Scheme standard\nLatarsha: but in general, implicit parallelism in that sort of thing has not been a big win anywhere\nRosalee: David Eep. It looks like it was a problem with youtube’s conversion process. On it.\nRosalee: Actually no, I should have noticed that. This looks like it came from the videos that the recorder gave us.\nRosalee: I ‘may’ need to grab the videos from the live stream. This will probably take a day to fix. :disappointed:\nDavid: Uhh, I’m sorry about that.",
      "analysis_metadata": {
        "user_count": 8,
        "message_count": 17,
        "duration_minutes": 30.12,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "David",
          "Eun",
          "Jacob",
          "Ka",
          "Latarsha",
          "Lory",
          "Rosalee",
          "Shad"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-11-16T13:51:54.000127",
          "text": "<!everyone> The RacketCon 2017 videos are now live! <https://www.youtube.com/playlist?list=PLXr4KViVC0qIgkwFFzM-0we_aoOfAl16Y>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-11-16T13:52:02.000327",
          "text": "Thank you to everyone who participated."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T13:53:59.000412",
          "text": "<@Rosalee> thanks for *your* hard work to make that happen!"
        },
        {
          "user": "Lory",
          "timestamp": "2017-11-16T13:55:25.000436",
          "text": "Does this preclude optimizations that would parallelize?"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-16T13:55:26.000435",
          "text": "Thanks @leif!"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-16T13:55:57.000370",
          "text": "And thanks to all our speakers! And sponsors! And helpers! :)"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-16T14:02:45.000252",
          "text": "perhaps <@Latarsha> can clarify for you"
        },
        {
          "user": "David",
          "timestamp": "2017-11-16T14:11:05.000056",
          "text": "This is a coincidence, I was watching the archived stream now :slightly_smiling_face:\n\nIt seems like there’s something wrong with this video: <https://www.youtube.com/watch?v=1CORm7A8uWo>"
        },
        {
          "user": "David",
          "timestamp": "2017-11-16T14:11:26.000478",
          "text": "And this one: <https://www.youtube.com/watch?v=HJjd-Y9GCAY>"
        },
        {
          "user": "David",
          "timestamp": "2017-11-16T14:11:52.000334",
          "text": "(Namely, they’re all black screen.)"
        },
        {
          "user": "Shad",
          "timestamp": "2017-11-16T14:13:40.000427",
          "text": "Ruh roh"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-16T14:14:16.000083",
          "text": "not really, because parallel semantics is even weaker than what's in the Scheme standard"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-16T14:14:17.000511",
          "text": "but in general, implicit parallelism in that sort of thing has not been a big win anywhere"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-11-16T14:17:44.000351",
          "text": "<@David> Eep. It looks like it was a problem with youtube’s conversion process. On it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-11-16T14:19:45.000234",
          "text": "Actually no, I should have noticed that. This looks like it came from the videos that the recorder gave us."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-11-16T14:21:46.000135",
          "text": "I ‘may’ need to grab the videos from the live stream. This will probably take a day to fix. :disappointed:"
        },
        {
          "user": "David",
          "timestamp": "2017-11-16T14:22:01.000048",
          "text": "Uhh, I’m sorry about that."
        }
      ]
    },
    {
      "conversation_id": "463",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: does scribble provide a parameter that can tell me what the current file being processed is? or, actually, maybe that's a more general parameter than something from scribble/base...\nCorey: Ka If you mean at compile time, like a sort of [CODE] for Racket, you can use [CODE].\nCorey: If you mean at run time I'm not sure.\nCorey: p.s. Nothing special about [CODE]. Also [CODE] or [CODE].\nKa: Corey yeah, Ideally runtime, but this is great, too.\nKa: the idea is that I can cache the output of my embedded graphviz documents iff i can compare mtimes between the scribble file it's defined in and the mtime of the cached file on disk.\nKa: it's not a huge deal, really, but if it's simple to do, because there's a parameter that gives me the info, then I'd do it.\nKa: greg uhhh, duh. I can make my thing a macro, capture the syntax-source and then use it. At least in theory!\nKa: Actually, I don’t think that works. Not sure how to use a macro in a scribble doc...\nChantelle: Ka caching the output of an embedded graph doc based on when the doc file changes sounds like something a compiler should be doing\nChantelle: can you compute the output at compile time and tell [CODE] that the great source file is a compilation dependency?\nKa: notjack it doesn’t really need to be done at all, and the way its done now involves creating a tmpfile to dump the contents into, run [CODE] and copy the output file appropriately.\nKa: Also: I need to look at raco make.\nLatarsha: You don't need to have the source file if you have the zo\nLatarsha: Yes",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 15,
        "duration_minutes": 1266.97,
        "contains_question": true,
        "action_keywords": [
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Ka",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-11-16T17:38:23.000075",
          "text": "does scribble provide a parameter that can tell me what the current file being processed is? or, actually, maybe that's a more general parameter than something from scribble/base..."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-16T17:42:45.000305",
          "text": "<@Ka> If you mean at compile time, like a sort of `__FILE__` for Racket, you can use `(syntax-source #'here)`."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-16T17:43:16.000162",
          "text": "If you mean at run time I'm not sure."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-16T17:46:32.000421",
          "text": "p.s. Nothing special about `#'here`. Also `(syntax-source #'42)` or `(syntax-source (syntax \"whatever I am just some syntax\"))`."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T18:20:22.000387",
          "text": "<@Corey> yeah, Ideally runtime, but this is great, too."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T18:21:15.000112",
          "text": "the idea is that I can cache the output of my embedded graphviz documents iff i can compare mtimes between the scribble file it's defined in and the mtime of the cached file on disk."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T18:21:54.000251",
          "text": "it's not a huge deal, really, but if it's simple to do, because there's a parameter that gives me the info, then I'd do it."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T18:39:50.000397",
          "text": "@greg uhhh, duh. I can make my thing a macro, capture the syntax-source and then use it. At least in theory!"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T18:44:23.000128",
          "text": "Actually, I don’t think that works. Not sure how to use a macro in a scribble doc..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-16T18:54:01.000042",
          "text": "<@Ka> caching the output of an embedded graph doc based on when the doc file changes sounds like something a compiler should be doing"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-16T18:54:46.000022",
          "text": "can you compute the output at compile time and tell `raco make` that the great source file is a compilation dependency?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T21:34:45.000055",
          "text": "@notjack it doesn’t really need to be done at all, and the way its done now involves creating a tmpfile to dump the contents into, run `dot` and copy the output file appropriately. "
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-16T21:35:02.000136",
          "text": "Also: I need to look at raco make. "
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-17T13:35:54.000474",
          "text": "You don't need to have the source file if you have the zo"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-17T14:45:21.000376",
          "text": "Yes"
        }
      ]
    },
    {
      "conversation_id": "464",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: would it make sense for [CODE] to check that dependencies exist?\nNelson: right now if [CODE] depends on [CODE], and I compile them, then I delete [CODE], I can still compile and run [CODE]\nKa: Nelson certainly seems reasonable for me to have a [CODE] check dependencies. :slightly_smiling_face:\nLatarsha: Nelson that's intentional\nKa: Latarsha does that mean the .zo satisfies the dependency just the same as b.rkt then? And so the behavior _does_ check dependencies?\nNelson: okay then, I'll try adding a flag to [CODE]\nLatarsha: Nelson what exactly would the flag do in that case?\nNelson: well I'm hoping [CODE] has a list of things [CODE] depends on\nNelson: and things in that list can be mapped to filesystem locations\nNelson: then the flag would assert that they all exist\nNelson: in my case I just had [CODE] and I'd renamed [CODE] to something else",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 11,
        "duration_minutes": 180.92,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ka",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-11-17T12:04:43.000445",
          "text": "would it make sense for `raco make` to check that dependencies exist?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-17T12:05:25.000413",
          "text": "right now if `a.rkt` depends on `b.rkt`, and I compile them, then I delete `b.rkt`, I can still compile and run `a.rkt`"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-17T12:10:18.000741",
          "text": "<@Nelson> certainly seems reasonable for me to have a `make` check dependencies. :slightly_smiling_face:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-17T13:35:36.000672",
          "text": "<@Nelson> that's intentional"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-17T14:23:56.000022",
          "text": "<@Latarsha> does that mean the .zo satisfies the dependency just the same as b.rkt then? And so the behavior _does_ check dependencies?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-17T15:03:03.000183",
          "text": "okay then, I'll try adding a flag to `raco make`"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-17T15:03:41.000360",
          "text": "<@Nelson> what exactly would the flag do in that case?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-17T15:04:38.000157",
          "text": "well I'm hoping `raco make file.rkt` has a list of things `file.rkt` depends on"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-17T15:04:49.000194",
          "text": "and things in that list can be mapped to filesystem locations"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-17T15:04:58.000003",
          "text": "then the flag would assert that they all exist"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-17T15:05:38.000510",
          "text": "in my case I just had `(require \"file.rkt\")` and I'd renamed `\"file.rkt\"` to something else"
        }
      ]
    },
    {
      "conversation_id": "465",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: I was reading under the Racket functional data structures section in the docs, and I found a mention of *vlists*\nIda: and I noticed the examples used the function name [CODE], as opposed to something like [CODE]\nIda: Is it the case that Racket secretly implements [CODE] as vlists or something?\nChantelle: Ida no, the [CODE] module merely uses the same name\nChantelle: They're two different [CODE] functions\nIda: So requiring that module will overwrite [CODE]?\nChantelle: Yes, assuming [CODE] was imported from the current language (which happens when you use [CODE] or [CODE])\nChantelle: if you try to [CODE] two modules that define the same name you get a syntax error\nChantelle: but you can [CODE] a module that defines the same name as a name defined by the [CODE] used\nIda: oh I see hmm, that's quite aggressive to take the same name\nChantelle: yes, it's rather atypical for racket modules to do that\nChantelle: Using [CODE] in all the function names would have been better, probably\nChantelle: one last note: if you _want_ to use two different modules that both provide the same name you can use [CODE] and [CODE] to change the names of stuff imported from the module, letting you get around the name conflict\nIda: Oh I see, so it's not tooo bad\nIda: thanks for the help\nChantelle: happy to help :)\nIda: This is probably like sinning, but does anyone know how to rename [CODE] to something like [CODE]?\nIda: I tried to use [CODE] but to no luck\nKimbery: [CODE]\nIda: omg\nIda: laziness commences\nIda: thanks\nIda: surely I'm not the only one!\nChantelle: Ida the idea that core language features like [CODE] are just bindings you can import and rename like anything else can be a little mind bending at first :)\nIda: Does anyone know why [CODE] takes arguments in reverse order?\nJacob: Ida my guess is it's because it's standard mathematical composition order. Given functions [CODE] [CODE] and [CODE] composed as [CODE] in standard mathematical notation. It is always evaluated inside out so using Racket's [CODE] you'd write it as [CODE]\nIda: I see now\nIda: though intuitively, I still feel like it's natural to think from inner to outer\nIda: as A -&gt; B -&gt; C\nNelson: there might be a library for that (\"diagram order\"), but I can't find it right now\nDavid: Ida It’s not *exactly* [CODE], but you might be interested in threading macros: <[URL]\nIda: mmm very interesting",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 32,
        "duration_minutes": 3742.55,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "David",
          "Ida",
          "Jacob",
          "Kimbery",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-18T00:06:12.000049",
          "text": "I was reading under the Racket functional data structures section in the docs, and I found a mention of *vlists*"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-18T00:06:37.000048",
          "text": "and I noticed the examples used the function name `list`, as opposed to something like `vlist`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-18T00:06:56.000058",
          "text": "Is it the case that Racket secretly implements `list` as vlists or something?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:07:38.000071",
          "text": "<@Ida> no, the `pfds/vlist` module merely uses the same name"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:07:49.000024",
          "text": "They're two different `list` functions"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-18T00:07:58.000001",
          "text": "So requiring that module will overwrite `list`?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:08:36.000004",
          "text": "Yes, assuming `list` was imported from the current language (which happens when you use `#lang racket` or `#lang racket/base`)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:08:55.000036",
          "text": "if you try to `require` two modules that define the same name you get a syntax error"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:09:21.000022",
          "text": "but you can `require` a module that defines the same name as a name defined by the `#lang` used"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-18T00:09:41.000047",
          "text": "oh I see hmm, that's quite aggressive to take the same name"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:10:01.000074",
          "text": "yes, it's rather atypical for racket modules to do that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:10:22.000011",
          "text": "Using `vlist` in all the function names would have been better, probably"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:11:19.000054",
          "text": "one last note: if you _want_ to use two different modules that both provide the same name you can use `rename-in` and `prefix-in` to change the names of stuff imported from the module, letting you get around the name conflict"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-18T00:11:57.000046",
          "text": "Oh I see, so it's not tooo bad"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-18T00:12:06.000024",
          "text": "thanks for the help"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-18T00:12:22.000032",
          "text": "happy to help :)"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-19T22:39:39.000116",
          "text": "This is probably like sinning, but does anyone know how to rename `define` to something like `def`?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-19T22:40:14.000137",
          "text": "I tried to use `procedure-rename` but to no luck"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-19T22:40:16.000185",
          "text": "`(require (rename-in racket/base [define def]))`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-19T22:41:13.000083",
          "text": "omg"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-19T22:41:16.000001",
          "text": "laziness commences"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-19T22:41:17.000090",
          "text": "thanks"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-19T22:42:11.000031",
          "text": "surely I'm not the only one!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T00:52:46.000102",
          "text": "<@Ida> the idea that core language features like `define` are just bindings you can import and rename like anything else can be a little mind bending at first :)"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T10:14:25.000171",
          "text": "Does anyone know why `compose` takes arguments in reverse order?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-20T12:58:28.000704",
          "text": "<@Ida> my guess is it's because it's standard mathematical composition order. Given functions `f` `g` and `h` composed as `g(h(f(x)))` in standard mathematical notation. It is always evaluated inside out so using Racket's `compose` you'd write it as `(compose g h f)`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T13:33:58.000004",
          "text": "I see now"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T13:36:02.000051",
          "text": "though intuitively, I still feel like it's natural to think from inner to outer"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T13:36:07.000355",
          "text": "as A -&gt; B -&gt; C"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-20T13:36:42.000393",
          "text": "there might be a library for that (\"diagram order\"), but I can't find it right now"
        },
        {
          "user": "David",
          "timestamp": "2017-11-20T14:11:03.000219",
          "text": "<@Ida> It’s not *exactly* `compose`, but you might be interested in threading macros: <https://docs.racket-lang.org/threading/index.html>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T14:28:45.000630",
          "text": "mmm very interesting"
        }
      ]
    },
    {
      "conversation_id": "466",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Latarsha [CODE] now works in docker! (the problem was some tests didn't work when run as [CODE], and docker runs the container entrypoint process as root and PID 0 by default)\nChantelle: Latarsha <[URL] :party:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 14.43,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T03:20:57.000057",
          "text": "<@Latarsha> `racket -l tests/racket/test` now works in docker! (the problem was some tests didn't work when run as `root`, and docker runs the container entrypoint process as root and PID 0 by default)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T03:35:23.000372",
          "text": "<@Latarsha> <https://github.com/samth/docker-racket-build/pull/36> :party:"
        }
      ]
    },
    {
      "conversation_id": "467",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "David: I don’t think of it as “reverse order,” but as “let’s move some parentheses around:” [CODE_BLOCK] Note how [CODE] and [CODE] are in the same order in both. Maybe this intuition helps you too.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "David"
        ]
      },
      "timeline": [
        {
          "user": "David",
          "timestamp": "2017-11-20T13:33:35.000102",
          "text": "I don’t think of it as “reverse order,” but as “let’s move some parentheses around:”\n\n```\n&gt; (displayln (add1 0))\n1\n&gt; ((compose displayln add1) 0)\n1\n```\n\nNote how `displayln` and `add1` are in the same order in both.\n\nMaybe this intuition helps you too."
        }
      ]
    },
    {
      "conversation_id": "468",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: maybe you can try writing a new function [CODE] that takes arguments in a more \"intuitive\" order, it'll be fairly easy to write.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-11-20T14:43:47.000384",
          "text": "maybe you can try writing a new function `compose*` that takes arguments in a more \"intuitive\" order, it'll be fairly easy to write."
        }
      ]
    },
    {
      "conversation_id": "469",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Now I think I understand some of the funny arrows I've seen in Clojure\nKimbery: Nelson, Ida: Chantelle’s [CODE] package provides a flipped version of [CODE]\nIda: Ah I think the threading library has funny interactions with lambdas -_-a\nKimbery: Ida if you want a real function, use [CODE], not [CODE]\nKimbery: [CODE] is a macro.\nChantelle: what lexi said\nChantelle: if you want a real function but _also_ want the pretty underscore chaining syntax, use the [CODE] function from [CODE] combined with the [CODE] package for pretty lambdas\nChantelle: actually whoops\nChantelle: [CODE] is for that\nKimbery: if you want to thread into a lambda with [CODE], wrap it in extra parens, e.g. [CODE]\nChantelle: [CODE] is the reversed version of [CODE]\nIda: ohhh I see\nChantelle: [CODE]\nChantelle: [CODE]\nIda: But am I wrong in saying that threading is like an official library of Racket, and thrush is someone's personal library on Github?\nKimbery: no, threading is my library; it isn’t official.\nChantelle: that would be correct; also thrush is part of [CODE] which is my library\nChantelle: fwiw both lexi and I also work on standard racket libs so we're not entirely inexperienced :)\nKimbery: speak for yourself :)\nIda: ohh whoaa I see\nChantelle: im pretty sure I've seem at least _some_ commits from you to stuff in the main dist\nChantelle: then again, my memory is not so good\nKimbery: yes, I’m just teasing re: “not entirely inexperienced”\nNelson: why is it called [CODE]?\nKimbery: birds\nChantelle: birds\nNelson: ??????\nChantelle: Birds\nIda: Ah a songbird\nKimbery: there’s a book called To Mock a Mockingbird that’s about the combinator calculus\nKimbery: and it assigns bird names to a bunch of combinators\nNelson: lol\nNelson: I'm only on the barbers chapter\nKimbery: <[URL]\nKimbery: see also <[URL]\nChantelle: looking back, calling it [CODE] in the [CODE] package is more \"cute\" than \"useful\"...\nIda: I thought it was a technical term I never heard of hehe",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 37,
        "duration_minutes": 61.77,
        "contains_question": true,
        "action_keywords": [
          "action",
          "assign"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ida",
          "Kimbery",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-20T17:49:56.000021",
          "text": "Now I think I understand some of the funny arrows I've seen in Clojure"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T17:51:00.000196",
          "text": "<@Nelson>, <@Ida>: <@Chantelle>’s `point-free` package provides a flipped version of `compose`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T18:04:20.000242",
          "text": "Ah I think the threading library has funny interactions with lambdas -_-a"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:05:06.000289",
          "text": "<@Ida> if you want a real function, use `point-free`, not `threading`"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:05:18.000426",
          "text": "`threading` is a macro."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:06:06.000060",
          "text": "what lexi said"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:06:36.000012",
          "text": "if you want a real function but _also_ want the pretty underscore chaining syntax, use the `thrush` function from `point-free` combined with the `fancy-app` package for pretty lambdas"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:06:55.000312",
          "text": "actually whoops"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:06:59.000450",
          "text": "`thrush+` is for that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:07:01.000256",
          "text": "if you want to thread into a lambda with `threading`, wrap it in extra parens, e.g. `(~&gt; 3 ((lambda (x) (+ x 2))))`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:07:06.000213",
          "text": "`thrush` is the reversed version of `compose`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T18:07:25.000153",
          "text": "ohhh I see"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:07:42.000114",
          "text": "`(thrush f g h) == (compose h g f)`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:08:09.000240",
          "text": "`(thrush+ x f g h) == ((thrush f g h) x)`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T18:08:13.000016",
          "text": "But am I wrong in saying that threading is like an official library of Racket, and thrush is someone's personal library on Github?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:08:31.000231",
          "text": "no, threading is my library; it isn’t official."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:08:45.000385",
          "text": "that would be correct; also thrush is part of `point-free` which is my library"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:09:14.000300",
          "text": "fwiw both lexi and I also work on standard racket libs so we're not entirely inexperienced :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:09:27.000058",
          "text": "speak for yourself :)"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T18:09:38.000163",
          "text": "ohh whoaa I see"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:09:39.000423",
          "text": "im pretty sure I've seem at least _some_ commits from you to stuff in the main dist"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:09:54.000044",
          "text": "then again, my memory is not so good"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:10:40.000032",
          "text": "yes, I’m just teasing re: “not entirely inexperienced”"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-20T18:10:56.000087",
          "text": "why is it called `thrush`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:11:03.000009",
          "text": "birds"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:11:05.000224",
          "text": "birds"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-20T18:11:10.000268",
          "text": "??????"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:11:13.000364",
          "text": "Birds"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T18:11:26.000197",
          "text": "Ah a songbird"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:11:29.000422",
          "text": "there’s a book called To Mock a Mockingbird that’s about the combinator calculus"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:11:38.000107",
          "text": "and it assigns bird names to a bunch of combinators"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-20T18:11:43.000212",
          "text": "lol"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-20T18:11:48.000161",
          "text": "I'm only on the barbers chapter"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:12:19.000297",
          "text": "<http://www.angelfire.com/tx4/cus/combinator/birds.html>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T18:12:35.000177",
          "text": "see also <https://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:12:40.000160",
          "text": "looking back, calling it `thrush` in the `point-free` package is more \"cute\" than \"useful\"..."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-20T18:51:42.000204",
          "text": "I thought it was a technical term I never heard of hehe"
        }
      ]
    },
    {
      "conversation_id": "470",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Something from the deep lore of category theory\nChantelle: in your defense, the bird combinators are pretty related to category theory\nKimbery: I don’t think the bird combinators are very related to category theory\nChantelle: They're compositional patterns for morphisms. At least, I think I remember reading something forever ago claiming the two were related and that thinking about their relationship is useful. I don't exactly do much category theory...\nKimbery: oh, maybe… but then again, everything is related to category theory if you try hard enough. they definitely don’t _come_ from category theory.\nChantelle: oh definitely\nJalisa: Kimbery I respect your opinions because you have so much experience programming. But I’ll tell you what. I’ve been trying to learn Haskell as my first real programming language, and it’s been extremely tough. Would you say as someone who’s learned Racket, Haskell, and probably many other languages, that I’m making a reasonable decision? I’ve talked to a ton of people in the Lisp and FP world—everyone has their opinions. That alone is perhaps more fascinating than _actual_ programming. Perhaps there’s no true one road or way to learn, but I’m open to opinions. Some people tell me learning Haskell is easy with the right tools. I’ve yet to see anyone learn it _easily_—or probably any language for that matter.\nKimbery: I would not personally recommend learning Haskell as your first language\nChantelle: for the latter, I think clojure's got a shallower learning curve than haskell while still seeing much more industry use than racket\nJalisa: Here’s a better question. What path would you take knowing what you know now? I’m going to guess you’d say Racket; I could be wrong. But one of the nicer things about Racket, I think, is the documentation, and how you can create a language of your own. I’ve also thought about learning JavaScript _well enough_ and then moving onto PureScript. But then, I get a bunch of other varying opinions. Some feel learning PureScript is _doable_—others think you need some other FP experience. I feel like Haskell is so _minimal_ and foreign, it’s hard to grasp because of that. PureScript is probably similar in that regard. Elm makes it easier, but then I get the feeling of using something dumbed-down.\nMarlin: For a first language, it's a good idea to use a simple language. You're trying to learn how to program, not how to use *this particular brand of hammer*.\nMarlin: (This is why the HTDP course doesn't use Racket as its language but, instead, languages designed specifically for teaching.)\nJalisa: Chantelle that’s a really great question. I’ve thought about Clojure, but when you say _shallower_, what sort of resources are available? I’ve only somewhat researched Clojure. Most of my efforts are shattered after talking to a few Haskellers.\nKimbery: if you’re learning to program, I second Marlin and recommend How to Design Programs and its teaching languages.\nJalisa: Alright, thanks. I realize a lot of this stuff is subjective, but I do like how friendly and _less_ opinionated the Racket community is.\nChantelle: Jalisa I'm not super experienced with clojure so I don't know. My limited experience did find the docs for most of clojure very lacking, especially when compared to racket's docs\nChantelle: but Marlin is right, racket is probably the best way to go if you're looking to first learn programming, especially structured programming on projects that are more than just toys\nMarlin: You'll find, eventually, that learning a particular language is easy. The important stuff that you learn while working with one language will (mostly) transfer over to another. There are some things, though, that you'll only learn from exposure to multiple languages. You know this already, of course, but, for example, if you only work with untyped languages, you may find type systems hard to grasp.\nMarlin: A great deal of the complexity that you find in languages has little to do with good programming.\nJalisa: Is there a _where to go from here_ section in HTDP?\nMarlin: There is [<[URL] though I'm not sure if it's quite what you're looking for.\nJalisa: This is a really great point.\nJalisa: This is a seriously good quote from that section: &gt;Some of you wanted to see what computing and programming are all about. You now know that computing is merely a generalization of calculating, and you may sense how useful program design is to you. *Even if you never develop programs again, you know what distinguishes a garage programmer from a serious software developer.* When you interact with developers as a professional, you know that systematic design matters because it affects your quality of life and the bottom line of your business. Think I've been talking to too many of those.\nJalisa: I wanted to like the Scala language, but every time I'd mention it around a Haskeller, they immediately say something like: Scala is dishonest about what it can do, it's a horrible language—no one should ever use it— on and on, etc. I think one of the things I look for in languages/libraries/tools (at least in my experience with frontend), is the support system, documentation, all of that. I think the Racket community understands this. Alexis made a post about documentation and I thought she summed that up nicely: <[URL] It's probably one of my single most regarded ways in making decisions: quality of life—that's a great way to put it.\nJalisa: Yeah, I sort of felt the same way. Found some interesting points on Clojure here: <[URL]\nLashaunda: Jalisa I use Scala every day for work. I don’t think it’s a horrible language at all. There are parts of it that are ugly (that’s true of just about any language including beloved Scheme &amp; Racket), or rather, I’ve seen people resort to ugly things in every language to get things done. Why did I choose Scala at work? Well, at work there is a .NET ecosystem and a JVM-based ecosystem, plus mobile apps (Android, iOS, Windows). I didn’t want to get tied down to one platform so that was a con for .NET. Also, more of my work ties into the Java-ecosystem. Scala fits very comfortably in that world. In Scala, you can write code that almost looks like Haskell, or you can write code that looks object-oriented (I remember the 80/90s when that was “a thing”), you can even write Scala that looks just like Java, so you don’t scare off the Java-only people. In short, you can write Scala in some pretty different ways, according to your taste, and the tastes of your colleagues. My Scala programs are much shorter and have less junk in them than the equivalent Java programs. My colleagues have been picking up Scala too, and like it. There are quirks, but you learn to deal with them pretty early on and then you forget about them. I use Racket at work for things that are experimental and/or where I want speed but don’t want to go back to C. I used Racket on the side at at home for all my own personal projects. Where does Haskell fit in? I want to learn more Haskell to improve my Scala programming and indeed anything I do in the functional world. I said as much in my annual personal goals statement at work. If I learn enough Haskell I may be able to finally understand all the category theory the most advanced Scala people float over my head at every Scala conference I attend. If I learn enough Haskell it may help me write Scala or Racket libraries with more finesse. Who knows. If I learn enough Haskell it may turn out Haskell can do everything with great elegance. We’ll see. Small aside: When I picked up Scala at first, I noticed in the preface to Odersky’s book that he’d been encouraged and given advice by the top thinkers in the Racket community, so that kind of cemented the deal for me in terms of the respectability of the journey. I definitely write better Scala given the lessons I’ve learned from the Racket and HtDP community over the years.\nJalisa: One of the biggest issues with Haskell in my opinion, is the lack of good documentation and libraries that feel a bit clunky.\nJalisa: That, and how I’d have a better chance (it seems) at understanding hieroglyphics!\nLashaunda: Ha, I just looked for a book, meanwhile found a different one I could use to sharpen my Haskell *and* Russian: <[URL]\nLashaunda: Jalisa: This is a book I’ve been working through: <[URL] I have a number of other Haskell books on my bookshelf, but this one seemed to try to make the journey easier.\nJalisa: I've tried a lot of resources to learn Haskell. I think this post sums of some of the best ways: <[URL] (That one is in the list as well.)\nLashaunda: Thanks Jalisa. I’m now going to return to my DrRacket window. :slightly_smiling_face:\nMarlin: This is a site for beginners, and it links to an article called \"Function Composition and the $ Operator\"? As if the lexical syntax of a particular language is what a beginner should be spending time on?\nMarlin: The article's title could just as well be \"How to avoid using parentheses, for... reasons.\"\nJalisa: I think the links are the gist of what's available to learn Haskell. The book Geoff linked is probably the most understandable, but it also has its challenges at trying to teach a language where beginner resources are nearly non-existent. If you can make it through configuring Stack, or learning how to _avoid_ the Haskell Platform, you're doing well. Oh, and if you want a decent code editor, you might have to use Cabal or Stack to install additional resources for a nice IDE/editor experience. I probably spent days on silly things like messing with Vim, Spacemacs/Emacs, making sure I had the right version of GHC, etc. I learned a lot but I couldn't live with myself after not being able to fully understand lambda calculus.\nJalisa: I think because Haskell is so verbose, it's difficult to remember and grasp things. But I also felt like there was this _secret club_, and because things aren't well-documented, you must begin to _try_ harder. Either that, or once you learn Haskell, trying to explain every needed detail to a beginner becomes one of the most difficult tasks one can do. I often found myself staring at code and re-reading material many times over. I did get those epiphany moments, but the process was very slow. In that sense, I don't know that learning Haskell as a first language is the best choice, even though many Haskellers will tell you it's the best decision you could possibly make.\nJalisa: If ETA succeeds, there might finally be more support for learning (in a sense) Haskell on the JVM: <[URL]\nJalisa: I couldn't seem to find a direct correlation to make the two work in my head.\nJalisa: The _Haskell Book_ (linked earlier) goes through a whole chapter at the beginning on lambda calculus, offering steps for things like alpha and beta reduction. I could _maybe_ understand those things better, but some of the examples to be reduced were like 20-25 characters long.\nJacob: I haven't read that particular book but I'm rather surprised they've included a chapter on LC and reductions, that sounds like a good way to confuse beginners even more.\nJacob: Knowing lambda calculus absolutely is not a prerequisite for learning programming in any form, even Haskell. While it's nice to know to understand the theoretical and mathematical properties of computable systems, it's not relevant to every day programming.\nMarlin: In a typical (well, I think typical) undergrad program, that sort of thing is usually part of a programming languages course that you'd take in, what, your third year?\nJacob: yeah in my own undergrad experience, we were exposed to lambda calculus in the last two years.\nJacob: in any event Jalisa, don't beat yourself up if you don't grasp Haskell at first, it's perfectly OK not to understand something at first. You've given yourself time and put in efforts to explore Haskell, you can move on to other things and come back to Haskell later.\nJalisa: Here's one example for beta reduction taken from chapter 1: *a)* (𝜆𝑥𝑦𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑧)(𝜆𝑥.𝑎) *b)* (𝜆𝑥.𝜆𝑦.𝜆𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑧)(𝜆𝑥.𝑎) *c)* (𝜆𝑦.𝜆𝑧1(𝜆𝑥.𝑧)𝑧1(𝑦𝑧1))(𝜆𝑥.𝑎) *d)* (𝜆𝑧1.(𝜆𝑥.𝑧)(𝑧1)((𝜆𝑥.𝑎)𝑧1)) *e)* (𝜆𝑧1.𝑧((𝜆𝑥.𝑎)(𝑧1))) *f)* (𝜆𝑧1.𝑧𝑎)\nJalisa: When I seemed confused, the author told me a ten-year-old made it through the book.\nJacob: heh that doesn't sound like a kind compliment.\nJacob: I won't worry about what the author said, he's motivated to believe his book is easy even for ten year olds but that doesn't say much. People have diverse learning styles and background knowledge that influence how well they assimilate given material.\nJacob: Other than the author's claim, we have no way of knowing how well the ten-year old actually understood the book, for all we know she or he just skipped right over the chapter and focused on the more interesting chapters.\nLinnie: Or if it was the author's _own_ ten year old child who i'm sure was given help more graciously\nLinnie: Maybe this is terrible advice, but I found redex traces to be very helpful for understanding how lambda calculus expressions reduce.\nLashaunda: Regarding the ten year-old λ-calculus wizard, when I was in my mid-forties, I had a problem with my Mac. I got on some forum and a genius helped me out. When my problem was fixed, I said to him, “Man, I can’t believe how much you know about these machines,” he answered, “Yeah, I’ve been working on Macs for ten years, since I was five.”\nJacob: good story\nJalisa: Ha! That's funny. The kid was male, I believe, and his mom is a linguist and thoroughly knows algebra.\nJacob: of course\nJacob: Classical lambda calculus while a excellent model for understanding what computing means on an abstract level in terms of reduction and transformations, but it's a very simplistic model and doesn't even have any concept of mapping expressions to values or even typing.\nJacob: It's about a far as you could get from normal variety programming and computing. The most important concept from lambda calculus to have made its way into programming probably would be first-class functions as values which is the keystone to being able to parameterize code over arbitrary inputs, otherwise also known as lambda\nJacob: Racket's own lambda is far more rich than lambda calculus's lambda and you can work with it without needing to know anything about lambda calculus. Nonetheless, if you're interested in knowing more about classical untyped lambda, check this tutorial out <[URL]\nJacob: the main takeaway I would offer is that the only thing Racket's [CODE] and lambda calculus' [CODE] have in common is the name and concept of first-class function values being applied to inputs\nLatarsha: Jacob I don't think that's really accurate\nJalisa: I'm going to start of HtDP. Is it safe to use the draft version?\nLatarsha: Jalisa yes, you should\nLashaunda: Jacob Hadn’t seen that tutorial before, I’m glad it’s 9 pages instead of 900, thanks.\nJacob: Latarsha I probably am oversimplying things no question\nJacob: I welcome corrections :slightly_smiling_face:\nLashaunda: Jalisa Yes to HtDP! When I was first exposed to it, after the first day or two, it was almost magical, that is: recognize these basic patterns, follow this recipe, and programs mostly write themselves. And they work, because of course you wrote your tests. The hardest part of HtDP is not HtDP, it’s later, when you begin to cut corners, thinking, “Oh I know how to do this, I don’t really need a test for this, or I don’t really need to use that pattern I learned, I’ll just wing it…” and then you find you would have been done hours earlier if you had just stuck to the lessons HtDP teaches.",
      "analysis_metadata": {
        "user_count": 9,
        "message_count": 66,
        "duration_minutes": 1032.87,
        "contains_question": true,
        "action_keywords": [
          "create",
          "fix",
          "must",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ida",
          "Jacob",
          "Jalisa",
          "Kimbery",
          "Lashaunda",
          "Latarsha",
          "Linnie",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-20T18:51:52.000068",
          "text": "Something from the deep lore of category theory"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T18:56:11.000242",
          "text": "in your defense, the bird combinators are pretty related to category theory"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T19:00:56.000276",
          "text": "I don’t think the bird combinators are very related to category theory"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T19:08:52.000124",
          "text": "They're compositional patterns for morphisms. At least, I think I remember reading something forever ago claiming the two were related and that thinking about their relationship is useful. I don't exactly do much category theory..."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T19:13:31.000091",
          "text": "oh, maybe… but then again, everything is related to category theory if you try hard enough. they definitely don’t _come_ from category theory."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T19:13:41.000253",
          "text": "oh definitely"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T22:24:29.000211",
          "text": "<@Kimbery> I respect your opinions because you have so much experience programming. But I’ll tell you what. I’ve been trying to learn Haskell as my first real programming language, and it’s been extremely tough. Would you say as someone who’s learned Racket, Haskell, and probably many other languages, that I’m making a reasonable decision? I’ve talked to a ton of people in the Lisp and FP world—everyone has their opinions. That alone is perhaps more fascinating than _actual_ programming. Perhaps there’s no true one road or way to learn, but I’m open to opinions. Some people tell me learning Haskell is easy with the right tools. I’ve yet to see anyone learn it _easily_—or probably any language for that matter."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T22:44:47.000007",
          "text": "I would not personally recommend learning Haskell as your first language"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T23:05:55.000049",
          "text": "for the latter, I think clojure's got a shallower learning curve than haskell while still seeing much more industry use than racket"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T23:06:42.000152",
          "text": "Here’s a better question. What path would you take knowing what you know now? I’m going to guess you’d say Racket; I could be wrong. But one of the nicer things about Racket, I think, is the documentation, and how you can create a language of your own. I’ve also thought about learning JavaScript _well enough_ and then moving onto PureScript. But then, I get a bunch of other varying opinions. Some feel learning PureScript is _doable_—others think you need some other FP experience. I feel like Haskell is so _minimal_ and foreign, it’s hard to grasp because of that. PureScript is probably similar in that regard. Elm makes it easier, but then I get the feeling of using something dumbed-down."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-20T23:09:36.000099",
          "text": "For a first language, it's a good idea to use a simple language. You're trying to learn how to program, not how to use *this particular brand of hammer*."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-20T23:10:27.000064",
          "text": "(This is why the HTDP course doesn't use Racket as its language but, instead, languages designed specifically for teaching.)"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T23:12:02.000223",
          "text": "<@Chantelle> that’s a really great question. I’ve thought about Clojure, but when you say _shallower_, what sort of resources are available? I’ve only somewhat researched Clojure. Most of my efforts are shattered after talking to a few Haskellers."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T23:12:55.000007",
          "text": "if you’re learning to program, I second <@Marlin> and recommend How to Design Programs and its teaching languages."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T23:15:22.000079",
          "text": "Alright, thanks. I realize a lot of this stuff is subjective, but I do like how friendly and _less_ opinionated the Racket community is."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T23:28:44.000223",
          "text": "<@Jalisa> I'm not super experienced with clojure so I don't know. My limited experience did find the docs for most of clojure very lacking, especially when compared to racket's docs"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T23:30:28.000175",
          "text": "but <@Marlin> is right, racket is probably the best way to go if you're looking to first learn programming, especially structured programming on projects that are more than just toys"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-20T23:34:29.000086",
          "text": "You'll find, eventually, that learning a particular language is easy. The important stuff that you learn while working with one language will (mostly) transfer over to another. There are some things, though, that you'll only learn from exposure to multiple languages. You know this already, of course, but, for example, if you only work with untyped languages, you may find type systems hard to grasp."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-20T23:35:30.000155",
          "text": "A great deal of the complexity that you find in languages has little to do with good programming."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T23:37:03.000070",
          "text": "Is there a _where to go from here_ section in HTDP?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-20T23:38:34.000033",
          "text": "There is [<http://www.ccis.northeastern.edu/home/matthias/HtDP2e/part_epilogue.html#%28part._moving-on-devs%29>], though I'm not sure if it's quite what you're looking for."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T23:42:21.000041",
          "text": "This is a really great point."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T23:51:14.000163",
          "text": "This is a seriously good quote from that section:\n\n&gt;Some of you wanted to see what computing and programming are all about. You now know that computing is merely a generalization of calculating, and you may sense how useful program design is to you. *Even if you never develop programs again, you know what distinguishes a garage programmer from a serious software developer.* When you interact with developers as a professional, you know that systematic design matters because it affects your quality of life and the bottom line of your business.\n\nThink I've been talking to too many of those."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T00:03:44.000192",
          "text": "I wanted to like the Scala language, but every time I'd mention it around a Haskeller, they immediately say something like: Scala is dishonest about what it can do, it's a horrible language—no one should ever use it— on and on, etc.\n\nI think one of the things I look for in languages/libraries/tools (at least in my experience with frontend), is the support system, documentation, all of that. I think the Racket community understands this. Alexis made a post about documentation and I thought she summed that up nicely:\n\n<http://lexi-lambda.github.io/blog/2017/08/28/hackett-progress-report-documentation-quality-of-life-and-snake/|lexi-lambda.github.io/blog/2017/08/28/hackett-progress-report-documentation-quality-of-life-and-snake/>\n\nIt's probably one of my single most regarded ways in making decisions: quality of life—that's a great way to put it."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T10:07:24.000103",
          "text": "Yeah, I sort of felt the same way. Found some interesting points on Clojure here: <https://news.ycombinator.com/item?id=14006242>"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T10:15:21.000142",
          "text": "<@Jalisa> I use Scala every day for work.  I don’t think it’s a horrible language at all.  There are parts of it that are ugly (that’s true of just about any language including beloved Scheme &amp; Racket), or rather, I’ve seen people resort to ugly things in every language to get things done.  Why did I choose Scala at work?  Well, at work there is a .NET ecosystem and a JVM-based ecosystem, plus mobile apps (Android, iOS, Windows).  I didn’t want to get tied down to one platform so that was a con for .NET.  Also, more of my work ties into the Java-ecosystem.  Scala fits very comfortably in that world.  In Scala, you can write code that almost looks like Haskell, or you can write code that looks object-oriented (I remember the 80/90s when that was “a thing”), you can even write Scala that looks just like Java, so you don’t scare off the Java-only people.  In short, you can write Scala in some pretty different ways, according to your taste, and the tastes of your colleagues.  My Scala programs are much shorter and have less junk in them than the equivalent Java programs.  My colleagues have been picking up Scala too, and like it.  There are quirks, but you learn to deal with them pretty early on and then you forget about them.  I use Racket at work for things that are experimental and/or where I want speed but don’t want to go back to C.  I used Racket on the side at at home for all my own personal projects.  Where does Haskell fit in?  I want to learn more Haskell to improve my Scala programming and indeed anything I do in the functional world.  I said as much in my annual personal goals statement at work.  If I learn enough Haskell I may be able to finally understand all the category theory the most advanced Scala people float over my head at every Scala conference I attend.  If I learn enough Haskell it may help me write Scala or Racket libraries with more finesse.  Who knows.  If I learn enough Haskell it may turn out Haskell can do everything with great elegance.  We’ll see.  Small aside:  When I picked up Scala at first, I noticed in the preface to Odersky’s book that he’d been encouraged and given advice by the top thinkers in the Racket community, so that kind of cemented the deal for me in terms of the respectability of the journey.  I definitely write better Scala given the lessons I’ve learned from the Racket and HtDP community over the years."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T10:33:45.000250",
          "text": "One of the biggest issues with Haskell in my opinion, is the lack of good documentation and libraries that feel a bit clunky."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T10:37:14.000437",
          "text": "That, and how I’d have a better chance (it seems) at understanding hieroglyphics!"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T10:52:01.000304",
          "text": "Ha, I just looked for a book, meanwhile found a different one I could use to sharpen my Haskell *and* Russian: <https://goo.gl/iNjv3N>"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T10:55:40.000774",
          "text": "<@Jalisa>: This is a book I’ve been working through: <http://haskellbook.com/>  I have a number of other Haskell books on my bookshelf, but this one seemed to try to make the journey easier."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T10:57:08.000163",
          "text": "I've tried a lot of resources to learn Haskell. I think this post sums of some of the best ways: <https://argumatronic.com/noobs.html>\n\n(That one is in the list as well.)"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T10:57:51.000478",
          "text": "Thanks <@Jalisa>.  I’m now going to return to my DrRacket window.  :slightly_smiling_face:"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-21T11:01:00.000486",
          "text": "This is a site for beginners, and it links to an article called \"Function Composition and the $ Operator\"? As if the lexical syntax of a particular language is what a beginner should be spending time on?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-21T11:02:22.000063",
          "text": "The article's title could just as well be \"How to avoid using parentheses, for... reasons.\""
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:10:15.000506",
          "text": "I think the links are the gist of what's available to learn Haskell. The book Geoff linked is probably the most understandable, but it also has its challenges at trying to teach a language where beginner resources are nearly non-existent. If you can make it through configuring Stack, or learning how to _avoid_ the Haskell Platform, you're doing well. Oh, and if you want a decent code editor, you might have to use Cabal or Stack to install additional resources for a nice IDE/editor experience. I probably spent days on silly things like messing with Vim, Spacemacs/Emacs, making sure I had the right version of GHC, etc. I learned a lot but I couldn't live with myself after not being able to fully understand lambda calculus."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:16:54.000506",
          "text": "I think because Haskell is so verbose, it's difficult to remember and grasp things. But I also felt like there was this _secret club_, and because things aren't well-documented, you must begin to _try_ harder. Either that, or once you learn Haskell, trying to explain every needed detail to a beginner becomes one of the most difficult tasks one can do. I often found myself staring at code and re-reading material many times over. I did get those epiphany moments, but the process was very slow. In that sense, I don't know that learning Haskell as a first language is the best choice, even though many Haskellers will tell you it's the best decision you could possibly make."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:26:28.000057",
          "text": "If ETA succeeds, there might finally be more support for learning (in a sense) Haskell on the JVM: <http://eta-lang.org|eta-lang.org>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:28:14.000145",
          "text": "I couldn't seem to find a direct correlation to make the two work in my head."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:31:09.000317",
          "text": "The _Haskell Book_ (linked earlier) goes through a whole chapter at the beginning on lambda calculus, offering steps for things like alpha and beta reduction. I could _maybe_ understand those things better, but some of the examples to be reduced were like 20-25 characters long."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:33:05.000445",
          "text": "I haven't read that particular book but I'm rather surprised they've included a chapter on LC and reductions, that sounds like a good way to confuse beginners even more."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:34:04.000417",
          "text": "Knowing lambda calculus absolutely is not a prerequisite for learning programming in any form, even Haskell. While it's nice to know to understand the theoretical and mathematical properties of computable systems, it's not relevant to every day programming."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-21T11:34:10.000095",
          "text": "In a typical (well, I think typical) undergrad program, that sort of thing is usually part of a programming languages course that you'd take in, what, your third year?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:35:20.000334",
          "text": "yeah in my own undergrad experience, we were exposed to lambda calculus in the last two years."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:37:27.000610",
          "text": "in any event <@Jalisa>, don't beat yourself up if you don't grasp Haskell at first, it's perfectly OK not to understand something at first. You've given yourself time and put in efforts to explore Haskell, you can move on to other things and come back to Haskell later."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:38:37.000244",
          "text": "Here's one example for beta reduction taken from chapter 1:\n\n*a)* (𝜆𝑥𝑦𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑧)(𝜆𝑥.𝑎)\n*b)* (𝜆𝑥.𝜆𝑦.𝜆𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑧)(𝜆𝑥.𝑎)\n*c)* (𝜆𝑦.𝜆𝑧1(𝜆𝑥.𝑧)𝑧1(𝑦𝑧1))(𝜆𝑥.𝑎)\n*d)* (𝜆𝑧1.(𝜆𝑥.𝑧)(𝑧1)((𝜆𝑥.𝑎)𝑧1))\n*e)* (𝜆𝑧1.𝑧((𝜆𝑥.𝑎)(𝑧1)))\n*f)* (𝜆𝑧1.𝑧𝑎)"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:39:48.000024",
          "text": "When I seemed confused, the author told me a ten-year-old made it through the book."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:40:46.000024",
          "text": "heh that doesn't sound like a kind compliment."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:42:26.000379",
          "text": "I won't worry about what the author said, he's motivated to believe his book is easy even for ten year olds but that doesn't say much. People have diverse learning styles and background knowledge that influence how well they assimilate given material."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:43:00.000544",
          "text": "Other than the author's claim, we have no way of knowing how well the ten-year old actually understood the book, for all we know she or he just skipped right over the chapter and focused on the more interesting chapters."
        },
        {
          "user": "Linnie",
          "timestamp": "2017-11-21T11:44:25.000128",
          "text": "Or if it was the author's _own_ ten year old child who i'm sure was given help more graciously"
        },
        {
          "user": "Linnie",
          "timestamp": "2017-11-21T11:45:33.000349",
          "text": "Maybe this is terrible advice, but I found redex traces to be very helpful for understanding how lambda calculus expressions reduce."
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T11:47:22.000177",
          "text": "Regarding the ten year-old λ-calculus wizard, when I was in my mid-forties, I had a problem with my Mac.  I got on some forum and a genius helped me out.  When my problem was fixed, I said to him, “Man, I can’t believe how much you know about these machines,” he answered, “Yeah, I’ve been working on Macs for ten years, since I was five.”"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:49:25.000043",
          "text": "good story"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:49:49.000114",
          "text": "Ha! That's funny. The kid was male, I believe, and his mom is a linguist and thoroughly knows algebra."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:50:33.000896",
          "text": "of course"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:51:42.000371",
          "text": "Classical lambda calculus while a excellent model for understanding what computing means on an abstract level in terms of reduction and transformations, but it's a very simplistic model and doesn't even have any concept of mapping expressions to values or even typing."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:53:41.000774",
          "text": "It's about a far as you could get from normal variety programming and computing. The most important concept from lambda calculus to have made its way into programming probably would be first-class functions as values which is the keystone to being able to parameterize code over arbitrary inputs, otherwise also known as lambda"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:55:24.000404",
          "text": "Racket's own lambda is far more rich than lambda calculus's lambda and you can work with it without needing to know anything about lambda calculus. Nonetheless, if you're interested in knowing more about classical untyped lambda, check this tutorial out <http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf>"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:58:57.000431",
          "text": "the main takeaway I would offer is that the only thing Racket's `lambda` and lambda calculus' `lambda` have in common is the name and concept of first-class function values being applied to inputs"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T11:59:25.000068",
          "text": "<@Jacob> I don't think that's really accurate"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T11:59:49.000213",
          "text": "I'm going to start of HtDP. Is it safe to use the draft version?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T11:59:57.000667",
          "text": "<@Jalisa> yes, you should"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T12:00:12.000221",
          "text": "<@Jacob> Hadn’t seen that tutorial before, I’m glad it’s 9 pages instead of 900, thanks."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T12:00:16.000359",
          "text": "<@Latarsha> I probably am oversimplying things no question"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T12:00:30.000444",
          "text": "I welcome corrections :slightly_smiling_face:"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T12:04:44.000616",
          "text": "<@Jalisa> Yes to HtDP!  When I was first exposed to it, after the first day or two, it was almost magical, that is:  recognize these basic patterns, follow this recipe, and programs mostly write themselves.  And they work, because of course you wrote your tests.  The hardest part of HtDP is not HtDP, it’s later, when you begin to cut corners, thinking, “Oh I know how to do this, I don’t really need a test for this, or I don’t really need to use that pattern I learned, I’ll just wing it…” and then you find you would have been done hours earlier if you had just stuck to the lessons HtDP teaches."
        }
      ]
    },
    {
      "conversation_id": "471",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: err, *unrelated?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-11-20T19:00:38.000116",
          "text": "err, *unrelated?"
        }
      ]
    },
    {
      "conversation_id": "472",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: I love Racket as a language, but I feel like if I want to make money doing this, it may not be the right decision. Then I think—if I invest so much of myself into one language, will I have the same bias? At that point, I suppose I’d have to think my way out _familiarity_. I realize Racket is an educational/academic language—well—sort of like Haskell (don’t say that to Haskellers!), but I suppose it’s interesting some of the most advanced languages originated as academic languages or remain so.\nChantelle: Jalisa do you want to pick up an \"industry\" language that's slightly functional-ish and easy to get jobs with or a language that's much more functional and you have an alright _chance_ at getting a job with if you're in the right area?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 32.75,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-20T22:32:25.000020",
          "text": "I love Racket as a language, but I feel like if I want to make money doing this, it may not be the right decision. Then I think—if I invest so much of myself into one language, will I have the same bias? At that point, I suppose I’d have to think my way out _familiarity_. I realize Racket is an educational/academic language—well—sort of like Haskell (don’t say that to Haskellers!), but I suppose it’s interesting some of the most advanced languages originated as academic languages or remain so."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-20T23:05:10.000227",
          "text": "<@Jalisa> do you want to pick up an \"industry\" language that's slightly functional-ish and easy to get jobs with or a language that's much more functional and you have an alright _chance_ at getting a job with if you're in the right area?"
        }
      ]
    },
    {
      "conversation_id": "473",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: The nice thing about Racket is it actively encourages you to design well which is far more important than what programming language you learn. Once you learn two or three languages, rest become much easier and somewhat redundant.\nJacob: I won't worry about what or which language or paradigm to learn. Focus on learning how to design and organize your programs, try different languages without worrying about whether they are \"in\" or \"out\". You'll be able to make better informed decisions once you've been exposed to diverse programming styles.\nCorey: My anecdata/observation is that Clojure \"in industry\" means dealing frequently with Java/JVM concepts, tooling, builds, ecosystem. Clojure is hosted on Java. For some people this is a feature (e.g. helps sneak it into certain companies). For me, meh.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 172.37,
        "contains_question": false,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T07:06:02.000183",
          "text": "The nice thing about Racket is it actively encourages you to design well which is far more important than what programming language you learn. Once you learn two or three languages, rest become much easier and somewhat redundant."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T07:08:23.000210",
          "text": "I won't worry about what or which language or paradigm to learn. Focus on learning how to design and organize your programs, try different languages without worrying about whether they are \"in\" or \"out\". You'll be able to make better informed decisions once you've been exposed to diverse programming styles."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-21T09:58:24.000233",
          "text": "My anecdata/observation is that Clojure \"in industry\" means dealing frequently with Java/JVM concepts, tooling, builds, ecosystem. Clojure is hosted on Java. For some people this is a feature (e.g. helps sneak it into certain companies). For me, meh."
        }
      ]
    },
    {
      "conversation_id": "474",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jacob: I don't think Haskell is a good place to learn lambda calculus, if that's what you meant in your earlier comment.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Jacob",
          "timestamp": "2017-11-21T11:26:39.000390",
          "text": "I don't think Haskell is a good place to learn lambda calculus, if that's what you meant in your earlier comment."
        }
      ]
    },
    {
      "conversation_id": "475",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I have personally seen intelligent, experienced programmers with 15 years experience struggle to grasp Haskell concepts. Haskell is a complicated programming language. That isn’t intrinsically bad, not by any stretch—with great investment comes great reward—but it is an awful language to teach to beginners. I think most of the people who advocate it are well-intentioned but have used it long enough they have forgotten why it’s so hard for someone new to wrap their head around.\nJalisa: I think you're exactly right about that. Thanks for all of the comments.\nKimbery: I don’t think it’s necessary",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 38.85,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jalisa",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T12:16:52.000618",
          "text": "I have personally seen intelligent, experienced programmers with 15 years experience struggle to grasp Haskell concepts. Haskell is a complicated programming language. That isn’t intrinsically bad, not by any stretch—with great investment comes great reward—but it is an awful language to teach to beginners. I think most of the people who advocate it are well-intentioned but have used it long enough they have forgotten why it’s so hard for someone new to wrap their head around."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T12:33:05.000409",
          "text": "I think you're exactly right about that. Thanks for all of the comments."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T12:55:43.000074",
          "text": "I don’t think it’s necessary"
        }
      ]
    },
    {
      "conversation_id": "476",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: It's been a while since I've done pre/algebra. Should I get those fundamentals down well before starting HtDP?\nJalisa: Thanks.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 10.92,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T12:45:21.000227",
          "text": "It's been a while since I've done pre/algebra. Should I get those fundamentals down well before starting HtDP?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T12:56:16.000157",
          "text": "Thanks."
        }
      ]
    },
    {
      "conversation_id": "477",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Personally I'd think it may be fruitful to learn how to build apps with JS\nIda: It's hard to go from low-level patterns to app-level organization\nIda: But the JS world has a community that's actively figuring that out right now\nIda: So there will be a lot of learning pathways from nothing to app\nIda: The only caveat is that the JS world's tooling is downright painful\nMarlin: I have to disagree (strongly) with that.\nMarlin: Unless, I suppose, you only learn from mistakes.\nIda: I would suggest that in the JS world\nIda: you learn by mocking, by modelling, by mimicking the architecture of people who are greater than yourself\nIda: and it's a world that places app architecture at the forefront of its thinking\nIda: it's hard to go from a programming paradigm, or design patterns, all the way to APP\nLashaunda: The only JavaScript apps I write in JavaScript are really small ones. For anything medium to big, I compile a language I like into JavaScript.\nJalisa: meow: It almost sounds as if you're referring to React.\nKimbery: If the Elm people are any indication, the HtDP approach _does_ scale to whole applications.\nIda: Or just how unidirectional architecture has taken over the web\nKimbery: Since the “Elm architecture” is exactly the same as HtDP universe programs.\nJalisa: Wow, I didn't know that! Very interesting, indeed. Perhaps it attributes to some of their success.\nIda: though I would also say that later on, some of the major languages of the industry are \"small\"\nIda: so learning a wrong language or two isn't really bad\nIda: Javascript might be accounted for by 80-120 constructs, not including all the API's\nJalisa: All I know, is it's difficult to talk about Elm around Haskell and PureScript people. But I think their approach is why they're so successful. They've told me: Elm is a library, and not a language. . .\nIda: That makes it better, surely\nKimbery: That’s silly. It’s a language bundled with a highly opinionated framework.\nKimbery: I personally don’t use Elm because I think it is limiting, but some people achieve great success with it, and simplicity has its advantages. But this is largely besides the point—JavaScript and Elm are engineering tools, not educational ones. If you understand how to design good programs, you should be able to work productively in either, but neither are particularly fit for the purpose of learning to program (though Elm is probably much closer than JavaScript).\nIda: If you look at the language by itself, you might judge it unfit\nIda: But I would look at the immense learning ecosystem\nIda: That has distilled the higher quality educators and materials to the top over time\nIda: including video materials\nKimbery: I think I just fundamentally disagree, and I assure you I am well immersed within the JavaScript ecosystem.\nKimbery: I think many of those learning materials are subpar and quite unhelpful to teaching good program design.\nKimbery: Many of them are useful for teaching someone how to solve a very specific engineering problem, like “build a CRUD app” or “build an interactive user interface”. But good design is still the starting point.\nLashaunda: Kimbery I guess it’s time for me to take a look at Elm, thanks.\nIda: But you don't think even the skeleton of a unidirectional, reactive CRUD app is mind-bending?\nIda: I've seen a lot of people have handfuls of patterns but can't seem to think of an entire app\nKimbery: I’m not saying it’s unhelpful. I’m saying it’s a bad place to _start_.\nIda: The JS world doesn't aim to teach you computing, it aims to teach you a sensible app architecture\nIda: Like most of their materials are aimed towards making an app\nIda: I feel like the Racket world has two major texts\nKimbery: I don’t think HtDP claims to be a curriculum you can go through and end up capable of building anything without further learning. If anything, one of its purposes is providing a framework for learning more.\nIda: How to design programs, and SICP\nKimbery: I don’t think SICP is part of the Racket world; it comes from Scheme. And I don’t even think HtDP is really about Racket, either.\nIda: For online help, there's Stack Overflow, the docs, and Slack!\nIda: The SO is quite sparse\nKimbery: I agree that Racket is rather lacking in the department of resources on engineering applications in Racket. But that’s not the point of HtDP—it isn’t training you to be a Racket programmer. It’s training you to be a _programmer_. You are expected to move onto another language after HtDP, and there’s a good chance it won’t be Racket.\nLatarsha: The racket world has ~0.5 texts\nJalisa: For me, I always wanted a resource on _how to program/design_ instead of _how to make this thing right now_, and I think that’s what’s being said, as HtDP teaches principles for a better foundation. In my experience, frontend is very fragmented, and hardly anyone agrees on the same approach.\nLatarsha: unless you count the online docs\nLatarsha: oh, well, now it has BR\nLatarsha: so 1.5\nKimbery: Latarsha is RoR the half-a-text?\nLatarsha: yes\nLatarsha: and since you knew that you probably also understand why I say that\nKimbery: I do, I think\nChantelle: That wouldn't happen to have been Chris would it?\nChantelle: (there's two authors and one of them is a _significantly_ more... empathetic person than the other)\nChantelle: I'm at a loss, but I haven't read RoR yet\nChantelle: Latarsha by the way, the docker setup runs significantly more of the release checklist than I thought it did :) sweet\nLatarsha: Chantelle woo!\nLatarsha: also I think the unix-style builds would be a good next thing to add\nChantelle: I think it's over half the checklist items\nLatarsha: since they're a simple argument change to the installer script\nChantelle: but yeah, it shouldn't be complex\nLatarsha: as to RoR, it's 50% how to use Racket, 50% programming education\nJalisa: I’d like to maybe learn Rust later on, but is it weird I don’t like nested [CODE_BLOCK]\nLatarsha: why does the test setup have to chown the binaries?\nChantelle: Latarsha because some of the tests write and create stuff in the racket package dirs so the [CODE] user has to own the package installation dirs. And that has to happen _after_ packages are installed and built, because there's no way to chown a dir and all future subdirectories without using ACLs and lord I do not have the time to figure out how that nonsense works\nChantelle: really the tests just shouldn't be doing that, but alas\nLatarsha: they really shouldn't be creating things in directories they don't own\nLatarsha: ie, you should be able to run the tests even if racket is installed globally\nJalisa: No, I’m mean I prefer parenthesis to curly braces. But many will repeatedly tell me _syntax doesn’t matter_ which, I’m sure, has some truth to it.\nIda: Have you peeked at the aesthetics of Python or Ruby?\nIda: Seeing how people in several languages solve the same problem can be interesting, such as with Project Euler\nChantelle: Latarsha more strongly, I don't think any test should _ever_ be creating or writing to a file or dir that wasn't explicitly given to it by the test framework for testing purposes - something as simple as reading a [CODE] env var would work for that\nLatarsha: Chantelle I might agree with that, but I don't think we could consider all current instances of that bugs\nChantelle: agreed, and I certainly don't think unix installation or the 6.11 milestone in general should be blocked on it\nLatarsha: but I think that \"install unix-style racket as sudo, run tests as regular user\" should work currently\nChantelle: [CODE] is recommended against in containerized setups in general because it does some weird things that are far more suited for interactive shell usage than for scripted builds\nLatarsha: sure\nLatarsha: I just mean that your description sounds like that would also fail\nChantelle: ah\nChantelle: yes, \"install unix-style racket as sudo, run tests as regular user\" would fail in a dockerized unix install unless the regular user was granted permission to read and write some of the racket installation dirs\nLatarsha: would it fail in a non-dockerized install?\nChantelle: unsure\nChantelle: I think it would if the user installing racket did so while running as root and then ran the tests as a normal user\nChantelle: but docker can introduce a lot of permissions weirdness that makes it hard to guess what will happen by default\nLatarsha: well, if you can test without the chown and then see what happens that would be instructive\nJalisa: Yeah, I started on this journey with functional programming. Many I encountered harshly criticized those languages a lot. I think it not only made me think, but probably arose even more questions. Ruby isn’t quite as popular anymore; other tell me learning it had them un-learning a lot of things. I tried to decipher all of the opinions, but I think the better way is to see what works for me.\nChantelle: if you remove the racket dir chowns from the current docker setup, the release tests fail to create a couple specific dirs that get written to as part of the [CODE] tests\nLatarsha: are those in [CODE]?\nChantelle: ah, the [CODE] failures were for dirs in [CODE] but there were some other failures I don't remember in the [CODE] command, and those ones were for creating directories in either the package or collection dirs, I forget which\nChantelle: I can file an issue to investigate which tests are making what directories, then we could file bugs with those tests to make that more configurable somehow\nLatarsha: that would probably be good\nChantelle: I've been meaning to write a doc of what a racket test \"should\" do for proper cooperation with test runners and different environments\nChantelle: maybe doing that and getting some agreement from racket folks would be best before filing bugs on racket repos\nLatarsha: yes\nLatarsha: but investigating first for the file tests would be good too\nIda: No I don't mean to suggest those languages\nIda: And choosing a language on brackets would be bizzare\nIda: I meant to peek at them only, to look at their aesthetics\nIda: Other languages borrow those aesthetics too,\nIda: For example\nIda: Matlab and Crystal look Ruby-like\nIda: Python is quite unique in its look\nIda: It's spartan\nChantelle: Latarsha this is a neat project, I'm glad to help with it :)\nLatarsha: well it wouldn't be nearly as good without someone like you who knew what they're doing\nJalisa: The main argument I’ve heard against Python was maintainability in larger codebases. Others say, no problem. A lot of it, I think, comes from who writes the code.\nIda: But you said you're after learning, right?\nIda: You're okay learning a 2nd language after, right?\nChantelle: this is in my wheelhouse I suppose\nIda: But I don't mean to suggest Python anyway\nIda: and Ruby is on its way down\nIda: though Python is shooting up massively\nIda: I was only mentioning it as visual contrast to the problem of brackets hehe\nIda: Python goes one way\nIda: Ruby goes another way\nIda: both quite weird\nJalisa: Sure, tell me what language you have in mind :).\nIda: For learning you mean?\nIda: I really do recommend JS\nIda: hehe\nIda: I don't think you'll be poisoned by learning JS\nIda: like after, you try go back to Clojure or Racket or w/e\nIda: It's not like a classical musician tryign to learn Jazz, but finds his soul poisoned by bach\nIda: that being said\nIda: I am learning Racket\nIda: and intend to fully learn it\nIda: So if you're joining this journey with me\nIda: perhaps we can learn from each other\nJalisa: Haha! Well, it’s funny you say that, because I’ve returned to JS a lot. But I’m also interested in Functional JS if you have any suggestions there. I’ve looked into Ramda and Reason ML by Facebook (based on Ocaml).\nIda: I think it's quite healthy to learn 4-5 languages\nIda: It's also not an arrogant suggestion to learn 4-5 languages\nIda: Because after awhile, you get a knack for them\nIda: And few languages are truly unique, like Haskell\nIda: My suggestion is that instead of thinking about FP\nIda: you think about architecture\nIda: Do you recoil at the idea of OO?\nIda: Part of the reason I suggest JS is because many programmers never get to do everything\nIda: but in JS, you do\nIda: It's possible to explore full stack\nIda: and when you do\nIda: you realize that it's more important to think about major pieces of architecture communicating with each other\nIda: and how they behave\nIda: for example\nJalisa: Right, I like that idea. And yes, a study partner is a motivating factor. I’m driving at the moment, but I should have more to say when I get home.",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 145,
        "duration_minutes": 70.15,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "create",
          "should",
          "will"
        ],
        "decision_keywords": [
          "agreed",
          "works for me"
        ],
        "participants": [
          "Chantelle",
          "Ida",
          "Jalisa",
          "Kimbery",
          "Lashaunda",
          "Latarsha",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:24:28.000062",
          "text": "Personally I'd think it may be fruitful to learn how to build apps with JS"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:24:44.000175",
          "text": "It's hard to go from low-level patterns to app-level organization"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:24:52.000589",
          "text": "But the JS world has a community that's actively figuring that out right now"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:25:08.000147",
          "text": "So there will be a lot of learning pathways from nothing to app"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:25:47.000048",
          "text": "The only caveat is that the JS world's tooling is downright painful"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-21T13:29:28.000237",
          "text": "I have to disagree (strongly) with that. "
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-21T13:30:03.000780",
          "text": "Unless, I suppose, you only learn from mistakes."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:30:22.000335",
          "text": "I would suggest that in the JS world"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:30:35.000287",
          "text": "you learn by mocking, by modelling, by mimicking the architecture of people who are greater than yourself"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:30:51.000685",
          "text": "and it's a world that places app architecture at the forefront of its thinking"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:31:31.000391",
          "text": "it's hard to go from a programming paradigm, or design patterns, all the way to APP"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T13:31:40.000446",
          "text": "The only JavaScript apps I write in JavaScript are really small ones.  For anything medium to big, I compile a language I like into JavaScript."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T13:32:18.000178",
          "text": "meow: It almost sounds as if you're referring to React."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:32:29.000267",
          "text": "If the Elm people are any indication, the HtDP approach _does_ scale to whole applications."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:32:36.000428",
          "text": "Or just how unidirectional architecture has taken over the web"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:32:52.000224",
          "text": "Since the “Elm architecture” is exactly the same as HtDP universe programs."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T13:33:51.000517",
          "text": "Wow, I didn't know that! Very interesting, indeed. Perhaps it attributes to some of their success."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:38:34.000069",
          "text": "though I would also say that later on, some of the major languages of the industry are \"small\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:38:40.000347",
          "text": "so learning a wrong language or two isn't really bad"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:38:59.000372",
          "text": "Javascript might be accounted for by 80-120 constructs, not including all the API's"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T13:39:37.000146",
          "text": "All I know, is it's difficult to talk about Elm around Haskell and PureScript people. But I think their approach is why they're so successful. They've told me: Elm is a library, and not a language. . ."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:40:26.000677",
          "text": "That makes it better, surely"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:40:31.000487",
          "text": "That’s silly. It’s a language bundled with a highly opinionated framework."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:42:27.000333",
          "text": "I personally don’t use Elm because I think it is limiting, but some people achieve great success with it, and simplicity has its advantages. But this is largely besides the point—JavaScript and Elm are engineering tools, not educational ones. If you understand how to design good programs, you should be able to work productively in either, but neither are particularly fit for the purpose of learning to program (though Elm is probably much closer than JavaScript)."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:42:58.000101",
          "text": "If you look at the language by itself, you might judge it unfit"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:43:04.000137",
          "text": "But I would look at the immense learning ecosystem"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:43:12.000212",
          "text": "That has distilled the higher quality educators and materials to the top over time"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:43:28.000229",
          "text": "including video materials"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:43:30.000402",
          "text": "I think I just fundamentally disagree, and I assure you I am well immersed within the JavaScript ecosystem."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:43:46.000260",
          "text": "I think many of those learning materials are subpar and quite unhelpful to teaching good program design."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:44:33.000035",
          "text": "Many of them are useful for teaching someone how to solve a very specific engineering problem, like “build a CRUD app” or “build an interactive user interface”. But good design is still the starting point."
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-21T13:44:36.000617",
          "text": "<@Kimbery> I guess it’s time for me to take a look at Elm, thanks."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:45:05.000279",
          "text": "But you don't think even the skeleton of a unidirectional, reactive CRUD app is mind-bending?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:45:24.000007",
          "text": "I've seen a lot of people have handfuls of patterns but can't seem to think of an entire app"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:45:41.000421",
          "text": "I’m not saying it’s unhelpful. I’m saying it’s a bad place to _start_."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:45:42.000231",
          "text": "The JS world doesn't aim to teach you computing, it aims to teach you a sensible app architecture"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:46:40.000139",
          "text": "Like most of their materials are aimed towards making an app"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:46:45.000083",
          "text": "I feel like the Racket world has two major texts"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:46:46.000589",
          "text": "I don’t think HtDP claims to be a curriculum you can go through and end up capable of building anything without further learning. If anything, one of its purposes is providing a framework for learning more."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:46:50.000103",
          "text": "How to design programs, and SICP"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:47:26.000128",
          "text": "I don’t think SICP is part of the Racket world; it comes from Scheme. And I don’t even think HtDP is really about Racket, either."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:47:41.000277",
          "text": "For online help, there's Stack Overflow, the docs, and Slack!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T13:47:58.000154",
          "text": "The SO is quite sparse"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:48:28.000077",
          "text": "I agree that Racket is rather lacking in the department of resources on engineering applications in Racket. But that’s not the point of HtDP—it isn’t training you to be a Racket programmer. It’s training you to be a _programmer_. You are expected to move onto another language after HtDP, and there’s a good chance it won’t be Racket."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T13:49:22.000327",
          "text": "The racket world has ~0.5 texts"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T13:49:27.000028",
          "text": "For me, I always wanted a resource on _how to program/design_ instead of _how to make this thing right now_, and I think that’s what’s being said, as HtDP teaches principles for a better foundation. In my experience, frontend is very fragmented, and hardly anyone agrees on the same approach."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T13:49:38.000284",
          "text": "unless you count the online docs"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T13:49:47.000254",
          "text": "oh, well, now it has BR"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T13:49:49.000667",
          "text": "so 1.5"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:50:01.000061",
          "text": "<@Latarsha> is RoR the half-a-text?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T13:50:03.000780",
          "text": "yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T13:50:19.000761",
          "text": "and since you knew that you probably also understand why I say that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-21T13:50:32.000055",
          "text": "I do, I think"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T13:54:47.000212",
          "text": "That wouldn't happen to have been Chris would it?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T13:55:04.000278",
          "text": "(there's two authors and one of them is a _significantly_ more... empathetic person than the other)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T13:58:37.000131",
          "text": "I'm at a loss, but I haven't read RoR yet"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T13:59:40.000360",
          "text": "<@Latarsha> by the way, the docker setup runs significantly more of the release checklist than I thought it did :) sweet"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T13:59:52.000224",
          "text": "<@Chantelle> woo!"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:00:08.000033",
          "text": "also I think the unix-style builds would be a good next thing to add"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:00:08.000571",
          "text": "I think it's over half the checklist items"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:00:27.000443",
          "text": "since they're a simple argument change to the installer script"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:01:09.000313",
          "text": "but yeah, it shouldn't be complex"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:01:14.000026",
          "text": "as to RoR, it's 50% how to use Racket, 50% programming education"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:01:14.000147",
          "text": "I’d like to maybe learn Rust later on, but is it weird I don’t like nested \n\n```\n{\n\n\n}\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:01:44.000156",
          "text": "why does the test setup have to chown the binaries?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:03:13.000173",
          "text": "<@Latarsha> because some of the tests write and create stuff in the racket package dirs so the `racket` user has to own the package installation dirs. And that has to happen _after_ packages are installed and built, because there's no way to chown a dir and all future subdirectories without using ACLs and lord I do not have the time to figure out how that nonsense works"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:03:47.000254",
          "text": "really the tests just shouldn't be doing that, but alas"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:03:56.000422",
          "text": "they really shouldn't be creating things in directories they don't own"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:04:17.000442",
          "text": "ie, you should be able to run the tests even if racket is installed globally"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:04:42.000547",
          "text": "No, I’m mean I prefer parenthesis to curly braces. But many will repeatedly tell me _syntax doesn’t matter_ which, I’m sure, has some truth to it."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:06:36.000696",
          "text": "Have you peeked at the aesthetics of Python or Ruby?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:08:33.000689",
          "text": "Seeing how people in several languages solve the same problem can be interesting, such as with Project Euler"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:08:41.000650",
          "text": "<@Latarsha> more strongly, I don't think any test should _ever_ be creating or writing to a file or dir that wasn't explicitly given to it by the test framework for testing purposes - something as simple as reading a `TEST_TMPDIR` env var would work for that"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:09:07.000573",
          "text": "<@Chantelle> I might agree with that, but I don't think we could consider all current instances of that bugs"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:09:37.000259",
          "text": "agreed, and I certainly don't think unix installation or the 6.11 milestone in general should be blocked on it"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:09:39.000125",
          "text": "but I think that \"install unix-style racket as sudo, run tests as regular user\" should work currently"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:10:13.000366",
          "text": "`sudo` is recommended against in containerized setups in general because it does some weird things that are far more suited for interactive shell usage than for scripted builds"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:10:35.000172",
          "text": "sure"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:10:47.000359",
          "text": "I just mean that your description sounds like that would also fail"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:11:06.000051",
          "text": "ah"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:12:06.000004",
          "text": "yes, \"install unix-style racket as sudo, run tests as regular user\" would fail in a dockerized unix install unless the regular user was granted permission to read and write some of the racket installation dirs"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:12:21.000497",
          "text": "would it fail in a non-dockerized install?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:12:47.000032",
          "text": "unsure"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:13:01.000175",
          "text": "I think it would if the user installing racket did so while running as root and then ran the tests as a normal user"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:13:52.000437",
          "text": "but docker can introduce a lot of permissions weirdness that makes it hard to guess what will happen by default"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:15:25.000259",
          "text": "well, if you can test without the chown and then see what happens that would be instructive"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:15:46.000024",
          "text": "Yeah, I started on this journey with functional programming. Many I encountered harshly criticized those languages a lot. I think it not only made me think, but probably arose even more questions. Ruby isn’t quite as popular anymore; other tell me learning it had them un-learning a lot of things. I tried to decipher all of the opinions, but I think the better way is to see what works for me."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:16:54.000484",
          "text": "if you remove the racket dir chowns from the current docker setup, the release tests fail to create a couple specific dirs that get written to as part of the `tests/racket/file.rktl` tests"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:17:30.000263",
          "text": "are those in `/tmp`?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:18:27.000028",
          "text": "ah, the `file.rktl` failures were for dirs in `/tmp` but there were some other failures I don't remember in the `tests/racket/test` command, and those ones were for creating directories in either the package or collection dirs, I forget which"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:18:54.000630",
          "text": "I can file an issue to investigate which tests are making what directories, then we could file bugs with those tests to make that more configurable somehow"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:19:20.000309",
          "text": "that would probably be good"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:19:58.000399",
          "text": "I've been meaning to write a doc of what a racket test \"should\" do for proper cooperation with test runners and different environments"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:20:36.000149",
          "text": "maybe doing that and getting some agreement from racket folks would be best before filing bugs on racket repos"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:20:41.000171",
          "text": "yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:20:54.000068",
          "text": "but investigating first for the file tests would be good too"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:23:57.000167",
          "text": "No I don't mean to suggest those languages"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:24:08.000159",
          "text": "And choosing a language on brackets would be bizzare"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:24:40.000353",
          "text": "I meant to peek at them only, to look at their aesthetics"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:25:36.000451",
          "text": "Other languages borrow those aesthetics too,"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:25:39.000505",
          "text": "For example"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:25:53.000693",
          "text": "Matlab and Crystal look Ruby-like"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:26:15.000513",
          "text": "Python is quite unique in its look"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:26:17.000262",
          "text": "It's spartan"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:27:45.000232",
          "text": "<@Latarsha> this is a neat project, I'm glad to help with it :)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:28:14.000170",
          "text": "well it wouldn't be nearly as good without someone like you who knew what they're doing"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:28:16.000185",
          "text": "The main argument I’ve heard against Python was maintainability in larger codebases. Others say, no problem. A lot of it, I think, comes from who writes the code."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:28:26.000492",
          "text": "But you said you're after learning, right?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:28:32.000424",
          "text": "You're okay learning a 2nd language after, right?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:28:34.000385",
          "text": "this is in my wheelhouse I suppose"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:28:39.000064",
          "text": "But I don't mean to suggest Python anyway"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:28:41.000749",
          "text": "and Ruby is on its way down"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:28:46.000323",
          "text": "though Python is shooting up massively"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:29:11.000300",
          "text": "I was only mentioning it as visual contrast to the problem of brackets hehe"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:29:14.000076",
          "text": "Python goes one way"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:29:17.000223",
          "text": "Ruby goes another way"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:29:19.000264",
          "text": "both quite weird"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:29:45.000065",
          "text": "Sure, tell me what language you have in mind :)."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:29:53.000260",
          "text": "For learning you mean?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:30:01.000119",
          "text": "I really do recommend JS"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:30:04.000392",
          "text": "hehe"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:30:11.000220",
          "text": "I don't think you'll be poisoned by learning JS"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:30:20.000021",
          "text": "like after, you try go back to Clojure or Racket or w/e"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:30:33.000545",
          "text": "It's not like a classical musician tryign to learn Jazz, but finds his soul poisoned by bach"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:31:01.000333",
          "text": "that being said"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:31:03.000431",
          "text": "I am learning Racket"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:31:07.000012",
          "text": "and intend to fully learn it"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:31:15.000169",
          "text": "So if you're joining this journey with me"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:31:19.000355",
          "text": "perhaps we can learn from each other"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:31:49.000083",
          "text": "Haha! Well, it’s funny you say that, because I’ve returned to JS a lot. But I’m also interested in Functional JS if you have any suggestions there. I’ve looked into Ramda and Reason ML by Facebook (based on Ocaml)."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:31:49.000196",
          "text": "I think it's quite healthy to learn 4-5 languages"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:32:07.000421",
          "text": "It's also not an arrogant suggestion to learn 4-5 languages"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:32:16.000434",
          "text": "Because after awhile, you get a knack for them"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:32:23.000008",
          "text": "And few languages are truly unique, like Haskell"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:32:51.000121",
          "text": "My suggestion is that instead of thinking about FP"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:32:54.000500",
          "text": "you think about architecture"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:33:01.000336",
          "text": "Do you recoil at the idea of OO?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:33:24.000212",
          "text": "Part of the reason I suggest JS is because many programmers never get to do everything"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:33:28.000154",
          "text": "but in JS, you do"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:33:34.000108",
          "text": "It's possible to explore full stack"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:34:01.000320",
          "text": "and when you do"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:34:15.000105",
          "text": "you realize that it's more important to think about major pieces of architecture communicating with each other"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:34:17.000111",
          "text": "and how they behave"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T14:34:18.000566",
          "text": "for example"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:34:37.000554",
          "text": "Right, I like that idea. And yes, a study partner is a motivating factor. I’m driving at the moment, but I should have more to say when I get home."
        }
      ]
    },
    {
      "conversation_id": "478",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: yup\nChantelle: there's a little more to it because it will change what paths the binaries end up at, which changes what directories the test setup has to [CODE]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 0.87,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:00:12.000426",
          "text": "yup"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T14:01:04.000275",
          "text": "there's a little more to it because it will change what paths the binaries end up at, which changes what directories the test setup has to `chown`"
        }
      ]
    },
    {
      "conversation_id": "479",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: I have briefly. Maybe for design aesthetics?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T14:25:22.000453",
          "text": "I have briefly. Maybe for design aesthetics?"
        }
      ]
    },
    {
      "conversation_id": "480",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Chantelle well that led to a fun bug :slightly_smiling_face:\nChantelle: Latarsha _wow_ <[URL]\nChantelle: I notice it's only the gc events tagged \"MST\"\nLatarsha: yeah\nLatarsha: I added that to the issue\nLatarsha: those are related to places\nCorey: From Jan 2011 \"racket http server, major GC: -216 bytes collected\" <[URL]\nChantelle: gasp, a zombie bug\nCorey: The answer is in that thread: [CODE_BLOCK]\nLatarsha: I doubt that's the same thing\nLatarsha: Does rackunit have a mode to print all the names of the tests it runs?\nLatarsha: [CODE] doesn't seem to do that\nLatarsha: Chantelle found it\nChantelle: Latarsha yeah copying a giant string will do it :p\nChantelle: The authors are very much not working together anymore. Julie super cool tho\nLatarsha: Chantelle there's a [CODE] argument to [CODE] but it doesn't do much",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 16,
        "duration_minutes": 60.93,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T14:55:43.000091",
          "text": "<@Chantelle> well that led to a fun bug :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:06:04.000411",
          "text": "<@Latarsha> _wow_ <https://github.com/racket/racket/issues/1896>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:07:12.000563",
          "text": "I notice it's only the gc events tagged \"MST\""
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:07:20.000582",
          "text": "yeah"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:07:24.000555",
          "text": "I added that to the issue"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:07:44.000060",
          "text": "those are related to places"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-21T15:10:44.000059",
          "text": "From Jan 2011 \"racket http server, major GC: -216 bytes collected\" <https://lists.racket-lang.org/users/archive/2011-January/043760.html>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:11:46.000089",
          "text": "gasp, a zombie bug"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-21T15:12:08.000583",
          "text": "The answer is in that thread:\n```\n&gt; On Tue, Jan 11, 2011 at 5:28 AM, Noel Welsh &lt;noelwelsh at gmail.com&gt; wrote:\n&gt; On Mon, Jan 10, 2011 at 9:53 PM, Greg Hendershott\n&gt; &lt;greghendershott at gmail.com&gt; wrote:\n&gt;&gt;\n&gt;&gt; What does it mean for the GC to collect a negative number of bytes?\n&gt;\n&gt; I'm ducking this one...\n\nClearly it means that the garbage collector thought it could throw\nsomething out, put it in the trash, and then realized later that it\nreally needed it, so it reached in, pulled it back out, and then tried\nto flatten it out and wipe off the bits of food which went in on top\nof it.\n\nHasn't this ever happened to you? :-)\n\nTodd\n```"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:13:34.000276",
          "text": "I doubt that's the same thing"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:33:16.000282",
          "text": "Does rackunit have a mode to print all the names of the tests it runs?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:33:23.000044",
          "text": "`verbose` doesn't seem to do that"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:51:33.000656",
          "text": "<@Chantelle> found it"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:54:35.000534",
          "text": "<@Latarsha> yeah copying a giant string will do it :p"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:55:05.000555",
          "text": "The authors are very much not working together anymore. Julie super cool tho"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:56:39.000014",
          "text": "<@Chantelle> there's a `verbose` argument to `run-tests` but it doesn't do much"
        }
      ]
    },
    {
      "conversation_id": "481",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: Ida those are all very good points. I think you nailed it about studying architecture instead, since by exploring multiple languages, I'm sure you can get a better _grasp_ at that. I'm sort of hoping to go through HtDP. Did you already make it through that one? I'm also enrolled in Frontend Masters and have access to some of Kyle Simspon's workshops about his book series. Another one I meant to explore is <[URL] but I've not made it there yet. Let me know what you think.\nJalisa: Well, yeah. There were times I felt like letting him know how I felt about his teaching style--how it didn't seem to make things better, but I always held back. I know he means well in teaching people, but I'm not sure he has the patience, and probably also has a day job.\nJalisa: I really enjoyed Julie Moronuki's podcast about Haskell below. I found it inspiring and she explained it from a beginner's standpoint, but still, I think learning Haskell is tough. <[URL]\nJalisa: I'm not sure the authors are doing work together anymore.\nJalisa: I agree, she is. I came away from the podcast with a lot to think about.\nChantelle: and that does sound like a good rackunit feature, maybe something triggered by an env var or something\nChantelle: yup\nLatarsha: maybe it could be made to be not useless\nChantelle: I'd want the test suite implementation made less incomprehensible first\nChantelle: but yes\nChantelle: more broadly, more docs describing what the responsibilities of a test runner tool like [CODE] are vs a test framework like [CODE] or [CODE] would be great\nIda: Mozilla docs are also top notch and in clear English most of the times\nIda: But imo, you should do one approach at a time\nIda: So if you're doing racket, then do racket\nIda: As you're going along HTDP and making stuff\nIda: Or if you have a mini project you wish to work on\nIda: I'd be interested in working on it with you\nIda: esp if you ever wish to do Racket + web stuff\nIda: That's what I'm working toward\nIda: I went to Racket because I thought it was the most beginner-friendly Lisp language\nJalisa: Ahh, yes. I found Racket from the FP community and immediately latched onto the documentation and one called _beautiful Racket_. Racket + the web is definitely something I'm interested in. I have a decent amount of experience in creating websites, CSS, HTML, minor server configuration, but only enough of JS to get by when needed... I also own the book _Realm of Racket_, so this is surely something we can study together. I'll probably work through HtDP and try to make my way through the Racket book I own, and go through HtDP as fast as I can. Have a decent amount of concepts down to get started.\nIda: No, but it's pretty convenient\nIda: Unfortunately support on all the other popular IDE's requires a larger community\nIda: I've found Racket support on Visual Studio Code, Atom, etc. to be lacking\nIda: They do indeed, because Java has some of the best tooling in the entire industry\nIda: The most advanced programmer assistance tools\nIda: I'm not touching Java though!\nIda: At least I don't wish to ~_~\nIda: It is quite verbose\nJalisa: Me either lol.\nIda: And doesn't give you the full payoff for all that verbosity\nIda: But Java is able to help the programmer catch mistakes that other language communities don't understand\nJalisa: Yeah, I've heard someone compare its type system (in the context of Haskell) to the toy-maker Fisher-Price.\nIda: like I see some people being fancy using Vim to edit Python\nIda: No, that's rude\nJalisa: Agreed. I have a nice CS book based on Java.\nIda: Java is stronger than Go\nIda: But I would also say too much focus on FP or OO isn't that good\nIda: I hear a lot of people talk about it\nIda: And then, especially in real life\nIda: when I ask them about it, I might say something like\nIda: \"Oh, so you like Haskell too!\"\nJalisa: Yeah, it is a bit rude. But most FP people don't think highly of Go either. I need to stay away from those groups, I think they're making my head hurt lol.\nIda: \"I'm trying to learn FP\"\nIda: \"How does FP help you with app design?\"\nIda: And they cannot answer\nIda: or\nIda: \"So you do OO, doesn't that mean state is sometimes distributed?\"\nJalisa: They have the mentality that it eliminates bugs mostly, and makes their lives easier...\nIda: \"What strategy do you use to prevent problems?\"\nIda: Yes, but those are very small level concerns\nIda: I think an interesting level of thinking is\nIda: How do I delegate work to person A, B, C, D, E, F\nIda: And while they have varying code level quality\nIda: I know that if they keep their \"code contracts\"\nIda: The entire system will run\nIda: How does a person know such things?\nIda: architecture\nIda: Another thing I would note about FP is\nIda: Let's say you find out that you are joining an FP team, great\nIda: And you code you module in the FP style, very good\nIda: it connects with the team's app and works well\nIda: all nice\nIda: and then one day you look over at your coworker's module code\nIda: and you realize some of the code is imperative!\nIda: how dare they!\nIda: but from the outside, it looks 100% functional\nIda: it's 100% deterministic\nIda: so... is it bad?\nIda: One day you look underneath the Scala code\nIda: and you realize, it's 99.9% imperative\nIda: is it bad?\nJalisa: Have you looked into Rust?\nIda: oh\nIda: yes\nIda: Rust interests me\nIda: But I'm waiting for it to catch a harder bit of success first\nIda: As it's a high commitment, and it's very verbose, and it doesn't agree with my aesthetics, but it has the characteristics I want\nIda: Macros, FP, concurrency, memory safety\nJalisa: Yeah, my attempts were very slow and probably not too beneficial.\nJalisa: That was exactly my thought.\nIda: so I would say don't be too biased towards FP or OO\nIda: and that the lore in both worlds goes very deep\nJalisa: What would you say interests you the most in a language?\nIda: hm\nIda: it depends\nIda: You mean for general use?\nIda: I care if the language is (1) mildly popular, so that it won't suddenly die on me and I can get some help, (2) has first-class consideration for concurrency and parallelism, (3) has support for FP and OO concepts, (4) has nice off-the-shelf data structures and standard library\nIda: As a side factor, I want a language to help me on my learning goals\nJalisa: Hmm, that sort of sounds like Elixir, Go, or maybe even Rust.\nIda: Yup!\nIda: but not Go\nIda: I have some experience with Go, and I don't like it\nIda: It has barely any support for FP\nJalisa: Yeah, I have the same preferences.\nJalisa: Oh, right.\nIda: Rob Pike thinks that FP is a bad paradigm\nIda: He calls it \"not machine simple\"\nIda: or not close to how the machine operates\nIda: So he is resistant to even simple constructs like [CODE]\nIda: How would you assess your current Racket knowledge?\nJalisa: That's interesting.\nJalisa: Limited but I know it's dynamic.\nIda: You know how to make functions, use them etc?\nJalisa: Sometimes I left myself wondering if learning FP would have me lacking in other areas.. maybe not able to appreciate other paradigms.\nIda: The most essential aspect of computation is studied in algorithms IMO\nJalisa: Yeah, I'm aware of how to create functions, but not so much how to implement them in a working program.\nIda: Which is unfortunate and painful\nJalisa: That's interesting.\nJalisa: Ha.\nIda: algorithms is the abstract study of problems\nIda: those problems tend to be well-stated CS / math problems involving information storage, retrieval, and computation\nIda: the language of algorithms is often in an informal, English-like code\nIda: which shows you how free-form and abstract it is\nIda: the most limitless programming Language is your lazy English speech!\nIda: Communicating to yourself the way you think is most obvious!\nJalisa: The Eve language looks interesting, but I'm not sure I'm a fan yet of having a program (Photoshop-ish) doing everything... <[URL]\nIda: So doing things in a FP or OO way, or a procedural way, or wahtever doesn't really matter\nJalisa: Right, I was thinking about the English language when learning Haskell..\nIda: If you wish to do interesting problems in computation, you cannot avoid the study of algorithms\nIda: One of the alluring ways that FP people think about data and programs\nIda: is your program is a function, and you throw inputs, and the output is the desired program result\nJalisa: So, maybe you'd be interested in machine learning and neural networks as well. I've thought about that a lot, but wondered if I should contribute to the end of mankind lol. (joke)\nIda: I'm interested in AI\nIda: but that's a very distal interest\nIda: I'm interested in mathematical models of causal learning\nJalisa: Yeah, honestly, I got to some of the _meat_ languages, I think, through wanting to know more about _how_ computers work, and that probably lead to CS. But I've not yet begun to delve too much into that either, as there's varying opinions on how to go about it. But I'll probably stick with the Racket community and go from there. I think it probably has a lot to teach in that realm.\nIda: Have you heard of Project Euler?\nIda: <[URL]\nJalisa: That's interesting. Yeah, I've enrolled into a few math courses. I'll have to look more into it.\nIda: Does that first problem sound hard in Racket\nIda: Ignoring all mathematical insights that may help make this problem easier\nJalisa: I think the only way for me to memorize or appreciate that stuff is to make something with it.\nJalisa: Have you heard of <[URL]\nJalisa: I found out about it through <[URL]\nJalisa: I tried learning discrete mathematics but that was way over my head.\nJalisa: I would guess, no, it's not hard in Racket? Only a guess, but I'd imagine Racket can do that easily.\nJalisa: Thanks for sharing the link. I'm going to bookmark it and try to do some problems in my spare time. I'd spent a little time at Kahn Academy today.\nJalisa: I can't believe there are 604 problems, that's amazing.\nIda: Ah I think of it as a good benchmark for programming ability, that first problem\nIda: It basically asks you do deal with conditionals and looping\nJalisa: What do you think of Mathematica?\nIda: It's probably not the right language for you\nIda: It's a lab language for universities that are uncomfortable with open source\nIda: so they'd rather have the proprietary support\nIda: do you have a free license or something?\nJalisa: Ahhh. Got it. Good answer.\nJalisa: No.\nIda: What kind of programming destination are you after\nJalisa: See, I already have a web background, so I don't want to abandon that.\nIda: Why art thou avoiding JS...\nIda: That makes 0 sense...\nIda: JS is such a small programming language\nIda: It really is\nIda: I meant it when I said 80-120 constructs\nIda: which is about the same as Go or C\nJalisa: I'm not really. But perhaps I was a bit influenced by how people feel about JS. I can sort of see things in the bigger picture now, but yeah.\nIda: It's so small it's painful\nIda: like\nIda: small is easy to learn\nIda: hard to master\nIda: The reason is because so many tools you wish someone had built for you weren't built\nIda: JS has no standard library, unlike Racket, which has a huge library\nIda: so does Python\nJalisa: Oh and, because I was looking into FP compile-to languages like PureScript and Elm, but even those require _some_ knowledge of JS.\nIda: aghh those are all crazy stuffs TBH\nIda: like, job-wise\nIda: they have almost 0 chance of winning\nIda: like almost 0 popularity\nIda: JS is a really fine language\nIda: it's minimal\nIda: If you've been learning HTML CSS\nIda: but not learning JS\nIda: it's kind of crazy\nIda: because JS boosts your HTML CSS powers like 10x\nJalisa: Yeah, I realized that when I started looking more into that, but I think it's improving, only very slowly.\nIda: What are some things that an aspiring learner might feel bad about learning JS with?\nIda: Well, JS has extremely limited parallelism\nIda: It has weak representation of underlying memory\nJalisa: Callbacks?\nIda: callbacks are fine\nIda: People who complain about callbacks are those who dont' know how to work with streams\nIda: plus, JS has some really modern async constructs from the C# land\nIda: which has since been adopted by Python\nIda: Callbacks are a local code issue\nJalisa: I don't actually know why, but I have a pretty big interest in JS--or did at one point--but I'm going back in that direction.\nIda: I would totally recommend it\nIda: You can do a very fast lightning review of JS pretty easily\nJalisa: Have you heard of a static builder called GatsbyJS? It's based on React and GraphQL. I was highly interested in that at one point; you know what, I think it was tooling that had me back out when I should've first learned VanillaJS.\nIda: You should learn React before you touch Gatsby or GraphQL\nIda: GraphQL has nothing to do with React, but it works great with React\nIda: I totally believe in the mission of Gatsby\nIda: <[URL]\nJalisa: Yeah, GraphQL boggled my mind when I tried to understand it.\nIda: This is a static website I've been toying with\nIda: It's part of why I believe in static websites with React\nIda: I think one of the most interrupting moments of web experience is in making a new web request\nIda: there are physical constraints that make it so your website can never reach someone that fast\nIda: the only way to break past this is smart http requests\nIda: with JS\nIda: so most of the links don't work\nIda: but for the top bar\nIda: you'll notice that the site loads instantly\nJalisa: Is that a Gatsby site?\nIda: like click settings, or add boomark\nIda: it's a React static site, so it could easily be deployed on Gatsby\nIda: it has the same philosophy and faith in React's place for a niche of websites\nJalisa: Oh, and then there's Webpack sorcery. That is _tough_.\nIda: Yes, webpack is hard\nIda: But it won't limit your learning\nIda: The lack of decent parallelism and memory represntation will\nIda: The lack of types means you're not being experienced with a nice typed language\nIda: Obviously if you landed a job with a language like Rust right away\nIda: You'd be getting a way different learning experience\nIda: one which doesn't neglect concurrency or parallelism at all\nIda: But React is very much a functional way of organizing apps\nIda: Which is why I would recommend learning React + Redux together, even though everyone might say that is a little heavy\nIda: but tons of beginners have walked this pathway\nJalisa: Decisions lol. Yeah, I'll probably follow through with HtDP and Racket. Later, I'm sure I'll finish what I can learn about JS. Someone told me they learned FP first and JS later. That was probably the strangest paths I've heard thus far, but maybe even in the direction I was going.\nIda: I would ask how much FP they know, though\nIda: I love FP, I keep on trying to advance my knowledge\nIda: whenever I meet techy people\nIda: especially IRL\nIda: I ask their impressions of FP\nIda: everyone who has loved FP has disappointed me\nIda: for one thing\nIda: the land of FP data structures and algorithms is high lore\nJalisa: This person was an advanced Haskeller. You'd be surprised how many Haskell programmers don't know a thing about JS.\nIda: I wouldn't be surprised if advanced haskeller doesn't work with advanced functional data structures\nIda: it really is a land of deep lore\nIda: like the academic literary output in that realm is scant\nIda: you would think that academia loves FP\nIda: it does not\nJalisa: Yeah, everyone disappoints me. Hah! So many perspectives, but I can appreciate them all and learn.\nIda: academia loves imperative algorithms\nIda: 99.99% of algorithms studies are non-functional data structures\nIda: when you read literature on FP data structures\nIda: sometimes authors leave sad statements\nIda: about how much some other author's work helped them\nIda: but then you think\nIda: \"omg, I know that work, that work is over 10 years old\"\nIda: \"This field moves at 1 MPH\"\nJalisa: That's why I admire Alexis. She knows Haskell, Racket, built Hackett, and I think, does frontend work with JS and such.\nJalisa: But you're right, the JS community has too much to offer to pass up. I'd better do some work today. Thanks for the discussion.\nIda: If you want help with JS, I can offer some\nIda: including how to transport your FP knowledge over to JS\nIda: But aside from the most simple DRY stuff\nIda: I haven't seen interesting FP\nIda: I tend to practice functional JS just for the aesthetics\nJalisa: That'd be great. I think Frontend Masters has a FP JS course, and there's another one of GitHub if I recall. But I'll definitely have to get more of your thoughts on certain things when I get stuck! Ha.\nIda: I also find it odd that FP people would talk about type correctness\nIda: But one of the most interesting kinds of correctness in a program is, \"will it get stuck\"\nIda: \"will it freeze\"\nIda: but they don't talk about that!\nIda: That is the study of waiting and progress\nJalisa: Someone told me the FP community is very _tribal_, and in that, I would partly agree...\nIda: I notice you're walking up some math pathway\nJalisa: I think if you cut off everyone's ideas and efforts, you may be missing out on a lot.\nIda: perhaps out of some math anxiety\nIda: discrete math is a great programmer's catch-all course\nIda: but when you go into the Haskell channel\nIda: you no doubt notice a bias for abstract algebra and category theory\nIda: including with alexis\nIda: and the people here\nJalisa: Oh yeah, I think it makes some people angry.\nIda: Ok, so I've walked up to abstract algebra so far, dipping my toes into category theory, and so far all I see are great applications in MATH\nIda: And a confident to read technical papers NOT in abstract algebra\nIda: *confidence\nJalisa: The _theory_ part is the most telling. Haha. How can math be theory? But I suppose calculus is somewhat that.\nJalisa: If they knew everything, we wouldn't still be on this forsaken planet. Lol.\nIda: but I would be wary about thinking that you have to revisit calculus\nIda: and walk all the way through math again\nIda: Discrete Math is a great programmer's catch-all of need-to-know math\nIda: but yeah see ya\nJalisa: Yeah, that's what most people have told me. I don't know why I feel like I'm missing out on that, but perhaps later would be more logical and helpful.\nJalisa: Later!\nNelson: Eun or Rosalee , can you help me run the contract profiler on a plot3d module? <[URL]\nLatarsha: Nelson I wonder if the issue is threads, somehow\nNelson: Clicking &amp; dragging is slow. I want to see what contracts are causing the slowdown (I know the slowdown is because of an [CODE] type)\nNelson: :disappointed: I don't know where to start looking for thread problems\nNelson: okay threads is probably the issue with profiling. Running [CODE] prints a summary just after the GUI renders. So it's not profiling anything about clicks &amp; drags\nLatarsha: I think the profiling library has something for threads\nNelson: after looking at the docs I tried [CODE], but this doesn't seem to profile the GUI thread either\nIda: A data structure is an algorithm problem well defined ; }",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 284,
        "duration_minutes": 239.52,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "create",
          "discuss",
          "finish",
          "implement",
          "let's",
          "need to",
          "requires",
          "review",
          "should",
          "will"
        ],
        "decision_keywords": [
          "agreed"
        ],
        "participants": [
          "Chantelle",
          "Ida",
          "Jalisa",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T15:38:14.000148",
          "text": "<@Ida> those are all very good points. I think you nailed it about studying architecture instead, since by exploring multiple languages, I'm sure you can get a better _grasp_ at that. I'm sort of hoping to go through HtDP. Did you already make it through that one? I'm also enrolled in Frontend Masters and have access to some of Kyle Simspon's workshops about his book series.\n\nAnother one I meant to explore is <https://watchandcode.com/p/practical-javascript>\n\nbut I've not made it there yet. Let me know what you think."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T15:40:50.000148",
          "text": "Well, yeah. There were times I felt like letting him know how I felt about his teaching style--how it didn't seem to make things better, but I always held back. I know he means well in teaching people, but I'm not sure he has the patience, and probably also has a day job."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T15:44:44.000002",
          "text": "I really enjoyed Julie Moronuki's podcast about Haskell below. I found it inspiring and she explained it from a beginner's standpoint, but still, I think learning Haskell is tough.\n\n<https://frontsidethepodcast.simplecast.fm/91ecc4ec>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T15:45:11.000220",
          "text": "I'm not sure the authors are doing work together anymore."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T15:55:57.000360",
          "text": "I agree, she is. I came away from the podcast with a lot to think about."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:56:13.000571",
          "text": "and that does sound like a good rackunit feature, maybe something triggered by an env var or something"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:56:55.000364",
          "text": "yup"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T15:57:09.000043",
          "text": "maybe it could be made to be not useless"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:57:33.000564",
          "text": "I'd want the test suite implementation made less incomprehensible first"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:57:51.000269",
          "text": "but yes"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T15:58:32.000013",
          "text": "more broadly, more docs describing what the responsibilities of a test runner tool like `raco test` are vs a test framework like `rackunit` or `chk` would be great"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:01:12.000610",
          "text": "Mozilla docs are also top notch and in clear English most of the times"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:03:00.000688",
          "text": "But imo, you should do one approach at a time"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:03:06.000120",
          "text": "So if you're doing racket, then do racket"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:06:28.000538",
          "text": "As you're going along HTDP and making stuff"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:06:40.000456",
          "text": "Or if you have a mini project you wish to work on"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:06:44.000506",
          "text": "I'd be interested in working on it with you"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:06:49.000417",
          "text": "esp if you ever wish to do Racket + web stuff"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:06:53.000226",
          "text": "That's what I'm working toward"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:08:02.000004",
          "text": "I went to Racket because I thought it was the most beginner-friendly Lisp language"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:15:11.000262",
          "text": "Ahh, yes. I found Racket from the FP community and immediately latched onto the documentation and one called _beautiful Racket_. Racket + the web is definitely something I'm interested in. I have a decent amount of experience in creating websites, CSS, HTML, minor server configuration, but only enough of JS to get by when needed... I also own the book _Realm of Racket_, so this is surely something we can study together. I'll probably work through HtDP and try to make my way through the Racket book I own, and go through HtDP as fast as I can. Have a decent amount of concepts down to get started."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:20:00.000384",
          "text": "No, but it's pretty convenient"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:20:14.000135",
          "text": "Unfortunately support on all the other popular IDE's requires a larger community"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:20:26.000399",
          "text": "I've found Racket support on Visual Studio Code, Atom, etc. to be lacking"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:22:42.000278",
          "text": "They do indeed, because Java has some of the best tooling in the entire industry"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:22:50.000311",
          "text": "The most advanced programmer assistance tools"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:23:02.000366",
          "text": "I'm not touching Java though!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:23:17.000006",
          "text": "At least I don't wish to ~_~"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:23:19.000003",
          "text": "It is quite verbose"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:23:19.000445",
          "text": "Me either lol."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:23:26.000349",
          "text": "And doesn't give you the full payoff for all that verbosity"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:23:59.000035",
          "text": "But Java is able to help the programmer catch mistakes that other language communities don't understand"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:24:07.000067",
          "text": "Yeah, I've heard someone compare its type system (in the context of Haskell) to the toy-maker Fisher-Price."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:24:07.000273",
          "text": "like I see some people being fancy using Vim to edit Python"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:24:21.000567",
          "text": "No, that's rude"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:24:32.000147",
          "text": "Agreed. I have a nice CS book based on Java."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:24:32.000186",
          "text": "Java is stronger than Go"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:02.000371",
          "text": "But I would also say too much focus on FP or OO isn't that good"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:07.000322",
          "text": "I hear a lot of people talk about it"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:12.000298",
          "text": "And then, especially in real life"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:17.000243",
          "text": "when I ask them about it, I might say something like"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:23.000611",
          "text": "\"Oh, so you like Haskell too!\""
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:25:24.000166",
          "text": "Yeah, it is a bit rude. But most FP people don't think highly of Go either. I need to stay away from those groups, I think they're making my head hurt lol."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:28.000309",
          "text": "\"I'm trying to learn FP\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:41.000449",
          "text": "\"How does FP help you with app design?\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:43.000620",
          "text": "And they cannot answer"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:25:51.000018",
          "text": "or"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:05.000603",
          "text": "\"So you do OO, doesn't that mean state is sometimes distributed?\""
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:26:11.000366",
          "text": "They have the mentality that it eliminates bugs mostly, and makes their lives easier..."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:13.000632",
          "text": "\"What strategy do you use to prevent problems?\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:21.000419",
          "text": "Yes, but those are very small level concerns"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:25.000576",
          "text": "I think an interesting level of thinking is"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:31.000572",
          "text": "How do I delegate work to person A, B, C, D, E, F"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:41.000196",
          "text": "And while they have varying code level quality"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:45.000453",
          "text": "I know that if they keep their \"code contracts\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:49.000093",
          "text": "The entire system will run"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:53.000331",
          "text": "How does a person know such things?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:26:57.000235",
          "text": "architecture"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:12.000114",
          "text": "Another thing I would note about FP is"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:21.000009",
          "text": "Let's say you find out that you are joining an FP team, great"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:27.000579",
          "text": "And you code you module in the FP style, very good"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:33.000540",
          "text": "it connects with the team's app and works well"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:35.000128",
          "text": "all nice"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:41.000260",
          "text": "and then one day you look over at your coworker's module code"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:48.000134",
          "text": "and you realize some of the code is imperative!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:49.000354",
          "text": "how dare they!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:55.000021",
          "text": "but from the outside, it looks 100% functional"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:27:58.000255",
          "text": "it's 100% deterministic"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:28:04.000022",
          "text": "so... is it bad?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:28:10.000550",
          "text": "One day you look underneath the Scala code"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:28:16.000527",
          "text": "and you realize, it's 99.9% imperative"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:28:34.000533",
          "text": "is it bad?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:28:36.000237",
          "text": "Have you looked into Rust?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:28:39.000023",
          "text": "oh"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:28:40.000038",
          "text": "yes"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:28:56.000153",
          "text": "Rust interests me"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:29:06.000188",
          "text": "But I'm waiting for it to catch a harder bit of success first"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:29:18.000370",
          "text": "As it's a high commitment, and it's very verbose, and it doesn't agree with my aesthetics, but it has the characteristics I want"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:29:29.000436",
          "text": "Macros, FP, concurrency, memory safety"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:29:37.000133",
          "text": "Yeah, my attempts were very slow and probably not too beneficial."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:29:54.000074",
          "text": "That was exactly my thought."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:30:21.000099",
          "text": "so I would say don't be too biased towards FP or OO"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:30:28.000295",
          "text": "and that the lore in both worlds goes very deep"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:30:29.000183",
          "text": "What would you say interests you the most in a language?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:30:34.000066",
          "text": "hm"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:30:38.000121",
          "text": "it depends"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:30:40.000669",
          "text": "You mean for general use?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:31:47.000167",
          "text": "I care if the language is (1) mildly popular, so that it won't suddenly die on me and I can get some help, (2) has first-class consideration for concurrency and parallelism, (3) has support for FP and OO concepts, (4) has nice off-the-shelf data structures and standard library"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:32:35.000168",
          "text": "As a side factor, I want a language to help me on my learning goals"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:34:21.000509",
          "text": "Hmm, that sort of sounds like Elixir, Go, or maybe even Rust."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:34:28.000104",
          "text": "Yup!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:34:29.000480",
          "text": "but not Go"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:34:40.000360",
          "text": "I have some experience with Go, and I don't like it"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:34:44.000327",
          "text": "It has barely any support for FP"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:34:51.000277",
          "text": "Yeah, I have the same preferences."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:34:58.000022",
          "text": "Oh, right."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:35:11.000433",
          "text": "Rob Pike thinks that FP is a bad paradigm"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:35:21.000518",
          "text": "He calls it \"not machine simple\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:35:28.000261",
          "text": "or not close to how the machine operates"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:35:47.000098",
          "text": "So he is resistant to even simple constructs like `map`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:36:17.000502",
          "text": "How would you assess your current Racket knowledge?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:36:19.000004",
          "text": "That's interesting."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:36:33.000032",
          "text": "Limited but I know it's dynamic."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:36:55.000026",
          "text": "You know how to make functions, use them etc?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:37:04.000111",
          "text": "Sometimes I left myself wondering if learning FP would have me lacking in other areas.. maybe not able to appreciate other paradigms."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:37:31.000262",
          "text": "The most essential aspect of computation is studied in algorithms IMO"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:37:34.000228",
          "text": "Yeah, I'm aware of how to create functions, but not so much how to implement them in a working program."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:37:43.000344",
          "text": "Which is unfortunate and painful"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:37:46.000215",
          "text": "That's interesting."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:37:52.000044",
          "text": "Ha."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:37:58.000261",
          "text": "algorithms is the abstract study of problems"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:38:09.000487",
          "text": "those problems tend to be well-stated CS / math problems involving information storage, retrieval, and computation"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:38:22.000211",
          "text": "the language of algorithms is often in an informal, English-like code"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:38:28.000301",
          "text": "which shows you how free-form and abstract it is"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:38:39.000098",
          "text": "the most limitless programming Language is your lazy English speech!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:38:46.000257",
          "text": "Communicating to yourself the way you think is most obvious!"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:39:21.000473",
          "text": "The Eve language looks interesting, but I'm not sure I'm a fan yet of having a program (Photoshop-ish) doing everything... <http://witheve.com/>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:39:38.000359",
          "text": "So doing things in a FP or OO way, or a procedural way, or wahtever doesn't really matter"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:39:41.000450",
          "text": "Right, I was thinking about the English language when learning Haskell.."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:39:50.000022",
          "text": "If you wish to do interesting problems in computation, you cannot avoid the study of algorithms"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:40:29.000600",
          "text": "One of the alluring ways that FP people think about data and programs"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:40:54.000178",
          "text": "is your program is a function, and you throw inputs, and the output is the desired program result"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:41:06.000147",
          "text": "So, maybe you'd be interested in machine learning and neural networks as well. I've thought about that a lot, but wondered if I should contribute to the end of mankind lol. (joke)"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:41:18.000369",
          "text": "I'm interested in AI"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:41:40.000316",
          "text": "but that's a very distal interest"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:41:50.000454",
          "text": "I'm interested in mathematical models of causal learning"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:43:28.000466",
          "text": "Yeah, honestly, I got to some of the _meat_ languages, I think, through wanting to know more about _how_ computers work, and that probably lead to CS. But I've not yet begun to delve too much into that either, as there's varying opinions on how to go about it. But I'll probably stick with the Racket community and go from there. I think it probably has a lot to teach in that realm."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:43:58.000541",
          "text": "Have you heard of Project Euler?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:44:21.000216",
          "text": "<https://projecteuler.net/problem=1>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:45:12.000313",
          "text": "That's interesting. Yeah, I've enrolled into a few math courses. I'll have to look more into it."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:47:10.000005",
          "text": "Does that first problem sound hard in Racket"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T16:47:19.000189",
          "text": "Ignoring all mathematical insights that may help make this problem easier"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:47:37.000200",
          "text": "I think the only way for me to memorize or appreciate that stuff is to make something with it."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:48:07.000416",
          "text": "Have you heard of <https://p5js.org/>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:49:08.000072",
          "text": "I found out about it through <https://leanpub.com/codingforvisuallearners>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:52:16.000261",
          "text": "I tried learning discrete mathematics but that was way over my head."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:54:25.000277",
          "text": "I would guess, no, it's not hard in Racket? Only a guess, but I'd imagine Racket can do that easily."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:56:39.000447",
          "text": "Thanks for sharing the link. I'm going to bookmark it and try to do some problems in my spare time. I'd spent a little time at Kahn Academy today."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:58:25.000488",
          "text": "I can't believe there are 604 problems, that's amazing."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:05:54.000231",
          "text": "Ah I think of it as a good benchmark for programming ability, that first problem"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:06:04.000462",
          "text": "It basically asks you do deal with conditionals and looping"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:07:04.000399",
          "text": "What do you think of Mathematica?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:07:16.000080",
          "text": "It's probably not the right language for you"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:07:23.000236",
          "text": "It's a lab language for universities that are uncomfortable with open source"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:07:30.000010",
          "text": "so they'd rather have the proprietary support"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:07:34.000559",
          "text": "do you have a free license or something?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:07:40.000212",
          "text": "Ahhh. Got it. Good answer."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:07:45.000103",
          "text": "No."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:08:24.000608",
          "text": "What kind of programming destination are you after"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:09:02.000094",
          "text": "See, I already have a web background, so I don't want to abandon that."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:09:20.000037",
          "text": "Why art thou avoiding JS..."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:09:28.000050",
          "text": "That makes 0 sense..."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:04.000431",
          "text": "JS is such a small programming language"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:06.000202",
          "text": "It really is"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:15.000234",
          "text": "I meant it when I said 80-120 constructs"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:19.000205",
          "text": "which is about the same as Go or C"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:10:26.000506",
          "text": "I'm not really. But perhaps I was a bit influenced by how people feel about JS. I can sort of see things in the bigger picture now, but yeah."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:31.000164",
          "text": "It's so small it's painful"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:37.000235",
          "text": "like"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:40.000007",
          "text": "small is easy to learn"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:42.000332",
          "text": "hard to master"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:10:57.000241",
          "text": "The reason is because so many tools you wish someone had built for you weren't built"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:11:06.000569",
          "text": "JS has no standard library, unlike Racket, which has a huge library"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:11:10.000052",
          "text": "so does Python"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:11:11.000173",
          "text": "Oh and, because I was looking into FP compile-to languages like PureScript and Elm, but even those require _some_ knowledge of JS."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:11:21.000180",
          "text": "aghh those are all crazy stuffs TBH"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:11:24.000008",
          "text": "like, job-wise"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:11:37.000163",
          "text": "they have almost 0 chance of winning"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:11:43.000162",
          "text": "like almost 0 popularity"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:12:26.000205",
          "text": "JS is a really fine language"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:12:28.000100",
          "text": "it's minimal"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:12:33.000114",
          "text": "If you've been learning HTML CSS"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:12:35.000060",
          "text": "but not learning JS"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:12:38.000216",
          "text": "it's kind of crazy"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:12:45.000223",
          "text": "because JS boosts your HTML CSS powers like 10x"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:12:48.000412",
          "text": "Yeah, I realized that when I started looking more into that, but I think it's improving, only very slowly."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:13:26.000271",
          "text": "What are some things that an aspiring learner might feel bad about learning JS with?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:13:37.000223",
          "text": "Well, JS has extremely limited parallelism"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:13:42.000052",
          "text": "It has weak representation of underlying memory"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:13:52.000276",
          "text": "Callbacks?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:13:56.000354",
          "text": "callbacks are fine"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:14:06.000054",
          "text": "People who complain about callbacks are those who dont' know how to work with streams"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:14:25.000434",
          "text": "plus, JS has some really modern async constructs from the C# land"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:14:31.000524",
          "text": "which has since been adopted by Python"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:14:44.000226",
          "text": "Callbacks are a local code issue"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:14:48.000307",
          "text": "I don't actually know why, but I have a pretty big interest in JS--or did at one point--but I'm going back in that direction."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:15:01.000095",
          "text": "I would totally recommend it"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:15:10.000186",
          "text": "You can do a very fast lightning review of JS pretty easily"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:16:06.000338",
          "text": "Have you heard of a static builder called GatsbyJS? It's based on React and GraphQL. I was highly interested in that at one point; you know what, I think it was tooling that had me back out when I should've first learned VanillaJS."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:16:22.000182",
          "text": "You should learn React before you touch Gatsby or GraphQL"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:16:32.000170",
          "text": "GraphQL has nothing to do with React, but it works great with React"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:16:49.000335",
          "text": "I totally believe in the mission of Gatsby"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:16:56.000355",
          "text": "<http://fog.pw/#/>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:16:59.000485",
          "text": "Yeah, GraphQL boggled my mind when I tried to understand it."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:02.000283",
          "text": "This is a static website I've been toying with"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:15.000291",
          "text": "It's part of why I believe in static websites with React"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:27.000098",
          "text": "I think one of the most interrupting moments of web experience is in making a new web request"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:35.000259",
          "text": "there are physical constraints that make it so your website can never reach someone that fast"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:47.000089",
          "text": "the only way to break past this is smart http requests"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:48.000177",
          "text": "with JS"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:54.000257",
          "text": "so most of the links don't work"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:17:56.000175",
          "text": "but for the top bar"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:18:00.000084",
          "text": "you'll notice that the site loads instantly"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:18:07.000276",
          "text": "Is that a Gatsby site?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:18:07.000348",
          "text": "like click settings, or add boomark"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:18:20.000225",
          "text": "it's a React static site, so it could easily be deployed on Gatsby"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:18:32.000155",
          "text": "it has the same philosophy and faith in React's place for a niche of websites"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:18:37.000302",
          "text": "Oh, and then there's Webpack sorcery. That is _tough_."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:18:43.000200",
          "text": "Yes, webpack is hard"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:18:50.000309",
          "text": "But it won't limit your learning"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:18:58.000215",
          "text": "The lack of decent parallelism and memory represntation will"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:19:11.000325",
          "text": "The lack of types means you're not being experienced with a nice typed language"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:19:20.000198",
          "text": "Obviously if you landed a job with a language like Rust right away"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:19:25.000341",
          "text": "You'd be getting a way different learning experience"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:19:31.000247",
          "text": "one which doesn't neglect concurrency or parallelism at all"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:20:10.000120",
          "text": "But React is very much a functional way of organizing apps"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:20:25.000147",
          "text": "Which is why I would recommend learning React + Redux together, even though everyone might say that is a little heavy"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:20:31.000513",
          "text": "but tons of beginners have walked this pathway"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:20:57.000472",
          "text": "Decisions lol. Yeah, I'll probably follow through with HtDP and Racket. Later, I'm sure I'll finish what I can learn about JS. Someone told me they learned FP first and JS later. That was probably the strangest paths I've heard thus far, but maybe even in the direction I was going."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:21:11.000240",
          "text": "I would ask how much FP they know, though"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:21:17.000474",
          "text": "I love FP, I keep on trying to advance my knowledge"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:21:27.000012",
          "text": "whenever I meet techy people"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:21:32.000182",
          "text": "especially IRL"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:21:39.000251",
          "text": "I ask their impressions of FP"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:21:43.000315",
          "text": "everyone who has loved FP has disappointed me"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:21:58.000271",
          "text": "for one thing"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:22:05.000103",
          "text": "the land of FP data structures and algorithms is high lore"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:22:13.000468",
          "text": "This person was an advanced Haskeller. You'd be surprised how many Haskell programmers don't know a thing about JS."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:22:40.000481",
          "text": "I wouldn't be surprised if advanced haskeller doesn't work with advanced functional data structures"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:22:44.000173",
          "text": "it really is a land of deep lore"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:02.000114",
          "text": "like the academic literary output in that realm is scant"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:07.000296",
          "text": "you would think that academia loves FP"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:09.000179",
          "text": "it does not"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:23:09.000236",
          "text": "Yeah, everyone disappoints me. Hah! So many perspectives, but I can appreciate them all and learn."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:18.000015",
          "text": "academia loves imperative algorithms"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:29.000177",
          "text": "99.99% of algorithms studies are non-functional data structures"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:46.000173",
          "text": "when you read literature on FP data structures"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:49.000239",
          "text": "sometimes authors leave sad statements"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:55.000267",
          "text": "about how much some other author's work helped them"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:23:58.000068",
          "text": "but then you think"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:24:03.000195",
          "text": "\"omg, I know that work, that work is over 10 years old\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:24:08.000025",
          "text": "\"This field moves at 1 MPH\""
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:24:14.000037",
          "text": "That's why I admire Alexis. She knows Haskell, Racket, built Hackett, and I think, does frontend work with JS and such."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:25:37.000096",
          "text": "But you're right, the JS community has too much to offer to pass up. I'd better do some work today. Thanks for the discussion."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:25:56.000346",
          "text": "If you want help with JS, I can offer some"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:26:02.000298",
          "text": "including how to transport your FP knowledge over to JS"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:26:18.000088",
          "text": "But aside from the most simple DRY stuff"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:26:21.000071",
          "text": "I haven't seen interesting FP"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:26:38.000181",
          "text": "I tend to practice functional JS just for the aesthetics"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:27:15.000080",
          "text": "That'd be great. I think Frontend Masters has a FP JS course, and there's another one of GitHub if I recall. But I'll definitely have to get more of your thoughts on certain things when I get stuck! Ha."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:27:23.000167",
          "text": "I also find it odd that FP people would talk about type correctness"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:27:32.000369",
          "text": "But one of the most interesting kinds of correctness in a program is, \"will it get stuck\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:27:35.000251",
          "text": "\"will it freeze\""
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:27:42.000410",
          "text": "but they don't talk about that!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:28:06.000190",
          "text": "That is the study of waiting and progress"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:28:16.000389",
          "text": "Someone told me the FP community is very _tribal_, and in that, I would partly agree..."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:28:49.000305",
          "text": "I notice you're walking up some math pathway"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:28:53.000386",
          "text": "I think if you cut off everyone's ideas and efforts, you may be missing out on a lot."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:29:01.000144",
          "text": "perhaps out of some math anxiety"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:29:08.000015",
          "text": "discrete math is a great programmer's catch-all course"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:29:14.000341",
          "text": "but when you go into the Haskell channel"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:29:25.000185",
          "text": "you no doubt notice a bias for abstract algebra and category theory"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:29:28.000173",
          "text": "including with alexis"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:29:30.000109",
          "text": "and the people here"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:29:47.000106",
          "text": "Oh yeah, I think it makes some people angry."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:29:51.000452",
          "text": "Ok, so I've walked up to abstract algebra so far, dipping my toes into category theory, and so far all I see are great applications in MATH"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:30:37.000475",
          "text": "And a confident to read technical papers NOT in abstract algebra"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:30:41.000062",
          "text": "*confidence"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:30:48.000227",
          "text": "The _theory_ part is the most telling. Haha. How can math be theory? But I suppose calculus is somewhat that."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:31:32.000057",
          "text": "If they knew everything, we wouldn't still be on this forsaken planet. Lol."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:31:47.000046",
          "text": "but I would be wary about thinking that you have to revisit calculus"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:31:51.000258",
          "text": "and walk all the way through math again"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:32:06.000025",
          "text": "Discrete Math is a great programmer's catch-all of need-to-know math"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T17:32:20.000111",
          "text": "but yeah see ya"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:32:33.000458",
          "text": "Yeah, that's what most people have told me. I don't know why I feel like I'm missing out on that, but perhaps later would be more logical and helpful."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T17:32:37.000506",
          "text": "Later!"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-21T17:33:01.000366",
          "text": "<@Eun> or <@Rosalee> , can you help me run the contract profiler on a plot3d module? <https://github.com/racket/gui/issues/86>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T17:33:52.000049",
          "text": "<@Nelson> I wonder if the issue is threads, somehow"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-21T17:33:52.000198",
          "text": "Clicking &amp; dragging is slow. I want to see what contracts are causing the slowdown (I know the slowdown is because of an `(Instance Snip%)` type)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-21T17:36:17.000367",
          "text": ":disappointed: I don't know where to start looking for thread problems"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-21T17:42:11.000001",
          "text": "okay threads is probably the issue with profiling. Running `raco profile ....` prints a summary just after the GUI renders. So it's not profiling anything about clicks &amp; drags"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-21T17:42:52.000365",
          "text": "I think the profiling library has something for threads"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-21T18:15:31.000107",
          "text": "after looking at the docs I tried `(profile-thunk (lambda () (send f show #t)) #:threads #true)`, but this doesn't seem to profile the GUI thread either"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-21T19:37:45.000129",
          "text": "A data structure is an algorithm problem well defined ; }"
        }
      ]
    },
    {
      "conversation_id": "482",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: One thing that confuses me about Racket. Is DrRacket the only real way to work on projects?\nJalisa: That's what I thought.\nJalisa: As many who don't particularly like Clojure, they seem to have some great tools for editors...",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 3,
        "duration_minutes": 4.65,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:17:46.000466",
          "text": "One thing that confuses me about Racket. Is DrRacket the only real way to work on projects?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:20:50.000550",
          "text": "That's what I thought."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:22:25.000214",
          "text": "As many who don't particularly like Clojure, they seem to have some great tools for editors..."
        }
      ]
    },
    {
      "conversation_id": "483",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: Speaking of which...",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T16:47:44.000227",
          "text": "Speaking of which..."
        }
      ]
    },
    {
      "conversation_id": "484",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: Came across this after you mentioned Rob Pike <[URL]\nJalisa: Are there plans to make DrRacket more aesthetically pleasing? I'm sure it's not a priority, but I think it will help Racket's cause. The logo could probably use an update as well.\nJalisa: On a side note, I suppose the default Emacs theme is completely outdated. Perhaps this isn't important much at all.\nChantelle: Jalisa there is a way to change drracket's color scheme with custom plugins\nChantelle: but yes I find drracket a little clunky at times\nChantelle: I don't think there's any specific plans to work on that though\nChantelle: too much other stuff to do\nJalisa: Yeah, I didn't realize until today (for some reason) that DrRacket was a complete IDE.\nChantelle: it does a _lot_\nChantelle: 99% of which I have no idea how to use\nChantelle: so, guess that means it really is an IDE\nJalisa: Is it recommended after HtDP, moving to <[URL]\nChantelle: ¯\\_(ツ)_/¯\nChantelle: I don't think there's any formal recommendations for next books beyond what's in htdp itself\nJalisa: I came across PLAI before, but came across it again through Andrew Brinker in his course: <[URL] Seems to cover a lof of stuff.\nJalisa: I not sure how many updates it's received since 2007-2012 but apparently it's still being used.\nLatarsha: Jalisa if there are particular things you'd like changed in DrRacket, then that would certainly be a reasonable thing to discuss\nLatarsha: Also, the logo is quite recent -- I don't think we're likely to change it again soon\nLatarsha: Nelson yes\nLatarsha: basically you generated an identifier that the residual program does not require\nLatarsha: usually because there's a dynamic-require of the module doing the actual generating\nJalisa: Latarsha I could probably give better feedback after using it more. But I will say, after going through Racket’s documentation, I don’t think there’s a better language to learn programming in. My goal is to learn Rust, and then move into a bit of Haskell. I don’t feel like with Racket that I’m completely perplexed. With Haskell, I could stare for hours trying to figure out why something works and doesn’t. The logo is decent, and as mentioned, maybe it’s not a priority. It’s hard to complain with such good documentation and practicality is better. I see Racket also has a section for systems programming, which is great. My brain is slowly digesting certain concepts, and I think going from super-hard to slightly easier and less verbose, is something that makes me appreciate languages like Racket.\nLatarsha: Jalisa I think most of us quite like the current logo\nJalisa: No, don’t get me wrong—it’s great.\nJalisa: When everyone was talking about logos a few weeks ago, I proposed something for Hackett, but I know Alexis has other priorities than logo design, like, _language design_. I can see now why she wouldn’t want to focus on that just yet. As a front end person, I think we focus too much on aesthetics and not as much usability. But if you want to see what I had someone come up with, here’s the logo. I think it’s decent but maybe someone can provide better feedback. There were 3 other variations but I chose this one out of uniqueness. We’d sort of just played around with this.\nJalisa: I'd wondered about that myself, but it looks as though there's some documentation on it: <[URL]",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 26,
        "duration_minutes": 1395.97,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "discuss",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Jalisa",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T19:18:13.000352",
          "text": "Came across this after you mentioned Rob Pike <http://users.ece.utexas.edu/~adnan/pike.html>"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T22:52:52.000059",
          "text": "Are there plans to make DrRacket more aesthetically pleasing? I'm sure it's not a priority, but I think it will help Racket's cause. The logo could probably use an update as well."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T23:14:28.000073",
          "text": "On a side note, I suppose the default Emacs theme is completely outdated. Perhaps this isn't important much at all."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:15:50.000202",
          "text": "<@Jalisa> there is a way to change drracket's color scheme with custom plugins"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:16:12.000101",
          "text": "but yes I find drracket a little clunky at times"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:16:23.000010",
          "text": "I don't think there's any specific plans to work on that though"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:16:27.000092",
          "text": "too much other stuff to do"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T23:16:39.000016",
          "text": "Yeah, I didn't realize until today (for some reason) that DrRacket was a complete IDE."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:17:07.000053",
          "text": "it does a _lot_"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:17:16.000043",
          "text": "99% of which I have no idea how to use"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:17:33.000044",
          "text": "so, guess that means it really is an IDE"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T23:22:31.000198",
          "text": "Is it recommended after HtDP, moving to <http://www.plai.org|www.plai.org>?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:22:56.000110",
          "text": "¯\\_(ツ)_/¯"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-21T23:23:13.000123",
          "text": "I don't think there's any formal recommendations for next books beyond what's in htdp itself"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T23:30:40.000095",
          "text": "I came across PLAI before, but came across it again through Andrew Brinker in his course: <http://www.proglangs.com|www.proglangs.com>. Seems to cover a lof of stuff."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-21T23:31:43.000050",
          "text": "I not sure how many updates it's received since 2007-2012 but apparently it's still being used."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-22T11:54:22.000264",
          "text": "<@Jalisa> if there are particular things you'd like changed in DrRacket, then that would certainly be a reasonable thing to discuss"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-22T11:54:49.000397",
          "text": "Also, the logo is quite recent -- I don't think we're likely to change it again soon"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-22T12:05:01.000173",
          "text": "<@Nelson> yes"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-22T12:05:30.000097",
          "text": "basically you generated an identifier that the residual program does not require"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-22T12:05:43.000023",
          "text": "usually because there's a dynamic-require of the module doing the actual generating"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-22T12:06:02.000189",
          "text": "<@Latarsha> I could probably give better feedback after using it more. But I will say, after going through Racket’s documentation, I don’t think there’s a better language to learn programming in. My goal is to learn Rust, and then move into a bit of Haskell. I don’t feel like with Racket that I’m completely perplexed. With Haskell, I could stare for hours trying to figure out why something works and doesn’t. \n\nThe logo is decent, and as mentioned, maybe it’s not a priority. It’s hard to complain with such good documentation and practicality is better. I see Racket also has a section for systems programming, which is great. My brain is slowly digesting certain concepts, and I think going from super-hard to slightly easier and less verbose, is something that makes me appreciate languages like Racket."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-22T12:07:25.000292",
          "text": "<@Jalisa> I think most of us quite like the current logo"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-22T12:09:53.000297",
          "text": "No, don’t get me wrong—it’s great."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-22T12:14:55.000515",
          "text": "When everyone was talking about logos a few weeks ago, I proposed something for Hackett, but I know Alexis has other priorities than logo design, like, _language design_. I can see now why she wouldn’t want to focus on that just yet. As a front end person, I think we focus too much on aesthetics and not as much usability. But if you want to see what I had someone come up with, here’s the logo. I think it’s decent but maybe someone can provide better feedback. There were 3 other variations but I chose this one out of uniqueness. We’d sort of just played around with this."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-22T18:34:11.000145",
          "text": "I'd wondered about that myself, but it looks as though there's some documentation on it: <https://docs.racket-lang.org/drracket/>"
        }
      ]
    },
    {
      "conversation_id": "485",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lashaunda: Regarding PLAI, there was a time when Shriram’s CS 173 course at Brown, which used PLAI, was online, and I took the online public version the one time he made that an option. The material was interesting but one thing I remember vividly was how engaged and excited the Brown students were—they were bright and lively to a degree that exceeded what I’d seen at Harvard, where by comparison it seemed professors had to encourage students more to participate. Maybe that is Shriram’s style, to make a class exciting, to make it impossible for students to *not* engage, but the Brown students certainly responded with great enthusiasm. As for the PLAI material itself, I guess the takeaway for me was that it got you to think out of the box, to go in language directions uncharted and new, to see Racket as the toolkit that could help you design and implement whatever crazy idea might be in your head. I guess from a practical (“industry”) point of view, if you were designing a DSL, PLAI would help you see how to do that.\nLashaunda: Regarding DrRacket as an IDEA, it’s improved a lot in recent years, to the point where I do most of my Racket coding in DrRacket now, and less in Emacs. Emacs is still my go-to tool to do _anything_ that other tools can’t do, but where my Emacs:DrRacket ratio for Racket coding used to be 50:50, it is now 90:10 or maybe even 95:5. The arrows in DrRacket are pretty cool, but sometimes there are so many of them and I find myself wondering which ones lead where. The ability to jump to a definition or go to any number of the bindings, and to do rename-all, is very helpful. It’s not as powerful as I find in IntelliJ with Scala in terms of refactoring power, but it’s getting there. There are ways to put in debugging/evaluation breakpoints in DrRacket, but that’s where I find things clunky compared with IntelliJ, where I feel I have very fine control when bugs need to be found and fixed; in the DrRacket world, I find myself resorting to printf-style debugging more often. Things like the macro-expander in DrRacket are pretty bloody amazing and mind-blowing. One thing I found myself wishing for yesterday when I was coding in DrRacket: I was deep in some code, and what I wanted was to click on a function or structure name and be able to launch a little “sticky” (as in the old Mac stickies) window that just had the definition of that function or structure so I could keep it on my screen without having to leave where I was. I asked myself what it would take to implement such a feature. IntelliJ has an auto-complete that is great for typed languages, it shows you the options along with the full type signature. I know auto-complete is controversial in the Racket community but I’ll just say that IntelliJ’s auto-complete speeds my work, at work, appreciably, and that makes the bosses happy, developer “velocity” being the buzzword of the year. What do I miss about Emacs when I use DrRacket? I do use Emacs key-bindings (not everyone does), so I miss the kill-ring and the ability to assign points to registers sometimes. The DrRacket version of Emacs’ set-mark is strange in that if you’re not careful, after you copy a region from here to there, the region is still active, so if you do more typing without doing something to unhighlight the region first, you can accidentally blow it away (and then you get it back with Undo or a second paste). One little DrRacket feature I love is the ability to highlight s-expressions with an easy key chord and move them from where they are to where I’ve just decided they need to be instead. Every time I do that, which is literally dozens of times a day, in refactoring usually, I wish the parenthesis-hating people were nearby so I could ask them, “So how do _you_ do such easy grouping and rearranging without parentheses?”",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 26.08,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "complete",
          "decide",
          "fix",
          "implement",
          "need to"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Lashaunda"
        ]
      },
      "timeline": [
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-22T06:37:16.000236",
          "text": "Regarding PLAI, there was a time when Shriram’s CS 173 course at Brown, which used PLAI, was online, and I took the online public version the one time he made that an option.  The material was interesting but one thing I remember vividly was how engaged and excited the Brown students were—they were bright and lively to a degree that exceeded what I’d seen at Harvard, where by comparison it seemed professors had to encourage students more to participate.  Maybe that is Shriram’s style, to make a class exciting, to make it impossible for students to *not* engage, but the Brown students certainly responded with great enthusiasm.  As for the PLAI material itself, I guess the takeaway for me was that it got you to think out of the box, to go in language directions uncharted and new, to see Racket as the toolkit that could help you design and implement whatever crazy idea might be in your head.  I guess from a practical (“industry”) point of view, if you were designing a DSL, PLAI would help you see how to do that."
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-22T07:03:21.000196",
          "text": "Regarding DrRacket as an IDEA, it’s improved a lot in recent years, to the point where I do most of my Racket coding in DrRacket now, and less in Emacs.  Emacs is still my go-to tool to do _anything_ that other tools can’t do, but where my Emacs:DrRacket ratio for Racket coding used to be 50:50, it is now 90:10 or maybe even 95:5.  The arrows in DrRacket are pretty cool, but sometimes there are so many of them and I find myself wondering which ones lead where.  The ability to jump to a definition or go to any number of the bindings, and to do rename-all, is very helpful.  It’s not as powerful as I find in IntelliJ with Scala in terms of refactoring power, but it’s getting there.  There are ways to put in debugging/evaluation breakpoints in DrRacket, but that’s where I find things clunky compared with IntelliJ, where I feel I have very fine control when bugs need to be found and fixed; in the DrRacket world, I find myself resorting to printf-style debugging more often.  Things like the macro-expander in DrRacket are pretty bloody amazing and mind-blowing.  One thing I found myself wishing for yesterday when I was coding in DrRacket:  I was deep in some code, and what I wanted was to click on a function or structure name and be able to launch a little “sticky” (as in the old Mac stickies) window that just had the definition of that function or structure so I could keep it on my screen without having to leave where I was.  I asked myself what it would take to implement such a feature.  IntelliJ has an auto-complete that is great for typed languages, it shows you the options along with the full type signature.  I know auto-complete is controversial in the Racket community but I’ll just say that IntelliJ’s auto-complete speeds my work, at work, appreciably, and that makes the bosses happy, developer “velocity” being the buzzword of the year.  What do I miss about Emacs when I use DrRacket?  I do use Emacs key-bindings (not everyone does), so I miss the kill-ring and the ability to assign points to registers sometimes.  The DrRacket version of Emacs’ set-mark is strange in that if you’re not careful, after you copy a region from here to there, the region is still active, so if you do more typing without doing something to unhighlight the region first, you can accidentally blow it away (and then you get it back with Undo or a second paste).  One little DrRacket feature I love is the ability to highlight s-expressions with an easy key chord and move them from where they are to where I’ve just decided they need to be instead.  Every time I do that, which is literally dozens of times a day, in refactoring usually, I wish the parenthesis-hating people were nearby so I could ask them, “So how do _you_ do such easy grouping and rearranging without parentheses?”"
        }
      ]
    },
    {
      "conversation_id": "486",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: I have a \"reference to a module that is not available\". The way to fix that is adding more requires (somewhere), right?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "requires"
        ],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-11-22T12:03:25.000375",
          "text": "I have a \"reference to a module that is not available\". The way to fix that is adding more requires (somewhere), right?"
        }
      ]
    },
    {
      "conversation_id": "487",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Arnetta: is there a DrRacket keyboard shortcut to go to the end of a line, even when the line is word-wrapped at the edge of the window? The End key seems to only go to edge of window.\nArnetta: ^pardon if that's answered somewhere easily; I looked in the editor itself and didn't see anything\nCorey: Arnetta C-e (CTRL + e) works for me? (If it doesn't for you: I have Emacs keybindings on for DrRacket, plus I just tried that on macOS where C-e tends to do that generally.)\nJalisa: Also, I think column width is a matter of preference in Racket. I know some languages provide a recommended length in their style guide. It doesn't look like Racket adheres to one. Personally, I like somewhere between 70-80 characters, but I'm seeing recent commits in the Racket repo nearly 120. I think a lot of it depends on your screen resolution, and preference really. In DrRacket where to set a preferred width: <[URL] More info in the documentation: <[URL] _That's cool; I didn't know you could use Emacs keybindings!_\nCorey: Jalisa Yes I agree that \"consider not having the line run off the right edge of the window\" is the ideal answer when possible. :slightly_smiling_face:\nJalisa: I only know that because Haskell has some very strange rules for things, and I think Rust has a preferred column length.\nCorey: I've seen some quite old Racket source code where things nest very deeply (and off the right). But in fairness I think that's at least partly because old Racket (back when it was called PLT Scheme) lacked certain constructs, or it's a part of Racket that's more primitive than where the constructs are defined. And so there's a lot of nested [CODE] and so on.\nCorey: When I encounter that kind of code, I bow respectfully, back away slowly, and close the window.\nKa: ok, so in scribble, [CODE] is .... not awesome :smiley:. Is there a better approach to making nice tables that can maybe have headers and things?\nKa: OK, so digging in it's a little better than I thought, but still pretty rough.\nKa: but it does support \"headers\" with generouse use of 'cont\nKa: ALSO: thanks to all the people who have contributed such great documentation over the years. As someone who is trying to get my team into a mode of documenting the design of new features as a prereq of actually developing said features, I've found myself slowly building out documentation to *describe* what we currently have.\nKa: it's a lot of work.\nChantelle: Ka honestly I think of Scribble as rackets truly unparalleled killer feature\nKa: except for it's table support. :wink:\nChantelle: ;)\nChantelle: I think some well-chosen additions to the pict library might help with that\nKa: I think the problem here is actually the fact that scribble supports so many output formats\nKa: (well, in theory)\nKa: you need to define a minimum set of useful features that can easily be rendered everywhere.\nKa: so you can't just rely on what HTML provides.\nKa: I wouldn't want pict here, though if I could easily draw UML ER diagrams, then I wouldn't need tables in the first place.\nKa: I could *probably* make something not horrible in graphviz for this... so maybe that's a non-horrible option.I've already got other diagrams via graphviz in this set of docs.",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 23,
        "duration_minutes": 345.37,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "need to"
        ],
        "decision_keywords": [
          "works for me"
        ],
        "participants": [
          "Arnetta",
          "Chantelle",
          "Corey",
          "Jalisa",
          "Ka"
        ]
      },
      "timeline": [
        {
          "user": "Arnetta",
          "timestamp": "2017-11-22T14:24:45.000105",
          "text": "is there a DrRacket keyboard shortcut to go to the end of a line, even when the line is word-wrapped at the edge of the window? The End key seems to only go to edge of window."
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-11-22T14:25:28.000212",
          "text": "^pardon if that's answered somewhere easily; I looked in the editor itself and didn't see anything"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-22T18:48:14.000138",
          "text": "<@Arnetta> C-e (CTRL + e) works for me? (If it doesn't for you: I have Emacs keybindings on for DrRacket, plus I just tried that on macOS where C-e tends to do that generally.)"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-22T18:55:11.000146",
          "text": "Also, I think column width is a matter of preference in Racket. I know some languages provide a recommended length in their style guide. It doesn't look like Racket adheres to one. Personally, I like somewhere between 70-80 characters, but I'm seeing recent commits in the Racket repo nearly 120. I think a lot of it depends on your screen resolution, and preference really.\n\nIn DrRacket where to set a preferred width:\n\n<https://i.imgur.com/kgFyQ7J.jpg>\n\nMore info in the documentation:\n\n<https://docs.racket-lang.org/style/Textual_Matters.html#%28part._.Line_.Width%29>\n\n_That's cool; I didn't know you could use Emacs keybindings!_"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-22T18:56:47.000086",
          "text": "<@Jalisa> Yes I agree that \"consider not having the line run off the right edge of the window\" is the ideal answer when possible. :slightly_smiling_face:"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-22T18:58:17.000177",
          "text": "I only know that because Haskell has some very strange rules for things, and I think Rust has a preferred column length."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-22T19:00:36.000337",
          "text": "I've seen some quite old Racket source code where things nest very deeply (and off the right). But in fairness I think that's at least partly because old Racket (back when it was called PLT Scheme) lacked certain constructs, or it's a part of Racket that's more primitive than where the constructs are defined. And so there's a lot of nested `let-values` and so on."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-22T19:01:31.000087",
          "text": "When I encounter that kind of code, I bow respectfully, back away slowly, and close the window."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T19:22:32.000087",
          "text": "ok, so in scribble, `@tabular` is .... not awesome :smiley:. Is there a better approach to making nice tables that can maybe have headers and things?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T19:28:48.000049",
          "text": "OK, so digging in it's a little better than I thought, but still pretty rough."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T19:30:05.000058",
          "text": "but it does support \"headers\" with generouse use of 'cont"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:03:22.000065",
          "text": "ALSO: thanks to all the people who have contributed such great documentation over the years. As someone who is trying to get my team into a mode of documenting the design of new features as a prereq of actually developing said features, I've found myself slowly building out documentation to *describe* what we currently have."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:03:30.000104",
          "text": "it's a lot of work."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-22T20:04:46.000198",
          "text": "<@Ka> honestly I think of Scribble as rackets truly unparalleled killer feature"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:05:17.000020",
          "text": "except for it's table support. :wink:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-22T20:05:21.000182",
          "text": ";)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-22T20:05:47.000046",
          "text": "I think some well-chosen additions to the pict library might help with that"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:06:57.000037",
          "text": "I think the problem here is actually the fact that scribble supports so many output formats"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:07:03.000075",
          "text": "(well, in theory)"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:07:25.000189",
          "text": "you need to define a minimum set of useful features that can easily be rendered everywhere."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:07:38.000077",
          "text": "so you can't just rely on what HTML provides."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:08:15.000048",
          "text": "I wouldn't want pict here, though if I could easily draw UML ER diagrams, then I wouldn't need tables in the first place."
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-22T20:10:07.000007",
          "text": "I could *probably* make something not horrible in graphviz for this... so maybe that's a non-horrible option.I've already got other diagrams via graphviz in this set of docs."
        }
      ]
    },
    {
      "conversation_id": "488",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: I'm curious myself how Racket people do the nitty gritty of editing\nJacob: We just grow extra fingers over time.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 30.08,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-22T18:06:50.000153",
          "text": "I'm curious myself how Racket people do the nitty gritty of editing"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-22T18:36:55.000011",
          "text": "We just grow extra fingers over time."
        }
      ]
    },
    {
      "conversation_id": "489",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Happy Thanksgiving, Racketeers!\nLashaunda: You too!\nLashaunda: I’m actually hacking in Racket (while the turkey is in the oven), so you know I’m having a good Thanksgiving.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 0.78,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lashaunda",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-23T15:30:09.000099",
          "text": "Happy Thanksgiving, Racketeers!"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-23T15:30:16.000097",
          "text": "You too!"
        },
        {
          "user": "Lashaunda",
          "timestamp": "2017-11-23T15:30:56.000024",
          "text": "I’m actually hacking in Racket (while the turkey is in the oven), so you know I’m having a good Thanksgiving."
        }
      ]
    },
    {
      "conversation_id": "490",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: I'm curious about the typical Racket idiom or pattern to \"react\" to a port\nChantelle: Ida synchronizable events and using things like [CODE] with [CODE] / [CODE], probably\nIda: ah I see thanks\nArnetta: and wrt window size and column length, if I'm editing on a monitor that's smaller (so less screen space overall) and have open a webpage/etc, too, then often the DrRacket window will be thinner. I concur at &lt;80char in general.\nIda: Arnetta I know that DrRacket at least can adjust column guides",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 1058.23,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Arnetta",
          "Chantelle",
          "Ida"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-25T01:45:24.000018",
          "text": "I'm curious about the typical Racket idiom or pattern to \"react\" to a port"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-25T03:40:47.000033",
          "text": "<@Ida> synchronizable events and using things like `read-bytes-evt` with `wrap-evt` / `handle-evt`, probably"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-25T13:18:06.000015",
          "text": "ah I see thanks"
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-11-25T15:04:40.000024",
          "text": "and wrt window size and column length, if I'm editing on a monitor that's smaller (so less screen space overall) and have open a webpage/etc, too, then often the DrRacket window will be thinner. I concur at &lt;80char in general."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-25T19:23:38.000007",
          "text": "<@Arnetta> I know that DrRacket at least can adjust column guides"
        }
      ]
    },
    {
      "conversation_id": "491",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Arnetta: is it possible to write a macro that converts something like (func10) to (func 10)?\nArnetta: thx\nArnetta: with regard to the macro, what I actually want right now is something like (function arg1) to expand to something like (function (arg 1))\nArnetta: I was thinking maybe it would be possible if there was a list of understood \"arg\"s and the inputs to the function are converted to strings, check if the first part of the string matches an understood arg, then send the value of the rest of the string to the function?\nArnetta: does that sound like a workable path?\nJacob: Arnetta I think it could be a potentially workable idea if you restrict the set of possible functions you might be interested in. Otherwise I think it'd be likely you'd have too many valid matches if the namespace of possible functions is unlimited.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 1263.42,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Arnetta",
          "Jacob"
        ]
      },
      "timeline": [
        {
          "user": "Arnetta",
          "timestamp": "2017-11-25T15:02:13.000018",
          "text": "is it possible to write a macro that converts something like (func10) to (func 10)?"
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-11-26T09:30:45.000042",
          "text": "thx"
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-11-26T09:32:16.000044",
          "text": "with regard to the macro, what I actually want right now is something like (function arg1) to expand to something like (function (arg 1))"
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-11-26T09:35:31.000074",
          "text": "I was thinking maybe it would be possible if there was a list of understood \"arg\"s and the inputs to the function are converted to strings, check if the first part of the string matches an understood arg, then send the value of the rest of the string to the function?"
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-11-26T09:35:49.000091",
          "text": "does that sound like a workable path?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-26T12:05:38.000051",
          "text": "<@Arnetta> I think it could be a potentially workable idea if you restrict the set of possible functions you might be interested in. Otherwise I think it'd be likely you'd have too many valid matches if the namespace of possible functions is unlimited."
        }
      ]
    },
    {
      "conversation_id": "492",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Dora: Quick question for the channel. If I want to find something like the source for the \"for\" construct (I assume it's a macro somewhere?), where should I look?\nKimbery: Dora I’ll give you two answers. The first is the direct answer to your question: [CODE]’s source code comes from the module [CODE], which is in the racket/racket GitHub repo in [CODE]. The second is perhaps a slightly more useful answer: if you want to find the source code for various forms and functions, you can use DrRacket to right-click on an identifier and click “Open Defining File”, or you can use racket-mode in emacs and use [CODE].\nDora: Got it. Thanks Kimbery.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 85.3,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Dora",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Dora",
          "timestamp": "2017-11-26T16:55:21.000077",
          "text": "Quick question for the channel. If I want to find something like the source for the \"for\" construct (I assume it's a macro somewhere?), where should I look?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-26T17:08:10.000103",
          "text": "<@Dora> I’ll give you two answers. The first is the direct answer to your question: `for`’s source code comes from the module `racket/private/for`, which is in the racket/racket GitHub repo in `racket/collects/racket/private/for.rkt`. The second is perhaps a slightly more useful answer: if you want to find the source code for various forms and functions, you can use DrRacket to right-click on an identifier and click “Open Defining File”, or you can use racket-mode in emacs and use `racket-visit-definition`."
        },
        {
          "user": "Dora",
          "timestamp": "2017-11-26T18:20:39.000032",
          "text": "Got it. Thanks <@Kimbery>."
        }
      ]
    },
    {
      "conversation_id": "493",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: How does one convert #\\5 to 5?\nIda: I know of [CODE], but doesn't that have side effects?\nMarlin: [CODE] doesn't convert; it just displays. There isn't a built-in [CODE] (as far as I know), but you could either create a string containing only that one character and use [CODE], or you could write your own [CODE].\nMarlin: not sure what you mean\nCorey: [CODE] ?\nIda: ah is that the unicode conversion\nIda: I didn't know that\nIda: My motivation for all this was to try and figure out how to do a number in some base into a sequence hehe\nIda: I know there's an algorithm for doing floor division and modulo, but I want something that works for negative numbers too\nMarlin: simplest thing would be to re-use [CODE], e.g., [CODE]\nIda: Ohh I see\nMarlin: [CODE]\nIda: Earlier I thought you meant something else\nIda: Now I see both approaches work\nIda: ahh I see thanks",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 15,
        "duration_minutes": 15.35,
        "contains_question": true,
        "action_keywords": [
          "create"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Ida",
          "Marlin"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:02:08.000096",
          "text": "How does one convert #\\5 to 5?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:02:14.000149",
          "text": "I know of `display`, but doesn't that have side effects?"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-26T19:07:17.000117",
          "text": "`display` doesn't convert; it just displays. There isn't a built-in `char-&gt;number` (as far as I know), but you could either create a string containing only that one character and use `string-&gt;number`, or you could write your own `char-&gt;number`."
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-26T19:09:14.000001",
          "text": "not sure what you mean"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-26T19:13:52.000048",
          "text": "`(- (char-&gt;integer #\\5) 48)` ?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:14:07.000026",
          "text": "ah is that the unicode conversion"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:14:09.000088",
          "text": "I didn't know that"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:14:41.000015",
          "text": "My motivation for all this was to try and figure out how to do a number in some base into a sequence hehe"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:15:04.000014",
          "text": "I know there's an algorithm for doing floor division and modulo, but I want something that works for negative numbers too"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-26T19:15:51.000008",
          "text": "simplest thing would be to re-use `string-&gt;number`, e.g., `(string-&gt;number (string #\\5))`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:16:18.000070",
          "text": "Ohh I see"
        },
        {
          "user": "Marlin",
          "timestamp": "2017-11-26T19:16:20.000031",
          "text": "`(string-&gt;number (string #\\- #\\5))`"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:16:34.000091",
          "text": "Earlier I thought you meant something else"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:16:44.000050",
          "text": "Now I see both approaches work"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-26T19:17:29.000041",
          "text": "ahh I see thanks"
        }
      ]
    },
    {
      "conversation_id": "494",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: egads, someone doing metaprogramming nicer than racket! <[URL]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-27T18:04:58.000226",
          "text": "egads, someone doing metaprogramming nicer than racket! <https://docs.rs/structopt-derive/0.1.5/structopt_derive/>"
        }
      ]
    },
    {
      "conversation_id": "495",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: is that _nicer_ ?\nLatarsha: Ka the syntax is pretty ugly, but it's getting a lot more than what we do for cmd line options\nLatarsha: in particular, auto-parsing from the struct definition\nKa: just requires rolling up the sleeves and doing the work though. :slightly_smiling_face:\nKimbery: I’ve wanted that for a while, fwiw. Haskell has optparse-generic, which does a similar thing.\nKimbery: But this is all way nicer with ~~typeclasses~~ because you can use the type information to know how to parse each field. :)\nKimbery: (And Rust has traits, which I imagine can do the same thing here.)\nLatarsha: yeah\nLatarsha: plus annotations on struct fields\nKa: annotations on struct fields would be great\nChantelle: Kimbery oh I've been meaning to ask you: what approaches to hackett's type-value namespaces _didn't_ work?\nKimbery: Chantelle I tried a few slightly different things before I got something work, but most of the dramatically different things that wouldn’t have worked I dismissed without trying\nKimbery: the only remotely plausible alternative approach I thought about was to use phases instead of scopes, but that didn’t really hold up to scrutiny.\nChantelle: I'm wondering if using the same approach within a module but doing one of the following instead of name mangling might work: - Providing from one of either a [CODE] or a [CODE] submodule, with hackett's [CODE] looking for those submodules and adding type/value scopes to imports based on which submodule they came from (maybe the parent providing module should provide the scope introducer functions it used as well? not sure) - Providing syntax bound to a struct containing a field for a value identifier and a field for a type identifier, each having their type/value scope already added, with hackett's [CODE] recognizing these bindings and unpacking them. But I don't know how much work either of those would take to make them cooperate with scribble.\nKimbery: The problem with both of those approaches is that it makes it very difficult to make them transparently work with [CODE] and [CODE].\nKimbery: Specifically, you want to be able to do things like [CODE] and have it only rename the value-level [CODE].\nChantelle: that's already rather painful no? You have to rename-in the [CODE] form\nKimbery: So packing things together doesn’t really work. And you can’t easily lift the appropriate values into submodules when to do [CODE].\nKimbery: It might work if you did the packing with an entirely custom [CODE] form?\nChantelle: what other kinds of requires get painful besides [CODE]?\nKimbery: The trouble is that [CODE] can only be customized so much… you can’t make a [CODE] introduce a new syntax binding.\nChantelle: oh dang you can't?\nKimbery: No, provide transformers can lift, but they can’t expand to a definition.\nChantelle: hm wait\nKimbery: I think I tried hacking something with [CODE], but IIRC the lifted module isn’t available when the [CODE] is expanded, so you can’t [CODE] it in the expansion.\nChantelle: confused about which of these is possible: - provide transformer introduces new normal binding and exports it - provide transformer introduces new syntax binding and exports it - require transformer binds and declares import of new normal binding - require transformer binds and declares import of new syntax binding and which [CODE] functions are used for this? just [CODE] stuff or things that are specific to require/provide?\nKimbery: Yeah, it’s [CODE]. And note that provide pre-transformers can lift, but provide transformers can’t… and only provide transformers have access to the set of bindings imported/exported when doing something like [CODE].\nChantelle: also: do these require/provide limitations have good reasons for existing, or could some patches to the require/provide system implement them without much issue?\nKimbery: I looked at the source code for Racket’s [CODE] and [CODE], and I examined [CODE] and [CODE] a little.\nKimbery: Here’s what I learned: require transformers and provide pre-transformers are implemented in Racket. Provide transformers are implemented in C.\nKimbery: I think provide transformers are pretty restricted because they have access to the bindings exported by [CODE] and things like that, but in order to know that, the module needs to know which bindings are shadowed by the module body. So provide transformers are essentially the very last step of macro transformation in a module’s expansion.\nKimbery: This is a bit tricky, since it means provide transformers can’t do any lifting, but it means provide pre-transformers can’t know the precise set of bindings being exported.\nKimbery: Require transformers can do pretty much anything by comparison, but “anything” is restricted by the fact that it can only expand to [CODE] clauses and lift things. That restriction could probably be lifted, providing some API to make a require transformer expand to a fresh definition? But you’d have to be careful, since an imported definition could be hidden with [CODE] or something similar.\nChantelle: commuting; will read in more detail later. Off the cuff thought: wondering if the racket implementation of the macro system will make changes here possible / easier\nKimbery: The [CODE] restrictions are semi-fundamental AFAICT, and [CODE] transformers are already implemented entirely in Racket, so my gut says “no”, but it’s possible I am being insufficiently creative.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 35,
        "duration_minutes": 93.48,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ka",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-11-27T19:00:42.000262",
          "text": "is that _nicer_ ?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-27T19:01:41.000254",
          "text": "<@Ka> the syntax is pretty ugly, but it's getting a lot more than what we do for cmd line options"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-27T19:01:56.000005",
          "text": "in particular, auto-parsing from the struct definition"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-27T19:02:35.000040",
          "text": "just requires rolling up the sleeves and doing the work though. :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T19:02:35.000064",
          "text": "I’ve wanted that for a while, fwiw. Haskell has optparse-generic, which does a similar thing."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T19:03:01.000311",
          "text": "But this is all way nicer with ~~typeclasses~~ because you can use the type information to know how to parse each field. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T19:03:15.000018",
          "text": "(And Rust has traits, which I imagine can do the same thing here.)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-27T19:05:09.000323",
          "text": "yeah"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-27T19:05:24.000076",
          "text": "plus annotations on struct fields"
        },
        {
          "user": "Ka",
          "timestamp": "2017-11-27T19:05:58.000049",
          "text": "annotations on struct fields would be great"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T19:44:59.000058",
          "text": "<@Kimbery> oh I've been meaning to ask you: what approaches to hackett's type-value namespaces _didn't_ work?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:00:16.000024",
          "text": "<@Chantelle> I tried a few slightly different things before I got something work, but most of the dramatically different things that wouldn’t have worked I dismissed without trying"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:02:44.000046",
          "text": "the only remotely plausible alternative approach I thought about was to use phases instead of scopes, but that didn’t really hold up to scrutiny."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:10:39.000030",
          "text": "I'm wondering if using the same approach within a module but doing one of the following instead of name mangling might work:\n\n- Providing from one of either a `value-namespace` or a `type-namespace` submodule, with hackett's `require` looking for those submodules and adding type/value scopes to imports based on which submodule they came from (maybe the parent providing module should provide the scope introducer functions it used as well? not sure)\n- Providing syntax bound to a struct containing a field for a value identifier and a field for a type identifier, each having their type/value scope already added, with hackett's `require` recognizing these bindings and unpacking them.\n\nBut I don't know how much work either of those would take to make them cooperate with scribble."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:11:57.000100",
          "text": "The problem with both of those approaches is that it makes it very difficult to make them transparently work with `require` and `provide`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:12:30.000036",
          "text": "Specifically, you want to be able to do things like `(require (rename-in [Tuple tuple]))` and have it only rename the value-level `Tuple`."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:13:04.000335",
          "text": "that's already rather painful no? You have to rename-in the `#%hackett-type:id` form"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:13:06.000186",
          "text": "So packing things together doesn’t really work. And you can’t easily lift the appropriate values into submodules when to do `provide`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:13:48.000012",
          "text": "It might work if you did the packing with an entirely custom `provide` form?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:14:30.000078",
          "text": "what other kinds of requires get painful besides `rename-in`?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:14:36.000080",
          "text": "The trouble is that `require` can only be customized so much… you can’t make a `require` introduce a new syntax binding."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:14:50.000016",
          "text": "oh dang you can't?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:15:28.000212",
          "text": "No, provide transformers can lift, but they can’t expand to a definition."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:16:13.000070",
          "text": "hm wait"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:16:45.000094",
          "text": "I think I tried hacking something with `syntax-local-lift-module`, but IIRC the lifted module isn’t available when the `require` is expanded, so you can’t `require` it in the expansion."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:17:40.000161",
          "text": "confused about which of these is possible:\n\n- provide transformer introduces new normal binding and exports it\n- provide transformer introduces new syntax binding and exports it\n- require transformer binds and declares import of new normal binding\n- require transformer binds and declares import of new syntax binding\n\nand which `lift` functions are used for this? just `syntax-local-lift-*` stuff or things that are specific to require/provide?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:19:43.000075",
          "text": "Yeah, it’s `syntax-local-lift-*`. And note that provide pre-transformers can lift, but provide transformers can’t… and only provide transformers have access to the set of bindings imported/exported when doing something like `(provide (all-from-out foo/bar/baz))`."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:20:36.000181",
          "text": "also: do these require/provide limitations have good reasons for existing, or could some patches to the require/provide system implement them without much issue?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:21:18.000215",
          "text": "I looked at the source code for Racket’s `require` and `provide`, and I examined `#%require` and `#%provide` a little."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:21:41.000038",
          "text": "Here’s what I learned: require transformers and provide pre-transformers are implemented in Racket. Provide transformers are implemented in C."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:23:02.000194",
          "text": "I think provide transformers are pretty restricted because they have access to the bindings exported by `all-from-out` and things like that, but in order to know that, the module needs to know which bindings are shadowed by the module body. So provide transformers are essentially the very last step of macro transformation in a module’s expansion."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:23:31.000183",
          "text": "This is a bit tricky, since it means provide transformers can’t do any lifting, but it means provide pre-transformers can’t know the precise set of bindings being exported."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:31:13.000112",
          "text": "Require transformers can do pretty much anything by comparison, but “anything” is restricted by the fact that it can only expand to `#%require` clauses and lift things. That restriction could probably be lifted, providing some API to make a require transformer expand to a fresh definition? But you’d have to be careful, since an imported definition could be hidden with `only-in` or something similar."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-27T20:33:09.000210",
          "text": "commuting; will read in more detail later. Off the cuff thought: wondering if the racket implementation of the macro system will make changes here possible / easier"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:34:11.000136",
          "text": "The `provide` restrictions are semi-fundamental AFAICT, and `require` transformers are already implemented entirely in Racket, so my gut says “no”, but it’s possible I am being insufficiently creative."
        }
      ]
    },
    {
      "conversation_id": "496",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: I think the most significant difference between my first attempt and the current implementation is that I originally tried having different type/value scopes _per module instantiation_, but that ended up being needlessly complicated.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "implement"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-11-27T20:01:43.000201",
          "text": "I think the most significant difference between my first attempt and the current implementation is that I originally tried having different type/value scopes _per module instantiation_, but that ended up being needlessly complicated."
        }
      ]
    },
    {
      "conversation_id": "497",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: I would be curious one day to see an indentation-based Lisp\nIda: A Lisp with minimal parens!\nIda: I notice that Lisp users kind of already have an indentation-based organization\nAnalisa: <[URL]\nAnalisa: It looks like that was a scheme proposal\nAnalisa: Also this <[URL]\nAnalisa: where have I seen infix curly brace notation :thinking_face:\nIda: Hmm most results look more readable in srfi 110\nIda: Some are mixed results\nAnalisa: My biggest issue is when switching back to a lisp after writing in languages with more typical syntax\nAnalisa: Like earlier today, when I mixed up [CODE] and [CODE], because Hackett's partial applications look like Haskell's operator sections\nIda: Is the vector basically what I'm thinking of reaching for when I'm looking for a multidimensional array?\nIda: It seems to have awkward access syntax\nLatarsha: Ida vectors are one dimensional arrays\nLatarsha: the [CODE] library has multi-dimensional arrays\nIda: Oh I see, I'm surprised it would be tucked there and not somewhere more general\nNelson: <[URL]\nIda: Is the best way to do an immediately-invoked procedure just to wrap a lambda with more parens?",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 18,
        "duration_minutes": 1085.75,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Analisa",
          "Ida",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-28T02:06:44.000189",
          "text": "I would be curious one day to see an indentation-based Lisp"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T02:06:54.000085",
          "text": "A Lisp with minimal parens!"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T02:08:03.000213",
          "text": "I notice that Lisp users kind of already have an indentation-based organization"
        },
        {
          "user": "Analisa",
          "timestamp": "2017-11-28T02:09:44.000165",
          "text": "<https://srfi.schemers.org/srfi-49/srfi-49.html>"
        },
        {
          "user": "Analisa",
          "timestamp": "2017-11-28T02:09:52.000131",
          "text": "It looks like that was a scheme proposal"
        },
        {
          "user": "Analisa",
          "timestamp": "2017-11-28T02:10:23.000107",
          "text": "Also this\n<https://srfi.schemers.org/srfi-110/srfi-110.html>"
        },
        {
          "user": "Analisa",
          "timestamp": "2017-11-28T02:10:50.000171",
          "text": "where have I seen infix curly brace notation :thinking_face:"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T02:14:21.000211",
          "text": "Hmm most results look more readable in srfi 110"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T02:14:24.000082",
          "text": "Some are mixed results"
        },
        {
          "user": "Analisa",
          "timestamp": "2017-11-28T02:18:02.000262",
          "text": "My biggest issue is when switching back to a lisp after writing in languages with more typical syntax"
        },
        {
          "user": "Analisa",
          "timestamp": "2017-11-28T02:18:46.000259",
          "text": "Like earlier today, when I mixed up `(&lt;= 1)` and `(lambda [x] (&lt;= x 1))`, because Hackett's partial applications look like Haskell's operator sections"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T17:44:41.000252",
          "text": "Is the vector basically what I'm thinking of reaching for when I'm looking for a multidimensional array?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T17:52:29.000262",
          "text": "It seems to have awkward access syntax"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-28T17:53:53.000313",
          "text": "<@Ida> vectors are one dimensional arrays"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-28T17:54:05.000269",
          "text": "the `math/array` library has multi-dimensional arrays"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T17:57:04.000432",
          "text": "Oh I see, I'm surprised it would be tucked there and not somewhere more general"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-28T19:35:43.000147",
          "text": "<https://docs.racket-lang.org/sweet/index.html>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T20:12:29.000093",
          "text": "Is the best way to do an immediately-invoked procedure just to wrap a lambda with more parens?"
        }
      ]
    },
    {
      "conversation_id": "498",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Why would you want an immediately-invoked procedure?\nIda: I wanted to use a lambda right away for its results\nIda: I suppose that's a code smell and I should just define the function somewhere else?\nKimbery: I just don’t understand why you would wrap your code in a lambda if you wanted to evaluate it immediately.\nKimbery: That is, if you had [CODE], why wouldn’t you just write [CODE], instead?\nIda: What if you wanted a lambda that takes an input?\nKimbery: Then you should probably use [CODE] or an internal [CODE].\nKimbery: That is, instead of [CODE], write [CODE].\nIda: ah that is clearer\nIda: that almost makes let look like lambda too\nKimbery: Indeed, you can implement [CODE] as a macro in terms of [CODE].\nKimbery: Many blocks also accept internal definitions, so you could write [CODE_BLOCK] instead.\nIda: thanks!",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 13,
        "duration_minutes": 13.45,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-11-28T20:21:22.000273",
          "text": "Why would you want an immediately-invoked procedure?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T20:24:34.000242",
          "text": "I wanted to use a lambda right away for its results"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T20:29:00.000114",
          "text": "I suppose that's a code smell and I should just define the function somewhere else?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-28T20:29:31.000227",
          "text": "I just don’t understand why you would wrap your code in a lambda if you wanted to evaluate it immediately."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-28T20:29:53.000053",
          "text": "That is, if you had `((lambda () (+ 1 2)))`, why wouldn’t you just write `(+ 1 2)`, instead?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T20:30:47.000052",
          "text": "What if you wanted a lambda that takes an input?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-28T20:31:08.000171",
          "text": "Then you should probably use `let` or an internal `define`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-28T20:31:45.000161",
          "text": "That is, instead of `((lambda (x) (+ x 2)) 3)`, write `(let ([x 3]) (+ x 2))`."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T20:31:55.000265",
          "text": "ah that is clearer"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T20:32:05.000215",
          "text": "that almost makes let look like lambda too"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-28T20:32:25.000195",
          "text": "Indeed, you can implement `let` as a macro in terms of `lambda`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-28T20:32:49.000006",
          "text": "Many blocks also accept internal definitions, so you could write\n```\n(let ()\n  (define x 3)\n  (+ x 2))\n```\ninstead."
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-28T20:34:49.000220",
          "text": "thanks!"
        }
      ]
    },
    {
      "conversation_id": "499",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: Is there a way to get non-buffered keyboard input from a console window in racket? I basically want behavior identical to [CODE] from [CODE] (<[URL] but without the viewport. I.e., the console window should block and wait for the next keypress it detects.\nJalisa: This browser is neat <[URL]\nGeorgeanna: Jalisa I’ve been seeing that on /r/lisp… seems very early… do you actually use it?\nJalisa: Georgeanna I’ve not had a chance to try it yet. And yes, I think the project is fairly new. But I thought it was interesting because I don’t think there’s many browsers that work in the way programmers do.\nCorey: <[URL] This package of mine has failing tests -- but IIUC they fail because the EchoNest API no longer exists due to Spotify gobbling them up and shutting it down some years ago. Should I just delete the package? On the one hand that seems harsh. But on the other hand I'm pretty sure anything depending on it has been broken a long time anyway and I can't fix it. Suggestions? (Racket package system is new enough I don't think there's much precedent for this?)\nLatarsha: I think deleting it seems unnecssary -- the code might be interesting to someone\nCorey: I could push a commit that disables the tests and updates the README\nCorey: Also on GitHub I could use their newfangled \"archive\" thing to signal it's end-of-life\nLatarsha: that's what I think makes sense\nJacob: nEXT looks quite interesting, I'm unclear on whether it's capable of executing Javascript? I noticed that there's no mention of any security features which makes me rather concerned. Web browsing is one of the most hazardous computer activity one can do today. The manual is lacking in additional details unfortunately but still it looks really cool.\nCorey: OK thanks for the advice!\nGeorgeanna: archive? huh\nCorey: Georgeanna <[URL]\nGeorgeanna: cool. thanks. That’ll probably help me. I have a ton of repos\nGeorgeanna: they’ve been rolling out a number of new features. I got tagged on one of the security alerts (for something that should be archived)\nGeorgeanna: aaaand now I wish there was a tool to archive all my projects based on last commit date or somesuch.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 16,
        "duration_minutes": 1094.35,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "should",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Delmy",
          "Georgeanna",
          "Jacob",
          "Jalisa",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-11-28T23:00:41.000234",
          "text": "Is there a way to get non-buffered keyboard input from a console window in racket? I basically want behavior identical to `get-key-press` from `graphics/graphics` (<https://docs.racket-lang.org/graphics/Keyboard_Operations.html#%28def._%28%28lib._graphics%2Fgraphics..rkt%29._get-key-press%29%29>), but without the viewport. I.e., the console window should block and wait for the next keypress it detects."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-29T00:06:50.000023",
          "text": "This browser is neat <https://github.com/nEXT-Browser/nEXT>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-29T16:11:37.000439",
          "text": "<@Jalisa> I’ve been seeing that on /r/lisp… seems very early… do you actually use it?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-29T16:33:31.000174",
          "text": "<@Georgeanna> I’ve not had a chance to try it yet. And yes, I think the project is fairly new. But I thought it was interesting because I don’t think there’s many browsers that work in the way programmers do."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-29T16:47:26.000777",
          "text": "<https://pkgs.racket-lang.org/package/echonest>\nThis package of mine has failing tests -- but IIUC they fail because the EchoNest API no longer exists due to Spotify gobbling them up and shutting it down some years ago.\nShould I just delete the package?\nOn the one hand that seems harsh. But on the other hand I'm pretty sure anything depending on it has been broken a long time anyway and I can't fix it.\nSuggestions?  (Racket package system is new enough I don't think there's much precedent for this?)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T16:48:02.000280",
          "text": "I think deleting it seems unnecssary -- the code might be interesting to someone"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-29T16:48:33.000441",
          "text": "I could push a commit that disables the tests and updates the README"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-29T16:48:55.000483",
          "text": "Also on GitHub I could use their newfangled \"archive\" thing to signal it's end-of-life"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T16:49:25.000603",
          "text": "that's what I think makes sense"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-11-29T16:50:15.000125",
          "text": "nEXT looks quite interesting, I'm unclear on whether it's capable of executing Javascript? I noticed that there's no mention of any security features which makes me rather concerned. Web browsing is one of the most hazardous computer activity one can do today. The manual is lacking in additional details unfortunately but still it looks really cool."
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-29T16:50:15.000278",
          "text": "OK thanks for the advice!"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-29T16:51:17.000247",
          "text": "archive? huh"
        },
        {
          "user": "Corey",
          "timestamp": "2017-11-29T16:52:23.000015",
          "text": "<@Georgeanna> <https://github.com/blog/2460-archiving-repositories>"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-29T16:53:27.000607",
          "text": "cool. thanks. That’ll probably help me. I have a ton of repos"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-29T16:55:23.000953",
          "text": "they’ve been rolling out a number of new features. I got tagged on one of the security alerts (for something that should be archived)"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-29T17:15:02.000452",
          "text": "aaaand now I wish there was a tool to archive all my projects based on last commit date or somesuch."
        }
      ]
    },
    {
      "conversation_id": "500",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: Latarsha I think this PR got missed in the 6.11 release: <[URL]\nChantelle: nothing's broken, but I think the [CODE] package now isn't locked to release catalogs. Or maybe it is? I'm not sure how the [CODE] package interacts with transitive dependencies\nEun: Chantelle: If rackunit-typed is transitively depended on by something in the main-distribution, then its repo will be in the release catalog.\nLatarsha: I merged the PR anyway",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 760.1,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Eun",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-11-28T23:20:11.000089",
          "text": "<@Latarsha> I think this PR got missed in the 6.11 release: <https://github.com/racket/main-distribution/pull/1>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-28T23:21:44.000023",
          "text": "nothing's broken, but I think the `rackunit-typed` package now isn't locked to release catalogs. Or maybe it is? I'm not sure how the `main-distribution` package interacts with transitive dependencies"
        },
        {
          "user": "Eun",
          "timestamp": "2017-11-29T11:56:58.000084",
          "text": "<@Chantelle>: If rackunit-typed is transitively depended on by something in the main-distribution, then its repo will be in the release catalog."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T12:00:17.000055",
          "text": "I merged the PR anyway"
        }
      ]
    },
    {
      "conversation_id": "501",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: once it develops enough features, it will become an editor\nIda: ^_~\nGeorgeanna: but of course\nIda: this is probably silly, but what do you people think about curried named arguments?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 2.5,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Ida"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-29T16:13:26.000357",
          "text": "once it develops enough features, it will become an editor"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T16:13:29.000407",
          "text": "^_~"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-29T16:13:53.000091",
          "text": "but of course"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T16:15:56.000703",
          "text": "this is probably silly, but what do you people think about curried named arguments?"
        }
      ]
    },
    {
      "conversation_id": "502",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: i'm surprised that searching for keyworded currying turns up so little\nIda: i guess people prefer index locations to names\nIda: but it also allows easier insertion of arguments in an order-free manner\nChantelle: Ida curried named arguments sound a bit odd, but not totally unreasonable - I encourage you to make an [CODE] macro exploring the possibility :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 12.07,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ida"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-29T18:15:43.000395",
          "text": "i'm surprised that searching for keyworded currying turns up so little"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T18:16:25.000182",
          "text": "i guess people prefer index locations to names"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T18:16:46.000167",
          "text": "but it also allows easier insertion of arguments in an order-free manner"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-29T18:27:47.000349",
          "text": "<@Ida> curried named arguments sound a bit odd, but not totally unreasonable - I encourage you to make an `#%app` macro exploring the possibility :)"
        }
      ]
    },
    {
      "conversation_id": "503",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: I think curry already does that, actually\nKimbery: It doesn’t [CODE_BLOCK] but it could.\nKimbery: Interestingly, you _are_ allowed to provide keyword arguments to [CODE] if you do it as part of the initial application. However, it’s pretty broken, and it does weird things.\nDelmy: Kimbery I think this does what you want regarding keyword args <[URL]\nKimbery: Like this, for example: [CODE_BLOCK]\nKimbery: Delmy As the docs mention, that has much more of a partial application feel than a currying feel. To be consistent with [CODE], it would need to support something like this: [CODE_BLOCK]\nKimbery: (Of course, “currying” means a very specific thing, and [CODE] is really closer to auto-[CODE]. But whatever.)\nDelmy: Heh, I wasn't aware of the difference until you pointed it out. It's strange that a util exits for one, but not both.\nKimbery: I think [CODE] is essentially broken in the presence of keyword arguments. The fact that [CODE] doesn’t apply the function means it doesn’t really work.\nKimbery: That’s a bug, though, going by the documentation… it should probably be fixed.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 10,
        "duration_minutes": 14.65,
        "contains_question": false,
        "action_keywords": [
          "fix",
          "need to",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T19:25:34.000312",
          "text": "I think curry already does that, actually"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-29T19:27:13.000206",
          "text": "It doesn’t\n```\nWelcome to Racket v6.11.0.2.\n&gt; (define (f #:x x #:y y) (cons x y))\n&gt; ((curry f) #:x 3)\n; application: procedure does not accept keyword arguments\n;   procedure: curried\n; [,bt for context]\n```\nbut it could."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-29T19:29:30.000282",
          "text": "Interestingly, you _are_ allowed to provide keyword arguments to `curry` if you do it as part of the initial application. However, it’s pretty broken, and it does weird things."
        },
        {
          "user": "Delmy",
          "timestamp": "2017-11-29T19:29:41.000288",
          "text": "<@Kimbery> I think this does what you want regarding keyword args <https://docs.racket-lang.org/kw-utils/Partial_application_with_keywords.html>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-29T19:29:55.000005",
          "text": "Like this, for example:\n```\n&gt; (define (g #:x x #:y y z) (list x y z))\n&gt; (curry g #:x 3 #:y 5)\n#&lt;procedure:curried&gt;\n&gt; ((curry g #:x 3 #:y 5) 7)\n#&lt;procedure:curried&gt;\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-29T19:31:54.000152",
          "text": "<@Delmy> As the docs mention, that has much more of a partial application feel than a currying feel. To be consistent with `curry`, it would need to support something like this:\n```\n&gt; ((((curry (lambda (#:x x #:y y #:z z) (list x y z))) #:y 2) #:x 1) #:z 3)\n'(1 2 3)\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-29T19:35:50.000095",
          "text": "(Of course, “currying” means a very specific thing, and `curry` is really closer to auto-`partial`. But whatever.)"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-11-29T19:35:51.000221",
          "text": "Heh, I wasn't aware of the difference until you pointed it out. It's strange that a util exits for one, but not both."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-29T19:39:48.000060",
          "text": "I think `curry` is essentially broken in the presence of keyword arguments. The fact that `((curry (lambda (x #:k k) (cons x k)) #:k 2) 1)` doesn’t apply the function means it doesn’t really work."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-11-29T19:40:13.000152",
          "text": "That’s a bug, though, going by the documentation… it should probably be fixed."
        }
      ]
    },
    {
      "conversation_id": "504",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: I dooo wish I could write my own, but I'm going to get better at the basics first\nIda: I find that I'm often using directional, sequential methods even on non-sequential data\nIda: It's very tempting to shove everything into lists\nLatarsha: Vincenzo what's the best way to debug a macro that was broken by the set-of-scopes expander?\nIda: How does one see the code behind a standard Racket function?\nLatarsha: Ida it depends if they're implemented in the runtime or in a library, but for most, right click in drracket and go to the definition\nIda: You mean where it brings you to the Docs?\nLatarsha: no\nIda: Oh thanks I found it\nJalisa: Anyone using macOS High Sierra might want to update ASAP. There's a security concern that allows login using the username [CODE] with no password. This happens to occur remotely as well.\nJalisa: Thought it was maybe a hoax until I saw this: <[URL]\nIda: It's amusing because the general sysadmin advice is not to set a root pw",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 12,
        "duration_minutes": 42.62,
        "contains_question": true,
        "action_keywords": [
          "implement",
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Jalisa",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-29T20:11:12.000259",
          "text": "I dooo wish I could write my own, but I'm going to get better at the basics first"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T20:14:32.000022",
          "text": "I find that I'm often using directional, sequential methods even on non-sequential data"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T20:14:54.000007",
          "text": "It's very tempting to shove everything into lists"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T20:18:22.000130",
          "text": "<@Vincenzo> what's the best way to debug a macro that was broken by the set-of-scopes expander?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T20:30:24.000010",
          "text": "How does one see the code behind a standard Racket function?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T20:31:26.000237",
          "text": "<@Ida> it depends if they're implemented in the runtime or in a library, but for most, right click in drracket and go to the definition"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T20:32:13.000268",
          "text": "You mean where it brings you to the Docs?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T20:32:27.000302",
          "text": "no"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T20:32:59.000064",
          "text": "Oh thanks I found it"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-29T20:44:26.000148",
          "text": "Anyone using macOS High Sierra might want to update ASAP. There's a security concern that allows login using the username `root` with no password. This happens to occur remotely as well."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-29T20:45:21.000117",
          "text": "Thought it was maybe a hoax until I saw this:\n\n<https://i.imgur.com/4sJsDiV.png>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T20:53:49.000218",
          "text": "It's amusing because the general sysadmin advice is not to set a root pw"
        }
      ]
    },
    {
      "conversation_id": "505",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: What small mini app do Racketers make as a stepping stone of progress?\nLatarsha: a programming language :wink:\nIda: ahhhhh\nChantelle: Latarsha Ida if pressing f1 opens the docs for a definition, maybe f2 should open the source\nChantelle: seems like a useful and easily taught shortcut\nJalisa: Ida have you seen <[URL]\nIda: Yes it's a beautiful website\nIda: I find it a little... episodic?\nIda: It jumps around and has funny gaps\nJalisa: I think this one comes out in a day <[URL]\nIda: oh quite exciting\nIda: you are on top of every bit of news",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 12,
        "duration_minutes": 85.52,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ida",
          "Jalisa",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-29T22:18:15.000223",
          "text": "What small mini app do Racketers make as a stepping stone of progress?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-29T22:21:37.000221",
          "text": "a programming language :wink:"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T22:23:51.000229",
          "text": "ahhhhh"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-29T22:36:05.000182",
          "text": "<@Latarsha> <@Ida> if pressing f1 opens the docs for a definition, maybe f2 should open the source"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-11-29T22:36:11.000011",
          "text": "seems like a useful and easily taught shortcut"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-29T23:34:01.000166",
          "text": "<@Ida> have you seen <https://beautifulracket.com/>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T23:35:51.000144",
          "text": "Yes it's a beautiful website"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T23:35:56.000030",
          "text": "I find it a little... episodic?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T23:36:00.000011",
          "text": "It jumps around and has funny gaps"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-11-29T23:41:16.000031",
          "text": "I think this one comes out in a day <http://serverracket.com/>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T23:43:42.000035",
          "text": "oh quite exciting"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-29T23:43:46.000095",
          "text": "you are on top of every bit of news"
        }
      ]
    },
    {
      "conversation_id": "506",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: I don't think I have any special strategies, although I typically use [CODE] to check scopes and get a sense of what's going on",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-11-30T09:38:46.000132",
          "text": "I don't think I have any special strategies, although I typically use `syntax-debug-info` to check scopes and get a sense of what's going on"
        }
      ]
    },
    {
      "conversation_id": "507",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tammera: Hi everyone, I just saw a tweet about the PhD application deadline at NEU PRL in about 2 weeks.\nTammera: I want to apply and was hoping to get some insight into the college before committing.\nTammera: My background is very technical -- math and CS -- but my interests and strengths seem to fall at the intersection of technical and non-technical.\nTammera: My Masters project applied results from sociology and political science to designing, building, and operating scalable ad hoc decentralized systems.\nTammera: My advisor was supportive, but could not get involved. He did not share my research interests and had PhD students to manage.\nTammera: Would I run into similar obstacles at NEU, particularly in the PRL?\nLatarsha: Tammera I would encourage you to contact people specifically that you might be interested in working with there\nTammera: Latarsha ok, thanks.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 43.45,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Tammera"
        ]
      },
      "timeline": [
        {
          "user": "Tammera",
          "timestamp": "2017-11-30T11:33:07.000399",
          "text": "Hi everyone, I just saw a tweet about the PhD application deadline at NEU PRL in about 2 weeks."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-11-30T11:34:46.000326",
          "text": "I want to apply and was hoping to get some insight into the college before committing."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-11-30T11:39:29.000572",
          "text": "My background is very technical -- math and CS -- but my interests and strengths seem to fall at the intersection of technical and non-technical."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-11-30T11:43:52.000023",
          "text": "My Masters project applied results from sociology and political science to designing, building, and operating scalable ad hoc decentralized systems."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-11-30T11:47:04.000392",
          "text": "My advisor was supportive, but could not get involved. He did not share my research interests and had PhD students to manage."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-11-30T11:47:27.000383",
          "text": "Would I run into similar obstacles at NEU, particularly in the PRL?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T12:06:33.000334",
          "text": "<@Tammera> I would encourage you to contact people specifically that you might be interested in working with there"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-11-30T12:16:34.000788",
          "text": "<@Latarsha> ok, thanks."
        }
      ]
    },
    {
      "conversation_id": "508",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Does anyone here use / prefer typed Racket?\nNelson: use\nIda: ah I just read it seems not to perform well with the rest of the ecosystem\nIda: that is unfortunate\nGeorgeanna: Ida dunno if the videos for oopsla/splash are up yet, but Latarsha gave a good talk on that\nGeorgeanna: (and a couple other related talks)\nLatarsha: It does, in many cases, perform just fine\nLatarsha: Some times you'll have to move an extra module to typed racket\nLatarsha: And that talk is already up on YouTube",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 9,
        "duration_minutes": 65.67,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Georgeanna",
          "Ida",
          "Latarsha",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-11-30T18:04:57.000023",
          "text": "Does anyone here use / prefer typed Racket?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-11-30T18:07:57.000523",
          "text": "use"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-30T18:51:42.000038",
          "text": "ah I just read it seems not to perform well with the rest of the ecosystem"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-30T18:51:43.000380",
          "text": "that is unfortunate"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-30T19:06:36.000551",
          "text": "<@Ida> dunno if the videos for oopsla/splash are up yet, but <@Latarsha> gave a good talk on that"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-11-30T19:06:45.000133",
          "text": "(and a couple other related talks)"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T19:09:14.000482",
          "text": "It does, in many cases, perform just fine"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T19:10:08.000048",
          "text": "Some times you'll have to move an extra module to typed racket"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T19:10:37.000288",
          "text": "And that talk is already up on YouTube"
        }
      ]
    },
    {
      "conversation_id": "509",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: Heard about this from a podcast (Magic Read Along) today. It's a web-based IDE inspired by, and geared towards Haskell, Lisp/Racket, Scala, etc. <[URL]\nIda: I heard about an interesting kind of compose that takes a kind of function like map or filter, and doesn't produce the intermediate data structures\nIda: I wonder if Racket does those kinds of optimizations under the hood\nLatarsha: Ida that's usually called \"deforestation\" or \"stream fusion\"\nLatarsha: and Racket doesn't do that automatically\nIda: ah I see, so it's beneficial to write one\nLatarsha: (it's quite hard unless your language is like Haskell -- lazy and pure)\nIda: I'm surprised to see that talk of this idea is like over 10 years old\nLatarsha: yeah, it's quite old in functional languages, probably older when considering arrays\nLatarsha: the first paper on deforestation was written 30 years ago\nLatarsha: other papers on related topics are older",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 11,
        "duration_minutes": 134.0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Jalisa",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-11-30T19:56:46.000144",
          "text": "Heard about this from a podcast (Magic Read Along) today. It's a web-based IDE inspired by, and geared towards Haskell, Lisp/Racket, Scala, etc.\n\n<https://isomorf.io/#!/syntax-picker/tours-overview>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-30T22:04:52.000006",
          "text": "I heard about an interesting kind of compose that takes a kind of function like map or filter, and doesn't produce the intermediate data structures"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-30T22:06:18.000186",
          "text": "I wonder if Racket does those kinds of optimizations under the hood"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T22:07:08.000001",
          "text": "<@Ida> that's usually called \"deforestation\" or \"stream fusion\""
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T22:07:16.000045",
          "text": "and Racket doesn't do that automatically"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-30T22:07:22.000135",
          "text": "ah I see, so it's beneficial to write one"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T22:07:37.000011",
          "text": "(it's quite hard unless your language is like Haskell -- lazy and pure)"
        },
        {
          "user": "Ida",
          "timestamp": "2017-11-30T22:07:40.000005",
          "text": "I'm surprised to see that talk of this idea is like over 10 years old"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T22:08:07.000180",
          "text": "yeah, it's quite old in functional languages, probably older when considering arrays"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T22:09:00.000048",
          "text": "the first paper on deforestation was written 30 years ago"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-11-30T22:10:46.000056",
          "text": "other papers on related topics are older"
        }
      ]
    },
    {
      "conversation_id": "510",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Alla: Hello all :wave::skin-tone-5: Where is the best place to find help for slideshow?\nNelson: right here\nAlla: Good :blush:. Let's start with the easy one. How do I move the presentation to the second screen? I used it yesterday for a dry run , and couldn't make it move to the proyector screen, so ended mirroring the display (which meant couldn't have the comments and the next slide views available)\nAlla: Aaaah, found the -M switch. Found even the -h switch that now seems stupid I didn't think about it yesterday. Probably that should be in the tutorial.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 205.08,
        "contains_question": true,
        "action_keywords": [
          "let's",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Alla",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Alla",
          "timestamp": "2017-12-01T01:47:31.000108",
          "text": "Hello all :wave::skin-tone-5: Where is the best place to find help for slideshow?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-12-01T01:52:17.000006",
          "text": "right here"
        },
        {
          "user": "Alla",
          "timestamp": "2017-12-01T02:12:39.000167",
          "text": "Good :blush:. Let's start with the easy one. How do I move the presentation to the second screen? I used it yesterday for a dry run , and couldn't make it move to the proyector screen, so ended mirroring the display (which meant couldn't have the comments and the next slide views available)"
        },
        {
          "user": "Alla",
          "timestamp": "2017-12-01T05:12:36.000209",
          "text": " Aaaah, found the -M switch. Found even the -h switch that now seems stupid I didn't think about it yesterday. Probably that should be in the tutorial."
        }
      ]
    },
    {
      "conversation_id": "511",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ka: that reminds me, Nelson any update on my PR (<[URL]\nNelson: It still looks good to me, lets merge it\nNelson: do you want to squash any of the commits?",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 3.88,
        "contains_question": true,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Ka",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ka",
          "timestamp": "2017-12-01T14:34:58.000206",
          "text": "that reminds me, <@Nelson> any update on my PR (<https://github.com/racket/slideshow/pull/11>)"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-12-01T14:38:26.000768",
          "text": "It still looks good to me, lets merge it"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-12-01T14:38:51.000542",
          "text": "do you want to squash any of the commits?"
        }
      ]
    },
    {
      "conversation_id": "512",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Is there any good way to learn about the mechanics of [CODE] or the label phase in general? Namely, I’m wondering what scribble actually gets out of using the macro expander to build hyperlinks.\nRosalee: (As opposed to just using the bindings at, say, phase 0.)\nIda: Does anyone jot down their thoughts in a Jupyter-like notebook solution?\nChantelle: Rosalee I think scribble's use of the label phase was because submodules didn't exist yet, and if they did scribble would have used them instead\nRosalee: Chantelle That was Noe and I first thought. But there seems to be some major differences here.\nRosalee: Like, 1. phases allow for an interleaved execution that submodules just don’t.\nRosalee: And 2. It seems like the label phase is the only way in Racket to declare a module (and possibly visit it) while getting the bindings statically without instantiating it.\nRosalee: Also, this combination of features confuses me: <[URL]\nRosalee: Like, why on earth does begin-for-syntax blocks get top-level like semantics. :disappointed:\nRosalee: (Thanks to Noe for finding it.)\nVincenzo: Rosalee While a [CODE] form is being expanded at phase N, there will be no expansion of forms at level N-1, so there's no need to run code at phase N; it can be compiled as a group. As soon as you go back to expanding at level N-1 after a [CODE], expansion may involve macros that run at phase N, so the [CODE]ed code needs to have been run. That explains why the use of [CODE] in the last example can't be a macro use. At the time time, you'd really like for mutually recursive [CODE]ed functions to work, and that's why the second example compiles: the expanded/run [CODE] assumes that not-yet-bound identifiers refer to values.\nRosalee: Vincenzo That makes sense, thanks.",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 12,
        "duration_minutes": 168.13,
        "contains_question": true,
        "action_keywords": [
          "build",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Ida",
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T15:19:24.000513",
          "text": "Is there any good way to learn about the mechanics of `for-label` or the label phase in general? Namely, I’m wondering what scribble actually gets out of using the macro expander to build hyperlinks."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T15:19:40.000004",
          "text": "(As opposed to just using the bindings at, say, phase 0.)"
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-01T15:35:15.000182",
          "text": "Does anyone jot down their thoughts in a Jupyter-like notebook solution?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-01T15:42:57.000181",
          "text": "<@Rosalee> I think scribble's use of the label phase was because submodules didn't exist yet, and if they did scribble would have used them instead"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T16:01:46.000385",
          "text": "<@Chantelle> That was <@Noe> and I first thought. But there seems to be some major differences here."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T16:02:01.000443",
          "text": "Like, 1. phases allow for an interleaved execution that submodules just don’t."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T16:02:52.000280",
          "text": "And 2. It seems like the label phase is the only way in Racket to declare a module (and possibly visit it) while getting the bindings statically without instantiating it."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T16:59:50.000381",
          "text": "Also, this combination of features confuses me: <https://gist.github.com/LeifAndersen/0fe797a827db037a39a5574d1e90ada9>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T17:00:16.000478",
          "text": "Like, why on earth does begin-for-syntax blocks get top-level like semantics. :disappointed:"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T17:00:19.000117",
          "text": "(Thanks to <@Noe> for finding it.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-01T17:28:05.000338",
          "text": "<@Rosalee> While a `begin-for-syntax` form is being expanded at phase N, there will be no expansion of forms at level N-1, so there's no need to run code at phase N; it can be compiled as a group. As soon as you go back to expanding at level N-1 after a `begin-for-syntax`, expansion may involve macros that run at phase N, so the `begin-for-syntax`ed code needs to have been run. That explains why the use of `g` in the last example can't be a macro use. At the time time, you'd really like for mutually recursive `define-for-syntax`ed functions to work, and that's why the second example compiles: the expanded/run `begin-for-syntax` assumes that not-yet-bound identifiers refer to values."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-01T18:07:32.000033",
          "text": "<@Vincenzo> That makes sense, thanks."
        }
      ]
    },
    {
      "conversation_id": "513",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Vincenzo: It's true that [CODE] imports binding without setting up an invocation/visit dependency. I don't know whether submodules could achieve the same goal, but I think probably an extra ingredient of some sort is needed – and [CODE] (which I think of as phase +∞) might be as simple as any other extra ingredient.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-01T17:30:59.000241",
          "text": "It's true that `for-label` imports binding without setting up an invocation/visit dependency. I don't know whether submodules could achieve the same goal, but I think probably an extra ingredient of some sort is needed – and `for-label` (which I think of as phase +∞) might be as simple as any other extra ingredient."
        }
      ]
    },
    {
      "conversation_id": "514",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: ping Ka do you mind if I squash &amp; merge, or do you want to keep the commits separate?\nKa: Whatever you typically do is totally fine by me.\nIda: When might one reach for vectors/gvectors over arrays?\nIda: Whoa very cool\nJalisa: High Sierra has been very buggy.\nIda: You're on a macbook?\nJalisa: I have a MacBook and a Linux desktop.\nJalisa: There are times when I'd rather have a ThinkPad.\nTracy: Jalisa I had a Thinkpad 10 years ago, running Gentoo Linux. I loved it, but I spent an inordinate amount of time maintaining the OS. Probably more than working. My ex-wife used to call it “the other woman”. I wonder how convenient it is these days to set up the kernel to use up to date mobile hardware, and how tempted I would be to dive into the bleeding edge OS bandwagon.\nTracy: So far MacOS has been my antidote for OS optimisation procrastination\nJalisa: Most are using Ubuntu. It works out of the box.\nAlla: Currently using a Dell xps 13\" with Manjaro and Gnome. Other than a few apps that don't handle high dpi (like Gitter), I have had no issues. Nothing to setup in terms of drivers and such. It just works.\nIda: I've been eyeying that one\nAlla: Yep. Battery is not as good as my MacBook Air. But other than that is a superb machine. And thanks to the touchscreen I run most of the time with the touchpad off (like being in heaven). A couple of gnome extensions (no hot corner and the one that disables the on screen keyboard) are needed, but that is gnome being annoying\nJalisa: I've thought about the XPS, too.",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 15,
        "duration_minutes": 3674.42,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Alla",
          "Ida",
          "Jalisa",
          "Ka",
          "Nelson",
          "Tracy"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-12-01T21:51:39.000012",
          "text": "ping <@Ka> do you mind if I squash &amp; merge, or do you want to keep the commits separate?"
        },
        {
          "user": "Ka",
          "timestamp": "2017-12-01T21:57:00.000035",
          "text": "Whatever you typically do is totally fine by me."
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-02T12:06:41.000118",
          "text": "When might one reach for vectors/gvectors over arrays?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-02T16:57:12.000012",
          "text": "Whoa very cool"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-12-03T12:52:30.000026",
          "text": "High Sierra has been very buggy."
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-03T12:57:09.000054",
          "text": "You're on a macbook?"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-12-03T12:59:25.000058",
          "text": "I have a MacBook and a Linux desktop."
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-12-03T12:59:53.000016",
          "text": "There are times when I'd rather have a ThinkPad."
        },
        {
          "user": "Tracy",
          "timestamp": "2017-12-03T16:32:35.000087",
          "text": "<@Jalisa> I had a Thinkpad 10 years ago, running Gentoo Linux. I loved it, but I spent an inordinate amount of time maintaining the OS. Probably more than working. My ex-wife used to call it “the other woman”. I wonder how convenient it is these days to set up the kernel to use up to date mobile hardware, and how tempted I would be to dive into the bleeding edge OS bandwagon."
        },
        {
          "user": "Tracy",
          "timestamp": "2017-12-03T16:34:15.000059",
          "text": "So far MacOS has been my antidote for OS optimisation procrastination "
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-12-03T16:34:46.000042",
          "text": "Most are using Ubuntu. It works out of the box."
        },
        {
          "user": "Alla",
          "timestamp": "2017-12-04T04:23:20.000291",
          "text": "Currently using a Dell xps 13\" with Manjaro and Gnome. Other than a few apps that don't handle high dpi (like Gitter), I have had no issues. Nothing to setup in terms of drivers and such. It just works. "
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-04T04:23:46.000273",
          "text": "I've been eyeying that one"
        },
        {
          "user": "Alla",
          "timestamp": "2017-12-04T04:26:38.000398",
          "text": "Yep. Battery is not as good as my MacBook Air. But other than that is a superb machine. And thanks to the touchscreen I run most of the time with the touchpad off (like being in heaven). A couple of gnome extensions (no hot corner and the one that disables the on screen keyboard) are needed, but that is gnome being annoying"
        },
        {
          "user": "Jalisa",
          "timestamp": "2017-12-04T11:06:04.000515",
          "text": "I've thought about the XPS, too."
        }
      ]
    },
    {
      "conversation_id": "515",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Why are non-strict arrays more difficult to reason about in terms of performance?\nNelson: because it's hard to predict what an array operation will do\nNelson: you get the same result, but maybe do more work / more memory accesses to get it",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 3.55,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-12-02T11:37:54.000067",
          "text": "Why are non-strict arrays more difficult to reason about in terms of performance?"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-12-02T11:40:58.000038",
          "text": "because it's hard to predict what an array operation will do"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-12-02T11:41:27.000098",
          "text": "you get the same result, but maybe do more work / more memory accesses to get it"
        }
      ]
    },
    {
      "conversation_id": "516",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nelson: Does anyone here know Chinese? <[URL]\nNelson: I like vectors for 1-2 dimensional data",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 4.3,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Nelson"
        ]
      },
      "timeline": [
        {
          "user": "Nelson",
          "timestamp": "2017-12-02T16:04:49.000024",
          "text": "Does anyone here know Chinese? <https://github.com/OnRoadZy/RackGuideInChinese>"
        },
        {
          "user": "Nelson",
          "timestamp": "2017-12-02T16:09:07.000124",
          "text": "I like vectors for 1-2 dimensional data"
        }
      ]
    },
    {
      "conversation_id": "517",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: What does this macOS test failure mean? <[URL]\nVincenzo: Corey It looks like (1) Travis-CI has upgraded to Sierra, and (2) Apple fixed a bug in [CODE] (that Racket was working around) as of Sierra.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 28.28,
        "contains_question": true,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-12-02T18:12:26.000025",
          "text": "What does this macOS test failure mean? <https://travis-ci.org/racket/racket/jobs/310616809#L1881-L1883>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-02T18:40:43.000034",
          "text": "<@Corey> It looks like (1) Travis-CI has upgraded to Sierra, and (2) Apple fixed a bug in `setenv` (that Racket was working around) as of Sierra."
        }
      ]
    },
    {
      "conversation_id": "518",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Jalisa: I won't immediately update next time.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "update"
        ],
        "decision_keywords": [],
        "participants": [
          "Jalisa"
        ]
      },
      "timeline": [
        {
          "user": "Jalisa",
          "timestamp": "2017-12-03T12:53:01.000074",
          "text": "I won't immediately update next time."
        }
      ]
    },
    {
      "conversation_id": "519",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: ah, you're using the 4k Dell?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ida"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-12-04T04:23:39.000063",
          "text": "ah, you're using the 4k Dell?"
        }
      ]
    },
    {
      "conversation_id": "520",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rochelle: Hello, is this channel the appropriate place to ask for help?\nGenevie: Rochelle Yes.\nRochelle: So, I downloaded the minimal racket package and tried to install \"main-distribution\" packages\nRochelle: installation works fine\nRochelle: but the files are copied to some weird folder under AppData\\Roaming\nRochelle: can I just keep everything in one place?\nRochelle: is there some command line switch or environment variable\nJacob: Rochelle what happened is you installed the packages in user scope which will install to a default location on a per user basis. AppData\\Roaming is the normal place to store per user data under Windows\nRochelle: yes, I realized that\nJacob: if you want [CODE] to be saved in the same place as the main Racket installation, you need to use installation scope\nJacob: [CODE]\nRochelle: nice!\nRochelle: will try that right now\nJacob: I imagine it's probably possible to configure a different installation directory\nJacob: <[URL] has more info\nRochelle: this might be the solution: --scope-dir ‹dir› — Select ‹dir› as the package scope.\nJacob: yes that sounds right, you can supply a directory path which will cause packages to be saved to that path\nJacob: you likely will need to configure Racket to find your directory though\nRochelle: how should I setup racket?\nJacob: try <[URL] see if it has the info you need\nJacob: I'm far from a macro expert (yet) but I don't see why it'd be difficult to write a macro to do what you want. In spite of superficial similarities, '(a b c) and (list a b c) are two different things and have different shapes. '(a b c) is really (quote (a b c)). At the minimum it should be a quite simple matter of having your macro match on the two different shapes and process '(a b c) into \"a b c\" using standard string functions and return (list a b c) as a list.\nTammera: Arnetta Jacob With the default reader, [CODE] equals [CODE] equals [CODE]. I'm not sure you can tell the difference in a regular macro.\nTammera: Hey, it works.\nKimbery: Tammera that isn’t true. [CODE] does read as [CODE], but expansion stops at [CODE].\nTammera: Kimbery so in [CODE], the [CODE] part is an unexpanded list?\nKimbery: Tammera I don’t know what you mean by “unexpanded list”. consider reading this <[URL]\nTammera: Kimbery just trying to figure out what we're calling things. Still not sure how my original statement isn't true.\nKimbery: well, macros operate on syntax. so while [CODE] does indeed become [CODE] at the _reader_ level, it’s quite distinct from [CODE] at the _syntax_ level, which is the level macros operate at.\nKimbery: you could write: [CODE_BLOCK]\nTammera: ohh.. ok, I was confused about the ordering.\nTammera: thanks!\nKimbery: mhmm. the order of evaluation is read -&gt; macroexpand -&gt; compile -&gt; runtime eval. [CODE] and [CODE] do indeed evaluate to the same thing at runtime, but they are distinct expressions, so prior phases can distinguish them.\nTammera: I tried this: [CODE_BLOCK]\nTammera: and this: [CODE_BLOCK]\nKimbery: yes, [CODE] compares the expressions after evaluation (since it is just a regular function).\nKimbery: the [CODE] -&gt; [CODE] translation happens in the reader, which is before macroexpansion, so those two are indistinguishable to macros.\nTammera: just about to ask that\nKimbery: there are infinitely many distinct expressions that produce [CODE] when evaluated, so macros can’t detect (without evaluation) “an expression that evaluates to [CODE]”, since that would solve the halting problem. they can only make decisions based on the syntactic structure of their subforms.\nKimbery: yes [CODE_BLOCK] but I wouldn’t recommend it.\nShad: Because paren-shape is a syntax property that can be lost? I'm still not clear on that bit. Kimbery\nKimbery: more that (a) [CODE] should really only be modified by the provider of a [CODE] or module language, since different implementations of [CODE] do not compose and some languages may use [CODE] to enforce invariants, and (b) that macro seems a little weird and confusing.\nChantelle: I'd like it if [CODE] macros composed better\nKimbery: I don’t think they can compose in general, but you might be able to come up with a more restricted protocol that makes arbitrary composition more feasible\nChantelle: I'm comfortable with that\nChantelle: Hmmm. Should this work? Does it now? [CODE_BLOCK] How's it work with local require?\nKimbery: it doesn’t work any more than [CODE_BLOCK] does. the fun part is that it will actually get partially expanded to [CODE], so it doesn’t produce an unbound identifier error… it produces [CODE].\nChantelle: ah right that makes sense - custom app could introduce requires so partial expansion can't delay it\nChantelle: actually\nChantelle: would [CODE] change that?\nChantelle: the interactions between partial expansion, internal definitions, requires, and provides at the module body context are unclear to me\nKimbery: yes, if you wrapped it in something that deferred expansion of the form, it would produce something different! which is fun.\nChantelle: how do those rules differ between module body contexts and internal definition contexts?\nKimbery: [CODE_BLOCK] produces [CODE_BLOCK]\nChantelle: and [CODE] in a [CODE] does the same thing?\nChantelle: (... _can_ you local require syntax?)\nChantelle: (looks like it)\nKimbery: re: the differences between module contexts and intdef contexts, they’re mostly similar… but [CODE] isn’t allowed in an intdef context. I imagine [CODE] would do the same thing, though.\nKimbery: you can [CODE] syntax, just not [CODE]/[CODE] syntax (for probably obvious reasons)\nChantelle: what happens if you [CODE] a require transformer? same rules as module context?\nChantelle: right that makes sense\nKimbery: yes, require transformers are essentially just ordinary expanders that [CODE] looks up with [CODE].\nKimbery: require transformers aren’t special in any way. only provide transformers are.\nChantelle: right and [CODE] is nonsensical so there's no worries there\nChantelle: would it make sense to have some way of delaying [CODE] expansion in the same way that [CODE] delays things, so that provide transformers didn't need their importing require to be in a particular place?\nChantelle: my guess is \"probably not because complicated reasons\"\nKimbery: that’s exactly what provide transformers already do. it’s provide pre-transformers that don’t.\nKimbery: provides and provide transformers are expanded as the very last step of module expansion.\nChantelle: and it's the pre-transformers that can't for complicated reasons",
      "analysis_metadata": {
        "user_count": 7,
        "message_count": 68,
        "duration_minutes": 2948.47,
        "contains_question": true,
        "action_keywords": [
          "action",
          "fix",
          "implement",
          "need to",
          "requires",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Genevie",
          "Jacob",
          "Kimbery",
          "Rochelle",
          "Shad",
          "Tammera"
        ]
      },
      "timeline": [
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:51:14.000025",
          "text": "Hello, is this channel the appropriate place to ask for help?"
        },
        {
          "user": "Genevie",
          "timestamp": "2017-12-05T13:51:59.000082",
          "text": "<@Rochelle> Yes."
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:52:28.000283",
          "text": "So, I downloaded the minimal racket package and tried to install \"main-distribution\" packages"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:52:33.000222",
          "text": "installation works fine"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:52:47.000712",
          "text": "but the files are copied to some weird folder under AppData\\Roaming"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:52:59.000008",
          "text": "can I just keep everything in one place?"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:53:35.000287",
          "text": "is there some command line switch or environment variable"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T13:55:42.000245",
          "text": "<@Rochelle> what happened is you installed the packages in user scope which will install to a default location on a per user basis. AppData\\Roaming is the normal place to store per user data under Windows"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:55:59.000639",
          "text": "yes, I realized that"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T13:56:17.000575",
          "text": "if you want `main-distribution` to be saved in the same place as the main Racket installation, you need to use installation scope"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T13:56:53.000410",
          "text": "`raco pkg install --scope installation &lt;your package&gt;`"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:57:13.000436",
          "text": "nice!"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:57:20.000234",
          "text": "will try that right now"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T13:57:25.000525",
          "text": "I imagine it's probably possible to configure a different installation directory"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T13:57:30.000667",
          "text": "<https://docs.racket-lang.org/pkg/cmdline.html> has more info"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T13:58:23.000427",
          "text": "this might be the solution: --scope-dir ‹dir› — Select ‹dir› as the package scope."
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T13:59:04.000190",
          "text": "yes that sounds right, you can supply a directory path which will cause packages to be saved to that path"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T14:00:32.000110",
          "text": "you likely will need to configure Racket to find your directory though"
        },
        {
          "user": "Rochelle",
          "timestamp": "2017-12-05T14:11:39.000176",
          "text": "how should I setup racket?"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-05T14:36:04.000144",
          "text": "try <https://docs.racket-lang.org/raco/config-file.html> see if it has the info you need"
        },
        {
          "user": "Jacob",
          "timestamp": "2017-12-06T09:43:15.000169",
          "text": "I'm far from a macro expert (yet) but I don't see why it'd be difficult to write a macro to do what you want. In spite of superficial similarities, '(a b c) and (list a b c) are two different things and have different shapes. '(a b c) is really (quote (a b c)). At the minimum it should be a quite simple matter of having your macro match on the two different shapes and process '(a b c) into \"a b c\" using standard string functions and return (list a b c) as a list."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T12:30:24.000122",
          "text": "<@Arnetta> <@Jacob> With the default reader, `'(a b c)` equals `(quote (a b c))` equals `(list 'a 'b 'c)`. I'm not sure you can tell the difference in a regular macro."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T12:36:55.000005",
          "text": "Hey, it works."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T12:37:41.000023",
          "text": "<@Tammera> that isn’t true. `'(a b c)` does read as `(quote (a b c))`, but expansion stops at `quote`."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T12:39:46.000445",
          "text": "<@Kimbery> so in  `(quote (a b c))`, the `(a b c)` part is an unexpanded list?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T12:44:00.000333",
          "text": "<@Tammera> I don’t know what you mean by “unexpanded list”. consider reading this <https://stackoverflow.com/a/34984553/465378>"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T12:45:35.000329",
          "text": "<@Kimbery> just trying to figure out what we're calling things. Still not sure how my original statement isn't true."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T12:54:45.000189",
          "text": "well, macros operate on syntax. so while `'(a b c)` does indeed become `(quote (a b c))` at the _reader_ level, it’s quite distinct from `(list (quote a) (quote b) (quote c))` at the _syntax_ level, which is the level macros operate at."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T12:59:43.000054",
          "text": "you could write:\n```\n#lang racket\n(require (for-syntax racket) syntax/parse/define)\n(define-syntax-parser mac\n  #:literals [quote]\n  [(_ '(id:id ...)) #`(quote #,(datum-&gt;syntax #f (string-append* (map (compose1 symbol-&gt;string syntax-e) (attribute id)))))]\n  [(_ other:expr) #'other])\n```"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T13:01:41.000120",
          "text": "ohh.. ok, I was confused about the ordering."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T13:03:02.000156",
          "text": "thanks!"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T13:05:01.000209",
          "text": "mhmm. the order of evaluation is read -&gt; macroexpand -&gt; compile -&gt; runtime eval. `'(a b c)` and `(list 'a 'b 'c)` do indeed evaluate to the same thing at runtime, but they are distinct expressions, so prior phases can distinguish them."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T13:08:19.000355",
          "text": "I tried this: ```\nracket@foo.rkt&gt; \n(define-syntax f\n  (syntax-rules (list quote)\n    [(f '(a b c)) \"tick\"]\n    [(f (quote (a b c))) \"quote\"]\n    [(f (list a b c)) \"list\"]))\n\nracket@foo.rkt&gt; (f '(a b c))\n\"tick\"\nracket@foo.rkt&gt; (f (quote (a b c)))\n\"tick\"\nracket@foo.rkt&gt; (f (list 'a 'b 'c))\n\"list\"```"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T13:09:56.000366",
          "text": "and this: ```\nracket@foo.rkt&gt; (and (equal? '(a b c) (list 'a 'b 'c))\n                     (equal? '(a b c) (quote (a b c))))\n#t```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T13:10:49.000357",
          "text": "yes, `equal?` compares the expressions after evaluation (since it is just a regular function)."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T13:12:11.000348",
          "text": "the `'x` -&gt; `(quote x)` translation happens in the reader, which is before macroexpansion, so those two are indistinguishable to macros."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-06T13:12:23.000618",
          "text": "just about to ask that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-06T13:14:17.000583",
          "text": "there are infinitely many distinct expressions that produce `'(a b c)` when evaluated, so macros can’t detect (without evaluation) “an expression that evaluates to `'(a b c)`”, since that would solve the halting problem. they can only make decisions based on the syntactic structure of their subforms."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T00:36:38.000107",
          "text": "yes\n```\n#lang racket\n(require (for-syntax racket syntax/parse/class/paren-shape) syntax/parse/define (prefix-in r: racket))\n(define-syntax-parser #%app\n  [[~brackets _ i:id ...+] (datum-&gt;syntax (first (attribute i)) (string-&gt;symbol (string-join (map (compose1 symbol-&gt;string syntax-e) (attribute i)) \"-\")))]\n  [(_ other ...) #'(r:#%app other ...)])\n```\nbut I wouldn’t recommend it."
        },
        {
          "user": "Shad",
          "timestamp": "2017-12-07T14:20:24.000086",
          "text": "Because paren-shape is a syntax property that can be lost? I'm still not clear on that bit. <@Kimbery> "
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:21:49.000466",
          "text": "more that (a) `#%app` should really only be modified by the provider of a `#lang` or module language, since different implementations of `#%app` do not compose and some languages may use `#%app` to enforce invariants, and (b) that macro seems a little weird and confusing."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:24:02.000063",
          "text": "I'd like it if `#%app` macros composed better"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:25:15.000483",
          "text": "I don’t think they can compose in general, but you might be able to come up with a more restricted protocol that makes arbitrary composition more feasible"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:25:34.000216",
          "text": "I'm comfortable with that"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:31:48.000377",
          "text": "Hmmm. Should this work? Does it now?\n\n```racket\n(function-call-expression-with-special-app)\n(require-special-app)\n```\n\nHow's it work with local require?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:34:47.000140",
          "text": "it doesn’t work any more than\n```\n(my-macro)\n(require something-that-provides-my-macro)\n```\ndoes. the fun part is that it will actually get partially expanded to `(#%app my-macro)`, so it doesn’t produce an unbound identifier error… it produces `bad syntax`."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:35:49.000149",
          "text": "ah right that makes sense - custom app could introduce requires so partial expansion can't delay it"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:36:09.000168",
          "text": "actually"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:36:16.000414",
          "text": "would `#%expression` change that?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:36:51.000699",
          "text": "the interactions between partial expansion, internal definitions, requires, and provides at the module body context are unclear to me"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:39:03.000366",
          "text": "yes, if you wrapped it in something that deferred expansion of the form, it would produce something different! which is fun."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:39:38.000083",
          "text": "how do those rules differ between module body contexts and internal definition contexts?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:40:46.000377",
          "text": "```\n#lang racket\n\n(module quote-app racket\n  (require syntax/parse/define)\n  (provide #%app)\n  (define-simple-macro (#%app form ...)\n    (quote (form ...))))\n\n(+ 1 2)\n(#%expression (+ 1 2))\n(require 'quote-app)\n(+ 1 2)\n```\nproduces\n```\n3\n'(+ 1 2)\n'(+ 1 2)\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:41:20.000472",
          "text": "and `local-require` in a `(let () body ...)` does the same thing?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:41:36.000434",
          "text": "(... _can_ you local require syntax?)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:41:47.000109",
          "text": "(looks like it)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:41:49.000020",
          "text": "re: the differences between module contexts and intdef contexts, they’re mostly similar… but `require` isn’t allowed in an intdef context. I imagine `local-require` would do the same thing, though."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:42:11.000527",
          "text": "you can `local-require` syntax, just not `lazy-require`/`dynamic-require` syntax (for probably obvious reasons)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:42:22.000178",
          "text": "what happens if you `local-require` a require transformer? same rules as module context?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:42:33.000103",
          "text": "right that makes sense"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:43:25.000172",
          "text": "yes, require transformers are essentially just ordinary expanders that `require` looks up with `syntax-local-value`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:43:37.000068",
          "text": "require transformers aren’t special in any way. only provide transformers are."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:44:44.000005",
          "text": "right and `local-provide` is nonsensical so there's no worries there"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:48:16.000366",
          "text": "would it make sense to have some way of delaying `provide` expansion in the same way that `#%expression` delays things, so that provide transformers didn't need their importing require to be in a particular place?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:48:27.000113",
          "text": "my guess is \"probably not because complicated reasons\""
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:51:20.000335",
          "text": "that’s exactly what provide transformers already do. it’s provide pre-transformers that don’t."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-07T14:51:39.000015",
          "text": "provides and provide transformers are expanded as the very last step of module expansion."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T14:59:42.000415",
          "text": "and it's the pre-transformers that can't for complicated reasons"
        }
      ]
    },
    {
      "conversation_id": "521",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Vincenzo I think your recent macOS change broke the db tests on Travis: <[URL]\nVincenzo: Latarsha I think it may have broken with the same Travis Mac OS upgrade, but it failed before the envvar change: <[URL]\nLatarsha: This may have more details: <[URL] -- looks like the primary change was to xcode\nNatosha: Latarsha Vincenzo that test is meant to check that (for \"well-behaved\" connection types), long-running queries don't block the execution of other racket threads. I don't know a good way to test that directly, so it's written using heuristics that Seemed To Work At The Time.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 4,
        "duration_minutes": 761.92,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Natosha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-12-05T21:28:03.000124",
          "text": "<@Vincenzo> I think your recent macOS change broke the db tests on Travis: <https://travis-ci.org/racket/racket/jobs/310672787#L2102>"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-05T22:00:50.000240",
          "text": "<@Latarsha> I think it may have broken with the same Travis Mac OS upgrade, but it failed before the envvar change: <https://travis-ci.org/racket/racket/jobs/310616809#L2219>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-05T22:04:46.000117",
          "text": "This may have more details: <https://blog.travis-ci.com/2017-10-16-a-new-default-os-x-image-is-coming> -- looks like the primary change was to xcode"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-06T10:09:58.000090",
          "text": "<@Latarsha> <@Vincenzo> that test is meant to check that (for \"well-behaved\" connection types), long-running queries don't block the execution of other racket threads. I don't know a good way to test that directly, so it's written using heuristics that Seemed To Work At The Time."
        }
      ]
    },
    {
      "conversation_id": "522",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Arnetta: is it possible to write a macro that converts: '(a b c) to a string of \"a b c\" but (list a b c) to a list?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Arnetta"
        ]
      },
      "timeline": [
        {
          "user": "Arnetta",
          "timestamp": "2017-12-06T01:41:08.000102",
          "text": "is it possible to write a macro that converts:\n'(a b c)\nto a string of \"a b c\"\nbut\n(list a b c)\nto a list?"
        }
      ]
    },
    {
      "conversation_id": "523",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Arnetta: &lt;3Lisp\nArnetta: is it possible to write a macro so that ([function name] a b c) becomes (function-name a b c) ?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 632.08,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Arnetta"
        ]
      },
      "timeline": [
        {
          "user": "Arnetta",
          "timestamp": "2017-12-06T13:51:43.000502",
          "text": "&lt;3Lisp"
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-12-07T00:23:48.000148",
          "text": "is it possible to write a macro so that\n([function name] a b c)\nbecomes\n(function-name a b c)\n?"
        }
      ]
    },
    {
      "conversation_id": "524",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Magnolia Can you make the PPA work for some older Ubuntu versions?\nMagnolia: samth if the older versions are supported on launchpad yeah. I think it should be possible on trusty &amp; precise. Dunno why it didn’t build those actually.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 1.4,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Magnolia"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-12-07T15:24:58.000388",
          "text": "<@Magnolia> Can you make the PPA work for some older Ubuntu versions?"
        },
        {
          "user": "Magnolia",
          "timestamp": "2017-12-07T15:26:22.000188",
          "text": "@samth if the older versions are supported on launchpad yeah. I think it should be possible on trusty &amp; precise. Dunno why it didn’t build those actually."
        }
      ]
    },
    {
      "conversation_id": "525",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Is there a default suite of tools for Racket performance testing?\nChantelle: Ida not yet, but there are loose sketches and notions to work on top of if you're interested in working on that\nGeorgeanna: Ida what type do you need?\nIda: Something for easy benchmarking?\nLatarsha: Ida you might like <[URL]",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 5,
        "duration_minutes": 163.5,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Georgeanna",
          "Ida",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-12-07T19:49:14.000172",
          "text": "Is there a default suite of tools for Racket performance testing?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-07T20:08:16.000173",
          "text": "<@Ida> not yet, but there are loose sketches and notions to work on top of if you're interested in working on that"
        },
        {
          "user": "Georgeanna",
          "timestamp": "2017-12-07T20:21:45.000026",
          "text": "<@Ida> what type do you need?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-07T21:22:13.000156",
          "text": "Something for easy benchmarking?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-07T22:32:44.000134",
          "text": "<@Ida> you might like <https://github.com/stamourv/racket-benchmark>"
        }
      ]
    },
    {
      "conversation_id": "526",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: Sanity check: For multi-collection packages I've been putting the [CODE] file down in the collection directory, not in the git project top dir. Rationale? That way it gets installed. Am I doing it wrong? <[URL]\nLatarsha: There's reasons both ways, I'd say",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 0.82,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-12-08T11:00:14.000675",
          "text": "Sanity check: For multi-collection packages I've been putting the `LICENSE` file down in the collection directory, not in the git project top dir. Rationale? That way it gets installed. Am I doing it wrong? <https://github.com/greghendershott/frog/issues/205>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-08T11:01:03.000532",
          "text": "There's reasons both ways, I'd say"
        }
      ]
    },
    {
      "conversation_id": "527",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: I guess it's moot when not a multi-collection package. IIRC all of mine are multi-collect only because that was the only option originally (or I followed that template for newer ones). Any packages that don't attempt to support &lt; Racket 6.0, I guess I could change to single-collect. If/when I have time.\nTana: Currently working with the SQL package <[URL] and wondering if there is a way to add [CODE] to the [CODE] expression <[URL]\nTana: Ideally would like to create SQL such as [CODE]\nTana: otherwise need to fall back to string SQL statements\nTana: same with [CODE], would like to add [CODE]\nTana: ah found the repo, will ask there",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 2878.65,
        "contains_question": true,
        "action_keywords": [
          "create",
          "need to",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Tana"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-12-08T12:36:52.000478",
          "text": "I guess it's moot when not a multi-collection package.\nIIRC all of mine are multi-collect only because that was the only option originally (or I followed that template for newer ones).\nAny packages that don't attempt to support &lt; Racket 6.0, I guess I could change to single-collect. If/when I have time."
        },
        {
          "user": "Tana",
          "timestamp": "2017-12-10T12:26:14.000075",
          "text": "Currently working with the SQL package <http://docs.racket-lang.org/sql/index.html?q=sql> and wondering if there is a way to add `IF NOT EXISTS` to the `create-table` expression <http://docs.racket-lang.org/sql/index.html?q=sql#%28form._%28%28lib._sql%2Fmain..rkt%29._create-table%29%29>"
        },
        {
          "user": "Tana",
          "timestamp": "2017-12-10T12:26:54.000056",
          "text": "Ideally would like to create SQL such as `CREATE TABLE IF NOT EXISTS links (....)`"
        },
        {
          "user": "Tana",
          "timestamp": "2017-12-10T12:27:16.000013",
          "text": "otherwise need to fall back to string SQL statements"
        },
        {
          "user": "Tana",
          "timestamp": "2017-12-10T12:28:05.000044",
          "text": "same with `insert`, would like to add `INSERT OR IGNORE INTO links (...)`"
        },
        {
          "user": "Tana",
          "timestamp": "2017-12-10T12:35:31.000115",
          "text": "ah found the repo, will ask there"
        }
      ]
    },
    {
      "conversation_id": "528",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: dear synchronizable event experts, are these functions bad ideas: [CODE_BLOCK]\nNatosha: Chantelle yes, bad idea\nNatosha: [CODE_BLOCK]\nChantelle: Natosha for context I'm trying to use events to represent a sequence of two actions, where the first requires breaks be disabled and the second requires waiting an arbitrary amount of time\nChantelle: also: is that example equivalent to saying [CODE]? because that non-equivalence seems reasonable to me\nNatosha: Chantelle The point of events is their cooperative nature. You can [CODE] on multiple events and the first one that becomes ready is chosen (modulo scheduling granularity, etc). But your [CODE] functions construct an event that immediately captures the scheduler's attention with the inner [CODE] call, preventing any of its peers from being chosen.\nChantelle: Natosha ah so the wrappers just completely prevent the event from working together properly with [CODE]?\nChantelle: how would I go about making events that abstract over sequences of other events? or should I just not do that and use a regular thunk to represent that sort of thing?\nNatosha: if you think of [CODE] with multiple arguments as implicitly constructing a [CODE], then yes\nNatosha: I'm not clear on what you're trying to do, but it doesn't sound like the end result is an event.\nChantelle: I'm trying to figure out what the right thing to do about this issue in my [CODE] package is: <[URL]\nChantelle: but in general I'm a little unclear on when events are the Right Tool for the Job (TM) as opposed to: 1. just blocking the current thread, which is cheap since they're not OS threads 2. spawning a new thread to do something 3. using engines, maybe? 4. using promises / streams / other stuff that seems to be mostly for lazy compute instead of lazy I/O\nChantelle: is it a good idea to think of events as only the right thing to use if there's some meaningful way of applying [CODE] to choose one event and nack others? if I want to wait on a bunch of completely independent events should I just spawn one thread per event?\nNatosha: re that issue: Are you disabling breaks just to prevent interruptions between allocation and registration? If so, I think the right answer in cases like this is to disable breaks but then use [CODE] so that users can break out of waiting for the connection.\nChantelle: yes that's exactly why breaks are disabled - specifically by functions like [CODE] and [CODE] that actually use them to do stuff\nChantelle: that makes sense but I can't shake the feeling I'm doing _something_ wrong with disposables and events\nNatosha: Well, disabling breaks doesn't stop [CODE] or the thread being killed when the custodian that owns it is shut down.\nChantelle: right, which I'm fine with - disposables are for network-y things where there's no hard guarantees anyway\nChantelle: I think the thing I'm stuck on is: how do I call and wait on two functions concurrently, getting both their results, while ensuring breaks are propagated to both functions? the [CODE] function is the main thing that makes me suspect I should do something clever with events instead of what it does now, which is use [CODE] to acquire each disposable in a child thread\nChantelle: pretty sure that's broken as-is for break propagation\nNatosha: The event system cannot handle things like \"if *both* of these events are ready, then choose both and proceed\". So don't worry if you haven't found a clean way of doing that; it's hard.\nChantelle: I'm less worried about that part and more worried about avoiding accidentally serializing independent operations\nChantelle: I want disposables to make it easy to open two unrelated connections to totally different servers without starting the second connection waiting on the first connection finishing, successfully or otherwise\nChantelle: _but_ I want breaks to propogate to both \"open connection\" operations since either could take an arbitrary amount of time\nNatosha: (I was going to point you at the code for [CODE], but that seems to be implemented in C.)\nChantelle: I was looking at the docs for it but I'm unsure how that would work with calling _two_ nested threads\nNatosha: It doesn't; I was going to suggest adapting the code to multiple threads.\nChantelle: sending patches to racket's c codebase is probably not something I'm looking to do\nChantelle: both for tech and social reasons\nNatosha: You could also create a custodian for the nested threads and shut it down, but that would be escalating a break to the equivalent of [CODE]...\nChantelle: does that handle if one of the thunks raises an exception?\nNatosha: no, but that's not hard to add\nChantelle: also: it's so odd to me that nobody in 20 years of racket history has built a function with type [CODE], sync choice caveats aside\nChantelle: [CODE] gets so close to it\nLatarsha: Chantelle can't you use [CODE] to do that by syncing on the other one in the function?\nChantelle: Latarsha I can, but then the events get sequenced unnecessarily and I lose concurrency\nLatarsha: I was thinking [CODE]\nChantelle: oh that's what you mean, totally misread\nLatarsha: it might be a little tricky to figure out which one was chosen\nNatosha: consider [CODE]\nChantelle: maybe fmap-ing each with a gensym first?\nLatarsha: Natosha that's never going to work with the signature Chantelle wants\nLatarsha: so the choice will pick the channel, and then the wrap will wait forever\nNatosha: Latarsha exactly; that's why that function doesn't exist\nChantelle: but [CODE] exists\nChantelle: you get the same problem with [CODE]\nChantelle: I think\nLatarsha: no, because that's an event, not a computation\nLatarsha: so you can [CODE] on it _and_ something else\nLatarsha: instead of just waiting forever\nChantelle: Latarsha I'm confused - which things are you referring to as an event and as a computation\nLatarsha: what I suggested was more like [CODE] which is bad\nChantelle: ah, I see what you mean\nChantelle: so would using [CODE] instead of wrap/handle be a not/less bad way?\nLatarsha: I think so\nLatarsha: and you want to wrap the second evt to produce the pair\nChantelle: I'm okay with the same caveat that [CODE] has, where not choosing the returned pair event does not imply the left and right events weren't chosen\nNatosha: Let me summarize: there are some *transactions* that cannot be expressed as events. In particular, you can't express things like \"synchronize only if both events are ready\". You can synchronize on at a time, but then you risk getting stuck halfway.\nChantelle: so not all transactions can be events - but should all events be transactions? does it make sense to use events for things that aren't \"transaction-y\"? I'm only reaching for them because I don't know what else to use for doing two independent things at once, aside from the manual thread spawning and exception+break shuffling\nChantelle: it _seems_ like [CODE] implies that events have more use beyond transactions and as long as the user is aware of that, that's not necessarily a bad thing\nNatosha: Most events consist of a little transaction followed by some arbitrary Racket wrapper/handler code. But the transactional part has to be one of the things the Racket schedule can handle transactionally.\nNatosha: I'm not really sure what [CODE] is useful for.\nChantelle: it was added around 6.1 by Vincenzo in this commit: <[URL]\nLatarsha: I think this is the thread that led to it: <[URL]\nChantelle: it's weird to have [CODE], [CODE], and _not_ have some sort of [CODE] function, because [CODE] makes events a monad and [CODE] makes them a functor\nChantelle: -ish\nChantelle: a [CODE] function would be the middle-ground that makes events an applicative functor\nChantelle: cutely, I think haskell parsing libraries wanted applicatives for the same reasons I do: they let you express that things are independent and get more free concurrency/parallelism\nNatosha: To clarify: I'm not sure [CODE] actually/generally solves the class of problems that Jan and/or Matthew hoped it would solve.\nChantelle: does a sequence of transactions where individual transactions are handled transactionally by the scheduler but not the whole sequence make sense as an event?\nChantelle: that seems like the main use case of [CODE] to me\nChantelle: aha! <[URL]\nChantelle: disregarding multiple values, I think this works for what I want: [CODE_BLOCK]\nChantelle: specifically, [CODE] may result in either [CODE], [CODE], [CODE], or [CODE] being chosen for synchronization - but not all three and no event is chosen more than once\nLatarsha: Chantelle make a package!\nChantelle: Latarsha not until I make sure Vincenzo can do a code review :p\nLatarsha: make a package and then ask him :slightly_smiling_face:\nChantelle: eventually!\nVincenzo: Chantelle Looks right, except that I think you meant [CODE] instead of [CODE] in the last line of [CODE]\nChantelle: oops",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 80,
        "duration_minutes": 153.52,
        "contains_question": true,
        "action_keywords": [
          "action",
          "complete",
          "create",
          "finish",
          "implement",
          "requires",
          "review",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Latarsha",
          "Natosha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T06:55:28.000224",
          "text": "dear synchronizable event experts, are these functions bad ideas:\n\n```\n(define (unbreakable-evt evt)\n  (guard-evt (λ () (parameterize-break #f (sync evt)))))\n\n(define (breakable-evt evt)\n  (guard-evt (λ () (parameterize-break #t (sync evt)))))\n```"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:02:51.000379",
          "text": "<@Chantelle> yes, bad idea"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:03:31.000386",
          "text": "```(sync (unbreakable-evt evt1) evt2)\n-&gt; (sync (parameterize-break #f (sync evt1)) evt2)\n!= (parameterize-break #f (sync evt1 evt2))```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:05:16.000402",
          "text": "<@Natosha> for context I'm trying to use events to represent a sequence of two actions, where the first requires breaks be disabled and the second requires waiting an arbitrary amount of time"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:06:44.000154",
          "text": "also: is that example equivalent to saying `(choice-evt (unbreakable-evt e1) e2) != (unbreakable-evt (choice-evt e1 e2))`? because that non-equivalence seems reasonable to me"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:14:05.000398",
          "text": "<@Chantelle> The point of events is their cooperative nature. You can `sync` on multiple events and the first one that becomes ready is chosen (modulo scheduling granularity, etc). But your `[un]breakable-evt` functions construct an event that immediately captures the scheduler's attention with the inner `sync` call, preventing any of its peers from being chosen."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:16:58.000121",
          "text": "<@Natosha> ah so the wrappers just completely prevent the event from working together properly with `choice-evt`?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:17:26.000322",
          "text": "how would I go about making events that abstract over sequences of other events? or should I just not do that and use a regular thunk to represent that sort of thing?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:17:28.000245",
          "text": "if you think of `sync` with multiple arguments as implicitly constructing a `choice-evt`, then yes"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:20:13.000255",
          "text": "I'm not clear on what you're trying to do, but it doesn't sound like the end result is an event."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:20:43.000052",
          "text": "I'm trying to figure out what the right thing to do about this issue in my `disposable` package is: <https://github.com/jackfirth/racket-disposable/issues/114>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:23:39.000280",
          "text": "but in general I'm a little unclear on when events are the Right Tool for the Job (TM) as opposed to:\n\n1. just blocking the current thread, which is cheap since they're not OS threads\n2. spawning a new thread to do something\n3. using engines, maybe?\n4. using promises / streams / other stuff that seems to be mostly for lazy compute instead of lazy I/O"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:26:05.000228",
          "text": "is it a good idea to think of events as only the right thing to use if there's some meaningful way of applying `choice-evt` to choose one event and nack others? if I want to wait on a bunch of completely independent events should I just spawn one thread per event?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:32:33.000205",
          "text": "re that issue: Are you disabling breaks just to prevent interruptions between allocation and registration? If so, I think the right answer in cases like this is to disable breaks but then use `tcp-accept/enable-break` so that users can break out of waiting for the connection."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:33:31.000260",
          "text": "yes that's exactly why breaks are disabled - specifically by functions like `call/disposable` and `acquire-global` that actually use them to do stuff"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:34:19.000164",
          "text": "that makes sense but I can't shake the feeling I'm doing _something_ wrong with disposables and events"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:40:33.000131",
          "text": "Well, disabling breaks doesn't stop `kill-thread` or the thread being killed when the custodian that owns it is shut down."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:41:22.000297",
          "text": "right, which I'm fine with - disposables are for network-y things where there's no hard guarantees anyway"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:45:01.000040",
          "text": "I think the thing I'm stuck on is: how do I call and wait on two functions concurrently, getting both their results, while ensuring breaks are propagated to both functions? the `disposable-apply` function is the main thing that makes me suspect I should do something clever with events instead of what it does now, which is use `delay/thread` to acquire each disposable in a child thread"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:45:30.000153",
          "text": "pretty sure that's broken as-is for break propagation"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:51:25.000300",
          "text": "The event system cannot handle things like \"if *both* of these events are ready, then choose both and proceed\". So don't worry if you haven't found a clean way of doing that; it's hard."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:53:01.000156",
          "text": "I'm less worried about that part and more worried about avoiding accidentally serializing independent operations"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:54:31.000415",
          "text": "I want disposables to make it easy to open two unrelated connections to totally different servers without starting the second connection waiting on the first connection finishing, successfully or otherwise"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T07:55:34.000185",
          "text": "_but_ I want breaks to propogate to both \"open connection\" operations since either could take an arbitrary amount of time"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T07:59:41.000484",
          "text": "(I was going to point you at the code for `call-in-nested-thread`, but that seems to be implemented in C.)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:00:09.000641",
          "text": "I was looking at the docs for it but I'm unsure how that would work with calling _two_ nested threads"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:05:58.000245",
          "text": "It doesn't; I was going to suggest adapting the code to multiple threads."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:07:23.000308",
          "text": "sending patches to racket's c codebase is probably not something I'm looking to do"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:07:33.000264",
          "text": "both for tech and social reasons"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:19:00.000127",
          "text": "You could also create a custodian for the nested threads and shut it down, but that would be escalating a break to the equivalent of `kill-thread`..."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:23:50.000246",
          "text": "does that handle if one of the thunks raises an exception?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:24:34.000548",
          "text": "no, but that's not hard to add"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:25:18.000155",
          "text": "also: it's so odd to me that nobody in 20 years of racket history has built a function with type `Evt a -&gt; Evt b -&gt; Evt (a, b)`, sync choice caveats aside"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:26:30.000002",
          "text": "`replace-evt` gets so close to it"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:30:40.000221",
          "text": "<@Chantelle> can't you use `handle-evt` to do that by syncing on the other one in the function?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:31:04.000281",
          "text": "<@Latarsha> I can, but then the events get sequenced unnecessarily and I lose concurrency"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:31:28.000221",
          "text": "I was thinking `(handle-evt (choice-evt a b) ...)`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:32:46.000233",
          "text": "oh that's what you mean, totally misread"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:33:17.000102",
          "text": "it might be a little tricky to figure out which one was chosen"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:33:17.000321",
          "text": "consider `(both-evt some-channel never-evt)`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:33:32.000005",
          "text": "maybe fmap-ing each with a gensym first?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:33:45.000016",
          "text": "<@Natosha> that's never going to work with the signature <@Chantelle> wants"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:34:11.000017",
          "text": "so the choice will pick the channel, and then the wrap will wait forever"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:34:39.000023",
          "text": "<@Latarsha> exactly; that's why that function doesn't exist"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:35:05.000500",
          "text": "but `replace-evt` exists"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:35:25.000311",
          "text": "you get the same problem with `(replace-evt some-channel (const never-evt))`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:35:41.000402",
          "text": "I think"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:35:43.000355",
          "text": "no, because that's an event, not a computation"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:35:53.000162",
          "text": "so you can `sync` on it _and_ something else"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:35:59.000177",
          "text": "instead of just waiting forever"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:36:49.000412",
          "text": "<@Latarsha> I'm confused - which things are you referring to as an event and as a computation"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:37:29.000035",
          "text": "what I suggested was more like `(replace-evt some-channel (lambda _ (sync never-evt)))` which is bad"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:38:16.000185",
          "text": "ah, I see what you mean"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:38:22.000232",
          "text": "so would using `replace-evt` instead of wrap/handle be a not/less bad way?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:38:37.000094",
          "text": "I think so"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:39:00.000233",
          "text": "and you want to wrap the second evt to produce the pair"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:39:06.000257",
          "text": "I'm okay with the same caveat that `replace-evt` has, where not choosing the returned pair event does not imply the left and right events weren't chosen"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:40:10.000360",
          "text": "Let me summarize: there are some *transactions* that cannot be expressed as events. In particular, you can't express things like \"synchronize only if both events are ready\". You can synchronize on at a time, but then you risk getting stuck halfway."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:42:14.000406",
          "text": "so not all transactions can be events - but should all events be transactions? does it make sense to use events for things that aren't \"transaction-y\"? I'm only reaching for them because I don't know what else to use for doing two independent things at once, aside from the manual thread spawning and exception+break shuffling"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:43:26.000608",
          "text": "it _seems_ like `replace-evt` implies that events have more use beyond transactions and as long as the user is aware of that, that's not necessarily a bad thing"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:45:31.000138",
          "text": "Most events consist of a little transaction followed by some arbitrary Racket wrapper/handler code. But the transactional part has to be one of the things the Racket schedule can handle transactionally."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:47:17.000370",
          "text": "I'm not really sure what `replace-evt` is useful for."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:48:18.000106",
          "text": "it was added around 6.1 by <@Vincenzo> in this commit: <https://github.com/racket/racket/commit/bc69a9b05cf7d8fb21353d9473c73d28c323e1fa>"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T08:49:05.000275",
          "text": "I think this is the thread that led to it: <https://www.mail-archive.com/dev@racket-lang.org/msg11562.html>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:50:56.000276",
          "text": "it's weird to have `replace-evt`, `handle-evt`, and _not_ have some sort of `both-evt` function, because `replace-evt` makes events a monad and `handle-evt` makes them a functor"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:51:11.000426",
          "text": "-ish"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:52:13.000199",
          "text": "a `both-evt` function would be the middle-ground that makes events an applicative functor"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:53:24.000289",
          "text": "cutely, I think haskell parsing libraries wanted applicatives for the same reasons I do: they let you express that things are independent and get more free concurrency/parallelism"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:55:08.000294",
          "text": "To clarify: I'm not sure `replace-evt` actually/generally solves the class of problems that Jan and/or Matthew hoped it would solve."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:56:37.000270",
          "text": "does a sequence of transactions where individual transactions are handled transactionally by the scheduler but not the whole sequence make sense as an event?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T08:56:51.000355",
          "text": "that seems like the main use case of `replace-evt` to me"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T09:01:38.000140",
          "text": "aha! <https://www.mail-archive.com/dev@racket-lang.org/msg10945.html>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T09:12:51.000010",
          "text": "disregarding multiple values, I think this works for what I want:\n\n```\n(define (pair-evt a b)\n  (define left (handle-evt a (cons 'left _)))\n  (define right (handle-evt b (cons 'right _)))\n  (replace-evt (choice-evt left right)\n    (match-lambda\n      [(cons 'left v) (handle-evt b (cons v _))]\n      [(cons 'right v) (handle-evt b (cons _ v))])))\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T09:14:25.000419",
          "text": "specifically, `(sync (choice-evt (pair-evt A B) C))` may result in either `A+B`, `C`, `A+C`, or `B+C` being chosen for synchronization - but not all three and no event is chosen more than once"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T09:18:29.000312",
          "text": "<@Chantelle> make a package!"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T09:19:10.000435",
          "text": "<@Latarsha> not until I make sure <@Vincenzo> can do a code review :p"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-11T09:19:24.000624",
          "text": "make a package and then ask him :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T09:23:46.000413",
          "text": "eventually!"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-11T09:28:45.000255",
          "text": "<@Chantelle> Looks right, except that I think you meant `a` instead of `b` in the last line of `pair-evt`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T09:28:59.000343",
          "text": "oops"
        }
      ]
    },
    {
      "conversation_id": "529",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Natosha: [CODE_BLOCK]",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Natosha"
        ]
      },
      "timeline": [
        {
          "user": "Natosha",
          "timestamp": "2017-12-11T08:16:24.000348",
          "text": "```;; parallel-apply : (Listof (-&gt; Any)) -&gt; (Listof Any)\n;; Applies the given list of thunks in parallel, propagating\n;; breaks to the evaluation threads.\n(define (parallel-apply thunks)\n  (define result-boxes (map (lambda _ (box #f)) thunks))\n  (define threads null)\n  (with-handlers ([exn:break?\n                   (lambda (e)\n                     (for-each break-thread threads)\n                     (raise e))])\n    (start-atomic)\n    (set! threads\n          (for/list ([thunk (in-list thunks)]\n                     [result-box (in-list result-boxes)])\n            (thread (lambda () (set-box! result-box (thunk))))))\n    (end-atomic)\n    (for-each thread-wait threads))\n  (map unbox result-boxes))```"
        }
      ]
    },
    {
      "conversation_id": "530",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Tammera: Yay, events!\nTammera: I use this a lot: [CODE_BLOCK]\nTammera: and this [CODE_BLOCK]\nTammera: last one [CODE_BLOCK]\nTammera: Then I can make consistent chains of events and use [CODE] as an event loop driver.\nTammera: An example of the former: [CODE_BLOCK]\nTammera: [CODE_BLOCK]\nTammera: I have no idea if this is wise, or even sound.\nTammera: An embedded DSL could make this fun to use. [CODE_BLOCK]\nChantelle: Tammera those helpers and some others are things that should probably go in a package together somewhere\nTammera: Chantelle others?\nChantelle: Tammera off the top of my head, here are some things that might be useful in making event chains more readable: [CODE_BLOCK]\nChantelle: (but with variadic signatures instead of pair-based signatures)\nTammera: oh, cool!\nTammera: Sometimes, cooperative concurrency is easier to think about.\nChantelle: oh and one more: [CODE]\nChantelle: the [CODE] one is probably the trickiest - that would encapsulate spawning a nested thread to call a function and making sure exceptions and breaks are shuffled between the two correctly",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 17,
        "duration_minutes": 128.4,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Tammera"
        ]
      },
      "timeline": [
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:33:15.000774",
          "text": "Yay, events!"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:33:35.000458",
          "text": "I use this a lot: ```(define (all-evts . es)\n  (if (null? es)\n      (handle-evt always-evt (λ _ #t))\n      (replace-evt (apply choice-evt (map (λ (e) (handle-evt e (λ _ e))) es))\n                   (λ (e) (apply all-evts (remq e es))))))```"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:35:47.000035",
          "text": "and this ```(define (seq-evt* maker0 makers)\n  (foldl (λ (maker evt) (replace-evt evt maker)) (maker0) makers))\n\n(define (seq-evt maker0 . makers)\n  (seq-evt* maker0 makers))```"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:36:22.000292",
          "text": "last one ```(define (loop-evt* maker0 makers)\n  (define loop (λ _ (seq-evt* maker0 (append makers (list loop)))))\n  (loop))\n\n(define (loop-evt maker0 . makers)\n  (loop-evt* maker0 makers))```"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:37:10.000120",
          "text": "Then I can make consistent chains of events and use `sync` as an event loop driver."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:42:25.000487",
          "text": "An example of the former: ```(sync\n (seq-evt (λ () (port-closed-evt in-port)) die)\n (seq-evt (λ () (recv-evt π)) (λ (msg) (if (eof? msg) quit (emit-evt msg)))))```"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:44:40.000053",
          "text": "```(sync\n (loop-evt (λ () (recv-evt π1)) (λ (msg) (give-evt π2 msg)))\n (loop-evt (λ () (recv-evt π2)) (λ (msg) (give-evt π1 msg)))\n π1 π2)\n;; where π1,π2 are processes exchanging messages```"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T16:45:29.000610",
          "text": "I have no idea if this is wise, or even sound."
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T17:15:25.000399",
          "text": "An embedded DSL could make this fun to use. ```(concurrent\n (seq (wait π) (emit eof) (die))\n (seq (let ([msg (recv)]) (if (eof? msg) (quit) (emit msg)))))\n\n(concurrent\n (choice\n  (loop (give π2 (recv π1)))\n  (loop (give π1 (recv π2)))\n  π1 π2))```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T17:55:21.000144",
          "text": "<@Tammera> those helpers and some others are things that should probably go in a package together somewhere"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T18:19:09.000248",
          "text": "<@Chantelle> others?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T18:32:50.000254",
          "text": "<@Tammera> off the top of my head, here are some things that might be useful in making event chains more readable:\n\n```\npair-evt :: (Evt a, Evt b) -&gt; Evt (a, b)\nlist-evt :: [Evt a] -&gt; Evt [a]\napply-evt :: (Evt (a -&gt; b), Evt a) -&gt; Evt b\nseq-evt :: (Evt a, Evt b) -&gt; Evt b\ncall-evt :: Thunk a -&gt; Evt a\ncall-evt* :: Thunk a -&gt; Thunk (Evt a)\nwait-evt :: Evt a -&gt; Evt ()\ndeadline-evt :: (Evt a, Duration) -&gt; Evt (Maybe a)\nfold-evt :: (Evt a, a -&gt; Either (Evt a) b) -&gt; Evt b\nforever-evt :: Evt a -&gt; Evt Void\n```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T18:33:10.000381",
          "text": "(but with variadic signatures instead of pair-based signatures)"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T18:37:45.000144",
          "text": "oh, cool!"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-11T18:39:02.000178",
          "text": "Sometimes, cooperative concurrency is easier to think about."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T18:39:48.000054",
          "text": "oh and one more: `const-evt :: a -&gt; Evt a`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-11T18:41:39.000079",
          "text": "the `call-evt` one is probably the trickiest - that would encapsulate spawning a nested thread to call a function and making sure exceptions and breaks are shuffled between the two correctly"
        }
      ]
    },
    {
      "conversation_id": "531",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Natosha: Vincenzo is there a reason the docs for [CODE] say the polling function should return a list to indicate the event is ready? The implementation seems to accept any non-false value. (And I originally assumed that the \"list of results\" would get turned into multiple values, but that doesn't seem to be true either.)\nVincenzo: The docs and your assumption are right, and the implementation is wrong\nVincenzo: (It's meant to match the Racket-on-Chez implementation.)\nVincenzo: I'll fix the implementation, but support a non-list single-value result to smooth the transition\nNatosha: Vincenzo thanks! Another question: is there a (cheap, direct) way to check if a custodian is shut down? The context: if I call [CODE] when the current custodian is already shut down, I get a segfault. This is a problem for [CODE].\nVincenzo: [CODE] from [CODE] does that check for you, and it returns #f if the custodian is shut down. I think that check is a relatively new feature, though.\nNatosha: BTW, thanks for [CODE]; with it, I should be able to add [CODE]\nNatosha: I don't have a separate callback I want to register; I just want to safely rely on custodian-registration work that [CODE] already does.\nVincenzo: Oh, I see. The right answer here is to add a Racket function so your code can work with Racket-on-Chez. Are there other C functions that you're using?\nNatosha: For this library, that and [CODE]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 112.98,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Natosha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Natosha",
          "timestamp": "2017-12-12T08:31:03.000023",
          "text": "<@Vincenzo> is there a reason the docs for `unsafe-poller` say the polling function should return a list to indicate the event is ready? The implementation seems to accept any non-false value. (And I originally assumed that the \"list of results\" would get turned into multiple values, but that doesn't seem to be true either.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-12T10:07:45.000775",
          "text": "The docs and your assumption are right, and the implementation is wrong"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-12T10:08:03.000471",
          "text": "(It's meant to match the Racket-on-Chez implementation.)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-12T10:09:27.000247",
          "text": "I'll fix the implementation, but support a non-list single-value result to smooth the transition"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-12T10:16:18.000296",
          "text": "<@Vincenzo> thanks! Another question: is there a (cheap, direct) way to check if a custodian is shut down? The context: if I call `scheme_make_fd_output_port` when the current custodian is already shut down, I get a segfault. This is a problem for `unix-socket-{connect,accept}`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-12T10:17:38.000158",
          "text": "`register-custodian-shutdown` from `ffi/unsafe/custodian` does that check for you, and it returns #f if the custodian is shut down. I think that check is a relatively new feature, though."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-12T10:17:52.000364",
          "text": "BTW, thanks for `unsafe-poller`; with it, I should be able to add `unix-socket-accept-evt`"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-12T10:20:40.000384",
          "text": "I don't have a separate callback I want to register; I just want to safely rely on custodian-registration work that `scheme_make_fd_output_port` already does."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-12T10:21:56.000362",
          "text": "Oh, I see. The right answer here is to add a Racket function so your code can work with Racket-on-Chez. Are there other C functions that you're using?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-12T10:24:02.000927",
          "text": "For this library, that and `scheme_fd_to_semaphore`"
        }
      ]
    },
    {
      "conversation_id": "532",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Patrice: Is there any good way to iterate over a list in pairs other than writing a loop? (Iterating through a list of form [CODE])\nChantelle: Patrice I just know there's a library function somewhere that does that\nKimbery: Patrice [CODE] will do it <[URL]\nChantelle: _that's_ the one\nPatrice: oh that's nice! thanks Chantelle Kimbery",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 2.92,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Patrice",
          "timestamp": "2017-12-12T14:13:21.000277",
          "text": "Is there any good way to iterate over a list in pairs other than writing a loop? (Iterating through a list of form `(prop prop-val ... ...)`)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-12T14:15:30.000223",
          "text": "<@Patrice> I just know there's a library function somewhere that does that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-12T14:15:57.000316",
          "text": "<@Patrice> `in-slice` will do it <http://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fsequence..rkt%29._in-slice%29%29>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-12T14:16:13.000447",
          "text": "_that's_ the one"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-12-12T14:16:16.000277",
          "text": "oh that's nice! thanks <@Chantelle> <@Kimbery>"
        }
      ]
    },
    {
      "conversation_id": "533",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Arnetta: is it possible to have a macro where usually (function xyz) becomes (list \"x\" \"y\" \"z\") but \"wz\" is a special combination and (function xywz) becomes (list \"x\" \"y\" \"wz\") ?\nKimbery: Sure. That’s just a string processing problem.\nArnetta: :blush:\nKimbery: Natosha I’m trying to fix <[URL] but I have a question or two if you have a moment\nNatosha: Kimbery yes?\nKimbery: Natosha I actually just opened a PR with a hack that resolves the issue, but I don’t know if it’s a good/acceptable solution <[URL]\nKimbery: I’d appreciate your review\nKimbery: I originally tried to implement it with [CODE] instead of the cheap switch on [CODE]… but that broke Typed Racket because TR does a surprising thing.\nKimbery: Natosha I think the alternative solution would be to attach a syntax property to the expansion that has the original identifier in it, then adjust each of the macros exported by syntax/parse to inspect the syntax property.\nKimbery: that would be a little more work, but it might cause fewer problems.\nNatosha: Kimbery I'd rather avoid the extra indirection if possible. Another approach I wanted to try is basically making [CODE] work on macro transformers. That is, the setup is similar, but the proxy macro, instead of constructing a new term with the result of [CODE], calls [CODE] on the result of [CODE] to get the original macro's transformer, then applies the transformer directly.\nKimbery: oh, that’s an interesting idea. I could try that.\nNatosha: If that works, it might be possible to generate the auxiliary modules automatically as submodules and wrap up the whole thing as [CODE] :slightly_smiling_face:\nKimbery: I’m trying it right now, but I don’t see why it wouldn’t\nKimbery: all the tests pass, at least :)\nNatosha: Yet another thing to try is the procedure variant of [CODE]... but that might interact badly with [CODE], since it tries to bypass normal rename-transformers unless ordered not to.\nKimbery: and the only way to order it not to is to make the rename transformer not [CODE], right?\nNatosha: yes, as a syntax-property on the identifier, iirc\nKimbery: the [CODE] approach seems to work well, and it’s much simpler. I could try and implement [CODE], but I don’t think I _fully_ understand what needs to be done to preserve the laziness.\nKimbery: I remember you explaining this in the inside racket stream you did on syntax/parse, but I didn’t fully understand all the mechanics\nNatosha: thanks, if you update or replace the PR I'll merge that\nKimbery: just pushed\nNatosha: Getting the old [CODE] solution to work for [CODE] was a lot of trial and error and running into random details about things like how [CODE] interacts with module-path-index (de?)serialization.\nKimbery: I think I also just don’t really understand all the details of when Racket maintains a module dependency from a macro use. I understand that if a macro expanded to a top-level [CODE] or [CODE], some of that phase 1 code will stick around in the compiled module… is that the only detail? so [CODE] ensures the only thing left behind after expansion comes from the residual module? why can’t Racket detect that only the residual things are left behind and eliminate the dependency on [CODE]?\nNatosha: Typically, Racket just preserves the module dependencies declared through [CODE]. Macros typically only insert references from [CODE]d modules. So if Racket instantiates all of a module's dependencies before instantiating the module itself, all of the residual references will have been defined. Using [CODE] to trim the set of instantiated modules can interfere with Racket's bookkeeping, runs two risks. First, a needed module can get left out. Second, a residual reference points to a definition site with a module-path-index that can contain a chain of relative module paths. If some of those relative requires aren't executed, Racket can't figure out what (absolute) module path the reference is supposed to be linked to.\nNatosha: See also <[URL] which was written when some of the details were fresher in my mind.\nKimbery: Natosha Thanks, that’s helpful. I think the issue is that I’m grappling with my intuition of macros-as-compilers, where the macro spits out some code as a byproduct, but all the macros go away by the time the module is compiled. Therefore, shouldn’t the macro be an exclusively compile-time dependency? And shouldn’t Racket understand that and not instantiate phase 1 things after the module has already been compiled?\nVincenzo: Racket doesn't instantiate phase-1 things at run time – as long as you use something like [CODE], which [CODE] does when given a module on the command line. But modules carry all dependencies in case you use [CODE] in a way that needs to trigger phase-1 instantiations. If you know that [CODE] and variants won't be used (because you know more than the compiler and run-time system), you can use a tool like the demodularizer to discard phase 1 and up.\nChantelle: Vincenzo is there a way for a module to declare it's \"un-eval-able\" that would let rackets compilation process do that without users having to mess with extra command line tools? something similar to how cross phase persistence is declared?\nChantelle: by \"is there a way\" I think I mean \"is it possible to add that to Racket with reasonable semantics\" rather than \"can I do it myself with the latest Racket right now\"\nVincenzo: Chantelle I think that would be technically possible, but it's not obvious to me how to make it work reasonably with even basic tools, such as a REPL.\nChantelle: I think I'd only use it as a way to write a tiny \"main entrypoint\" module for a webserver to keep build script complexity down, so simply not offering a REPL (like [CODE]) in that case is fine by me\nVincenzo: It's not clear to me what that would buy you compared to running the main entrypoint with [CODE], assuming that there really aren't any [CODE]s.\nChantelle: as in, I would want [CODE] to \"automagically\" make demodularized forms of these sorts of modules so when running that sort of entrypoint with [CODE] the compiled stuff it uses is demodularized already\nChantelle: but I don't really know enough about how those tools work to know if that makes sense",
      "analysis_metadata": {
        "user_count": 5,
        "message_count": 35,
        "duration_minutes": 952.43,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "implement",
          "requires",
          "review",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Arnetta",
          "Chantelle",
          "Kimbery",
          "Natosha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Arnetta",
          "timestamp": "2017-12-13T00:40:48.000020",
          "text": "is it possible to have a macro where usually\n(function xyz)\nbecomes\n(list \"x\" \"y\" \"z\")\nbut \"wz\" is a special combination and\n(function xywz)\nbecomes\n(list \"x\" \"y\" \"wz\")\n?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T00:42:24.000134",
          "text": "Sure. That’s just a string processing problem."
        },
        {
          "user": "Arnetta",
          "timestamp": "2017-12-13T13:02:02.000062",
          "text": ":blush:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:08:56.000070",
          "text": "<@Natosha> I’m trying to fix <https://github.com/racket/racket/issues/1909>, but I have a question or two if you have a moment"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T13:41:27.000468",
          "text": "<@Kimbery> yes?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:42:03.000440",
          "text": "<@Natosha> I actually just opened a PR with a hack that resolves the issue, but I don’t know if it’s a good/acceptable solution <https://github.com/racket/racket/pull/1911>"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:42:15.000248",
          "text": "I’d appreciate your review"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:43:19.000193",
          "text": "I originally tried to implement it with `splicing-let-syntax` instead of the cheap switch on `definition?`… but that broke Typed Racket because TR does a surprising thing."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:45:15.000198",
          "text": "<@Natosha> I think the alternative solution would be to attach a syntax property to the expansion that has the original identifier in it, then adjust each of the macros exported by syntax/parse to inspect the syntax property."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:45:38.000243",
          "text": "that would be a little more work, but it might cause fewer problems."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T13:57:29.000080",
          "text": "<@Kimbery> I'd rather avoid the extra indirection if possible. Another approach I wanted to try is basically making `lazy-require` work on macro transformers. That is, the setup is similar, but the proxy macro, instead of constructing a new term with the result of `(get-id)`, calls `syntax-local-value` on the result of `(get-id)` to get the original macro's transformer, then applies the transformer directly."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:57:57.000148",
          "text": "oh, that’s an interesting idea. I could try that."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T13:59:06.000485",
          "text": "If that works, it might be possible to generate the auxiliary modules automatically as submodules and wrap up the whole thing as `lazy-require-syntax` :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T13:59:36.000387",
          "text": "I’m trying it right now, but I don’t see why it wouldn’t"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T14:00:46.000270",
          "text": "all the tests pass, at least :)"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T14:01:11.000281",
          "text": "Yet another thing to try is the procedure variant of `prop:rename-transformer`... but that might interact badly with `provide`, since it tries to bypass normal rename-transformers unless ordered not to."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T14:01:59.000110",
          "text": "and the only way to order it not to is to make the rename transformer not `free-identifier=?`, right?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T14:02:31.000014",
          "text": "yes, as a syntax-property on the identifier, iirc"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T14:04:18.000051",
          "text": "the `syntax-local-value` approach seems to work well, and it’s much simpler. I could try and implement `lazy-require-syntax`, but I don’t think I _fully_ understand what needs to be done to preserve the laziness."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T14:04:45.000524",
          "text": "I remember you explaining this in the inside racket stream you did on syntax/parse, but I didn’t fully understand all the mechanics"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T14:07:42.000392",
          "text": "thanks, if you update or replace the PR I'll merge that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T14:08:28.000039",
          "text": "just pushed"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T14:10:12.000348",
          "text": "Getting the old `lazy-require` solution to work for `syntax-parse` was a lot of trial and error and running into random details about things like how `dynamic-require` interacts with module-path-index (de?)serialization."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T14:14:04.000711",
          "text": "I think I also just don’t really understand all the details of when Racket maintains a module dependency from a macro use. I understand that if a macro expanded to a top-level `define-syntax` or `begin-for-syntax`, some of that phase 1 code will stick around in the compiled module… is that the only detail? so `syntax/parse` ensures the only thing left behind after expansion comes from the residual module? why can’t Racket detect that only the residual things are left behind and eliminate the dependency on `syntax/parse/private/sc`?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T14:33:37.000057",
          "text": "Typically, Racket just preserves the module dependencies declared through `require`. Macros typically only insert references from `require`d modules. So if Racket instantiates all of a module's dependencies before instantiating the module itself, all of the residual references will have been defined. Using `lazy-require` to trim the set of instantiated modules can interfere with Racket's bookkeeping, runs two risks. First, a needed module can get left out. Second, a residual reference points to a definition site with a module-path-index that can contain a chain of relative module paths. If some of those relative requires aren't executed, Racket can't figure out what (absolute) module path the reference is supposed to be linked to."
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-13T14:36:10.000207",
          "text": "See also <https://macrologist.blogspot.com/2011/10/lazy-module-loading.html>, which was written when some of the details were fresher in my mind."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T14:51:53.000121",
          "text": "<@Natosha> Thanks, that’s helpful. I think the issue is that I’m grappling with my intuition of macros-as-compilers, where the macro spits out some code as a byproduct, but all the macros go away by the time the module is compiled. Therefore, shouldn’t the macro be an exclusively compile-time dependency? And shouldn’t Racket understand that and not instantiate phase 1 things after the module has already been compiled?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T14:59:09.000115",
          "text": "Racket doesn't instantiate phase-1 things at run time – as long as you use something like `dynamic-require`, which `racket` does when given a module on the command line.\nBut modules carry all dependencies in case you use `eval` in a way that needs to trigger phase-1 instantiations.\nIf you know that `eval` and variants won't be used (because you know more than the compiler and run-time system), you can use a tool like the demodularizer to discard phase 1 and up."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-13T15:02:49.000015",
          "text": "<@Vincenzo> is there a way for a module to declare it's \"un-eval-able\" that would let rackets compilation process do that without users having to mess with extra command line tools? something similar to how cross phase persistence is declared?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-13T15:04:01.000028",
          "text": "by \"is there a way\" I think I mean \"is it possible to add that to Racket with reasonable semantics\" rather than \"can I do it myself with the latest Racket right now\""
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T16:20:34.000094",
          "text": "<@Chantelle> I think that would be technically possible, but it's not obvious to me how to make it work reasonably with even basic tools, such as a REPL."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-13T16:22:44.000212",
          "text": "I think I'd only use it as a way to write a tiny \"main entrypoint\" module for a webserver to keep build script complexity down, so simply not offering a REPL (like `#lang info`) in that case is fine by me"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T16:28:27.000506",
          "text": "It's not clear to me what that would buy you compared to running the main entrypoint with `racket`, assuming that there really aren't any `eval`s."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-13T16:32:47.000620",
          "text": "as in, I would want `raco setup` to \"automagically\" make demodularized forms of these sorts of modules so when running that sort of entrypoint with `racket` the compiled stuff it uses is demodularized already"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-13T16:33:14.000312",
          "text": "but I don't really know enough about how those tools work to know if that makes sense"
        }
      ]
    },
    {
      "conversation_id": "534",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Natosha I also just saw your [CODE] addition! That’s exciting.\nLatarsha: Vincenzo When using the handin-server this semester, we (Wanetta and Laureen and I) saw occasional instances of [CODE] erroring with \"Broken pipe\", causing submissions to be unsuccessful. From reading online, this seems like the result of the socket being closed by the client at an inopportune moment. Have you seen this? Is there some way we can adjust [CODE] to handle this situtation? We can certainly do the implementation if there's a place we should look.\nVincenzo: Latarsha I'm not sure what you mean. Broken pipe errors are a fact of life with TCP on a real network, so the handin server and clients will see them occasionally, and a user on the client side will have to try again occasionally. Is there some more serious consequence that you're seeing?\nLatarsha: Yes, we've gotten multiple reports that students see the \"Handin successful\" message and then nothing is there on the server.\nLatarsha: Certainly we've seen this error in the log without hearing about any corresponding error messages displayed to students (and I expect we would have heard if they got them)\nVincenzo: If you run a server for a while and don't get \"Broken pipe\" messages, it means that your network cable is unplugged.\nVincenzo: I don't think you want to chase network errors. If the server can report success before it actually commits to success, then that's certainly a problem. I haven't looked at this code in a long time, so it's taking me a while to work out how and when success is reported.\nVincenzo: Latarsha I don't see a way for a client to show \"Handin successful\" without getting the final [CODE] message from the server, and I don't see a way for the server to send [CODE] until it has renamed an attempt to \"SUCCESS-&lt;n&gt;\". I certainly could be overlooking something, but I doubt that the issue is an ill-timed broken connection.\nLatarsha: What we've seen is several students at various times emailing to say that they submitted and didn't get an error (they say they got the success message but that isn't totally trustworthy), but that the file isn't on the server. In almost all of these cases, the log shows their most recent submission to the relevant assignment errored with a broken pipe\nVincenzo: I don't remember what an error other than a test failure looks like on the client side, so maybe an error isn't reported prominently enough. In any case, if there's a bug here, it can't be in mishandling network errors, and it must be in a report of success before first committing to success.\nLatarsha: Stefani ping re pkgd\nLatarsha: Kimbery Just talked to Stefani, he plans to fix soon\nStefani: Kimbery it's up\nLatarsha: Vincenzo ok, thanks for investigating. Is there a best way to generate that error myself so that I can see what the error behavior is from the client side?\nVincenzo: You could modify the server to close the connection (or even just exit) before returning 'ok. I guess you could also have a slow checker and disconnect your client machine from the network before the success message comes back.\nLatarsha: Ok, thanks, I'll try that",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 16,
        "duration_minutes": 1106.43,
        "contains_question": true,
        "action_keywords": [
          "assign",
          "fix",
          "implement",
          "must",
          "should",
          "submit",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Stefani",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-13T17:06:22.000379",
          "text": "<@Natosha> I also just saw your `#:undo` addition! That’s exciting."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-13T19:03:21.000221",
          "text": "<@Vincenzo> When using the handin-server this semester, we (<@Wanetta> and <@Laureen> and I) saw occasional instances of `tcp-write` erroring with \"Broken pipe\", causing submissions to be unsuccessful. From reading online, this seems like the result of the socket being closed by the client at an inopportune moment. Have you seen this? Is there some way we can adjust `handin-server` to handle this situtation? We can certainly do the implementation if there's a place we should look."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T20:14:28.000292",
          "text": "<@Latarsha> I'm not sure what you mean. Broken pipe errors are a fact of life with TCP on a real network, so the handin server and clients will see them occasionally, and a user on the client side will have to try again occasionally. Is there some more serious consequence that you're seeing?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-13T20:25:00.000016",
          "text": "Yes, we've gotten multiple reports that students see the \"Handin successful\" message and then nothing is there on the server."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-13T20:26:20.000098",
          "text": "Certainly we've seen this error in the log without hearing about any corresponding error messages displayed to students (and I expect we would have heard if they got them)"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T20:35:22.000059",
          "text": "If you run a server for a while and don't get \"Broken pipe\" messages, it means that your network cable is unplugged."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T20:38:08.000103",
          "text": "I don't think you want to chase network errors. If the server can report success before it actually commits to success, then that's certainly a problem. I haven't looked at this code in a long time, so it's taking me a while to work out how and when success is reported."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T21:01:05.000048",
          "text": "<@Latarsha> I don't see a way for a client to show \"Handin successful\" without getting the final `'ok` message from the server, and I don't see a way for the server to send `'ok` until it has renamed an attempt to \"SUCCESS-&lt;n&gt;\". I certainly could be overlooking something, but I doubt that the issue is an ill-timed broken connection."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-13T21:05:58.000085",
          "text": "What we've seen is several students at various times emailing to say that they submitted and didn't get an error (they say they got the success message but that isn't totally trustworthy), but that the file isn't on the server. In almost all of these cases, the log shows their most recent submission to the relevant assignment errored with a broken pipe"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-13T21:16:35.000045",
          "text": "I don't remember what an error other than a test failure looks like on the client side, so maybe an error isn't reported prominently enough. In any case, if there's a bug here, it can't be in mishandling network errors, and it must be in a report of success before first committing to success."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-14T09:44:56.000603",
          "text": "<@Stefani> ping re pkgd"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-14T10:38:13.000730",
          "text": "<@Kimbery> Just talked to <@Stefani>, he plans to fix soon"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-14T11:15:08.000402",
          "text": "<@Kimbery> it's up"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-14T11:23:39.000969",
          "text": "<@Vincenzo> ok, thanks for investigating. Is there a best way to generate that error myself so that I can see what the error behavior is from the client side?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-14T11:27:36.000500",
          "text": "You could modify the server to close the connection (or even just exit) before returning 'ok. I guess you could also have a slow checker and disconnect your client machine from the network before the success message comes back."
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-14T11:32:48.000528",
          "text": "Ok, thanks, I'll try that"
        }
      ]
    },
    {
      "conversation_id": "535",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: It seems like pkgd may have fallen over again…\nKimbery: thanks!",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 2,
        "duration_minutes": 577.08,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-14T01:10:13.000050",
          "text": "It seems like pkgd may have fallen over again…"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-14T10:47:18.000281",
          "text": "thanks!"
        }
      ]
    },
    {
      "conversation_id": "536",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: Just noticed that the snapshots page: <[URL] lists northwestern but this doesn't seem to work anymore. i.e. the link <[URL] times out.\nKarine: Corey ^^^\nEun: Karine: I believe there's some network shuffling happening today at NWU.\nEun: Tina: ^\nWeldon: I’ve created a <#C8FS3SS22|drracket> channel for anyone interested in working on DrRacket.\nTina: The site seems to be back now\nCorey: Tina For Travis CI builds that need Racket snapshot, is Northwestern or Utah preferable (meaning, better uptime, as well as friendly to your resources)? (I ask because I seem to recall switching this in years past, but was advised to switch it back. So I'm not sure whether to accept Karine' PR to switch it from NW to Utah.)\nTina: I don't ever intend for it to be down and there are no resource constraints from our end\nCorey: Tina Cool I'll stick with Northwestern then -- thanks!\nTina: Sorry it has been down recently.\nTina: Does it make sense to send requests to both and take the one that comes back first?\nCorey: No worries, I wouldn't expect any one server to have 100% uptime.\nCorey: &gt; Does it make sense to send requests to both and take the one that comes back first? Maybe. I guess the question is where to put that. e.g. Are you proposing that folks do this try-both logic in various shell scripts etc.? Or are you proposing to put both behind one load balancer that does this, and to which we point? :grin:\nLatarsha: Corey I think (by which I mean I'm 100% sure) that Tina is suggesting try-both, not a 3rd server\nTina: I was suggesting try both.\nTina: A third server seems like it might not help with the problem we’re having. :slightly_smiling_face:\nTina: meanwhile, I got a message about some more potential downtime locally.\nTina: It is hard to tell if it will affect <[URL] (it doesn’t seem like it should, but the previous messages also seemed like they shouldn’t and apparently did)\nTina: Also, I’m not suggesting load balancing. I’m suggesting load doubling. :wink:",
      "analysis_metadata": {
        "user_count": 6,
        "message_count": 19,
        "duration_minutes": 1152.85,
        "contains_question": true,
        "action_keywords": [
          "build",
          "create",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Corey",
          "Eun",
          "Karine",
          "Latarsha",
          "Tina",
          "Weldon"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-12-14T16:23:06.000043",
          "text": "Just noticed that the snapshots page: <https://pre.racket-lang.org/installers/> lists northwestern but this doesn't seem to work anymore. i.e. the link <http://plt.eecs.northwestern.edu/snapshots/> times out."
        },
        {
          "user": "Karine",
          "timestamp": "2017-12-14T16:23:20.000264",
          "text": "<@Corey> ^^^"
        },
        {
          "user": "Eun",
          "timestamp": "2017-12-14T16:29:25.000268",
          "text": "<@Karine>: I believe there's some network shuffling happening today at NWU."
        },
        {
          "user": "Eun",
          "timestamp": "2017-12-14T16:29:28.000345",
          "text": "<@Tina>: ^"
        },
        {
          "user": "Weldon",
          "timestamp": "2017-12-14T16:30:39.000197",
          "text": "I’ve created a <#C8FS3SS22|drracket> channel for anyone interested in working on DrRacket. "
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-14T16:37:40.000340",
          "text": "The site seems to be back now"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-14T17:10:38.000206",
          "text": "<@Tina> For Travis CI builds that need Racket snapshot, is Northwestern or Utah preferable (meaning, better uptime, as well as friendly to your resources)?\n(I ask because I seem to recall switching this in years past, but was advised to switch it back. So I'm not sure whether to accept <@Karine>' PR to switch it from NW to Utah.)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-14T17:11:14.000276",
          "text": "I don't ever intend for it to be down and there are no resource constraints from our end"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-14T17:12:33.000599",
          "text": "<@Tina> Cool I'll stick with Northwestern then -- thanks!"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-14T18:13:44.000120",
          "text": "Sorry it has been down recently."
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-14T18:14:02.000172",
          "text": "Does it make sense to send requests to both and take the one that comes back first?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-14T18:24:41.000350",
          "text": "No worries, I wouldn't expect any one server to have 100% uptime."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-14T18:26:19.000307",
          "text": "&gt; Does it make sense to send requests to both and take the one that comes back first?\nMaybe. I guess the question is where to put that.\ne.g. Are you proposing that folks do this try-both logic in various shell scripts etc.?\nOr are you proposing to put both behind one load balancer that does this, and to which we point? :grin:"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-15T11:33:40.000342",
          "text": "<@Corey> I think (by which I mean I'm 100% sure) that <@Tina> is suggesting try-both, not a 3rd server"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-15T11:34:18.000054",
          "text": "I was suggesting try both."
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-15T11:34:30.000017",
          "text": "A third server seems like it might not help with the problem we’re having. :slightly_smiling_face:"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-15T11:34:44.000043",
          "text": "meanwhile, I got a message about some more potential downtime locally."
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-15T11:35:10.000017",
          "text": "It is hard to tell if it will affect <http://plt.eecs.northwestern.edu|plt.eecs.northwestern.edu> (it doesn’t seem like it should, but the previous messages also seemed like they shouldn’t and apparently did)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-15T11:35:57.000194",
          "text": "Also, I’m not suggesting load balancing. I’m suggesting load doubling. :wink:"
        }
      ]
    },
    {
      "conversation_id": "537",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: did somebody say load balancing? :grin:",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-12-14T18:38:33.000128",
          "text": "did somebody say load balancing? :grin:"
        }
      ]
    },
    {
      "conversation_id": "538",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: I understand how adding another server might sound like adding another potentially-failing turtle.\nCorey: But e.g. the server hosting <[URL] seems to have greater uptime, and/or, you could imagine hosting a server someplace with more uptime/control than a given university.\nCorey: Also, I feel like there should be a URL structure that works to get various downloads -- but _how_ it works from time to time is not really something for each/every client to implement?\nCorey: Making an even more complicated (for try-both retries) version of this <[URL] out at clients, seems not quite right?\nCorey: Instead of repeating that logic at clients, define it once at the server.\nCorey: So I think we all agree it's good to try any of the available servers, until one works. I think the question is, who does this retrying and where? :smile:\nCorey: Of course the status quo is not horrible and we're all busy so maybe the smartest thing is to leave it as-is. ¯\\_(ツ)_/¯\nChantelle: Corey somewhat related: <[URL]",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 8,
        "duration_minutes": 23.1,
        "contains_question": true,
        "action_keywords": [
          "agree",
          "build",
          "implement",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-12-15T12:21:36.000165",
          "text": "I understand how adding another server might sound like adding another potentially-failing turtle."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-15T12:22:53.000198",
          "text": "But e.g. the server hosting <http://www.racket-lang.org|www.racket-lang.org> seems to have greater uptime, and/or, you could imagine hosting a server someplace with more uptime/control than a given university."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-15T12:23:43.000085",
          "text": "Also, I feel like there should be a URL structure that works to get various downloads -- but _how_ it works from time to time is not really something for each/every client to implement?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-15T12:24:25.000340",
          "text": "Making an even more complicated (for try-both retries) version of this <https://github.com/greghendershott/travis-racket/blob/master/install-racket.sh#L6-L37> out at clients, seems not quite right?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-15T12:25:20.000461",
          "text": "Instead of repeating that logic at clients, define it once at the server."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-15T12:26:50.000283",
          "text": "So I think we all agree it's good to try any of the available servers, until one works.\nI think the question is, who does this retrying and where? :smile:"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-15T12:28:04.000031",
          "text": "Of course the status quo is not horrible and we're all busy so maybe the smartest thing is to leave it as-is. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-15T12:44:42.000461",
          "text": "<@Corey> somewhat related: <https://github.com/samth/docker-racket-build/issues/28>"
        }
      ]
    },
    {
      "conversation_id": "539",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Patrice: If a module is required as: [CODE], then it will only be compiled once and the same, compiled module expression will be instantiated twice in different phases. Does this sound right?\nNatosha: Patrice yes\nPatrice: thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 140.87,
        "contains_question": true,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Natosha",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Patrice",
          "timestamp": "2017-12-15T13:17:54.000133",
          "text": "If a module is required as: `(require mod (for-syntax mod))`, then it will only be compiled once and the same, compiled module expression will be instantiated twice in different phases. Does this sound right?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-15T15:26:39.000048",
          "text": "<@Patrice> yes"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-12-15T15:38:46.000421",
          "text": "thanks"
        }
      ]
    },
    {
      "conversation_id": "540",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Stefani I want to play with mode-lambda, but I don’t think I really understand how it works\nKimbery: why is a lux “word” called a “word”?\nKimbery: and, for that matter, why is a “chaos” called a “chaos”?\nKimbery: I’m currently having a very strange problem where [CODE] is taking an enormously long time to resolve hostnames on my machine… but other programs work okay.\nKimbery: I don’t know how to debug this. I should probably try restarting my computer, but I am in the middle of some things and would sort of rather not…\nKimbery: The weird thing is it happens on both HEAD and a copy of 6.8 I have installed, so it can’t be rktio…\nStefani: Kimbery First, lux and mode-lambda are totally independent, neither requires the other. Your question is about lux\nKimbery: yes, my first comment was about mode-lambda and my following two were about lux. but mode-lambda seems designed to work well with lux?\nStefani: in the beginning was chaos and God formed the world with a word, in particular the words \"Fiat Lux\" (let there be light)\nStefani: lux allows a reactive program (a word) to run inside an environment (a chaos) and there are many different possible environments (unlike big-bang, where there is just one, so the environment doesn't get a name in big-bang)\nStefani: mode-lambda's make-render function returns the thing that lux's gui chaos expects to receive, yes, but both can and have been used with other things\nStefani: (specifically, stage-draw/dc ultimately returns a function that takes a width, height, and dc then returns void after drawing on it\nKimbery: I see, yes. I was looking at the [CODE] example in the mode-lambda repo.\nStefani: while lux's gui chaos expects to receive the same kind of value on word-output\nStefani: <[URL] doesn't use lux\nStefani: and <[URL] is super simple (one.rkt has a lot going on)\nKimbery: could you explain to me the difference/purpose of the static/dynamic lists?\nStefani: the static is drawn first and then the dynamic is drawn, so the static is always a background\nStefani: other than that there is no functional difference\nStefani: however there is a performance impact\nStefani: mode-lambda retains a pointer to the last list given to it and if another frame comes with an eq? object list, then there is no memory transfer to the graphics card for that pass of the renderer\nStefani: the slowest thing in basically all graphics engines (including mode-lambda) are such memory transfers\nStefani: so in practice you would use the static for the level layout and the dynamic for the changing sprites and hud\nStefani: (you would render the ENTIRE level statically and just move the camera)\nStefani: (i.e. there's no need to do cpu-side culling with mode-lambda)\nKimbery: gotcha, that makes sense. moving the camera by moving the layers?\nStefani: correct, by moving the center of the layer\nKimbery: I tinkered with SMW romhacking for a little bit many years ago, so I am not entirely unfamiliar with the SNES’s graphics model :)\nStefani: although i'm pretty sure there's an error in the layer computation (discovered recently and not fixed yet), so you may find that\nKimbery: an error of what kind?\nStefani: it doesn't shift properly relative to other layers, so something like a parallax effect is off\nKimbery: ah, hmm. so you can’t have layers that move relative to each other? or am I misinterpreting?\nStefani: you should be able to, there's just a mistake right now\nStefani: basically, don't worry about it, but if something looks strange wrt layers, make sure you ask rather than think you did something wrong\nStefani: any other pressing questions?\nKimbery: I don’t think so, I think that’s enough to get started. though I am a little curious if the contracts on the [CODE] and [CODE] arguments to [CODE] should be something other than [CODE]. I’d expect [CODE].\nStefani: they should be (tree-of sprite-data?) but that's too expensive to check every frame. it goes out of its way to only look at the tree once\nStefani: that's a cons-tree\nStefani: i'm about to disappear\nStefani: :heart:\nKimbery: alright, thanks for your help, Stefani. it might be useful to put the proper contract in the scribble docs and leave it out in the implementation for performance? I’m not sure what your philosophy is about that sort of thing.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 41,
        "duration_minutes": 130.08,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "implement",
          "need to",
          "requires",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T19:27:34.000107",
          "text": "<@Stefani> I want to play with mode-lambda, but I don’t think I really understand how it works"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T19:37:42.000131",
          "text": "why is a lux “word” called a “word”?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T19:39:51.000067",
          "text": "and, for that matter, why is a “chaos” called a “chaos”?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T20:49:15.000094",
          "text": "I’m currently having a very strange problem where `racket/tcp` is taking an enormously long time to resolve hostnames on my machine… but other programs work okay."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T20:51:46.000077",
          "text": "I don’t know how to debug this. I should probably try restarting my computer, but I am in the middle of some things and would sort of rather not…"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T20:57:16.000093",
          "text": "The weird thing is it happens on both HEAD and a copy of 6.8 I have installed, so it can’t be rktio…"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:04:59.000095",
          "text": "<@Kimbery> First, lux and mode-lambda are totally independent, neither requires the other. Your question is about lux"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:05:40.000020",
          "text": "yes, my first comment was about mode-lambda and my following two were about lux. but mode-lambda seems designed to work well with lux?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:06:01.000073",
          "text": "in the beginning was chaos and God formed the world with a word, in particular the words \"Fiat Lux\" (let there be light)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:06:47.000088",
          "text": "lux allows a reactive program (a word) to run inside an environment (a chaos) and there are many different possible environments (unlike big-bang, where there is just one, so the environment doesn't get a name in big-bang)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:07:26.000040",
          "text": "mode-lambda's make-render function returns the thing that lux's gui chaos expects to receive, yes, but both can and have been used with other things"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:08:24.000103",
          "text": "(specifically, stage-draw/dc ultimately returns a function that takes a width, height, and dc then returns void after drawing on it"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:08:42.000105",
          "text": "I see, yes. I was looking at the `one.rkt` example in the mode-lambda repo."
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:09:04.000026",
          "text": "while lux's gui chaos expects to receive the same kind of value on word-output"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:09:35.000020",
          "text": "<https://github.com/jeapostrophe/mode-lambda/blob/master/mode-lambda/examples/jens.rkt> doesn't use lux"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:09:54.000117",
          "text": "and <https://github.com/jeapostrophe/mode-lambda/blob/master/mode-lambda/examples/transparency/open-gl-issue.rkt> is super simple (one.rkt has a lot going on)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:10:54.000072",
          "text": "could you explain to me the difference/purpose of the static/dynamic lists?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:11:39.000027",
          "text": "the static is drawn first and then the dynamic is drawn, so the static is always a background"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:11:45.000059",
          "text": "other than that there is no functional difference"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:11:50.000054",
          "text": "however there is a performance impact"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:12:26.000138",
          "text": "mode-lambda retains a pointer to the last list given to it and if another frame comes with an eq? object list, then there is no memory transfer to the graphics card for that pass of the renderer"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:12:43.000017",
          "text": "the slowest thing in basically all graphics engines (including mode-lambda) are such memory transfers"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:13:00.000106",
          "text": "so in practice you would use the static for the level layout and the dynamic for the changing sprites and hud"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:13:14.000101",
          "text": "(you would render the ENTIRE level statically and just move the camera)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:13:29.000037",
          "text": "(i.e. there's no need to do cpu-side culling with mode-lambda)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:13:41.000083",
          "text": "gotcha, that makes sense. moving the camera by moving the layers?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:13:52.000026",
          "text": "correct, by moving the center of the layer"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:14:21.000063",
          "text": "I tinkered with SMW romhacking for a little bit many years ago, so I am not entirely unfamiliar with the SNES’s graphics model :)"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:14:22.000051",
          "text": "although i'm pretty sure there's an error in the layer computation (discovered recently and not fixed yet), so you may find that"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:15:28.000010",
          "text": "an error of what kind?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:16:10.000106",
          "text": "it doesn't shift properly relative to other layers, so something like a parallax effect is off"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:18:03.000004",
          "text": "ah, hmm. so you can’t have layers that move relative to each other? or am I misinterpreting?"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:18:17.000002",
          "text": "you should be able to, there's just a mistake right now"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:19:07.000058",
          "text": "basically, don't worry about it, but if something looks strange wrt layers, make sure you ask rather than think you did something wrong"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:19:19.000065",
          "text": "any other pressing questions?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:21:05.000009",
          "text": "I don’t think so, I think that’s enough to get started. though I am a little curious if the contracts on the `static-st` and `dynamic-st` arguments to `stage-draw/dc` should be something other than `any/c`. I’d expect `(listof sprite-data?)`."
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:21:57.000012",
          "text": "they should be (tree-of sprite-data?) but that's too expensive to check every frame. it goes out of its way to only look at the tree once"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:23:07.000128",
          "text": "that's a cons-tree"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:26:08.000035",
          "text": "i'm about to disappear"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:26:08.000138",
          "text": ":heart:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T21:37:39.000105",
          "text": "alright, thanks for your help, <@Stefani>. it might be useful to put the proper contract in the scribble docs and leave it out in the implementation for performance? I’m not sure what your philosophy is about that sort of thing."
        }
      ]
    },
    {
      "conversation_id": "541",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Chantelle: That sounds super weird\nStefani: lux is an elaborate pun on big-bang, so does everything big-bang does, but slightly differently. so naturally, it uses creationist nomenclature",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 14.97,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Stefani"
        ]
      },
      "timeline": [
        {
          "user": "Chantelle",
          "timestamp": "2017-12-15T20:50:33.000083",
          "text": "That sounds super weird"
        },
        {
          "user": "Stefani",
          "timestamp": "2017-12-15T21:05:31.000027",
          "text": "lux is an elaborate pun on big-bang, so does everything big-bang does, but slightly differently. so naturally, it uses creationist nomenclature"
        }
      ]
    },
    {
      "conversation_id": "542",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: [CODE_BLOCK] I don’t get it. Vincenzo, is there any way I could debug this issue?\nVincenzo: Just to be sure, `nslookup -query=AAAA <[URL] is also fast, right?\nKimbery: yes, it is.\nVincenzo: You might try compiling with places and futures disabled, just to make sure it's not something wrong with the way Racket runs [CODE] in a thread.\nKimbery: The weirdest thing is that this hasn’t happened before, but it affects all my installations of Racket as far as I can tell… but I can try that.\nVincenzo: You could also try building and runing \"hostinfo.c\" in <[URL] which uses the same OS APIs that Racket is using\nKimbery: Neat, I’ll try that.\nKimbery: [CODE_BLOCK]\nVincenzo: Maybe [CODE] instead of [CODE], though\nVincenzo: Since that's fast, my only guess is still something about threads\nKimbery: Alright, I’ll give that a try.\nKimbery: I think I borked my Racket installation trying to figure out how to properly reconfigure it, so I just cleaned everything and started building from scratch, but is there a better way?\nKimbery: Vincenzo With places and futures disabled, I still have the same problem.\nVincenzo: Maybe it's not worth trying harder before a reboot. But looking again at rktio and \"hostinfo.c\", another difference is [CODE_BLOCK]\nKimbery: One observation: not all domains have this problem. [CODE] (and, after testing, [CODE]) has no trouble at all resolving `<[URL]\nKimbery: [CODE]<[URL] hangs. Perhaps my computer really is the thing at fault here. :)\nKimbery: And, for what it’s worth, adding [CODE] did not appear to change anything.\nKimbery: FWIW, I restarted my computer and the issue went away, as I expected. How strange.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 18,
        "duration_minutes": 1149.23,
        "contains_question": true,
        "action_keywords": [
          "build"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:10:30.000023",
          "text": "```\n$ time nslookup <http://www.google.com|www.google.com>\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:\nName:\t<http://www.google.com|www.google.com>\nAddress: 216.58.216.4\n\n        0.02 real         0.00 user         0.00 sys\n$ time racket -e '(require racket/tcp) (tcp-connect \"<http://www.google.com|www.google.com>\" 80)'\n#&lt;input-port:www.google.com&gt;\n#&lt;output-port:www.google.com&gt;\n       75.90 real         0.24 user         0.10 sys\n$ time racket -e '(require racket/tcp) (tcp-connect \"216.58.216.4\" 80)'\n#&lt;input-port:216.58.216.4&gt;\n#&lt;output-port:216.58.216.4&gt;\n        0.45 real         0.24 user         0.08 sys\n```\nI don’t get it. <@Vincenzo>, is there any way I could debug this issue?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-15T22:15:39.000056",
          "text": "Just to be sure, `nslookup -query=AAAA <http://www.google.com|www.google.com>` is also fast, right?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:16:05.000006",
          "text": "yes, it is."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-15T22:17:50.000007",
          "text": "You might try compiling with places and futures disabled, just to make sure it's not something wrong with the way Racket runs `getaddrinfo` in a thread."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:18:56.000045",
          "text": "The weirdest thing is that this hasn’t happened before, but it affects all my installations of Racket as far as I can tell… but I can try that."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-15T22:19:22.000062",
          "text": "You could also try building and runing \"hostinfo.c\" in <http://www.eng.utah.edu/~cs4400/udp+tcp.zip>, which uses the same OS APIs that Racket is using"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:19:42.000055",
          "text": "Neat, I’ll try that."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:21:34.000005",
          "text": "```\n$ time ./hostinfo <http://www.google.com|www.google.com>\n216.58.216.4\n        0.00 real         0.00 user         0.00 sys\n```"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-15T22:21:42.000043",
          "text": "Maybe `PF_UNSPEC` instead of `AF_INET`, though"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-15T22:22:07.000070",
          "text": "Since that's fast, my only guess is still something about threads"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:22:44.000021",
          "text": "Alright, I’ll give that a try."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:32:25.000032",
          "text": "I think I borked my Racket installation trying to figure out how to properly reconfigure it, so I just cleaned everything and started building from scratch, but is there a better way?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:47:55.000005",
          "text": "<@Vincenzo> With places and futures disabled, I still have the same problem."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-15T22:54:53.000032",
          "text": "Maybe it's not worth trying harder before a reboot.\nBut looking again at rktio and \"hostinfo.c\", another difference is\n```\n#include &lt;netdb.h&gt;\n....\n  hints.ai_protocol = getprotobyname(\"tcp\")-&gt;p_proto;\n  Getaddrinfo....\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:58:12.000036",
          "text": "One observation: not all domains have this problem. `raco pkg` (and, after testing, `racket/tcp`) has no trouble at all resolving `<http://pkgs.racket-lang.org|pkgs.racket-lang.org>`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T22:59:24.000081",
          "text": "`<http://github.com|github.com>` resolves quickly. `<http://example.com|example.com>` hangs. Perhaps my computer really is the thing at fault here. :)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-15T23:00:55.000026",
          "text": "And, for what it’s worth, adding `hints.ai_protocol = ...` did not appear to change anything."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-16T17:19:44.000088",
          "text": "FWIW, I restarted my computer and the issue went away, as I expected. How strange."
        }
      ]
    },
    {
      "conversation_id": "543",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: Must [CODE] return as many values as it takes in?\nIda: (can it return 1?)\nKimbery: It must return as many values as starts with on each iteration because those become the new values of those accumulators for the subsequent iteration. Racket 6.12 will have a [CODE] option to specify the final result of the loop, which could be just one of the accumulators, but existing releases of Racket don’t have that option.\nIda: How does one know when 6.12 is coming about?\nKimbery: Racket is released quarterly, so I imagine it will be released sometime in the first 3 months of 2018.\nIda: Nuuu I see hehe\nKimbery: But if you want, you can download a snapshot build of the very latest development version of Racket. <[URL]\nIda: It's alright, I better stick to mainstream builds\nIda: Lest I confuse my learning setup\nKimbery: I generally support that idea. :)",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 10,
        "duration_minutes": 7.75,
        "contains_question": true,
        "action_keywords": [
          "build",
          "must",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Ida",
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-12-16T19:14:15.000029",
          "text": "Must `for/fold` return as many values as it takes in?"
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-16T19:15:09.000095",
          "text": "(can it return 1?)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-16T19:16:54.000022",
          "text": "It must return as many values as starts with on each iteration because those become the new values of those accumulators for the subsequent iteration. Racket 6.12 will have a `#:result` option to specify the final result of the loop, which could be just one of the accumulators, but existing releases of Racket don’t have that option."
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-16T19:20:23.000010",
          "text": "How does one know when 6.12 is coming about?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-16T19:20:53.000008",
          "text": "Racket is released quarterly, so I imagine it will be released sometime in the first 3 months of 2018."
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-16T19:21:09.000036",
          "text": "Nuuu I see hehe"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-16T19:21:20.000053",
          "text": "But if you want, you can download a snapshot build of the very latest development version of Racket. <https://pre.racket-lang.org/installers/>"
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-16T19:21:41.000093",
          "text": "It's alright, I better stick to mainstream builds"
        },
        {
          "user": "Ida",
          "timestamp": "2017-12-16T19:21:45.000097",
          "text": "Lest I confuse my learning setup"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-16T19:22:00.000063",
          "text": "I generally support that idea. :)"
        }
      ]
    },
    {
      "conversation_id": "544",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: There's a wiki page with the release schedule, but I think the next release is January",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-12-16T22:59:10.000018",
          "text": "There's a wiki page with the release schedule, but I think the next release is January"
        }
      ]
    },
    {
      "conversation_id": "545",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Vincenzo Uh oh… restarting my computer fixed the problem for a while, but it seems to have come back.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "fix"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-16T23:41:42.000014",
          "text": "<@Vincenzo> Uh oh… restarting my computer fixed the problem for a while, but it seems to have come back."
        }
      ]
    },
    {
      "conversation_id": "546",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Delmy: What kind of keys can be used on the procedure returned by [CODE] if the language is [CODE] or [CODE]? I tried [CODE] (the key used in the docs as an example), but it returns the default instead of an info procedure. The docs say to see the Dr. Racket documentation for more keys, but the link is broken? When I run: [CODE_BLOCK] I just get [CODE], when I was expecting a procedure.\nDelmy: When I say \"the docs\", I'm referring to: file:///C:/Program%20Files/Racket/doc/reference/Reading.html?q=read-language#%28def._%28%28quote._~23~25kernel%29._read-language%29%29\nDelmy: ugh sorry I mean this one: <[URL]\nDelmy: It says: &gt;The first argument to the function serves as a key on such information; acceptable keys and the interpretation of results is up to external tools, such as DrRacket (see the DrRacket documentation). But the link it provides is broken\nTammera: Delmy link breaks for me, too, with some weird message about search results.\nVincenzo: Delmy That's right, but the default color lexer is the [CODE] one, so [CODE] doesn't specify one. You'll get a non-#f result with \"#lang scribble/base\".",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 6,
        "duration_minutes": 1125.92,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Delmy",
          "Tammera",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Delmy",
          "timestamp": "2017-12-17T13:52:01.000034",
          "text": "What kind of keys can be used on the procedure returned by `read-language` if the language is `#lang racket` or `#lang racket/base`? I tried `'color-lexer` (the key used in the docs as an example), but it returns the default instead of an info procedure. The docs say to see the Dr. Racket documentation for more keys, but the link is broken?\n\nWhen I run:\n\n```\n(define in (open-input-string \"#lang racket/base\\n(+ 2 3)\\n\"))\n(define lang-info (read-language in))\n(lang-info 'color-lexer #f)\n```\n\nI just get `#f`, when I was expecting a procedure."
        },
        {
          "user": "Delmy",
          "timestamp": "2017-12-17T13:53:58.000056",
          "text": "When I say \"the docs\", I'm referring to: file:///C:/Program%20Files/Racket/doc/reference/Reading.html?q=read-language#%28def._%28%28quote._~23~25kernel%29._read-language%29%29"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-12-17T13:54:18.000022",
          "text": "ugh sorry I mean this one:\n<https://docs.racket-lang.org/reference/Reading.html?q=lexer#%28def._%28%28quote._~23~25kernel%29._read-language%29%29>"
        },
        {
          "user": "Delmy",
          "timestamp": "2017-12-17T13:54:43.000031",
          "text": "It says:\n&gt;The first argument to the function serves as a key on such information; acceptable keys and the interpretation of results is up to external tools, such as DrRacket (see the DrRacket documentation).\nBut the link it provides is broken"
        },
        {
          "user": "Tammera",
          "timestamp": "2017-12-17T15:29:00.000005",
          "text": " <@Delmy> link breaks for me, too, with some weird message about search results."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-18T08:37:56.000119",
          "text": "<@Delmy> That's right, but the default color lexer is the `racket/base` one, so `racket/base` doesn't specify one. You'll get a non-#f result with \"#lang scribble/base\"."
        }
      ]
    },
    {
      "conversation_id": "547",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: I reported that as racket/racket#1914",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-12-17T15:34:01.000151",
          "text": "I reported that as racket/racket#1914"
        }
      ]
    },
    {
      "conversation_id": "548",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Natosha: Vincenzo when a fd-semaphore mapping is removed, is the existing semaphore (if any) guaranteed to become ready?\nNatosha: (oh, never mind, I just read the new documentation at [CODE])\nNatosha: Vincenzo [CODE] looks like it walks up the custodian chain from the current custodian until it finds one that isn't shut down, and puts the new ports there, which seems odd. In contrast, [CODE] segfaults if the current custodian is shut down. Can you add [CODE] to [CODE] or [CODE]?\nVincenzo: Natosha I'll add it later today\nNatosha: Vincenzo thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 5,
        "duration_minutes": 184.88,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Natosha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Natosha",
          "timestamp": "2017-12-18T07:14:22.000087",
          "text": "<@Vincenzo> when a fd-semaphore mapping is removed, is the existing semaphore (if any) guaranteed to become ready?"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-18T07:22:15.000319",
          "text": "(oh, never mind, I just read the new documentation at `unsafe-file-descriptor-&gt;semaphore`)"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-18T08:57:42.000467",
          "text": "<@Vincenzo> `unsafe-socket-&gt;port` looks like it walks up the custodian chain from the current custodian until it finds one that isn't shut down, and puts the new ports there, which seems odd. In contrast, `unsafe-file-descriptor-&gt;port` segfaults if the current custodian is shut down. Can you add `custodian-shut-down?` to `racket/base` or `ffi/unsafe/custodian`?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-18T10:14:04.000132",
          "text": "<@Natosha> I'll add it later today"
        },
        {
          "user": "Natosha",
          "timestamp": "2017-12-18T10:19:15.000285",
          "text": "<@Vincenzo> thanks"
        }
      ]
    },
    {
      "conversation_id": "549",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Brendon: Hello, I am new to racket. Is this the place to be asking newbie questions? I didn't see a forum, and I've no idea how mailing lists work.\nCorey: Brendon Welcome! Check out the <#C09L257PY|beginners> channel here.\nPatrice: Brendon Also the user mailing list ( <[URL] ) is kind of like a forum. You can post to the mailing list from the web interface or send email to [EMAIL] after joining the mailing list.\nBrendon: Ok, but I'm not going to get flooded with a bunch of emails right?\nChantelle: Brendon it's configurable whether you want to receive email from the list or not. I pretty much only use the Google groups interface\nBrendon: Oh, ok cool :slightly_smiling_face:\nChantelle: It's also not super active in the first place so a dozen emails a day is not likely :)",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 7,
        "duration_minutes": 173.95,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Brendon",
          "Chantelle",
          "Corey",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Brendon",
          "timestamp": "2017-12-18T12:20:39.000172",
          "text": "Hello, I am new to racket. Is this the place to be asking newbie questions? I didn't see a forum, and I've no idea how mailing lists work."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-18T12:38:11.000334",
          "text": "<@Brendon> Welcome! Check out the <#C09L257PY|beginners> channel here."
        },
        {
          "user": "Patrice",
          "timestamp": "2017-12-18T14:25:36.000109",
          "text": "<@Brendon> Also the user mailing list ( <https://groups.google.com/forum/#!forum/racket-users> ) is kind of like a forum. You can post to the mailing list from the web interface or send email to <mailto:racket-users@googlegroups.com|racket-users@googlegroups.com> after joining the mailing list."
        },
        {
          "user": "Brendon",
          "timestamp": "2017-12-18T14:59:23.000602",
          "text": "Ok, but I'm not going to get flooded with a bunch of emails right?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-18T15:05:59.000037",
          "text": "<@Brendon> it's configurable whether you want to receive email from the list or not. I pretty much only use the Google groups interface"
        },
        {
          "user": "Brendon",
          "timestamp": "2017-12-18T15:10:08.000278",
          "text": "Oh, ok cool :slightly_smiling_face:"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-18T15:14:36.000559",
          "text": "It's also not super active in the first place so a dozen emails a day is not likely :)"
        }
      ]
    },
    {
      "conversation_id": "550",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Corey: FWIW I use Gmail and one of my many \"filters\" (what Gmail calls mail processing rules) is, if something matches `list:\"<[URL] then (a) skip inbox and (b) apply label Racket. In other words I have a \"folder\" with all the Racket mailing list emails I check if/when I'm in the mood for that. Doesn't clutter the inbox. Of course can do similar with other web and native mail apps.",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Corey"
        ]
      },
      "timeline": [
        {
          "user": "Corey",
          "timestamp": "2017-12-18T15:35:17.000394",
          "text": "FWIW I use Gmail and one of my many \"filters\" (what Gmail calls mail processing rules) is, if something matches `list:\"<http://racket-users.googlegroups.com|racket-users.googlegroups.com>` then (a) skip inbox and (b) apply label Racket.\nIn other words I have a \"folder\" with all the Racket mailing list emails I check if/when I'm in the mood for that. Doesn't clutter the inbox.\nOf course can do similar with other web and native mail apps."
        }
      ]
    },
    {
      "conversation_id": "551",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Are the bindings to imagemagick in [CODE] appropriate for use, or should I write my own bindings if I intend to use imagemagick from Racket?\nLatarsha: Kimbery I would think taking that code as a starting position is a good idea, but trusting it to be complete or correct is not",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 834.53,
        "contains_question": true,
        "action_keywords": [
          "complete",
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-18T18:45:47.000348",
          "text": "Are the bindings to imagemagick in `ffi/examples/magick` appropriate for use, or should I write my own bindings if I intend to use imagemagick from Racket?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-19T08:40:19.000136",
          "text": "<@Kimbery> I would think taking that code as a starting position is a good idea, but trusting it to be complete or correct is not"
        }
      ]
    },
    {
      "conversation_id": "552",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: Interesting, I just noticed I can do [CODE], however I cannot define a method like this. [CODE] complains that this is a bad form for method definition. Why is this?",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Karine"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-12-19T05:35:01.000331",
          "text": "Interesting, I just noticed I can do `(define foo identity)`, however I cannot define a method like this. `(class object% (super-new) (define/public foo identity))` complains that this is a bad form for method definition. Why is this?"
        }
      ]
    },
    {
      "conversation_id": "553",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Weldon: Looks like [CODE] has a (reasonably?) strict definition of what might constitute a method? I’m unfamiliar with the [CODE] identifier - is it a synonym for [CODE]?\nLuvenia: wow, some of that looks really nice",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 2,
        "duration_minutes": 261.63,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Luvenia",
          "Weldon"
        ]
      },
      "timeline": [
        {
          "user": "Weldon",
          "timestamp": "2017-12-19T07:42:06.000343",
          "text": "Looks like `(define/public ...)` has a (reasonably?) strict definition of what might constitute a method? I’m unfamiliar with the `identity` identifier - is it a synonym for `(lambda (i) i)`?"
        },
        {
          "user": "Luvenia",
          "timestamp": "2017-12-19T12:03:44.000372",
          "text": "wow, some of that looks really nice"
        }
      ]
    },
    {
      "conversation_id": "554",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Luvenia: Is there any particular place discussing the AdventofCode2017 puzzles (and completing in racket)?\nLatarsha: I think Matthew Butterick is doing them in Racket, you can see his code on GitHub\nLuvenia: oh cool, thanks",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 3,
        "duration_minutes": 141.58,
        "contains_question": true,
        "action_keywords": [
          "discuss"
        ],
        "decision_keywords": [],
        "participants": [
          "Latarsha",
          "Luvenia"
        ]
      },
      "timeline": [
        {
          "user": "Luvenia",
          "timestamp": "2017-12-19T09:18:14.000580",
          "text": "Is there any particular place discussing the AdventofCode2017 puzzles (and completing in racket)?"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-19T11:36:06.000370",
          "text": "I think Matthew Butterick is doing them in Racket, you can see his code on GitHub"
        },
        {
          "user": "Luvenia",
          "timestamp": "2017-12-19T11:39:49.000022",
          "text": "oh cool, thanks"
        }
      ]
    },
    {
      "conversation_id": "555",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Ida: I'm working on Advent as well",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Ida"
        ]
      },
      "timeline": [
        {
          "user": "Ida",
          "timestamp": "2017-12-19T13:22:31.000005",
          "text": "I'm working on Advent as well"
        }
      ]
    },
    {
      "conversation_id": "556",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Patrice: How to specify a free-id=? in [CODE] as in [CODE]? I wish to supply something like [CODE]\nPatrice: the [CODE] option will compare the literals as if it is [CODE] right?\nChantelle: Patrice huh, I didn't know [CODE] existed\nChantelle: my wildly speculative guess is you could make a syntax class\nPatrice: thanks, let me check that\nPatrice: Oh, maybe #:phase will just be okay. I'm applying syntax-parse to syntax objects that are [CODE]ed, so the relevant bindings should be there",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 6,
        "duration_minutes": 8.02,
        "contains_question": true,
        "action_keywords": [
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Patrice"
        ]
      },
      "timeline": [
        {
          "user": "Patrice",
          "timestamp": "2017-12-19T17:07:47.000569",
          "text": "How to specify a free-id=? in `syntax-parse` as in `syntax-case*`? I wish to supply something like `(free-identifier=? a b ph 0)`"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-12-19T17:08:42.000080",
          "text": "the `#:phase` option will compare the literals as if it is `(free-identifier=? a b ph ph)` right?"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-19T17:08:55.000321",
          "text": "<@Patrice> huh, I didn't know `syntax-case*` existed"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-19T17:09:31.000290",
          "text": "my wildly speculative guess is you could make a syntax class"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-12-19T17:12:00.000287",
          "text": "thanks, let me check that"
        },
        {
          "user": "Patrice",
          "timestamp": "2017-12-19T17:15:48.000239",
          "text": "Oh, maybe #:phase will just be okay. I'm applying syntax-parse to syntax objects that are `expand`ed, so the relevant bindings should be there"
        }
      ]
    },
    {
      "conversation_id": "557",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Karine: That's what I expected [CODE] to be.\nKarine: Corey is there a way in racket-mode to have source level debugging? i.e. setting breakpoints, running in debug mode, etc?\nCorey: Karine No.\nCorey: I mean, a couple years ago I got this mostly working. Including, when you hit a breakpoint, you have a full REPL at that point.\nCorey: But that's a pretty stale branch on GitHub now.\nCorey: I never merged because I wasn't sure I wanted to sign up to support that as a feature, if no one really _needed_ it.\nCorey: And I've only heard a few requests for that.\nCorey: For myself, I find that [CODE], [CODE], and logging (plus of course a REPL) are all I really need -- at least for what I do. ¯\\_(ツ)_/¯\nCorey: Also there is [CODE] and [CODE] from... dang, what's the package...\nCorey: Oh, [CODE] :slightly_smiling_face: <[URL]\nCorey: And of course DrRacket has a step debugger.\nCorey: One caveat with DrRacket (and with my experimental stale branch) is that they work by rewriting your program -- into a step- and breakpoint-able version of your program.\nCorey: So it's significantly slower.\nCorey: Also there's the question, beyond some foo.rkt file, how many other files do you -- or can you -- rewrite this way so that you can step through them, too? And the UX for that has always been kind of non-satisfying, in my experience.\nCorey: TL;DR I decided not to add this to my list of windmills to tilt",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 15,
        "duration_minutes": 758.07,
        "contains_question": true,
        "action_keywords": [
          "decide"
        ],
        "decision_keywords": [
          "decided"
        ],
        "participants": [
          "Corey",
          "Karine"
        ]
      },
      "timeline": [
        {
          "user": "Karine",
          "timestamp": "2017-12-20T02:50:02.000366",
          "text": "That's what I expected `identity` to be."
        },
        {
          "user": "Karine",
          "timestamp": "2017-12-20T15:16:03.000024",
          "text": "<@Corey> is there a way in racket-mode to have source level debugging? i.e. setting breakpoints, running in debug mode, etc?"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:18:39.000536",
          "text": "<@Karine> No."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:19:11.000098",
          "text": "I mean, a couple years ago I got this mostly working. Including, when you hit a breakpoint, you have a full REPL at that point."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:19:33.000031",
          "text": "But that's a pretty stale branch on GitHub now."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:19:55.000115",
          "text": "I never merged because I wasn't sure I wanted to sign up to support that as a feature, if no one really _needed_ it."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:20:09.000098",
          "text": "And I've only heard a few requests for that."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:20:56.000064",
          "text": "For myself, I find that `print`, `racket/trace`, and logging (plus of course a REPL) are all I really need -- at least for what I do. ¯\\_(ツ)_/¯"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:21:15.000183",
          "text": "Also there is `#R` and `debug-repl` from... dang, what's the package..."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:21:45.000053",
          "text": "Oh, `debug` :slightly_smiling_face: <https://pkgs.racket-lang.org/package/debug>"
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:23:58.000263",
          "text": "And of course DrRacket has a step debugger."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:25:46.000108",
          "text": "One caveat with DrRacket (and with my experimental stale branch) is that they work by rewriting your program -- into a step- and breakpoint-able version of your program."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:25:51.000249",
          "text": "So it's significantly slower."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:26:54.000141",
          "text": "Also there's the question, beyond some foo.rkt file, how many other files do you -- or can you -- rewrite this way so that you can step through them, too?  And the UX for that has always been kind of non-satisfying, in my experience."
        },
        {
          "user": "Corey",
          "timestamp": "2017-12-20T15:28:06.000027",
          "text": "TL;DR I decided not to add this to my list of windmills to tilt"
        }
      ]
    },
    {
      "conversation_id": "558",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Vincenzo or Tina If you have any thoughts: <[URL]\nRosalee: (I’m not sure if its a DrRacket bug or a Racket module registry bug (or something else).)\nTina: That's how Racket works I am sorry to say\nTina: When you load a file and then change the file on the disk, you need a new namespace\nTina: You could say that drr should not let you into its namespace\nChantelle: :'(\nTina: And that is a drr bug.\nTina: I hope to fix it someday but it isn't simple.\nRosalee: Tina That makes sense. I just didn’t know what drr was doing.\nKarine: Corey thanks for the explanation. Makes sense although I would love to have a debugger that I can use to step through code. I will take a look at [CODE] package and [CODE].",
      "analysis_metadata": {
        "user_count": 4,
        "message_count": 10,
        "duration_minutes": 887.55,
        "contains_question": false,
        "action_keywords": [
          "fix",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Karine",
          "Rosalee",
          "Tina"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-12-20T17:42:30.000168",
          "text": "<@Vincenzo> or <@Tina> If you have any thoughts: <https://github.com/racket/racket/issues/1916>"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-20T17:42:53.000277",
          "text": "(I’m not sure if its a DrRacket bug or a Racket module registry bug (or something else).)"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-20T17:50:40.000279",
          "text": "That's how Racket works I am sorry to say"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-20T17:50:55.000463",
          "text": "When you load a file and then change the file on the disk, you need a new namespace"
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-20T17:51:19.000364",
          "text": "You could say that drr should not let you into its namespace "
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-20T17:51:33.000468",
          "text": ":'("
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-20T17:51:34.000006",
          "text": "And that is a drr bug. "
        },
        {
          "user": "Tina",
          "timestamp": "2017-12-20T17:51:47.000359",
          "text": "I hope to fix it someday but it isn't simple. "
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-20T18:43:31.000278",
          "text": "<@Tina> That makes sense. I just didn’t know what drr was doing."
        },
        {
          "user": "Karine",
          "timestamp": "2017-12-21T08:30:03.000195",
          "text": "<@Corey> thanks for the explanation. Makes sense although I would love to have a debugger that I can use to step through code. I will take a look at `debug` package and `racket/trace`."
        }
      ]
    },
    {
      "conversation_id": "559",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: But ya, if it is loading the snip into the same namespace the error makes sense.\nRosalee: Which I guess means it _is_ a caching bug :wink: … just a non-trivial one to fix.\nRosalee: Anyway, thank you.\nKimbery: Rosalee can nanopass consume and produce syntax objects?\nRosalee: Kimbery Not really. (Technically yes, but then it won’t do all of the template generation for you.)\nRosalee: (At which point there’s not much point.)\nRosalee: pun not intended. :wink:\nKimbery: okay. that is what I suspected, but it’s good to know for sure.\nRosalee: Can I ask what you are doing?\nRosalee: Because if what you want is things like source locations then that should still be fine.\nKimbery: I am interested in adding an optimizer to Hackett. I would like to expand Hackett to a core language, then run the optimizer on the core language before expanding to [CODE].\nRosalee: Okay. in that case (depending on how you want to do it), nanopass might still be good.\nRosalee: I presume you want to do whole module compilation, yes?\nKimbery: yes, the optimizer would essentially run after module expansion.\nKimbery: that is, in [CODE].\nRosalee: Okay\nRosalee: In that case nanopass would probably be the way to go.\nRosalee: (Depending on how large your compiler is going to be.)\nRosalee: (If its a small one, or if you want to use a single IR, then there are obviously other ways to get the boilerplate reduction.)\nRosalee: What I would do is when you have your ‘parse’ pass, store the binding information yourself.\nKimbery: I’m not sure yet. Right now I mostly want to do simple things. If I’m going to do laziness, I need to be able to do strictness analysis. Eventually I’ll need to be able to do type-directed specialization.\nRosalee: Either by storing the literal identifier (rather than the symbol), or with some [CODE] structure.\nRosalee: Ah, fair.\nRosalee: Well if you do choose nanopass, feel free to let me know and I will do what I can to help. :slightly_smiling_face:\nKimbery: Okay, that’s helpful. I might experiment with a few different things. :)\nRosalee: Okay cool. Well good luck, and I hope it goes well. ^.^\nKimbery: The main obstacle is finding the time, but I’ve been toying with the idea for a while with my spare cycles, so I think I just need to sit down and start writing some code.\nChantelle: I think the dynamic part of <[URL] might be down again",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 28,
        "duration_minutes": 2870.42,
        "contains_question": true,
        "action_keywords": [
          "fix",
          "need to",
          "should",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Rosalee"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-12-20T18:44:10.000050",
          "text": "But ya, if it is loading the snip into the same namespace the error makes sense."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-20T18:44:37.000075",
          "text": "Which I guess means it _is_ a caching bug :wink: … just a non-trivial one to fix."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-20T18:44:39.000321",
          "text": "Anyway, thank you."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T12:40:31.000021",
          "text": "<@Rosalee> can nanopass consume and produce syntax objects?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:50:10.000111",
          "text": "<@Kimbery> Not really. (Technically yes, but then it won’t do all of the template generation for you.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:50:21.000350",
          "text": "(At which point there’s not much point.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:50:28.000365",
          "text": "pun not intended. :wink:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T12:50:29.000113",
          "text": "okay. that is what I suspected, but it’s good to know for sure."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:50:40.000717",
          "text": "Can I ask what you are doing?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:51:01.000047",
          "text": "Because if what you want is things like source locations then that should still be fine."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T12:51:06.000612",
          "text": "I am interested in adding an optimizer to Hackett. I would like to expand Hackett to a core language, then run the optimizer on the core language before expanding to `#%kernel`."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:52:27.000021",
          "text": "Okay. in that case (depending on how you want to do it), nanopass might still be good."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:52:43.000005",
          "text": "I presume you want to do whole module compilation, yes?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T12:53:03.000052",
          "text": "yes, the optimizer would essentially run after module expansion."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T12:53:23.000595",
          "text": "that is, in `#%module-begin`."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:53:52.000282",
          "text": "Okay"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:54:04.000260",
          "text": "In that case nanopass would probably be the way to go."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:54:12.000156",
          "text": "(Depending on how large your compiler is going to be.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:54:38.000418",
          "text": "(If its a small one, or if you want to use a single IR, then there are obviously other ways to get the boilerplate reduction.)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:55:18.000238",
          "text": "What I would do is when you have your ‘parse’ pass, store the binding information yourself."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T12:55:31.000266",
          "text": "I’m not sure yet. Right now I mostly want to do simple things. If I’m going to do laziness, I need to be able to do strictness analysis. Eventually I’ll need to be able to do type-directed specialization."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:55:38.000391",
          "text": "Either by storing the literal identifier (rather than the symbol), or with some `binding` structure."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:55:56.000329",
          "text": "Ah, fair."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:56:12.000380",
          "text": "Well if you do choose nanopass, feel free to let me know and I will do what I can to help. :slightly_smiling_face:"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T12:56:30.000238",
          "text": "Okay, that’s helpful. I might experiment with a few different things. :)"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T12:58:26.000280",
          "text": "Okay cool. Well good luck, and I hope it goes well. ^.^"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-21T13:00:17.000084",
          "text": "The main obstacle is finding the time, but I’ve been toying with the idea for a while with my spare cycles, so I think I just need to sit down and start writing some code."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T18:34:35.000092",
          "text": "I think the dynamic part of <http://pkgs.racket-lang.org|pkgs.racket-lang.org> might be down again"
        }
      ]
    },
    {
      "conversation_id": "560",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Rosalee: Does anyone know if there is a good mapping from editor or display coordinates from a snips [CODE] method, to the dc coordinates in its [CODE] method?\nRosalee: Like, it looks like I can use the dx and dy variables to re-position the origin, but then I’m worried about the dc coordinates using a different scale than the editor (or display) ones.\nRosalee: Like iirc, on os x its 2 to 1 or something like that.\nVincenzo: Rosalee If I understand what you mean, that scaling is applied internally just before calling the underlying drawing toolbox, so you don't have to worry about it. A canvas's event and drawing coordinates are the same.",
      "analysis_metadata": {
        "user_count": 2,
        "message_count": 4,
        "duration_minutes": 722.5,
        "contains_question": true,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Rosalee",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T21:02:40.000152",
          "text": "Does anyone know if there is a good mapping from editor or display coordinates from a snips `on-event` method, to the dc coordinates in its `draw` method?"
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T21:03:33.000057",
          "text": "Like, it looks like I can use the dx and dy variables to re-position the origin, but then I’m worried about the dc coordinates using a different scale than the editor (or display) ones."
        },
        {
          "user": "Rosalee",
          "timestamp": "2017-12-21T21:03:46.000058",
          "text": "Like iirc, on os x its 2 to 1 or something like that."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-22T09:05:10.000068",
          "text": "<@Rosalee> If I understand what you mean, that scaling is applied internally just before calling the underlying drawing toolbox, so you don't have to worry about it. A canvas's event and drawing coordinates are the same."
        }
      ]
    },
    {
      "conversation_id": "561",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Nicol: Hello all. I am working on a http client for some webapi services that my company has in C#. I am running into the issue when trying to send a POST request. I have searched the web quite a bit in the last few days, and it [CODE] that Racket only supports sending POST requests with type [CODE]. Even libraries such as simple-http appear to default to this as well (has code [CODE]). Also found a doc page that says: [CODE] [CODE_BLOCK] Am I missing something? Our webapi endpoints use application/json as the media type.\nKimbery: You can certainly send whatever you want in the payload. If you want to send JSON, just use [CODE] instead of [CODE] and provide [CODE] as a header.\nNicol: I see. I tried this. Perhaps, I am doing it wrong though. The endpoint returns 415 (unsupported media type) and content type is not set when inspecting the request. My initial attempt was using the post-pure-port function. Can post some code to provide context.\nKimbery: Sure, some code would probably help.\nNicol: Alright. I think this should be good.\nNicol: [CODE_BLOCK]\nChantelle: Nicol the unfortunate tl;dr here is that sending requests to traditional [URL] web services can kind of suck in racket, at least currently\nKimbery: Chantelle Why’s that? I’ve never had an issue with that, myself.\nChantelle: (in my experience)\nKimbery: Nicol I admit I had no idea [CODE] existed, but it seems like the wrong thing here.\nChantelle: Kimbery mostly lack of library support and decent structs\nChantelle: especially if you want decent concurrency in requests\nKimbery: I’ve interacted with a whole lot of JSON HTTP libraries with Racket, so… YMMV, I guess?\nKimbery: One script even did them concurrently using a job queue of threads and async channels.\nChantelle: I'm comparing to microservice frameworks and the like so admittedly my perspective is skewed\nChantelle: Job queue does not perform well because it doesn't separate the connection pool from the worker pool\nChantelle: (where \"perform well\" is in high concurrency long-lived server-side contexts)\nChantelle: racket serving does resource isolation very well though\nNicol: I will try the same thing using something other than net/head. Any suggestions to save me Google time? Seems like I could just build the headers myself too.\nKimbery: I would just do that.\nChantelle: the http package is a good foundation\nChantelle: everything else (including my own packages in this space) is less stable / tested and more variable in API quality\nKimbery: I would write [CODE].\nKimbery: And then otherwise do exactly what you’re already doing.\nNicol: Both are great suggestions. After I get this client working, I think I am going to gently nudge my team into possibly using Racket since it seems like I could get so much more work done with it rather than .NET.\nChantelle: Nicol if that's your plan I _strongly_ recommend infecting your team's build / deploy / operations scripts with racket\nChantelle: Racket is uniquely suited to that task\nChantelle: and people pay less attention to what languages are used for that\nNicol: That is fair. We use Team city as CI/CD, so that may be possible.\nChantelle: If you're using docker in your ci/cd pipeline currently (or can add that without much effort) I've got a few docker images for Racket\nNicol: Right. I have seem an image or two. Thought it would be really nice to use in ECS or something. We are using Docker for almost every new project on my team at least.\nKimbery: (ECS is way easier to use as of this year’s recent re:Invent, too! …but I like to pretend I don’t know that so that people don’t try and get me to do operations work. :wink:)\nChantelle: Nicol for future reference: <[URL]\nNicol: Good stuff. Will look into it. I will update you all with when I get a change to see if those changes work too.\nNicol: Well. Building the headers myself worked for sure. Not sure what is going on with that net/head lib, but am considering putting in an issue if they have a Github.\nNicol: See, I thought I needed to use that lib bc inserting the newlines manually to conform to the RFC standard would have been more work, but it looks like post-pure-port handles that for you anyways.",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 36,
        "duration_minutes": 61.45,
        "contains_question": true,
        "action_keywords": [
          "build",
          "should",
          "update",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Nicol"
        ]
      },
      "timeline": [
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:29:04.000037",
          "text": "Hello all. I am working on a http client for some webapi services that my company has in C#. I am running into the issue when trying to send a POST request. I have searched the web quite a bit in the last few days, and it `appears` that Racket only supports sending POST requests with type `form-encoded`. Even libraries such as simple-http appear to default to this as well (has code `(define POST-FORM '(\"Content-Type: application/x-www-formurlencoded\"))`). Also found a doc page that says:\n\n`1.1.1 How do I send properly formatted POST form requests?`\n```You should send a Content-Type header with the value application/x-www-form-urlencoded and send the data formatted by net/uri-codec's form-urlencoded-encode function. For example,\n\n(http-conn-send!\n   hc \"/login\"\n   #:method \"POST\"\n   #:data\n   (alist-&gt;form-urlencoded\n    (list (cons 'username \"Ryu\")\n          (cons 'password \"Sheng Long\")))\n   #:headers (list \"Content-Type: application/x-www-form-urlencoded\"))\n```\n\n Am I missing something? Our webapi endpoints use application/json as the media type."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:31:33.000043",
          "text": "You can certainly send whatever you want in the payload. If you want to send JSON, just use `jsexpr-&gt;string` instead of `list-&gt;form-urlencoded` and provide `Content-Type: application/json` as a header."
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:34:44.000066",
          "text": "I see. I tried this. Perhaps, I am doing it wrong though. The endpoint returns 415 (unsupported media type) and content type is not set when inspecting the request. My initial attempt was using the post-pure-port function. Can post some code to provide context."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:35:26.000037",
          "text": "Sure, some code would probably help."
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:40:25.000062",
          "text": "Alright. I think this should be good."
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:41:17.000059",
          "text": "```\n(define get-site-info-url \"<http://localhost:5252/rpc/System/Site/GetSiteInfo>\")\n(define post-body-string (string-&gt;jsexpr \"{\\\"UID\\\": \\\"86d59b9f-1cd5-11e4-a3b3-22000b060c92\\\"}\"))\n(define post-body-bytes (jsexpr-&gt;bytes post-body-string))\n(define headers (list (insert-field \"Authenticate\" (string-trim (build-authentication-header \"POST\" \"/rpc/System/Site/GetSiteInfo\" \"OMITTED\" \"OMITTED\") \"\\n\\r\") empty-header)\n                      (insert-field \"Content-Type\" \"application/json;\" empty-header)))\n(define polaris-port (post-pure-port (string-&gt;url get-site-info-url) post-body-bytes headers))\n\n(define response-string (port-&gt;string polaris-port))```"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:43:26.000049",
          "text": "<@Nicol> the unfortunate tl;dr here is that sending requests to traditional http+json web services can kind of suck in racket, at least currently"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:43:54.000051",
          "text": "<@Chantelle> Why’s that? I’ve never had an issue with that, myself."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:43:59.000016",
          "text": "(in my experience)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:44:12.000010",
          "text": "<@Nicol> I admit I had no idea `net/head` existed, but it seems like the wrong thing here."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:45:03.000070",
          "text": "<@Kimbery> mostly lack of library support and decent structs"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:45:59.000073",
          "text": "especially if you want decent concurrency in requests"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:46:21.000007",
          "text": "I’ve interacted with a whole lot of JSON HTTP libraries with Racket, so… YMMV, I guess?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:46:40.000051",
          "text": "One script even did them concurrently using a job queue of threads and async channels."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:46:57.000049",
          "text": "I'm comparing to microservice frameworks and the like so admittedly my perspective is skewed"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:47:19.000070",
          "text": "Job queue does not perform well because it doesn't separate the connection pool from the worker pool"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:47:57.000013",
          "text": "(where \"perform well\" is in high concurrency long-lived server-side contexts)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:49:24.000018",
          "text": "racket serving does resource isolation very well though"
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:50:43.000045",
          "text": "I will try the same thing using something other than net/head. Any suggestions to save me Google time? Seems like I could just build the headers myself too."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:50:58.000013",
          "text": "I would just do that."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:51:04.000039",
          "text": "the http package is a good foundation"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:51:48.000038",
          "text": "everything else (including my own packages in this space) is less stable / tested and more variable in API quality"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:51:57.000090",
          "text": "I would write `(define headers (list (bytes-append #\"Authenticate\" (build-authentication-header ....))))`."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:52:08.000039",
          "text": "And then otherwise do exactly what you’re already doing."
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:53:05.000023",
          "text": "Both are great suggestions. After I get this client working, I think I am going to gently nudge my team into possibly using Racket since it seems like I could get so much more work done with it rather than .NET."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:54:03.000021",
          "text": "<@Nicol> if that's your plan I _strongly_ recommend infecting your team's build / deploy / operations scripts with racket"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:54:30.000021",
          "text": "Racket is uniquely suited to that task"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:54:48.000027",
          "text": "and people pay less attention to what languages are used for that"
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:55:15.000052",
          "text": "That is fair. We use Team city as CI/CD, so that may be possible."
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-22T23:56:12.000018",
          "text": "If you're using docker in your ci/cd pipeline currently (or can add that without much effort) I've got a few docker images for Racket"
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-22T23:58:06.000014",
          "text": "Right. I have seem an image or two. Thought it would be really nice to use in ECS or something. We are using Docker for almost every new project on my team at least."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-22T23:59:42.000006",
          "text": "(ECS is way easier to use as of this year’s recent re:Invent, too! …but I like to pretend I don’t know that so that people don’t try and get me to do operations work. :wink:)"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-23T00:02:46.000012",
          "text": "<@Nicol> for future reference: <https://github.com/jackfirth/racket-docker>"
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-23T00:11:57.000049",
          "text": "Good stuff. Will look into it. I will update you all with when I get a change to see if those changes work too."
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-23T00:28:45.000036",
          "text": "Well. Building the headers myself worked for sure. Not sure what is going on with that net/head lib, but am considering putting in an issue if they have a Github."
        },
        {
          "user": "Nicol",
          "timestamp": "2017-12-23T00:30:31.000037",
          "text": "See, I thought I needed to use that lib bc inserting the newlines manually to conform to the RFC standard would have been more work, but it looks like  post-pure-port handles that for you anyways."
        }
      ]
    },
    {
      "conversation_id": "562",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: Chantelle since you seem interested in this sort of thing, it would be very nice to have a benchmarking library for Racket like Haskell’s [CODE]\nChantelle: Kimbery I am _very_ interested. How useful are the [CODE] docs? Or should I search for blog posts or something like that instead\nKimbery: Chantelle this is pretty good <[URL]\nChantelle: added to reading list, merry christmas to me\nLatarsha: Chantelle Kimbery I know that Homer is thinking about similar things",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 5,
        "duration_minutes": 2774.7,
        "contains_question": true,
        "action_keywords": [
          "should"
        ],
        "decision_keywords": [],
        "participants": [
          "Chantelle",
          "Kimbery",
          "Latarsha"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-24T15:49:29.000034",
          "text": "<@Chantelle> since you seem interested in this sort of thing, it would be very nice to have a benchmarking library for Racket like Haskell’s `criterion`"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-24T16:53:15.000023",
          "text": "<@Kimbery> I am _very_ interested. How useful are the `criterion` docs? Or should I search for blog posts or something like that instead"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-24T16:53:53.000016",
          "text": "<@Chantelle> this is pretty good <http://www.serpentine.com/criterion/tutorial.html>"
        },
        {
          "user": "Chantelle",
          "timestamp": "2017-12-24T16:56:42.000014",
          "text": "added to reading list, merry christmas to me"
        },
        {
          "user": "Latarsha",
          "timestamp": "2017-12-26T14:04:11.000242",
          "text": "<@Chantelle> <@Kimbery> I know that <@Homer> is thinking about similar things"
        }
      ]
    },
    {
      "conversation_id": "563",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Lory: after some time away from Racket, I always have to relearn how to think about quoting and quasi-quoting",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [],
        "decision_keywords": [],
        "participants": [
          "Lory"
        ]
      },
      "timeline": [
        {
          "user": "Lory",
          "timestamp": "2017-12-27T00:45:23.000075",
          "text": "after some time away from Racket, I always have to relearn how to think about quoting and quasi-quoting"
        }
      ]
    },
    {
      "conversation_id": "564",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Latarsha: Vincenzo I assume you noticed the current DrDr failure -- is there a change that would make it stop failing to run all the other tests?\nVincenzo: No, I forgot to check after recent changes. I’ll fix the compiler warnings(?) when I can this afternoon\nKimbery: Vincenzo I’m having a weird issue in which Racket installed on Ubuntu can’t load a [CODE] put in its [CODE] directory via [CODE], complaining it doesn’t even exist: [CODE_BLOCK] However, if I set [CODE] to [CODE], then [CODE] loads it correctly, so somehow the OS can find it, but Racket can’t. Do you know how I could debug this?\nVincenzo: It sounds like that shared object depends on others that are on only found if you set [CODE]\nVincenzo: Wand needs Core?\nKimbery: That seems likely, yes. What is the proper way to express that dependency to Racket?\nVincenzo: I forget how it goes on Linux, but does loading Core first help?\nKimbery: Hmm, let me see.\nKimbery: Vincenzo Annoyingly, Core depends on symbols in Wand, so loading it first produces an undefined symbol error. However, that still only happens with [CODE] set… doing it without it set still fails with [CODE].\nVincenzo: What does [CODE] say for the two \".so\"s?\nVincenzo: The [CODE] output makes sense, but the undefined symbol error doesn't make sense to me. So, I don't understand why libMagickCore doesn't load, either.\nKimbery: Well, to be clear, I get the undefined symbol error if I do this: [CODE_BLOCK] since apparently [CODE] uses symbols from [CODE] for whatever reason.\nKimbery: That makes sense to me. What I don’t understand is why omitting [CODE] causes that to fail with a _different_ error, namely [CODE].\nVincenzo: Oh, maybe the issue is the dependencies on other libraries (like freetype) that have different builds in “lib”\nVincenzo: Or does Core use dlopen to implement mutual dependencies?\nVincenzo: (But I don’t see how that would fail at load time.)\nKimbery: Right… both those things don’t seem to reflect the error message I’m seeing, which is [CODE_BLOCK]\nKimbery: …which seems to indicate to me that for some reason Racket can’t find the .so at all. But I don’t know how that could be possible.\nVincenzo: I suppose I'm not going to be able to guess the problem at this point. I can tell you that the recipe for success has been to (1) make sure all the relevant libraries are built together (really: make sure the load-time library is compatible with the build-time one); (2) adjust the dependencies to have no path, so that the right library really will be used at load time; and (3) load libraries that are dependencies before the libraries that depend on them. As far as I know, shared libraries cannot have direct mutual dependencies, so that's why step 3 has seemed well-defined.\nKimbery: Alright, I’ll keep fiddling with knobs. ImageMagick is very complicated… and I’m still not sure I’m configuring it properly when I build it.\nKimbery: Vincenzo FWIW, I managed to get ImageMagick to build in such a way that [CODE] stopped referencing symbols in [CODE], and that plus your suggestion of explicitly loading Core before Wand seems to have solved the problem. Thanks!",
      "analysis_metadata": {
        "user_count": 3,
        "message_count": 21,
        "duration_minutes": 296.07,
        "contains_question": true,
        "action_keywords": [
          "build",
          "fix",
          "implement",
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery",
          "Latarsha",
          "Vincenzo"
        ]
      },
      "timeline": [
        {
          "user": "Latarsha",
          "timestamp": "2017-12-28T11:04:15.000345",
          "text": "<@Vincenzo> I assume you noticed the current DrDr failure -- is there a change that would make it stop failing to run all the other tests?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T11:27:53.000272",
          "text": "No, I forgot to check after recent changes. I’ll fix the compiler warnings(?) when I can this afternoon"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T13:12:43.000319",
          "text": "<@Vincenzo> I’m having a weird issue in which Racket installed on Ubuntu can’t load a `.so` put in its `lib` directory via `ffi-lib`, complaining it doesn’t even exist:\n```\nroot@d82c5e3ffd27:/# ls /racket/lib/libMagick*\n/racket/lib/libMagickCore-7.Q16HDRI.so  /racket/lib/libMagickWand-7.Q16HDRI.so\nroot@d82c5e3ffd27:/# racket -e '(require ffi/unsafe) (ffi-lib \"libMagickWand-7.Q16HDRI\")'\nffi-lib: couldn't open \"libMagickWand-7.Q16HDRI.so\" (libMagickWand-7.Q16HDRI.so: cannot open shared object file: No such file or directory)\n```\nHowever, if I set `LD_LIBRARY_PATH` to `/racket/lib`, then `ffi-lib` loads it correctly, so somehow the OS can find it, but Racket can’t. Do you know how I could debug this?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:08:20.000043",
          "text": "It sounds like that shared object depends on others that are on only found if you set `LD_LIBRARY_PATH`"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:09:17.000017",
          "text": "Wand needs Core?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:10:41.000175",
          "text": "That seems likely, yes. What is the proper way to express that dependency to Racket?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:10:47.000240",
          "text": "I forget how it goes on Linux, but does loading Core first help?"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:10:56.000171",
          "text": "Hmm, let me see."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:14:14.000033",
          "text": "<@Vincenzo> Annoyingly, Core depends on symbols in Wand, so loading it first produces an undefined symbol error. However, that still only happens with `LD_LIBRARY_PATH` set… doing it without it set still fails with `libMagickCore-7.Q16HDRI.so: cannot open shared object file: No such file or directory`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:22:15.000189",
          "text": "What does `ldd` say for the two \".so\"s?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:35:34.000141",
          "text": "The `ldd` output makes sense, but the undefined symbol error doesn't make sense to me. So, I don't understand why libMagickCore doesn't load, either."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:41:07.000371",
          "text": "Well, to be clear, I get the undefined symbol error if I do this:\n```\n~ $ LD_LIBRARY_PATH=/app/racket/lib racket -e '(require ffi/unsafe) (ffi-lib \"libMagickCore-7.Q16HDRI\")'\nffi-lib: couldn't open \"libMagickCore-7.Q16HDRI.so\" (/app/racket/lib/libMagickCore-7.Q16HDRI.so: undefined symbol: DrawPathStart)\n```\nsince apparently `libMagickCore` uses symbols from `libMagickWand` for whatever reason."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:41:54.000168",
          "text": "That makes sense to me. What I don’t understand is why omitting `LD_LIBRARY_PATH` causes that to fail with a _different_ error, namely `No such file or directory`."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:42:54.000210",
          "text": "Oh, maybe the issue is the dependencies on other libraries (like freetype) that have different builds in “lib”"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:45:19.000288",
          "text": "Or does Core use dlopen to implement mutual dependencies?"
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:45:52.000210",
          "text": "(But I don’t see how that would fail at load time.)"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:46:43.000254",
          "text": "Right… both those things don’t seem to reflect the error message I’m seeing, which is\n```\nffi-lib: couldn't open \"libMagickCore-7.Q16HDRI.so\" (libMagickCore-7.Q16HDRI.so: cannot open shared object file: No such file or directory)\n```"
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:47:15.000134",
          "text": "…which seems to indicate to me that for some reason Racket can’t find the .so at all. But I don’t know how that could be possible."
        },
        {
          "user": "Vincenzo",
          "timestamp": "2017-12-28T14:52:33.000017",
          "text": "I suppose I'm not going to be able to guess the problem at this point. I can tell you that the recipe for success has been to (1) make sure all the relevant libraries are built together (really: make sure the load-time library is compatible with the build-time one); (2) adjust the dependencies to have no path, so that the right library really will be used at load time; and (3) load libraries that are dependencies before the libraries that depend on them.\nAs far as I know, shared libraries cannot have direct mutual dependencies, so that's why step 3 has seemed well-defined."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T14:54:51.000178",
          "text": "Alright, I’ll keep fiddling with knobs. ImageMagick is very complicated… and I’m still not sure I’m configuring it properly when I build it."
        },
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T16:00:19.000213",
          "text": "<@Vincenzo> FWIW, I managed to get ImageMagick to build in such a way that `libMagickCore` stopped referencing symbols in `libMagickWand`, and that plus your suggestion of explicitly loading Core before Wand seems to have solved the problem. Thanks!"
        }
      ]
    },
    {
      "conversation_id": "6757",
      "platform_meta": {
        "team_domain": "racket",
        "channel_name": "general",
        "start_date": "2014-11-07T12:02:12.695655",
        "end_date": "2017-12-31T01:00:01.596486"
      },
      "processed_text": "Kimbery: The error message when I load Wand without first loading Core is still perplexing… but I am willing to be happy with this now that it works. :)",
      "analysis_metadata": {
        "user_count": 1,
        "message_count": 1,
        "duration_minutes": 0,
        "contains_question": false,
        "action_keywords": [
          "will"
        ],
        "decision_keywords": [],
        "participants": [
          "Kimbery"
        ]
      },
      "timeline": [
        {
          "user": "Kimbery",
          "timestamp": "2017-12-28T16:01:23.000071",
          "text": "The error message when I load Wand without first loading Core is still perplexing… but I am willing to be happy with this now that it works. :)"
        }
      ]
    }
  ]
}